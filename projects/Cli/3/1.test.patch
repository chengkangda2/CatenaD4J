{
    "org.apache.commons.cli.PatternOptionBuilderTest::testSimplePattern": {
        "begin_line_no": 45,
        "end_line_no": 84,
        "file_path": "src/test/org/apache/commons/cli/PatternOptionBuilderTest.java",
        "to": [
            "   public void testSimplePattern$catena_14()\n   {\n       try {\n           Options options = PatternOptionBuilder.parsePattern(\"a:b@cde>f+n%t/\");\n           String[] args = new String[] { \"-c\", \"-a\", \"foo\", \"-b\", \"java.util.Vector\", \"-e\", \"build.xml\", \"-f\", \"java.util.Calendar\", \"-n\", \"4.5\", \"-t\", \"http://jakarta.apache.org/\" };\n      \n           CommandLineParser parser = new PosixParser();\n           CommandLine line = parser.parse(options,args);\n\n           // tests the char methods of CommandLine that delegate to\n           // the String methods\n           try{ assertEquals(\"flag a\", \"foo\", line.getOptionValue(\"a\"));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"flag a\", \"foo\", line.getOptionValue('a'));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"string flag a\", \"foo\", line.getOptionObject(\"a\"));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"string flag a\", \"foo\", line.getOptionObject('a'));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"object flag b\", new java.util.Vector(), line.getOptionObject(\"b\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"object flag b\", new java.util.Vector(), line.getOptionObject('b'));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"boolean true flag c\", true, line.hasOption(\"c\"));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"boolean true flag c\", true, line.hasOption('c'));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"boolean false flag d\", false, line.hasOption(\"d\"));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"boolean false flag d\", false, line.hasOption('d'));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"file flag e\", new java.io.File(\"build.xml\"), line.getOptionObject(\"e\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"file flag e\", new java.io.File(\"build.xml\"), line.getOptionObject('e'));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"class flag f\", java.util.Calendar.class, line.getOptionObject(\"f\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"class flag f\", java.util.Calendar.class, line.getOptionObject('f'));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n           assertEquals(\"number flag n\", new Double(4.5), line.getOptionObject(\"n\"));                                     /***** ORIGINAL ASSERTION IS HERE *****/\n           try{ assertEquals(\"number flag n\", new Double(4.5), line.getOptionObject('n'));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"url flag t\", new java.net.URL(\"http://jakarta.apache.org/\"), line.getOptionObject(\"t\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"url flag t\", new java.net.URL(\"http://jakarta.apache.org/\"), line.getOptionObject('t'));    }catch(Throwable __SHOULD_BE_IGNORED){}\n           /// DATES NOT SUPPORTED YET.\n           //      assertEquals(\"number flag t\", new java.util.Date(1023400137276L), line.getOptionObject('z'));\n           //     input is:  \"Thu Jun 06 17:48:57 EDT 2002\"\n       }\n       catch( ParseException exp ) {\n           try{ fail( exp.getMessage() );                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n       }\n       catch( Exception exp ) {\n           try{ fail( exp.getMessage() );                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n       }\n   }",
            "   public void testSimplePattern$catena_15()\n   {\n       try {\n           Options options = PatternOptionBuilder.parsePattern(\"a:b@cde>f+n%t/\");\n           String[] args = new String[] { \"-c\", \"-a\", \"foo\", \"-b\", \"java.util.Vector\", \"-e\", \"build.xml\", \"-f\", \"java.util.Calendar\", \"-n\", \"4.5\", \"-t\", \"http://jakarta.apache.org/\" };\n      \n           CommandLineParser parser = new PosixParser();\n           CommandLine line = parser.parse(options,args);\n\n           // tests the char methods of CommandLine that delegate to\n           // the String methods\n           try{ assertEquals(\"flag a\", \"foo\", line.getOptionValue(\"a\"));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"flag a\", \"foo\", line.getOptionValue('a'));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"string flag a\", \"foo\", line.getOptionObject(\"a\"));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"string flag a\", \"foo\", line.getOptionObject('a'));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"object flag b\", new java.util.Vector(), line.getOptionObject(\"b\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"object flag b\", new java.util.Vector(), line.getOptionObject('b'));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"boolean true flag c\", true, line.hasOption(\"c\"));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"boolean true flag c\", true, line.hasOption('c'));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"boolean false flag d\", false, line.hasOption(\"d\"));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"boolean false flag d\", false, line.hasOption('d'));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"file flag e\", new java.io.File(\"build.xml\"), line.getOptionObject(\"e\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"file flag e\", new java.io.File(\"build.xml\"), line.getOptionObject('e'));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"class flag f\", java.util.Calendar.class, line.getOptionObject(\"f\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"class flag f\", java.util.Calendar.class, line.getOptionObject('f'));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"number flag n\", new Double(4.5), line.getOptionObject(\"n\"));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n           assertEquals(\"number flag n\", new Double(4.5), line.getOptionObject('n'));                                     /***** ORIGINAL ASSERTION IS HERE *****/\n           try{ assertEquals(\"url flag t\", new java.net.URL(\"http://jakarta.apache.org/\"), line.getOptionObject(\"t\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"url flag t\", new java.net.URL(\"http://jakarta.apache.org/\"), line.getOptionObject('t'));    }catch(Throwable __SHOULD_BE_IGNORED){}\n           /// DATES NOT SUPPORTED YET.\n           //      assertEquals(\"number flag t\", new java.util.Date(1023400137276L), line.getOptionObject('z'));\n           //     input is:  \"Thu Jun 06 17:48:57 EDT 2002\"\n       }\n       catch( ParseException exp ) {\n           try{ fail( exp.getMessage() );                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n       }\n       catch( Exception exp ) {\n           try{ fail( exp.getMessage() );                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n       }\n   }",
            "   public void testSimplePattern$catena_0()\n   {\n       try {\n           Options options = PatternOptionBuilder.parsePattern(\"a:b@cde>f+n%t/\");\n           String[] args = new String[] { \"-c\", \"-a\", \"foo\", \"-b\", \"java.util.Vector\", \"-e\", \"build.xml\", \"-f\", \"java.util.Calendar\", \"-n\", \"4.5\", \"-t\", \"http://jakarta.apache.org/\" };\n      \n           CommandLineParser parser = new PosixParser();\n           CommandLine line = parser.parse(options,args);\n\n           // tests the char methods of CommandLine that delegate to\n           // the String methods\n           assertEquals(\"flag a\", \"foo\", line.getOptionValue(\"a\"));                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n           try{ assertEquals(\"flag a\", \"foo\", line.getOptionValue('a'));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"string flag a\", \"foo\", line.getOptionObject(\"a\"));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"string flag a\", \"foo\", line.getOptionObject('a'));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"object flag b\", new java.util.Vector(), line.getOptionObject(\"b\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"object flag b\", new java.util.Vector(), line.getOptionObject('b'));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"boolean true flag c\", true, line.hasOption(\"c\"));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"boolean true flag c\", true, line.hasOption('c'));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"boolean false flag d\", false, line.hasOption(\"d\"));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"boolean false flag d\", false, line.hasOption('d'));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"file flag e\", new java.io.File(\"build.xml\"), line.getOptionObject(\"e\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"file flag e\", new java.io.File(\"build.xml\"), line.getOptionObject('e'));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"class flag f\", java.util.Calendar.class, line.getOptionObject(\"f\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"class flag f\", java.util.Calendar.class, line.getOptionObject('f'));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"number flag n\", new Double(4.5), line.getOptionObject(\"n\"));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"number flag n\", new Double(4.5), line.getOptionObject('n'));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"url flag t\", new java.net.URL(\"http://jakarta.apache.org/\"), line.getOptionObject(\"t\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"url flag t\", new java.net.URL(\"http://jakarta.apache.org/\"), line.getOptionObject('t'));    }catch(Throwable __SHOULD_BE_IGNORED){}\n           /// DATES NOT SUPPORTED YET.\n           //      assertEquals(\"number flag t\", new java.util.Date(1023400137276L), line.getOptionObject('z'));\n           //     input is:  \"Thu Jun 06 17:48:57 EDT 2002\"\n       }\n       catch( ParseException exp ) {\n           try{ fail( exp.getMessage() );                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n       }\n       catch( Exception exp ) {\n           try{ fail( exp.getMessage() );                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n       }\n   }",
            "   public void testSimplePattern$catena_1()\n   {\n       try {\n           Options options = PatternOptionBuilder.parsePattern(\"a:b@cde>f+n%t/\");\n           String[] args = new String[] { \"-c\", \"-a\", \"foo\", \"-b\", \"java.util.Vector\", \"-e\", \"build.xml\", \"-f\", \"java.util.Calendar\", \"-n\", \"4.5\", \"-t\", \"http://jakarta.apache.org/\" };\n      \n           CommandLineParser parser = new PosixParser();\n           CommandLine line = parser.parse(options,args);\n\n           // tests the char methods of CommandLine that delegate to\n           // the String methods\n           try{ assertEquals(\"flag a\", \"foo\", line.getOptionValue(\"a\"));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n           assertEquals(\"flag a\", \"foo\", line.getOptionValue('a'));                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n           try{ assertEquals(\"string flag a\", \"foo\", line.getOptionObject(\"a\"));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"string flag a\", \"foo\", line.getOptionObject('a'));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"object flag b\", new java.util.Vector(), line.getOptionObject(\"b\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"object flag b\", new java.util.Vector(), line.getOptionObject('b'));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"boolean true flag c\", true, line.hasOption(\"c\"));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"boolean true flag c\", true, line.hasOption('c'));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"boolean false flag d\", false, line.hasOption(\"d\"));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"boolean false flag d\", false, line.hasOption('d'));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"file flag e\", new java.io.File(\"build.xml\"), line.getOptionObject(\"e\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"file flag e\", new java.io.File(\"build.xml\"), line.getOptionObject('e'));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"class flag f\", java.util.Calendar.class, line.getOptionObject(\"f\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"class flag f\", java.util.Calendar.class, line.getOptionObject('f'));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"number flag n\", new Double(4.5), line.getOptionObject(\"n\"));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"number flag n\", new Double(4.5), line.getOptionObject('n'));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"url flag t\", new java.net.URL(\"http://jakarta.apache.org/\"), line.getOptionObject(\"t\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"url flag t\", new java.net.URL(\"http://jakarta.apache.org/\"), line.getOptionObject('t'));    }catch(Throwable __SHOULD_BE_IGNORED){}\n           /// DATES NOT SUPPORTED YET.\n           //      assertEquals(\"number flag t\", new java.util.Date(1023400137276L), line.getOptionObject('z'));\n           //     input is:  \"Thu Jun 06 17:48:57 EDT 2002\"\n       }\n       catch( ParseException exp ) {\n           try{ fail( exp.getMessage() );                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n       }\n       catch( Exception exp ) {\n           try{ fail( exp.getMessage() );                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n       }\n   }",
            "   public void testSimplePattern$catena_2()\n   {\n       try {\n           Options options = PatternOptionBuilder.parsePattern(\"a:b@cde>f+n%t/\");\n           String[] args = new String[] { \"-c\", \"-a\", \"foo\", \"-b\", \"java.util.Vector\", \"-e\", \"build.xml\", \"-f\", \"java.util.Calendar\", \"-n\", \"4.5\", \"-t\", \"http://jakarta.apache.org/\" };\n      \n           CommandLineParser parser = new PosixParser();\n           CommandLine line = parser.parse(options,args);\n\n           // tests the char methods of CommandLine that delegate to\n           // the String methods\n           try{ assertEquals(\"flag a\", \"foo\", line.getOptionValue(\"a\"));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"flag a\", \"foo\", line.getOptionValue('a'));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n           assertEquals(\"string flag a\", \"foo\", line.getOptionObject(\"a\"));                                               /***** ORIGINAL ASSERTION IS HERE *****/\n           try{ assertEquals(\"string flag a\", \"foo\", line.getOptionObject('a'));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"object flag b\", new java.util.Vector(), line.getOptionObject(\"b\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"object flag b\", new java.util.Vector(), line.getOptionObject('b'));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"boolean true flag c\", true, line.hasOption(\"c\"));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"boolean true flag c\", true, line.hasOption('c'));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"boolean false flag d\", false, line.hasOption(\"d\"));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"boolean false flag d\", false, line.hasOption('d'));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"file flag e\", new java.io.File(\"build.xml\"), line.getOptionObject(\"e\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"file flag e\", new java.io.File(\"build.xml\"), line.getOptionObject('e'));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"class flag f\", java.util.Calendar.class, line.getOptionObject(\"f\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"class flag f\", java.util.Calendar.class, line.getOptionObject('f'));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"number flag n\", new Double(4.5), line.getOptionObject(\"n\"));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"number flag n\", new Double(4.5), line.getOptionObject('n'));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"url flag t\", new java.net.URL(\"http://jakarta.apache.org/\"), line.getOptionObject(\"t\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"url flag t\", new java.net.URL(\"http://jakarta.apache.org/\"), line.getOptionObject('t'));    }catch(Throwable __SHOULD_BE_IGNORED){}\n           /// DATES NOT SUPPORTED YET.\n           //      assertEquals(\"number flag t\", new java.util.Date(1023400137276L), line.getOptionObject('z'));\n           //     input is:  \"Thu Jun 06 17:48:57 EDT 2002\"\n       }\n       catch( ParseException exp ) {\n           try{ fail( exp.getMessage() );                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n       }\n       catch( Exception exp ) {\n           try{ fail( exp.getMessage() );                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n       }\n   }",
            "   public void testSimplePattern$catena_3()\n   {\n       try {\n           Options options = PatternOptionBuilder.parsePattern(\"a:b@cde>f+n%t/\");\n           String[] args = new String[] { \"-c\", \"-a\", \"foo\", \"-b\", \"java.util.Vector\", \"-e\", \"build.xml\", \"-f\", \"java.util.Calendar\", \"-n\", \"4.5\", \"-t\", \"http://jakarta.apache.org/\" };\n      \n           CommandLineParser parser = new PosixParser();\n           CommandLine line = parser.parse(options,args);\n\n           // tests the char methods of CommandLine that delegate to\n           // the String methods\n           try{ assertEquals(\"flag a\", \"foo\", line.getOptionValue(\"a\"));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"flag a\", \"foo\", line.getOptionValue('a'));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"string flag a\", \"foo\", line.getOptionObject(\"a\"));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n           assertEquals(\"string flag a\", \"foo\", line.getOptionObject('a'));                                               /***** ORIGINAL ASSERTION IS HERE *****/\n           try{ assertEquals(\"object flag b\", new java.util.Vector(), line.getOptionObject(\"b\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"object flag b\", new java.util.Vector(), line.getOptionObject('b'));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"boolean true flag c\", true, line.hasOption(\"c\"));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"boolean true flag c\", true, line.hasOption('c'));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"boolean false flag d\", false, line.hasOption(\"d\"));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"boolean false flag d\", false, line.hasOption('d'));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"file flag e\", new java.io.File(\"build.xml\"), line.getOptionObject(\"e\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"file flag e\", new java.io.File(\"build.xml\"), line.getOptionObject('e'));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"class flag f\", java.util.Calendar.class, line.getOptionObject(\"f\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"class flag f\", java.util.Calendar.class, line.getOptionObject('f'));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"number flag n\", new Double(4.5), line.getOptionObject(\"n\"));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"number flag n\", new Double(4.5), line.getOptionObject('n'));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"url flag t\", new java.net.URL(\"http://jakarta.apache.org/\"), line.getOptionObject(\"t\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"url flag t\", new java.net.URL(\"http://jakarta.apache.org/\"), line.getOptionObject('t'));    }catch(Throwable __SHOULD_BE_IGNORED){}\n           /// DATES NOT SUPPORTED YET.\n           //      assertEquals(\"number flag t\", new java.util.Date(1023400137276L), line.getOptionObject('z'));\n           //     input is:  \"Thu Jun 06 17:48:57 EDT 2002\"\n       }\n       catch( ParseException exp ) {\n           try{ fail( exp.getMessage() );                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n       }\n       catch( Exception exp ) {\n           try{ fail( exp.getMessage() );                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n       }\n   }",
            "   public void testSimplePattern$catena_4()\n   {\n       try {\n           Options options = PatternOptionBuilder.parsePattern(\"a:b@cde>f+n%t/\");\n           String[] args = new String[] { \"-c\", \"-a\", \"foo\", \"-b\", \"java.util.Vector\", \"-e\", \"build.xml\", \"-f\", \"java.util.Calendar\", \"-n\", \"4.5\", \"-t\", \"http://jakarta.apache.org/\" };\n      \n           CommandLineParser parser = new PosixParser();\n           CommandLine line = parser.parse(options,args);\n\n           // tests the char methods of CommandLine that delegate to\n           // the String methods\n           try{ assertEquals(\"flag a\", \"foo\", line.getOptionValue(\"a\"));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"flag a\", \"foo\", line.getOptionValue('a'));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"string flag a\", \"foo\", line.getOptionObject(\"a\"));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"string flag a\", \"foo\", line.getOptionObject('a'));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n           assertEquals(\"object flag b\", new java.util.Vector(), line.getOptionObject(\"b\"));                              /***** ORIGINAL ASSERTION IS HERE *****/\n           try{ assertEquals(\"object flag b\", new java.util.Vector(), line.getOptionObject('b'));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"boolean true flag c\", true, line.hasOption(\"c\"));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"boolean true flag c\", true, line.hasOption('c'));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"boolean false flag d\", false, line.hasOption(\"d\"));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"boolean false flag d\", false, line.hasOption('d'));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"file flag e\", new java.io.File(\"build.xml\"), line.getOptionObject(\"e\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"file flag e\", new java.io.File(\"build.xml\"), line.getOptionObject('e'));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"class flag f\", java.util.Calendar.class, line.getOptionObject(\"f\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"class flag f\", java.util.Calendar.class, line.getOptionObject('f'));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"number flag n\", new Double(4.5), line.getOptionObject(\"n\"));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"number flag n\", new Double(4.5), line.getOptionObject('n'));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"url flag t\", new java.net.URL(\"http://jakarta.apache.org/\"), line.getOptionObject(\"t\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"url flag t\", new java.net.URL(\"http://jakarta.apache.org/\"), line.getOptionObject('t'));    }catch(Throwable __SHOULD_BE_IGNORED){}\n           /// DATES NOT SUPPORTED YET.\n           //      assertEquals(\"number flag t\", new java.util.Date(1023400137276L), line.getOptionObject('z'));\n           //     input is:  \"Thu Jun 06 17:48:57 EDT 2002\"\n       }\n       catch( ParseException exp ) {\n           try{ fail( exp.getMessage() );                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n       }\n       catch( Exception exp ) {\n           try{ fail( exp.getMessage() );                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n       }\n   }",
            "   public void testSimplePattern$catena_5()\n   {\n       try {\n           Options options = PatternOptionBuilder.parsePattern(\"a:b@cde>f+n%t/\");\n           String[] args = new String[] { \"-c\", \"-a\", \"foo\", \"-b\", \"java.util.Vector\", \"-e\", \"build.xml\", \"-f\", \"java.util.Calendar\", \"-n\", \"4.5\", \"-t\", \"http://jakarta.apache.org/\" };\n      \n           CommandLineParser parser = new PosixParser();\n           CommandLine line = parser.parse(options,args);\n\n           // tests the char methods of CommandLine that delegate to\n           // the String methods\n           try{ assertEquals(\"flag a\", \"foo\", line.getOptionValue(\"a\"));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"flag a\", \"foo\", line.getOptionValue('a'));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"string flag a\", \"foo\", line.getOptionObject(\"a\"));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"string flag a\", \"foo\", line.getOptionObject('a'));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"object flag b\", new java.util.Vector(), line.getOptionObject(\"b\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n           assertEquals(\"object flag b\", new java.util.Vector(), line.getOptionObject('b'));                              /***** ORIGINAL ASSERTION IS HERE *****/\n           try{ assertEquals(\"boolean true flag c\", true, line.hasOption(\"c\"));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"boolean true flag c\", true, line.hasOption('c'));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"boolean false flag d\", false, line.hasOption(\"d\"));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"boolean false flag d\", false, line.hasOption('d'));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"file flag e\", new java.io.File(\"build.xml\"), line.getOptionObject(\"e\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"file flag e\", new java.io.File(\"build.xml\"), line.getOptionObject('e'));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"class flag f\", java.util.Calendar.class, line.getOptionObject(\"f\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"class flag f\", java.util.Calendar.class, line.getOptionObject('f'));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"number flag n\", new Double(4.5), line.getOptionObject(\"n\"));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"number flag n\", new Double(4.5), line.getOptionObject('n'));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"url flag t\", new java.net.URL(\"http://jakarta.apache.org/\"), line.getOptionObject(\"t\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"url flag t\", new java.net.URL(\"http://jakarta.apache.org/\"), line.getOptionObject('t'));    }catch(Throwable __SHOULD_BE_IGNORED){}\n           /// DATES NOT SUPPORTED YET.\n           //      assertEquals(\"number flag t\", new java.util.Date(1023400137276L), line.getOptionObject('z'));\n           //     input is:  \"Thu Jun 06 17:48:57 EDT 2002\"\n       }\n       catch( ParseException exp ) {\n           try{ fail( exp.getMessage() );                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n       }\n       catch( Exception exp ) {\n           try{ fail( exp.getMessage() );                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n       }\n   }",
            "   public void testSimplePattern$catena_6()\n   {\n       try {\n           Options options = PatternOptionBuilder.parsePattern(\"a:b@cde>f+n%t/\");\n           String[] args = new String[] { \"-c\", \"-a\", \"foo\", \"-b\", \"java.util.Vector\", \"-e\", \"build.xml\", \"-f\", \"java.util.Calendar\", \"-n\", \"4.5\", \"-t\", \"http://jakarta.apache.org/\" };\n      \n           CommandLineParser parser = new PosixParser();\n           CommandLine line = parser.parse(options,args);\n\n           // tests the char methods of CommandLine that delegate to\n           // the String methods\n           try{ assertEquals(\"flag a\", \"foo\", line.getOptionValue(\"a\"));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"flag a\", \"foo\", line.getOptionValue('a'));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"string flag a\", \"foo\", line.getOptionObject(\"a\"));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"string flag a\", \"foo\", line.getOptionObject('a'));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"object flag b\", new java.util.Vector(), line.getOptionObject(\"b\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"object flag b\", new java.util.Vector(), line.getOptionObject('b'));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n           assertEquals(\"boolean true flag c\", true, line.hasOption(\"c\"));                                                /***** ORIGINAL ASSERTION IS HERE *****/\n           try{ assertEquals(\"boolean true flag c\", true, line.hasOption('c'));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"boolean false flag d\", false, line.hasOption(\"d\"));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"boolean false flag d\", false, line.hasOption('d'));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"file flag e\", new java.io.File(\"build.xml\"), line.getOptionObject(\"e\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"file flag e\", new java.io.File(\"build.xml\"), line.getOptionObject('e'));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"class flag f\", java.util.Calendar.class, line.getOptionObject(\"f\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"class flag f\", java.util.Calendar.class, line.getOptionObject('f'));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"number flag n\", new Double(4.5), line.getOptionObject(\"n\"));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"number flag n\", new Double(4.5), line.getOptionObject('n'));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"url flag t\", new java.net.URL(\"http://jakarta.apache.org/\"), line.getOptionObject(\"t\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"url flag t\", new java.net.URL(\"http://jakarta.apache.org/\"), line.getOptionObject('t'));    }catch(Throwable __SHOULD_BE_IGNORED){}\n           /// DATES NOT SUPPORTED YET.\n           //      assertEquals(\"number flag t\", new java.util.Date(1023400137276L), line.getOptionObject('z'));\n           //     input is:  \"Thu Jun 06 17:48:57 EDT 2002\"\n       }\n       catch( ParseException exp ) {\n           try{ fail( exp.getMessage() );                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n       }\n       catch( Exception exp ) {\n           try{ fail( exp.getMessage() );                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n       }\n   }",
            "   public void testSimplePattern$catena_7()\n   {\n       try {\n           Options options = PatternOptionBuilder.parsePattern(\"a:b@cde>f+n%t/\");\n           String[] args = new String[] { \"-c\", \"-a\", \"foo\", \"-b\", \"java.util.Vector\", \"-e\", \"build.xml\", \"-f\", \"java.util.Calendar\", \"-n\", \"4.5\", \"-t\", \"http://jakarta.apache.org/\" };\n      \n           CommandLineParser parser = new PosixParser();\n           CommandLine line = parser.parse(options,args);\n\n           // tests the char methods of CommandLine that delegate to\n           // the String methods\n           try{ assertEquals(\"flag a\", \"foo\", line.getOptionValue(\"a\"));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"flag a\", \"foo\", line.getOptionValue('a'));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"string flag a\", \"foo\", line.getOptionObject(\"a\"));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"string flag a\", \"foo\", line.getOptionObject('a'));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"object flag b\", new java.util.Vector(), line.getOptionObject(\"b\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"object flag b\", new java.util.Vector(), line.getOptionObject('b'));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"boolean true flag c\", true, line.hasOption(\"c\"));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n           assertEquals(\"boolean true flag c\", true, line.hasOption('c'));                                                /***** ORIGINAL ASSERTION IS HERE *****/\n           try{ assertEquals(\"boolean false flag d\", false, line.hasOption(\"d\"));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"boolean false flag d\", false, line.hasOption('d'));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"file flag e\", new java.io.File(\"build.xml\"), line.getOptionObject(\"e\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"file flag e\", new java.io.File(\"build.xml\"), line.getOptionObject('e'));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"class flag f\", java.util.Calendar.class, line.getOptionObject(\"f\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"class flag f\", java.util.Calendar.class, line.getOptionObject('f'));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"number flag n\", new Double(4.5), line.getOptionObject(\"n\"));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"number flag n\", new Double(4.5), line.getOptionObject('n'));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"url flag t\", new java.net.URL(\"http://jakarta.apache.org/\"), line.getOptionObject(\"t\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"url flag t\", new java.net.URL(\"http://jakarta.apache.org/\"), line.getOptionObject('t'));    }catch(Throwable __SHOULD_BE_IGNORED){}\n           /// DATES NOT SUPPORTED YET.\n           //      assertEquals(\"number flag t\", new java.util.Date(1023400137276L), line.getOptionObject('z'));\n           //     input is:  \"Thu Jun 06 17:48:57 EDT 2002\"\n       }\n       catch( ParseException exp ) {\n           try{ fail( exp.getMessage() );                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n       }\n       catch( Exception exp ) {\n           try{ fail( exp.getMessage() );                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n       }\n   }",
            "   public void testSimplePattern$catena_8()\n   {\n       try {\n           Options options = PatternOptionBuilder.parsePattern(\"a:b@cde>f+n%t/\");\n           String[] args = new String[] { \"-c\", \"-a\", \"foo\", \"-b\", \"java.util.Vector\", \"-e\", \"build.xml\", \"-f\", \"java.util.Calendar\", \"-n\", \"4.5\", \"-t\", \"http://jakarta.apache.org/\" };\n      \n           CommandLineParser parser = new PosixParser();\n           CommandLine line = parser.parse(options,args);\n\n           // tests the char methods of CommandLine that delegate to\n           // the String methods\n           try{ assertEquals(\"flag a\", \"foo\", line.getOptionValue(\"a\"));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"flag a\", \"foo\", line.getOptionValue('a'));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"string flag a\", \"foo\", line.getOptionObject(\"a\"));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"string flag a\", \"foo\", line.getOptionObject('a'));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"object flag b\", new java.util.Vector(), line.getOptionObject(\"b\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"object flag b\", new java.util.Vector(), line.getOptionObject('b'));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"boolean true flag c\", true, line.hasOption(\"c\"));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"boolean true flag c\", true, line.hasOption('c'));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n           assertEquals(\"boolean false flag d\", false, line.hasOption(\"d\"));                                              /***** ORIGINAL ASSERTION IS HERE *****/\n           try{ assertEquals(\"boolean false flag d\", false, line.hasOption('d'));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"file flag e\", new java.io.File(\"build.xml\"), line.getOptionObject(\"e\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"file flag e\", new java.io.File(\"build.xml\"), line.getOptionObject('e'));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"class flag f\", java.util.Calendar.class, line.getOptionObject(\"f\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"class flag f\", java.util.Calendar.class, line.getOptionObject('f'));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"number flag n\", new Double(4.5), line.getOptionObject(\"n\"));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"number flag n\", new Double(4.5), line.getOptionObject('n'));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"url flag t\", new java.net.URL(\"http://jakarta.apache.org/\"), line.getOptionObject(\"t\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"url flag t\", new java.net.URL(\"http://jakarta.apache.org/\"), line.getOptionObject('t'));    }catch(Throwable __SHOULD_BE_IGNORED){}\n           /// DATES NOT SUPPORTED YET.\n           //      assertEquals(\"number flag t\", new java.util.Date(1023400137276L), line.getOptionObject('z'));\n           //     input is:  \"Thu Jun 06 17:48:57 EDT 2002\"\n       }\n       catch( ParseException exp ) {\n           try{ fail( exp.getMessage() );                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n       }\n       catch( Exception exp ) {\n           try{ fail( exp.getMessage() );                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n       }\n   }",
            "   public void testSimplePattern$catena_9()\n   {\n       try {\n           Options options = PatternOptionBuilder.parsePattern(\"a:b@cde>f+n%t/\");\n           String[] args = new String[] { \"-c\", \"-a\", \"foo\", \"-b\", \"java.util.Vector\", \"-e\", \"build.xml\", \"-f\", \"java.util.Calendar\", \"-n\", \"4.5\", \"-t\", \"http://jakarta.apache.org/\" };\n      \n           CommandLineParser parser = new PosixParser();\n           CommandLine line = parser.parse(options,args);\n\n           // tests the char methods of CommandLine that delegate to\n           // the String methods\n           try{ assertEquals(\"flag a\", \"foo\", line.getOptionValue(\"a\"));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"flag a\", \"foo\", line.getOptionValue('a'));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"string flag a\", \"foo\", line.getOptionObject(\"a\"));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"string flag a\", \"foo\", line.getOptionObject('a'));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"object flag b\", new java.util.Vector(), line.getOptionObject(\"b\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"object flag b\", new java.util.Vector(), line.getOptionObject('b'));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"boolean true flag c\", true, line.hasOption(\"c\"));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"boolean true flag c\", true, line.hasOption('c'));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"boolean false flag d\", false, line.hasOption(\"d\"));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n           assertEquals(\"boolean false flag d\", false, line.hasOption('d'));                                              /***** ORIGINAL ASSERTION IS HERE *****/\n           try{ assertEquals(\"file flag e\", new java.io.File(\"build.xml\"), line.getOptionObject(\"e\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"file flag e\", new java.io.File(\"build.xml\"), line.getOptionObject('e'));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"class flag f\", java.util.Calendar.class, line.getOptionObject(\"f\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"class flag f\", java.util.Calendar.class, line.getOptionObject('f'));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"number flag n\", new Double(4.5), line.getOptionObject(\"n\"));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"number flag n\", new Double(4.5), line.getOptionObject('n'));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"url flag t\", new java.net.URL(\"http://jakarta.apache.org/\"), line.getOptionObject(\"t\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"url flag t\", new java.net.URL(\"http://jakarta.apache.org/\"), line.getOptionObject('t'));    }catch(Throwable __SHOULD_BE_IGNORED){}\n           /// DATES NOT SUPPORTED YET.\n           //      assertEquals(\"number flag t\", new java.util.Date(1023400137276L), line.getOptionObject('z'));\n           //     input is:  \"Thu Jun 06 17:48:57 EDT 2002\"\n       }\n       catch( ParseException exp ) {\n           try{ fail( exp.getMessage() );                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n       }\n       catch( Exception exp ) {\n           try{ fail( exp.getMessage() );                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n       }\n   }",
            "   public void testSimplePattern$catena_10()\n   {\n       try {\n           Options options = PatternOptionBuilder.parsePattern(\"a:b@cde>f+n%t/\");\n           String[] args = new String[] { \"-c\", \"-a\", \"foo\", \"-b\", \"java.util.Vector\", \"-e\", \"build.xml\", \"-f\", \"java.util.Calendar\", \"-n\", \"4.5\", \"-t\", \"http://jakarta.apache.org/\" };\n      \n           CommandLineParser parser = new PosixParser();\n           CommandLine line = parser.parse(options,args);\n\n           // tests the char methods of CommandLine that delegate to\n           // the String methods\n           try{ assertEquals(\"flag a\", \"foo\", line.getOptionValue(\"a\"));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"flag a\", \"foo\", line.getOptionValue('a'));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"string flag a\", \"foo\", line.getOptionObject(\"a\"));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"string flag a\", \"foo\", line.getOptionObject('a'));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"object flag b\", new java.util.Vector(), line.getOptionObject(\"b\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"object flag b\", new java.util.Vector(), line.getOptionObject('b'));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"boolean true flag c\", true, line.hasOption(\"c\"));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"boolean true flag c\", true, line.hasOption('c'));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"boolean false flag d\", false, line.hasOption(\"d\"));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"boolean false flag d\", false, line.hasOption('d'));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n           assertEquals(\"file flag e\", new java.io.File(\"build.xml\"), line.getOptionObject(\"e\"));                         /***** ORIGINAL ASSERTION IS HERE *****/\n           try{ assertEquals(\"file flag e\", new java.io.File(\"build.xml\"), line.getOptionObject('e'));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"class flag f\", java.util.Calendar.class, line.getOptionObject(\"f\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"class flag f\", java.util.Calendar.class, line.getOptionObject('f'));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"number flag n\", new Double(4.5), line.getOptionObject(\"n\"));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"number flag n\", new Double(4.5), line.getOptionObject('n'));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"url flag t\", new java.net.URL(\"http://jakarta.apache.org/\"), line.getOptionObject(\"t\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"url flag t\", new java.net.URL(\"http://jakarta.apache.org/\"), line.getOptionObject('t'));    }catch(Throwable __SHOULD_BE_IGNORED){}\n           /// DATES NOT SUPPORTED YET.\n           //      assertEquals(\"number flag t\", new java.util.Date(1023400137276L), line.getOptionObject('z'));\n           //     input is:  \"Thu Jun 06 17:48:57 EDT 2002\"\n       }\n       catch( ParseException exp ) {\n           try{ fail( exp.getMessage() );                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n       }\n       catch( Exception exp ) {\n           try{ fail( exp.getMessage() );                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n       }\n   }",
            "   public void testSimplePattern$catena_11()\n   {\n       try {\n           Options options = PatternOptionBuilder.parsePattern(\"a:b@cde>f+n%t/\");\n           String[] args = new String[] { \"-c\", \"-a\", \"foo\", \"-b\", \"java.util.Vector\", \"-e\", \"build.xml\", \"-f\", \"java.util.Calendar\", \"-n\", \"4.5\", \"-t\", \"http://jakarta.apache.org/\" };\n      \n           CommandLineParser parser = new PosixParser();\n           CommandLine line = parser.parse(options,args);\n\n           // tests the char methods of CommandLine that delegate to\n           // the String methods\n           try{ assertEquals(\"flag a\", \"foo\", line.getOptionValue(\"a\"));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"flag a\", \"foo\", line.getOptionValue('a'));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"string flag a\", \"foo\", line.getOptionObject(\"a\"));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"string flag a\", \"foo\", line.getOptionObject('a'));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"object flag b\", new java.util.Vector(), line.getOptionObject(\"b\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"object flag b\", new java.util.Vector(), line.getOptionObject('b'));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"boolean true flag c\", true, line.hasOption(\"c\"));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"boolean true flag c\", true, line.hasOption('c'));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"boolean false flag d\", false, line.hasOption(\"d\"));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"boolean false flag d\", false, line.hasOption('d'));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"file flag e\", new java.io.File(\"build.xml\"), line.getOptionObject(\"e\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n           assertEquals(\"file flag e\", new java.io.File(\"build.xml\"), line.getOptionObject('e'));                         /***** ORIGINAL ASSERTION IS HERE *****/\n           try{ assertEquals(\"class flag f\", java.util.Calendar.class, line.getOptionObject(\"f\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"class flag f\", java.util.Calendar.class, line.getOptionObject('f'));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"number flag n\", new Double(4.5), line.getOptionObject(\"n\"));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"number flag n\", new Double(4.5), line.getOptionObject('n'));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"url flag t\", new java.net.URL(\"http://jakarta.apache.org/\"), line.getOptionObject(\"t\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"url flag t\", new java.net.URL(\"http://jakarta.apache.org/\"), line.getOptionObject('t'));    }catch(Throwable __SHOULD_BE_IGNORED){}\n           /// DATES NOT SUPPORTED YET.\n           //      assertEquals(\"number flag t\", new java.util.Date(1023400137276L), line.getOptionObject('z'));\n           //     input is:  \"Thu Jun 06 17:48:57 EDT 2002\"\n       }\n       catch( ParseException exp ) {\n           try{ fail( exp.getMessage() );                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n       }\n       catch( Exception exp ) {\n           try{ fail( exp.getMessage() );                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n       }\n   }",
            "   public void testSimplePattern$catena_12()\n   {\n       try {\n           Options options = PatternOptionBuilder.parsePattern(\"a:b@cde>f+n%t/\");\n           String[] args = new String[] { \"-c\", \"-a\", \"foo\", \"-b\", \"java.util.Vector\", \"-e\", \"build.xml\", \"-f\", \"java.util.Calendar\", \"-n\", \"4.5\", \"-t\", \"http://jakarta.apache.org/\" };\n      \n           CommandLineParser parser = new PosixParser();\n           CommandLine line = parser.parse(options,args);\n\n           // tests the char methods of CommandLine that delegate to\n           // the String methods\n           try{ assertEquals(\"flag a\", \"foo\", line.getOptionValue(\"a\"));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"flag a\", \"foo\", line.getOptionValue('a'));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"string flag a\", \"foo\", line.getOptionObject(\"a\"));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"string flag a\", \"foo\", line.getOptionObject('a'));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"object flag b\", new java.util.Vector(), line.getOptionObject(\"b\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"object flag b\", new java.util.Vector(), line.getOptionObject('b'));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"boolean true flag c\", true, line.hasOption(\"c\"));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"boolean true flag c\", true, line.hasOption('c'));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"boolean false flag d\", false, line.hasOption(\"d\"));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"boolean false flag d\", false, line.hasOption('d'));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"file flag e\", new java.io.File(\"build.xml\"), line.getOptionObject(\"e\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"file flag e\", new java.io.File(\"build.xml\"), line.getOptionObject('e'));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n           assertEquals(\"class flag f\", java.util.Calendar.class, line.getOptionObject(\"f\"));                             /***** ORIGINAL ASSERTION IS HERE *****/\n           try{ assertEquals(\"class flag f\", java.util.Calendar.class, line.getOptionObject('f'));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"number flag n\", new Double(4.5), line.getOptionObject(\"n\"));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"number flag n\", new Double(4.5), line.getOptionObject('n'));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"url flag t\", new java.net.URL(\"http://jakarta.apache.org/\"), line.getOptionObject(\"t\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"url flag t\", new java.net.URL(\"http://jakarta.apache.org/\"), line.getOptionObject('t'));    }catch(Throwable __SHOULD_BE_IGNORED){}\n           /// DATES NOT SUPPORTED YET.\n           //      assertEquals(\"number flag t\", new java.util.Date(1023400137276L), line.getOptionObject('z'));\n           //     input is:  \"Thu Jun 06 17:48:57 EDT 2002\"\n       }\n       catch( ParseException exp ) {\n           try{ fail( exp.getMessage() );                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n       }\n       catch( Exception exp ) {\n           try{ fail( exp.getMessage() );                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n       }\n   }",
            "   public void testSimplePattern$catena_13()\n   {\n       try {\n           Options options = PatternOptionBuilder.parsePattern(\"a:b@cde>f+n%t/\");\n           String[] args = new String[] { \"-c\", \"-a\", \"foo\", \"-b\", \"java.util.Vector\", \"-e\", \"build.xml\", \"-f\", \"java.util.Calendar\", \"-n\", \"4.5\", \"-t\", \"http://jakarta.apache.org/\" };\n      \n           CommandLineParser parser = new PosixParser();\n           CommandLine line = parser.parse(options,args);\n\n           // tests the char methods of CommandLine that delegate to\n           // the String methods\n           try{ assertEquals(\"flag a\", \"foo\", line.getOptionValue(\"a\"));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"flag a\", \"foo\", line.getOptionValue('a'));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"string flag a\", \"foo\", line.getOptionObject(\"a\"));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"string flag a\", \"foo\", line.getOptionObject('a'));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"object flag b\", new java.util.Vector(), line.getOptionObject(\"b\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"object flag b\", new java.util.Vector(), line.getOptionObject('b'));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"boolean true flag c\", true, line.hasOption(\"c\"));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"boolean true flag c\", true, line.hasOption('c'));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"boolean false flag d\", false, line.hasOption(\"d\"));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"boolean false flag d\", false, line.hasOption('d'));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"file flag e\", new java.io.File(\"build.xml\"), line.getOptionObject(\"e\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"file flag e\", new java.io.File(\"build.xml\"), line.getOptionObject('e'));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"class flag f\", java.util.Calendar.class, line.getOptionObject(\"f\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n           assertEquals(\"class flag f\", java.util.Calendar.class, line.getOptionObject('f'));                             /***** ORIGINAL ASSERTION IS HERE *****/\n           try{ assertEquals(\"number flag n\", new Double(4.5), line.getOptionObject(\"n\"));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"number flag n\", new Double(4.5), line.getOptionObject('n'));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"url flag t\", new java.net.URL(\"http://jakarta.apache.org/\"), line.getOptionObject(\"t\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"url flag t\", new java.net.URL(\"http://jakarta.apache.org/\"), line.getOptionObject('t'));    }catch(Throwable __SHOULD_BE_IGNORED){}\n           /// DATES NOT SUPPORTED YET.\n           //      assertEquals(\"number flag t\", new java.util.Date(1023400137276L), line.getOptionObject('z'));\n           //     input is:  \"Thu Jun 06 17:48:57 EDT 2002\"\n       }\n       catch( ParseException exp ) {\n           try{ fail( exp.getMessage() );                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n       }\n       catch( Exception exp ) {\n           try{ fail( exp.getMessage() );                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n       }\n   }",
            "   public void testSimplePattern$catena_16()\n   {\n       try {\n           Options options = PatternOptionBuilder.parsePattern(\"a:b@cde>f+n%t/\");\n           String[] args = new String[] { \"-c\", \"-a\", \"foo\", \"-b\", \"java.util.Vector\", \"-e\", \"build.xml\", \"-f\", \"java.util.Calendar\", \"-n\", \"4.5\", \"-t\", \"http://jakarta.apache.org/\" };\n      \n           CommandLineParser parser = new PosixParser();\n           CommandLine line = parser.parse(options,args);\n\n           // tests the char methods of CommandLine that delegate to\n           // the String methods\n           try{ assertEquals(\"flag a\", \"foo\", line.getOptionValue(\"a\"));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"flag a\", \"foo\", line.getOptionValue('a'));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"string flag a\", \"foo\", line.getOptionObject(\"a\"));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"string flag a\", \"foo\", line.getOptionObject('a'));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"object flag b\", new java.util.Vector(), line.getOptionObject(\"b\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"object flag b\", new java.util.Vector(), line.getOptionObject('b'));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"boolean true flag c\", true, line.hasOption(\"c\"));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"boolean true flag c\", true, line.hasOption('c'));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"boolean false flag d\", false, line.hasOption(\"d\"));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"boolean false flag d\", false, line.hasOption('d'));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"file flag e\", new java.io.File(\"build.xml\"), line.getOptionObject(\"e\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"file flag e\", new java.io.File(\"build.xml\"), line.getOptionObject('e'));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"class flag f\", java.util.Calendar.class, line.getOptionObject(\"f\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"class flag f\", java.util.Calendar.class, line.getOptionObject('f'));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"number flag n\", new Double(4.5), line.getOptionObject(\"n\"));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"number flag n\", new Double(4.5), line.getOptionObject('n'));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n           assertEquals(\"url flag t\", new java.net.URL(\"http://jakarta.apache.org/\"), line.getOptionObject(\"t\"));         /***** ORIGINAL ASSERTION IS HERE *****/\n           try{ assertEquals(\"url flag t\", new java.net.URL(\"http://jakarta.apache.org/\"), line.getOptionObject('t'));    }catch(Throwable __SHOULD_BE_IGNORED){}\n           /// DATES NOT SUPPORTED YET.\n           //      assertEquals(\"number flag t\", new java.util.Date(1023400137276L), line.getOptionObject('z'));\n           //     input is:  \"Thu Jun 06 17:48:57 EDT 2002\"\n       }\n       catch( ParseException exp ) {\n           try{ fail( exp.getMessage() );                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n       }\n       catch( java.net.MalformedURLException exp ) {\n           try{ fail( exp.getMessage() );                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n       }\n   }",
            "   public void testSimplePattern$catena_17()\n   {\n       try {\n           Options options = PatternOptionBuilder.parsePattern(\"a:b@cde>f+n%t/\");\n           String[] args = new String[] { \"-c\", \"-a\", \"foo\", \"-b\", \"java.util.Vector\", \"-e\", \"build.xml\", \"-f\", \"java.util.Calendar\", \"-n\", \"4.5\", \"-t\", \"http://jakarta.apache.org/\" };\n      \n           CommandLineParser parser = new PosixParser();\n           CommandLine line = parser.parse(options,args);\n\n           // tests the char methods of CommandLine that delegate to\n           // the String methods\n           try{ assertEquals(\"flag a\", \"foo\", line.getOptionValue(\"a\"));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"flag a\", \"foo\", line.getOptionValue('a'));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"string flag a\", \"foo\", line.getOptionObject(\"a\"));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"string flag a\", \"foo\", line.getOptionObject('a'));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"object flag b\", new java.util.Vector(), line.getOptionObject(\"b\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"object flag b\", new java.util.Vector(), line.getOptionObject('b'));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"boolean true flag c\", true, line.hasOption(\"c\"));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"boolean true flag c\", true, line.hasOption('c'));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"boolean false flag d\", false, line.hasOption(\"d\"));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"boolean false flag d\", false, line.hasOption('d'));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"file flag e\", new java.io.File(\"build.xml\"), line.getOptionObject(\"e\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"file flag e\", new java.io.File(\"build.xml\"), line.getOptionObject('e'));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"class flag f\", java.util.Calendar.class, line.getOptionObject(\"f\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"class flag f\", java.util.Calendar.class, line.getOptionObject('f'));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"number flag n\", new Double(4.5), line.getOptionObject(\"n\"));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"number flag n\", new Double(4.5), line.getOptionObject('n'));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"url flag t\", new java.net.URL(\"http://jakarta.apache.org/\"), line.getOptionObject(\"t\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n           assertEquals(\"url flag t\", new java.net.URL(\"http://jakarta.apache.org/\"), line.getOptionObject('t'));         /***** ORIGINAL ASSERTION IS HERE *****/\n           /// DATES NOT SUPPORTED YET.\n           //      assertEquals(\"number flag t\", new java.util.Date(1023400137276L), line.getOptionObject('z'));\n           //     input is:  \"Thu Jun 06 17:48:57 EDT 2002\"\n       }\n       catch( ParseException exp ) {\n           try{ fail( exp.getMessage() );                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n       }\n       catch( java.net.MalformedURLException exp ) {\n           try{ fail( exp.getMessage() );                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n       }\n   }",
            "   public void testSimplePattern$catena_18()\n   {\n       try {\n           Options options = PatternOptionBuilder.parsePattern(\"a:b@cde>f+n%t/\");\n           String[] args = new String[] { \"-c\", \"-a\", \"foo\", \"-b\", \"java.util.Vector\", \"-e\", \"build.xml\", \"-f\", \"java.util.Calendar\", \"-n\", \"4.5\", \"-t\", \"http://jakarta.apache.org/\" };\n      \n           CommandLineParser parser = new PosixParser();\n           CommandLine line = parser.parse(options,args);\n\n           // tests the char methods of CommandLine that delegate to\n           // the String methods\n           try{ assertEquals(\"flag a\", \"foo\", line.getOptionValue(\"a\"));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"flag a\", \"foo\", line.getOptionValue('a'));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"string flag a\", \"foo\", line.getOptionObject(\"a\"));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"string flag a\", \"foo\", line.getOptionObject('a'));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"object flag b\", new java.util.Vector(), line.getOptionObject(\"b\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"object flag b\", new java.util.Vector(), line.getOptionObject('b'));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"boolean true flag c\", true, line.hasOption(\"c\"));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"boolean true flag c\", true, line.hasOption('c'));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"boolean false flag d\", false, line.hasOption(\"d\"));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"boolean false flag d\", false, line.hasOption('d'));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"file flag e\", new java.io.File(\"build.xml\"), line.getOptionObject(\"e\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"file flag e\", new java.io.File(\"build.xml\"), line.getOptionObject('e'));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"class flag f\", java.util.Calendar.class, line.getOptionObject(\"f\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"class flag f\", java.util.Calendar.class, line.getOptionObject('f'));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"number flag n\", new Double(4.5), line.getOptionObject(\"n\"));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"number flag n\", new Double(4.5), line.getOptionObject('n'));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"url flag t\", new java.net.URL(\"http://jakarta.apache.org/\"), line.getOptionObject(\"t\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"url flag t\", new java.net.URL(\"http://jakarta.apache.org/\"), line.getOptionObject('t'));    }catch(Throwable __SHOULD_BE_IGNORED){}\n           /// DATES NOT SUPPORTED YET.\n           //      assertEquals(\"number flag t\", new java.util.Date(1023400137276L), line.getOptionObject('z'));\n           //     input is:  \"Thu Jun 06 17:48:57 EDT 2002\"\n       }\n       catch( ParseException exp ) {\n           fail( exp.getMessage() );                                                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n       }\n       catch( Exception exp ) {\n           try{ fail( exp.getMessage() );                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n       }\n   }",
            "   public void testSimplePattern$catena_19()\n   {\n       try {\n           Options options = PatternOptionBuilder.parsePattern(\"a:b@cde>f+n%t/\");\n           String[] args = new String[] { \"-c\", \"-a\", \"foo\", \"-b\", \"java.util.Vector\", \"-e\", \"build.xml\", \"-f\", \"java.util.Calendar\", \"-n\", \"4.5\", \"-t\", \"http://jakarta.apache.org/\" };\n      \n           CommandLineParser parser = new PosixParser();\n           CommandLine line = parser.parse(options,args);\n\n           // tests the char methods of CommandLine that delegate to\n           // the String methods\n           try{ assertEquals(\"flag a\", \"foo\", line.getOptionValue(\"a\"));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"flag a\", \"foo\", line.getOptionValue('a'));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"string flag a\", \"foo\", line.getOptionObject(\"a\"));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"string flag a\", \"foo\", line.getOptionObject('a'));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"object flag b\", new java.util.Vector(), line.getOptionObject(\"b\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"object flag b\", new java.util.Vector(), line.getOptionObject('b'));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"boolean true flag c\", true, line.hasOption(\"c\"));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"boolean true flag c\", true, line.hasOption('c'));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"boolean false flag d\", false, line.hasOption(\"d\"));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"boolean false flag d\", false, line.hasOption('d'));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"file flag e\", new java.io.File(\"build.xml\"), line.getOptionObject(\"e\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"file flag e\", new java.io.File(\"build.xml\"), line.getOptionObject('e'));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"class flag f\", java.util.Calendar.class, line.getOptionObject(\"f\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"class flag f\", java.util.Calendar.class, line.getOptionObject('f'));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"number flag n\", new Double(4.5), line.getOptionObject(\"n\"));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"number flag n\", new Double(4.5), line.getOptionObject('n'));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"url flag t\", new java.net.URL(\"http://jakarta.apache.org/\"), line.getOptionObject(\"t\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n           try{ assertEquals(\"url flag t\", new java.net.URL(\"http://jakarta.apache.org/\"), line.getOptionObject('t'));    }catch(Throwable __SHOULD_BE_IGNORED){}\n           /// DATES NOT SUPPORTED YET.\n           //      assertEquals(\"number flag t\", new java.util.Date(1023400137276L), line.getOptionObject('z'));\n           //     input is:  \"Thu Jun 06 17:48:57 EDT 2002\"\n       }\n       catch( ParseException exp ) {\n           try{ fail( exp.getMessage() );                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n       }\n       catch( Exception exp ) {\n           fail( exp.getMessage() );                                                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n       }\n   }"
        ]
    }
}