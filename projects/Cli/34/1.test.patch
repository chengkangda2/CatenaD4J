{
    "org.apache.commons.cli.CommandLineTest::testGetParsedOptionValue": {
        "begin_line_no": 65,
        "end_line_no": 75,
        "file_path": "src/test/java/org/apache/commons/cli/CommandLineTest.java",
        "to": [
            "    public void testGetParsedOptionValue$catena_1() throws Exception {\n        Options options = new Options();\n        options.addOption(OptionBuilder.hasArg().withType(Number.class).create(\"i\"));\n        options.addOption(OptionBuilder.hasArg().create(\"f\"));\n        \n        CommandLineParser parser = new DefaultParser();\n        CommandLine cmd = parser.parse(options, new String[] { \"-i\", \"123\", \"-f\", \"foo\" });\n        \n        try{ assertEquals(123, ((Number) cmd.getParsedOptionValue(\"i\")).intValue());                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"foo\", cmd.getParsedOptionValue(\"f\"));                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n    }",
            "    public void testGetParsedOptionValue$catena_0() throws Exception {\n        Options options = new Options();\n        options.addOption(OptionBuilder.hasArg().withType(Number.class).create(\"i\"));\n        options.addOption(OptionBuilder.hasArg().create(\"f\"));\n        \n        CommandLineParser parser = new DefaultParser();\n        CommandLine cmd = parser.parse(options, new String[] { \"-i\", \"123\", \"-f\", \"foo\" });\n        \n        assertEquals(123, ((Number) cmd.getParsedOptionValue(\"i\")).intValue());                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"foo\", cmd.getParsedOptionValue(\"f\"));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    },
    "org.apache.commons.cli.OptionBuilderTest::testTwoCompleteOptions": {
        "begin_line_no": 42,
        "end_line_no": 71,
        "file_path": "src/test/java/org/apache/commons/cli/OptionBuilderTest.java",
        "to": [
            "    public void testTwoCompleteOptions$catena_10( ) {\n        Option simple = OptionBuilder.withLongOpt( \"simple option\")\n                                     .hasArg( )\n                                     .isRequired( )\n                                     .hasArgs( )\n                                     .withType( Float.class )\n                                     .withDescription( \"this is a simple option\" )\n                                     .create( 's' );\n\n        try{ assertEquals( \"s\", simple.getOpt() );                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals( \"simple option\", simple.getLongOpt() );                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals( \"this is a simple option\", simple.getDescription() );                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals( simple.getType(), Float.class );                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue( simple.hasArg() );                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue( simple.isRequired() );                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue( simple.hasArgs() );                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        simple = OptionBuilder.withLongOpt( \"dimple option\")\n                              .hasArg( )\n                              .withDescription( \"this is a dimple option\" )\n                              .create( 'd' );\n\n        try{ assertEquals( \"d\", simple.getOpt() );                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals( \"dimple option\", simple.getLongOpt() );                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals( \"this is a dimple option\", simple.getDescription() );                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals( String.class, simple.getType() );                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue( simple.hasArg() );                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue( !simple.isRequired() );                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue( !simple.hasArgs() );                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testTwoCompleteOptions$catena_0( ) {\n        Option simple = OptionBuilder.withLongOpt( \"simple option\")\n                                     .hasArg( )\n                                     .isRequired( )\n                                     .hasArgs( )\n                                     .withType( Float.class )\n                                     .withDescription( \"this is a simple option\" )\n                                     .create( 's' );\n\n        assertEquals( \"s\", simple.getOpt() );                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals( \"simple option\", simple.getLongOpt() );                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals( \"this is a simple option\", simple.getDescription() );                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals( simple.getType(), Float.class );                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue( simple.hasArg() );                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue( simple.isRequired() );                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue( simple.hasArgs() );                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        simple = OptionBuilder.withLongOpt( \"dimple option\")\n                              .hasArg( )\n                              .withDescription( \"this is a dimple option\" )\n                              .create( 'd' );\n\n        try{ assertEquals( \"d\", simple.getOpt() );                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals( \"dimple option\", simple.getLongOpt() );                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals( \"this is a dimple option\", simple.getDescription() );                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals( String.class, simple.getType() );                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue( simple.hasArg() );                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue( !simple.isRequired() );                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue( !simple.hasArgs() );                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testTwoCompleteOptions$catena_1( ) {\n        Option simple = OptionBuilder.withLongOpt( \"simple option\")\n                                     .hasArg( )\n                                     .isRequired( )\n                                     .hasArgs( )\n                                     .withType( Float.class )\n                                     .withDescription( \"this is a simple option\" )\n                                     .create( 's' );\n\n        try{ assertEquals( \"s\", simple.getOpt() );                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals( \"simple option\", simple.getLongOpt() );                                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals( \"this is a simple option\", simple.getDescription() );                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals( simple.getType(), Float.class );                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue( simple.hasArg() );                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue( simple.isRequired() );                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue( simple.hasArgs() );                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        simple = OptionBuilder.withLongOpt( \"dimple option\")\n                              .hasArg( )\n                              .withDescription( \"this is a dimple option\" )\n                              .create( 'd' );\n\n        try{ assertEquals( \"d\", simple.getOpt() );                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals( \"dimple option\", simple.getLongOpt() );                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals( \"this is a dimple option\", simple.getDescription() );                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals( String.class, simple.getType() );                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue( simple.hasArg() );                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue( !simple.isRequired() );                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue( !simple.hasArgs() );                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testTwoCompleteOptions$catena_2( ) {\n        Option simple = OptionBuilder.withLongOpt( \"simple option\")\n                                     .hasArg( )\n                                     .isRequired( )\n                                     .hasArgs( )\n                                     .withType( Float.class )\n                                     .withDescription( \"this is a simple option\" )\n                                     .create( 's' );\n\n        try{ assertEquals( \"s\", simple.getOpt() );                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals( \"simple option\", simple.getLongOpt() );                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals( \"this is a simple option\", simple.getDescription() );                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals( simple.getType(), Float.class );                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue( simple.hasArg() );                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue( simple.isRequired() );                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue( simple.hasArgs() );                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        simple = OptionBuilder.withLongOpt( \"dimple option\")\n                              .hasArg( )\n                              .withDescription( \"this is a dimple option\" )\n                              .create( 'd' );\n\n        try{ assertEquals( \"d\", simple.getOpt() );                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals( \"dimple option\", simple.getLongOpt() );                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals( \"this is a dimple option\", simple.getDescription() );                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals( String.class, simple.getType() );                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue( simple.hasArg() );                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue( !simple.isRequired() );                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue( !simple.hasArgs() );                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testTwoCompleteOptions$catena_3( ) {\n        Option simple = OptionBuilder.withLongOpt( \"simple option\")\n                                     .hasArg( )\n                                     .isRequired( )\n                                     .hasArgs( )\n                                     .withType( Float.class )\n                                     .withDescription( \"this is a simple option\" )\n                                     .create( 's' );\n\n        try{ assertEquals( \"s\", simple.getOpt() );                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals( \"simple option\", simple.getLongOpt() );                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals( \"this is a simple option\", simple.getDescription() );                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals( simple.getType(), Float.class );                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue( simple.hasArg() );                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue( simple.isRequired() );                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue( simple.hasArgs() );                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        simple = OptionBuilder.withLongOpt( \"dimple option\")\n                              .hasArg( )\n                              .withDescription( \"this is a dimple option\" )\n                              .create( 'd' );\n\n        try{ assertEquals( \"d\", simple.getOpt() );                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals( \"dimple option\", simple.getLongOpt() );                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals( \"this is a dimple option\", simple.getDescription() );                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals( String.class, simple.getType() );                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue( simple.hasArg() );                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue( !simple.isRequired() );                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue( !simple.hasArgs() );                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testTwoCompleteOptions$catena_4( ) {\n        Option simple = OptionBuilder.withLongOpt( \"simple option\")\n                                     .hasArg( )\n                                     .isRequired( )\n                                     .hasArgs( )\n                                     .withType( Float.class )\n                                     .withDescription( \"this is a simple option\" )\n                                     .create( 's' );\n\n        try{ assertEquals( \"s\", simple.getOpt() );                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals( \"simple option\", simple.getLongOpt() );                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals( \"this is a simple option\", simple.getDescription() );                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals( simple.getType(), Float.class );                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue( simple.hasArg() );                                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue( simple.isRequired() );                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue( simple.hasArgs() );                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        simple = OptionBuilder.withLongOpt( \"dimple option\")\n                              .hasArg( )\n                              .withDescription( \"this is a dimple option\" )\n                              .create( 'd' );\n\n        try{ assertEquals( \"d\", simple.getOpt() );                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals( \"dimple option\", simple.getLongOpt() );                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals( \"this is a dimple option\", simple.getDescription() );                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals( String.class, simple.getType() );                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue( simple.hasArg() );                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue( !simple.isRequired() );                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue( !simple.hasArgs() );                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testTwoCompleteOptions$catena_5( ) {\n        Option simple = OptionBuilder.withLongOpt( \"simple option\")\n                                     .hasArg( )\n                                     .isRequired( )\n                                     .hasArgs( )\n                                     .withType( Float.class )\n                                     .withDescription( \"this is a simple option\" )\n                                     .create( 's' );\n\n        try{ assertEquals( \"s\", simple.getOpt() );                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals( \"simple option\", simple.getLongOpt() );                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals( \"this is a simple option\", simple.getDescription() );                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals( simple.getType(), Float.class );                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue( simple.hasArg() );                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue( simple.isRequired() );                                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue( simple.hasArgs() );                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        simple = OptionBuilder.withLongOpt( \"dimple option\")\n                              .hasArg( )\n                              .withDescription( \"this is a dimple option\" )\n                              .create( 'd' );\n\n        try{ assertEquals( \"d\", simple.getOpt() );                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals( \"dimple option\", simple.getLongOpt() );                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals( \"this is a dimple option\", simple.getDescription() );                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals( String.class, simple.getType() );                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue( simple.hasArg() );                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue( !simple.isRequired() );                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue( !simple.hasArgs() );                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testTwoCompleteOptions$catena_6( ) {\n        Option simple = OptionBuilder.withLongOpt( \"simple option\")\n                                     .hasArg( )\n                                     .isRequired( )\n                                     .hasArgs( )\n                                     .withType( Float.class )\n                                     .withDescription( \"this is a simple option\" )\n                                     .create( 's' );\n\n        try{ assertEquals( \"s\", simple.getOpt() );                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals( \"simple option\", simple.getLongOpt() );                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals( \"this is a simple option\", simple.getDescription() );                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals( simple.getType(), Float.class );                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue( simple.hasArg() );                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue( simple.isRequired() );                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue( simple.hasArgs() );                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n\n        simple = OptionBuilder.withLongOpt( \"dimple option\")\n                              .hasArg( )\n                              .withDescription( \"this is a dimple option\" )\n                              .create( 'd' );\n\n        try{ assertEquals( \"d\", simple.getOpt() );                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals( \"dimple option\", simple.getLongOpt() );                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals( \"this is a dimple option\", simple.getDescription() );                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals( String.class, simple.getType() );                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue( simple.hasArg() );                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue( !simple.isRequired() );                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue( !simple.hasArgs() );                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testTwoCompleteOptions$catena_7( ) {\n        Option simple = OptionBuilder.withLongOpt( \"simple option\")\n                                     .hasArg( )\n                                     .isRequired( )\n                                     .hasArgs( )\n                                     .withType( Float.class )\n                                     .withDescription( \"this is a simple option\" )\n                                     .create( 's' );\n\n        try{ assertEquals( \"s\", simple.getOpt() );                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals( \"simple option\", simple.getLongOpt() );                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals( \"this is a simple option\", simple.getDescription() );                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals( simple.getType(), Float.class );                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue( simple.hasArg() );                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue( simple.isRequired() );                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue( simple.hasArgs() );                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        simple = OptionBuilder.withLongOpt( \"dimple option\")\n                              .hasArg( )\n                              .withDescription( \"this is a dimple option\" )\n                              .create( 'd' );\n\n        assertEquals( \"d\", simple.getOpt() );                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals( \"dimple option\", simple.getLongOpt() );                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals( \"this is a dimple option\", simple.getDescription() );                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals( String.class, simple.getType() );                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue( simple.hasArg() );                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue( !simple.isRequired() );                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue( !simple.hasArgs() );                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testTwoCompleteOptions$catena_8( ) {\n        Option simple = OptionBuilder.withLongOpt( \"simple option\")\n                                     .hasArg( )\n                                     .isRequired( )\n                                     .hasArgs( )\n                                     .withType( Float.class )\n                                     .withDescription( \"this is a simple option\" )\n                                     .create( 's' );\n\n        try{ assertEquals( \"s\", simple.getOpt() );                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals( \"simple option\", simple.getLongOpt() );                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals( \"this is a simple option\", simple.getDescription() );                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals( simple.getType(), Float.class );                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue( simple.hasArg() );                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue( simple.isRequired() );                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue( simple.hasArgs() );                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        simple = OptionBuilder.withLongOpt( \"dimple option\")\n                              .hasArg( )\n                              .withDescription( \"this is a dimple option\" )\n                              .create( 'd' );\n\n        try{ assertEquals( \"d\", simple.getOpt() );                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals( \"dimple option\", simple.getLongOpt() );                                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals( \"this is a dimple option\", simple.getDescription() );                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals( String.class, simple.getType() );                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue( simple.hasArg() );                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue( !simple.isRequired() );                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue( !simple.hasArgs() );                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testTwoCompleteOptions$catena_9( ) {\n        Option simple = OptionBuilder.withLongOpt( \"simple option\")\n                                     .hasArg( )\n                                     .isRequired( )\n                                     .hasArgs( )\n                                     .withType( Float.class )\n                                     .withDescription( \"this is a simple option\" )\n                                     .create( 's' );\n\n        try{ assertEquals( \"s\", simple.getOpt() );                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals( \"simple option\", simple.getLongOpt() );                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals( \"this is a simple option\", simple.getDescription() );                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals( simple.getType(), Float.class );                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue( simple.hasArg() );                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue( simple.isRequired() );                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue( simple.hasArgs() );                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        simple = OptionBuilder.withLongOpt( \"dimple option\")\n                              .hasArg( )\n                              .withDescription( \"this is a dimple option\" )\n                              .create( 'd' );\n\n        try{ assertEquals( \"d\", simple.getOpt() );                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals( \"dimple option\", simple.getLongOpt() );                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals( \"this is a dimple option\", simple.getDescription() );                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals( String.class, simple.getType() );                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue( simple.hasArg() );                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue( !simple.isRequired() );                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue( !simple.hasArgs() );                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testTwoCompleteOptions$catena_11( ) {\n        Option simple = OptionBuilder.withLongOpt( \"simple option\")\n                                     .hasArg( )\n                                     .isRequired( )\n                                     .hasArgs( )\n                                     .withType( Float.class )\n                                     .withDescription( \"this is a simple option\" )\n                                     .create( 's' );\n\n        try{ assertEquals( \"s\", simple.getOpt() );                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals( \"simple option\", simple.getLongOpt() );                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals( \"this is a simple option\", simple.getDescription() );                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals( simple.getType(), Float.class );                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue( simple.hasArg() );                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue( simple.isRequired() );                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue( simple.hasArgs() );                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        simple = OptionBuilder.withLongOpt( \"dimple option\")\n                              .hasArg( )\n                              .withDescription( \"this is a dimple option\" )\n                              .create( 'd' );\n\n        try{ assertEquals( \"d\", simple.getOpt() );                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals( \"dimple option\", simple.getLongOpt() );                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals( \"this is a dimple option\", simple.getDescription() );                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals( String.class, simple.getType() );                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue( simple.hasArg() );                                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue( !simple.isRequired() );                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue( !simple.hasArgs() );                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testTwoCompleteOptions$catena_12( ) {\n        Option simple = OptionBuilder.withLongOpt( \"simple option\")\n                                     .hasArg( )\n                                     .isRequired( )\n                                     .hasArgs( )\n                                     .withType( Float.class )\n                                     .withDescription( \"this is a simple option\" )\n                                     .create( 's' );\n\n        try{ assertEquals( \"s\", simple.getOpt() );                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals( \"simple option\", simple.getLongOpt() );                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals( \"this is a simple option\", simple.getDescription() );                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals( simple.getType(), Float.class );                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue( simple.hasArg() );                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue( simple.isRequired() );                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue( simple.hasArgs() );                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        simple = OptionBuilder.withLongOpt( \"dimple option\")\n                              .hasArg( )\n                              .withDescription( \"this is a dimple option\" )\n                              .create( 'd' );\n\n        try{ assertEquals( \"d\", simple.getOpt() );                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals( \"dimple option\", simple.getLongOpt() );                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals( \"this is a dimple option\", simple.getDescription() );                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals( String.class, simple.getType() );                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue( simple.hasArg() );                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue( !simple.isRequired() );                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue( !simple.hasArgs() );                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testTwoCompleteOptions$catena_13( ) {\n        Option simple = OptionBuilder.withLongOpt( \"simple option\")\n                                     .hasArg( )\n                                     .isRequired( )\n                                     .hasArgs( )\n                                     .withType( Float.class )\n                                     .withDescription( \"this is a simple option\" )\n                                     .create( 's' );\n\n        try{ assertEquals( \"s\", simple.getOpt() );                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals( \"simple option\", simple.getLongOpt() );                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals( \"this is a simple option\", simple.getDescription() );                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals( simple.getType(), Float.class );                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue( simple.hasArg() );                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue( simple.isRequired() );                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue( simple.hasArgs() );                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        simple = OptionBuilder.withLongOpt( \"dimple option\")\n                              .hasArg( )\n                              .withDescription( \"this is a dimple option\" )\n                              .create( 'd' );\n\n        try{ assertEquals( \"d\", simple.getOpt() );                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals( \"dimple option\", simple.getLongOpt() );                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals( \"this is a dimple option\", simple.getDescription() );                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals( String.class, simple.getType() );                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue( simple.hasArg() );                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue( !simple.isRequired() );                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue( !simple.hasArgs() );                                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
        ]
    }
}