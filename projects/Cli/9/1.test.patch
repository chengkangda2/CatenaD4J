{
    "org.apache.commons.cli.OptionsTest::testMissingOptionsException": {
        "begin_line_no": 108,
        "end_line_no": 118,
        "file_path": "src/test/org/apache/commons/cli/OptionsTest.java",
        "to": [
            "    public void testMissingOptionsException$catena_1() throws ParseException {\n        Options options = new Options();\n        options.addOption(OptionBuilder.isRequired().create(\"f\"));\n        options.addOption(OptionBuilder.isRequired().create(\"x\"));\n        try {\n            new PosixParser().parse(options, new String[0]);\n            try{ fail(\"Expected MissingOptionException to be thrown\");                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (MissingOptionException e) {\n            assertEquals(\"Missing required options: f, x\", e.getMessage());                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n    }",
            "    public void testMissingOptionsException$catena_0() throws ParseException {\n        Options options = new Options();\n        options.addOption(OptionBuilder.isRequired().create(\"f\"));\n        options.addOption(OptionBuilder.isRequired().create(\"x\"));\n        try {\n            new PosixParser().parse(options, new String[0]);\n            fail(\"Expected MissingOptionException to be thrown\");                                           /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (MissingOptionException e) {\n            try{ assertEquals(\"Missing required options: f, x\", e.getMessage());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }"
        ]
    },
    "org.apache.commons.cli.ParseRequiredTest::testMissingRequiredOptions": {
        "begin_line_no": 118,
        "end_line_no": 141,
        "file_path": "src/test/org/apache/commons/cli/ParseRequiredTest.java",
        "to": [
            "    public void testMissingRequiredOptions$catena_1()\n    {\n        String[] args = new String[] { \"-a\" };\n\n        _options.addOption( OptionBuilder.withLongOpt( \"cfile\" )\n                                     .hasArg()\n                                     .isRequired()\n                                     .withDescription( \"set the value of [c]\" )\n                                     .create( 'c' ) );\n\n        try\n        {\n            CommandLine cl = parser.parse(_options,args);\n            try{ fail( \"exception should have been thrown\" );                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        catch (MissingOptionException e)\n        {\n            assertEquals( \"Incorrect exception message\", \"Missing required options: b, c\", e.getMessage() );         /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n        catch (ParseException e)\n        {\n            try{ fail( \"expected to catch MissingOptionException\" );                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
            "    public void testMissingRequiredOptions$catena_0()\n    {\n        String[] args = new String[] { \"-a\" };\n\n        _options.addOption( OptionBuilder.withLongOpt( \"cfile\" )\n                                     .hasArg()\n                                     .isRequired()\n                                     .withDescription( \"set the value of [c]\" )\n                                     .create( 'c' ) );\n\n        try\n        {\n            CommandLine cl = parser.parse(_options,args);\n            fail( \"exception should have been thrown\" );                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n        catch (MissingOptionException e)\n        {\n            try{ assertEquals( \"Incorrect exception message\", \"Missing required options: b, c\", e.getMessage() );    }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        catch (ParseException e)\n        {\n            try{ fail( \"expected to catch MissingOptionException\" );                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
            "    public void testMissingRequiredOptions$catena_2()\n    {\n        String[] args = new String[] { \"-a\" };\n\n        _options.addOption( OptionBuilder.withLongOpt( \"cfile\" )\n                                     .hasArg()\n                                     .isRequired()\n                                     .withDescription( \"set the value of [c]\" )\n                                     .create( 'c' ) );\n\n        try\n        {\n            CommandLine cl = parser.parse(_options,args);\n            try{ fail( \"exception should have been thrown\" );                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        catch (MissingOptionException e)\n        {\n            try{ assertEquals( \"Incorrect exception message\", \"Missing required options: b, c\", e.getMessage() );    }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        catch (ParseException e)\n        {\n            fail( \"expected to catch MissingOptionException\" );                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n    }"
        ]
    }
}