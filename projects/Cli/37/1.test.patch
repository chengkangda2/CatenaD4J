{
    "org.apache.commons.cli.bug.BugCLI265Test::shouldParseShortOptionWithoutValue": {
        "begin_line_no": 45,
        "end_line_no": 54,
        "file_path": "src/test/java/org/apache/commons/cli/bug/BugCLI265Test.java",
        "to": [
            "    @Test\n    public void shouldParseShortOptionWithoutValue$catena_1() throws Exception {\n        String[] twoShortOptions = new String[]{\"-t1\", \"-last\"};\n\n        final CommandLine commandLine = parser.parse(options, twoShortOptions);\n\n        try{ assertTrue(commandLine.hasOption(\"t1\"));                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertNotEquals(\"Second option has been used as value for first option\", \"-last\", commandLine.getOptionValue(\"t1\"));         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(\"Second option has not been detected\", commandLine.hasOption(\"last\"));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void shouldParseShortOptionWithoutValue$catena_2() throws Exception {\n        String[] twoShortOptions = new String[]{\"-t1\", \"-last\"};\n\n        final CommandLine commandLine = parser.parse(options, twoShortOptions);\n\n        try{ assertTrue(commandLine.hasOption(\"t1\"));                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotEquals(\"Second option has been used as value for first option\", \"-last\", commandLine.getOptionValue(\"t1\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(\"Second option has not been detected\", commandLine.hasOption(\"last\"));                                            /***** ORIGINAL ASSERTION IS HERE *****/\n    }",
            "    @Test\n    public void shouldParseShortOptionWithoutValue$catena_0() throws Exception {\n        String[] twoShortOptions = new String[]{\"-t1\", \"-last\"};\n\n        final CommandLine commandLine = parser.parse(options, twoShortOptions);\n\n        assertTrue(commandLine.hasOption(\"t1\"));                                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertNotEquals(\"Second option has been used as value for first option\", \"-last\", commandLine.getOptionValue(\"t1\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"Second option has not been detected\", commandLine.hasOption(\"last\"));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    }
}