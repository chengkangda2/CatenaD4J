{
    "org.apache.commons.csv.CSVPrinterTest::testMySqlNullOutput": {
        "begin_line_no": 322,
        "end_line_no": 422,
        "file_path": "src/test/java/org/apache/commons/csv/CSVPrinterTest.java",
        "to": [
            "    @Test\n    public void testMySqlNullOutput$catena_11() throws IOException {\n        Object[] s = new String[] { \"NULL\", null };\n        CSVFormat format = CSVFormat.MYSQL.withQuote('\"').withNullString(\"NULL\").withQuoteMode(QuoteMode.NON_NUMERIC);\n        StringWriter writer = new StringWriter();\n        CSVPrinter printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        String expected = \"\\\"NULL\\\"\\tNULL\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        String[] record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(new Object[2], record0);                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\\\\N\", null };\n        format = CSVFormat.MYSQL.withNullString(\"\\\\N\");\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\\\\\\\N\\t\\\\N\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\\\\N\", \"A\" };\n        format = CSVFormat.MYSQL.withNullString(\"\\\\N\");\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\\\\\\\N\\tA\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\\n\", \"A\" };\n        format = CSVFormat.MYSQL.withNullString(\"\\\\N\");\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\\\n\\tA\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\", null };\n        format = CSVFormat.MYSQL.withNullString(\"NULL\");\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\tNULL\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\", null };\n        format = CSVFormat.MYSQL;\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\t\\\\N\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        assertArrayEquals(expectNulls(s, format), record0);                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n\n        s = new String[] { \"\\\\N\", \"\", \"\\u000e,\\\\\\r\" };\n        format = CSVFormat.MYSQL;\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\\\\\\\N\\t\\t\\u000e,\\\\\\\\\\\\r\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"NULL\", \"\\\\\\r\" };\n        format = CSVFormat.MYSQL;\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"NULL\\t\\\\\\\\\\\\r\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\\\\\\r\" };\n        format = CSVFormat.MYSQL;\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\\\\\\\\\\\r\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void testMySqlNullOutput$catena_1() throws IOException {\n        Object[] s = new String[] { \"NULL\", null };\n        CSVFormat format = CSVFormat.MYSQL.withQuote('\"').withNullString(\"NULL\").withQuoteMode(QuoteMode.NON_NUMERIC);\n        StringWriter writer = new StringWriter();\n        CSVPrinter printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        String expected = \"\\\"NULL\\\"\\tNULL\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        String[] record0 = toFirstRecordValues(expected, format);\n        assertArrayEquals(new Object[2], record0);                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n\n        s = new String[] { \"\\\\N\", null };\n        format = CSVFormat.MYSQL.withNullString(\"\\\\N\");\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\\\\\\\N\\t\\\\N\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\\\\N\", \"A\" };\n        format = CSVFormat.MYSQL.withNullString(\"\\\\N\");\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\\\\\\\N\\tA\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\\n\", \"A\" };\n        format = CSVFormat.MYSQL.withNullString(\"\\\\N\");\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\\\n\\tA\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\", null };\n        format = CSVFormat.MYSQL.withNullString(\"NULL\");\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\tNULL\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\", null };\n        format = CSVFormat.MYSQL;\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\t\\\\N\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\\\\N\", \"\", \"\\u000e,\\\\\\r\" };\n        format = CSVFormat.MYSQL;\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\\\\\\\N\\t\\t\\u000e,\\\\\\\\\\\\r\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"NULL\", \"\\\\\\r\" };\n        format = CSVFormat.MYSQL;\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"NULL\\t\\\\\\\\\\\\r\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\\\\\\r\" };\n        format = CSVFormat.MYSQL;\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\\\\\\\\\\\r\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void testMySqlNullOutput$catena_3() throws IOException {\n        Object[] s = new String[] { \"NULL\", null };\n        CSVFormat format = CSVFormat.MYSQL.withQuote('\"').withNullString(\"NULL\").withQuoteMode(QuoteMode.NON_NUMERIC);\n        StringWriter writer = new StringWriter();\n        CSVPrinter printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        String expected = \"\\\"NULL\\\"\\tNULL\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        String[] record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(new Object[2], record0);                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\\\\N\", null };\n        format = CSVFormat.MYSQL.withNullString(\"\\\\N\");\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\\\\\\\N\\t\\\\N\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        assertArrayEquals(expectNulls(s, format), record0);                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n\n        s = new String[] { \"\\\\N\", \"A\" };\n        format = CSVFormat.MYSQL.withNullString(\"\\\\N\");\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\\\\\\\N\\tA\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\\n\", \"A\" };\n        format = CSVFormat.MYSQL.withNullString(\"\\\\N\");\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\\\n\\tA\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\", null };\n        format = CSVFormat.MYSQL.withNullString(\"NULL\");\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\tNULL\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\", null };\n        format = CSVFormat.MYSQL;\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\t\\\\N\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\\\\N\", \"\", \"\\u000e,\\\\\\r\" };\n        format = CSVFormat.MYSQL;\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\\\\\\\N\\t\\t\\u000e,\\\\\\\\\\\\r\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"NULL\", \"\\\\\\r\" };\n        format = CSVFormat.MYSQL;\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"NULL\\t\\\\\\\\\\\\r\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\\\\\\r\" };\n        format = CSVFormat.MYSQL;\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\\\\\\\\\\\r\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void testMySqlNullOutput$catena_4() throws IOException {\n        Object[] s = new String[] { \"NULL\", null };\n        CSVFormat format = CSVFormat.MYSQL.withQuote('\"').withNullString(\"NULL\").withQuoteMode(QuoteMode.NON_NUMERIC);\n        StringWriter writer = new StringWriter();\n        CSVPrinter printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        String expected = \"\\\"NULL\\\"\\tNULL\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        String[] record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(new Object[2], record0);                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\\\\N\", null };\n        format = CSVFormat.MYSQL.withNullString(\"\\\\N\");\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\\\\\\\N\\t\\\\N\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\\\\N\", \"A\" };\n        format = CSVFormat.MYSQL.withNullString(\"\\\\N\");\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\\\\\\\N\\tA\\n\";\n        assertEquals(expected, writer.toString());                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\\n\", \"A\" };\n        format = CSVFormat.MYSQL.withNullString(\"\\\\N\");\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\\\n\\tA\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\", null };\n        format = CSVFormat.MYSQL.withNullString(\"NULL\");\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\tNULL\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\", null };\n        format = CSVFormat.MYSQL;\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\t\\\\N\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\\\\N\", \"\", \"\\u000e,\\\\\\r\" };\n        format = CSVFormat.MYSQL;\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\\\\\\\N\\t\\t\\u000e,\\\\\\\\\\\\r\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"NULL\", \"\\\\\\r\" };\n        format = CSVFormat.MYSQL;\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"NULL\\t\\\\\\\\\\\\r\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\\\\\\r\" };\n        format = CSVFormat.MYSQL;\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\\\\\\\\\\\r\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void testMySqlNullOutput$catena_5() throws IOException {\n        Object[] s = new String[] { \"NULL\", null };\n        CSVFormat format = CSVFormat.MYSQL.withQuote('\"').withNullString(\"NULL\").withQuoteMode(QuoteMode.NON_NUMERIC);\n        StringWriter writer = new StringWriter();\n        CSVPrinter printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        String expected = \"\\\"NULL\\\"\\tNULL\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        String[] record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(new Object[2], record0);                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\\\\N\", null };\n        format = CSVFormat.MYSQL.withNullString(\"\\\\N\");\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\\\\\\\N\\t\\\\N\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\\\\N\", \"A\" };\n        format = CSVFormat.MYSQL.withNullString(\"\\\\N\");\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\\\\\\\N\\tA\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        assertArrayEquals(expectNulls(s, format), record0);                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n\n        s = new String[] { \"\\n\", \"A\" };\n        format = CSVFormat.MYSQL.withNullString(\"\\\\N\");\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\\\n\\tA\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\", null };\n        format = CSVFormat.MYSQL.withNullString(\"NULL\");\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\tNULL\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\", null };\n        format = CSVFormat.MYSQL;\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\t\\\\N\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\\\\N\", \"\", \"\\u000e,\\\\\\r\" };\n        format = CSVFormat.MYSQL;\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\\\\\\\N\\t\\t\\u000e,\\\\\\\\\\\\r\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"NULL\", \"\\\\\\r\" };\n        format = CSVFormat.MYSQL;\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"NULL\\t\\\\\\\\\\\\r\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\\\\\\r\" };\n        format = CSVFormat.MYSQL;\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\\\\\\\\\\\r\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void testMySqlNullOutput$catena_6() throws IOException {\n        Object[] s = new String[] { \"NULL\", null };\n        CSVFormat format = CSVFormat.MYSQL.withQuote('\"').withNullString(\"NULL\").withQuoteMode(QuoteMode.NON_NUMERIC);\n        StringWriter writer = new StringWriter();\n        CSVPrinter printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        String expected = \"\\\"NULL\\\"\\tNULL\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        String[] record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(new Object[2], record0);                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\\\\N\", null };\n        format = CSVFormat.MYSQL.withNullString(\"\\\\N\");\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\\\\\\\N\\t\\\\N\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\\\\N\", \"A\" };\n        format = CSVFormat.MYSQL.withNullString(\"\\\\N\");\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\\\\\\\N\\tA\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\\n\", \"A\" };\n        format = CSVFormat.MYSQL.withNullString(\"\\\\N\");\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\\\n\\tA\\n\";\n        assertEquals(expected, writer.toString());                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\", null };\n        format = CSVFormat.MYSQL.withNullString(\"NULL\");\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\tNULL\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\", null };\n        format = CSVFormat.MYSQL;\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\t\\\\N\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\\\\N\", \"\", \"\\u000e,\\\\\\r\" };\n        format = CSVFormat.MYSQL;\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\\\\\\\N\\t\\t\\u000e,\\\\\\\\\\\\r\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"NULL\", \"\\\\\\r\" };\n        format = CSVFormat.MYSQL;\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"NULL\\t\\\\\\\\\\\\r\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\\\\\\r\" };\n        format = CSVFormat.MYSQL;\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\\\\\\\\\\\r\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void testMySqlNullOutput$catena_7() throws IOException {\n        Object[] s = new String[] { \"NULL\", null };\n        CSVFormat format = CSVFormat.MYSQL.withQuote('\"').withNullString(\"NULL\").withQuoteMode(QuoteMode.NON_NUMERIC);\n        StringWriter writer = new StringWriter();\n        CSVPrinter printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        String expected = \"\\\"NULL\\\"\\tNULL\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        String[] record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(new Object[2], record0);                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\\\\N\", null };\n        format = CSVFormat.MYSQL.withNullString(\"\\\\N\");\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\\\\\\\N\\t\\\\N\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\\\\N\", \"A\" };\n        format = CSVFormat.MYSQL.withNullString(\"\\\\N\");\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\\\\\\\N\\tA\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\\n\", \"A\" };\n        format = CSVFormat.MYSQL.withNullString(\"\\\\N\");\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\\\n\\tA\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        assertArrayEquals(expectNulls(s, format), record0);                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n\n        s = new String[] { \"\", null };\n        format = CSVFormat.MYSQL.withNullString(\"NULL\");\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\tNULL\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\", null };\n        format = CSVFormat.MYSQL;\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\t\\\\N\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\\\\N\", \"\", \"\\u000e,\\\\\\r\" };\n        format = CSVFormat.MYSQL;\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\\\\\\\N\\t\\t\\u000e,\\\\\\\\\\\\r\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"NULL\", \"\\\\\\r\" };\n        format = CSVFormat.MYSQL;\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"NULL\\t\\\\\\\\\\\\r\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\\\\\\r\" };\n        format = CSVFormat.MYSQL;\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\\\\\\\\\\\r\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void testMySqlNullOutput$catena_8() throws IOException {\n        Object[] s = new String[] { \"NULL\", null };\n        CSVFormat format = CSVFormat.MYSQL.withQuote('\"').withNullString(\"NULL\").withQuoteMode(QuoteMode.NON_NUMERIC);\n        StringWriter writer = new StringWriter();\n        CSVPrinter printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        String expected = \"\\\"NULL\\\"\\tNULL\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        String[] record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(new Object[2], record0);                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\\\\N\", null };\n        format = CSVFormat.MYSQL.withNullString(\"\\\\N\");\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\\\\\\\N\\t\\\\N\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\\\\N\", \"A\" };\n        format = CSVFormat.MYSQL.withNullString(\"\\\\N\");\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\\\\\\\N\\tA\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\\n\", \"A\" };\n        format = CSVFormat.MYSQL.withNullString(\"\\\\N\");\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\\\n\\tA\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\", null };\n        format = CSVFormat.MYSQL.withNullString(\"NULL\");\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\tNULL\\n\";\n        assertEquals(expected, writer.toString());                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\", null };\n        format = CSVFormat.MYSQL;\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\t\\\\N\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\\\\N\", \"\", \"\\u000e,\\\\\\r\" };\n        format = CSVFormat.MYSQL;\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\\\\\\\N\\t\\t\\u000e,\\\\\\\\\\\\r\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"NULL\", \"\\\\\\r\" };\n        format = CSVFormat.MYSQL;\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"NULL\\t\\\\\\\\\\\\r\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\\\\\\r\" };\n        format = CSVFormat.MYSQL;\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\\\\\\\\\\\r\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void testMySqlNullOutput$catena_9() throws IOException {\n        Object[] s = new String[] { \"NULL\", null };\n        CSVFormat format = CSVFormat.MYSQL.withQuote('\"').withNullString(\"NULL\").withQuoteMode(QuoteMode.NON_NUMERIC);\n        StringWriter writer = new StringWriter();\n        CSVPrinter printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        String expected = \"\\\"NULL\\\"\\tNULL\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        String[] record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(new Object[2], record0);                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\\\\N\", null };\n        format = CSVFormat.MYSQL.withNullString(\"\\\\N\");\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\\\\\\\N\\t\\\\N\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\\\\N\", \"A\" };\n        format = CSVFormat.MYSQL.withNullString(\"\\\\N\");\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\\\\\\\N\\tA\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\\n\", \"A\" };\n        format = CSVFormat.MYSQL.withNullString(\"\\\\N\");\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\\\n\\tA\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\", null };\n        format = CSVFormat.MYSQL.withNullString(\"NULL\");\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\tNULL\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        assertArrayEquals(expectNulls(s, format), record0);                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n\n        s = new String[] { \"\", null };\n        format = CSVFormat.MYSQL;\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\t\\\\N\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\\\\N\", \"\", \"\\u000e,\\\\\\r\" };\n        format = CSVFormat.MYSQL;\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\\\\\\\N\\t\\t\\u000e,\\\\\\\\\\\\r\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"NULL\", \"\\\\\\r\" };\n        format = CSVFormat.MYSQL;\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"NULL\\t\\\\\\\\\\\\r\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\\\\\\r\" };\n        format = CSVFormat.MYSQL;\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\\\\\\\\\\\r\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void testMySqlNullOutput$catena_12() throws IOException {\n        Object[] s = new String[] { \"NULL\", null };\n        CSVFormat format = CSVFormat.MYSQL.withQuote('\"').withNullString(\"NULL\").withQuoteMode(QuoteMode.NON_NUMERIC);\n        StringWriter writer = new StringWriter();\n        CSVPrinter printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        String expected = \"\\\"NULL\\\"\\tNULL\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        String[] record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(new Object[2], record0);                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\\\\N\", null };\n        format = CSVFormat.MYSQL.withNullString(\"\\\\N\");\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\\\\\\\N\\t\\\\N\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\\\\N\", \"A\" };\n        format = CSVFormat.MYSQL.withNullString(\"\\\\N\");\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\\\\\\\N\\tA\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\\n\", \"A\" };\n        format = CSVFormat.MYSQL.withNullString(\"\\\\N\");\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\\\n\\tA\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\", null };\n        format = CSVFormat.MYSQL.withNullString(\"NULL\");\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\tNULL\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\", null };\n        format = CSVFormat.MYSQL;\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\t\\\\N\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\\\\N\", \"\", \"\\u000e,\\\\\\r\" };\n        format = CSVFormat.MYSQL;\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\\\\\\\N\\t\\t\\u000e,\\\\\\\\\\\\r\\n\";\n        assertEquals(expected, writer.toString());                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"NULL\", \"\\\\\\r\" };\n        format = CSVFormat.MYSQL;\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"NULL\\t\\\\\\\\\\\\r\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\\\\\\r\" };\n        format = CSVFormat.MYSQL;\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\\\\\\\\\\\r\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void testMySqlNullOutput$catena_13() throws IOException {\n        Object[] s = new String[] { \"NULL\", null };\n        CSVFormat format = CSVFormat.MYSQL.withQuote('\"').withNullString(\"NULL\").withQuoteMode(QuoteMode.NON_NUMERIC);\n        StringWriter writer = new StringWriter();\n        CSVPrinter printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        String expected = \"\\\"NULL\\\"\\tNULL\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        String[] record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(new Object[2], record0);                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\\\\N\", null };\n        format = CSVFormat.MYSQL.withNullString(\"\\\\N\");\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\\\\\\\N\\t\\\\N\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\\\\N\", \"A\" };\n        format = CSVFormat.MYSQL.withNullString(\"\\\\N\");\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\\\\\\\N\\tA\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\\n\", \"A\" };\n        format = CSVFormat.MYSQL.withNullString(\"\\\\N\");\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\\\n\\tA\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\", null };\n        format = CSVFormat.MYSQL.withNullString(\"NULL\");\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\tNULL\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\", null };\n        format = CSVFormat.MYSQL;\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\t\\\\N\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\\\\N\", \"\", \"\\u000e,\\\\\\r\" };\n        format = CSVFormat.MYSQL;\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\\\\\\\N\\t\\t\\u000e,\\\\\\\\\\\\r\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        assertArrayEquals(expectNulls(s, format), record0);                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n\n        s = new String[] { \"NULL\", \"\\\\\\r\" };\n        format = CSVFormat.MYSQL;\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"NULL\\t\\\\\\\\\\\\r\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\\\\\\r\" };\n        format = CSVFormat.MYSQL;\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\\\\\\\\\\\r\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void testMySqlNullOutput$catena_14() throws IOException {\n        Object[] s = new String[] { \"NULL\", null };\n        CSVFormat format = CSVFormat.MYSQL.withQuote('\"').withNullString(\"NULL\").withQuoteMode(QuoteMode.NON_NUMERIC);\n        StringWriter writer = new StringWriter();\n        CSVPrinter printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        String expected = \"\\\"NULL\\\"\\tNULL\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        String[] record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(new Object[2], record0);                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\\\\N\", null };\n        format = CSVFormat.MYSQL.withNullString(\"\\\\N\");\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\\\\\\\N\\t\\\\N\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\\\\N\", \"A\" };\n        format = CSVFormat.MYSQL.withNullString(\"\\\\N\");\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\\\\\\\N\\tA\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\\n\", \"A\" };\n        format = CSVFormat.MYSQL.withNullString(\"\\\\N\");\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\\\n\\tA\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\", null };\n        format = CSVFormat.MYSQL.withNullString(\"NULL\");\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\tNULL\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\", null };\n        format = CSVFormat.MYSQL;\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\t\\\\N\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\\\\N\", \"\", \"\\u000e,\\\\\\r\" };\n        format = CSVFormat.MYSQL;\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\\\\\\\N\\t\\t\\u000e,\\\\\\\\\\\\r\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"NULL\", \"\\\\\\r\" };\n        format = CSVFormat.MYSQL;\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"NULL\\t\\\\\\\\\\\\r\\n\";\n        assertEquals(expected, writer.toString());                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\\\\\\r\" };\n        format = CSVFormat.MYSQL;\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\\\\\\\\\\\r\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void testMySqlNullOutput$catena_15() throws IOException {\n        Object[] s = new String[] { \"NULL\", null };\n        CSVFormat format = CSVFormat.MYSQL.withQuote('\"').withNullString(\"NULL\").withQuoteMode(QuoteMode.NON_NUMERIC);\n        StringWriter writer = new StringWriter();\n        CSVPrinter printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        String expected = \"\\\"NULL\\\"\\tNULL\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        String[] record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(new Object[2], record0);                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\\\\N\", null };\n        format = CSVFormat.MYSQL.withNullString(\"\\\\N\");\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\\\\\\\N\\t\\\\N\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\\\\N\", \"A\" };\n        format = CSVFormat.MYSQL.withNullString(\"\\\\N\");\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\\\\\\\N\\tA\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\\n\", \"A\" };\n        format = CSVFormat.MYSQL.withNullString(\"\\\\N\");\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\\\n\\tA\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\", null };\n        format = CSVFormat.MYSQL.withNullString(\"NULL\");\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\tNULL\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\", null };\n        format = CSVFormat.MYSQL;\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\t\\\\N\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\\\\N\", \"\", \"\\u000e,\\\\\\r\" };\n        format = CSVFormat.MYSQL;\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\\\\\\\N\\t\\t\\u000e,\\\\\\\\\\\\r\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"NULL\", \"\\\\\\r\" };\n        format = CSVFormat.MYSQL;\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"NULL\\t\\\\\\\\\\\\r\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        assertArrayEquals(expectNulls(s, format), record0);                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n\n        s = new String[] { \"\\\\\\r\" };\n        format = CSVFormat.MYSQL;\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\\\\\\\\\\\r\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void testMySqlNullOutput$catena_16() throws IOException {\n        Object[] s = new String[] { \"NULL\", null };\n        CSVFormat format = CSVFormat.MYSQL.withQuote('\"').withNullString(\"NULL\").withQuoteMode(QuoteMode.NON_NUMERIC);\n        StringWriter writer = new StringWriter();\n        CSVPrinter printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        String expected = \"\\\"NULL\\\"\\tNULL\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        String[] record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(new Object[2], record0);                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\\\\N\", null };\n        format = CSVFormat.MYSQL.withNullString(\"\\\\N\");\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\\\\\\\N\\t\\\\N\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\\\\N\", \"A\" };\n        format = CSVFormat.MYSQL.withNullString(\"\\\\N\");\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\\\\\\\N\\tA\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\\n\", \"A\" };\n        format = CSVFormat.MYSQL.withNullString(\"\\\\N\");\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\\\n\\tA\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\", null };\n        format = CSVFormat.MYSQL.withNullString(\"NULL\");\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\tNULL\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\", null };\n        format = CSVFormat.MYSQL;\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\t\\\\N\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\\\\N\", \"\", \"\\u000e,\\\\\\r\" };\n        format = CSVFormat.MYSQL;\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\\\\\\\N\\t\\t\\u000e,\\\\\\\\\\\\r\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"NULL\", \"\\\\\\r\" };\n        format = CSVFormat.MYSQL;\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"NULL\\t\\\\\\\\\\\\r\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\\\\\\r\" };\n        format = CSVFormat.MYSQL;\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\\\\\\\\\\\r\\n\";\n        assertEquals(expected, writer.toString());                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void testMySqlNullOutput$catena_17() throws IOException {\n        Object[] s = new String[] { \"NULL\", null };\n        CSVFormat format = CSVFormat.MYSQL.withQuote('\"').withNullString(\"NULL\").withQuoteMode(QuoteMode.NON_NUMERIC);\n        StringWriter writer = new StringWriter();\n        CSVPrinter printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        String expected = \"\\\"NULL\\\"\\tNULL\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        String[] record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(new Object[2], record0);                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\\\\N\", null };\n        format = CSVFormat.MYSQL.withNullString(\"\\\\N\");\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\\\\\\\N\\t\\\\N\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\\\\N\", \"A\" };\n        format = CSVFormat.MYSQL.withNullString(\"\\\\N\");\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\\\\\\\N\\tA\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\\n\", \"A\" };\n        format = CSVFormat.MYSQL.withNullString(\"\\\\N\");\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\\\n\\tA\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\", null };\n        format = CSVFormat.MYSQL.withNullString(\"NULL\");\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\tNULL\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\", null };\n        format = CSVFormat.MYSQL;\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\t\\\\N\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\\\\N\", \"\", \"\\u000e,\\\\\\r\" };\n        format = CSVFormat.MYSQL;\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\\\\\\\N\\t\\t\\u000e,\\\\\\\\\\\\r\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"NULL\", \"\\\\\\r\" };\n        format = CSVFormat.MYSQL;\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"NULL\\t\\\\\\\\\\\\r\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        try{ assertArrayEquals(expectNulls(s, format), record0);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s = new String[] { \"\\\\\\r\" };\n        format = CSVFormat.MYSQL;\n        writer = new StringWriter();\n        printer = new CSVPrinter(writer, format);\n        printer.printRecord(s);\n        printer.close();\n        expected = \"\\\\\\\\\\\\r\\n\";\n        try{ assertEquals(expected, writer.toString());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        record0 = toFirstRecordValues(expected, format);\n        assertArrayEquals(expectNulls(s, format), record0);                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
        ]
    }
}