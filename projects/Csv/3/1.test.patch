{
    "org.apache.commons.csv.CSVParserTest::testBackslashEscaping": {
        "begin_line_no": 282,
        "end_line_no": 323,
        "file_path": "src/test/java/org/apache/commons/csv/CSVParserTest.java",
        "to": [
            "    @Test\n    public void testBackslashEscaping$catena_1() throws IOException {\n\n        // To avoid confusion over the need for escaping chars in java code,\n        // We will test with a forward slash as the escape char, and a single\n        // quote as the encapsulator.\n\n        final String code =\n                \"one,two,three\\n\" // 0\n                        + \"'',''\\n\"       // 1) empty encapsulators\n                        + \"/',/'\\n\"       // 2) single encapsulators\n                        + \"'/'','/''\\n\"   // 3) single encapsulators encapsulated via escape\n                        + \"'''',''''\\n\"   // 4) single encapsulators encapsulated via doubling\n                        + \"/,,/,\\n\"       // 5) separator escaped\n                        + \"//,//\\n\"       // 6) escape escaped\n                        + \"'//','//'\\n\"   // 7) escape escaped in encapsulation\n                        + \"   8   ,   \\\"quoted \\\"\\\" /\\\" // string\\\"   \\n\"     // don't eat spaces\n                        + \"9,   /\\n   \\n\"  // escaped newline\n                        + \"\";\n        final String[][] res = {\n                {\"one\", \"two\", \"three\"}, // 0\n                {\"\", \"\"},                // 1\n                {\"'\", \"'\"},              // 2\n                {\"'\", \"'\"},              // 3\n                {\"'\", \"'\"},              // 4\n                {\",\", \",\"},              // 5\n                {\"/\", \"/\"},              // 6\n                {\"/\", \"/\"},              // 7\n                {\"   8   \", \"   \\\"quoted \\\"\\\" /\\\" / string\\\"   \"},\n                {\"9\", \"   \\n   \"},\n        };\n\n\n        final CSVFormat format = CSVFormat.newBuilder(',').withQuoteChar('\\'').withEscape('/')\n                               .withIgnoreEmptyLines(true).withRecordSeparator(CRLF).build();\n\n        final CSVParser parser = new CSVParser(code, format);\n        final List<CSVRecord> records = parser.getRecords();\n        try{ assertTrue(records.size() > 0);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        Utils.compare(\"Records do not match expected result\", res, records);                                /***** ORIGINAL ASSERTION IS HERE *****/\n    }",
            "    @Test\n    public void testBackslashEscaping$catena_0() throws IOException {\n\n        // To avoid confusion over the need for escaping chars in java code,\n        // We will test with a forward slash as the escape char, and a single\n        // quote as the encapsulator.\n\n        final String code =\n                \"one,two,three\\n\" // 0\n                        + \"'',''\\n\"       // 1) empty encapsulators\n                        + \"/',/'\\n\"       // 2) single encapsulators\n                        + \"'/'','/''\\n\"   // 3) single encapsulators encapsulated via escape\n                        + \"'''',''''\\n\"   // 4) single encapsulators encapsulated via doubling\n                        + \"/,,/,\\n\"       // 5) separator escaped\n                        + \"//,//\\n\"       // 6) escape escaped\n                        + \"'//','//'\\n\"   // 7) escape escaped in encapsulation\n                        + \"   8   ,   \\\"quoted \\\"\\\" /\\\" // string\\\"   \\n\"     // don't eat spaces\n                        + \"9,   /\\n   \\n\"  // escaped newline\n                        + \"\";\n        final String[][] res = {\n                {\"one\", \"two\", \"three\"}, // 0\n                {\"\", \"\"},                // 1\n                {\"'\", \"'\"},              // 2\n                {\"'\", \"'\"},              // 3\n                {\"'\", \"'\"},              // 4\n                {\",\", \",\"},              // 5\n                {\"/\", \"/\"},              // 6\n                {\"/\", \"/\"},              // 7\n                {\"   8   \", \"   \\\"quoted \\\"\\\" /\\\" / string\\\"   \"},\n                {\"9\", \"   \\n   \"},\n        };\n\n\n        final CSVFormat format = CSVFormat.newBuilder(',').withQuoteChar('\\'').withEscape('/')\n                               .withIgnoreEmptyLines(true).withRecordSeparator(CRLF).build();\n\n        final CSVParser parser = new CSVParser(code, format);\n        final List<CSVRecord> records = parser.getRecords();\n        assertTrue(records.size() > 0);                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ Utils.compare(\"Records do not match expected result\", res, records);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    }
}