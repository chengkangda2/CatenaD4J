{
    "org.apache.commons.compress.archivers.ZipTestCase::testListAllFilesWithNestedArchive": {
        "begin_line_no": 242,
        "end_line_no": 282,
        "file_path": "src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java",
        "to": [
            "    @Test\n    public void testListAllFilesWithNestedArchive$catena_4() throws Exception {\n        final File input = getFile(\"OSX_ArchiveWithNestedArchive.zip\");\n\n        final List<String> results = new ArrayList<>();\n        final List<ZipException> expectedExceptions = new ArrayList<>();\n\n        final InputStream is = new FileInputStream(input);\n        ArchiveInputStream in = null;\n        try {\n            in = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is);\n\n            ZipArchiveEntry entry = null;\n            while ((entry = (ZipArchiveEntry) in.getNextEntry()) != null) {\n                results.add(entry.getName());\n\n                final ArchiveInputStream nestedIn = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", in);\n                try {\n                    ZipArchiveEntry nestedEntry = null;\n                    while ((nestedEntry = (ZipArchiveEntry) nestedIn.getNextEntry()) != null) {\n                        results.add(nestedEntry.getName());\n                    }\n                } catch (ZipException ex) {\n                    // expected since you cannot create a final ArchiveInputStream from test3.xml\n                    expectedExceptions.add(ex);\n                }\n                // nested stream must not be closed here\n            }\n        } finally {\n            if (in != null) {\n                in.close();\n            }\n        }\n        is.close();\n\n        try{ assertTrue(results.contains(\"NestedArchiv.zip\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(results.contains(\"test1.xml\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(results.contains(\"test2.xml\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(results.contains(\"test3.xml\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(1, expectedExceptions.size());                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n    }",
            "    @Test\n    public void testListAllFilesWithNestedArchive$catena_0() throws Exception {\n        final File input = getFile(\"OSX_ArchiveWithNestedArchive.zip\");\n\n        final List<String> results = new ArrayList<>();\n        final List<ZipException> expectedExceptions = new ArrayList<>();\n\n        final InputStream is = new FileInputStream(input);\n        ArchiveInputStream in = null;\n        try {\n            in = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is);\n\n            ZipArchiveEntry entry = null;\n            while ((entry = (ZipArchiveEntry) in.getNextEntry()) != null) {\n                results.add(entry.getName());\n\n                final ArchiveInputStream nestedIn = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", in);\n                try {\n                    ZipArchiveEntry nestedEntry = null;\n                    while ((nestedEntry = (ZipArchiveEntry) nestedIn.getNextEntry()) != null) {\n                        results.add(nestedEntry.getName());\n                    }\n                } catch (ZipException ex) {\n                    // expected since you cannot create a final ArchiveInputStream from test3.xml\n                    expectedExceptions.add(ex);\n                }\n                // nested stream must not be closed here\n            }\n        } finally {\n            if (in != null) {\n                in.close();\n            }\n        }\n        is.close();\n\n        assertTrue(results.contains(\"NestedArchiv.zip\"));                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(results.contains(\"test1.xml\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(results.contains(\"test2.xml\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(results.contains(\"test3.xml\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, expectedExceptions.size());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void testListAllFilesWithNestedArchive$catena_1() throws Exception {\n        final File input = getFile(\"OSX_ArchiveWithNestedArchive.zip\");\n\n        final List<String> results = new ArrayList<>();\n        final List<ZipException> expectedExceptions = new ArrayList<>();\n\n        final InputStream is = new FileInputStream(input);\n        ArchiveInputStream in = null;\n        try {\n            in = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is);\n\n            ZipArchiveEntry entry = null;\n            while ((entry = (ZipArchiveEntry) in.getNextEntry()) != null) {\n                results.add(entry.getName());\n\n                final ArchiveInputStream nestedIn = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", in);\n                try {\n                    ZipArchiveEntry nestedEntry = null;\n                    while ((nestedEntry = (ZipArchiveEntry) nestedIn.getNextEntry()) != null) {\n                        results.add(nestedEntry.getName());\n                    }\n                } catch (ZipException ex) {\n                    // expected since you cannot create a final ArchiveInputStream from test3.xml\n                    expectedExceptions.add(ex);\n                }\n                // nested stream must not be closed here\n            }\n        } finally {\n            if (in != null) {\n                in.close();\n            }\n        }\n        is.close();\n\n        try{ assertTrue(results.contains(\"NestedArchiv.zip\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(results.contains(\"test1.xml\"));                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(results.contains(\"test2.xml\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(results.contains(\"test3.xml\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, expectedExceptions.size());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void testListAllFilesWithNestedArchive$catena_2() throws Exception {\n        final File input = getFile(\"OSX_ArchiveWithNestedArchive.zip\");\n\n        final List<String> results = new ArrayList<>();\n        final List<ZipException> expectedExceptions = new ArrayList<>();\n\n        final InputStream is = new FileInputStream(input);\n        ArchiveInputStream in = null;\n        try {\n            in = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is);\n\n            ZipArchiveEntry entry = null;\n            while ((entry = (ZipArchiveEntry) in.getNextEntry()) != null) {\n                results.add(entry.getName());\n\n                final ArchiveInputStream nestedIn = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", in);\n                try {\n                    ZipArchiveEntry nestedEntry = null;\n                    while ((nestedEntry = (ZipArchiveEntry) nestedIn.getNextEntry()) != null) {\n                        results.add(nestedEntry.getName());\n                    }\n                } catch (ZipException ex) {\n                    // expected since you cannot create a final ArchiveInputStream from test3.xml\n                    expectedExceptions.add(ex);\n                }\n                // nested stream must not be closed here\n            }\n        } finally {\n            if (in != null) {\n                in.close();\n            }\n        }\n        is.close();\n\n        try{ assertTrue(results.contains(\"NestedArchiv.zip\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(results.contains(\"test1.xml\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(results.contains(\"test2.xml\"));                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(results.contains(\"test3.xml\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, expectedExceptions.size());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void testListAllFilesWithNestedArchive$catena_3() throws Exception {\n        final File input = getFile(\"OSX_ArchiveWithNestedArchive.zip\");\n\n        final List<String> results = new ArrayList<>();\n        final List<ZipException> expectedExceptions = new ArrayList<>();\n\n        final InputStream is = new FileInputStream(input);\n        ArchiveInputStream in = null;\n        try {\n            in = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is);\n\n            ZipArchiveEntry entry = null;\n            while ((entry = (ZipArchiveEntry) in.getNextEntry()) != null) {\n                results.add(entry.getName());\n\n                final ArchiveInputStream nestedIn = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", in);\n                try {\n                    ZipArchiveEntry nestedEntry = null;\n                    while ((nestedEntry = (ZipArchiveEntry) nestedIn.getNextEntry()) != null) {\n                        results.add(nestedEntry.getName());\n                    }\n                } catch (ZipException ex) {\n                    // expected since you cannot create a final ArchiveInputStream from test3.xml\n                    expectedExceptions.add(ex);\n                }\n                // nested stream must not be closed here\n            }\n        } finally {\n            if (in != null) {\n                in.close();\n            }\n        }\n        is.close();\n\n        try{ assertTrue(results.contains(\"NestedArchiv.zip\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(results.contains(\"test1.xml\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(results.contains(\"test2.xml\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(results.contains(\"test3.xml\"));                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(1, expectedExceptions.size());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    },
    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest::testThrowOnInvalidEntry": {
        "begin_line_no": 235,
        "end_line_no": 249,
        "file_path": "src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java",
        "to": [
            "    @Test\n    public void testThrowOnInvalidEntry$catena_0() throws Exception {\n        final InputStream is = ZipArchiveInputStreamTest.class\n                .getResourceAsStream(\"/invalid-zip.zip\");\n        final ZipArchiveInputStream zip = new ZipArchiveInputStream(is);\n\n        try {\n            zip.getNextZipEntry();\n            fail(\"IOException expected\");                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (ZipException expected) {\n            try{ assertTrue(expected.getMessage().contains(\"Unexpected record signature\"));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            zip.close();\n        }\n    }",
            "    @Test\n    public void testThrowOnInvalidEntry$catena_1() throws Exception {\n        final InputStream is = ZipArchiveInputStreamTest.class\n                .getResourceAsStream(\"/invalid-zip.zip\");\n        final ZipArchiveInputStream zip = new ZipArchiveInputStream(is);\n\n        try {\n            zip.getNextZipEntry();\n            try{ fail(\"IOException expected\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ZipException expected) {\n            assertTrue(expected.getMessage().contains(\"Unexpected record signature\"));                      /***** ORIGINAL ASSERTION IS HERE *****/\n        } finally {\n            zip.close();\n        }\n    }"
        ]
    }
}