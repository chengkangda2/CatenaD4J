{
    "org.apache.commons.compress.archivers.tar.TarUtilsTest::testParseOctal": {
        "begin_line_no": 46,
        "end_line_no": 67,
        "file_path": "src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java",
        "to": [
            "    public void testParseOctal$catena_4() throws Exception{\n        long value; \n        byte [] buffer;\n        final long MAX_OCTAL  = 077777777777L; // Allowed 11 digits\n        final long MAX_OCTAL_OVERFLOW  = 0777777777777L; // in fact 12 for some implementations\n        final String maxOctal = \"777777777777\"; // Maximum valid octal\n        buffer = maxOctal.getBytes(CharsetNames.UTF_8);\n        value = TarUtils.parseOctal(buffer,0, buffer.length);\n        try{ assertEquals(MAX_OCTAL_OVERFLOW, value);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        buffer[buffer.length - 1] = ' ';\n        value = TarUtils.parseOctal(buffer,0, buffer.length);\n        try{ assertEquals(MAX_OCTAL, value);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        buffer[buffer.length-1]=0;\n        value = TarUtils.parseOctal(buffer,0, buffer.length);\n        try{ assertEquals(MAX_OCTAL, value);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        buffer=new byte[]{0,0};\n        value = TarUtils.parseOctal(buffer,0, buffer.length);\n        try{ assertEquals(0, value);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        buffer=new byte[]{0,' '};\n        value = TarUtils.parseOctal(buffer,0, buffer.length);\n        assertEquals(0, value);                                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n    }",
            "    public void testParseOctal$catena_1() throws Exception{\n        long value; \n        byte [] buffer;\n        final long MAX_OCTAL  = 077777777777L; // Allowed 11 digits\n        final long MAX_OCTAL_OVERFLOW  = 0777777777777L; // in fact 12 for some implementations\n        final String maxOctal = \"777777777777\"; // Maximum valid octal\n        buffer = maxOctal.getBytes(CharsetNames.UTF_8);\n        value = TarUtils.parseOctal(buffer,0, buffer.length);\n        try{ assertEquals(MAX_OCTAL_OVERFLOW, value);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        buffer[buffer.length - 1] = ' ';\n        value = TarUtils.parseOctal(buffer,0, buffer.length);\n        assertEquals(MAX_OCTAL, value);                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        buffer[buffer.length-1]=0;\n        value = TarUtils.parseOctal(buffer,0, buffer.length);\n        try{ assertEquals(MAX_OCTAL, value);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        buffer=new byte[]{0,0};\n        value = TarUtils.parseOctal(buffer,0, buffer.length);\n        try{ assertEquals(0, value);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        buffer=new byte[]{0,' '};\n        value = TarUtils.parseOctal(buffer,0, buffer.length);\n        try{ assertEquals(0, value);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testParseOctal$catena_3() throws Exception{\n        long value; \n        byte [] buffer;\n        final long MAX_OCTAL  = 077777777777L; // Allowed 11 digits\n        final long MAX_OCTAL_OVERFLOW  = 0777777777777L; // in fact 12 for some implementations\n        final String maxOctal = \"777777777777\"; // Maximum valid octal\n        buffer = maxOctal.getBytes(CharsetNames.UTF_8);\n        value = TarUtils.parseOctal(buffer,0, buffer.length);\n        try{ assertEquals(MAX_OCTAL_OVERFLOW, value);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        buffer[buffer.length - 1] = ' ';\n        value = TarUtils.parseOctal(buffer,0, buffer.length);\n        try{ assertEquals(MAX_OCTAL, value);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        buffer[buffer.length-1]=0;\n        value = TarUtils.parseOctal(buffer,0, buffer.length);\n        try{ assertEquals(MAX_OCTAL, value);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        buffer=new byte[]{0,0};\n        value = TarUtils.parseOctal(buffer,0, buffer.length);\n        assertEquals(0, value);                                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        buffer=new byte[]{0,' '};\n        value = TarUtils.parseOctal(buffer,0, buffer.length);\n        try{ assertEquals(0, value);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testParseOctal$catena_2() throws Exception{\n        long value; \n        byte [] buffer;\n        final long MAX_OCTAL  = 077777777777L; // Allowed 11 digits\n        final long MAX_OCTAL_OVERFLOW  = 0777777777777L; // in fact 12 for some implementations\n        final String maxOctal = \"777777777777\"; // Maximum valid octal\n        buffer = maxOctal.getBytes(CharsetNames.UTF_8);\n        value = TarUtils.parseOctal(buffer,0, buffer.length);\n        try{ assertEquals(MAX_OCTAL_OVERFLOW, value);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        buffer[buffer.length - 1] = ' ';\n        value = TarUtils.parseOctal(buffer,0, buffer.length);\n        try{ assertEquals(MAX_OCTAL, value);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        buffer[buffer.length-1]=0;\n        value = TarUtils.parseOctal(buffer,0, buffer.length);\n        assertEquals(MAX_OCTAL, value);                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        buffer=new byte[]{0,0};\n        value = TarUtils.parseOctal(buffer,0, buffer.length);\n        try{ assertEquals(0, value);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        buffer=new byte[]{0,' '};\n        value = TarUtils.parseOctal(buffer,0, buffer.length);\n        try{ assertEquals(0, value);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testParseOctal$catena_0() throws Exception{\n        long value; \n        byte [] buffer;\n        final long MAX_OCTAL  = 077777777777L; // Allowed 11 digits\n        final long MAX_OCTAL_OVERFLOW  = 0777777777777L; // in fact 12 for some implementations\n        final String maxOctal = \"777777777777\"; // Maximum valid octal\n        buffer = maxOctal.getBytes(CharsetNames.UTF_8);\n        value = TarUtils.parseOctal(buffer,0, buffer.length);\n        assertEquals(MAX_OCTAL_OVERFLOW, value);                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        buffer[buffer.length - 1] = ' ';\n        value = TarUtils.parseOctal(buffer,0, buffer.length);\n        try{ assertEquals(MAX_OCTAL, value);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        buffer[buffer.length-1]=0;\n        value = TarUtils.parseOctal(buffer,0, buffer.length);\n        try{ assertEquals(MAX_OCTAL, value);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        buffer=new byte[]{0,0};\n        value = TarUtils.parseOctal(buffer,0, buffer.length);\n        try{ assertEquals(0, value);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        buffer=new byte[]{0,' '};\n        value = TarUtils.parseOctal(buffer,0, buffer.length);\n        try{ assertEquals(0, value);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    }
}