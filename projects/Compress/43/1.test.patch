{
    "org.apache.commons.compress.archivers.zip.DataDescriptorTest::doesntWriteDataDescriptorWhenAddingRawEntries": {
        "begin_line_no": 134,
        "end_line_no": 183,
        "file_path": "src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java",
        "to": [
            "    @Test\n    public void doesntWriteDataDescriptorWhenAddingRawEntries$catena_3() throws IOException {\n        ByteArrayOutputStream init = new ByteArrayOutputStream();\n        try (ZipArchiveOutputStream zos = new ZipArchiveOutputStream(init)) {\n            zos.putArchiveEntry(new ZipArchiveEntry(\"test1.txt\"));\n            zos.write(\"foo\".getBytes(\"UTF-8\"));\n            zos.closeArchiveEntry();\n        }\n\n        File f = new File(dir, \"test.zip\");\n        try (FileOutputStream fos = new FileOutputStream(f)) {\n            fos.write(init.toByteArray());\n        }\n\n        ByteArrayOutputStream o = new ByteArrayOutputStream();\n        ZipArchiveEntry zae;\n        try (ZipFile zf = new ZipFile(f);\n             ZipArchiveOutputStream zos = new ZipArchiveOutputStream(o)) {\n            zae = zf.getEntry(\"test1.txt\");\n            zos.addRawArchiveEntry(zae, zf.getRawInputStream(zae));\n        }\n\n        byte[] data = o.toByteArray();\n        byte[] versionInLFH = Arrays.copyOfRange(data, 4, 6);\n        // still 2.0 because of Deflate\n        try{ assertArrayEquals(new byte[] { 20, 0 }, versionInLFH);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        byte[] gpbInLFH = Arrays.copyOfRange(data, 6, 8);\n        // no DD but EFS flag\n        try{ assertArrayEquals(new byte[] { 0, 8 }, gpbInLFH);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        int cdhStart = findCentralDirectory(data);\n        byte[] versionInCDH = Arrays.copyOfRange(data, cdhStart + 6, cdhStart + 8);\n        try{ assertArrayEquals(new byte[] { 20, 0 }, versionInCDH);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        byte[] gpbInCDH = Arrays.copyOfRange(data, cdhStart + 8, cdhStart + 10);\n        assertArrayEquals(new byte[] { 0, 8 }, gpbInCDH);                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n\n        int ddStart = cdhStart - 16;\n        try{ assertNotEquals(ZipLong.DD_SIG, new ZipLong(data, ddStart));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        long crcFromLFH = ZipLong.getValue(data, 14);\n        long cSizeFromLFH = ZipLong.getValue(data, 18);\n        long sizeFromLFH = ZipLong.getValue(data, 22);\n        try{ assertEquals(3, sizeFromLFH);                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        long crcFromCDH = ZipLong.getValue(data, cdhStart + 16);\n        try{ assertEquals(crcFromLFH, crcFromCDH);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        long cSizeFromCDH = ZipLong.getValue(data, cdhStart + 20);\n        try{ assertEquals(cSizeFromLFH, cSizeFromCDH);                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        long sizeFromCDH = ZipLong.getValue(data, cdhStart + 24);\n        try{ assertEquals(sizeFromLFH, sizeFromCDH);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void doesntWriteDataDescriptorWhenAddingRawEntries$catena_1() throws IOException {\n        ByteArrayOutputStream init = new ByteArrayOutputStream();\n        try (ZipArchiveOutputStream zos = new ZipArchiveOutputStream(init)) {\n            zos.putArchiveEntry(new ZipArchiveEntry(\"test1.txt\"));\n            zos.write(\"foo\".getBytes(\"UTF-8\"));\n            zos.closeArchiveEntry();\n        }\n\n        File f = new File(dir, \"test.zip\");\n        try (FileOutputStream fos = new FileOutputStream(f)) {\n            fos.write(init.toByteArray());\n        }\n\n        ByteArrayOutputStream o = new ByteArrayOutputStream();\n        ZipArchiveEntry zae;\n        try (ZipFile zf = new ZipFile(f);\n             ZipArchiveOutputStream zos = new ZipArchiveOutputStream(o)) {\n            zae = zf.getEntry(\"test1.txt\");\n            zos.addRawArchiveEntry(zae, zf.getRawInputStream(zae));\n        }\n\n        byte[] data = o.toByteArray();\n        byte[] versionInLFH = Arrays.copyOfRange(data, 4, 6);\n        // still 2.0 because of Deflate\n        try{ assertArrayEquals(new byte[] { 20, 0 }, versionInLFH);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        byte[] gpbInLFH = Arrays.copyOfRange(data, 6, 8);\n        // no DD but EFS flag\n        assertArrayEquals(new byte[] { 0, 8 }, gpbInLFH);                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n\n        int cdhStart = findCentralDirectory(data);\n        byte[] versionInCDH = Arrays.copyOfRange(data, cdhStart + 6, cdhStart + 8);\n        try{ assertArrayEquals(new byte[] { 20, 0 }, versionInCDH);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        byte[] gpbInCDH = Arrays.copyOfRange(data, cdhStart + 8, cdhStart + 10);\n        try{ assertArrayEquals(new byte[] { 0, 8 }, gpbInCDH);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        int ddStart = cdhStart - 16;\n        try{ assertNotEquals(ZipLong.DD_SIG, new ZipLong(data, ddStart));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        long crcFromLFH = ZipLong.getValue(data, 14);\n        long cSizeFromLFH = ZipLong.getValue(data, 18);\n        long sizeFromLFH = ZipLong.getValue(data, 22);\n        try{ assertEquals(3, sizeFromLFH);                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        long crcFromCDH = ZipLong.getValue(data, cdhStart + 16);\n        try{ assertEquals(crcFromLFH, crcFromCDH);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        long cSizeFromCDH = ZipLong.getValue(data, cdhStart + 20);\n        try{ assertEquals(cSizeFromLFH, cSizeFromCDH);                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        long sizeFromCDH = ZipLong.getValue(data, cdhStart + 24);\n        try{ assertEquals(sizeFromLFH, sizeFromCDH);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void doesntWriteDataDescriptorWhenAddingRawEntries$catena_0() throws IOException {\n        ByteArrayOutputStream init = new ByteArrayOutputStream();\n        try (ZipArchiveOutputStream zos = new ZipArchiveOutputStream(init)) {\n            zos.putArchiveEntry(new ZipArchiveEntry(\"test1.txt\"));\n            zos.write(\"foo\".getBytes(\"UTF-8\"));\n            zos.closeArchiveEntry();\n        }\n\n        File f = new File(dir, \"test.zip\");\n        try (FileOutputStream fos = new FileOutputStream(f)) {\n            fos.write(init.toByteArray());\n        }\n\n        ByteArrayOutputStream o = new ByteArrayOutputStream();\n        ZipArchiveEntry zae;\n        try (ZipFile zf = new ZipFile(f);\n             ZipArchiveOutputStream zos = new ZipArchiveOutputStream(o)) {\n            zae = zf.getEntry(\"test1.txt\");\n            zos.addRawArchiveEntry(zae, zf.getRawInputStream(zae));\n        }\n\n        byte[] data = o.toByteArray();\n        byte[] versionInLFH = Arrays.copyOfRange(data, 4, 6);\n        // still 2.0 because of Deflate\n        assertArrayEquals(new byte[] { 20, 0 }, versionInLFH);                                              /***** ORIGINAL ASSERTION IS HERE *****/\n        byte[] gpbInLFH = Arrays.copyOfRange(data, 6, 8);\n        // no DD but EFS flag\n        try{ assertArrayEquals(new byte[] { 0, 8 }, gpbInLFH);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        int cdhStart = findCentralDirectory(data);\n        byte[] versionInCDH = Arrays.copyOfRange(data, cdhStart + 6, cdhStart + 8);\n        try{ assertArrayEquals(new byte[] { 20, 0 }, versionInCDH);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        byte[] gpbInCDH = Arrays.copyOfRange(data, cdhStart + 8, cdhStart + 10);\n        try{ assertArrayEquals(new byte[] { 0, 8 }, gpbInCDH);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        int ddStart = cdhStart - 16;\n        try{ assertNotEquals(ZipLong.DD_SIG, new ZipLong(data, ddStart));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        long crcFromLFH = ZipLong.getValue(data, 14);\n        long cSizeFromLFH = ZipLong.getValue(data, 18);\n        long sizeFromLFH = ZipLong.getValue(data, 22);\n        try{ assertEquals(3, sizeFromLFH);                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        long crcFromCDH = ZipLong.getValue(data, cdhStart + 16);\n        try{ assertEquals(crcFromLFH, crcFromCDH);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        long cSizeFromCDH = ZipLong.getValue(data, cdhStart + 20);\n        try{ assertEquals(cSizeFromLFH, cSizeFromCDH);                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        long sizeFromCDH = ZipLong.getValue(data, cdhStart + 24);\n        try{ assertEquals(sizeFromLFH, sizeFromCDH);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void doesntWriteDataDescriptorWhenAddingRawEntries$catena_2() throws IOException {\n        ByteArrayOutputStream init = new ByteArrayOutputStream();\n        try (ZipArchiveOutputStream zos = new ZipArchiveOutputStream(init)) {\n            zos.putArchiveEntry(new ZipArchiveEntry(\"test1.txt\"));\n            zos.write(\"foo\".getBytes(\"UTF-8\"));\n            zos.closeArchiveEntry();\n        }\n\n        File f = new File(dir, \"test.zip\");\n        try (FileOutputStream fos = new FileOutputStream(f)) {\n            fos.write(init.toByteArray());\n        }\n\n        ByteArrayOutputStream o = new ByteArrayOutputStream();\n        ZipArchiveEntry zae;\n        try (ZipFile zf = new ZipFile(f);\n             ZipArchiveOutputStream zos = new ZipArchiveOutputStream(o)) {\n            zae = zf.getEntry(\"test1.txt\");\n            zos.addRawArchiveEntry(zae, zf.getRawInputStream(zae));\n        }\n\n        byte[] data = o.toByteArray();\n        byte[] versionInLFH = Arrays.copyOfRange(data, 4, 6);\n        // still 2.0 because of Deflate\n        try{ assertArrayEquals(new byte[] { 20, 0 }, versionInLFH);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        byte[] gpbInLFH = Arrays.copyOfRange(data, 6, 8);\n        // no DD but EFS flag\n        try{ assertArrayEquals(new byte[] { 0, 8 }, gpbInLFH);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        int cdhStart = findCentralDirectory(data);\n        byte[] versionInCDH = Arrays.copyOfRange(data, cdhStart + 6, cdhStart + 8);\n        assertArrayEquals(new byte[] { 20, 0 }, versionInCDH);                                              /***** ORIGINAL ASSERTION IS HERE *****/\n        byte[] gpbInCDH = Arrays.copyOfRange(data, cdhStart + 8, cdhStart + 10);\n        try{ assertArrayEquals(new byte[] { 0, 8 }, gpbInCDH);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        int ddStart = cdhStart - 16;\n        try{ assertNotEquals(ZipLong.DD_SIG, new ZipLong(data, ddStart));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        long crcFromLFH = ZipLong.getValue(data, 14);\n        long cSizeFromLFH = ZipLong.getValue(data, 18);\n        long sizeFromLFH = ZipLong.getValue(data, 22);\n        try{ assertEquals(3, sizeFromLFH);                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        long crcFromCDH = ZipLong.getValue(data, cdhStart + 16);\n        try{ assertEquals(crcFromLFH, crcFromCDH);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        long cSizeFromCDH = ZipLong.getValue(data, cdhStart + 20);\n        try{ assertEquals(cSizeFromLFH, cSizeFromCDH);                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        long sizeFromCDH = ZipLong.getValue(data, cdhStart + 24);\n        try{ assertEquals(sizeFromLFH, sizeFromCDH);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void doesntWriteDataDescriptorWhenAddingRawEntries$catena_4() throws IOException {\n        ByteArrayOutputStream init = new ByteArrayOutputStream();\n        try (ZipArchiveOutputStream zos = new ZipArchiveOutputStream(init)) {\n            zos.putArchiveEntry(new ZipArchiveEntry(\"test1.txt\"));\n            zos.write(\"foo\".getBytes(\"UTF-8\"));\n            zos.closeArchiveEntry();\n        }\n\n        File f = new File(dir, \"test.zip\");\n        try (FileOutputStream fos = new FileOutputStream(f)) {\n            fos.write(init.toByteArray());\n        }\n\n        ByteArrayOutputStream o = new ByteArrayOutputStream();\n        ZipArchiveEntry zae;\n        try (ZipFile zf = new ZipFile(f);\n             ZipArchiveOutputStream zos = new ZipArchiveOutputStream(o)) {\n            zae = zf.getEntry(\"test1.txt\");\n            zos.addRawArchiveEntry(zae, zf.getRawInputStream(zae));\n        }\n\n        byte[] data = o.toByteArray();\n        byte[] versionInLFH = Arrays.copyOfRange(data, 4, 6);\n        // still 2.0 because of Deflate\n        try{ assertArrayEquals(new byte[] { 20, 0 }, versionInLFH);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        byte[] gpbInLFH = Arrays.copyOfRange(data, 6, 8);\n        // no DD but EFS flag\n        try{ assertArrayEquals(new byte[] { 0, 8 }, gpbInLFH);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        int cdhStart = findCentralDirectory(data);\n        byte[] versionInCDH = Arrays.copyOfRange(data, cdhStart + 6, cdhStart + 8);\n        try{ assertArrayEquals(new byte[] { 20, 0 }, versionInCDH);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        byte[] gpbInCDH = Arrays.copyOfRange(data, cdhStart + 8, cdhStart + 10);\n        try{ assertArrayEquals(new byte[] { 0, 8 }, gpbInCDH);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        int ddStart = cdhStart - 16;\n        assertNotEquals(ZipLong.DD_SIG, new ZipLong(data, ddStart));                                        /***** ORIGINAL ASSERTION IS HERE *****/\n        long crcFromLFH = ZipLong.getValue(data, 14);\n        long cSizeFromLFH = ZipLong.getValue(data, 18);\n        long sizeFromLFH = ZipLong.getValue(data, 22);\n        try{ assertEquals(3, sizeFromLFH);                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        long crcFromCDH = ZipLong.getValue(data, cdhStart + 16);\n        try{ assertEquals(crcFromLFH, crcFromCDH);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        long cSizeFromCDH = ZipLong.getValue(data, cdhStart + 20);\n        try{ assertEquals(cSizeFromLFH, cSizeFromCDH);                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        long sizeFromCDH = ZipLong.getValue(data, cdhStart + 24);\n        try{ assertEquals(sizeFromLFH, sizeFromCDH);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void doesntWriteDataDescriptorWhenAddingRawEntries$catena_5() throws IOException {\n        ByteArrayOutputStream init = new ByteArrayOutputStream();\n        try (ZipArchiveOutputStream zos = new ZipArchiveOutputStream(init)) {\n            zos.putArchiveEntry(new ZipArchiveEntry(\"test1.txt\"));\n            zos.write(\"foo\".getBytes(\"UTF-8\"));\n            zos.closeArchiveEntry();\n        }\n\n        File f = new File(dir, \"test.zip\");\n        try (FileOutputStream fos = new FileOutputStream(f)) {\n            fos.write(init.toByteArray());\n        }\n\n        ByteArrayOutputStream o = new ByteArrayOutputStream();\n        ZipArchiveEntry zae;\n        try (ZipFile zf = new ZipFile(f);\n             ZipArchiveOutputStream zos = new ZipArchiveOutputStream(o)) {\n            zae = zf.getEntry(\"test1.txt\");\n            zos.addRawArchiveEntry(zae, zf.getRawInputStream(zae));\n        }\n\n        byte[] data = o.toByteArray();\n        byte[] versionInLFH = Arrays.copyOfRange(data, 4, 6);\n        // still 2.0 because of Deflate\n        try{ assertArrayEquals(new byte[] { 20, 0 }, versionInLFH);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        byte[] gpbInLFH = Arrays.copyOfRange(data, 6, 8);\n        // no DD but EFS flag\n        try{ assertArrayEquals(new byte[] { 0, 8 }, gpbInLFH);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        int cdhStart = findCentralDirectory(data);\n        byte[] versionInCDH = Arrays.copyOfRange(data, cdhStart + 6, cdhStart + 8);\n        try{ assertArrayEquals(new byte[] { 20, 0 }, versionInCDH);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        byte[] gpbInCDH = Arrays.copyOfRange(data, cdhStart + 8, cdhStart + 10);\n        try{ assertArrayEquals(new byte[] { 0, 8 }, gpbInCDH);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        int ddStart = cdhStart - 16;\n        try{ assertNotEquals(ZipLong.DD_SIG, new ZipLong(data, ddStart));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        long crcFromLFH = ZipLong.getValue(data, 14);\n        long cSizeFromLFH = ZipLong.getValue(data, 18);\n        long sizeFromLFH = ZipLong.getValue(data, 22);\n        assertEquals(3, sizeFromLFH);                                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n\n        long crcFromCDH = ZipLong.getValue(data, cdhStart + 16);\n        try{ assertEquals(crcFromLFH, crcFromCDH);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        long cSizeFromCDH = ZipLong.getValue(data, cdhStart + 20);\n        try{ assertEquals(cSizeFromLFH, cSizeFromCDH);                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        long sizeFromCDH = ZipLong.getValue(data, cdhStart + 24);\n        try{ assertEquals(sizeFromLFH, sizeFromCDH);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void doesntWriteDataDescriptorWhenAddingRawEntries$catena_6() throws IOException {\n        ByteArrayOutputStream init = new ByteArrayOutputStream();\n        try (ZipArchiveOutputStream zos = new ZipArchiveOutputStream(init)) {\n            zos.putArchiveEntry(new ZipArchiveEntry(\"test1.txt\"));\n            zos.write(\"foo\".getBytes(\"UTF-8\"));\n            zos.closeArchiveEntry();\n        }\n\n        File f = new File(dir, \"test.zip\");\n        try (FileOutputStream fos = new FileOutputStream(f)) {\n            fos.write(init.toByteArray());\n        }\n\n        ByteArrayOutputStream o = new ByteArrayOutputStream();\n        ZipArchiveEntry zae;\n        try (ZipFile zf = new ZipFile(f);\n             ZipArchiveOutputStream zos = new ZipArchiveOutputStream(o)) {\n            zae = zf.getEntry(\"test1.txt\");\n            zos.addRawArchiveEntry(zae, zf.getRawInputStream(zae));\n        }\n\n        byte[] data = o.toByteArray();\n        byte[] versionInLFH = Arrays.copyOfRange(data, 4, 6);\n        // still 2.0 because of Deflate\n        try{ assertArrayEquals(new byte[] { 20, 0 }, versionInLFH);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        byte[] gpbInLFH = Arrays.copyOfRange(data, 6, 8);\n        // no DD but EFS flag\n        try{ assertArrayEquals(new byte[] { 0, 8 }, gpbInLFH);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        int cdhStart = findCentralDirectory(data);\n        byte[] versionInCDH = Arrays.copyOfRange(data, cdhStart + 6, cdhStart + 8);\n        try{ assertArrayEquals(new byte[] { 20, 0 }, versionInCDH);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        byte[] gpbInCDH = Arrays.copyOfRange(data, cdhStart + 8, cdhStart + 10);\n        try{ assertArrayEquals(new byte[] { 0, 8 }, gpbInCDH);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        int ddStart = cdhStart - 16;\n        try{ assertNotEquals(ZipLong.DD_SIG, new ZipLong(data, ddStart));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        long crcFromLFH = ZipLong.getValue(data, 14);\n        long cSizeFromLFH = ZipLong.getValue(data, 18);\n        long sizeFromLFH = ZipLong.getValue(data, 22);\n        try{ assertEquals(3, sizeFromLFH);                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        long crcFromCDH = ZipLong.getValue(data, cdhStart + 16);\n        assertEquals(crcFromLFH, crcFromCDH);                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n        long cSizeFromCDH = ZipLong.getValue(data, cdhStart + 20);\n        try{ assertEquals(cSizeFromLFH, cSizeFromCDH);                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        long sizeFromCDH = ZipLong.getValue(data, cdhStart + 24);\n        try{ assertEquals(sizeFromLFH, sizeFromCDH);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void doesntWriteDataDescriptorWhenAddingRawEntries$catena_7() throws IOException {\n        ByteArrayOutputStream init = new ByteArrayOutputStream();\n        try (ZipArchiveOutputStream zos = new ZipArchiveOutputStream(init)) {\n            zos.putArchiveEntry(new ZipArchiveEntry(\"test1.txt\"));\n            zos.write(\"foo\".getBytes(\"UTF-8\"));\n            zos.closeArchiveEntry();\n        }\n\n        File f = new File(dir, \"test.zip\");\n        try (FileOutputStream fos = new FileOutputStream(f)) {\n            fos.write(init.toByteArray());\n        }\n\n        ByteArrayOutputStream o = new ByteArrayOutputStream();\n        ZipArchiveEntry zae;\n        try (ZipFile zf = new ZipFile(f);\n             ZipArchiveOutputStream zos = new ZipArchiveOutputStream(o)) {\n            zae = zf.getEntry(\"test1.txt\");\n            zos.addRawArchiveEntry(zae, zf.getRawInputStream(zae));\n        }\n\n        byte[] data = o.toByteArray();\n        byte[] versionInLFH = Arrays.copyOfRange(data, 4, 6);\n        // still 2.0 because of Deflate\n        try{ assertArrayEquals(new byte[] { 20, 0 }, versionInLFH);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        byte[] gpbInLFH = Arrays.copyOfRange(data, 6, 8);\n        // no DD but EFS flag\n        try{ assertArrayEquals(new byte[] { 0, 8 }, gpbInLFH);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        int cdhStart = findCentralDirectory(data);\n        byte[] versionInCDH = Arrays.copyOfRange(data, cdhStart + 6, cdhStart + 8);\n        try{ assertArrayEquals(new byte[] { 20, 0 }, versionInCDH);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        byte[] gpbInCDH = Arrays.copyOfRange(data, cdhStart + 8, cdhStart + 10);\n        try{ assertArrayEquals(new byte[] { 0, 8 }, gpbInCDH);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        int ddStart = cdhStart - 16;\n        try{ assertNotEquals(ZipLong.DD_SIG, new ZipLong(data, ddStart));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        long crcFromLFH = ZipLong.getValue(data, 14);\n        long cSizeFromLFH = ZipLong.getValue(data, 18);\n        long sizeFromLFH = ZipLong.getValue(data, 22);\n        try{ assertEquals(3, sizeFromLFH);                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        long crcFromCDH = ZipLong.getValue(data, cdhStart + 16);\n        try{ assertEquals(crcFromLFH, crcFromCDH);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        long cSizeFromCDH = ZipLong.getValue(data, cdhStart + 20);\n        assertEquals(cSizeFromLFH, cSizeFromCDH);                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n        long sizeFromCDH = ZipLong.getValue(data, cdhStart + 24);\n        try{ assertEquals(sizeFromLFH, sizeFromCDH);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void doesntWriteDataDescriptorWhenAddingRawEntries$catena_8() throws IOException {\n        ByteArrayOutputStream init = new ByteArrayOutputStream();\n        try (ZipArchiveOutputStream zos = new ZipArchiveOutputStream(init)) {\n            zos.putArchiveEntry(new ZipArchiveEntry(\"test1.txt\"));\n            zos.write(\"foo\".getBytes(\"UTF-8\"));\n            zos.closeArchiveEntry();\n        }\n\n        File f = new File(dir, \"test.zip\");\n        try (FileOutputStream fos = new FileOutputStream(f)) {\n            fos.write(init.toByteArray());\n        }\n\n        ByteArrayOutputStream o = new ByteArrayOutputStream();\n        ZipArchiveEntry zae;\n        try (ZipFile zf = new ZipFile(f);\n             ZipArchiveOutputStream zos = new ZipArchiveOutputStream(o)) {\n            zae = zf.getEntry(\"test1.txt\");\n            zos.addRawArchiveEntry(zae, zf.getRawInputStream(zae));\n        }\n\n        byte[] data = o.toByteArray();\n        byte[] versionInLFH = Arrays.copyOfRange(data, 4, 6);\n        // still 2.0 because of Deflate\n        try{ assertArrayEquals(new byte[] { 20, 0 }, versionInLFH);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        byte[] gpbInLFH = Arrays.copyOfRange(data, 6, 8);\n        // no DD but EFS flag\n        try{ assertArrayEquals(new byte[] { 0, 8 }, gpbInLFH);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        int cdhStart = findCentralDirectory(data);\n        byte[] versionInCDH = Arrays.copyOfRange(data, cdhStart + 6, cdhStart + 8);\n        try{ assertArrayEquals(new byte[] { 20, 0 }, versionInCDH);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        byte[] gpbInCDH = Arrays.copyOfRange(data, cdhStart + 8, cdhStart + 10);\n        try{ assertArrayEquals(new byte[] { 0, 8 }, gpbInCDH);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        int ddStart = cdhStart - 16;\n        try{ assertNotEquals(ZipLong.DD_SIG, new ZipLong(data, ddStart));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        long crcFromLFH = ZipLong.getValue(data, 14);\n        long cSizeFromLFH = ZipLong.getValue(data, 18);\n        long sizeFromLFH = ZipLong.getValue(data, 22);\n        try{ assertEquals(3, sizeFromLFH);                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        long crcFromCDH = ZipLong.getValue(data, cdhStart + 16);\n        try{ assertEquals(crcFromLFH, crcFromCDH);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        long cSizeFromCDH = ZipLong.getValue(data, cdhStart + 20);\n        try{ assertEquals(cSizeFromLFH, cSizeFromCDH);                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        long sizeFromCDH = ZipLong.getValue(data, cdhStart + 24);\n        assertEquals(sizeFromLFH, sizeFromCDH);                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
        ]
    }
}