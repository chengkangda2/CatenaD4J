{
    "org.apache.commons.compress.archivers.jar.JarArchiveOutputStreamTest::testJarMarker": {
        "begin_line_no": 33,
        "end_line_no": 70,
        "file_path": "src/test/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStreamTest.java",
        "to": [
            "    public void testJarMarker$catena_3() throws IOException {\n        File testArchive = File.createTempFile(\"jar-aostest\", \".jar\");\n        JarArchiveOutputStream out = null;\n        ZipFile zf = null;\n        try {\n\n            out = new JarArchiveOutputStream(new FileOutputStream(testArchive));\n            out.putArchiveEntry(new ZipArchiveEntry(\"foo/\"));\n            out.closeArchiveEntry();\n            out.putArchiveEntry(new ZipArchiveEntry(\"bar/\"));\n            out.closeArchiveEntry();\n            out.finish();\n            out.close();\n            out = null;\n\n            zf = new ZipFile(testArchive);\n            ZipArchiveEntry ze = zf.getEntry(\"foo/\");\n            try{ assertNotNull(ze);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            ZipExtraField[] fes = ze.getExtraFields();\n            try{ assertEquals(1, fes.length);                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertTrue(fes[0] instanceof JarMarker);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            ze = zf.getEntry(\"bar/\");\n            assertNotNull(ze);                                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n            fes = ze.getExtraFields();\n            try{ assertEquals(0, fes.length);                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            if (out != null) {\n                try {\n                    out.close();\n                } catch (IOException e) { /* swallow */ }\n            }\n            ZipFile.closeQuietly(zf);\n            if (testArchive.exists()) {\n                testArchive.delete();\n            }\n        }\n    }",
            "    public void testJarMarker$catena_0() throws IOException {\n        File testArchive = File.createTempFile(\"jar-aostest\", \".jar\");\n        JarArchiveOutputStream out = null;\n        ZipFile zf = null;\n        try {\n\n            out = new JarArchiveOutputStream(new FileOutputStream(testArchive));\n            out.putArchiveEntry(new ZipArchiveEntry(\"foo/\"));\n            out.closeArchiveEntry();\n            out.putArchiveEntry(new ZipArchiveEntry(\"bar/\"));\n            out.closeArchiveEntry();\n            out.finish();\n            out.close();\n            out = null;\n\n            zf = new ZipFile(testArchive);\n            ZipArchiveEntry ze = zf.getEntry(\"foo/\");\n            assertNotNull(ze);                                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n            ZipExtraField[] fes = ze.getExtraFields();\n            try{ assertEquals(1, fes.length);                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertTrue(fes[0] instanceof JarMarker);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            ze = zf.getEntry(\"bar/\");\n            try{ assertNotNull(ze);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            fes = ze.getExtraFields();\n            try{ assertEquals(0, fes.length);                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            if (out != null) {\n                try {\n                    out.close();\n                } catch (IOException e) { /* swallow */ }\n            }\n            ZipFile.closeQuietly(zf);\n            if (testArchive.exists()) {\n                testArchive.delete();\n            }\n        }\n    }",
            "    public void testJarMarker$catena_1() throws IOException {\n        File testArchive = File.createTempFile(\"jar-aostest\", \".jar\");\n        JarArchiveOutputStream out = null;\n        ZipFile zf = null;\n        try {\n\n            out = new JarArchiveOutputStream(new FileOutputStream(testArchive));\n            out.putArchiveEntry(new ZipArchiveEntry(\"foo/\"));\n            out.closeArchiveEntry();\n            out.putArchiveEntry(new ZipArchiveEntry(\"bar/\"));\n            out.closeArchiveEntry();\n            out.finish();\n            out.close();\n            out = null;\n\n            zf = new ZipFile(testArchive);\n            ZipArchiveEntry ze = zf.getEntry(\"foo/\");\n            try{ assertNotNull(ze);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            ZipExtraField[] fes = ze.getExtraFields();\n            assertEquals(1, fes.length);                                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertTrue(fes[0] instanceof JarMarker);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            ze = zf.getEntry(\"bar/\");\n            try{ assertNotNull(ze);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            fes = ze.getExtraFields();\n            try{ assertEquals(0, fes.length);                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            if (out != null) {\n                try {\n                    out.close();\n                } catch (IOException e) { /* swallow */ }\n            }\n            ZipFile.closeQuietly(zf);\n            if (testArchive.exists()) {\n                testArchive.delete();\n            }\n        }\n    }",
            "    public void testJarMarker$catena_2() throws IOException {\n        File testArchive = File.createTempFile(\"jar-aostest\", \".jar\");\n        JarArchiveOutputStream out = null;\n        ZipFile zf = null;\n        try {\n\n            out = new JarArchiveOutputStream(new FileOutputStream(testArchive));\n            out.putArchiveEntry(new ZipArchiveEntry(\"foo/\"));\n            out.closeArchiveEntry();\n            out.putArchiveEntry(new ZipArchiveEntry(\"bar/\"));\n            out.closeArchiveEntry();\n            out.finish();\n            out.close();\n            out = null;\n\n            zf = new ZipFile(testArchive);\n            ZipArchiveEntry ze = zf.getEntry(\"foo/\");\n            try{ assertNotNull(ze);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            ZipExtraField[] fes = ze.getExtraFields();\n            try{ assertEquals(1, fes.length);                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertTrue(fes[0] instanceof JarMarker);                                                        /***** ORIGINAL ASSERTION IS HERE *****/\n\n            ze = zf.getEntry(\"bar/\");\n            try{ assertNotNull(ze);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            fes = ze.getExtraFields();\n            try{ assertEquals(0, fes.length);                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            if (out != null) {\n                try {\n                    out.close();\n                } catch (IOException e) { /* swallow */ }\n            }\n            ZipFile.closeQuietly(zf);\n            if (testArchive.exists()) {\n                testArchive.delete();\n            }\n        }\n    }",
            "    public void testJarMarker$catena_4() throws IOException {\n        File testArchive = File.createTempFile(\"jar-aostest\", \".jar\");\n        JarArchiveOutputStream out = null;\n        ZipFile zf = null;\n        try {\n\n            out = new JarArchiveOutputStream(new FileOutputStream(testArchive));\n            out.putArchiveEntry(new ZipArchiveEntry(\"foo/\"));\n            out.closeArchiveEntry();\n            out.putArchiveEntry(new ZipArchiveEntry(\"bar/\"));\n            out.closeArchiveEntry();\n            out.finish();\n            out.close();\n            out = null;\n\n            zf = new ZipFile(testArchive);\n            ZipArchiveEntry ze = zf.getEntry(\"foo/\");\n            try{ assertNotNull(ze);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            ZipExtraField[] fes = ze.getExtraFields();\n            try{ assertEquals(1, fes.length);                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertTrue(fes[0] instanceof JarMarker);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            ze = zf.getEntry(\"bar/\");\n            try{ assertNotNull(ze);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            fes = ze.getExtraFields();\n            assertEquals(0, fes.length);                                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n        } finally {\n            if (out != null) {\n                try {\n                    out.close();\n                } catch (IOException e) { /* swallow */ }\n            }\n            ZipFile.closeQuietly(zf);\n            if (testArchive.exists()) {\n                testArchive.delete();\n            }\n        }\n    }"
        ]
    },
    "org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest::testZipArchiveInputStreamReadsUnicodeFields": {
        "begin_line_no": 177,
        "end_line_no": 193,
        "file_path": "src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java",
        "to": [
            "    public void testZipArchiveInputStreamReadsUnicodeFields$catena_1()\n        throws IOException {\n        File file = File.createTempFile(\"unicode-test\", \".zip\");\n        ZipFile zf = null;\n        try {\n            try{ createTestFile(file, US_ASCII, false, true);                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            zf = new ZipFile(file, US_ASCII, true);\n            assertNotNull(zf.getEntry(ASCII_TXT));                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertNotNull(zf.getEntry(OIL_BARREL_TXT));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            ZipFile.closeQuietly(zf);\n            if (file.exists()) {\n                file.delete();\n            }\n        }\n    }",
            "    public void testZipArchiveInputStreamReadsUnicodeFields$catena_2()\n        throws IOException {\n        File file = File.createTempFile(\"unicode-test\", \".zip\");\n        ZipFile zf = null;\n        try {\n            try{ createTestFile(file, US_ASCII, false, true);                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            zf = new ZipFile(file, US_ASCII, true);\n            try{ assertNotNull(zf.getEntry(ASCII_TXT));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT));                                                /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertNotNull(zf.getEntry(OIL_BARREL_TXT));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            ZipFile.closeQuietly(zf);\n            if (file.exists()) {\n                file.delete();\n            }\n        }\n    }",
            "    public void testZipArchiveInputStreamReadsUnicodeFields$catena_0()\n        throws IOException {\n        File file = File.createTempFile(\"unicode-test\", \".zip\");\n        ZipFile zf = null;\n        try {\n            createTestFile(file, US_ASCII, false, true);                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n            zf = new ZipFile(file, US_ASCII, true);\n            try{ assertNotNull(zf.getEntry(ASCII_TXT));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertNotNull(zf.getEntry(OIL_BARREL_TXT));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            ZipFile.closeQuietly(zf);\n            if (file.exists()) {\n                file.delete();\n            }\n        }\n    }",
            "    public void testZipArchiveInputStreamReadsUnicodeFields$catena_3()\n        throws IOException {\n        File file = File.createTempFile(\"unicode-test\", \".zip\");\n        ZipFile zf = null;\n        try {\n            try{ createTestFile(file, US_ASCII, false, true);                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            zf = new ZipFile(file, US_ASCII, true);\n            try{ assertNotNull(zf.getEntry(ASCII_TXT));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertNotNull(zf.getEntry(OIL_BARREL_TXT));                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        } finally {\n            ZipFile.closeQuietly(zf);\n            if (file.exists()) {\n                file.delete();\n            }\n        }\n    }"
        ]
    }
}