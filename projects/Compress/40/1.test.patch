{
    "org.apache.commons.compress.utils.BitInputStreamTest::bigEndianWithOverflow": {
        "begin_line_no": 148,
        "end_line_no": 170,
        "file_path": "src/test/java/org/apache/commons/compress/utils/BitInputStreamTest.java",
        "to": [
            "    @Test\n    public void bigEndianWithOverflow$catena_1() throws Exception {\n        ByteArrayInputStream in = new ByteArrayInputStream(new byte[] {\n                87, // 01010111\n                45, // 00101101\n                66, // 01000010\n                15, // 00001111\n                90, // 01011010\n                29, // 00011101\n                88, // 01011000\n                61, // 00111101\n                33, // 00100001\n                74  // 01001010\n            });\n        BitInputStream bin = new BitInputStream(in, ByteOrder.BIG_ENDIAN);\n        try{ assertEquals(10, // 01010\n                     bin.readBits(5));                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(8274274654740644818l, //111-00101101-01000010-00001111-01011010-00011101-01011000-00111101-0010\n                     bin.readBits(63));                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(330, // 0001-01001010\n                     bin.readBits(12));                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1 , bin.readBits(1));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void bigEndianWithOverflow$catena_0() throws Exception {\n        ByteArrayInputStream in = new ByteArrayInputStream(new byte[] {\n                87, // 01010111\n                45, // 00101101\n                66, // 01000010\n                15, // 00001111\n                90, // 01011010\n                29, // 00011101\n                88, // 01011000\n                61, // 00111101\n                33, // 00100001\n                74  // 01001010\n            });\n        BitInputStream bin = new BitInputStream(in, ByteOrder.BIG_ENDIAN);\n        assertEquals(10, // 01010\n                     bin.readBits(5));                                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(8274274654740644818l, //111-00101101-01000010-00001111-01011010-00011101-01011000-00111101-0010\n                     bin.readBits(63));                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(330, // 0001-01001010\n                     bin.readBits(12));                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1 , bin.readBits(1));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void bigEndianWithOverflow$catena_2() throws Exception {\n        ByteArrayInputStream in = new ByteArrayInputStream(new byte[] {\n                87, // 01010111\n                45, // 00101101\n                66, // 01000010\n                15, // 00001111\n                90, // 01011010\n                29, // 00011101\n                88, // 01011000\n                61, // 00111101\n                33, // 00100001\n                74  // 01001010\n            });\n        BitInputStream bin = new BitInputStream(in, ByteOrder.BIG_ENDIAN);\n        try{ assertEquals(10, // 01010\n                     bin.readBits(5));                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(8274274654740644818l, //111-00101101-01000010-00001111-01011010-00011101-01011000-00111101-0010\n                     bin.readBits(63));                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(330, // 0001-01001010\n                     bin.readBits(12));                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(-1 , bin.readBits(1));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void bigEndianWithOverflow$catena_3() throws Exception {\n        ByteArrayInputStream in = new ByteArrayInputStream(new byte[] {\n                87, // 01010111\n                45, // 00101101\n                66, // 01000010\n                15, // 00001111\n                90, // 01011010\n                29, // 00011101\n                88, // 01011000\n                61, // 00111101\n                33, // 00100001\n                74  // 01001010\n            });\n        BitInputStream bin = new BitInputStream(in, ByteOrder.BIG_ENDIAN);\n        try{ assertEquals(10, // 01010\n                     bin.readBits(5));                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(8274274654740644818l, //111-00101101-01000010-00001111-01011010-00011101-01011000-00111101-0010\n                     bin.readBits(63));                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(330, // 0001-01001010\n                     bin.readBits(12));                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(-1 , bin.readBits(1));                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
        ]
    },
    "org.apache.commons.compress.utils.BitInputStreamTest::littleEndianWithOverflow": {
        "begin_line_no": 124,
        "end_line_no": 146,
        "file_path": "src/test/java/org/apache/commons/compress/utils/BitInputStreamTest.java",
        "to": [
            "    @Test\n    public void littleEndianWithOverflow$catena_2() throws Exception {\n        ByteArrayInputStream in = new ByteArrayInputStream(new byte[] {\n                87, // 01010111\n                45, // 00101101\n                66, // 01000010\n                15, // 00001111\n                90, // 01011010\n                29, // 00011101\n                88, // 01011000\n                61, // 00111101\n                33, // 00100001\n                74  // 01001010\n            });\n        BitInputStream bin = new BitInputStream(in, ByteOrder.LITTLE_ENDIAN);\n        try{ assertEquals(23, // 10111\n                     bin.readBits(5));                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(714595605644185962l, // 0001-00111101-01011000-00011101-01011010-00001111-01000010-00101101-010\n                     bin.readBits(63));                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(1186, // 01001010-0010\n                     bin.readBits(12));                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(-1 , bin.readBits(1));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void littleEndianWithOverflow$catena_0() throws Exception {\n        ByteArrayInputStream in = new ByteArrayInputStream(new byte[] {\n                87, // 01010111\n                45, // 00101101\n                66, // 01000010\n                15, // 00001111\n                90, // 01011010\n                29, // 00011101\n                88, // 01011000\n                61, // 00111101\n                33, // 00100001\n                74  // 01001010\n            });\n        BitInputStream bin = new BitInputStream(in, ByteOrder.LITTLE_ENDIAN);\n        assertEquals(23, // 10111\n                     bin.readBits(5));                                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(714595605644185962l, // 0001-00111101-01011000-00011101-01011010-00001111-01000010-00101101-010\n                     bin.readBits(63));                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1186, // 01001010-0010\n                     bin.readBits(12));                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1 , bin.readBits(1));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void littleEndianWithOverflow$catena_1() throws Exception {\n        ByteArrayInputStream in = new ByteArrayInputStream(new byte[] {\n                87, // 01010111\n                45, // 00101101\n                66, // 01000010\n                15, // 00001111\n                90, // 01011010\n                29, // 00011101\n                88, // 01011000\n                61, // 00111101\n                33, // 00100001\n                74  // 01001010\n            });\n        BitInputStream bin = new BitInputStream(in, ByteOrder.LITTLE_ENDIAN);\n        try{ assertEquals(23, // 10111\n                     bin.readBits(5));                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(714595605644185962l, // 0001-00111101-01011000-00011101-01011010-00001111-01000010-00101101-010\n                     bin.readBits(63));                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(1186, // 01001010-0010\n                     bin.readBits(12));                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1 , bin.readBits(1));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void littleEndianWithOverflow$catena_3() throws Exception {\n        ByteArrayInputStream in = new ByteArrayInputStream(new byte[] {\n                87, // 01010111\n                45, // 00101101\n                66, // 01000010\n                15, // 00001111\n                90, // 01011010\n                29, // 00011101\n                88, // 01011000\n                61, // 00111101\n                33, // 00100001\n                74  // 01001010\n            });\n        BitInputStream bin = new BitInputStream(in, ByteOrder.LITTLE_ENDIAN);\n        try{ assertEquals(23, // 10111\n                     bin.readBits(5));                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(714595605644185962l, // 0001-00111101-01011000-00011101-01011010-00001111-01000010-00101101-010\n                     bin.readBits(63));                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1186, // 01001010-0010\n                     bin.readBits(12));                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(-1 , bin.readBits(1));                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
        ]
    }
}