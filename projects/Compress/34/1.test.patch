{
    "org.apache.commons.compress.archivers.zip.X7875_NewUnixTest::testParseReparse": {
        "begin_line_no": 138,
        "end_line_no": 193,
        "file_path": "src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java",
        "to": [
            "    @Test\n    public void testParseReparse$catena_3() throws ZipException {\n\n        // Version=1, Len=0, Len=0.\n        final byte[] ZERO_LEN = {1, 0, 0};\n\n        // Version=1, Len=1, zero, Len=1, zero.\n        final byte[] ZERO_UID_GID = {1, 1, 0, 1, 0};\n\n        // Version=1, Len=1, one, Len=1, one\n        final byte[] ONE_UID_GID = {1, 1, 1, 1, 1};\n\n        // Version=1, Len=2, one thousand, Len=2, one thousand\n        final byte[] ONE_THOUSAND_UID_GID = {1, 2, -24, 3, 2, -24, 3};\n\n        // (2^32 - 2).   I guess they avoid (2^32 - 1) since it's identical to -1 in\n        // two's complement, and -1 often has a special meaning.\n        final byte[] UNIX_MAX_UID_GID = {1, 4, -2, -1, -1, -1, 4, -2, -1, -1, -1};\n\n        // Version=1, Len=5, 2^32, Len=5, 2^32 + 1\n        // Esoteric test:  can we handle 40 bit numbers?\n        final byte[] LENGTH_5 = {1, 5, 0, 0, 0, 0, 1, 5, 1, 0, 0, 0, 1};\n\n        // Version=1, Len=8, 2^63 - 2, Len=8, 2^63 - 1\n        // Esoteric test:  can we handle 64 bit numbers?\n        final byte[] LENGTH_8 = {1, 8, -2, -1, -1, -1, -1, -1, -1, 127, 8, -1, -1, -1, -1, -1, -1, -1, 127};\n\n        final long TWO_TO_32 = 0x100000000L;\n        final long MAX = TWO_TO_32 - 2;\n\n        try{ parseReparse(0, 0, ZERO_LEN, 0, 0);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(0, 0, ZERO_UID_GID, 0, 0);                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(1, 1, ONE_UID_GID, 1, 1);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        parseReparse(1000, 1000, ONE_THOUSAND_UID_GID, 1000, 1000);                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ parseReparse(MAX, MAX, UNIX_MAX_UID_GID, MAX, MAX);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(-2, -2, UNIX_MAX_UID_GID, MAX, MAX);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(TWO_TO_32, TWO_TO_32 + 1, LENGTH_5, TWO_TO_32, TWO_TO_32 + 1);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(Long.MAX_VALUE - 1, Long.MAX_VALUE, LENGTH_8, Long.MAX_VALUE - 1, Long.MAX_VALUE);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // We never emit this, but we should be able to parse it:\n        final byte[] SPURIOUS_ZEROES_1 = {1, 4, -1, 0, 0, 0, 4, -128, 0, 0, 0};\n        final byte[] EXPECTED_1 = {1, 1, -1, 1, -128};\n        xf.parseFromLocalFileData(SPURIOUS_ZEROES_1, 0, SPURIOUS_ZEROES_1.length);\n\n        try{ assertEquals(255, xf.getUID());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(128, xf.getGID());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(Arrays.equals(EXPECTED_1, xf.getLocalFileDataData()));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        final byte[] SPURIOUS_ZEROES_2 = {1, 4, -1, -1, 0, 0, 4, 1, 2, 0, 0};\n        final byte[] EXPECTED_2 = {1, 2, -1, -1, 2, 1, 2};\n        xf.parseFromLocalFileData(SPURIOUS_ZEROES_2, 0, SPURIOUS_ZEROES_2.length);\n\n        try{ assertEquals(65535, xf.getUID());                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(513, xf.getGID());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(Arrays.equals(EXPECTED_2, xf.getLocalFileDataData()));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void testParseReparse$catena_2() throws ZipException {\n\n        // Version=1, Len=0, Len=0.\n        final byte[] ZERO_LEN = {1, 0, 0};\n\n        // Version=1, Len=1, zero, Len=1, zero.\n        final byte[] ZERO_UID_GID = {1, 1, 0, 1, 0};\n\n        // Version=1, Len=1, one, Len=1, one\n        final byte[] ONE_UID_GID = {1, 1, 1, 1, 1};\n\n        // Version=1, Len=2, one thousand, Len=2, one thousand\n        final byte[] ONE_THOUSAND_UID_GID = {1, 2, -24, 3, 2, -24, 3};\n\n        // (2^32 - 2).   I guess they avoid (2^32 - 1) since it's identical to -1 in\n        // two's complement, and -1 often has a special meaning.\n        final byte[] UNIX_MAX_UID_GID = {1, 4, -2, -1, -1, -1, 4, -2, -1, -1, -1};\n\n        // Version=1, Len=5, 2^32, Len=5, 2^32 + 1\n        // Esoteric test:  can we handle 40 bit numbers?\n        final byte[] LENGTH_5 = {1, 5, 0, 0, 0, 0, 1, 5, 1, 0, 0, 0, 1};\n\n        // Version=1, Len=8, 2^63 - 2, Len=8, 2^63 - 1\n        // Esoteric test:  can we handle 64 bit numbers?\n        final byte[] LENGTH_8 = {1, 8, -2, -1, -1, -1, -1, -1, -1, 127, 8, -1, -1, -1, -1, -1, -1, -1, 127};\n\n        final long TWO_TO_32 = 0x100000000L;\n        final long MAX = TWO_TO_32 - 2;\n\n        try{ parseReparse(0, 0, ZERO_LEN, 0, 0);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(0, 0, ZERO_UID_GID, 0, 0);                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        parseReparse(1, 1, ONE_UID_GID, 1, 1);                                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ parseReparse(1000, 1000, ONE_THOUSAND_UID_GID, 1000, 1000);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(MAX, MAX, UNIX_MAX_UID_GID, MAX, MAX);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(-2, -2, UNIX_MAX_UID_GID, MAX, MAX);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(TWO_TO_32, TWO_TO_32 + 1, LENGTH_5, TWO_TO_32, TWO_TO_32 + 1);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(Long.MAX_VALUE - 1, Long.MAX_VALUE, LENGTH_8, Long.MAX_VALUE - 1, Long.MAX_VALUE);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // We never emit this, but we should be able to parse it:\n        final byte[] SPURIOUS_ZEROES_1 = {1, 4, -1, 0, 0, 0, 4, -128, 0, 0, 0};\n        final byte[] EXPECTED_1 = {1, 1, -1, 1, -128};\n        xf.parseFromLocalFileData(SPURIOUS_ZEROES_1, 0, SPURIOUS_ZEROES_1.length);\n\n        try{ assertEquals(255, xf.getUID());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(128, xf.getGID());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(Arrays.equals(EXPECTED_1, xf.getLocalFileDataData()));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        final byte[] SPURIOUS_ZEROES_2 = {1, 4, -1, -1, 0, 0, 4, 1, 2, 0, 0};\n        final byte[] EXPECTED_2 = {1, 2, -1, -1, 2, 1, 2};\n        xf.parseFromLocalFileData(SPURIOUS_ZEROES_2, 0, SPURIOUS_ZEROES_2.length);\n\n        try{ assertEquals(65535, xf.getUID());                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(513, xf.getGID());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(Arrays.equals(EXPECTED_2, xf.getLocalFileDataData()));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void testParseReparse$catena_0() throws ZipException {\n\n        // Version=1, Len=0, Len=0.\n        final byte[] ZERO_LEN = {1, 0, 0};\n\n        // Version=1, Len=1, zero, Len=1, zero.\n        final byte[] ZERO_UID_GID = {1, 1, 0, 1, 0};\n\n        // Version=1, Len=1, one, Len=1, one\n        final byte[] ONE_UID_GID = {1, 1, 1, 1, 1};\n\n        // Version=1, Len=2, one thousand, Len=2, one thousand\n        final byte[] ONE_THOUSAND_UID_GID = {1, 2, -24, 3, 2, -24, 3};\n\n        // (2^32 - 2).   I guess they avoid (2^32 - 1) since it's identical to -1 in\n        // two's complement, and -1 often has a special meaning.\n        final byte[] UNIX_MAX_UID_GID = {1, 4, -2, -1, -1, -1, 4, -2, -1, -1, -1};\n\n        // Version=1, Len=5, 2^32, Len=5, 2^32 + 1\n        // Esoteric test:  can we handle 40 bit numbers?\n        final byte[] LENGTH_5 = {1, 5, 0, 0, 0, 0, 1, 5, 1, 0, 0, 0, 1};\n\n        // Version=1, Len=8, 2^63 - 2, Len=8, 2^63 - 1\n        // Esoteric test:  can we handle 64 bit numbers?\n        final byte[] LENGTH_8 = {1, 8, -2, -1, -1, -1, -1, -1, -1, 127, 8, -1, -1, -1, -1, -1, -1, -1, 127};\n\n        final long TWO_TO_32 = 0x100000000L;\n        final long MAX = TWO_TO_32 - 2;\n\n        parseReparse(0, 0, ZERO_LEN, 0, 0);                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ parseReparse(0, 0, ZERO_UID_GID, 0, 0);                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(1, 1, ONE_UID_GID, 1, 1);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(1000, 1000, ONE_THOUSAND_UID_GID, 1000, 1000);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(MAX, MAX, UNIX_MAX_UID_GID, MAX, MAX);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(-2, -2, UNIX_MAX_UID_GID, MAX, MAX);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(TWO_TO_32, TWO_TO_32 + 1, LENGTH_5, TWO_TO_32, TWO_TO_32 + 1);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(Long.MAX_VALUE - 1, Long.MAX_VALUE, LENGTH_8, Long.MAX_VALUE - 1, Long.MAX_VALUE);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // We never emit this, but we should be able to parse it:\n        final byte[] SPURIOUS_ZEROES_1 = {1, 4, -1, 0, 0, 0, 4, -128, 0, 0, 0};\n        final byte[] EXPECTED_1 = {1, 1, -1, 1, -128};\n        xf.parseFromLocalFileData(SPURIOUS_ZEROES_1, 0, SPURIOUS_ZEROES_1.length);\n\n        try{ assertEquals(255, xf.getUID());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(128, xf.getGID());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(Arrays.equals(EXPECTED_1, xf.getLocalFileDataData()));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        final byte[] SPURIOUS_ZEROES_2 = {1, 4, -1, -1, 0, 0, 4, 1, 2, 0, 0};\n        final byte[] EXPECTED_2 = {1, 2, -1, -1, 2, 1, 2};\n        xf.parseFromLocalFileData(SPURIOUS_ZEROES_2, 0, SPURIOUS_ZEROES_2.length);\n\n        try{ assertEquals(65535, xf.getUID());                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(513, xf.getGID());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(Arrays.equals(EXPECTED_2, xf.getLocalFileDataData()));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void testParseReparse$catena_7() throws ZipException {\n\n        // Version=1, Len=0, Len=0.\n        final byte[] ZERO_LEN = {1, 0, 0};\n\n        // Version=1, Len=1, zero, Len=1, zero.\n        final byte[] ZERO_UID_GID = {1, 1, 0, 1, 0};\n\n        // Version=1, Len=1, one, Len=1, one\n        final byte[] ONE_UID_GID = {1, 1, 1, 1, 1};\n\n        // Version=1, Len=2, one thousand, Len=2, one thousand\n        final byte[] ONE_THOUSAND_UID_GID = {1, 2, -24, 3, 2, -24, 3};\n\n        // (2^32 - 2).   I guess they avoid (2^32 - 1) since it's identical to -1 in\n        // two's complement, and -1 often has a special meaning.\n        final byte[] UNIX_MAX_UID_GID = {1, 4, -2, -1, -1, -1, 4, -2, -1, -1, -1};\n\n        // Version=1, Len=5, 2^32, Len=5, 2^32 + 1\n        // Esoteric test:  can we handle 40 bit numbers?\n        final byte[] LENGTH_5 = {1, 5, 0, 0, 0, 0, 1, 5, 1, 0, 0, 0, 1};\n\n        // Version=1, Len=8, 2^63 - 2, Len=8, 2^63 - 1\n        // Esoteric test:  can we handle 64 bit numbers?\n        final byte[] LENGTH_8 = {1, 8, -2, -1, -1, -1, -1, -1, -1, 127, 8, -1, -1, -1, -1, -1, -1, -1, 127};\n\n        final long TWO_TO_32 = 0x100000000L;\n        final long MAX = TWO_TO_32 - 2;\n\n        try{ parseReparse(0, 0, ZERO_LEN, 0, 0);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(0, 0, ZERO_UID_GID, 0, 0);                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(1, 1, ONE_UID_GID, 1, 1);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(1000, 1000, ONE_THOUSAND_UID_GID, 1000, 1000);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(MAX, MAX, UNIX_MAX_UID_GID, MAX, MAX);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(-2, -2, UNIX_MAX_UID_GID, MAX, MAX);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(TWO_TO_32, TWO_TO_32 + 1, LENGTH_5, TWO_TO_32, TWO_TO_32 + 1);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        parseReparse(Long.MAX_VALUE - 1, Long.MAX_VALUE, LENGTH_8, Long.MAX_VALUE - 1, Long.MAX_VALUE);         /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // We never emit this, but we should be able to parse it:\n        final byte[] SPURIOUS_ZEROES_1 = {1, 4, -1, 0, 0, 0, 4, -128, 0, 0, 0};\n        final byte[] EXPECTED_1 = {1, 1, -1, 1, -128};\n        xf.parseFromLocalFileData(SPURIOUS_ZEROES_1, 0, SPURIOUS_ZEROES_1.length);\n\n        try{ assertEquals(255, xf.getUID());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(128, xf.getGID());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(Arrays.equals(EXPECTED_1, xf.getLocalFileDataData()));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        final byte[] SPURIOUS_ZEROES_2 = {1, 4, -1, -1, 0, 0, 4, 1, 2, 0, 0};\n        final byte[] EXPECTED_2 = {1, 2, -1, -1, 2, 1, 2};\n        xf.parseFromLocalFileData(SPURIOUS_ZEROES_2, 0, SPURIOUS_ZEROES_2.length);\n\n        try{ assertEquals(65535, xf.getUID());                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(513, xf.getGID());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(Arrays.equals(EXPECTED_2, xf.getLocalFileDataData()));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void testParseReparse$catena_6() throws ZipException {\n\n        // Version=1, Len=0, Len=0.\n        final byte[] ZERO_LEN = {1, 0, 0};\n\n        // Version=1, Len=1, zero, Len=1, zero.\n        final byte[] ZERO_UID_GID = {1, 1, 0, 1, 0};\n\n        // Version=1, Len=1, one, Len=1, one\n        final byte[] ONE_UID_GID = {1, 1, 1, 1, 1};\n\n        // Version=1, Len=2, one thousand, Len=2, one thousand\n        final byte[] ONE_THOUSAND_UID_GID = {1, 2, -24, 3, 2, -24, 3};\n\n        // (2^32 - 2).   I guess they avoid (2^32 - 1) since it's identical to -1 in\n        // two's complement, and -1 often has a special meaning.\n        final byte[] UNIX_MAX_UID_GID = {1, 4, -2, -1, -1, -1, 4, -2, -1, -1, -1};\n\n        // Version=1, Len=5, 2^32, Len=5, 2^32 + 1\n        // Esoteric test:  can we handle 40 bit numbers?\n        final byte[] LENGTH_5 = {1, 5, 0, 0, 0, 0, 1, 5, 1, 0, 0, 0, 1};\n\n        // Version=1, Len=8, 2^63 - 2, Len=8, 2^63 - 1\n        // Esoteric test:  can we handle 64 bit numbers?\n        final byte[] LENGTH_8 = {1, 8, -2, -1, -1, -1, -1, -1, -1, 127, 8, -1, -1, -1, -1, -1, -1, -1, 127};\n\n        final long TWO_TO_32 = 0x100000000L;\n        final long MAX = TWO_TO_32 - 2;\n\n        try{ parseReparse(0, 0, ZERO_LEN, 0, 0);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(0, 0, ZERO_UID_GID, 0, 0);                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(1, 1, ONE_UID_GID, 1, 1);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(1000, 1000, ONE_THOUSAND_UID_GID, 1000, 1000);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(MAX, MAX, UNIX_MAX_UID_GID, MAX, MAX);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(-2, -2, UNIX_MAX_UID_GID, MAX, MAX);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        parseReparse(TWO_TO_32, TWO_TO_32 + 1, LENGTH_5, TWO_TO_32, TWO_TO_32 + 1);                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ parseReparse(Long.MAX_VALUE - 1, Long.MAX_VALUE, LENGTH_8, Long.MAX_VALUE - 1, Long.MAX_VALUE);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // We never emit this, but we should be able to parse it:\n        final byte[] SPURIOUS_ZEROES_1 = {1, 4, -1, 0, 0, 0, 4, -128, 0, 0, 0};\n        final byte[] EXPECTED_1 = {1, 1, -1, 1, -128};\n        xf.parseFromLocalFileData(SPURIOUS_ZEROES_1, 0, SPURIOUS_ZEROES_1.length);\n\n        try{ assertEquals(255, xf.getUID());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(128, xf.getGID());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(Arrays.equals(EXPECTED_1, xf.getLocalFileDataData()));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        final byte[] SPURIOUS_ZEROES_2 = {1, 4, -1, -1, 0, 0, 4, 1, 2, 0, 0};\n        final byte[] EXPECTED_2 = {1, 2, -1, -1, 2, 1, 2};\n        xf.parseFromLocalFileData(SPURIOUS_ZEROES_2, 0, SPURIOUS_ZEROES_2.length);\n\n        try{ assertEquals(65535, xf.getUID());                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(513, xf.getGID());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(Arrays.equals(EXPECTED_2, xf.getLocalFileDataData()));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void testParseReparse$catena_5() throws ZipException {\n\n        // Version=1, Len=0, Len=0.\n        final byte[] ZERO_LEN = {1, 0, 0};\n\n        // Version=1, Len=1, zero, Len=1, zero.\n        final byte[] ZERO_UID_GID = {1, 1, 0, 1, 0};\n\n        // Version=1, Len=1, one, Len=1, one\n        final byte[] ONE_UID_GID = {1, 1, 1, 1, 1};\n\n        // Version=1, Len=2, one thousand, Len=2, one thousand\n        final byte[] ONE_THOUSAND_UID_GID = {1, 2, -24, 3, 2, -24, 3};\n\n        // (2^32 - 2).   I guess they avoid (2^32 - 1) since it's identical to -1 in\n        // two's complement, and -1 often has a special meaning.\n        final byte[] UNIX_MAX_UID_GID = {1, 4, -2, -1, -1, -1, 4, -2, -1, -1, -1};\n\n        // Version=1, Len=5, 2^32, Len=5, 2^32 + 1\n        // Esoteric test:  can we handle 40 bit numbers?\n        final byte[] LENGTH_5 = {1, 5, 0, 0, 0, 0, 1, 5, 1, 0, 0, 0, 1};\n\n        // Version=1, Len=8, 2^63 - 2, Len=8, 2^63 - 1\n        // Esoteric test:  can we handle 64 bit numbers?\n        final byte[] LENGTH_8 = {1, 8, -2, -1, -1, -1, -1, -1, -1, 127, 8, -1, -1, -1, -1, -1, -1, -1, 127};\n\n        final long TWO_TO_32 = 0x100000000L;\n        final long MAX = TWO_TO_32 - 2;\n\n        try{ parseReparse(0, 0, ZERO_LEN, 0, 0);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(0, 0, ZERO_UID_GID, 0, 0);                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(1, 1, ONE_UID_GID, 1, 1);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(1000, 1000, ONE_THOUSAND_UID_GID, 1000, 1000);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(MAX, MAX, UNIX_MAX_UID_GID, MAX, MAX);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        parseReparse(-2, -2, UNIX_MAX_UID_GID, MAX, MAX);                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ parseReparse(TWO_TO_32, TWO_TO_32 + 1, LENGTH_5, TWO_TO_32, TWO_TO_32 + 1);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(Long.MAX_VALUE - 1, Long.MAX_VALUE, LENGTH_8, Long.MAX_VALUE - 1, Long.MAX_VALUE);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // We never emit this, but we should be able to parse it:\n        final byte[] SPURIOUS_ZEROES_1 = {1, 4, -1, 0, 0, 0, 4, -128, 0, 0, 0};\n        final byte[] EXPECTED_1 = {1, 1, -1, 1, -128};\n        xf.parseFromLocalFileData(SPURIOUS_ZEROES_1, 0, SPURIOUS_ZEROES_1.length);\n\n        try{ assertEquals(255, xf.getUID());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(128, xf.getGID());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(Arrays.equals(EXPECTED_1, xf.getLocalFileDataData()));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        final byte[] SPURIOUS_ZEROES_2 = {1, 4, -1, -1, 0, 0, 4, 1, 2, 0, 0};\n        final byte[] EXPECTED_2 = {1, 2, -1, -1, 2, 1, 2};\n        xf.parseFromLocalFileData(SPURIOUS_ZEROES_2, 0, SPURIOUS_ZEROES_2.length);\n\n        try{ assertEquals(65535, xf.getUID());                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(513, xf.getGID());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(Arrays.equals(EXPECTED_2, xf.getLocalFileDataData()));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void testParseReparse$catena_1() throws ZipException {\n\n        // Version=1, Len=0, Len=0.\n        final byte[] ZERO_LEN = {1, 0, 0};\n\n        // Version=1, Len=1, zero, Len=1, zero.\n        final byte[] ZERO_UID_GID = {1, 1, 0, 1, 0};\n\n        // Version=1, Len=1, one, Len=1, one\n        final byte[] ONE_UID_GID = {1, 1, 1, 1, 1};\n\n        // Version=1, Len=2, one thousand, Len=2, one thousand\n        final byte[] ONE_THOUSAND_UID_GID = {1, 2, -24, 3, 2, -24, 3};\n\n        // (2^32 - 2).   I guess they avoid (2^32 - 1) since it's identical to -1 in\n        // two's complement, and -1 often has a special meaning.\n        final byte[] UNIX_MAX_UID_GID = {1, 4, -2, -1, -1, -1, 4, -2, -1, -1, -1};\n\n        // Version=1, Len=5, 2^32, Len=5, 2^32 + 1\n        // Esoteric test:  can we handle 40 bit numbers?\n        final byte[] LENGTH_5 = {1, 5, 0, 0, 0, 0, 1, 5, 1, 0, 0, 0, 1};\n\n        // Version=1, Len=8, 2^63 - 2, Len=8, 2^63 - 1\n        // Esoteric test:  can we handle 64 bit numbers?\n        final byte[] LENGTH_8 = {1, 8, -2, -1, -1, -1, -1, -1, -1, 127, 8, -1, -1, -1, -1, -1, -1, -1, 127};\n\n        final long TWO_TO_32 = 0x100000000L;\n        final long MAX = TWO_TO_32 - 2;\n\n        try{ parseReparse(0, 0, ZERO_LEN, 0, 0);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        parseReparse(0, 0, ZERO_UID_GID, 0, 0);                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ parseReparse(1, 1, ONE_UID_GID, 1, 1);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(1000, 1000, ONE_THOUSAND_UID_GID, 1000, 1000);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(MAX, MAX, UNIX_MAX_UID_GID, MAX, MAX);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(-2, -2, UNIX_MAX_UID_GID, MAX, MAX);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(TWO_TO_32, TWO_TO_32 + 1, LENGTH_5, TWO_TO_32, TWO_TO_32 + 1);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(Long.MAX_VALUE - 1, Long.MAX_VALUE, LENGTH_8, Long.MAX_VALUE - 1, Long.MAX_VALUE);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // We never emit this, but we should be able to parse it:\n        final byte[] SPURIOUS_ZEROES_1 = {1, 4, -1, 0, 0, 0, 4, -128, 0, 0, 0};\n        final byte[] EXPECTED_1 = {1, 1, -1, 1, -128};\n        xf.parseFromLocalFileData(SPURIOUS_ZEROES_1, 0, SPURIOUS_ZEROES_1.length);\n\n        try{ assertEquals(255, xf.getUID());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(128, xf.getGID());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(Arrays.equals(EXPECTED_1, xf.getLocalFileDataData()));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        final byte[] SPURIOUS_ZEROES_2 = {1, 4, -1, -1, 0, 0, 4, 1, 2, 0, 0};\n        final byte[] EXPECTED_2 = {1, 2, -1, -1, 2, 1, 2};\n        xf.parseFromLocalFileData(SPURIOUS_ZEROES_2, 0, SPURIOUS_ZEROES_2.length);\n\n        try{ assertEquals(65535, xf.getUID());                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(513, xf.getGID());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(Arrays.equals(EXPECTED_2, xf.getLocalFileDataData()));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void testParseReparse$catena_4() throws ZipException {\n\n        // Version=1, Len=0, Len=0.\n        final byte[] ZERO_LEN = {1, 0, 0};\n\n        // Version=1, Len=1, zero, Len=1, zero.\n        final byte[] ZERO_UID_GID = {1, 1, 0, 1, 0};\n\n        // Version=1, Len=1, one, Len=1, one\n        final byte[] ONE_UID_GID = {1, 1, 1, 1, 1};\n\n        // Version=1, Len=2, one thousand, Len=2, one thousand\n        final byte[] ONE_THOUSAND_UID_GID = {1, 2, -24, 3, 2, -24, 3};\n\n        // (2^32 - 2).   I guess they avoid (2^32 - 1) since it's identical to -1 in\n        // two's complement, and -1 often has a special meaning.\n        final byte[] UNIX_MAX_UID_GID = {1, 4, -2, -1, -1, -1, 4, -2, -1, -1, -1};\n\n        // Version=1, Len=5, 2^32, Len=5, 2^32 + 1\n        // Esoteric test:  can we handle 40 bit numbers?\n        final byte[] LENGTH_5 = {1, 5, 0, 0, 0, 0, 1, 5, 1, 0, 0, 0, 1};\n\n        // Version=1, Len=8, 2^63 - 2, Len=8, 2^63 - 1\n        // Esoteric test:  can we handle 64 bit numbers?\n        final byte[] LENGTH_8 = {1, 8, -2, -1, -1, -1, -1, -1, -1, 127, 8, -1, -1, -1, -1, -1, -1, -1, 127};\n\n        final long TWO_TO_32 = 0x100000000L;\n        final long MAX = TWO_TO_32 - 2;\n\n        try{ parseReparse(0, 0, ZERO_LEN, 0, 0);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(0, 0, ZERO_UID_GID, 0, 0);                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(1, 1, ONE_UID_GID, 1, 1);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(1000, 1000, ONE_THOUSAND_UID_GID, 1000, 1000);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        parseReparse(MAX, MAX, UNIX_MAX_UID_GID, MAX, MAX);                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ parseReparse(-2, -2, UNIX_MAX_UID_GID, MAX, MAX);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(TWO_TO_32, TWO_TO_32 + 1, LENGTH_5, TWO_TO_32, TWO_TO_32 + 1);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(Long.MAX_VALUE - 1, Long.MAX_VALUE, LENGTH_8, Long.MAX_VALUE - 1, Long.MAX_VALUE);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // We never emit this, but we should be able to parse it:\n        final byte[] SPURIOUS_ZEROES_1 = {1, 4, -1, 0, 0, 0, 4, -128, 0, 0, 0};\n        final byte[] EXPECTED_1 = {1, 1, -1, 1, -128};\n        xf.parseFromLocalFileData(SPURIOUS_ZEROES_1, 0, SPURIOUS_ZEROES_1.length);\n\n        try{ assertEquals(255, xf.getUID());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(128, xf.getGID());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(Arrays.equals(EXPECTED_1, xf.getLocalFileDataData()));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        final byte[] SPURIOUS_ZEROES_2 = {1, 4, -1, -1, 0, 0, 4, 1, 2, 0, 0};\n        final byte[] EXPECTED_2 = {1, 2, -1, -1, 2, 1, 2};\n        xf.parseFromLocalFileData(SPURIOUS_ZEROES_2, 0, SPURIOUS_ZEROES_2.length);\n\n        try{ assertEquals(65535, xf.getUID());                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(513, xf.getGID());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(Arrays.equals(EXPECTED_2, xf.getLocalFileDataData()));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void testParseReparse$catena_8() throws ZipException {\n\n        // Version=1, Len=0, Len=0.\n        final byte[] ZERO_LEN = {1, 0, 0};\n\n        // Version=1, Len=1, zero, Len=1, zero.\n        final byte[] ZERO_UID_GID = {1, 1, 0, 1, 0};\n\n        // Version=1, Len=1, one, Len=1, one\n        final byte[] ONE_UID_GID = {1, 1, 1, 1, 1};\n\n        // Version=1, Len=2, one thousand, Len=2, one thousand\n        final byte[] ONE_THOUSAND_UID_GID = {1, 2, -24, 3, 2, -24, 3};\n\n        // (2^32 - 2).   I guess they avoid (2^32 - 1) since it's identical to -1 in\n        // two's complement, and -1 often has a special meaning.\n        final byte[] UNIX_MAX_UID_GID = {1, 4, -2, -1, -1, -1, 4, -2, -1, -1, -1};\n\n        // Version=1, Len=5, 2^32, Len=5, 2^32 + 1\n        // Esoteric test:  can we handle 40 bit numbers?\n        final byte[] LENGTH_5 = {1, 5, 0, 0, 0, 0, 1, 5, 1, 0, 0, 0, 1};\n\n        // Version=1, Len=8, 2^63 - 2, Len=8, 2^63 - 1\n        // Esoteric test:  can we handle 64 bit numbers?\n        final byte[] LENGTH_8 = {1, 8, -2, -1, -1, -1, -1, -1, -1, 127, 8, -1, -1, -1, -1, -1, -1, -1, 127};\n\n        final long TWO_TO_32 = 0x100000000L;\n        final long MAX = TWO_TO_32 - 2;\n\n        try{ parseReparse(0, 0, ZERO_LEN, 0, 0);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(0, 0, ZERO_UID_GID, 0, 0);                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(1, 1, ONE_UID_GID, 1, 1);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(1000, 1000, ONE_THOUSAND_UID_GID, 1000, 1000);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(MAX, MAX, UNIX_MAX_UID_GID, MAX, MAX);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(-2, -2, UNIX_MAX_UID_GID, MAX, MAX);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(TWO_TO_32, TWO_TO_32 + 1, LENGTH_5, TWO_TO_32, TWO_TO_32 + 1);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(Long.MAX_VALUE - 1, Long.MAX_VALUE, LENGTH_8, Long.MAX_VALUE - 1, Long.MAX_VALUE);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // We never emit this, but we should be able to parse it:\n        final byte[] SPURIOUS_ZEROES_1 = {1, 4, -1, 0, 0, 0, 4, -128, 0, 0, 0};\n        final byte[] EXPECTED_1 = {1, 1, -1, 1, -128};\n        xf.parseFromLocalFileData(SPURIOUS_ZEROES_1, 0, SPURIOUS_ZEROES_1.length);\n\n        assertEquals(255, xf.getUID());                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(128, xf.getGID());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(Arrays.equals(EXPECTED_1, xf.getLocalFileDataData()));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        final byte[] SPURIOUS_ZEROES_2 = {1, 4, -1, -1, 0, 0, 4, 1, 2, 0, 0};\n        final byte[] EXPECTED_2 = {1, 2, -1, -1, 2, 1, 2};\n        xf.parseFromLocalFileData(SPURIOUS_ZEROES_2, 0, SPURIOUS_ZEROES_2.length);\n\n        try{ assertEquals(65535, xf.getUID());                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(513, xf.getGID());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(Arrays.equals(EXPECTED_2, xf.getLocalFileDataData()));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void testParseReparse$catena_9() throws ZipException {\n\n        // Version=1, Len=0, Len=0.\n        final byte[] ZERO_LEN = {1, 0, 0};\n\n        // Version=1, Len=1, zero, Len=1, zero.\n        final byte[] ZERO_UID_GID = {1, 1, 0, 1, 0};\n\n        // Version=1, Len=1, one, Len=1, one\n        final byte[] ONE_UID_GID = {1, 1, 1, 1, 1};\n\n        // Version=1, Len=2, one thousand, Len=2, one thousand\n        final byte[] ONE_THOUSAND_UID_GID = {1, 2, -24, 3, 2, -24, 3};\n\n        // (2^32 - 2).   I guess they avoid (2^32 - 1) since it's identical to -1 in\n        // two's complement, and -1 often has a special meaning.\n        final byte[] UNIX_MAX_UID_GID = {1, 4, -2, -1, -1, -1, 4, -2, -1, -1, -1};\n\n        // Version=1, Len=5, 2^32, Len=5, 2^32 + 1\n        // Esoteric test:  can we handle 40 bit numbers?\n        final byte[] LENGTH_5 = {1, 5, 0, 0, 0, 0, 1, 5, 1, 0, 0, 0, 1};\n\n        // Version=1, Len=8, 2^63 - 2, Len=8, 2^63 - 1\n        // Esoteric test:  can we handle 64 bit numbers?\n        final byte[] LENGTH_8 = {1, 8, -2, -1, -1, -1, -1, -1, -1, 127, 8, -1, -1, -1, -1, -1, -1, -1, 127};\n\n        final long TWO_TO_32 = 0x100000000L;\n        final long MAX = TWO_TO_32 - 2;\n\n        try{ parseReparse(0, 0, ZERO_LEN, 0, 0);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(0, 0, ZERO_UID_GID, 0, 0);                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(1, 1, ONE_UID_GID, 1, 1);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(1000, 1000, ONE_THOUSAND_UID_GID, 1000, 1000);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(MAX, MAX, UNIX_MAX_UID_GID, MAX, MAX);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(-2, -2, UNIX_MAX_UID_GID, MAX, MAX);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(TWO_TO_32, TWO_TO_32 + 1, LENGTH_5, TWO_TO_32, TWO_TO_32 + 1);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(Long.MAX_VALUE - 1, Long.MAX_VALUE, LENGTH_8, Long.MAX_VALUE - 1, Long.MAX_VALUE);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // We never emit this, but we should be able to parse it:\n        final byte[] SPURIOUS_ZEROES_1 = {1, 4, -1, 0, 0, 0, 4, -128, 0, 0, 0};\n        final byte[] EXPECTED_1 = {1, 1, -1, 1, -128};\n        xf.parseFromLocalFileData(SPURIOUS_ZEROES_1, 0, SPURIOUS_ZEROES_1.length);\n\n        try{ assertEquals(255, xf.getUID());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(128, xf.getGID());                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(Arrays.equals(EXPECTED_1, xf.getLocalFileDataData()));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        final byte[] SPURIOUS_ZEROES_2 = {1, 4, -1, -1, 0, 0, 4, 1, 2, 0, 0};\n        final byte[] EXPECTED_2 = {1, 2, -1, -1, 2, 1, 2};\n        xf.parseFromLocalFileData(SPURIOUS_ZEROES_2, 0, SPURIOUS_ZEROES_2.length);\n\n        try{ assertEquals(65535, xf.getUID());                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(513, xf.getGID());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(Arrays.equals(EXPECTED_2, xf.getLocalFileDataData()));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void testParseReparse$catena_10() throws ZipException {\n\n        // Version=1, Len=0, Len=0.\n        final byte[] ZERO_LEN = {1, 0, 0};\n\n        // Version=1, Len=1, zero, Len=1, zero.\n        final byte[] ZERO_UID_GID = {1, 1, 0, 1, 0};\n\n        // Version=1, Len=1, one, Len=1, one\n        final byte[] ONE_UID_GID = {1, 1, 1, 1, 1};\n\n        // Version=1, Len=2, one thousand, Len=2, one thousand\n        final byte[] ONE_THOUSAND_UID_GID = {1, 2, -24, 3, 2, -24, 3};\n\n        // (2^32 - 2).   I guess they avoid (2^32 - 1) since it's identical to -1 in\n        // two's complement, and -1 often has a special meaning.\n        final byte[] UNIX_MAX_UID_GID = {1, 4, -2, -1, -1, -1, 4, -2, -1, -1, -1};\n\n        // Version=1, Len=5, 2^32, Len=5, 2^32 + 1\n        // Esoteric test:  can we handle 40 bit numbers?\n        final byte[] LENGTH_5 = {1, 5, 0, 0, 0, 0, 1, 5, 1, 0, 0, 0, 1};\n\n        // Version=1, Len=8, 2^63 - 2, Len=8, 2^63 - 1\n        // Esoteric test:  can we handle 64 bit numbers?\n        final byte[] LENGTH_8 = {1, 8, -2, -1, -1, -1, -1, -1, -1, 127, 8, -1, -1, -1, -1, -1, -1, -1, 127};\n\n        final long TWO_TO_32 = 0x100000000L;\n        final long MAX = TWO_TO_32 - 2;\n\n        try{ parseReparse(0, 0, ZERO_LEN, 0, 0);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(0, 0, ZERO_UID_GID, 0, 0);                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(1, 1, ONE_UID_GID, 1, 1);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(1000, 1000, ONE_THOUSAND_UID_GID, 1000, 1000);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(MAX, MAX, UNIX_MAX_UID_GID, MAX, MAX);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(-2, -2, UNIX_MAX_UID_GID, MAX, MAX);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(TWO_TO_32, TWO_TO_32 + 1, LENGTH_5, TWO_TO_32, TWO_TO_32 + 1);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(Long.MAX_VALUE - 1, Long.MAX_VALUE, LENGTH_8, Long.MAX_VALUE - 1, Long.MAX_VALUE);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // We never emit this, but we should be able to parse it:\n        final byte[] SPURIOUS_ZEROES_1 = {1, 4, -1, 0, 0, 0, 4, -128, 0, 0, 0};\n        final byte[] EXPECTED_1 = {1, 1, -1, 1, -128};\n        xf.parseFromLocalFileData(SPURIOUS_ZEROES_1, 0, SPURIOUS_ZEROES_1.length);\n\n        try{ assertEquals(255, xf.getUID());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(128, xf.getGID());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(Arrays.equals(EXPECTED_1, xf.getLocalFileDataData()));                                       /***** ORIGINAL ASSERTION IS HERE *****/\n\n        final byte[] SPURIOUS_ZEROES_2 = {1, 4, -1, -1, 0, 0, 4, 1, 2, 0, 0};\n        final byte[] EXPECTED_2 = {1, 2, -1, -1, 2, 1, 2};\n        xf.parseFromLocalFileData(SPURIOUS_ZEROES_2, 0, SPURIOUS_ZEROES_2.length);\n\n        try{ assertEquals(65535, xf.getUID());                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(513, xf.getGID());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(Arrays.equals(EXPECTED_2, xf.getLocalFileDataData()));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void testParseReparse$catena_11() throws ZipException {\n\n        // Version=1, Len=0, Len=0.\n        final byte[] ZERO_LEN = {1, 0, 0};\n\n        // Version=1, Len=1, zero, Len=1, zero.\n        final byte[] ZERO_UID_GID = {1, 1, 0, 1, 0};\n\n        // Version=1, Len=1, one, Len=1, one\n        final byte[] ONE_UID_GID = {1, 1, 1, 1, 1};\n\n        // Version=1, Len=2, one thousand, Len=2, one thousand\n        final byte[] ONE_THOUSAND_UID_GID = {1, 2, -24, 3, 2, -24, 3};\n\n        // (2^32 - 2).   I guess they avoid (2^32 - 1) since it's identical to -1 in\n        // two's complement, and -1 often has a special meaning.\n        final byte[] UNIX_MAX_UID_GID = {1, 4, -2, -1, -1, -1, 4, -2, -1, -1, -1};\n\n        // Version=1, Len=5, 2^32, Len=5, 2^32 + 1\n        // Esoteric test:  can we handle 40 bit numbers?\n        final byte[] LENGTH_5 = {1, 5, 0, 0, 0, 0, 1, 5, 1, 0, 0, 0, 1};\n\n        // Version=1, Len=8, 2^63 - 2, Len=8, 2^63 - 1\n        // Esoteric test:  can we handle 64 bit numbers?\n        final byte[] LENGTH_8 = {1, 8, -2, -1, -1, -1, -1, -1, -1, 127, 8, -1, -1, -1, -1, -1, -1, -1, 127};\n\n        final long TWO_TO_32 = 0x100000000L;\n        final long MAX = TWO_TO_32 - 2;\n\n        try{ parseReparse(0, 0, ZERO_LEN, 0, 0);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(0, 0, ZERO_UID_GID, 0, 0);                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(1, 1, ONE_UID_GID, 1, 1);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(1000, 1000, ONE_THOUSAND_UID_GID, 1000, 1000);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(MAX, MAX, UNIX_MAX_UID_GID, MAX, MAX);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(-2, -2, UNIX_MAX_UID_GID, MAX, MAX);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(TWO_TO_32, TWO_TO_32 + 1, LENGTH_5, TWO_TO_32, TWO_TO_32 + 1);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(Long.MAX_VALUE - 1, Long.MAX_VALUE, LENGTH_8, Long.MAX_VALUE - 1, Long.MAX_VALUE);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // We never emit this, but we should be able to parse it:\n        final byte[] SPURIOUS_ZEROES_1 = {1, 4, -1, 0, 0, 0, 4, -128, 0, 0, 0};\n        final byte[] EXPECTED_1 = {1, 1, -1, 1, -128};\n        xf.parseFromLocalFileData(SPURIOUS_ZEROES_1, 0, SPURIOUS_ZEROES_1.length);\n\n        try{ assertEquals(255, xf.getUID());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(128, xf.getGID());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(Arrays.equals(EXPECTED_1, xf.getLocalFileDataData()));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        final byte[] SPURIOUS_ZEROES_2 = {1, 4, -1, -1, 0, 0, 4, 1, 2, 0, 0};\n        final byte[] EXPECTED_2 = {1, 2, -1, -1, 2, 1, 2};\n        xf.parseFromLocalFileData(SPURIOUS_ZEROES_2, 0, SPURIOUS_ZEROES_2.length);\n\n        assertEquals(65535, xf.getUID());                                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(513, xf.getGID());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(Arrays.equals(EXPECTED_2, xf.getLocalFileDataData()));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void testParseReparse$catena_12() throws ZipException {\n\n        // Version=1, Len=0, Len=0.\n        final byte[] ZERO_LEN = {1, 0, 0};\n\n        // Version=1, Len=1, zero, Len=1, zero.\n        final byte[] ZERO_UID_GID = {1, 1, 0, 1, 0};\n\n        // Version=1, Len=1, one, Len=1, one\n        final byte[] ONE_UID_GID = {1, 1, 1, 1, 1};\n\n        // Version=1, Len=2, one thousand, Len=2, one thousand\n        final byte[] ONE_THOUSAND_UID_GID = {1, 2, -24, 3, 2, -24, 3};\n\n        // (2^32 - 2).   I guess they avoid (2^32 - 1) since it's identical to -1 in\n        // two's complement, and -1 often has a special meaning.\n        final byte[] UNIX_MAX_UID_GID = {1, 4, -2, -1, -1, -1, 4, -2, -1, -1, -1};\n\n        // Version=1, Len=5, 2^32, Len=5, 2^32 + 1\n        // Esoteric test:  can we handle 40 bit numbers?\n        final byte[] LENGTH_5 = {1, 5, 0, 0, 0, 0, 1, 5, 1, 0, 0, 0, 1};\n\n        // Version=1, Len=8, 2^63 - 2, Len=8, 2^63 - 1\n        // Esoteric test:  can we handle 64 bit numbers?\n        final byte[] LENGTH_8 = {1, 8, -2, -1, -1, -1, -1, -1, -1, 127, 8, -1, -1, -1, -1, -1, -1, -1, 127};\n\n        final long TWO_TO_32 = 0x100000000L;\n        final long MAX = TWO_TO_32 - 2;\n\n        try{ parseReparse(0, 0, ZERO_LEN, 0, 0);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(0, 0, ZERO_UID_GID, 0, 0);                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(1, 1, ONE_UID_GID, 1, 1);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(1000, 1000, ONE_THOUSAND_UID_GID, 1000, 1000);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(MAX, MAX, UNIX_MAX_UID_GID, MAX, MAX);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(-2, -2, UNIX_MAX_UID_GID, MAX, MAX);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(TWO_TO_32, TWO_TO_32 + 1, LENGTH_5, TWO_TO_32, TWO_TO_32 + 1);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(Long.MAX_VALUE - 1, Long.MAX_VALUE, LENGTH_8, Long.MAX_VALUE - 1, Long.MAX_VALUE);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // We never emit this, but we should be able to parse it:\n        final byte[] SPURIOUS_ZEROES_1 = {1, 4, -1, 0, 0, 0, 4, -128, 0, 0, 0};\n        final byte[] EXPECTED_1 = {1, 1, -1, 1, -128};\n        xf.parseFromLocalFileData(SPURIOUS_ZEROES_1, 0, SPURIOUS_ZEROES_1.length);\n\n        try{ assertEquals(255, xf.getUID());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(128, xf.getGID());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(Arrays.equals(EXPECTED_1, xf.getLocalFileDataData()));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        final byte[] SPURIOUS_ZEROES_2 = {1, 4, -1, -1, 0, 0, 4, 1, 2, 0, 0};\n        final byte[] EXPECTED_2 = {1, 2, -1, -1, 2, 1, 2};\n        xf.parseFromLocalFileData(SPURIOUS_ZEROES_2, 0, SPURIOUS_ZEROES_2.length);\n\n        try{ assertEquals(65535, xf.getUID());                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(513, xf.getGID());                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(Arrays.equals(EXPECTED_2, xf.getLocalFileDataData()));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void testParseReparse$catena_13() throws ZipException {\n\n        // Version=1, Len=0, Len=0.\n        final byte[] ZERO_LEN = {1, 0, 0};\n\n        // Version=1, Len=1, zero, Len=1, zero.\n        final byte[] ZERO_UID_GID = {1, 1, 0, 1, 0};\n\n        // Version=1, Len=1, one, Len=1, one\n        final byte[] ONE_UID_GID = {1, 1, 1, 1, 1};\n\n        // Version=1, Len=2, one thousand, Len=2, one thousand\n        final byte[] ONE_THOUSAND_UID_GID = {1, 2, -24, 3, 2, -24, 3};\n\n        // (2^32 - 2).   I guess they avoid (2^32 - 1) since it's identical to -1 in\n        // two's complement, and -1 often has a special meaning.\n        final byte[] UNIX_MAX_UID_GID = {1, 4, -2, -1, -1, -1, 4, -2, -1, -1, -1};\n\n        // Version=1, Len=5, 2^32, Len=5, 2^32 + 1\n        // Esoteric test:  can we handle 40 bit numbers?\n        final byte[] LENGTH_5 = {1, 5, 0, 0, 0, 0, 1, 5, 1, 0, 0, 0, 1};\n\n        // Version=1, Len=8, 2^63 - 2, Len=8, 2^63 - 1\n        // Esoteric test:  can we handle 64 bit numbers?\n        final byte[] LENGTH_8 = {1, 8, -2, -1, -1, -1, -1, -1, -1, 127, 8, -1, -1, -1, -1, -1, -1, -1, 127};\n\n        final long TWO_TO_32 = 0x100000000L;\n        final long MAX = TWO_TO_32 - 2;\n\n        try{ parseReparse(0, 0, ZERO_LEN, 0, 0);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(0, 0, ZERO_UID_GID, 0, 0);                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(1, 1, ONE_UID_GID, 1, 1);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(1000, 1000, ONE_THOUSAND_UID_GID, 1000, 1000);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(MAX, MAX, UNIX_MAX_UID_GID, MAX, MAX);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(-2, -2, UNIX_MAX_UID_GID, MAX, MAX);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(TWO_TO_32, TWO_TO_32 + 1, LENGTH_5, TWO_TO_32, TWO_TO_32 + 1);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ parseReparse(Long.MAX_VALUE - 1, Long.MAX_VALUE, LENGTH_8, Long.MAX_VALUE - 1, Long.MAX_VALUE);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // We never emit this, but we should be able to parse it:\n        final byte[] SPURIOUS_ZEROES_1 = {1, 4, -1, 0, 0, 0, 4, -128, 0, 0, 0};\n        final byte[] EXPECTED_1 = {1, 1, -1, 1, -128};\n        xf.parseFromLocalFileData(SPURIOUS_ZEROES_1, 0, SPURIOUS_ZEROES_1.length);\n\n        try{ assertEquals(255, xf.getUID());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(128, xf.getGID());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(Arrays.equals(EXPECTED_1, xf.getLocalFileDataData()));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        final byte[] SPURIOUS_ZEROES_2 = {1, 4, -1, -1, 0, 0, 4, 1, 2, 0, 0};\n        final byte[] EXPECTED_2 = {1, 2, -1, -1, 2, 1, 2};\n        xf.parseFromLocalFileData(SPURIOUS_ZEROES_2, 0, SPURIOUS_ZEROES_2.length);\n\n        try{ assertEquals(65535, xf.getUID());                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(513, xf.getGID());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(Arrays.equals(EXPECTED_2, xf.getLocalFileDataData()));                                       /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
        ]
    }
}