{
    "org.apache.commons.jxpath.ri.compiler.CoreFunctionTest::testCoreFunctions": {
        "begin_line_no": 63,
        "end_line_no": 129,
        "file_path": "src/test/org/apache/commons/jxpath/ri/compiler/CoreFunctionTest.java",
        "to": [
            "    public void testCoreFunctions$catena_56() {\n        try{ assertXPathValue(context, \"string(2)\", \"2\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string($nan)\", \"NaN\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-$nan)\", \"NaN\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-2 div 0)\", \"-Infinity\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(2 div 0)\", \"Infinity\");                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"concat('a', 'b', 'c')\", \"abc\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('abc', 'ab')\", Boolean.TRUE);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('xabc', 'ab')\", Boolean.FALSE);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ab')\", Boolean.TRUE);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ba')\", Boolean.FALSE);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-before('1999/04/01', '/')\",\n            \"1999\");                                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-after('1999/04/01', '/')\",\n            \"04/01\");                                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2, 3)\", \"234\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2)\", \"2345\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1.5, 2.6)\", \"234\");                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0, 3)\", \"12\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0 div 0, 3)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1, 0 div 0)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -42, 1 div 0)\", \"12345\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -1 div 0, 1 div 0)\", \"\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 6, 6)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7, 8)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7)\", \"\");                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string-length('12345')\", new Double(5));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space(' abc  def  ')\", \"abc def\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('abc def')\", \"abc def\");                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('   ')\", \"\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"translate('--aaa--', 'abc-', 'ABC')\", \"AAA\");                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(1)\", Boolean.TRUE);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(0)\", Boolean.FALSE);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('x')\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('')\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list)\", Boolean.TRUE);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list[position() < 1])\", Boolean.FALSE);                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"true()\", Boolean.TRUE);                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"false()\", Boolean.FALSE);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(false())\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(true())\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"null()\", null);                                             }catch(Throwable __SHOULD_BE_IGNORED){}        \n        try{ assertXPathValue(context, \"number('1')\", new Double(1));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_true)\", new Double(1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_false)\", new Double(0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(1.5)\", new Double(1));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-1.5)\", new Double(-2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(1.5)\", new Double(2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-1.5)\", new Double(-1));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(1.5)\", new Double(2));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-1.5)\", new Double(-1));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"floor('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling('NaN')\", new Double(Double.NaN));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(2 div 0)\", new Double(Double.POSITIVE_INFINITY));           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertXPathValue(context, \"round(2 div 0)\", new Double(Double.POSITIVE_INFINITY));                  /***** ORIGINAL ASSERTION IS HERE *****/\n    }",
            "    public void testCoreFunctions$catena_54() {\n        try{ assertXPathValue(context, \"string(2)\", \"2\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string($nan)\", \"NaN\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-$nan)\", \"NaN\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-2 div 0)\", \"-Infinity\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(2 div 0)\", \"Infinity\");                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"concat('a', 'b', 'c')\", \"abc\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('abc', 'ab')\", Boolean.TRUE);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('xabc', 'ab')\", Boolean.FALSE);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ab')\", Boolean.TRUE);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ba')\", Boolean.FALSE);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-before('1999/04/01', '/')\",\n            \"1999\");                                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-after('1999/04/01', '/')\",\n            \"04/01\");                                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2, 3)\", \"234\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2)\", \"2345\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1.5, 2.6)\", \"234\");                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0, 3)\", \"12\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0 div 0, 3)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1, 0 div 0)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -42, 1 div 0)\", \"12345\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -1 div 0, 1 div 0)\", \"\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 6, 6)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7, 8)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7)\", \"\");                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string-length('12345')\", new Double(5));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space(' abc  def  ')\", \"abc def\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('abc def')\", \"abc def\");                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('   ')\", \"\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"translate('--aaa--', 'abc-', 'ABC')\", \"AAA\");                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(1)\", Boolean.TRUE);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(0)\", Boolean.FALSE);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('x')\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('')\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list)\", Boolean.TRUE);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list[position() < 1])\", Boolean.FALSE);                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"true()\", Boolean.TRUE);                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"false()\", Boolean.FALSE);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(false())\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(true())\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"null()\", null);                                             }catch(Throwable __SHOULD_BE_IGNORED){}        \n        try{ assertXPathValue(context, \"number('1')\", new Double(1));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_true)\", new Double(1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_false)\", new Double(0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(1.5)\", new Double(1));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-1.5)\", new Double(-2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(1.5)\", new Double(2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-1.5)\", new Double(-1));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(1.5)\", new Double(2));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-1.5)\", new Double(-1));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"floor('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling('NaN')\", new Double(Double.NaN));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(2 div 0)\", new Double(Double.POSITIVE_INFINITY));           }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertXPathValue(context, \"round('NaN')\", new Double(Double.NaN));                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertXPathValue(context, \"round(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testCoreFunctions$catena_55() {\n        try{ assertXPathValue(context, \"string(2)\", \"2\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string($nan)\", \"NaN\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-$nan)\", \"NaN\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-2 div 0)\", \"-Infinity\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(2 div 0)\", \"Infinity\");                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"concat('a', 'b', 'c')\", \"abc\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('abc', 'ab')\", Boolean.TRUE);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('xabc', 'ab')\", Boolean.FALSE);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ab')\", Boolean.TRUE);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ba')\", Boolean.FALSE);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-before('1999/04/01', '/')\",\n            \"1999\");                                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-after('1999/04/01', '/')\",\n            \"04/01\");                                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2, 3)\", \"234\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2)\", \"2345\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1.5, 2.6)\", \"234\");                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0, 3)\", \"12\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0 div 0, 3)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1, 0 div 0)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -42, 1 div 0)\", \"12345\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -1 div 0, 1 div 0)\", \"\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 6, 6)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7, 8)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7)\", \"\");                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string-length('12345')\", new Double(5));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space(' abc  def  ')\", \"abc def\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('abc def')\", \"abc def\");                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('   ')\", \"\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"translate('--aaa--', 'abc-', 'ABC')\", \"AAA\");                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(1)\", Boolean.TRUE);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(0)\", Boolean.FALSE);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('x')\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('')\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list)\", Boolean.TRUE);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list[position() < 1])\", Boolean.FALSE);                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"true()\", Boolean.TRUE);                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"false()\", Boolean.FALSE);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(false())\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(true())\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"null()\", null);                                             }catch(Throwable __SHOULD_BE_IGNORED){}        \n        try{ assertXPathValue(context, \"number('1')\", new Double(1));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_true)\", new Double(1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_false)\", new Double(0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(1.5)\", new Double(1));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-1.5)\", new Double(-2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(1.5)\", new Double(2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-1.5)\", new Double(-1));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(1.5)\", new Double(2));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-1.5)\", new Double(-1));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"floor('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling('NaN')\", new Double(Double.NaN));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(2 div 0)\", new Double(Double.POSITIVE_INFINITY));           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertXPathValue(context, \"round(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertXPathValue(context, \"round(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testCoreFunctions$catena_0() {\n        assertXPathValue(context, \"string(2)\", \"2\");                                                        /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertXPathValue(context, \"string($nan)\", \"NaN\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-$nan)\", \"NaN\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-2 div 0)\", \"-Infinity\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(2 div 0)\", \"Infinity\");                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"concat('a', 'b', 'c')\", \"abc\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('abc', 'ab')\", Boolean.TRUE);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('xabc', 'ab')\", Boolean.FALSE);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ab')\", Boolean.TRUE);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ba')\", Boolean.FALSE);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-before('1999/04/01', '/')\",\n            \"1999\");                                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-after('1999/04/01', '/')\",\n            \"04/01\");                                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2, 3)\", \"234\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2)\", \"2345\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1.5, 2.6)\", \"234\");                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0, 3)\", \"12\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0 div 0, 3)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1, 0 div 0)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -42, 1 div 0)\", \"12345\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -1 div 0, 1 div 0)\", \"\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 6, 6)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7, 8)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7)\", \"\");                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string-length('12345')\", new Double(5));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space(' abc  def  ')\", \"abc def\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('abc def')\", \"abc def\");                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('   ')\", \"\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"translate('--aaa--', 'abc-', 'ABC')\", \"AAA\");                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(1)\", Boolean.TRUE);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(0)\", Boolean.FALSE);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('x')\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('')\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list)\", Boolean.TRUE);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list[position() < 1])\", Boolean.FALSE);                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"true()\", Boolean.TRUE);                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"false()\", Boolean.FALSE);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(false())\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(true())\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"null()\", null);                                             }catch(Throwable __SHOULD_BE_IGNORED){}        \n        try{ assertXPathValue(context, \"number('1')\", new Double(1));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_true)\", new Double(1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_false)\", new Double(0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(1.5)\", new Double(1));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-1.5)\", new Double(-2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(1.5)\", new Double(2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-1.5)\", new Double(-1));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(1.5)\", new Double(2));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-1.5)\", new Double(-1));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"floor('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling('NaN')\", new Double(Double.NaN));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(2 div 0)\", new Double(Double.POSITIVE_INFINITY));           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testCoreFunctions$catena_1() {\n        try{ assertXPathValue(context, \"string(2)\", \"2\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertXPathValue(context, \"string($nan)\", \"NaN\");                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertXPathValue(context, \"string(-$nan)\", \"NaN\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-2 div 0)\", \"-Infinity\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(2 div 0)\", \"Infinity\");                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"concat('a', 'b', 'c')\", \"abc\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('abc', 'ab')\", Boolean.TRUE);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('xabc', 'ab')\", Boolean.FALSE);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ab')\", Boolean.TRUE);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ba')\", Boolean.FALSE);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-before('1999/04/01', '/')\",\n            \"1999\");                                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-after('1999/04/01', '/')\",\n            \"04/01\");                                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2, 3)\", \"234\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2)\", \"2345\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1.5, 2.6)\", \"234\");                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0, 3)\", \"12\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0 div 0, 3)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1, 0 div 0)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -42, 1 div 0)\", \"12345\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -1 div 0, 1 div 0)\", \"\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 6, 6)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7, 8)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7)\", \"\");                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string-length('12345')\", new Double(5));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space(' abc  def  ')\", \"abc def\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('abc def')\", \"abc def\");                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('   ')\", \"\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"translate('--aaa--', 'abc-', 'ABC')\", \"AAA\");                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(1)\", Boolean.TRUE);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(0)\", Boolean.FALSE);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('x')\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('')\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list)\", Boolean.TRUE);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list[position() < 1])\", Boolean.FALSE);                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"true()\", Boolean.TRUE);                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"false()\", Boolean.FALSE);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(false())\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(true())\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"null()\", null);                                             }catch(Throwable __SHOULD_BE_IGNORED){}        \n        try{ assertXPathValue(context, \"number('1')\", new Double(1));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_true)\", new Double(1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_false)\", new Double(0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(1.5)\", new Double(1));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-1.5)\", new Double(-2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(1.5)\", new Double(2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-1.5)\", new Double(-1));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(1.5)\", new Double(2));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-1.5)\", new Double(-1));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"floor('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling('NaN')\", new Double(Double.NaN));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(2 div 0)\", new Double(Double.POSITIVE_INFINITY));           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testCoreFunctions$catena_2() {\n        try{ assertXPathValue(context, \"string(2)\", \"2\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string($nan)\", \"NaN\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertXPathValue(context, \"string(-$nan)\", \"NaN\");                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertXPathValue(context, \"string(-2 div 0)\", \"-Infinity\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(2 div 0)\", \"Infinity\");                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"concat('a', 'b', 'c')\", \"abc\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('abc', 'ab')\", Boolean.TRUE);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('xabc', 'ab')\", Boolean.FALSE);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ab')\", Boolean.TRUE);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ba')\", Boolean.FALSE);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-before('1999/04/01', '/')\",\n            \"1999\");                                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-after('1999/04/01', '/')\",\n            \"04/01\");                                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2, 3)\", \"234\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2)\", \"2345\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1.5, 2.6)\", \"234\");                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0, 3)\", \"12\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0 div 0, 3)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1, 0 div 0)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -42, 1 div 0)\", \"12345\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -1 div 0, 1 div 0)\", \"\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 6, 6)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7, 8)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7)\", \"\");                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string-length('12345')\", new Double(5));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space(' abc  def  ')\", \"abc def\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('abc def')\", \"abc def\");                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('   ')\", \"\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"translate('--aaa--', 'abc-', 'ABC')\", \"AAA\");                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(1)\", Boolean.TRUE);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(0)\", Boolean.FALSE);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('x')\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('')\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list)\", Boolean.TRUE);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list[position() < 1])\", Boolean.FALSE);                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"true()\", Boolean.TRUE);                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"false()\", Boolean.FALSE);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(false())\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(true())\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"null()\", null);                                             }catch(Throwable __SHOULD_BE_IGNORED){}        \n        try{ assertXPathValue(context, \"number('1')\", new Double(1));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_true)\", new Double(1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_false)\", new Double(0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(1.5)\", new Double(1));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-1.5)\", new Double(-2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(1.5)\", new Double(2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-1.5)\", new Double(-1));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(1.5)\", new Double(2));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-1.5)\", new Double(-1));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"floor('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling('NaN')\", new Double(Double.NaN));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(2 div 0)\", new Double(Double.POSITIVE_INFINITY));           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testCoreFunctions$catena_3() {\n        try{ assertXPathValue(context, \"string(2)\", \"2\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string($nan)\", \"NaN\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-$nan)\", \"NaN\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertXPathValue(context, \"string(-2 div 0)\", \"-Infinity\");                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertXPathValue(context, \"string(2 div 0)\", \"Infinity\");                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"concat('a', 'b', 'c')\", \"abc\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('abc', 'ab')\", Boolean.TRUE);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('xabc', 'ab')\", Boolean.FALSE);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ab')\", Boolean.TRUE);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ba')\", Boolean.FALSE);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-before('1999/04/01', '/')\",\n            \"1999\");                                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-after('1999/04/01', '/')\",\n            \"04/01\");                                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2, 3)\", \"234\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2)\", \"2345\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1.5, 2.6)\", \"234\");                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0, 3)\", \"12\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0 div 0, 3)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1, 0 div 0)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -42, 1 div 0)\", \"12345\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -1 div 0, 1 div 0)\", \"\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 6, 6)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7, 8)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7)\", \"\");                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string-length('12345')\", new Double(5));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space(' abc  def  ')\", \"abc def\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('abc def')\", \"abc def\");                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('   ')\", \"\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"translate('--aaa--', 'abc-', 'ABC')\", \"AAA\");                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(1)\", Boolean.TRUE);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(0)\", Boolean.FALSE);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('x')\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('')\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list)\", Boolean.TRUE);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list[position() < 1])\", Boolean.FALSE);                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"true()\", Boolean.TRUE);                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"false()\", Boolean.FALSE);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(false())\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(true())\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"null()\", null);                                             }catch(Throwable __SHOULD_BE_IGNORED){}        \n        try{ assertXPathValue(context, \"number('1')\", new Double(1));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_true)\", new Double(1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_false)\", new Double(0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(1.5)\", new Double(1));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-1.5)\", new Double(-2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(1.5)\", new Double(2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-1.5)\", new Double(-1));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(1.5)\", new Double(2));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-1.5)\", new Double(-1));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"floor('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling('NaN')\", new Double(Double.NaN));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(2 div 0)\", new Double(Double.POSITIVE_INFINITY));           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testCoreFunctions$catena_4() {\n        try{ assertXPathValue(context, \"string(2)\", \"2\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string($nan)\", \"NaN\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-$nan)\", \"NaN\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-2 div 0)\", \"-Infinity\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertXPathValue(context, \"string(2 div 0)\", \"Infinity\");                                           /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertXPathValue(context, \"concat('a', 'b', 'c')\", \"abc\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('abc', 'ab')\", Boolean.TRUE);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('xabc', 'ab')\", Boolean.FALSE);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ab')\", Boolean.TRUE);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ba')\", Boolean.FALSE);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-before('1999/04/01', '/')\",\n            \"1999\");                                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-after('1999/04/01', '/')\",\n            \"04/01\");                                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2, 3)\", \"234\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2)\", \"2345\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1.5, 2.6)\", \"234\");                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0, 3)\", \"12\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0 div 0, 3)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1, 0 div 0)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -42, 1 div 0)\", \"12345\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -1 div 0, 1 div 0)\", \"\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 6, 6)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7, 8)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7)\", \"\");                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string-length('12345')\", new Double(5));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space(' abc  def  ')\", \"abc def\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('abc def')\", \"abc def\");                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('   ')\", \"\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"translate('--aaa--', 'abc-', 'ABC')\", \"AAA\");                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(1)\", Boolean.TRUE);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(0)\", Boolean.FALSE);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('x')\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('')\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list)\", Boolean.TRUE);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list[position() < 1])\", Boolean.FALSE);                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"true()\", Boolean.TRUE);                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"false()\", Boolean.FALSE);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(false())\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(true())\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"null()\", null);                                             }catch(Throwable __SHOULD_BE_IGNORED){}        \n        try{ assertXPathValue(context, \"number('1')\", new Double(1));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_true)\", new Double(1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_false)\", new Double(0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(1.5)\", new Double(1));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-1.5)\", new Double(-2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(1.5)\", new Double(2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-1.5)\", new Double(-1));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(1.5)\", new Double(2));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-1.5)\", new Double(-1));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"floor('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling('NaN')\", new Double(Double.NaN));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(2 div 0)\", new Double(Double.POSITIVE_INFINITY));           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testCoreFunctions$catena_5() {\n        try{ assertXPathValue(context, \"string(2)\", \"2\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string($nan)\", \"NaN\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-$nan)\", \"NaN\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-2 div 0)\", \"-Infinity\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(2 div 0)\", \"Infinity\");                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertXPathValue(context, \"concat('a', 'b', 'c')\", \"abc\");                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertXPathValue(context, \"starts-with('abc', 'ab')\", Boolean.TRUE);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('xabc', 'ab')\", Boolean.FALSE);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ab')\", Boolean.TRUE);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ba')\", Boolean.FALSE);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-before('1999/04/01', '/')\",\n            \"1999\");                                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-after('1999/04/01', '/')\",\n            \"04/01\");                                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2, 3)\", \"234\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2)\", \"2345\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1.5, 2.6)\", \"234\");                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0, 3)\", \"12\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0 div 0, 3)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1, 0 div 0)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -42, 1 div 0)\", \"12345\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -1 div 0, 1 div 0)\", \"\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 6, 6)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7, 8)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7)\", \"\");                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string-length('12345')\", new Double(5));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space(' abc  def  ')\", \"abc def\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('abc def')\", \"abc def\");                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('   ')\", \"\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"translate('--aaa--', 'abc-', 'ABC')\", \"AAA\");                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(1)\", Boolean.TRUE);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(0)\", Boolean.FALSE);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('x')\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('')\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list)\", Boolean.TRUE);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list[position() < 1])\", Boolean.FALSE);                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"true()\", Boolean.TRUE);                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"false()\", Boolean.FALSE);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(false())\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(true())\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"null()\", null);                                             }catch(Throwable __SHOULD_BE_IGNORED){}        \n        try{ assertXPathValue(context, \"number('1')\", new Double(1));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_true)\", new Double(1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_false)\", new Double(0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(1.5)\", new Double(1));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-1.5)\", new Double(-2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(1.5)\", new Double(2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-1.5)\", new Double(-1));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(1.5)\", new Double(2));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-1.5)\", new Double(-1));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"floor('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling('NaN')\", new Double(Double.NaN));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(2 div 0)\", new Double(Double.POSITIVE_INFINITY));           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testCoreFunctions$catena_6() {\n        try{ assertXPathValue(context, \"string(2)\", \"2\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string($nan)\", \"NaN\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-$nan)\", \"NaN\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-2 div 0)\", \"-Infinity\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(2 div 0)\", \"Infinity\");                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"concat('a', 'b', 'c')\", \"abc\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertXPathValue(context, \"starts-with('abc', 'ab')\", Boolean.TRUE);                                /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertXPathValue(context, \"starts-with('xabc', 'ab')\", Boolean.FALSE);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ab')\", Boolean.TRUE);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ba')\", Boolean.FALSE);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-before('1999/04/01', '/')\",\n            \"1999\");                                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-after('1999/04/01', '/')\",\n            \"04/01\");                                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2, 3)\", \"234\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2)\", \"2345\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1.5, 2.6)\", \"234\");                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0, 3)\", \"12\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0 div 0, 3)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1, 0 div 0)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -42, 1 div 0)\", \"12345\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -1 div 0, 1 div 0)\", \"\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 6, 6)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7, 8)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7)\", \"\");                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string-length('12345')\", new Double(5));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space(' abc  def  ')\", \"abc def\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('abc def')\", \"abc def\");                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('   ')\", \"\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"translate('--aaa--', 'abc-', 'ABC')\", \"AAA\");                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(1)\", Boolean.TRUE);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(0)\", Boolean.FALSE);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('x')\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('')\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list)\", Boolean.TRUE);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list[position() < 1])\", Boolean.FALSE);                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"true()\", Boolean.TRUE);                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"false()\", Boolean.FALSE);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(false())\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(true())\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"null()\", null);                                             }catch(Throwable __SHOULD_BE_IGNORED){}        \n        try{ assertXPathValue(context, \"number('1')\", new Double(1));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_true)\", new Double(1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_false)\", new Double(0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(1.5)\", new Double(1));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-1.5)\", new Double(-2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(1.5)\", new Double(2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-1.5)\", new Double(-1));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(1.5)\", new Double(2));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-1.5)\", new Double(-1));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"floor('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling('NaN')\", new Double(Double.NaN));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(2 div 0)\", new Double(Double.POSITIVE_INFINITY));           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testCoreFunctions$catena_7() {\n        try{ assertXPathValue(context, \"string(2)\", \"2\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string($nan)\", \"NaN\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-$nan)\", \"NaN\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-2 div 0)\", \"-Infinity\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(2 div 0)\", \"Infinity\");                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"concat('a', 'b', 'c')\", \"abc\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('abc', 'ab')\", Boolean.TRUE);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertXPathValue(context, \"starts-with('xabc', 'ab')\", Boolean.FALSE);                              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertXPathValue(context, \"contains('xabc', 'ab')\", Boolean.TRUE);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ba')\", Boolean.FALSE);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-before('1999/04/01', '/')\",\n            \"1999\");                                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-after('1999/04/01', '/')\",\n            \"04/01\");                                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2, 3)\", \"234\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2)\", \"2345\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1.5, 2.6)\", \"234\");                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0, 3)\", \"12\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0 div 0, 3)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1, 0 div 0)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -42, 1 div 0)\", \"12345\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -1 div 0, 1 div 0)\", \"\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 6, 6)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7, 8)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7)\", \"\");                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string-length('12345')\", new Double(5));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space(' abc  def  ')\", \"abc def\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('abc def')\", \"abc def\");                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('   ')\", \"\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"translate('--aaa--', 'abc-', 'ABC')\", \"AAA\");                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(1)\", Boolean.TRUE);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(0)\", Boolean.FALSE);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('x')\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('')\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list)\", Boolean.TRUE);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list[position() < 1])\", Boolean.FALSE);                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"true()\", Boolean.TRUE);                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"false()\", Boolean.FALSE);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(false())\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(true())\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"null()\", null);                                             }catch(Throwable __SHOULD_BE_IGNORED){}        \n        try{ assertXPathValue(context, \"number('1')\", new Double(1));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_true)\", new Double(1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_false)\", new Double(0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(1.5)\", new Double(1));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-1.5)\", new Double(-2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(1.5)\", new Double(2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-1.5)\", new Double(-1));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(1.5)\", new Double(2));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-1.5)\", new Double(-1));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"floor('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling('NaN')\", new Double(Double.NaN));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(2 div 0)\", new Double(Double.POSITIVE_INFINITY));           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testCoreFunctions$catena_8() {\n        try{ assertXPathValue(context, \"string(2)\", \"2\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string($nan)\", \"NaN\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-$nan)\", \"NaN\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-2 div 0)\", \"-Infinity\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(2 div 0)\", \"Infinity\");                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"concat('a', 'b', 'c')\", \"abc\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('abc', 'ab')\", Boolean.TRUE);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('xabc', 'ab')\", Boolean.FALSE);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertXPathValue(context, \"contains('xabc', 'ab')\", Boolean.TRUE);                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertXPathValue(context, \"contains('xabc', 'ba')\", Boolean.FALSE);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-before('1999/04/01', '/')\",\n            \"1999\");                                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-after('1999/04/01', '/')\",\n            \"04/01\");                                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2, 3)\", \"234\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2)\", \"2345\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1.5, 2.6)\", \"234\");                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0, 3)\", \"12\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0 div 0, 3)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1, 0 div 0)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -42, 1 div 0)\", \"12345\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -1 div 0, 1 div 0)\", \"\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 6, 6)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7, 8)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7)\", \"\");                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string-length('12345')\", new Double(5));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space(' abc  def  ')\", \"abc def\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('abc def')\", \"abc def\");                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('   ')\", \"\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"translate('--aaa--', 'abc-', 'ABC')\", \"AAA\");                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(1)\", Boolean.TRUE);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(0)\", Boolean.FALSE);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('x')\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('')\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list)\", Boolean.TRUE);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list[position() < 1])\", Boolean.FALSE);                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"true()\", Boolean.TRUE);                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"false()\", Boolean.FALSE);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(false())\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(true())\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"null()\", null);                                             }catch(Throwable __SHOULD_BE_IGNORED){}        \n        try{ assertXPathValue(context, \"number('1')\", new Double(1));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_true)\", new Double(1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_false)\", new Double(0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(1.5)\", new Double(1));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-1.5)\", new Double(-2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(1.5)\", new Double(2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-1.5)\", new Double(-1));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(1.5)\", new Double(2));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-1.5)\", new Double(-1));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"floor('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling('NaN')\", new Double(Double.NaN));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(2 div 0)\", new Double(Double.POSITIVE_INFINITY));           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testCoreFunctions$catena_9() {\n        try{ assertXPathValue(context, \"string(2)\", \"2\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string($nan)\", \"NaN\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-$nan)\", \"NaN\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-2 div 0)\", \"-Infinity\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(2 div 0)\", \"Infinity\");                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"concat('a', 'b', 'c')\", \"abc\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('abc', 'ab')\", Boolean.TRUE);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('xabc', 'ab')\", Boolean.FALSE);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ab')\", Boolean.TRUE);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertXPathValue(context, \"contains('xabc', 'ba')\", Boolean.FALSE);                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertXPathValue(\n            context,\n            \"substring-before('1999/04/01', '/')\",\n            \"1999\");                                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-after('1999/04/01', '/')\",\n            \"04/01\");                                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2, 3)\", \"234\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2)\", \"2345\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1.5, 2.6)\", \"234\");                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0, 3)\", \"12\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0 div 0, 3)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1, 0 div 0)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -42, 1 div 0)\", \"12345\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -1 div 0, 1 div 0)\", \"\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 6, 6)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7, 8)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7)\", \"\");                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string-length('12345')\", new Double(5));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space(' abc  def  ')\", \"abc def\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('abc def')\", \"abc def\");                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('   ')\", \"\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"translate('--aaa--', 'abc-', 'ABC')\", \"AAA\");                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(1)\", Boolean.TRUE);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(0)\", Boolean.FALSE);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('x')\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('')\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list)\", Boolean.TRUE);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list[position() < 1])\", Boolean.FALSE);                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"true()\", Boolean.TRUE);                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"false()\", Boolean.FALSE);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(false())\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(true())\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"null()\", null);                                             }catch(Throwable __SHOULD_BE_IGNORED){}        \n        try{ assertXPathValue(context, \"number('1')\", new Double(1));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_true)\", new Double(1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_false)\", new Double(0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(1.5)\", new Double(1));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-1.5)\", new Double(-2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(1.5)\", new Double(2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-1.5)\", new Double(-1));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(1.5)\", new Double(2));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-1.5)\", new Double(-1));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"floor('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling('NaN')\", new Double(Double.NaN));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(2 div 0)\", new Double(Double.POSITIVE_INFINITY));           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testCoreFunctions$catena_10() {\n        try{ assertXPathValue(context, \"string(2)\", \"2\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string($nan)\", \"NaN\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-$nan)\", \"NaN\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-2 div 0)\", \"-Infinity\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(2 div 0)\", \"Infinity\");                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"concat('a', 'b', 'c')\", \"abc\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('abc', 'ab')\", Boolean.TRUE);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('xabc', 'ab')\", Boolean.FALSE);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ab')\", Boolean.TRUE);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ba')\", Boolean.FALSE);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertXPathValue(\n            context,\n            \"substring-before('1999/04/01', '/')\",\n            \"1999\");                                                                                        /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertXPathValue(\n            context,\n            \"substring-after('1999/04/01', '/')\",\n            \"04/01\");                                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2, 3)\", \"234\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2)\", \"2345\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1.5, 2.6)\", \"234\");                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0, 3)\", \"12\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0 div 0, 3)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1, 0 div 0)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -42, 1 div 0)\", \"12345\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -1 div 0, 1 div 0)\", \"\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 6, 6)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7, 8)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7)\", \"\");                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string-length('12345')\", new Double(5));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space(' abc  def  ')\", \"abc def\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('abc def')\", \"abc def\");                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('   ')\", \"\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"translate('--aaa--', 'abc-', 'ABC')\", \"AAA\");                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(1)\", Boolean.TRUE);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(0)\", Boolean.FALSE);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('x')\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('')\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list)\", Boolean.TRUE);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list[position() < 1])\", Boolean.FALSE);                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"true()\", Boolean.TRUE);                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"false()\", Boolean.FALSE);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(false())\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(true())\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"null()\", null);                                             }catch(Throwable __SHOULD_BE_IGNORED){}        \n        try{ assertXPathValue(context, \"number('1')\", new Double(1));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_true)\", new Double(1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_false)\", new Double(0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(1.5)\", new Double(1));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-1.5)\", new Double(-2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(1.5)\", new Double(2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-1.5)\", new Double(-1));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(1.5)\", new Double(2));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-1.5)\", new Double(-1));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"floor('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling('NaN')\", new Double(Double.NaN));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(2 div 0)\", new Double(Double.POSITIVE_INFINITY));           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testCoreFunctions$catena_11() {\n        try{ assertXPathValue(context, \"string(2)\", \"2\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string($nan)\", \"NaN\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-$nan)\", \"NaN\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-2 div 0)\", \"-Infinity\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(2 div 0)\", \"Infinity\");                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"concat('a', 'b', 'c')\", \"abc\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('abc', 'ab')\", Boolean.TRUE);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('xabc', 'ab')\", Boolean.FALSE);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ab')\", Boolean.TRUE);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ba')\", Boolean.FALSE);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-before('1999/04/01', '/')\",\n            \"1999\");                                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertXPathValue(\n            context,\n            \"substring-after('1999/04/01', '/')\",\n            \"04/01\");                                                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertXPathValue(context, \"substring('12345', 2, 3)\", \"234\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2)\", \"2345\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1.5, 2.6)\", \"234\");                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0, 3)\", \"12\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0 div 0, 3)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1, 0 div 0)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -42, 1 div 0)\", \"12345\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -1 div 0, 1 div 0)\", \"\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 6, 6)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7, 8)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7)\", \"\");                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string-length('12345')\", new Double(5));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space(' abc  def  ')\", \"abc def\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('abc def')\", \"abc def\");                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('   ')\", \"\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"translate('--aaa--', 'abc-', 'ABC')\", \"AAA\");                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(1)\", Boolean.TRUE);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(0)\", Boolean.FALSE);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('x')\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('')\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list)\", Boolean.TRUE);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list[position() < 1])\", Boolean.FALSE);                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"true()\", Boolean.TRUE);                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"false()\", Boolean.FALSE);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(false())\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(true())\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"null()\", null);                                             }catch(Throwable __SHOULD_BE_IGNORED){}        \n        try{ assertXPathValue(context, \"number('1')\", new Double(1));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_true)\", new Double(1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_false)\", new Double(0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(1.5)\", new Double(1));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-1.5)\", new Double(-2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(1.5)\", new Double(2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-1.5)\", new Double(-1));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(1.5)\", new Double(2));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-1.5)\", new Double(-1));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"floor('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling('NaN')\", new Double(Double.NaN));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(2 div 0)\", new Double(Double.POSITIVE_INFINITY));           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testCoreFunctions$catena_12() {\n        try{ assertXPathValue(context, \"string(2)\", \"2\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string($nan)\", \"NaN\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-$nan)\", \"NaN\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-2 div 0)\", \"-Infinity\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(2 div 0)\", \"Infinity\");                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"concat('a', 'b', 'c')\", \"abc\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('abc', 'ab')\", Boolean.TRUE);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('xabc', 'ab')\", Boolean.FALSE);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ab')\", Boolean.TRUE);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ba')\", Boolean.FALSE);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-before('1999/04/01', '/')\",\n            \"1999\");                                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-after('1999/04/01', '/')\",\n            \"04/01\");                                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertXPathValue(context, \"substring('12345', 2, 3)\", \"234\");                                       /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertXPathValue(context, \"substring('12345', 2)\", \"2345\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1.5, 2.6)\", \"234\");                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0, 3)\", \"12\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0 div 0, 3)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1, 0 div 0)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -42, 1 div 0)\", \"12345\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -1 div 0, 1 div 0)\", \"\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 6, 6)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7, 8)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7)\", \"\");                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string-length('12345')\", new Double(5));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space(' abc  def  ')\", \"abc def\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('abc def')\", \"abc def\");                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('   ')\", \"\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"translate('--aaa--', 'abc-', 'ABC')\", \"AAA\");                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(1)\", Boolean.TRUE);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(0)\", Boolean.FALSE);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('x')\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('')\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list)\", Boolean.TRUE);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list[position() < 1])\", Boolean.FALSE);                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"true()\", Boolean.TRUE);                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"false()\", Boolean.FALSE);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(false())\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(true())\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"null()\", null);                                             }catch(Throwable __SHOULD_BE_IGNORED){}        \n        try{ assertXPathValue(context, \"number('1')\", new Double(1));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_true)\", new Double(1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_false)\", new Double(0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(1.5)\", new Double(1));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-1.5)\", new Double(-2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(1.5)\", new Double(2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-1.5)\", new Double(-1));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(1.5)\", new Double(2));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-1.5)\", new Double(-1));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"floor('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling('NaN')\", new Double(Double.NaN));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(2 div 0)\", new Double(Double.POSITIVE_INFINITY));           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testCoreFunctions$catena_13() {\n        try{ assertXPathValue(context, \"string(2)\", \"2\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string($nan)\", \"NaN\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-$nan)\", \"NaN\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-2 div 0)\", \"-Infinity\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(2 div 0)\", \"Infinity\");                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"concat('a', 'b', 'c')\", \"abc\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('abc', 'ab')\", Boolean.TRUE);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('xabc', 'ab')\", Boolean.FALSE);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ab')\", Boolean.TRUE);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ba')\", Boolean.FALSE);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-before('1999/04/01', '/')\",\n            \"1999\");                                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-after('1999/04/01', '/')\",\n            \"04/01\");                                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2, 3)\", \"234\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertXPathValue(context, \"substring('12345', 2)\", \"2345\");                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertXPathValue(context, \"substring('12345', 1.5, 2.6)\", \"234\");                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0, 3)\", \"12\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0 div 0, 3)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1, 0 div 0)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -42, 1 div 0)\", \"12345\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -1 div 0, 1 div 0)\", \"\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 6, 6)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7, 8)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7)\", \"\");                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string-length('12345')\", new Double(5));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space(' abc  def  ')\", \"abc def\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('abc def')\", \"abc def\");                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('   ')\", \"\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"translate('--aaa--', 'abc-', 'ABC')\", \"AAA\");                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(1)\", Boolean.TRUE);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(0)\", Boolean.FALSE);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('x')\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('')\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list)\", Boolean.TRUE);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list[position() < 1])\", Boolean.FALSE);                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"true()\", Boolean.TRUE);                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"false()\", Boolean.FALSE);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(false())\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(true())\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"null()\", null);                                             }catch(Throwable __SHOULD_BE_IGNORED){}        \n        try{ assertXPathValue(context, \"number('1')\", new Double(1));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_true)\", new Double(1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_false)\", new Double(0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(1.5)\", new Double(1));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-1.5)\", new Double(-2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(1.5)\", new Double(2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-1.5)\", new Double(-1));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(1.5)\", new Double(2));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-1.5)\", new Double(-1));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"floor('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling('NaN')\", new Double(Double.NaN));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(2 div 0)\", new Double(Double.POSITIVE_INFINITY));           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testCoreFunctions$catena_14() {\n        try{ assertXPathValue(context, \"string(2)\", \"2\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string($nan)\", \"NaN\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-$nan)\", \"NaN\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-2 div 0)\", \"-Infinity\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(2 div 0)\", \"Infinity\");                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"concat('a', 'b', 'c')\", \"abc\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('abc', 'ab')\", Boolean.TRUE);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('xabc', 'ab')\", Boolean.FALSE);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ab')\", Boolean.TRUE);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ba')\", Boolean.FALSE);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-before('1999/04/01', '/')\",\n            \"1999\");                                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-after('1999/04/01', '/')\",\n            \"04/01\");                                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2, 3)\", \"234\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2)\", \"2345\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertXPathValue(context, \"substring('12345', 1.5, 2.6)\", \"234\");                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertXPathValue(context, \"substring('12345', 0, 3)\", \"12\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0 div 0, 3)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1, 0 div 0)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -42, 1 div 0)\", \"12345\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -1 div 0, 1 div 0)\", \"\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 6, 6)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7, 8)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7)\", \"\");                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string-length('12345')\", new Double(5));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space(' abc  def  ')\", \"abc def\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('abc def')\", \"abc def\");                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('   ')\", \"\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"translate('--aaa--', 'abc-', 'ABC')\", \"AAA\");                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(1)\", Boolean.TRUE);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(0)\", Boolean.FALSE);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('x')\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('')\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list)\", Boolean.TRUE);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list[position() < 1])\", Boolean.FALSE);                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"true()\", Boolean.TRUE);                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"false()\", Boolean.FALSE);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(false())\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(true())\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"null()\", null);                                             }catch(Throwable __SHOULD_BE_IGNORED){}        \n        try{ assertXPathValue(context, \"number('1')\", new Double(1));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_true)\", new Double(1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_false)\", new Double(0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(1.5)\", new Double(1));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-1.5)\", new Double(-2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(1.5)\", new Double(2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-1.5)\", new Double(-1));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(1.5)\", new Double(2));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-1.5)\", new Double(-1));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"floor('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling('NaN')\", new Double(Double.NaN));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(2 div 0)\", new Double(Double.POSITIVE_INFINITY));           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testCoreFunctions$catena_15() {\n        try{ assertXPathValue(context, \"string(2)\", \"2\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string($nan)\", \"NaN\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-$nan)\", \"NaN\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-2 div 0)\", \"-Infinity\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(2 div 0)\", \"Infinity\");                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"concat('a', 'b', 'c')\", \"abc\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('abc', 'ab')\", Boolean.TRUE);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('xabc', 'ab')\", Boolean.FALSE);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ab')\", Boolean.TRUE);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ba')\", Boolean.FALSE);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-before('1999/04/01', '/')\",\n            \"1999\");                                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-after('1999/04/01', '/')\",\n            \"04/01\");                                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2, 3)\", \"234\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2)\", \"2345\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1.5, 2.6)\", \"234\");                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertXPathValue(context, \"substring('12345', 0, 3)\", \"12\");                                        /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertXPathValue(context, \"substring('12345', 0 div 0, 3)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1, 0 div 0)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -42, 1 div 0)\", \"12345\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -1 div 0, 1 div 0)\", \"\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 6, 6)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7, 8)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7)\", \"\");                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string-length('12345')\", new Double(5));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space(' abc  def  ')\", \"abc def\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('abc def')\", \"abc def\");                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('   ')\", \"\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"translate('--aaa--', 'abc-', 'ABC')\", \"AAA\");                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(1)\", Boolean.TRUE);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(0)\", Boolean.FALSE);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('x')\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('')\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list)\", Boolean.TRUE);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list[position() < 1])\", Boolean.FALSE);                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"true()\", Boolean.TRUE);                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"false()\", Boolean.FALSE);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(false())\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(true())\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"null()\", null);                                             }catch(Throwable __SHOULD_BE_IGNORED){}        \n        try{ assertXPathValue(context, \"number('1')\", new Double(1));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_true)\", new Double(1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_false)\", new Double(0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(1.5)\", new Double(1));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-1.5)\", new Double(-2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(1.5)\", new Double(2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-1.5)\", new Double(-1));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(1.5)\", new Double(2));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-1.5)\", new Double(-1));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"floor('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling('NaN')\", new Double(Double.NaN));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(2 div 0)\", new Double(Double.POSITIVE_INFINITY));           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testCoreFunctions$catena_16() {\n        try{ assertXPathValue(context, \"string(2)\", \"2\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string($nan)\", \"NaN\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-$nan)\", \"NaN\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-2 div 0)\", \"-Infinity\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(2 div 0)\", \"Infinity\");                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"concat('a', 'b', 'c')\", \"abc\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('abc', 'ab')\", Boolean.TRUE);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('xabc', 'ab')\", Boolean.FALSE);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ab')\", Boolean.TRUE);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ba')\", Boolean.FALSE);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-before('1999/04/01', '/')\",\n            \"1999\");                                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-after('1999/04/01', '/')\",\n            \"04/01\");                                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2, 3)\", \"234\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2)\", \"2345\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1.5, 2.6)\", \"234\");                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0, 3)\", \"12\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertXPathValue(context, \"substring('12345', 0 div 0, 3)\", \"\");                                    /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertXPathValue(context, \"substring('12345', 1, 0 div 0)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -42, 1 div 0)\", \"12345\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -1 div 0, 1 div 0)\", \"\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 6, 6)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7, 8)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7)\", \"\");                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string-length('12345')\", new Double(5));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space(' abc  def  ')\", \"abc def\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('abc def')\", \"abc def\");                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('   ')\", \"\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"translate('--aaa--', 'abc-', 'ABC')\", \"AAA\");                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(1)\", Boolean.TRUE);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(0)\", Boolean.FALSE);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('x')\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('')\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list)\", Boolean.TRUE);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list[position() < 1])\", Boolean.FALSE);                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"true()\", Boolean.TRUE);                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"false()\", Boolean.FALSE);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(false())\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(true())\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"null()\", null);                                             }catch(Throwable __SHOULD_BE_IGNORED){}        \n        try{ assertXPathValue(context, \"number('1')\", new Double(1));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_true)\", new Double(1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_false)\", new Double(0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(1.5)\", new Double(1));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-1.5)\", new Double(-2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(1.5)\", new Double(2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-1.5)\", new Double(-1));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(1.5)\", new Double(2));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-1.5)\", new Double(-1));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"floor('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling('NaN')\", new Double(Double.NaN));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(2 div 0)\", new Double(Double.POSITIVE_INFINITY));           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testCoreFunctions$catena_17() {\n        try{ assertXPathValue(context, \"string(2)\", \"2\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string($nan)\", \"NaN\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-$nan)\", \"NaN\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-2 div 0)\", \"-Infinity\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(2 div 0)\", \"Infinity\");                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"concat('a', 'b', 'c')\", \"abc\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('abc', 'ab')\", Boolean.TRUE);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('xabc', 'ab')\", Boolean.FALSE);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ab')\", Boolean.TRUE);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ba')\", Boolean.FALSE);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-before('1999/04/01', '/')\",\n            \"1999\");                                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-after('1999/04/01', '/')\",\n            \"04/01\");                                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2, 3)\", \"234\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2)\", \"2345\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1.5, 2.6)\", \"234\");                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0, 3)\", \"12\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0 div 0, 3)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertXPathValue(context, \"substring('12345', 1, 0 div 0)\", \"\");                                    /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertXPathValue(context, \"substring('12345', -42, 1 div 0)\", \"12345\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -1 div 0, 1 div 0)\", \"\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 6, 6)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7, 8)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7)\", \"\");                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string-length('12345')\", new Double(5));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space(' abc  def  ')\", \"abc def\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('abc def')\", \"abc def\");                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('   ')\", \"\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"translate('--aaa--', 'abc-', 'ABC')\", \"AAA\");                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(1)\", Boolean.TRUE);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(0)\", Boolean.FALSE);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('x')\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('')\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list)\", Boolean.TRUE);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list[position() < 1])\", Boolean.FALSE);                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"true()\", Boolean.TRUE);                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"false()\", Boolean.FALSE);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(false())\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(true())\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"null()\", null);                                             }catch(Throwable __SHOULD_BE_IGNORED){}        \n        try{ assertXPathValue(context, \"number('1')\", new Double(1));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_true)\", new Double(1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_false)\", new Double(0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(1.5)\", new Double(1));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-1.5)\", new Double(-2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(1.5)\", new Double(2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-1.5)\", new Double(-1));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(1.5)\", new Double(2));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-1.5)\", new Double(-1));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"floor('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling('NaN')\", new Double(Double.NaN));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(2 div 0)\", new Double(Double.POSITIVE_INFINITY));           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testCoreFunctions$catena_18() {\n        try{ assertXPathValue(context, \"string(2)\", \"2\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string($nan)\", \"NaN\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-$nan)\", \"NaN\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-2 div 0)\", \"-Infinity\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(2 div 0)\", \"Infinity\");                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"concat('a', 'b', 'c')\", \"abc\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('abc', 'ab')\", Boolean.TRUE);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('xabc', 'ab')\", Boolean.FALSE);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ab')\", Boolean.TRUE);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ba')\", Boolean.FALSE);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-before('1999/04/01', '/')\",\n            \"1999\");                                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-after('1999/04/01', '/')\",\n            \"04/01\");                                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2, 3)\", \"234\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2)\", \"2345\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1.5, 2.6)\", \"234\");                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0, 3)\", \"12\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0 div 0, 3)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1, 0 div 0)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertXPathValue(context, \"substring('12345', -42, 1 div 0)\", \"12345\");                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertXPathValue(context, \"substring('12345', -1 div 0, 1 div 0)\", \"\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 6, 6)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7, 8)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7)\", \"\");                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string-length('12345')\", new Double(5));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space(' abc  def  ')\", \"abc def\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('abc def')\", \"abc def\");                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('   ')\", \"\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"translate('--aaa--', 'abc-', 'ABC')\", \"AAA\");                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(1)\", Boolean.TRUE);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(0)\", Boolean.FALSE);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('x')\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('')\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list)\", Boolean.TRUE);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list[position() < 1])\", Boolean.FALSE);                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"true()\", Boolean.TRUE);                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"false()\", Boolean.FALSE);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(false())\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(true())\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"null()\", null);                                             }catch(Throwable __SHOULD_BE_IGNORED){}        \n        try{ assertXPathValue(context, \"number('1')\", new Double(1));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_true)\", new Double(1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_false)\", new Double(0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(1.5)\", new Double(1));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-1.5)\", new Double(-2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(1.5)\", new Double(2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-1.5)\", new Double(-1));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(1.5)\", new Double(2));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-1.5)\", new Double(-1));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"floor('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling('NaN')\", new Double(Double.NaN));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(2 div 0)\", new Double(Double.POSITIVE_INFINITY));           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testCoreFunctions$catena_19() {\n        try{ assertXPathValue(context, \"string(2)\", \"2\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string($nan)\", \"NaN\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-$nan)\", \"NaN\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-2 div 0)\", \"-Infinity\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(2 div 0)\", \"Infinity\");                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"concat('a', 'b', 'c')\", \"abc\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('abc', 'ab')\", Boolean.TRUE);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('xabc', 'ab')\", Boolean.FALSE);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ab')\", Boolean.TRUE);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ba')\", Boolean.FALSE);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-before('1999/04/01', '/')\",\n            \"1999\");                                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-after('1999/04/01', '/')\",\n            \"04/01\");                                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2, 3)\", \"234\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2)\", \"2345\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1.5, 2.6)\", \"234\");                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0, 3)\", \"12\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0 div 0, 3)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1, 0 div 0)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -42, 1 div 0)\", \"12345\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertXPathValue(context, \"substring('12345', -1 div 0, 1 div 0)\", \"\");                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertXPathValue(context, \"substring('12345', 6, 6)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7, 8)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7)\", \"\");                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string-length('12345')\", new Double(5));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space(' abc  def  ')\", \"abc def\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('abc def')\", \"abc def\");                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('   ')\", \"\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"translate('--aaa--', 'abc-', 'ABC')\", \"AAA\");                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(1)\", Boolean.TRUE);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(0)\", Boolean.FALSE);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('x')\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('')\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list)\", Boolean.TRUE);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list[position() < 1])\", Boolean.FALSE);                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"true()\", Boolean.TRUE);                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"false()\", Boolean.FALSE);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(false())\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(true())\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"null()\", null);                                             }catch(Throwable __SHOULD_BE_IGNORED){}        \n        try{ assertXPathValue(context, \"number('1')\", new Double(1));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_true)\", new Double(1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_false)\", new Double(0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(1.5)\", new Double(1));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-1.5)\", new Double(-2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(1.5)\", new Double(2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-1.5)\", new Double(-1));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(1.5)\", new Double(2));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-1.5)\", new Double(-1));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"floor('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling('NaN')\", new Double(Double.NaN));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(2 div 0)\", new Double(Double.POSITIVE_INFINITY));           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testCoreFunctions$catena_20() {\n        try{ assertXPathValue(context, \"string(2)\", \"2\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string($nan)\", \"NaN\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-$nan)\", \"NaN\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-2 div 0)\", \"-Infinity\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(2 div 0)\", \"Infinity\");                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"concat('a', 'b', 'c')\", \"abc\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('abc', 'ab')\", Boolean.TRUE);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('xabc', 'ab')\", Boolean.FALSE);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ab')\", Boolean.TRUE);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ba')\", Boolean.FALSE);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-before('1999/04/01', '/')\",\n            \"1999\");                                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-after('1999/04/01', '/')\",\n            \"04/01\");                                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2, 3)\", \"234\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2)\", \"2345\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1.5, 2.6)\", \"234\");                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0, 3)\", \"12\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0 div 0, 3)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1, 0 div 0)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -42, 1 div 0)\", \"12345\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -1 div 0, 1 div 0)\", \"\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertXPathValue(context, \"substring('12345', 6, 6)\", \"\");                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertXPathValue(context, \"substring('12345', 7, 8)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7)\", \"\");                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string-length('12345')\", new Double(5));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space(' abc  def  ')\", \"abc def\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('abc def')\", \"abc def\");                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('   ')\", \"\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"translate('--aaa--', 'abc-', 'ABC')\", \"AAA\");                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(1)\", Boolean.TRUE);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(0)\", Boolean.FALSE);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('x')\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('')\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list)\", Boolean.TRUE);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list[position() < 1])\", Boolean.FALSE);                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"true()\", Boolean.TRUE);                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"false()\", Boolean.FALSE);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(false())\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(true())\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"null()\", null);                                             }catch(Throwable __SHOULD_BE_IGNORED){}        \n        try{ assertXPathValue(context, \"number('1')\", new Double(1));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_true)\", new Double(1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_false)\", new Double(0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(1.5)\", new Double(1));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-1.5)\", new Double(-2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(1.5)\", new Double(2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-1.5)\", new Double(-1));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(1.5)\", new Double(2));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-1.5)\", new Double(-1));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"floor('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling('NaN')\", new Double(Double.NaN));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(2 div 0)\", new Double(Double.POSITIVE_INFINITY));           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testCoreFunctions$catena_21() {\n        try{ assertXPathValue(context, \"string(2)\", \"2\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string($nan)\", \"NaN\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-$nan)\", \"NaN\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-2 div 0)\", \"-Infinity\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(2 div 0)\", \"Infinity\");                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"concat('a', 'b', 'c')\", \"abc\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('abc', 'ab')\", Boolean.TRUE);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('xabc', 'ab')\", Boolean.FALSE);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ab')\", Boolean.TRUE);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ba')\", Boolean.FALSE);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-before('1999/04/01', '/')\",\n            \"1999\");                                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-after('1999/04/01', '/')\",\n            \"04/01\");                                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2, 3)\", \"234\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2)\", \"2345\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1.5, 2.6)\", \"234\");                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0, 3)\", \"12\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0 div 0, 3)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1, 0 div 0)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -42, 1 div 0)\", \"12345\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -1 div 0, 1 div 0)\", \"\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 6, 6)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertXPathValue(context, \"substring('12345', 7, 8)\", \"\");                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertXPathValue(context, \"substring('12345', 7)\", \"\");                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string-length('12345')\", new Double(5));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space(' abc  def  ')\", \"abc def\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('abc def')\", \"abc def\");                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('   ')\", \"\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"translate('--aaa--', 'abc-', 'ABC')\", \"AAA\");                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(1)\", Boolean.TRUE);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(0)\", Boolean.FALSE);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('x')\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('')\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list)\", Boolean.TRUE);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list[position() < 1])\", Boolean.FALSE);                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"true()\", Boolean.TRUE);                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"false()\", Boolean.FALSE);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(false())\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(true())\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"null()\", null);                                             }catch(Throwable __SHOULD_BE_IGNORED){}        \n        try{ assertXPathValue(context, \"number('1')\", new Double(1));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_true)\", new Double(1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_false)\", new Double(0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(1.5)\", new Double(1));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-1.5)\", new Double(-2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(1.5)\", new Double(2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-1.5)\", new Double(-1));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(1.5)\", new Double(2));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-1.5)\", new Double(-1));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"floor('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling('NaN')\", new Double(Double.NaN));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(2 div 0)\", new Double(Double.POSITIVE_INFINITY));           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testCoreFunctions$catena_22() {\n        try{ assertXPathValue(context, \"string(2)\", \"2\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string($nan)\", \"NaN\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-$nan)\", \"NaN\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-2 div 0)\", \"-Infinity\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(2 div 0)\", \"Infinity\");                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"concat('a', 'b', 'c')\", \"abc\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('abc', 'ab')\", Boolean.TRUE);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('xabc', 'ab')\", Boolean.FALSE);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ab')\", Boolean.TRUE);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ba')\", Boolean.FALSE);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-before('1999/04/01', '/')\",\n            \"1999\");                                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-after('1999/04/01', '/')\",\n            \"04/01\");                                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2, 3)\", \"234\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2)\", \"2345\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1.5, 2.6)\", \"234\");                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0, 3)\", \"12\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0 div 0, 3)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1, 0 div 0)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -42, 1 div 0)\", \"12345\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -1 div 0, 1 div 0)\", \"\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 6, 6)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7, 8)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertXPathValue(context, \"substring('12345', 7)\", \"\");                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertXPathValue(context, \"string-length('12345')\", new Double(5));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space(' abc  def  ')\", \"abc def\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('abc def')\", \"abc def\");                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('   ')\", \"\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"translate('--aaa--', 'abc-', 'ABC')\", \"AAA\");                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(1)\", Boolean.TRUE);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(0)\", Boolean.FALSE);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('x')\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('')\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list)\", Boolean.TRUE);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list[position() < 1])\", Boolean.FALSE);                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"true()\", Boolean.TRUE);                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"false()\", Boolean.FALSE);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(false())\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(true())\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"null()\", null);                                             }catch(Throwable __SHOULD_BE_IGNORED){}        \n        try{ assertXPathValue(context, \"number('1')\", new Double(1));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_true)\", new Double(1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_false)\", new Double(0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(1.5)\", new Double(1));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-1.5)\", new Double(-2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(1.5)\", new Double(2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-1.5)\", new Double(-1));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(1.5)\", new Double(2));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-1.5)\", new Double(-1));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"floor('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling('NaN')\", new Double(Double.NaN));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(2 div 0)\", new Double(Double.POSITIVE_INFINITY));           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testCoreFunctions$catena_23() {\n        try{ assertXPathValue(context, \"string(2)\", \"2\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string($nan)\", \"NaN\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-$nan)\", \"NaN\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-2 div 0)\", \"-Infinity\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(2 div 0)\", \"Infinity\");                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"concat('a', 'b', 'c')\", \"abc\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('abc', 'ab')\", Boolean.TRUE);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('xabc', 'ab')\", Boolean.FALSE);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ab')\", Boolean.TRUE);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ba')\", Boolean.FALSE);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-before('1999/04/01', '/')\",\n            \"1999\");                                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-after('1999/04/01', '/')\",\n            \"04/01\");                                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2, 3)\", \"234\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2)\", \"2345\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1.5, 2.6)\", \"234\");                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0, 3)\", \"12\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0 div 0, 3)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1, 0 div 0)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -42, 1 div 0)\", \"12345\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -1 div 0, 1 div 0)\", \"\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 6, 6)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7, 8)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7)\", \"\");                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertXPathValue(context, \"string-length('12345')\", new Double(5));                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertXPathValue(context, \"normalize-space(' abc  def  ')\", \"abc def\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('abc def')\", \"abc def\");                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('   ')\", \"\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"translate('--aaa--', 'abc-', 'ABC')\", \"AAA\");                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(1)\", Boolean.TRUE);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(0)\", Boolean.FALSE);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('x')\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('')\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list)\", Boolean.TRUE);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list[position() < 1])\", Boolean.FALSE);                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"true()\", Boolean.TRUE);                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"false()\", Boolean.FALSE);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(false())\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(true())\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"null()\", null);                                             }catch(Throwable __SHOULD_BE_IGNORED){}        \n        try{ assertXPathValue(context, \"number('1')\", new Double(1));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_true)\", new Double(1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_false)\", new Double(0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(1.5)\", new Double(1));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-1.5)\", new Double(-2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(1.5)\", new Double(2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-1.5)\", new Double(-1));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(1.5)\", new Double(2));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-1.5)\", new Double(-1));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"floor('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling('NaN')\", new Double(Double.NaN));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(2 div 0)\", new Double(Double.POSITIVE_INFINITY));           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testCoreFunctions$catena_24() {\n        try{ assertXPathValue(context, \"string(2)\", \"2\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string($nan)\", \"NaN\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-$nan)\", \"NaN\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-2 div 0)\", \"-Infinity\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(2 div 0)\", \"Infinity\");                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"concat('a', 'b', 'c')\", \"abc\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('abc', 'ab')\", Boolean.TRUE);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('xabc', 'ab')\", Boolean.FALSE);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ab')\", Boolean.TRUE);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ba')\", Boolean.FALSE);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-before('1999/04/01', '/')\",\n            \"1999\");                                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-after('1999/04/01', '/')\",\n            \"04/01\");                                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2, 3)\", \"234\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2)\", \"2345\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1.5, 2.6)\", \"234\");                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0, 3)\", \"12\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0 div 0, 3)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1, 0 div 0)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -42, 1 div 0)\", \"12345\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -1 div 0, 1 div 0)\", \"\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 6, 6)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7, 8)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7)\", \"\");                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string-length('12345')\", new Double(5));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertXPathValue(context, \"normalize-space(' abc  def  ')\", \"abc def\");                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertXPathValue(context, \"normalize-space('abc def')\", \"abc def\");                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('   ')\", \"\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"translate('--aaa--', 'abc-', 'ABC')\", \"AAA\");                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(1)\", Boolean.TRUE);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(0)\", Boolean.FALSE);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('x')\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('')\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list)\", Boolean.TRUE);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list[position() < 1])\", Boolean.FALSE);                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"true()\", Boolean.TRUE);                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"false()\", Boolean.FALSE);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(false())\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(true())\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"null()\", null);                                             }catch(Throwable __SHOULD_BE_IGNORED){}        \n        try{ assertXPathValue(context, \"number('1')\", new Double(1));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_true)\", new Double(1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_false)\", new Double(0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(1.5)\", new Double(1));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-1.5)\", new Double(-2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(1.5)\", new Double(2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-1.5)\", new Double(-1));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(1.5)\", new Double(2));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-1.5)\", new Double(-1));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"floor('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling('NaN')\", new Double(Double.NaN));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(2 div 0)\", new Double(Double.POSITIVE_INFINITY));           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testCoreFunctions$catena_25() {\n        try{ assertXPathValue(context, \"string(2)\", \"2\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string($nan)\", \"NaN\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-$nan)\", \"NaN\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-2 div 0)\", \"-Infinity\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(2 div 0)\", \"Infinity\");                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"concat('a', 'b', 'c')\", \"abc\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('abc', 'ab')\", Boolean.TRUE);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('xabc', 'ab')\", Boolean.FALSE);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ab')\", Boolean.TRUE);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ba')\", Boolean.FALSE);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-before('1999/04/01', '/')\",\n            \"1999\");                                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-after('1999/04/01', '/')\",\n            \"04/01\");                                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2, 3)\", \"234\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2)\", \"2345\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1.5, 2.6)\", \"234\");                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0, 3)\", \"12\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0 div 0, 3)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1, 0 div 0)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -42, 1 div 0)\", \"12345\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -1 div 0, 1 div 0)\", \"\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 6, 6)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7, 8)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7)\", \"\");                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string-length('12345')\", new Double(5));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space(' abc  def  ')\", \"abc def\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertXPathValue(context, \"normalize-space('abc def')\", \"abc def\");                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertXPathValue(context, \"normalize-space('   ')\", \"\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"translate('--aaa--', 'abc-', 'ABC')\", \"AAA\");                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(1)\", Boolean.TRUE);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(0)\", Boolean.FALSE);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('x')\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('')\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list)\", Boolean.TRUE);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list[position() < 1])\", Boolean.FALSE);                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"true()\", Boolean.TRUE);                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"false()\", Boolean.FALSE);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(false())\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(true())\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"null()\", null);                                             }catch(Throwable __SHOULD_BE_IGNORED){}        \n        try{ assertXPathValue(context, \"number('1')\", new Double(1));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_true)\", new Double(1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_false)\", new Double(0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(1.5)\", new Double(1));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-1.5)\", new Double(-2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(1.5)\", new Double(2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-1.5)\", new Double(-1));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(1.5)\", new Double(2));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-1.5)\", new Double(-1));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"floor('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling('NaN')\", new Double(Double.NaN));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(2 div 0)\", new Double(Double.POSITIVE_INFINITY));           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testCoreFunctions$catena_26() {\n        try{ assertXPathValue(context, \"string(2)\", \"2\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string($nan)\", \"NaN\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-$nan)\", \"NaN\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-2 div 0)\", \"-Infinity\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(2 div 0)\", \"Infinity\");                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"concat('a', 'b', 'c')\", \"abc\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('abc', 'ab')\", Boolean.TRUE);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('xabc', 'ab')\", Boolean.FALSE);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ab')\", Boolean.TRUE);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ba')\", Boolean.FALSE);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-before('1999/04/01', '/')\",\n            \"1999\");                                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-after('1999/04/01', '/')\",\n            \"04/01\");                                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2, 3)\", \"234\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2)\", \"2345\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1.5, 2.6)\", \"234\");                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0, 3)\", \"12\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0 div 0, 3)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1, 0 div 0)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -42, 1 div 0)\", \"12345\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -1 div 0, 1 div 0)\", \"\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 6, 6)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7, 8)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7)\", \"\");                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string-length('12345')\", new Double(5));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space(' abc  def  ')\", \"abc def\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('abc def')\", \"abc def\");                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertXPathValue(context, \"normalize-space('   ')\", \"\");                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertXPathValue(context, \"translate('--aaa--', 'abc-', 'ABC')\", \"AAA\");                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(1)\", Boolean.TRUE);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(0)\", Boolean.FALSE);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('x')\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('')\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list)\", Boolean.TRUE);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list[position() < 1])\", Boolean.FALSE);                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"true()\", Boolean.TRUE);                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"false()\", Boolean.FALSE);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(false())\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(true())\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"null()\", null);                                             }catch(Throwable __SHOULD_BE_IGNORED){}        \n        try{ assertXPathValue(context, \"number('1')\", new Double(1));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_true)\", new Double(1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_false)\", new Double(0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(1.5)\", new Double(1));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-1.5)\", new Double(-2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(1.5)\", new Double(2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-1.5)\", new Double(-1));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(1.5)\", new Double(2));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-1.5)\", new Double(-1));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"floor('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling('NaN')\", new Double(Double.NaN));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(2 div 0)\", new Double(Double.POSITIVE_INFINITY));           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testCoreFunctions$catena_27() {\n        try{ assertXPathValue(context, \"string(2)\", \"2\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string($nan)\", \"NaN\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-$nan)\", \"NaN\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-2 div 0)\", \"-Infinity\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(2 div 0)\", \"Infinity\");                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"concat('a', 'b', 'c')\", \"abc\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('abc', 'ab')\", Boolean.TRUE);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('xabc', 'ab')\", Boolean.FALSE);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ab')\", Boolean.TRUE);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ba')\", Boolean.FALSE);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-before('1999/04/01', '/')\",\n            \"1999\");                                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-after('1999/04/01', '/')\",\n            \"04/01\");                                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2, 3)\", \"234\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2)\", \"2345\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1.5, 2.6)\", \"234\");                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0, 3)\", \"12\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0 div 0, 3)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1, 0 div 0)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -42, 1 div 0)\", \"12345\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -1 div 0, 1 div 0)\", \"\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 6, 6)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7, 8)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7)\", \"\");                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string-length('12345')\", new Double(5));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space(' abc  def  ')\", \"abc def\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('abc def')\", \"abc def\");                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('   ')\", \"\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertXPathValue(context, \"translate('--aaa--', 'abc-', 'ABC')\", \"AAA\");                            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertXPathValue(context, \"boolean(1)\", Boolean.TRUE);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(0)\", Boolean.FALSE);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('x')\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('')\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list)\", Boolean.TRUE);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list[position() < 1])\", Boolean.FALSE);                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"true()\", Boolean.TRUE);                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"false()\", Boolean.FALSE);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(false())\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(true())\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"null()\", null);                                             }catch(Throwable __SHOULD_BE_IGNORED){}        \n        try{ assertXPathValue(context, \"number('1')\", new Double(1));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_true)\", new Double(1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_false)\", new Double(0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(1.5)\", new Double(1));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-1.5)\", new Double(-2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(1.5)\", new Double(2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-1.5)\", new Double(-1));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(1.5)\", new Double(2));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-1.5)\", new Double(-1));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"floor('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling('NaN')\", new Double(Double.NaN));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(2 div 0)\", new Double(Double.POSITIVE_INFINITY));           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testCoreFunctions$catena_28() {\n        try{ assertXPathValue(context, \"string(2)\", \"2\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string($nan)\", \"NaN\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-$nan)\", \"NaN\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-2 div 0)\", \"-Infinity\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(2 div 0)\", \"Infinity\");                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"concat('a', 'b', 'c')\", \"abc\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('abc', 'ab')\", Boolean.TRUE);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('xabc', 'ab')\", Boolean.FALSE);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ab')\", Boolean.TRUE);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ba')\", Boolean.FALSE);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-before('1999/04/01', '/')\",\n            \"1999\");                                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-after('1999/04/01', '/')\",\n            \"04/01\");                                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2, 3)\", \"234\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2)\", \"2345\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1.5, 2.6)\", \"234\");                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0, 3)\", \"12\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0 div 0, 3)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1, 0 div 0)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -42, 1 div 0)\", \"12345\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -1 div 0, 1 div 0)\", \"\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 6, 6)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7, 8)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7)\", \"\");                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string-length('12345')\", new Double(5));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space(' abc  def  ')\", \"abc def\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('abc def')\", \"abc def\");                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('   ')\", \"\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"translate('--aaa--', 'abc-', 'ABC')\", \"AAA\");                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertXPathValue(context, \"boolean(1)\", Boolean.TRUE);                                              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertXPathValue(context, \"boolean(0)\", Boolean.FALSE);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('x')\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('')\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list)\", Boolean.TRUE);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list[position() < 1])\", Boolean.FALSE);                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"true()\", Boolean.TRUE);                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"false()\", Boolean.FALSE);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(false())\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(true())\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"null()\", null);                                             }catch(Throwable __SHOULD_BE_IGNORED){}        \n        try{ assertXPathValue(context, \"number('1')\", new Double(1));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_true)\", new Double(1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_false)\", new Double(0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(1.5)\", new Double(1));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-1.5)\", new Double(-2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(1.5)\", new Double(2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-1.5)\", new Double(-1));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(1.5)\", new Double(2));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-1.5)\", new Double(-1));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"floor('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling('NaN')\", new Double(Double.NaN));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(2 div 0)\", new Double(Double.POSITIVE_INFINITY));           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testCoreFunctions$catena_29() {\n        try{ assertXPathValue(context, \"string(2)\", \"2\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string($nan)\", \"NaN\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-$nan)\", \"NaN\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-2 div 0)\", \"-Infinity\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(2 div 0)\", \"Infinity\");                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"concat('a', 'b', 'c')\", \"abc\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('abc', 'ab')\", Boolean.TRUE);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('xabc', 'ab')\", Boolean.FALSE);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ab')\", Boolean.TRUE);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ba')\", Boolean.FALSE);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-before('1999/04/01', '/')\",\n            \"1999\");                                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-after('1999/04/01', '/')\",\n            \"04/01\");                                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2, 3)\", \"234\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2)\", \"2345\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1.5, 2.6)\", \"234\");                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0, 3)\", \"12\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0 div 0, 3)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1, 0 div 0)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -42, 1 div 0)\", \"12345\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -1 div 0, 1 div 0)\", \"\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 6, 6)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7, 8)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7)\", \"\");                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string-length('12345')\", new Double(5));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space(' abc  def  ')\", \"abc def\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('abc def')\", \"abc def\");                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('   ')\", \"\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"translate('--aaa--', 'abc-', 'ABC')\", \"AAA\");                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(1)\", Boolean.TRUE);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertXPathValue(context, \"boolean(0)\", Boolean.FALSE);                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertXPathValue(context, \"boolean('x')\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('')\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list)\", Boolean.TRUE);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list[position() < 1])\", Boolean.FALSE);                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"true()\", Boolean.TRUE);                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"false()\", Boolean.FALSE);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(false())\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(true())\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"null()\", null);                                             }catch(Throwable __SHOULD_BE_IGNORED){}        \n        try{ assertXPathValue(context, \"number('1')\", new Double(1));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_true)\", new Double(1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_false)\", new Double(0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(1.5)\", new Double(1));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-1.5)\", new Double(-2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(1.5)\", new Double(2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-1.5)\", new Double(-1));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(1.5)\", new Double(2));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-1.5)\", new Double(-1));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"floor('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling('NaN')\", new Double(Double.NaN));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(2 div 0)\", new Double(Double.POSITIVE_INFINITY));           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testCoreFunctions$catena_30() {\n        try{ assertXPathValue(context, \"string(2)\", \"2\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string($nan)\", \"NaN\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-$nan)\", \"NaN\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-2 div 0)\", \"-Infinity\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(2 div 0)\", \"Infinity\");                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"concat('a', 'b', 'c')\", \"abc\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('abc', 'ab')\", Boolean.TRUE);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('xabc', 'ab')\", Boolean.FALSE);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ab')\", Boolean.TRUE);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ba')\", Boolean.FALSE);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-before('1999/04/01', '/')\",\n            \"1999\");                                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-after('1999/04/01', '/')\",\n            \"04/01\");                                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2, 3)\", \"234\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2)\", \"2345\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1.5, 2.6)\", \"234\");                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0, 3)\", \"12\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0 div 0, 3)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1, 0 div 0)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -42, 1 div 0)\", \"12345\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -1 div 0, 1 div 0)\", \"\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 6, 6)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7, 8)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7)\", \"\");                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string-length('12345')\", new Double(5));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space(' abc  def  ')\", \"abc def\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('abc def')\", \"abc def\");                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('   ')\", \"\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"translate('--aaa--', 'abc-', 'ABC')\", \"AAA\");                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(1)\", Boolean.TRUE);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(0)\", Boolean.FALSE);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertXPathValue(context, \"boolean('x')\", Boolean.TRUE);                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertXPathValue(context, \"boolean('')\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list)\", Boolean.TRUE);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list[position() < 1])\", Boolean.FALSE);                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"true()\", Boolean.TRUE);                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"false()\", Boolean.FALSE);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(false())\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(true())\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"null()\", null);                                             }catch(Throwable __SHOULD_BE_IGNORED){}        \n        try{ assertXPathValue(context, \"number('1')\", new Double(1));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_true)\", new Double(1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_false)\", new Double(0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(1.5)\", new Double(1));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-1.5)\", new Double(-2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(1.5)\", new Double(2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-1.5)\", new Double(-1));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(1.5)\", new Double(2));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-1.5)\", new Double(-1));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"floor('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling('NaN')\", new Double(Double.NaN));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(2 div 0)\", new Double(Double.POSITIVE_INFINITY));           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testCoreFunctions$catena_31() {\n        try{ assertXPathValue(context, \"string(2)\", \"2\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string($nan)\", \"NaN\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-$nan)\", \"NaN\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-2 div 0)\", \"-Infinity\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(2 div 0)\", \"Infinity\");                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"concat('a', 'b', 'c')\", \"abc\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('abc', 'ab')\", Boolean.TRUE);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('xabc', 'ab')\", Boolean.FALSE);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ab')\", Boolean.TRUE);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ba')\", Boolean.FALSE);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-before('1999/04/01', '/')\",\n            \"1999\");                                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-after('1999/04/01', '/')\",\n            \"04/01\");                                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2, 3)\", \"234\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2)\", \"2345\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1.5, 2.6)\", \"234\");                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0, 3)\", \"12\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0 div 0, 3)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1, 0 div 0)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -42, 1 div 0)\", \"12345\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -1 div 0, 1 div 0)\", \"\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 6, 6)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7, 8)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7)\", \"\");                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string-length('12345')\", new Double(5));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space(' abc  def  ')\", \"abc def\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('abc def')\", \"abc def\");                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('   ')\", \"\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"translate('--aaa--', 'abc-', 'ABC')\", \"AAA\");                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(1)\", Boolean.TRUE);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(0)\", Boolean.FALSE);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('x')\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertXPathValue(context, \"boolean('')\", Boolean.FALSE);                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertXPathValue(context, \"boolean(/list)\", Boolean.TRUE);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list[position() < 1])\", Boolean.FALSE);                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"true()\", Boolean.TRUE);                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"false()\", Boolean.FALSE);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(false())\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(true())\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"null()\", null);                                             }catch(Throwable __SHOULD_BE_IGNORED){}        \n        try{ assertXPathValue(context, \"number('1')\", new Double(1));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_true)\", new Double(1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_false)\", new Double(0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(1.5)\", new Double(1));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-1.5)\", new Double(-2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(1.5)\", new Double(2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-1.5)\", new Double(-1));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(1.5)\", new Double(2));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-1.5)\", new Double(-1));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"floor('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling('NaN')\", new Double(Double.NaN));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(2 div 0)\", new Double(Double.POSITIVE_INFINITY));           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testCoreFunctions$catena_32() {\n        try{ assertXPathValue(context, \"string(2)\", \"2\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string($nan)\", \"NaN\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-$nan)\", \"NaN\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-2 div 0)\", \"-Infinity\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(2 div 0)\", \"Infinity\");                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"concat('a', 'b', 'c')\", \"abc\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('abc', 'ab')\", Boolean.TRUE);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('xabc', 'ab')\", Boolean.FALSE);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ab')\", Boolean.TRUE);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ba')\", Boolean.FALSE);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-before('1999/04/01', '/')\",\n            \"1999\");                                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-after('1999/04/01', '/')\",\n            \"04/01\");                                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2, 3)\", \"234\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2)\", \"2345\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1.5, 2.6)\", \"234\");                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0, 3)\", \"12\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0 div 0, 3)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1, 0 div 0)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -42, 1 div 0)\", \"12345\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -1 div 0, 1 div 0)\", \"\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 6, 6)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7, 8)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7)\", \"\");                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string-length('12345')\", new Double(5));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space(' abc  def  ')\", \"abc def\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('abc def')\", \"abc def\");                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('   ')\", \"\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"translate('--aaa--', 'abc-', 'ABC')\", \"AAA\");                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(1)\", Boolean.TRUE);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(0)\", Boolean.FALSE);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('x')\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('')\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertXPathValue(context, \"boolean(/list)\", Boolean.TRUE);                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertXPathValue(context, \"boolean(/list[position() < 1])\", Boolean.FALSE);                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"true()\", Boolean.TRUE);                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"false()\", Boolean.FALSE);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(false())\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(true())\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"null()\", null);                                             }catch(Throwable __SHOULD_BE_IGNORED){}        \n        try{ assertXPathValue(context, \"number('1')\", new Double(1));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_true)\", new Double(1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_false)\", new Double(0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(1.5)\", new Double(1));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-1.5)\", new Double(-2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(1.5)\", new Double(2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-1.5)\", new Double(-1));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(1.5)\", new Double(2));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-1.5)\", new Double(-1));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"floor('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling('NaN')\", new Double(Double.NaN));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(2 div 0)\", new Double(Double.POSITIVE_INFINITY));           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testCoreFunctions$catena_33() {\n        try{ assertXPathValue(context, \"string(2)\", \"2\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string($nan)\", \"NaN\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-$nan)\", \"NaN\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-2 div 0)\", \"-Infinity\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(2 div 0)\", \"Infinity\");                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"concat('a', 'b', 'c')\", \"abc\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('abc', 'ab')\", Boolean.TRUE);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('xabc', 'ab')\", Boolean.FALSE);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ab')\", Boolean.TRUE);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ba')\", Boolean.FALSE);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-before('1999/04/01', '/')\",\n            \"1999\");                                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-after('1999/04/01', '/')\",\n            \"04/01\");                                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2, 3)\", \"234\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2)\", \"2345\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1.5, 2.6)\", \"234\");                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0, 3)\", \"12\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0 div 0, 3)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1, 0 div 0)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -42, 1 div 0)\", \"12345\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -1 div 0, 1 div 0)\", \"\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 6, 6)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7, 8)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7)\", \"\");                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string-length('12345')\", new Double(5));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space(' abc  def  ')\", \"abc def\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('abc def')\", \"abc def\");                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('   ')\", \"\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"translate('--aaa--', 'abc-', 'ABC')\", \"AAA\");                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(1)\", Boolean.TRUE);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(0)\", Boolean.FALSE);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('x')\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('')\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list)\", Boolean.TRUE);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertXPathValue(context, \"boolean(/list[position() < 1])\", Boolean.FALSE);                         /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ assertXPathValue(context, \"true()\", Boolean.TRUE);                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"false()\", Boolean.FALSE);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(false())\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(true())\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"null()\", null);                                             }catch(Throwable __SHOULD_BE_IGNORED){}        \n        try{ assertXPathValue(context, \"number('1')\", new Double(1));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_true)\", new Double(1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_false)\", new Double(0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(1.5)\", new Double(1));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-1.5)\", new Double(-2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(1.5)\", new Double(2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-1.5)\", new Double(-1));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(1.5)\", new Double(2));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-1.5)\", new Double(-1));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"floor('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling('NaN')\", new Double(Double.NaN));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(2 div 0)\", new Double(Double.POSITIVE_INFINITY));           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testCoreFunctions$catena_34() {\n        try{ assertXPathValue(context, \"string(2)\", \"2\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string($nan)\", \"NaN\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-$nan)\", \"NaN\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-2 div 0)\", \"-Infinity\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(2 div 0)\", \"Infinity\");                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"concat('a', 'b', 'c')\", \"abc\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('abc', 'ab')\", Boolean.TRUE);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('xabc', 'ab')\", Boolean.FALSE);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ab')\", Boolean.TRUE);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ba')\", Boolean.FALSE);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-before('1999/04/01', '/')\",\n            \"1999\");                                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-after('1999/04/01', '/')\",\n            \"04/01\");                                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2, 3)\", \"234\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2)\", \"2345\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1.5, 2.6)\", \"234\");                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0, 3)\", \"12\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0 div 0, 3)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1, 0 div 0)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -42, 1 div 0)\", \"12345\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -1 div 0, 1 div 0)\", \"\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 6, 6)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7, 8)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7)\", \"\");                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string-length('12345')\", new Double(5));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space(' abc  def  ')\", \"abc def\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('abc def')\", \"abc def\");                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('   ')\", \"\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"translate('--aaa--', 'abc-', 'ABC')\", \"AAA\");                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(1)\", Boolean.TRUE);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(0)\", Boolean.FALSE);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('x')\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('')\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list)\", Boolean.TRUE);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list[position() < 1])\", Boolean.FALSE);                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        assertXPathValue(context, \"true()\", Boolean.TRUE);                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertXPathValue(context, \"false()\", Boolean.FALSE);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(false())\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(true())\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"null()\", null);                                             }catch(Throwable __SHOULD_BE_IGNORED){}        \n        try{ assertXPathValue(context, \"number('1')\", new Double(1));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_true)\", new Double(1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_false)\", new Double(0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(1.5)\", new Double(1));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-1.5)\", new Double(-2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(1.5)\", new Double(2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-1.5)\", new Double(-1));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(1.5)\", new Double(2));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-1.5)\", new Double(-1));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"floor('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling('NaN')\", new Double(Double.NaN));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(2 div 0)\", new Double(Double.POSITIVE_INFINITY));           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testCoreFunctions$catena_35() {\n        try{ assertXPathValue(context, \"string(2)\", \"2\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string($nan)\", \"NaN\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-$nan)\", \"NaN\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-2 div 0)\", \"-Infinity\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(2 div 0)\", \"Infinity\");                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"concat('a', 'b', 'c')\", \"abc\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('abc', 'ab')\", Boolean.TRUE);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('xabc', 'ab')\", Boolean.FALSE);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ab')\", Boolean.TRUE);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ba')\", Boolean.FALSE);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-before('1999/04/01', '/')\",\n            \"1999\");                                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-after('1999/04/01', '/')\",\n            \"04/01\");                                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2, 3)\", \"234\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2)\", \"2345\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1.5, 2.6)\", \"234\");                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0, 3)\", \"12\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0 div 0, 3)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1, 0 div 0)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -42, 1 div 0)\", \"12345\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -1 div 0, 1 div 0)\", \"\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 6, 6)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7, 8)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7)\", \"\");                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string-length('12345')\", new Double(5));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space(' abc  def  ')\", \"abc def\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('abc def')\", \"abc def\");                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('   ')\", \"\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"translate('--aaa--', 'abc-', 'ABC')\", \"AAA\");                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(1)\", Boolean.TRUE);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(0)\", Boolean.FALSE);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('x')\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('')\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list)\", Boolean.TRUE);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list[position() < 1])\", Boolean.FALSE);                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"true()\", Boolean.TRUE);                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertXPathValue(context, \"false()\", Boolean.FALSE);                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertXPathValue(context, \"not(false())\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(true())\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"null()\", null);                                             }catch(Throwable __SHOULD_BE_IGNORED){}        \n        try{ assertXPathValue(context, \"number('1')\", new Double(1));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_true)\", new Double(1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_false)\", new Double(0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(1.5)\", new Double(1));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-1.5)\", new Double(-2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(1.5)\", new Double(2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-1.5)\", new Double(-1));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(1.5)\", new Double(2));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-1.5)\", new Double(-1));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"floor('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling('NaN')\", new Double(Double.NaN));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(2 div 0)\", new Double(Double.POSITIVE_INFINITY));           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testCoreFunctions$catena_36() {\n        try{ assertXPathValue(context, \"string(2)\", \"2\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string($nan)\", \"NaN\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-$nan)\", \"NaN\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-2 div 0)\", \"-Infinity\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(2 div 0)\", \"Infinity\");                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"concat('a', 'b', 'c')\", \"abc\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('abc', 'ab')\", Boolean.TRUE);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('xabc', 'ab')\", Boolean.FALSE);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ab')\", Boolean.TRUE);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ba')\", Boolean.FALSE);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-before('1999/04/01', '/')\",\n            \"1999\");                                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-after('1999/04/01', '/')\",\n            \"04/01\");                                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2, 3)\", \"234\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2)\", \"2345\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1.5, 2.6)\", \"234\");                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0, 3)\", \"12\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0 div 0, 3)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1, 0 div 0)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -42, 1 div 0)\", \"12345\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -1 div 0, 1 div 0)\", \"\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 6, 6)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7, 8)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7)\", \"\");                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string-length('12345')\", new Double(5));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space(' abc  def  ')\", \"abc def\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('abc def')\", \"abc def\");                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('   ')\", \"\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"translate('--aaa--', 'abc-', 'ABC')\", \"AAA\");                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(1)\", Boolean.TRUE);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(0)\", Boolean.FALSE);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('x')\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('')\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list)\", Boolean.TRUE);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list[position() < 1])\", Boolean.FALSE);                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"true()\", Boolean.TRUE);                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"false()\", Boolean.FALSE);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertXPathValue(context, \"not(false())\", Boolean.TRUE);                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertXPathValue(context, \"not(true())\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"null()\", null);                                             }catch(Throwable __SHOULD_BE_IGNORED){}        \n        try{ assertXPathValue(context, \"number('1')\", new Double(1));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_true)\", new Double(1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_false)\", new Double(0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(1.5)\", new Double(1));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-1.5)\", new Double(-2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(1.5)\", new Double(2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-1.5)\", new Double(-1));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(1.5)\", new Double(2));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-1.5)\", new Double(-1));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"floor('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling('NaN')\", new Double(Double.NaN));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(2 div 0)\", new Double(Double.POSITIVE_INFINITY));           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testCoreFunctions$catena_37() {\n        try{ assertXPathValue(context, \"string(2)\", \"2\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string($nan)\", \"NaN\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-$nan)\", \"NaN\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-2 div 0)\", \"-Infinity\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(2 div 0)\", \"Infinity\");                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"concat('a', 'b', 'c')\", \"abc\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('abc', 'ab')\", Boolean.TRUE);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('xabc', 'ab')\", Boolean.FALSE);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ab')\", Boolean.TRUE);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ba')\", Boolean.FALSE);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-before('1999/04/01', '/')\",\n            \"1999\");                                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-after('1999/04/01', '/')\",\n            \"04/01\");                                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2, 3)\", \"234\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2)\", \"2345\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1.5, 2.6)\", \"234\");                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0, 3)\", \"12\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0 div 0, 3)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1, 0 div 0)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -42, 1 div 0)\", \"12345\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -1 div 0, 1 div 0)\", \"\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 6, 6)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7, 8)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7)\", \"\");                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string-length('12345')\", new Double(5));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space(' abc  def  ')\", \"abc def\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('abc def')\", \"abc def\");                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('   ')\", \"\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"translate('--aaa--', 'abc-', 'ABC')\", \"AAA\");                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(1)\", Boolean.TRUE);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(0)\", Boolean.FALSE);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('x')\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('')\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list)\", Boolean.TRUE);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list[position() < 1])\", Boolean.FALSE);                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"true()\", Boolean.TRUE);                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"false()\", Boolean.FALSE);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(false())\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertXPathValue(context, \"not(true())\", Boolean.FALSE);                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertXPathValue(context, \"null()\", null);                                             }catch(Throwable __SHOULD_BE_IGNORED){}        \n        try{ assertXPathValue(context, \"number('1')\", new Double(1));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_true)\", new Double(1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_false)\", new Double(0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(1.5)\", new Double(1));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-1.5)\", new Double(-2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(1.5)\", new Double(2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-1.5)\", new Double(-1));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(1.5)\", new Double(2));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-1.5)\", new Double(-1));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"floor('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling('NaN')\", new Double(Double.NaN));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(2 div 0)\", new Double(Double.POSITIVE_INFINITY));           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testCoreFunctions$catena_38() {\n        try{ assertXPathValue(context, \"string(2)\", \"2\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string($nan)\", \"NaN\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-$nan)\", \"NaN\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-2 div 0)\", \"-Infinity\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(2 div 0)\", \"Infinity\");                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"concat('a', 'b', 'c')\", \"abc\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('abc', 'ab')\", Boolean.TRUE);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('xabc', 'ab')\", Boolean.FALSE);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ab')\", Boolean.TRUE);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ba')\", Boolean.FALSE);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-before('1999/04/01', '/')\",\n            \"1999\");                                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-after('1999/04/01', '/')\",\n            \"04/01\");                                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2, 3)\", \"234\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2)\", \"2345\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1.5, 2.6)\", \"234\");                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0, 3)\", \"12\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0 div 0, 3)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1, 0 div 0)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -42, 1 div 0)\", \"12345\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -1 div 0, 1 div 0)\", \"\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 6, 6)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7, 8)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7)\", \"\");                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string-length('12345')\", new Double(5));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space(' abc  def  ')\", \"abc def\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('abc def')\", \"abc def\");                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('   ')\", \"\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"translate('--aaa--', 'abc-', 'ABC')\", \"AAA\");                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(1)\", Boolean.TRUE);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(0)\", Boolean.FALSE);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('x')\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('')\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list)\", Boolean.TRUE);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list[position() < 1])\", Boolean.FALSE);                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"true()\", Boolean.TRUE);                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"false()\", Boolean.FALSE);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(false())\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(true())\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertXPathValue(context, \"null()\", null);                                                  /***** ORIGINAL ASSERTION IS HERE *****/        \n        try{ assertXPathValue(context, \"number('1')\", new Double(1));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_true)\", new Double(1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_false)\", new Double(0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(1.5)\", new Double(1));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-1.5)\", new Double(-2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(1.5)\", new Double(2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-1.5)\", new Double(-1));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(1.5)\", new Double(2));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-1.5)\", new Double(-1));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"floor('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling('NaN')\", new Double(Double.NaN));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(2 div 0)\", new Double(Double.POSITIVE_INFINITY));           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testCoreFunctions$catena_39() {\n        try{ assertXPathValue(context, \"string(2)\", \"2\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string($nan)\", \"NaN\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-$nan)\", \"NaN\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-2 div 0)\", \"-Infinity\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(2 div 0)\", \"Infinity\");                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"concat('a', 'b', 'c')\", \"abc\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('abc', 'ab')\", Boolean.TRUE);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('xabc', 'ab')\", Boolean.FALSE);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ab')\", Boolean.TRUE);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ba')\", Boolean.FALSE);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-before('1999/04/01', '/')\",\n            \"1999\");                                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-after('1999/04/01', '/')\",\n            \"04/01\");                                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2, 3)\", \"234\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2)\", \"2345\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1.5, 2.6)\", \"234\");                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0, 3)\", \"12\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0 div 0, 3)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1, 0 div 0)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -42, 1 div 0)\", \"12345\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -1 div 0, 1 div 0)\", \"\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 6, 6)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7, 8)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7)\", \"\");                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string-length('12345')\", new Double(5));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space(' abc  def  ')\", \"abc def\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('abc def')\", \"abc def\");                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('   ')\", \"\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"translate('--aaa--', 'abc-', 'ABC')\", \"AAA\");                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(1)\", Boolean.TRUE);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(0)\", Boolean.FALSE);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('x')\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('')\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list)\", Boolean.TRUE);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list[position() < 1])\", Boolean.FALSE);                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"true()\", Boolean.TRUE);                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"false()\", Boolean.FALSE);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(false())\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(true())\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"null()\", null);                                             }catch(Throwable __SHOULD_BE_IGNORED){}        \n        assertXPathValue(context, \"number('1')\", new Double(1));                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertXPathValue(context, \"number($bool_true)\", new Double(1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_false)\", new Double(0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(1.5)\", new Double(1));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-1.5)\", new Double(-2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(1.5)\", new Double(2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-1.5)\", new Double(-1));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(1.5)\", new Double(2));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-1.5)\", new Double(-1));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"floor('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling('NaN')\", new Double(Double.NaN));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(2 div 0)\", new Double(Double.POSITIVE_INFINITY));           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testCoreFunctions$catena_40() {\n        try{ assertXPathValue(context, \"string(2)\", \"2\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string($nan)\", \"NaN\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-$nan)\", \"NaN\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-2 div 0)\", \"-Infinity\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(2 div 0)\", \"Infinity\");                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"concat('a', 'b', 'c')\", \"abc\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('abc', 'ab')\", Boolean.TRUE);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('xabc', 'ab')\", Boolean.FALSE);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ab')\", Boolean.TRUE);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ba')\", Boolean.FALSE);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-before('1999/04/01', '/')\",\n            \"1999\");                                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-after('1999/04/01', '/')\",\n            \"04/01\");                                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2, 3)\", \"234\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2)\", \"2345\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1.5, 2.6)\", \"234\");                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0, 3)\", \"12\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0 div 0, 3)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1, 0 div 0)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -42, 1 div 0)\", \"12345\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -1 div 0, 1 div 0)\", \"\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 6, 6)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7, 8)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7)\", \"\");                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string-length('12345')\", new Double(5));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space(' abc  def  ')\", \"abc def\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('abc def')\", \"abc def\");                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('   ')\", \"\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"translate('--aaa--', 'abc-', 'ABC')\", \"AAA\");                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(1)\", Boolean.TRUE);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(0)\", Boolean.FALSE);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('x')\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('')\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list)\", Boolean.TRUE);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list[position() < 1])\", Boolean.FALSE);                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"true()\", Boolean.TRUE);                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"false()\", Boolean.FALSE);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(false())\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(true())\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"null()\", null);                                             }catch(Throwable __SHOULD_BE_IGNORED){}        \n        try{ assertXPathValue(context, \"number('1')\", new Double(1));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertXPathValue(context, \"number($bool_true)\", new Double(1));                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertXPathValue(context, \"number($bool_false)\", new Double(0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(1.5)\", new Double(1));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-1.5)\", new Double(-2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(1.5)\", new Double(2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-1.5)\", new Double(-1));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(1.5)\", new Double(2));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-1.5)\", new Double(-1));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"floor('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling('NaN')\", new Double(Double.NaN));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(2 div 0)\", new Double(Double.POSITIVE_INFINITY));           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testCoreFunctions$catena_41() {\n        try{ assertXPathValue(context, \"string(2)\", \"2\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string($nan)\", \"NaN\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-$nan)\", \"NaN\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-2 div 0)\", \"-Infinity\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(2 div 0)\", \"Infinity\");                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"concat('a', 'b', 'c')\", \"abc\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('abc', 'ab')\", Boolean.TRUE);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('xabc', 'ab')\", Boolean.FALSE);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ab')\", Boolean.TRUE);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ba')\", Boolean.FALSE);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-before('1999/04/01', '/')\",\n            \"1999\");                                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-after('1999/04/01', '/')\",\n            \"04/01\");                                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2, 3)\", \"234\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2)\", \"2345\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1.5, 2.6)\", \"234\");                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0, 3)\", \"12\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0 div 0, 3)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1, 0 div 0)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -42, 1 div 0)\", \"12345\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -1 div 0, 1 div 0)\", \"\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 6, 6)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7, 8)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7)\", \"\");                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string-length('12345')\", new Double(5));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space(' abc  def  ')\", \"abc def\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('abc def')\", \"abc def\");                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('   ')\", \"\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"translate('--aaa--', 'abc-', 'ABC')\", \"AAA\");                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(1)\", Boolean.TRUE);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(0)\", Boolean.FALSE);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('x')\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('')\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list)\", Boolean.TRUE);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list[position() < 1])\", Boolean.FALSE);                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"true()\", Boolean.TRUE);                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"false()\", Boolean.FALSE);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(false())\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(true())\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"null()\", null);                                             }catch(Throwable __SHOULD_BE_IGNORED){}        \n        try{ assertXPathValue(context, \"number('1')\", new Double(1));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_true)\", new Double(1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertXPathValue(context, \"number($bool_false)\", new Double(0));                                    /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertXPathValue(context, \"floor(1.5)\", new Double(1));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-1.5)\", new Double(-2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(1.5)\", new Double(2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-1.5)\", new Double(-1));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(1.5)\", new Double(2));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-1.5)\", new Double(-1));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"floor('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling('NaN')\", new Double(Double.NaN));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(2 div 0)\", new Double(Double.POSITIVE_INFINITY));           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testCoreFunctions$catena_42() {\n        try{ assertXPathValue(context, \"string(2)\", \"2\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string($nan)\", \"NaN\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-$nan)\", \"NaN\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-2 div 0)\", \"-Infinity\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(2 div 0)\", \"Infinity\");                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"concat('a', 'b', 'c')\", \"abc\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('abc', 'ab')\", Boolean.TRUE);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('xabc', 'ab')\", Boolean.FALSE);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ab')\", Boolean.TRUE);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ba')\", Boolean.FALSE);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-before('1999/04/01', '/')\",\n            \"1999\");                                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-after('1999/04/01', '/')\",\n            \"04/01\");                                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2, 3)\", \"234\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2)\", \"2345\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1.5, 2.6)\", \"234\");                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0, 3)\", \"12\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0 div 0, 3)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1, 0 div 0)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -42, 1 div 0)\", \"12345\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -1 div 0, 1 div 0)\", \"\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 6, 6)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7, 8)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7)\", \"\");                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string-length('12345')\", new Double(5));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space(' abc  def  ')\", \"abc def\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('abc def')\", \"abc def\");                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('   ')\", \"\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"translate('--aaa--', 'abc-', 'ABC')\", \"AAA\");                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(1)\", Boolean.TRUE);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(0)\", Boolean.FALSE);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('x')\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('')\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list)\", Boolean.TRUE);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list[position() < 1])\", Boolean.FALSE);                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"true()\", Boolean.TRUE);                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"false()\", Boolean.FALSE);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(false())\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(true())\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"null()\", null);                                             }catch(Throwable __SHOULD_BE_IGNORED){}        \n        try{ assertXPathValue(context, \"number('1')\", new Double(1));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_true)\", new Double(1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_false)\", new Double(0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertXPathValue(context, \"floor(1.5)\", new Double(1));                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertXPathValue(context, \"floor(-1.5)\", new Double(-2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(1.5)\", new Double(2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-1.5)\", new Double(-1));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(1.5)\", new Double(2));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-1.5)\", new Double(-1));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"floor('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling('NaN')\", new Double(Double.NaN));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(2 div 0)\", new Double(Double.POSITIVE_INFINITY));           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testCoreFunctions$catena_43() {\n        try{ assertXPathValue(context, \"string(2)\", \"2\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string($nan)\", \"NaN\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-$nan)\", \"NaN\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-2 div 0)\", \"-Infinity\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(2 div 0)\", \"Infinity\");                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"concat('a', 'b', 'c')\", \"abc\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('abc', 'ab')\", Boolean.TRUE);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('xabc', 'ab')\", Boolean.FALSE);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ab')\", Boolean.TRUE);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ba')\", Boolean.FALSE);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-before('1999/04/01', '/')\",\n            \"1999\");                                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-after('1999/04/01', '/')\",\n            \"04/01\");                                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2, 3)\", \"234\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2)\", \"2345\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1.5, 2.6)\", \"234\");                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0, 3)\", \"12\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0 div 0, 3)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1, 0 div 0)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -42, 1 div 0)\", \"12345\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -1 div 0, 1 div 0)\", \"\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 6, 6)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7, 8)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7)\", \"\");                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string-length('12345')\", new Double(5));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space(' abc  def  ')\", \"abc def\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('abc def')\", \"abc def\");                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('   ')\", \"\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"translate('--aaa--', 'abc-', 'ABC')\", \"AAA\");                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(1)\", Boolean.TRUE);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(0)\", Boolean.FALSE);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('x')\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('')\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list)\", Boolean.TRUE);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list[position() < 1])\", Boolean.FALSE);                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"true()\", Boolean.TRUE);                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"false()\", Boolean.FALSE);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(false())\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(true())\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"null()\", null);                                             }catch(Throwable __SHOULD_BE_IGNORED){}        \n        try{ assertXPathValue(context, \"number('1')\", new Double(1));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_true)\", new Double(1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_false)\", new Double(0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(1.5)\", new Double(1));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertXPathValue(context, \"floor(-1.5)\", new Double(-2));                                           /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertXPathValue(context, \"ceiling(1.5)\", new Double(2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-1.5)\", new Double(-1));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(1.5)\", new Double(2));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-1.5)\", new Double(-1));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"floor('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling('NaN')\", new Double(Double.NaN));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(2 div 0)\", new Double(Double.POSITIVE_INFINITY));           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testCoreFunctions$catena_44() {\n        try{ assertXPathValue(context, \"string(2)\", \"2\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string($nan)\", \"NaN\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-$nan)\", \"NaN\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-2 div 0)\", \"-Infinity\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(2 div 0)\", \"Infinity\");                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"concat('a', 'b', 'c')\", \"abc\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('abc', 'ab')\", Boolean.TRUE);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('xabc', 'ab')\", Boolean.FALSE);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ab')\", Boolean.TRUE);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ba')\", Boolean.FALSE);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-before('1999/04/01', '/')\",\n            \"1999\");                                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-after('1999/04/01', '/')\",\n            \"04/01\");                                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2, 3)\", \"234\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2)\", \"2345\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1.5, 2.6)\", \"234\");                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0, 3)\", \"12\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0 div 0, 3)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1, 0 div 0)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -42, 1 div 0)\", \"12345\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -1 div 0, 1 div 0)\", \"\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 6, 6)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7, 8)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7)\", \"\");                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string-length('12345')\", new Double(5));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space(' abc  def  ')\", \"abc def\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('abc def')\", \"abc def\");                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('   ')\", \"\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"translate('--aaa--', 'abc-', 'ABC')\", \"AAA\");                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(1)\", Boolean.TRUE);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(0)\", Boolean.FALSE);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('x')\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('')\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list)\", Boolean.TRUE);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list[position() < 1])\", Boolean.FALSE);                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"true()\", Boolean.TRUE);                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"false()\", Boolean.FALSE);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(false())\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(true())\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"null()\", null);                                             }catch(Throwable __SHOULD_BE_IGNORED){}        \n        try{ assertXPathValue(context, \"number('1')\", new Double(1));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_true)\", new Double(1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_false)\", new Double(0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(1.5)\", new Double(1));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-1.5)\", new Double(-2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertXPathValue(context, \"ceiling(1.5)\", new Double(2));                                           /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertXPathValue(context, \"ceiling(-1.5)\", new Double(-1));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(1.5)\", new Double(2));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-1.5)\", new Double(-1));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"floor('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling('NaN')\", new Double(Double.NaN));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(2 div 0)\", new Double(Double.POSITIVE_INFINITY));           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testCoreFunctions$catena_45() {\n        try{ assertXPathValue(context, \"string(2)\", \"2\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string($nan)\", \"NaN\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-$nan)\", \"NaN\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-2 div 0)\", \"-Infinity\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(2 div 0)\", \"Infinity\");                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"concat('a', 'b', 'c')\", \"abc\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('abc', 'ab')\", Boolean.TRUE);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('xabc', 'ab')\", Boolean.FALSE);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ab')\", Boolean.TRUE);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ba')\", Boolean.FALSE);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-before('1999/04/01', '/')\",\n            \"1999\");                                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-after('1999/04/01', '/')\",\n            \"04/01\");                                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2, 3)\", \"234\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2)\", \"2345\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1.5, 2.6)\", \"234\");                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0, 3)\", \"12\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0 div 0, 3)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1, 0 div 0)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -42, 1 div 0)\", \"12345\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -1 div 0, 1 div 0)\", \"\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 6, 6)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7, 8)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7)\", \"\");                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string-length('12345')\", new Double(5));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space(' abc  def  ')\", \"abc def\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('abc def')\", \"abc def\");                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('   ')\", \"\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"translate('--aaa--', 'abc-', 'ABC')\", \"AAA\");                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(1)\", Boolean.TRUE);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(0)\", Boolean.FALSE);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('x')\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('')\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list)\", Boolean.TRUE);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list[position() < 1])\", Boolean.FALSE);                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"true()\", Boolean.TRUE);                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"false()\", Boolean.FALSE);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(false())\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(true())\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"null()\", null);                                             }catch(Throwable __SHOULD_BE_IGNORED){}        \n        try{ assertXPathValue(context, \"number('1')\", new Double(1));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_true)\", new Double(1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_false)\", new Double(0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(1.5)\", new Double(1));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-1.5)\", new Double(-2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(1.5)\", new Double(2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertXPathValue(context, \"ceiling(-1.5)\", new Double(-1));                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertXPathValue(context, \"round(1.5)\", new Double(2));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-1.5)\", new Double(-1));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"floor('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling('NaN')\", new Double(Double.NaN));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(2 div 0)\", new Double(Double.POSITIVE_INFINITY));           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testCoreFunctions$catena_46() {\n        try{ assertXPathValue(context, \"string(2)\", \"2\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string($nan)\", \"NaN\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-$nan)\", \"NaN\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-2 div 0)\", \"-Infinity\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(2 div 0)\", \"Infinity\");                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"concat('a', 'b', 'c')\", \"abc\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('abc', 'ab')\", Boolean.TRUE);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('xabc', 'ab')\", Boolean.FALSE);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ab')\", Boolean.TRUE);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ba')\", Boolean.FALSE);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-before('1999/04/01', '/')\",\n            \"1999\");                                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-after('1999/04/01', '/')\",\n            \"04/01\");                                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2, 3)\", \"234\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2)\", \"2345\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1.5, 2.6)\", \"234\");                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0, 3)\", \"12\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0 div 0, 3)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1, 0 div 0)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -42, 1 div 0)\", \"12345\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -1 div 0, 1 div 0)\", \"\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 6, 6)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7, 8)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7)\", \"\");                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string-length('12345')\", new Double(5));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space(' abc  def  ')\", \"abc def\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('abc def')\", \"abc def\");                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('   ')\", \"\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"translate('--aaa--', 'abc-', 'ABC')\", \"AAA\");                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(1)\", Boolean.TRUE);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(0)\", Boolean.FALSE);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('x')\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('')\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list)\", Boolean.TRUE);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list[position() < 1])\", Boolean.FALSE);                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"true()\", Boolean.TRUE);                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"false()\", Boolean.FALSE);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(false())\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(true())\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"null()\", null);                                             }catch(Throwable __SHOULD_BE_IGNORED){}        \n        try{ assertXPathValue(context, \"number('1')\", new Double(1));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_true)\", new Double(1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_false)\", new Double(0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(1.5)\", new Double(1));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-1.5)\", new Double(-2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(1.5)\", new Double(2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-1.5)\", new Double(-1));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertXPathValue(context, \"round(1.5)\", new Double(2));                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertXPathValue(context, \"round(-1.5)\", new Double(-1));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"floor('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling('NaN')\", new Double(Double.NaN));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(2 div 0)\", new Double(Double.POSITIVE_INFINITY));           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testCoreFunctions$catena_47() {\n        try{ assertXPathValue(context, \"string(2)\", \"2\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string($nan)\", \"NaN\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-$nan)\", \"NaN\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-2 div 0)\", \"-Infinity\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(2 div 0)\", \"Infinity\");                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"concat('a', 'b', 'c')\", \"abc\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('abc', 'ab')\", Boolean.TRUE);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('xabc', 'ab')\", Boolean.FALSE);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ab')\", Boolean.TRUE);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ba')\", Boolean.FALSE);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-before('1999/04/01', '/')\",\n            \"1999\");                                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-after('1999/04/01', '/')\",\n            \"04/01\");                                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2, 3)\", \"234\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2)\", \"2345\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1.5, 2.6)\", \"234\");                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0, 3)\", \"12\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0 div 0, 3)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1, 0 div 0)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -42, 1 div 0)\", \"12345\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -1 div 0, 1 div 0)\", \"\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 6, 6)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7, 8)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7)\", \"\");                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string-length('12345')\", new Double(5));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space(' abc  def  ')\", \"abc def\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('abc def')\", \"abc def\");                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('   ')\", \"\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"translate('--aaa--', 'abc-', 'ABC')\", \"AAA\");                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(1)\", Boolean.TRUE);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(0)\", Boolean.FALSE);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('x')\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('')\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list)\", Boolean.TRUE);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list[position() < 1])\", Boolean.FALSE);                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"true()\", Boolean.TRUE);                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"false()\", Boolean.FALSE);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(false())\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(true())\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"null()\", null);                                             }catch(Throwable __SHOULD_BE_IGNORED){}        \n        try{ assertXPathValue(context, \"number('1')\", new Double(1));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_true)\", new Double(1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_false)\", new Double(0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(1.5)\", new Double(1));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-1.5)\", new Double(-2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(1.5)\", new Double(2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-1.5)\", new Double(-1));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(1.5)\", new Double(2));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertXPathValue(context, \"round(-1.5)\", new Double(-1));                                           /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ assertXPathValue(context, \"floor('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling('NaN')\", new Double(Double.NaN));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(2 div 0)\", new Double(Double.POSITIVE_INFINITY));           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testCoreFunctions$catena_48() {\n        try{ assertXPathValue(context, \"string(2)\", \"2\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string($nan)\", \"NaN\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-$nan)\", \"NaN\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-2 div 0)\", \"-Infinity\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(2 div 0)\", \"Infinity\");                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"concat('a', 'b', 'c')\", \"abc\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('abc', 'ab')\", Boolean.TRUE);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('xabc', 'ab')\", Boolean.FALSE);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ab')\", Boolean.TRUE);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ba')\", Boolean.FALSE);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-before('1999/04/01', '/')\",\n            \"1999\");                                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-after('1999/04/01', '/')\",\n            \"04/01\");                                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2, 3)\", \"234\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2)\", \"2345\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1.5, 2.6)\", \"234\");                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0, 3)\", \"12\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0 div 0, 3)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1, 0 div 0)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -42, 1 div 0)\", \"12345\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -1 div 0, 1 div 0)\", \"\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 6, 6)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7, 8)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7)\", \"\");                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string-length('12345')\", new Double(5));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space(' abc  def  ')\", \"abc def\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('abc def')\", \"abc def\");                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('   ')\", \"\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"translate('--aaa--', 'abc-', 'ABC')\", \"AAA\");                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(1)\", Boolean.TRUE);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(0)\", Boolean.FALSE);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('x')\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('')\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list)\", Boolean.TRUE);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list[position() < 1])\", Boolean.FALSE);                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"true()\", Boolean.TRUE);                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"false()\", Boolean.FALSE);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(false())\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(true())\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"null()\", null);                                             }catch(Throwable __SHOULD_BE_IGNORED){}        \n        try{ assertXPathValue(context, \"number('1')\", new Double(1));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_true)\", new Double(1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_false)\", new Double(0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(1.5)\", new Double(1));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-1.5)\", new Double(-2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(1.5)\", new Double(2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-1.5)\", new Double(-1));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(1.5)\", new Double(2));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-1.5)\", new Double(-1));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        assertXPathValue(context, \"floor('NaN')\", new Double(Double.NaN));                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertXPathValue(context, \"floor(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling('NaN')\", new Double(Double.NaN));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(2 div 0)\", new Double(Double.POSITIVE_INFINITY));           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testCoreFunctions$catena_49() {\n        try{ assertXPathValue(context, \"string(2)\", \"2\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string($nan)\", \"NaN\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-$nan)\", \"NaN\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-2 div 0)\", \"-Infinity\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(2 div 0)\", \"Infinity\");                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"concat('a', 'b', 'c')\", \"abc\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('abc', 'ab')\", Boolean.TRUE);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('xabc', 'ab')\", Boolean.FALSE);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ab')\", Boolean.TRUE);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ba')\", Boolean.FALSE);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-before('1999/04/01', '/')\",\n            \"1999\");                                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-after('1999/04/01', '/')\",\n            \"04/01\");                                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2, 3)\", \"234\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2)\", \"2345\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1.5, 2.6)\", \"234\");                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0, 3)\", \"12\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0 div 0, 3)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1, 0 div 0)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -42, 1 div 0)\", \"12345\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -1 div 0, 1 div 0)\", \"\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 6, 6)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7, 8)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7)\", \"\");                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string-length('12345')\", new Double(5));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space(' abc  def  ')\", \"abc def\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('abc def')\", \"abc def\");                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('   ')\", \"\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"translate('--aaa--', 'abc-', 'ABC')\", \"AAA\");                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(1)\", Boolean.TRUE);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(0)\", Boolean.FALSE);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('x')\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('')\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list)\", Boolean.TRUE);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list[position() < 1])\", Boolean.FALSE);                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"true()\", Boolean.TRUE);                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"false()\", Boolean.FALSE);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(false())\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(true())\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"null()\", null);                                             }catch(Throwable __SHOULD_BE_IGNORED){}        \n        try{ assertXPathValue(context, \"number('1')\", new Double(1));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_true)\", new Double(1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_false)\", new Double(0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(1.5)\", new Double(1));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-1.5)\", new Double(-2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(1.5)\", new Double(2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-1.5)\", new Double(-1));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(1.5)\", new Double(2));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-1.5)\", new Double(-1));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"floor('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertXPathValue(context, \"floor(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertXPathValue(context, \"floor(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling('NaN')\", new Double(Double.NaN));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(2 div 0)\", new Double(Double.POSITIVE_INFINITY));           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testCoreFunctions$catena_50() {\n        try{ assertXPathValue(context, \"string(2)\", \"2\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string($nan)\", \"NaN\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-$nan)\", \"NaN\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-2 div 0)\", \"-Infinity\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(2 div 0)\", \"Infinity\");                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"concat('a', 'b', 'c')\", \"abc\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('abc', 'ab')\", Boolean.TRUE);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('xabc', 'ab')\", Boolean.FALSE);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ab')\", Boolean.TRUE);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ba')\", Boolean.FALSE);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-before('1999/04/01', '/')\",\n            \"1999\");                                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-after('1999/04/01', '/')\",\n            \"04/01\");                                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2, 3)\", \"234\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2)\", \"2345\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1.5, 2.6)\", \"234\");                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0, 3)\", \"12\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0 div 0, 3)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1, 0 div 0)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -42, 1 div 0)\", \"12345\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -1 div 0, 1 div 0)\", \"\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 6, 6)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7, 8)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7)\", \"\");                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string-length('12345')\", new Double(5));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space(' abc  def  ')\", \"abc def\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('abc def')\", \"abc def\");                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('   ')\", \"\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"translate('--aaa--', 'abc-', 'ABC')\", \"AAA\");                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(1)\", Boolean.TRUE);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(0)\", Boolean.FALSE);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('x')\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('')\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list)\", Boolean.TRUE);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list[position() < 1])\", Boolean.FALSE);                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"true()\", Boolean.TRUE);                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"false()\", Boolean.FALSE);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(false())\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(true())\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"null()\", null);                                             }catch(Throwable __SHOULD_BE_IGNORED){}        \n        try{ assertXPathValue(context, \"number('1')\", new Double(1));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_true)\", new Double(1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_false)\", new Double(0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(1.5)\", new Double(1));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-1.5)\", new Double(-2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(1.5)\", new Double(2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-1.5)\", new Double(-1));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(1.5)\", new Double(2));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-1.5)\", new Double(-1));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"floor('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertXPathValue(context, \"floor(2 div 0)\", new Double(Double.POSITIVE_INFINITY));                  /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertXPathValue(context, \"ceiling('NaN')\", new Double(Double.NaN));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(2 div 0)\", new Double(Double.POSITIVE_INFINITY));           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testCoreFunctions$catena_51() {\n        try{ assertXPathValue(context, \"string(2)\", \"2\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string($nan)\", \"NaN\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-$nan)\", \"NaN\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-2 div 0)\", \"-Infinity\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(2 div 0)\", \"Infinity\");                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"concat('a', 'b', 'c')\", \"abc\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('abc', 'ab')\", Boolean.TRUE);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('xabc', 'ab')\", Boolean.FALSE);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ab')\", Boolean.TRUE);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ba')\", Boolean.FALSE);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-before('1999/04/01', '/')\",\n            \"1999\");                                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-after('1999/04/01', '/')\",\n            \"04/01\");                                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2, 3)\", \"234\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2)\", \"2345\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1.5, 2.6)\", \"234\");                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0, 3)\", \"12\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0 div 0, 3)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1, 0 div 0)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -42, 1 div 0)\", \"12345\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -1 div 0, 1 div 0)\", \"\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 6, 6)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7, 8)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7)\", \"\");                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string-length('12345')\", new Double(5));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space(' abc  def  ')\", \"abc def\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('abc def')\", \"abc def\");                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('   ')\", \"\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"translate('--aaa--', 'abc-', 'ABC')\", \"AAA\");                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(1)\", Boolean.TRUE);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(0)\", Boolean.FALSE);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('x')\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('')\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list)\", Boolean.TRUE);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list[position() < 1])\", Boolean.FALSE);                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"true()\", Boolean.TRUE);                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"false()\", Boolean.FALSE);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(false())\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(true())\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"null()\", null);                                             }catch(Throwable __SHOULD_BE_IGNORED){}        \n        try{ assertXPathValue(context, \"number('1')\", new Double(1));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_true)\", new Double(1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_false)\", new Double(0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(1.5)\", new Double(1));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-1.5)\", new Double(-2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(1.5)\", new Double(2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-1.5)\", new Double(-1));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(1.5)\", new Double(2));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-1.5)\", new Double(-1));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"floor('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertXPathValue(context, \"ceiling('NaN')\", new Double(Double.NaN));                                /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertXPathValue(context, \"ceiling(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(2 div 0)\", new Double(Double.POSITIVE_INFINITY));           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testCoreFunctions$catena_52() {\n        try{ assertXPathValue(context, \"string(2)\", \"2\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string($nan)\", \"NaN\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-$nan)\", \"NaN\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-2 div 0)\", \"-Infinity\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(2 div 0)\", \"Infinity\");                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"concat('a', 'b', 'c')\", \"abc\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('abc', 'ab')\", Boolean.TRUE);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('xabc', 'ab')\", Boolean.FALSE);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ab')\", Boolean.TRUE);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ba')\", Boolean.FALSE);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-before('1999/04/01', '/')\",\n            \"1999\");                                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-after('1999/04/01', '/')\",\n            \"04/01\");                                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2, 3)\", \"234\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2)\", \"2345\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1.5, 2.6)\", \"234\");                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0, 3)\", \"12\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0 div 0, 3)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1, 0 div 0)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -42, 1 div 0)\", \"12345\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -1 div 0, 1 div 0)\", \"\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 6, 6)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7, 8)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7)\", \"\");                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string-length('12345')\", new Double(5));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space(' abc  def  ')\", \"abc def\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('abc def')\", \"abc def\");                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('   ')\", \"\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"translate('--aaa--', 'abc-', 'ABC')\", \"AAA\");                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(1)\", Boolean.TRUE);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(0)\", Boolean.FALSE);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('x')\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('')\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list)\", Boolean.TRUE);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list[position() < 1])\", Boolean.FALSE);                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"true()\", Boolean.TRUE);                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"false()\", Boolean.FALSE);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(false())\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(true())\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"null()\", null);                                             }catch(Throwable __SHOULD_BE_IGNORED){}        \n        try{ assertXPathValue(context, \"number('1')\", new Double(1));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_true)\", new Double(1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_false)\", new Double(0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(1.5)\", new Double(1));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-1.5)\", new Double(-2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(1.5)\", new Double(2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-1.5)\", new Double(-1));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(1.5)\", new Double(2));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-1.5)\", new Double(-1));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"floor('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling('NaN')\", new Double(Double.NaN));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertXPathValue(context, \"ceiling(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertXPathValue(context, \"ceiling(2 div 0)\", new Double(Double.POSITIVE_INFINITY));           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testCoreFunctions$catena_53() {\n        try{ assertXPathValue(context, \"string(2)\", \"2\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string($nan)\", \"NaN\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-$nan)\", \"NaN\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(-2 div 0)\", \"-Infinity\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string(2 div 0)\", \"Infinity\");                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"concat('a', 'b', 'c')\", \"abc\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('abc', 'ab')\", Boolean.TRUE);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"starts-with('xabc', 'ab')\", Boolean.FALSE);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ab')\", Boolean.TRUE);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"contains('xabc', 'ba')\", Boolean.FALSE);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-before('1999/04/01', '/')\",\n            \"1999\");                                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(\n            context,\n            \"substring-after('1999/04/01', '/')\",\n            \"04/01\");                                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2, 3)\", \"234\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 2)\", \"2345\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1.5, 2.6)\", \"234\");                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0, 3)\", \"12\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 0 div 0, 3)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 1, 0 div 0)\", \"\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -42, 1 div 0)\", \"12345\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', -1 div 0, 1 div 0)\", \"\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 6, 6)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7, 8)\", \"\");                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"substring('12345', 7)\", \"\");                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"string-length('12345')\", new Double(5));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space(' abc  def  ')\", \"abc def\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('abc def')\", \"abc def\");                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"normalize-space('   ')\", \"\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"translate('--aaa--', 'abc-', 'ABC')\", \"AAA\");                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(1)\", Boolean.TRUE);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(0)\", Boolean.FALSE);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('x')\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean('')\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list)\", Boolean.TRUE);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"boolean(/list[position() < 1])\", Boolean.FALSE);                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"true()\", Boolean.TRUE);                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"false()\", Boolean.FALSE);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(false())\", Boolean.TRUE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"not(true())\", Boolean.FALSE);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"null()\", null);                                             }catch(Throwable __SHOULD_BE_IGNORED){}        \n        try{ assertXPathValue(context, \"number('1')\", new Double(1));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_true)\", new Double(1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"number($bool_false)\", new Double(0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(1.5)\", new Double(1));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-1.5)\", new Double(-2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(1.5)\", new Double(2));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-1.5)\", new Double(-1));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(1.5)\", new Double(2));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-1.5)\", new Double(-1));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValue(context, \"floor('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"floor(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling('NaN')\", new Double(Double.NaN));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"ceiling(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertXPathValue(context, \"ceiling(2 div 0)\", new Double(Double.POSITIVE_INFINITY));                /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertXPathValue(context, \"round('NaN')\", new Double(Double.NaN));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(-2 div 0)\", new Double(Double.NEGATIVE_INFINITY));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"round(2 div 0)\", new Double(Double.POSITIVE_INFINITY));             }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    }
}