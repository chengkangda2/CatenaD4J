{
    "org.apache.commons.jxpath.ri.compiler.ExtensionFunctionTest::testNodeSetReturn": {
        "begin_line_no": 336,
        "end_line_no": 363,
        "file_path": "src/test/org/apache/commons/jxpath/ri/compiler/ExtensionFunctionTest.java",
        "to": [
            "    public void testNodeSetReturn$catena_1() {\n        try{ assertXPathValueIterator(\n            context,\n            \"test:nodeSet()/name\",\n            list(\"Name 1\", \"Name 2\"));                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        assertXPathValueIterator(\n            context,\n            \"test:nodeSet()\",\n            list(testBean.getBeans()[0], testBean.getBeans()[1]));                                          /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ assertXPathPointerIterator(\n            context,\n            \"test:nodeSet()/name\",\n            list(\"/beans[1]/name\", \"/beans[2]/name\"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n            \n        try{ assertXPathValueAndPointer(\n            context,\n            \"test:nodeSet()/name\",\n            \"Name 1\",\n            \"/beans[1]/name\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}        \n\n        try{ assertXPathValueAndPointer(\n            context,\n            \"test:nodeSet()/@name\",\n            \"Name 1\",\n            \"/beans[1]/@name\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testNodeSetReturn$catena_0() {\n        assertXPathValueIterator(\n            context,\n            \"test:nodeSet()/name\",\n            list(\"Name 1\", \"Name 2\"));                                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ assertXPathValueIterator(\n            context,\n            \"test:nodeSet()\",\n            list(testBean.getBeans()[0], testBean.getBeans()[1]));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathPointerIterator(\n            context,\n            \"test:nodeSet()/name\",\n            list(\"/beans[1]/name\", \"/beans[2]/name\"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n            \n        try{ assertXPathValueAndPointer(\n            context,\n            \"test:nodeSet()/name\",\n            \"Name 1\",\n            \"/beans[1]/name\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}        \n\n        try{ assertXPathValueAndPointer(\n            context,\n            \"test:nodeSet()/@name\",\n            \"Name 1\",\n            \"/beans[1]/@name\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testNodeSetReturn$catena_2() {\n        try{ assertXPathValueIterator(\n            context,\n            \"test:nodeSet()/name\",\n            list(\"Name 1\", \"Name 2\"));                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValueIterator(\n            context,\n            \"test:nodeSet()\",\n            list(testBean.getBeans()[0], testBean.getBeans()[1]));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        assertXPathPointerIterator(\n            context,\n            \"test:nodeSet()/name\",\n            list(\"/beans[1]/name\", \"/beans[2]/name\"));                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n            \n        try{ assertXPathValueAndPointer(\n            context,\n            \"test:nodeSet()/name\",\n            \"Name 1\",\n            \"/beans[1]/name\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}        \n\n        try{ assertXPathValueAndPointer(\n            context,\n            \"test:nodeSet()/@name\",\n            \"Name 1\",\n            \"/beans[1]/@name\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testNodeSetReturn$catena_3() {\n        try{ assertXPathValueIterator(\n            context,\n            \"test:nodeSet()/name\",\n            list(\"Name 1\", \"Name 2\"));                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValueIterator(\n            context,\n            \"test:nodeSet()\",\n            list(testBean.getBeans()[0], testBean.getBeans()[1]));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathPointerIterator(\n            context,\n            \"test:nodeSet()/name\",\n            list(\"/beans[1]/name\", \"/beans[2]/name\"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n            \n        assertXPathValueAndPointer(\n            context,\n            \"test:nodeSet()/name\",\n            \"Name 1\",\n            \"/beans[1]/name\");                                                                      /***** ORIGINAL ASSERTION IS HERE *****/        \n\n        try{ assertXPathValueAndPointer(\n            context,\n            \"test:nodeSet()/@name\",\n            \"Name 1\",\n            \"/beans[1]/@name\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testNodeSetReturn$catena_4() {\n        try{ assertXPathValueIterator(\n            context,\n            \"test:nodeSet()/name\",\n            list(\"Name 1\", \"Name 2\"));                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathValueIterator(\n            context,\n            \"test:nodeSet()\",\n            list(testBean.getBeans()[0], testBean.getBeans()[1]));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertXPathPointerIterator(\n            context,\n            \"test:nodeSet()/name\",\n            list(\"/beans[1]/name\", \"/beans[2]/name\"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n            \n        try{ assertXPathValueAndPointer(\n            context,\n            \"test:nodeSet()/name\",\n            \"Name 1\",\n            \"/beans[1]/name\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}        \n\n        assertXPathValueAndPointer(\n            context,\n            \"test:nodeSet()/@name\",\n            \"Name 1\",\n            \"/beans[1]/@name\");                                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
        ]
    }
}