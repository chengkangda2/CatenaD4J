{
    "org.apache.commons.jxpath.ri.compiler.CoreOperationTest::testNan": {
        "begin_line_no": 115,
        "end_line_no": 125,
        "file_path": "src/test/org/apache/commons/jxpath/ri/compiler/CoreOperationTest.java",
        "to": [
            "    public void testNan$catena_6() {\n        try{ assertXPathValue(context, \"$nan > $nan\", Boolean.FALSE, Boolean.class);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"$nan < $nan\", Boolean.FALSE, Boolean.class);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"$nan = $nan\", Boolean.TRUE, Boolean.class);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"$nan > 0\", Boolean.FALSE, Boolean.class);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"$nan < 0\", Boolean.FALSE, Boolean.class);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"$nan = 0\", Boolean.FALSE, Boolean.class);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertXPathValue(context, \"$nan > 1\", Boolean.FALSE, Boolean.class);                                /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertXPathValue(context, \"$nan < 1\", Boolean.FALSE, Boolean.class);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"$nan = 1\", Boolean.FALSE, Boolean.class);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testNan$catena_3() {\n        try{ assertXPathValue(context, \"$nan > $nan\", Boolean.FALSE, Boolean.class);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"$nan < $nan\", Boolean.FALSE, Boolean.class);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"$nan = $nan\", Boolean.TRUE, Boolean.class);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertXPathValue(context, \"$nan > 0\", Boolean.FALSE, Boolean.class);                                /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertXPathValue(context, \"$nan < 0\", Boolean.FALSE, Boolean.class);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"$nan = 0\", Boolean.FALSE, Boolean.class);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"$nan > 1\", Boolean.FALSE, Boolean.class);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"$nan < 1\", Boolean.FALSE, Boolean.class);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"$nan = 1\", Boolean.FALSE, Boolean.class);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testNan$catena_0() {\n        assertXPathValue(context, \"$nan > $nan\", Boolean.FALSE, Boolean.class);                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertXPathValue(context, \"$nan < $nan\", Boolean.FALSE, Boolean.class);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"$nan = $nan\", Boolean.TRUE, Boolean.class);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"$nan > 0\", Boolean.FALSE, Boolean.class);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"$nan < 0\", Boolean.FALSE, Boolean.class);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"$nan = 0\", Boolean.FALSE, Boolean.class);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"$nan > 1\", Boolean.FALSE, Boolean.class);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"$nan < 1\", Boolean.FALSE, Boolean.class);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"$nan = 1\", Boolean.FALSE, Boolean.class);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testNan$catena_1() {\n        try{ assertXPathValue(context, \"$nan > $nan\", Boolean.FALSE, Boolean.class);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertXPathValue(context, \"$nan < $nan\", Boolean.FALSE, Boolean.class);                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertXPathValue(context, \"$nan = $nan\", Boolean.TRUE, Boolean.class);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"$nan > 0\", Boolean.FALSE, Boolean.class);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"$nan < 0\", Boolean.FALSE, Boolean.class);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"$nan = 0\", Boolean.FALSE, Boolean.class);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"$nan > 1\", Boolean.FALSE, Boolean.class);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"$nan < 1\", Boolean.FALSE, Boolean.class);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"$nan = 1\", Boolean.FALSE, Boolean.class);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testNan$catena_2() {\n        try{ assertXPathValue(context, \"$nan > $nan\", Boolean.FALSE, Boolean.class);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"$nan < $nan\", Boolean.FALSE, Boolean.class);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertXPathValue(context, \"$nan = $nan\", Boolean.TRUE, Boolean.class);                              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertXPathValue(context, \"$nan > 0\", Boolean.FALSE, Boolean.class);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"$nan < 0\", Boolean.FALSE, Boolean.class);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"$nan = 0\", Boolean.FALSE, Boolean.class);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"$nan > 1\", Boolean.FALSE, Boolean.class);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"$nan < 1\", Boolean.FALSE, Boolean.class);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"$nan = 1\", Boolean.FALSE, Boolean.class);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testNan$catena_4() {\n        try{ assertXPathValue(context, \"$nan > $nan\", Boolean.FALSE, Boolean.class);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"$nan < $nan\", Boolean.FALSE, Boolean.class);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"$nan = $nan\", Boolean.TRUE, Boolean.class);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"$nan > 0\", Boolean.FALSE, Boolean.class);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertXPathValue(context, \"$nan < 0\", Boolean.FALSE, Boolean.class);                                /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertXPathValue(context, \"$nan = 0\", Boolean.FALSE, Boolean.class);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"$nan > 1\", Boolean.FALSE, Boolean.class);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"$nan < 1\", Boolean.FALSE, Boolean.class);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"$nan = 1\", Boolean.FALSE, Boolean.class);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testNan$catena_5() {\n        try{ assertXPathValue(context, \"$nan > $nan\", Boolean.FALSE, Boolean.class);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"$nan < $nan\", Boolean.FALSE, Boolean.class);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"$nan = $nan\", Boolean.TRUE, Boolean.class);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"$nan > 0\", Boolean.FALSE, Boolean.class);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"$nan < 0\", Boolean.FALSE, Boolean.class);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertXPathValue(context, \"$nan = 0\", Boolean.FALSE, Boolean.class);                                /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertXPathValue(context, \"$nan > 1\", Boolean.FALSE, Boolean.class);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"$nan < 1\", Boolean.FALSE, Boolean.class);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"$nan = 1\", Boolean.FALSE, Boolean.class);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testNan$catena_7() {\n        try{ assertXPathValue(context, \"$nan > $nan\", Boolean.FALSE, Boolean.class);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"$nan < $nan\", Boolean.FALSE, Boolean.class);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"$nan = $nan\", Boolean.TRUE, Boolean.class);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"$nan > 0\", Boolean.FALSE, Boolean.class);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"$nan < 0\", Boolean.FALSE, Boolean.class);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"$nan = 0\", Boolean.FALSE, Boolean.class);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"$nan > 1\", Boolean.FALSE, Boolean.class);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertXPathValue(context, \"$nan < 1\", Boolean.FALSE, Boolean.class);                                /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertXPathValue(context, \"$nan = 1\", Boolean.FALSE, Boolean.class);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testNan$catena_8() {\n        try{ assertXPathValue(context, \"$nan > $nan\", Boolean.FALSE, Boolean.class);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"$nan < $nan\", Boolean.FALSE, Boolean.class);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"$nan = $nan\", Boolean.TRUE, Boolean.class);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"$nan > 0\", Boolean.FALSE, Boolean.class);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"$nan < 0\", Boolean.FALSE, Boolean.class);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"$nan = 0\", Boolean.FALSE, Boolean.class);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"$nan > 1\", Boolean.FALSE, Boolean.class);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertXPathValue(context, \"$nan < 1\", Boolean.FALSE, Boolean.class);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertXPathValue(context, \"$nan = 1\", Boolean.FALSE, Boolean.class);                                /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
        ]
    }
}