{
    "com.fasterxml.jackson.core.json.TestLocation::testOffsetWithInputOffset": {
        "begin_line_no": 55,
        "end_line_no": 80,
        "file_path": "src/test/java/com/fasterxml/jackson/core/json/TestLocation.java",
        "to": [
            "    public void testOffsetWithInputOffset$catena_1() throws Exception\n    {\n        final JsonFactory f = new JsonFactory();\n        JsonLocation loc;\n        JsonParser p;\n        // 3 spaces before, 2 after, just for padding\n        byte[] b = \"   { }  \".getBytes(\"UTF-8\");\n\n        // and then peel them off\n        p = f.createParser(b, 3, b.length-5);\n        try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        loc = p.getTokenLocation();\n        assertEquals(0L, loc.getByteOffset());                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(-1L, loc.getCharOffset());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, loc.getLineNr());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, loc.getColumnNr());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        loc = p.getCurrentLocation();\n        try{ assertEquals(1L, loc.getByteOffset());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1L, loc.getCharOffset());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, loc.getLineNr());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, loc.getColumnNr());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        p.close();\n    }",
            "    public void testOffsetWithInputOffset$catena_5() throws Exception\n    {\n        final JsonFactory f = new JsonFactory();\n        JsonLocation loc;\n        JsonParser p;\n        // 3 spaces before, 2 after, just for padding\n        byte[] b = \"   { }  \".getBytes(\"UTF-8\");\n\n        // and then peel them off\n        p = f.createParser(b, 3, b.length-5);\n        try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        loc = p.getTokenLocation();\n        try{ assertEquals(0L, loc.getByteOffset());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1L, loc.getCharOffset());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, loc.getLineNr());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, loc.getColumnNr());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        loc = p.getCurrentLocation();\n        assertEquals(1L, loc.getByteOffset());                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(-1L, loc.getCharOffset());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, loc.getLineNr());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, loc.getColumnNr());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        p.close();\n    }",
            "    public void testOffsetWithInputOffset$catena_0() throws Exception\n    {\n        final JsonFactory f = new JsonFactory();\n        JsonLocation loc;\n        JsonParser p;\n        // 3 spaces before, 2 after, just for padding\n        byte[] b = \"   { }  \".getBytes(\"UTF-8\");\n\n        // and then peel them off\n        p = f.createParser(b, 3, b.length-5);\n        assertToken(JsonToken.START_OBJECT, p.nextToken());                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n\n        loc = p.getTokenLocation();\n        try{ assertEquals(0L, loc.getByteOffset());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1L, loc.getCharOffset());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, loc.getLineNr());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, loc.getColumnNr());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        loc = p.getCurrentLocation();\n        try{ assertEquals(1L, loc.getByteOffset());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1L, loc.getCharOffset());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, loc.getLineNr());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, loc.getColumnNr());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        p.close();\n    }",
            "    public void testOffsetWithInputOffset$catena_2() throws Exception\n    {\n        final JsonFactory f = new JsonFactory();\n        JsonLocation loc;\n        JsonParser p;\n        // 3 spaces before, 2 after, just for padding\n        byte[] b = \"   { }  \".getBytes(\"UTF-8\");\n\n        // and then peel them off\n        p = f.createParser(b, 3, b.length-5);\n        try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        loc = p.getTokenLocation();\n        try{ assertEquals(0L, loc.getByteOffset());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(-1L, loc.getCharOffset());                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(1, loc.getLineNr());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, loc.getColumnNr());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        loc = p.getCurrentLocation();\n        try{ assertEquals(1L, loc.getByteOffset());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1L, loc.getCharOffset());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, loc.getLineNr());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, loc.getColumnNr());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        p.close();\n    }",
            "    public void testOffsetWithInputOffset$catena_3() throws Exception\n    {\n        final JsonFactory f = new JsonFactory();\n        JsonLocation loc;\n        JsonParser p;\n        // 3 spaces before, 2 after, just for padding\n        byte[] b = \"   { }  \".getBytes(\"UTF-8\");\n\n        // and then peel them off\n        p = f.createParser(b, 3, b.length-5);\n        try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        loc = p.getTokenLocation();\n        try{ assertEquals(0L, loc.getByteOffset());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1L, loc.getCharOffset());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(1, loc.getLineNr());                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(1, loc.getColumnNr());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        loc = p.getCurrentLocation();\n        try{ assertEquals(1L, loc.getByteOffset());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1L, loc.getCharOffset());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, loc.getLineNr());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, loc.getColumnNr());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        p.close();\n    }",
            "    public void testOffsetWithInputOffset$catena_6() throws Exception\n    {\n        final JsonFactory f = new JsonFactory();\n        JsonLocation loc;\n        JsonParser p;\n        // 3 spaces before, 2 after, just for padding\n        byte[] b = \"   { }  \".getBytes(\"UTF-8\");\n\n        // and then peel them off\n        p = f.createParser(b, 3, b.length-5);\n        try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        loc = p.getTokenLocation();\n        try{ assertEquals(0L, loc.getByteOffset());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1L, loc.getCharOffset());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, loc.getLineNr());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, loc.getColumnNr());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        loc = p.getCurrentLocation();\n        try{ assertEquals(1L, loc.getByteOffset());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(-1L, loc.getCharOffset());                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(1, loc.getLineNr());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, loc.getColumnNr());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        p.close();\n    }",
            "    public void testOffsetWithInputOffset$catena_7() throws Exception\n    {\n        final JsonFactory f = new JsonFactory();\n        JsonLocation loc;\n        JsonParser p;\n        // 3 spaces before, 2 after, just for padding\n        byte[] b = \"   { }  \".getBytes(\"UTF-8\");\n\n        // and then peel them off\n        p = f.createParser(b, 3, b.length-5);\n        try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        loc = p.getTokenLocation();\n        try{ assertEquals(0L, loc.getByteOffset());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1L, loc.getCharOffset());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, loc.getLineNr());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, loc.getColumnNr());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        loc = p.getCurrentLocation();\n        try{ assertEquals(1L, loc.getByteOffset());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1L, loc.getCharOffset());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(1, loc.getLineNr());                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(2, loc.getColumnNr());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        p.close();\n    }"
        ]
    }
}