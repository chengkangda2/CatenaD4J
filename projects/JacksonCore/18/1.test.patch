{
    "com.fasterxml.jackson.core.json.TestJsonGeneratorFeatures::testTooBigBigDecimal": {
        "begin_line_no": 111,
        "end_line_no": 163,
        "file_path": "src/test/java/com/fasterxml/jackson/core/json/TestJsonGeneratorFeatures.java",
        "to": [
            "    public void testTooBigBigDecimal$catena_0() throws Exception\n    {\n        JsonFactory f = new JsonFactory();\n        f.enable(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN);\n\n        // 24-Aug-2016, tatu: Initial check limits scale to [-9999,+9999]\n        BigDecimal BIG = new BigDecimal(\"1E+9999\");\n        BigDecimal TOO_BIG = new BigDecimal(\"1E+10000\");\n        BigDecimal SMALL = new BigDecimal(\"1E-9999\");\n        BigDecimal TOO_SMALL = new BigDecimal(\"1E-10000\");\n\n        for (boolean useBytes : new boolean[] { false, true } ) {\n            for (boolean asString : new boolean[] { false, true } ) {\n                JsonGenerator g;\n                \n                if (useBytes) {\n                    g = f.createGenerator(new ByteArrayOutputStream());\n                } else {\n                    g = f.createGenerator(new StringWriter());\n                }\n                if (asString) {\n                    g.enable(JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS);\n                }\n\n                // first, ok cases:\n                g.writeStartArray();\n                g.writeNumber(BIG);\n                g.writeNumber(SMALL);\n                g.writeEndArray();\n                g.close();\n\n                // then invalid\n                for (BigDecimal input : new BigDecimal[] { TOO_BIG, TOO_SMALL }) {\n                    if (useBytes) {\n                        g = f.createGenerator(new ByteArrayOutputStream());\n                    } else {\n                        g = f.createGenerator(new StringWriter());\n                    }\n                    if (asString) {\n                        g.enable(JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS);\n                    }\n                    try {\n                        g.writeNumber(input);\n                        fail(\"Should not have written without exception: \"+input);                          /***** ORIGINAL ASSERTION IS HERE *****/\n                    } catch (JsonGenerationException e) {\n                        try{ verifyException(e, \"Attempt to write plain `java.math.BigDecimal`\");           }catch(Throwable __SHOULD_BE_IGNORED){}\n                        try{ verifyException(e, \"illegal scale\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n                    }\n                    g.close();\n                }\n            }\n        }\n    }",
            "    public void testTooBigBigDecimal$catena_1() throws Exception\n    {\n        JsonFactory f = new JsonFactory();\n        f.enable(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN);\n\n        // 24-Aug-2016, tatu: Initial check limits scale to [-9999,+9999]\n        BigDecimal BIG = new BigDecimal(\"1E+9999\");\n        BigDecimal TOO_BIG = new BigDecimal(\"1E+10000\");\n        BigDecimal SMALL = new BigDecimal(\"1E-9999\");\n        BigDecimal TOO_SMALL = new BigDecimal(\"1E-10000\");\n\n        for (boolean useBytes : new boolean[] { false, true } ) {\n            for (boolean asString : new boolean[] { false, true } ) {\n                JsonGenerator g;\n                \n                if (useBytes) {\n                    g = f.createGenerator(new ByteArrayOutputStream());\n                } else {\n                    g = f.createGenerator(new StringWriter());\n                }\n                if (asString) {\n                    g.enable(JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS);\n                }\n\n                // first, ok cases:\n                g.writeStartArray();\n                g.writeNumber(BIG);\n                g.writeNumber(SMALL);\n                g.writeEndArray();\n                g.close();\n\n                // then invalid\n                for (BigDecimal input : new BigDecimal[] { TOO_BIG, TOO_SMALL }) {\n                    if (useBytes) {\n                        g = f.createGenerator(new ByteArrayOutputStream());\n                    } else {\n                        g = f.createGenerator(new StringWriter());\n                    }\n                    if (asString) {\n                        g.enable(JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS);\n                    }\n                    try {\n                        g.writeNumber(input);\n                        try{ fail(\"Should not have written without exception: \"+input);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n                    } catch (JsonGenerationException e) {\n                        verifyException(e, \"Attempt to write plain `java.math.BigDecimal`\");                /***** ORIGINAL ASSERTION IS HERE *****/\n                        try{ verifyException(e, \"illegal scale\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n                    }\n                    g.close();\n                }\n            }\n        }\n    }",
            "    public void testTooBigBigDecimal$catena_2() throws Exception\n    {\n        JsonFactory f = new JsonFactory();\n        f.enable(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN);\n\n        // 24-Aug-2016, tatu: Initial check limits scale to [-9999,+9999]\n        BigDecimal BIG = new BigDecimal(\"1E+9999\");\n        BigDecimal TOO_BIG = new BigDecimal(\"1E+10000\");\n        BigDecimal SMALL = new BigDecimal(\"1E-9999\");\n        BigDecimal TOO_SMALL = new BigDecimal(\"1E-10000\");\n\n        for (boolean useBytes : new boolean[] { false, true } ) {\n            for (boolean asString : new boolean[] { false, true } ) {\n                JsonGenerator g;\n                \n                if (useBytes) {\n                    g = f.createGenerator(new ByteArrayOutputStream());\n                } else {\n                    g = f.createGenerator(new StringWriter());\n                }\n                if (asString) {\n                    g.enable(JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS);\n                }\n\n                // first, ok cases:\n                g.writeStartArray();\n                g.writeNumber(BIG);\n                g.writeNumber(SMALL);\n                g.writeEndArray();\n                g.close();\n\n                // then invalid\n                for (BigDecimal input : new BigDecimal[] { TOO_BIG, TOO_SMALL }) {\n                    if (useBytes) {\n                        g = f.createGenerator(new ByteArrayOutputStream());\n                    } else {\n                        g = f.createGenerator(new StringWriter());\n                    }\n                    if (asString) {\n                        g.enable(JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS);\n                    }\n                    try {\n                        g.writeNumber(input);\n                        try{ fail(\"Should not have written without exception: \"+input);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n                    } catch (JsonGenerationException e) {\n                        try{ verifyException(e, \"Attempt to write plain `java.math.BigDecimal`\");           }catch(Throwable __SHOULD_BE_IGNORED){}\n                        verifyException(e, \"illegal scale\");                                                /***** ORIGINAL ASSERTION IS HERE *****/\n                    }\n                    g.close();\n                }\n            }\n        }\n    }"
        ]
    }
}