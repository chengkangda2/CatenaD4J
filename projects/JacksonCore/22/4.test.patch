{
    "com.fasterxml.jackson.core.filter.BasicParserFilteringTest::testNotAllowMultipleMatchesWithoutPath2": {
        "begin_line_no": 123,
        "end_line_no": 136,
        "file_path": "src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java",
        "to": [
            "    @SuppressWarnings(\"resource\")\n    public void testNotAllowMultipleMatchesWithoutPath2$catena_0() throws Exception\n    {\n        String jsonString = aposToQuotes(\"{'a':123,'array':[1,2],'array':[3,4],'ob':{'value0':2,'value':3,'value2':4,'value':{'value0':2}},'value':\\\"val\\\",'b':true}\");\n        JsonParser p0 = JSON_F.createParser(jsonString);\n        FilteringParserDelegate p = new FilteringParserDelegate(p0,\n                new IndexMatchFilter(1),\n                false, // includePath\n                false // multipleMatches -false\n        );\n        String result = readAndWrite(JSON_F, p);\n        assertEquals(aposToQuotes(\"2\"), result);                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(1, p.getMatchCount());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @SuppressWarnings(\"resource\")\n    public void testNotAllowMultipleMatchesWithoutPath2$catena_1() throws Exception\n    {\n        String jsonString = aposToQuotes(\"{'a':123,'array':[1,2],'array':[3,4],'ob':{'value0':2,'value':3,'value2':4,'value':{'value0':2}},'value':\\\"val\\\",'b':true}\");\n        JsonParser p0 = JSON_F.createParser(jsonString);\n        FilteringParserDelegate p = new FilteringParserDelegate(p0,\n                new IndexMatchFilter(1),\n                false, // includePath\n                false // multipleMatches -false\n        );\n        String result = readAndWrite(JSON_F, p);\n        try{ assertEquals(aposToQuotes(\"2\"), result);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(1, p.getMatchCount());                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
        ]
    },
    "com.fasterxml.jackson.core.filter.BasicParserFilteringTest::testSingleMatchFilteringWithPath": {
        "begin_line_no": 94,
        "end_line_no": 106,
        "file_path": "src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java",
        "to": [
            "    public void testSingleMatchFilteringWithPath$catena_0() throws Exception\n    {\n        String jsonString = aposToQuotes(\"{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'b':true}\");\n        JsonParser p0 = JSON_F.createParser(jsonString);\n        FilteringParserDelegate p = new FilteringParserDelegate(p0,\n                new NameMatchFilter(\"a\"),\n                true, // includePath\n                false // multipleMatches\n        );\n        String result = readAndWrite(JSON_F, p);\n        assertEquals(aposToQuotes(\"{'a':123}\"), result);                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(1, p.getMatchCount());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    },
    "com.fasterxml.jackson.core.filter.BasicParserFilteringTest::testAllowMultipleMatchesWithPath1": {
        "begin_line_no": 154,
        "end_line_no": 167,
        "file_path": "src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java",
        "to": [
            "    @SuppressWarnings(\"resource\")\n    public void testAllowMultipleMatchesWithPath1$catena_0() throws Exception\n    {\n        String jsonString = aposToQuotes(\"{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4,'value':{'value0':2}},'value':\\\"val\\\",'b':true}\");\n        JsonParser p0 = JSON_F.createParser(jsonString);\n        FilteringParserDelegate p = new FilteringParserDelegate(p0,\n                new NameMatchFilter(\"value\"),\n                true, // includePath\n                true // multipleMatches - true\n        );\n        String result = readAndWrite(JSON_F, p);\n        assertEquals(aposToQuotes(\"{\\\"ob\\\":{\\\"value\\\":3,\\\"value\\\":{\\\"value0\\\":2}},\\\"value\\\":\\\"val\\\"}\"), result);         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(3, p.getMatchCount());                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    },
    "com.fasterxml.jackson.core.filter.BasicParserFilteringTest::testAllowMultipleMatchesWithPath2": {
        "begin_line_no": 170,
        "end_line_no": 183,
        "file_path": "src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java",
        "to": [
            "    @SuppressWarnings(\"resource\")\n    public void testAllowMultipleMatchesWithPath2$catena_0() throws Exception\n    {\n        String jsonString = aposToQuotes(\"{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'array':[3,4],'value':{'value0':2}},'value':\\\"val\\\",'b':true}\");\n        JsonParser p0 = JSON_F.createParser(jsonString);\n        FilteringParserDelegate p = new FilteringParserDelegate(p0,\n                new IndexMatchFilter(1),\n                true, // includePath\n                true // multipleMatches - true\n        );\n        String result = readAndWrite(JSON_F, p);\n        assertEquals(aposToQuotes(\"{\\\"array\\\":[2],\\\"ob\\\":{\\\"array\\\":[4]}}\"), result);                       /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(2, p.getMatchCount());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    },
    "com.fasterxml.jackson.core.filter.BasicParserFilteringTest::testMultipleMatchFilteringWithPath1": {
        "begin_line_no": 185,
        "end_line_no": 196,
        "file_path": "src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java",
        "to": [
            "    @SuppressWarnings(\"resource\")\n    public void testMultipleMatchFilteringWithPath1$catena_0() throws Exception\n    {\n        JsonParser p0 = JSON_F.createParser(SIMPLE);\n        FilteringParserDelegate p = new FilteringParserDelegate(p0,\n                new NameMatchFilter(\"value0\", \"value2\"),\n                true, /* includePath */ true /* multipleMatches */ );\n        String result = readAndWrite(JSON_F, p);\n        assertEquals(aposToQuotes(\"{'ob':{'value0':2,'value2':4}}\"), result);                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(2, p.getMatchCount());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }"
        ]
    },
    "com.fasterxml.jackson.core.filter.BasicParserFilteringTest::testMultipleMatchFilteringWithPath2": {
        "begin_line_no": 198,
        "end_line_no": 210,
        "file_path": "src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java",
        "to": [
            "    @SuppressWarnings(\"resource\")\n    public void testMultipleMatchFilteringWithPath2$catena_0() throws Exception\n    {\n        String INPUT = aposToQuotes(\"{'a':123,'ob':{'value0':2,'value':3,'value2':4},'b':true}\");\n        JsonParser p0 = JSON_F.createParser(INPUT);\n        FilteringParserDelegate p = new FilteringParserDelegate(p0,\n                new NameMatchFilter(\"b\", \"value\"),\n                true, true);\n\n        String result = readAndWrite(JSON_F, p);\n        assertEquals(aposToQuotes(\"{'ob':{'value':3},'b':true}\"), result);                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(2, p.getMatchCount());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    },
    "com.fasterxml.jackson.core.filter.BasicParserFilteringTest::testMultipleMatchFilteringWithPath3": {
        "begin_line_no": 212,
        "end_line_no": 223,
        "file_path": "src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java",
        "to": [
            "    @SuppressWarnings(\"resource\")\n    public void testMultipleMatchFilteringWithPath3$catena_0() throws Exception\n    {\n        final String JSON = aposToQuotes(\"{'root':{'a0':true,'a':{'value':3},'b':{'value':\\\"foo\\\"}},'b0':false}\");\n        JsonParser p0 = JSON_F.createParser(JSON);\n        FilteringParserDelegate p = new FilteringParserDelegate(p0,\n                new NameMatchFilter(\"value\"),\n                true, true);\n        String result = readAndWrite(JSON_F, p);\n        assertEquals(aposToQuotes(\"{'root':{'a':{'value':3},'b':{'value':\\\"foo\\\"}}}\"), result);             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(2, p.getMatchCount());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    },
    "com.fasterxml.jackson.core.filter.BasicParserFilteringTest::testSingleMatchFilteringWithoutPath": {
        "begin_line_no": 80,
        "end_line_no": 92,
        "file_path": "src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java",
        "to": [
            "    @SuppressWarnings(\"resource\")\n    public void testSingleMatchFilteringWithoutPath$catena_0() throws Exception\n    {\n        JsonParser p0 = JSON_F.createParser(SIMPLE);\n        FilteringParserDelegate p = new FilteringParserDelegate(p0,\n               new NameMatchFilter(\"value\"),\n                   false, // includePath\n                   false // multipleMatches\n                );\n        String result = readAndWrite(JSON_F, p);\n        assertEquals(aposToQuotes(\"3\"), result);                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(1, p.getMatchCount());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    },
    "com.fasterxml.jackson.core.filter.BasicParserFilteringTest::testNotAllowMultipleMatchesWithoutPath1": {
        "begin_line_no": 108,
        "end_line_no": 121,
        "file_path": "src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java",
        "to": [
            "    @SuppressWarnings(\"resource\")\n    public void testNotAllowMultipleMatchesWithoutPath1$catena_0() throws Exception\n    {\n        String jsonString = aposToQuotes(\"{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4,'value':{'value0':2}},'b':true}\");\n        JsonParser p0 = JSON_F.createParser(jsonString);\n        FilteringParserDelegate p = new FilteringParserDelegate(p0,\n               new NameMatchFilter(\"value\"),\n                   false, // includePath\n                   false // multipleMatches -false\n                );\n        String result = readAndWrite(JSON_F, p);\n        assertEquals(aposToQuotes(\"3\"), result);                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(1, p.getMatchCount());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    },
    "com.fasterxml.jackson.core.filter.BasicParserFilteringTest::testIndexMatchWithPath1": {
        "begin_line_no": 225,
        "end_line_no": 239,
        "file_path": "src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java",
        "to": [
            "    @SuppressWarnings(\"resource\")\n    public void testIndexMatchWithPath1$catena_0() throws Exception\n    {\n        FilteringParserDelegate p = new FilteringParserDelegate(JSON_F.createParser(SIMPLE),\n                new IndexMatchFilter(1), true, true);\n        String result = readAndWrite(JSON_F, p);\n        assertEquals(aposToQuotes(\"{'array':[2]}\"), result);                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(1, p.getMatchCount());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        p = new FilteringParserDelegate(JSON_F.createParser(SIMPLE),\n                new IndexMatchFilter(0), true, true);\n        result = readAndWrite(JSON_F, p);\n        try{ assertEquals(aposToQuotes(\"{'array':[1]}\"), result);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, p.getMatchCount());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @SuppressWarnings(\"resource\")\n    public void testIndexMatchWithPath1$catena_2() throws Exception\n    {\n        FilteringParserDelegate p = new FilteringParserDelegate(JSON_F.createParser(SIMPLE),\n                new IndexMatchFilter(1), true, true);\n        String result = readAndWrite(JSON_F, p);\n        try{ assertEquals(aposToQuotes(\"{'array':[2]}\"), result);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, p.getMatchCount());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        p = new FilteringParserDelegate(JSON_F.createParser(SIMPLE),\n                new IndexMatchFilter(0), true, true);\n        result = readAndWrite(JSON_F, p);\n        assertEquals(aposToQuotes(\"{'array':[1]}\"), result);                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(1, p.getMatchCount());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    },
    "com.fasterxml.jackson.core.filter.BasicParserFilteringTest::testIndexMatchWithPath2": {
        "begin_line_no": 241,
        "end_line_no": 254,
        "file_path": "src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java",
        "to": [
            "    @SuppressWarnings(\"resource\")\n    public void testIndexMatchWithPath2$catena_0() throws Exception\n    {\n        FilteringParserDelegate p = new FilteringParserDelegate(JSON_F.createParser(SIMPLE),\n                new IndexMatchFilter(0, 1), true, true);\n        assertEquals(aposToQuotes(\"{'array':[1,2]}\"), readAndWrite(JSON_F, p));                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(2, p.getMatchCount());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n        String JSON = aposToQuotes(\"{'a':123,'array':[1,2,3,4,5],'b':[1,2,3]}\");\n        p = new FilteringParserDelegate(JSON_F.createParser(JSON),\n                new IndexMatchFilter(1, 3), true, true);\n        try{ assertEquals(aposToQuotes(\"{'array':[2,4],'b':[2]}\"), readAndWrite(JSON_F, p));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, p.getMatchCount());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @SuppressWarnings(\"resource\")\n    public void testIndexMatchWithPath2$catena_2() throws Exception\n    {\n        FilteringParserDelegate p = new FilteringParserDelegate(JSON_F.createParser(SIMPLE),\n                new IndexMatchFilter(0, 1), true, true);\n        try{ assertEquals(aposToQuotes(\"{'array':[1,2]}\"), readAndWrite(JSON_F, p));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, p.getMatchCount());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n        String JSON = aposToQuotes(\"{'a':123,'array':[1,2,3,4,5],'b':[1,2,3]}\");\n        p = new FilteringParserDelegate(JSON_F.createParser(JSON),\n                new IndexMatchFilter(1, 3), true, true);\n        assertEquals(aposToQuotes(\"{'array':[2,4],'b':[2]}\"), readAndWrite(JSON_F, p));                     /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(3, p.getMatchCount());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    },
    "com.fasterxml.jackson.core.filter.BasicParserFilteringTest::testAllowMultipleMatchesWithoutPath": {
        "begin_line_no": 138,
        "end_line_no": 151,
        "file_path": "src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java",
        "to": [
            "    @SuppressWarnings(\"resource\")\n    public void testAllowMultipleMatchesWithoutPath$catena_0() throws Exception\n    {\n        String jsonString = aposToQuotes(\"{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4,'value':{'value0':2}},'value':\\\"val\\\",'b':true}\");\n        JsonParser p0 = JSON_F.createParser(jsonString);\n        FilteringParserDelegate p = new FilteringParserDelegate(p0,\n               new NameMatchFilter(\"value\"),\n                   false, // includePath\n                   true // multipleMatches - true\n                );\n        String result = readAndWrite(JSON_F, p);\n        assertEquals(aposToQuotes(\"3 {\\\"value0\\\":2} \\\"val\\\"\"), result);                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(3, p.getMatchCount());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    }
}