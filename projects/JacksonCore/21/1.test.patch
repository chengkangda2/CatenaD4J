{
    "com.fasterxml.jackson.core.filter.TokenVerifyingParserFiltering330Test::testSkippingForSingleWithPath": {
        "begin_line_no": 120,
        "end_line_no": 136,
        "file_path": "src/test/java/com/fasterxml/jackson/core/filter/TokenVerifyingParserFiltering330Test.java",
        "to": [
            "    @SuppressWarnings(\"resource\")\n    public void testSkippingForSingleWithPath$catena_2() throws Exception\n    {\n        JsonParser p0 = JSON_F.createParser(SIMPLE);\n        JsonParser p = new FilteringParserDelegate(p0,\n               new NameMatchFilter(\"value\"),\n                   true, // includePath\n                   false // multipleMatches\n                );\n\n//        assertEquals(aposToQuotes(\"{'ob':{'value':3}}\"), result);\n\n        try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        p.skipChildren();\n        try{ assertEquals(JsonToken.END_OBJECT, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertNull(p.nextToken());                                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n    }",
            "    @SuppressWarnings(\"resource\")\n    public void testSkippingForSingleWithPath$catena_1() throws Exception\n    {\n        JsonParser p0 = JSON_F.createParser(SIMPLE);\n        JsonParser p = new FilteringParserDelegate(p0,\n               new NameMatchFilter(\"value\"),\n                   true, // includePath\n                   false // multipleMatches\n                );\n\n//        assertEquals(aposToQuotes(\"{'ob':{'value':3}}\"), result);\n\n        try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        p.skipChildren();\n        assertEquals(JsonToken.END_OBJECT, p.getCurrentToken());                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertNull(p.nextToken());                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @SuppressWarnings(\"resource\")\n    public void testSkippingForSingleWithPath$catena_0() throws Exception\n    {\n        JsonParser p0 = JSON_F.createParser(SIMPLE);\n        JsonParser p = new FilteringParserDelegate(p0,\n               new NameMatchFilter(\"value\"),\n                   true, // includePath\n                   false // multipleMatches\n                );\n\n//        assertEquals(aposToQuotes(\"{'ob':{'value':3}}\"), result);\n\n        assertToken(JsonToken.START_OBJECT, p.nextToken());                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        p.skipChildren();\n        try{ assertEquals(JsonToken.END_OBJECT, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(p.nextToken());                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    },
    "com.fasterxml.jackson.core.filter.TokenVerifyingParserFiltering330Test::testTokensSingleMatchWithPath": {
        "begin_line_no": 65,
        "end_line_no": 118,
        "file_path": "src/test/java/com/fasterxml/jackson/core/filter/TokenVerifyingParserFiltering330Test.java",
        "to": [
            "    @SuppressWarnings(\"resource\")\n    public void testTokensSingleMatchWithPath$catena_24() throws Exception\n    {\n        JsonParser p0 = JSON_F.createParser(SIMPLE);\n        JsonParser p = new FilteringParserDelegate(p0,\n               new NameMatchFilter(\"value\"),\n                   true, // includePath\n                   false // multipleMatches\n                );\n\n        try{ assertFalse(p.hasCurrentToken());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(p.getCurrentToken());                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonTokenId.ID_NO_TOKEN, p.getCurrentTokenId());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(p.isExpectedStartObjectToken());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(p.isExpectedStartArrayToken());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n// {'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'b':true}\n//      String result = readAndWrite(JSON_F, p);\n//      assertEquals(aposToQuotes(\"{'ob':{'value':3}}\"), result);\n\n        try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.START_OBJECT, p.getCurrentToken());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(p.isExpectedStartObjectToken());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(p.isExpectedStartArrayToken());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.FIELD_NAME, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"ob\", p.getCurrentName());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n//        assertEquals(\"ob\", p.getText());\n\n        try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"ob\", p.getCurrentName());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"value\", p.getCurrentName());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"value\", p.getText());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.VALUE_NUMBER_INT, p.getCurrentToken());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(NumberType.INT, p.getNumberType());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, p.getIntValue());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"value\", p.getCurrentName());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.END_OBJECT, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.END_OBJECT, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        assertToken(JsonToken.END_OBJECT, p.nextToken());                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(JsonToken.END_OBJECT, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        p.clearCurrentToken();\n        try{ assertNull(p.getCurrentToken());                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        p.close();\n    }",
            "    @SuppressWarnings(\"resource\")\n    public void testTokensSingleMatchWithPath$catena_25() throws Exception\n    {\n        JsonParser p0 = JSON_F.createParser(SIMPLE);\n        JsonParser p = new FilteringParserDelegate(p0,\n               new NameMatchFilter(\"value\"),\n                   true, // includePath\n                   false // multipleMatches\n                );\n\n        try{ assertFalse(p.hasCurrentToken());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(p.getCurrentToken());                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonTokenId.ID_NO_TOKEN, p.getCurrentTokenId());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(p.isExpectedStartObjectToken());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(p.isExpectedStartArrayToken());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n// {'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'b':true}\n//      String result = readAndWrite(JSON_F, p);\n//      assertEquals(aposToQuotes(\"{'ob':{'value':3}}\"), result);\n\n        try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.START_OBJECT, p.getCurrentToken());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(p.isExpectedStartObjectToken());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(p.isExpectedStartArrayToken());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.FIELD_NAME, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"ob\", p.getCurrentName());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n//        assertEquals(\"ob\", p.getText());\n\n        try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"ob\", p.getCurrentName());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"value\", p.getCurrentName());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"value\", p.getText());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.VALUE_NUMBER_INT, p.getCurrentToken());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(NumberType.INT, p.getNumberType());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, p.getIntValue());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"value\", p.getCurrentName());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.END_OBJECT, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.END_OBJECT, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.END_OBJECT, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(JsonToken.END_OBJECT, p.getCurrentToken());                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        p.clearCurrentToken();\n        try{ assertNull(p.getCurrentToken());                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        p.close();\n    }",
            "    @SuppressWarnings(\"resource\")\n    public void testTokensSingleMatchWithPath$catena_0() throws Exception\n    {\n        JsonParser p0 = JSON_F.createParser(SIMPLE);\n        JsonParser p = new FilteringParserDelegate(p0,\n               new NameMatchFilter(\"value\"),\n                   true, // includePath\n                   false // multipleMatches\n                );\n\n        assertFalse(p.hasCurrentToken());                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertNull(p.getCurrentToken());                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonTokenId.ID_NO_TOKEN, p.getCurrentTokenId());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(p.isExpectedStartObjectToken());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(p.isExpectedStartArrayToken());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n// {'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'b':true}\n//      String result = readAndWrite(JSON_F, p);\n//      assertEquals(aposToQuotes(\"{'ob':{'value':3}}\"), result);\n\n        try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.START_OBJECT, p.getCurrentToken());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(p.isExpectedStartObjectToken());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(p.isExpectedStartArrayToken());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.FIELD_NAME, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"ob\", p.getCurrentName());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n//        assertEquals(\"ob\", p.getText());\n\n        try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"ob\", p.getCurrentName());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"value\", p.getCurrentName());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"value\", p.getText());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.VALUE_NUMBER_INT, p.getCurrentToken());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(NumberType.INT, p.getNumberType());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, p.getIntValue());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"value\", p.getCurrentName());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.END_OBJECT, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.END_OBJECT, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.END_OBJECT, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.END_OBJECT, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        p.clearCurrentToken();\n        try{ assertNull(p.getCurrentToken());                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        p.close();\n    }",
            "    @SuppressWarnings(\"resource\")\n    public void testTokensSingleMatchWithPath$catena_1() throws Exception\n    {\n        JsonParser p0 = JSON_F.createParser(SIMPLE);\n        JsonParser p = new FilteringParserDelegate(p0,\n               new NameMatchFilter(\"value\"),\n                   true, // includePath\n                   false // multipleMatches\n                );\n\n        try{ assertFalse(p.hasCurrentToken());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertNull(p.getCurrentToken());                                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(JsonTokenId.ID_NO_TOKEN, p.getCurrentTokenId());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(p.isExpectedStartObjectToken());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(p.isExpectedStartArrayToken());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n// {'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'b':true}\n//      String result = readAndWrite(JSON_F, p);\n//      assertEquals(aposToQuotes(\"{'ob':{'value':3}}\"), result);\n\n        try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.START_OBJECT, p.getCurrentToken());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(p.isExpectedStartObjectToken());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(p.isExpectedStartArrayToken());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.FIELD_NAME, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"ob\", p.getCurrentName());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n//        assertEquals(\"ob\", p.getText());\n\n        try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"ob\", p.getCurrentName());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"value\", p.getCurrentName());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"value\", p.getText());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.VALUE_NUMBER_INT, p.getCurrentToken());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(NumberType.INT, p.getNumberType());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, p.getIntValue());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"value\", p.getCurrentName());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.END_OBJECT, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.END_OBJECT, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.END_OBJECT, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.END_OBJECT, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        p.clearCurrentToken();\n        try{ assertNull(p.getCurrentToken());                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        p.close();\n    }",
            "    @SuppressWarnings(\"resource\")\n    public void testTokensSingleMatchWithPath$catena_2() throws Exception\n    {\n        JsonParser p0 = JSON_F.createParser(SIMPLE);\n        JsonParser p = new FilteringParserDelegate(p0,\n               new NameMatchFilter(\"value\"),\n                   true, // includePath\n                   false // multipleMatches\n                );\n\n        try{ assertFalse(p.hasCurrentToken());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(p.getCurrentToken());                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(JsonTokenId.ID_NO_TOKEN, p.getCurrentTokenId());                                       /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertFalse(p.isExpectedStartObjectToken());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(p.isExpectedStartArrayToken());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n// {'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'b':true}\n//      String result = readAndWrite(JSON_F, p);\n//      assertEquals(aposToQuotes(\"{'ob':{'value':3}}\"), result);\n\n        try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.START_OBJECT, p.getCurrentToken());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(p.isExpectedStartObjectToken());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(p.isExpectedStartArrayToken());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.FIELD_NAME, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"ob\", p.getCurrentName());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n//        assertEquals(\"ob\", p.getText());\n\n        try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"ob\", p.getCurrentName());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"value\", p.getCurrentName());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"value\", p.getText());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.VALUE_NUMBER_INT, p.getCurrentToken());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(NumberType.INT, p.getNumberType());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, p.getIntValue());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"value\", p.getCurrentName());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.END_OBJECT, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.END_OBJECT, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.END_OBJECT, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.END_OBJECT, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        p.clearCurrentToken();\n        try{ assertNull(p.getCurrentToken());                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        p.close();\n    }",
            "    @SuppressWarnings(\"resource\")\n    public void testTokensSingleMatchWithPath$catena_3() throws Exception\n    {\n        JsonParser p0 = JSON_F.createParser(SIMPLE);\n        JsonParser p = new FilteringParserDelegate(p0,\n               new NameMatchFilter(\"value\"),\n                   true, // includePath\n                   false // multipleMatches\n                );\n\n        try{ assertFalse(p.hasCurrentToken());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(p.getCurrentToken());                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonTokenId.ID_NO_TOKEN, p.getCurrentTokenId());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertFalse(p.isExpectedStartObjectToken());                                                        /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertFalse(p.isExpectedStartArrayToken());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n// {'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'b':true}\n//      String result = readAndWrite(JSON_F, p);\n//      assertEquals(aposToQuotes(\"{'ob':{'value':3}}\"), result);\n\n        try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.START_OBJECT, p.getCurrentToken());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(p.isExpectedStartObjectToken());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(p.isExpectedStartArrayToken());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.FIELD_NAME, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"ob\", p.getCurrentName());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n//        assertEquals(\"ob\", p.getText());\n\n        try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"ob\", p.getCurrentName());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"value\", p.getCurrentName());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"value\", p.getText());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.VALUE_NUMBER_INT, p.getCurrentToken());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(NumberType.INT, p.getNumberType());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, p.getIntValue());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"value\", p.getCurrentName());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.END_OBJECT, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.END_OBJECT, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.END_OBJECT, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.END_OBJECT, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        p.clearCurrentToken();\n        try{ assertNull(p.getCurrentToken());                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        p.close();\n    }",
            "    @SuppressWarnings(\"resource\")\n    public void testTokensSingleMatchWithPath$catena_4() throws Exception\n    {\n        JsonParser p0 = JSON_F.createParser(SIMPLE);\n        JsonParser p = new FilteringParserDelegate(p0,\n               new NameMatchFilter(\"value\"),\n                   true, // includePath\n                   false // multipleMatches\n                );\n\n        try{ assertFalse(p.hasCurrentToken());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(p.getCurrentToken());                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonTokenId.ID_NO_TOKEN, p.getCurrentTokenId());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(p.isExpectedStartObjectToken());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertFalse(p.isExpectedStartArrayToken());                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        \n// {'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'b':true}\n//      String result = readAndWrite(JSON_F, p);\n//      assertEquals(aposToQuotes(\"{'ob':{'value':3}}\"), result);\n\n        try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.START_OBJECT, p.getCurrentToken());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(p.isExpectedStartObjectToken());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(p.isExpectedStartArrayToken());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.FIELD_NAME, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"ob\", p.getCurrentName());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n//        assertEquals(\"ob\", p.getText());\n\n        try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"ob\", p.getCurrentName());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"value\", p.getCurrentName());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"value\", p.getText());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.VALUE_NUMBER_INT, p.getCurrentToken());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(NumberType.INT, p.getNumberType());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, p.getIntValue());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"value\", p.getCurrentName());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.END_OBJECT, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.END_OBJECT, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.END_OBJECT, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.END_OBJECT, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        p.clearCurrentToken();\n        try{ assertNull(p.getCurrentToken());                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        p.close();\n    }",
            "    @SuppressWarnings(\"resource\")\n    public void testTokensSingleMatchWithPath$catena_5() throws Exception\n    {\n        JsonParser p0 = JSON_F.createParser(SIMPLE);\n        JsonParser p = new FilteringParserDelegate(p0,\n               new NameMatchFilter(\"value\"),\n                   true, // includePath\n                   false // multipleMatches\n                );\n\n        try{ assertFalse(p.hasCurrentToken());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(p.getCurrentToken());                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonTokenId.ID_NO_TOKEN, p.getCurrentTokenId());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(p.isExpectedStartObjectToken());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(p.isExpectedStartArrayToken());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n// {'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'b':true}\n//      String result = readAndWrite(JSON_F, p);\n//      assertEquals(aposToQuotes(\"{'ob':{'value':3}}\"), result);\n\n        assertToken(JsonToken.START_OBJECT, p.nextToken());                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(JsonToken.START_OBJECT, p.getCurrentToken());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(p.isExpectedStartObjectToken());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(p.isExpectedStartArrayToken());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.FIELD_NAME, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"ob\", p.getCurrentName());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n//        assertEquals(\"ob\", p.getText());\n\n        try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"ob\", p.getCurrentName());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"value\", p.getCurrentName());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"value\", p.getText());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.VALUE_NUMBER_INT, p.getCurrentToken());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(NumberType.INT, p.getNumberType());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, p.getIntValue());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"value\", p.getCurrentName());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.END_OBJECT, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.END_OBJECT, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.END_OBJECT, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.END_OBJECT, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        p.clearCurrentToken();\n        try{ assertNull(p.getCurrentToken());                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        p.close();\n    }",
            "    @SuppressWarnings(\"resource\")\n    public void testTokensSingleMatchWithPath$catena_6() throws Exception\n    {\n        JsonParser p0 = JSON_F.createParser(SIMPLE);\n        JsonParser p = new FilteringParserDelegate(p0,\n               new NameMatchFilter(\"value\"),\n                   true, // includePath\n                   false // multipleMatches\n                );\n\n        try{ assertFalse(p.hasCurrentToken());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(p.getCurrentToken());                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonTokenId.ID_NO_TOKEN, p.getCurrentTokenId());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(p.isExpectedStartObjectToken());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(p.isExpectedStartArrayToken());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n// {'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'b':true}\n//      String result = readAndWrite(JSON_F, p);\n//      assertEquals(aposToQuotes(\"{'ob':{'value':3}}\"), result);\n\n        try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(JsonToken.START_OBJECT, p.getCurrentToken());                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(p.isExpectedStartObjectToken());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(p.isExpectedStartArrayToken());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.FIELD_NAME, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"ob\", p.getCurrentName());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n//        assertEquals(\"ob\", p.getText());\n\n        try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"ob\", p.getCurrentName());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"value\", p.getCurrentName());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"value\", p.getText());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.VALUE_NUMBER_INT, p.getCurrentToken());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(NumberType.INT, p.getNumberType());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, p.getIntValue());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"value\", p.getCurrentName());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.END_OBJECT, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.END_OBJECT, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.END_OBJECT, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.END_OBJECT, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        p.clearCurrentToken();\n        try{ assertNull(p.getCurrentToken());                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        p.close();\n    }",
            "    @SuppressWarnings(\"resource\")\n    public void testTokensSingleMatchWithPath$catena_7() throws Exception\n    {\n        JsonParser p0 = JSON_F.createParser(SIMPLE);\n        JsonParser p = new FilteringParserDelegate(p0,\n               new NameMatchFilter(\"value\"),\n                   true, // includePath\n                   false // multipleMatches\n                );\n\n        try{ assertFalse(p.hasCurrentToken());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(p.getCurrentToken());                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonTokenId.ID_NO_TOKEN, p.getCurrentTokenId());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(p.isExpectedStartObjectToken());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(p.isExpectedStartArrayToken());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n// {'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'b':true}\n//      String result = readAndWrite(JSON_F, p);\n//      assertEquals(aposToQuotes(\"{'ob':{'value':3}}\"), result);\n\n        try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.START_OBJECT, p.getCurrentToken());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(p.isExpectedStartObjectToken());                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertFalse(p.isExpectedStartArrayToken());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.FIELD_NAME, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"ob\", p.getCurrentName());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n//        assertEquals(\"ob\", p.getText());\n\n        try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"ob\", p.getCurrentName());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"value\", p.getCurrentName());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"value\", p.getText());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.VALUE_NUMBER_INT, p.getCurrentToken());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(NumberType.INT, p.getNumberType());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, p.getIntValue());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"value\", p.getCurrentName());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.END_OBJECT, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.END_OBJECT, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.END_OBJECT, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.END_OBJECT, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        p.clearCurrentToken();\n        try{ assertNull(p.getCurrentToken());                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        p.close();\n    }",
            "    @SuppressWarnings(\"resource\")\n    public void testTokensSingleMatchWithPath$catena_8() throws Exception\n    {\n        JsonParser p0 = JSON_F.createParser(SIMPLE);\n        JsonParser p = new FilteringParserDelegate(p0,\n               new NameMatchFilter(\"value\"),\n                   true, // includePath\n                   false // multipleMatches\n                );\n\n        try{ assertFalse(p.hasCurrentToken());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(p.getCurrentToken());                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonTokenId.ID_NO_TOKEN, p.getCurrentTokenId());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(p.isExpectedStartObjectToken());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(p.isExpectedStartArrayToken());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n// {'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'b':true}\n//      String result = readAndWrite(JSON_F, p);\n//      assertEquals(aposToQuotes(\"{'ob':{'value':3}}\"), result);\n\n        try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.START_OBJECT, p.getCurrentToken());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(p.isExpectedStartObjectToken());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertFalse(p.isExpectedStartArrayToken());                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.FIELD_NAME, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"ob\", p.getCurrentName());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n//        assertEquals(\"ob\", p.getText());\n\n        try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"ob\", p.getCurrentName());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"value\", p.getCurrentName());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"value\", p.getText());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.VALUE_NUMBER_INT, p.getCurrentToken());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(NumberType.INT, p.getNumberType());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, p.getIntValue());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"value\", p.getCurrentName());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.END_OBJECT, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.END_OBJECT, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.END_OBJECT, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.END_OBJECT, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        p.clearCurrentToken();\n        try{ assertNull(p.getCurrentToken());                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        p.close();\n    }",
            "    @SuppressWarnings(\"resource\")\n    public void testTokensSingleMatchWithPath$catena_9() throws Exception\n    {\n        JsonParser p0 = JSON_F.createParser(SIMPLE);\n        JsonParser p = new FilteringParserDelegate(p0,\n               new NameMatchFilter(\"value\"),\n                   true, // includePath\n                   false // multipleMatches\n                );\n\n        try{ assertFalse(p.hasCurrentToken());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(p.getCurrentToken());                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonTokenId.ID_NO_TOKEN, p.getCurrentTokenId());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(p.isExpectedStartObjectToken());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(p.isExpectedStartArrayToken());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n// {'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'b':true}\n//      String result = readAndWrite(JSON_F, p);\n//      assertEquals(aposToQuotes(\"{'ob':{'value':3}}\"), result);\n\n        try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.START_OBJECT, p.getCurrentToken());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(p.isExpectedStartObjectToken());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(p.isExpectedStartArrayToken());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        assertToken(JsonToken.FIELD_NAME, p.nextToken());                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(JsonToken.FIELD_NAME, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"ob\", p.getCurrentName());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n//        assertEquals(\"ob\", p.getText());\n\n        try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"ob\", p.getCurrentName());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"value\", p.getCurrentName());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"value\", p.getText());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.VALUE_NUMBER_INT, p.getCurrentToken());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(NumberType.INT, p.getNumberType());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, p.getIntValue());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"value\", p.getCurrentName());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.END_OBJECT, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.END_OBJECT, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.END_OBJECT, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.END_OBJECT, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        p.clearCurrentToken();\n        try{ assertNull(p.getCurrentToken());                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        p.close();\n    }",
            "    @SuppressWarnings(\"resource\")\n    public void testTokensSingleMatchWithPath$catena_10() throws Exception\n    {\n        JsonParser p0 = JSON_F.createParser(SIMPLE);\n        JsonParser p = new FilteringParserDelegate(p0,\n               new NameMatchFilter(\"value\"),\n                   true, // includePath\n                   false // multipleMatches\n                );\n\n        try{ assertFalse(p.hasCurrentToken());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(p.getCurrentToken());                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonTokenId.ID_NO_TOKEN, p.getCurrentTokenId());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(p.isExpectedStartObjectToken());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(p.isExpectedStartArrayToken());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n// {'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'b':true}\n//      String result = readAndWrite(JSON_F, p);\n//      assertEquals(aposToQuotes(\"{'ob':{'value':3}}\"), result);\n\n        try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.START_OBJECT, p.getCurrentToken());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(p.isExpectedStartObjectToken());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(p.isExpectedStartArrayToken());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(JsonToken.FIELD_NAME, p.getCurrentToken());                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"ob\", p.getCurrentName());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n//        assertEquals(\"ob\", p.getText());\n\n        try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"ob\", p.getCurrentName());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"value\", p.getCurrentName());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"value\", p.getText());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.VALUE_NUMBER_INT, p.getCurrentToken());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(NumberType.INT, p.getNumberType());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, p.getIntValue());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"value\", p.getCurrentName());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.END_OBJECT, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.END_OBJECT, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.END_OBJECT, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.END_OBJECT, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        p.clearCurrentToken();\n        try{ assertNull(p.getCurrentToken());                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        p.close();\n    }",
            "    @SuppressWarnings(\"resource\")\n    public void testTokensSingleMatchWithPath$catena_11() throws Exception\n    {\n        JsonParser p0 = JSON_F.createParser(SIMPLE);\n        JsonParser p = new FilteringParserDelegate(p0,\n               new NameMatchFilter(\"value\"),\n                   true, // includePath\n                   false // multipleMatches\n                );\n\n        try{ assertFalse(p.hasCurrentToken());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(p.getCurrentToken());                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonTokenId.ID_NO_TOKEN, p.getCurrentTokenId());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(p.isExpectedStartObjectToken());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(p.isExpectedStartArrayToken());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n// {'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'b':true}\n//      String result = readAndWrite(JSON_F, p);\n//      assertEquals(aposToQuotes(\"{'ob':{'value':3}}\"), result);\n\n        try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.START_OBJECT, p.getCurrentToken());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(p.isExpectedStartObjectToken());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(p.isExpectedStartArrayToken());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.FIELD_NAME, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"ob\", p.getCurrentName());                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n//        assertEquals(\"ob\", p.getText());\n\n        try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"ob\", p.getCurrentName());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"value\", p.getCurrentName());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"value\", p.getText());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.VALUE_NUMBER_INT, p.getCurrentToken());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(NumberType.INT, p.getNumberType());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, p.getIntValue());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"value\", p.getCurrentName());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.END_OBJECT, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.END_OBJECT, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.END_OBJECT, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.END_OBJECT, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        p.clearCurrentToken();\n        try{ assertNull(p.getCurrentToken());                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        p.close();\n    }",
            "    @SuppressWarnings(\"resource\")\n    public void testTokensSingleMatchWithPath$catena_12() throws Exception\n    {\n        JsonParser p0 = JSON_F.createParser(SIMPLE);\n        JsonParser p = new FilteringParserDelegate(p0,\n               new NameMatchFilter(\"value\"),\n                   true, // includePath\n                   false // multipleMatches\n                );\n\n        try{ assertFalse(p.hasCurrentToken());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(p.getCurrentToken());                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonTokenId.ID_NO_TOKEN, p.getCurrentTokenId());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(p.isExpectedStartObjectToken());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(p.isExpectedStartArrayToken());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n// {'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'b':true}\n//      String result = readAndWrite(JSON_F, p);\n//      assertEquals(aposToQuotes(\"{'ob':{'value':3}}\"), result);\n\n        try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.START_OBJECT, p.getCurrentToken());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(p.isExpectedStartObjectToken());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(p.isExpectedStartArrayToken());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.FIELD_NAME, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"ob\", p.getCurrentName());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n//        assertEquals(\"ob\", p.getText());\n\n        assertToken(JsonToken.START_OBJECT, p.nextToken());                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"ob\", p.getCurrentName());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"value\", p.getCurrentName());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"value\", p.getText());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.VALUE_NUMBER_INT, p.getCurrentToken());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(NumberType.INT, p.getNumberType());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, p.getIntValue());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"value\", p.getCurrentName());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.END_OBJECT, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.END_OBJECT, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.END_OBJECT, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.END_OBJECT, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        p.clearCurrentToken();\n        try{ assertNull(p.getCurrentToken());                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        p.close();\n    }",
            "    @SuppressWarnings(\"resource\")\n    public void testTokensSingleMatchWithPath$catena_13() throws Exception\n    {\n        JsonParser p0 = JSON_F.createParser(SIMPLE);\n        JsonParser p = new FilteringParserDelegate(p0,\n               new NameMatchFilter(\"value\"),\n                   true, // includePath\n                   false // multipleMatches\n                );\n\n        try{ assertFalse(p.hasCurrentToken());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(p.getCurrentToken());                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonTokenId.ID_NO_TOKEN, p.getCurrentTokenId());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(p.isExpectedStartObjectToken());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(p.isExpectedStartArrayToken());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n// {'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'b':true}\n//      String result = readAndWrite(JSON_F, p);\n//      assertEquals(aposToQuotes(\"{'ob':{'value':3}}\"), result);\n\n        try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.START_OBJECT, p.getCurrentToken());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(p.isExpectedStartObjectToken());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(p.isExpectedStartArrayToken());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.FIELD_NAME, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"ob\", p.getCurrentName());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n//        assertEquals(\"ob\", p.getText());\n\n        try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"ob\", p.getCurrentName());                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"value\", p.getCurrentName());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"value\", p.getText());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.VALUE_NUMBER_INT, p.getCurrentToken());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(NumberType.INT, p.getNumberType());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, p.getIntValue());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"value\", p.getCurrentName());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.END_OBJECT, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.END_OBJECT, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.END_OBJECT, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.END_OBJECT, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        p.clearCurrentToken();\n        try{ assertNull(p.getCurrentToken());                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        p.close();\n    }",
            "    @SuppressWarnings(\"resource\")\n    public void testTokensSingleMatchWithPath$catena_14() throws Exception\n    {\n        JsonParser p0 = JSON_F.createParser(SIMPLE);\n        JsonParser p = new FilteringParserDelegate(p0,\n               new NameMatchFilter(\"value\"),\n                   true, // includePath\n                   false // multipleMatches\n                );\n\n        try{ assertFalse(p.hasCurrentToken());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(p.getCurrentToken());                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonTokenId.ID_NO_TOKEN, p.getCurrentTokenId());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(p.isExpectedStartObjectToken());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(p.isExpectedStartArrayToken());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n// {'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'b':true}\n//      String result = readAndWrite(JSON_F, p);\n//      assertEquals(aposToQuotes(\"{'ob':{'value':3}}\"), result);\n\n        try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.START_OBJECT, p.getCurrentToken());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(p.isExpectedStartObjectToken());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(p.isExpectedStartArrayToken());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.FIELD_NAME, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"ob\", p.getCurrentName());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n//        assertEquals(\"ob\", p.getText());\n\n        try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"ob\", p.getCurrentName());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        assertToken(JsonToken.FIELD_NAME, p.nextToken());                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"value\", p.getCurrentName());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"value\", p.getText());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.VALUE_NUMBER_INT, p.getCurrentToken());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(NumberType.INT, p.getNumberType());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, p.getIntValue());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"value\", p.getCurrentName());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.END_OBJECT, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.END_OBJECT, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.END_OBJECT, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.END_OBJECT, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        p.clearCurrentToken();\n        try{ assertNull(p.getCurrentToken());                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        p.close();\n    }",
            "    @SuppressWarnings(\"resource\")\n    public void testTokensSingleMatchWithPath$catena_15() throws Exception\n    {\n        JsonParser p0 = JSON_F.createParser(SIMPLE);\n        JsonParser p = new FilteringParserDelegate(p0,\n               new NameMatchFilter(\"value\"),\n                   true, // includePath\n                   false // multipleMatches\n                );\n\n        try{ assertFalse(p.hasCurrentToken());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(p.getCurrentToken());                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonTokenId.ID_NO_TOKEN, p.getCurrentTokenId());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(p.isExpectedStartObjectToken());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(p.isExpectedStartArrayToken());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n// {'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'b':true}\n//      String result = readAndWrite(JSON_F, p);\n//      assertEquals(aposToQuotes(\"{'ob':{'value':3}}\"), result);\n\n        try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.START_OBJECT, p.getCurrentToken());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(p.isExpectedStartObjectToken());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(p.isExpectedStartArrayToken());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.FIELD_NAME, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"ob\", p.getCurrentName());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n//        assertEquals(\"ob\", p.getText());\n\n        try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"ob\", p.getCurrentName());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"value\", p.getCurrentName());                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"value\", p.getText());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.VALUE_NUMBER_INT, p.getCurrentToken());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(NumberType.INT, p.getNumberType());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, p.getIntValue());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"value\", p.getCurrentName());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.END_OBJECT, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.END_OBJECT, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.END_OBJECT, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.END_OBJECT, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        p.clearCurrentToken();\n        try{ assertNull(p.getCurrentToken());                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        p.close();\n    }",
            "    @SuppressWarnings(\"resource\")\n    public void testTokensSingleMatchWithPath$catena_16() throws Exception\n    {\n        JsonParser p0 = JSON_F.createParser(SIMPLE);\n        JsonParser p = new FilteringParserDelegate(p0,\n               new NameMatchFilter(\"value\"),\n                   true, // includePath\n                   false // multipleMatches\n                );\n\n        try{ assertFalse(p.hasCurrentToken());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(p.getCurrentToken());                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonTokenId.ID_NO_TOKEN, p.getCurrentTokenId());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(p.isExpectedStartObjectToken());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(p.isExpectedStartArrayToken());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n// {'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'b':true}\n//      String result = readAndWrite(JSON_F, p);\n//      assertEquals(aposToQuotes(\"{'ob':{'value':3}}\"), result);\n\n        try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.START_OBJECT, p.getCurrentToken());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(p.isExpectedStartObjectToken());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(p.isExpectedStartArrayToken());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.FIELD_NAME, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"ob\", p.getCurrentName());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n//        assertEquals(\"ob\", p.getText());\n\n        try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"ob\", p.getCurrentName());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"value\", p.getCurrentName());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"value\", p.getText());                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.VALUE_NUMBER_INT, p.getCurrentToken());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(NumberType.INT, p.getNumberType());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, p.getIntValue());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"value\", p.getCurrentName());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.END_OBJECT, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.END_OBJECT, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.END_OBJECT, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.END_OBJECT, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        p.clearCurrentToken();\n        try{ assertNull(p.getCurrentToken());                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        p.close();\n    }",
            "    @SuppressWarnings(\"resource\")\n    public void testTokensSingleMatchWithPath$catena_17() throws Exception\n    {\n        JsonParser p0 = JSON_F.createParser(SIMPLE);\n        JsonParser p = new FilteringParserDelegate(p0,\n               new NameMatchFilter(\"value\"),\n                   true, // includePath\n                   false // multipleMatches\n                );\n\n        try{ assertFalse(p.hasCurrentToken());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(p.getCurrentToken());                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonTokenId.ID_NO_TOKEN, p.getCurrentTokenId());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(p.isExpectedStartObjectToken());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(p.isExpectedStartArrayToken());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n// {'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'b':true}\n//      String result = readAndWrite(JSON_F, p);\n//      assertEquals(aposToQuotes(\"{'ob':{'value':3}}\"), result);\n\n        try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.START_OBJECT, p.getCurrentToken());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(p.isExpectedStartObjectToken());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(p.isExpectedStartArrayToken());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.FIELD_NAME, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"ob\", p.getCurrentName());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n//        assertEquals(\"ob\", p.getText());\n\n        try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"ob\", p.getCurrentName());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"value\", p.getCurrentName());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"value\", p.getText());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(JsonToken.VALUE_NUMBER_INT, p.getCurrentToken());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(NumberType.INT, p.getNumberType());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, p.getIntValue());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"value\", p.getCurrentName());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.END_OBJECT, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.END_OBJECT, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.END_OBJECT, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.END_OBJECT, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        p.clearCurrentToken();\n        try{ assertNull(p.getCurrentToken());                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        p.close();\n    }",
            "    @SuppressWarnings(\"resource\")\n    public void testTokensSingleMatchWithPath$catena_18() throws Exception\n    {\n        JsonParser p0 = JSON_F.createParser(SIMPLE);\n        JsonParser p = new FilteringParserDelegate(p0,\n               new NameMatchFilter(\"value\"),\n                   true, // includePath\n                   false // multipleMatches\n                );\n\n        try{ assertFalse(p.hasCurrentToken());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(p.getCurrentToken());                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonTokenId.ID_NO_TOKEN, p.getCurrentTokenId());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(p.isExpectedStartObjectToken());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(p.isExpectedStartArrayToken());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n// {'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'b':true}\n//      String result = readAndWrite(JSON_F, p);\n//      assertEquals(aposToQuotes(\"{'ob':{'value':3}}\"), result);\n\n        try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.START_OBJECT, p.getCurrentToken());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(p.isExpectedStartObjectToken());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(p.isExpectedStartArrayToken());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.FIELD_NAME, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"ob\", p.getCurrentName());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n//        assertEquals(\"ob\", p.getText());\n\n        try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"ob\", p.getCurrentName());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"value\", p.getCurrentName());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"value\", p.getText());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(JsonToken.VALUE_NUMBER_INT, p.getCurrentToken());                                      /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(NumberType.INT, p.getNumberType());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, p.getIntValue());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"value\", p.getCurrentName());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.END_OBJECT, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.END_OBJECT, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.END_OBJECT, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.END_OBJECT, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        p.clearCurrentToken();\n        try{ assertNull(p.getCurrentToken());                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        p.close();\n    }",
            "    @SuppressWarnings(\"resource\")\n    public void testTokensSingleMatchWithPath$catena_19() throws Exception\n    {\n        JsonParser p0 = JSON_F.createParser(SIMPLE);\n        JsonParser p = new FilteringParserDelegate(p0,\n               new NameMatchFilter(\"value\"),\n                   true, // includePath\n                   false // multipleMatches\n                );\n\n        try{ assertFalse(p.hasCurrentToken());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(p.getCurrentToken());                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonTokenId.ID_NO_TOKEN, p.getCurrentTokenId());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(p.isExpectedStartObjectToken());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(p.isExpectedStartArrayToken());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n// {'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'b':true}\n//      String result = readAndWrite(JSON_F, p);\n//      assertEquals(aposToQuotes(\"{'ob':{'value':3}}\"), result);\n\n        try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.START_OBJECT, p.getCurrentToken());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(p.isExpectedStartObjectToken());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(p.isExpectedStartArrayToken());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.FIELD_NAME, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"ob\", p.getCurrentName());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n//        assertEquals(\"ob\", p.getText());\n\n        try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"ob\", p.getCurrentName());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"value\", p.getCurrentName());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"value\", p.getText());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.VALUE_NUMBER_INT, p.getCurrentToken());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(NumberType.INT, p.getNumberType());                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(3, p.getIntValue());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"value\", p.getCurrentName());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.END_OBJECT, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.END_OBJECT, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.END_OBJECT, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.END_OBJECT, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        p.clearCurrentToken();\n        try{ assertNull(p.getCurrentToken());                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        p.close();\n    }",
            "    @SuppressWarnings(\"resource\")\n    public void testTokensSingleMatchWithPath$catena_20() throws Exception\n    {\n        JsonParser p0 = JSON_F.createParser(SIMPLE);\n        JsonParser p = new FilteringParserDelegate(p0,\n               new NameMatchFilter(\"value\"),\n                   true, // includePath\n                   false // multipleMatches\n                );\n\n        try{ assertFalse(p.hasCurrentToken());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(p.getCurrentToken());                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonTokenId.ID_NO_TOKEN, p.getCurrentTokenId());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(p.isExpectedStartObjectToken());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(p.isExpectedStartArrayToken());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n// {'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'b':true}\n//      String result = readAndWrite(JSON_F, p);\n//      assertEquals(aposToQuotes(\"{'ob':{'value':3}}\"), result);\n\n        try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.START_OBJECT, p.getCurrentToken());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(p.isExpectedStartObjectToken());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(p.isExpectedStartArrayToken());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.FIELD_NAME, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"ob\", p.getCurrentName());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n//        assertEquals(\"ob\", p.getText());\n\n        try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"ob\", p.getCurrentName());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"value\", p.getCurrentName());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"value\", p.getText());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.VALUE_NUMBER_INT, p.getCurrentToken());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(NumberType.INT, p.getNumberType());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(3, p.getIntValue());                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"value\", p.getCurrentName());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.END_OBJECT, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.END_OBJECT, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.END_OBJECT, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.END_OBJECT, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        p.clearCurrentToken();\n        try{ assertNull(p.getCurrentToken());                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        p.close();\n    }",
            "    @SuppressWarnings(\"resource\")\n    public void testTokensSingleMatchWithPath$catena_21() throws Exception\n    {\n        JsonParser p0 = JSON_F.createParser(SIMPLE);\n        JsonParser p = new FilteringParserDelegate(p0,\n               new NameMatchFilter(\"value\"),\n                   true, // includePath\n                   false // multipleMatches\n                );\n\n        try{ assertFalse(p.hasCurrentToken());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(p.getCurrentToken());                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonTokenId.ID_NO_TOKEN, p.getCurrentTokenId());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(p.isExpectedStartObjectToken());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(p.isExpectedStartArrayToken());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n// {'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'b':true}\n//      String result = readAndWrite(JSON_F, p);\n//      assertEquals(aposToQuotes(\"{'ob':{'value':3}}\"), result);\n\n        try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.START_OBJECT, p.getCurrentToken());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(p.isExpectedStartObjectToken());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(p.isExpectedStartArrayToken());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.FIELD_NAME, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"ob\", p.getCurrentName());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n//        assertEquals(\"ob\", p.getText());\n\n        try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"ob\", p.getCurrentName());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"value\", p.getCurrentName());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"value\", p.getText());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.VALUE_NUMBER_INT, p.getCurrentToken());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(NumberType.INT, p.getNumberType());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, p.getIntValue());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"value\", p.getCurrentName());                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ assertToken(JsonToken.END_OBJECT, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.END_OBJECT, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.END_OBJECT, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.END_OBJECT, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        p.clearCurrentToken();\n        try{ assertNull(p.getCurrentToken());                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        p.close();\n    }",
            "    @SuppressWarnings(\"resource\")\n    public void testTokensSingleMatchWithPath$catena_22() throws Exception\n    {\n        JsonParser p0 = JSON_F.createParser(SIMPLE);\n        JsonParser p = new FilteringParserDelegate(p0,\n               new NameMatchFilter(\"value\"),\n                   true, // includePath\n                   false // multipleMatches\n                );\n\n        try{ assertFalse(p.hasCurrentToken());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(p.getCurrentToken());                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonTokenId.ID_NO_TOKEN, p.getCurrentTokenId());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(p.isExpectedStartObjectToken());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(p.isExpectedStartArrayToken());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n// {'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'b':true}\n//      String result = readAndWrite(JSON_F, p);\n//      assertEquals(aposToQuotes(\"{'ob':{'value':3}}\"), result);\n\n        try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.START_OBJECT, p.getCurrentToken());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(p.isExpectedStartObjectToken());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(p.isExpectedStartArrayToken());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.FIELD_NAME, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"ob\", p.getCurrentName());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n//        assertEquals(\"ob\", p.getText());\n\n        try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"ob\", p.getCurrentName());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"value\", p.getCurrentName());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"value\", p.getText());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.VALUE_NUMBER_INT, p.getCurrentToken());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(NumberType.INT, p.getNumberType());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, p.getIntValue());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"value\", p.getCurrentName());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        assertToken(JsonToken.END_OBJECT, p.nextToken());                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(JsonToken.END_OBJECT, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.END_OBJECT, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.END_OBJECT, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        p.clearCurrentToken();\n        try{ assertNull(p.getCurrentToken());                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        p.close();\n    }",
            "    @SuppressWarnings(\"resource\")\n    public void testTokensSingleMatchWithPath$catena_23() throws Exception\n    {\n        JsonParser p0 = JSON_F.createParser(SIMPLE);\n        JsonParser p = new FilteringParserDelegate(p0,\n               new NameMatchFilter(\"value\"),\n                   true, // includePath\n                   false // multipleMatches\n                );\n\n        try{ assertFalse(p.hasCurrentToken());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(p.getCurrentToken());                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonTokenId.ID_NO_TOKEN, p.getCurrentTokenId());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(p.isExpectedStartObjectToken());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(p.isExpectedStartArrayToken());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n// {'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'b':true}\n//      String result = readAndWrite(JSON_F, p);\n//      assertEquals(aposToQuotes(\"{'ob':{'value':3}}\"), result);\n\n        try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.START_OBJECT, p.getCurrentToken());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(p.isExpectedStartObjectToken());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(p.isExpectedStartArrayToken());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.FIELD_NAME, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"ob\", p.getCurrentName());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n//        assertEquals(\"ob\", p.getText());\n\n        try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"ob\", p.getCurrentName());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"value\", p.getCurrentName());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"value\", p.getText());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.VALUE_NUMBER_INT, p.getCurrentToken());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(NumberType.INT, p.getNumberType());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, p.getIntValue());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"value\", p.getCurrentName());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.END_OBJECT, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(JsonToken.END_OBJECT, p.getCurrentToken());                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ assertToken(JsonToken.END_OBJECT, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.END_OBJECT, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        p.clearCurrentToken();\n        try{ assertNull(p.getCurrentToken());                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        p.close();\n    }",
            "    @SuppressWarnings(\"resource\")\n    public void testTokensSingleMatchWithPath$catena_26() throws Exception\n    {\n        JsonParser p0 = JSON_F.createParser(SIMPLE);\n        JsonParser p = new FilteringParserDelegate(p0,\n               new NameMatchFilter(\"value\"),\n                   true, // includePath\n                   false // multipleMatches\n                );\n\n        try{ assertFalse(p.hasCurrentToken());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(p.getCurrentToken());                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonTokenId.ID_NO_TOKEN, p.getCurrentTokenId());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(p.isExpectedStartObjectToken());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(p.isExpectedStartArrayToken());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n// {'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'b':true}\n//      String result = readAndWrite(JSON_F, p);\n//      assertEquals(aposToQuotes(\"{'ob':{'value':3}}\"), result);\n\n        try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.START_OBJECT, p.getCurrentToken());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(p.isExpectedStartObjectToken());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(p.isExpectedStartArrayToken());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.FIELD_NAME, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"ob\", p.getCurrentName());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n//        assertEquals(\"ob\", p.getText());\n\n        try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"ob\", p.getCurrentName());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"value\", p.getCurrentName());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"value\", p.getText());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.VALUE_NUMBER_INT, p.getCurrentToken());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(NumberType.INT, p.getNumberType());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, p.getIntValue());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"value\", p.getCurrentName());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.END_OBJECT, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.END_OBJECT, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.END_OBJECT, p.nextToken());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(JsonToken.END_OBJECT, p.getCurrentToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        p.clearCurrentToken();\n        assertNull(p.getCurrentToken());                                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        p.close();\n    }"
        ]
    }
}