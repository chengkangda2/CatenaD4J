{
    "com.fasterxml.jackson.core.read.NumberOverflowTest::testMaliciousIntOverflow": {
        "begin_line_no": 84,
        "end_line_no": 101,
        "file_path": "src/test/java/com/fasterxml/jackson/core/read/NumberOverflowTest.java",
        "to": [
            "    public void testMaliciousIntOverflow$catena_0() throws Exception\n    {\n        for (int mode : ALL_STREAMING_MODES) {\n            for (String doc : new String[] { BIG_POS_DOC, BIG_NEG_DOC }) {\n                JsonParser p = createParser(mode, doc);\n                assertToken(JsonToken.START_ARRAY, p.nextToken());                                          /***** ORIGINAL ASSERTION IS HERE *****/\n                try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n                try {\n                    p.getIntValue();\n                    try{ fail(\"Should not pass\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n                } catch (InputCoercionException e) {\n                    try{ verifyException(e, \"out of range of int\");                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n                    try{ verifyException(e, \"Integer with \"+BIG_NUM_LEN+\" digits\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n                }\n                p.close();\n            }\n        }\n    }    ",
            "    public void testMaliciousIntOverflow$catena_2() throws Exception\n    {\n        for (int mode : ALL_STREAMING_MODES) {\n            for (String doc : new String[] { BIG_POS_DOC, BIG_NEG_DOC }) {\n                JsonParser p = createParser(mode, doc);\n                try{ assertToken(JsonToken.START_ARRAY, p.nextToken());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n                try {\n                    p.getIntValue();\n                    fail(\"Should not pass\");                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n                } catch (InputCoercionException e) {\n                    try{ verifyException(e, \"out of range of int\");                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n                    try{ verifyException(e, \"Integer with \"+BIG_NUM_LEN+\" digits\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n                }\n                p.close();\n            }\n        }\n    }    ",
            "    public void testMaliciousIntOverflow$catena_3() throws Exception\n    {\n        for (int mode : ALL_STREAMING_MODES) {\n            for (String doc : new String[] { BIG_POS_DOC, BIG_NEG_DOC }) {\n                JsonParser p = createParser(mode, doc);\n                try{ assertToken(JsonToken.START_ARRAY, p.nextToken());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n                try {\n                    p.getIntValue();\n                    try{ fail(\"Should not pass\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n                } catch (InputCoercionException e) {\n                    verifyException(e, \"out of range of int\");                                              /***** ORIGINAL ASSERTION IS HERE *****/\n                    try{ verifyException(e, \"Integer with \"+BIG_NUM_LEN+\" digits\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n                }\n                p.close();\n            }\n        }\n    }    ",
            "    public void testMaliciousIntOverflow$catena_4() throws Exception\n    {\n        for (int mode : ALL_STREAMING_MODES) {\n            for (String doc : new String[] { BIG_POS_DOC, BIG_NEG_DOC }) {\n                JsonParser p = createParser(mode, doc);\n                try{ assertToken(JsonToken.START_ARRAY, p.nextToken());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n                try {\n                    p.getIntValue();\n                    try{ fail(\"Should not pass\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n                } catch (InputCoercionException e) {\n                    try{ verifyException(e, \"out of range of int\");                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n                    verifyException(e, \"Integer with \"+BIG_NUM_LEN+\" digits\");                              /***** ORIGINAL ASSERTION IS HERE *****/\n                }\n                p.close();\n            }\n        }\n    }    ",
            "    public void testMaliciousIntOverflow$catena_1() throws Exception\n    {\n        for (int mode : ALL_STREAMING_MODES) {\n            for (String doc : new String[] { BIG_POS_DOC, BIG_NEG_DOC }) {\n                JsonParser p = createParser(mode, doc);\n                try{ assertToken(JsonToken.START_ARRAY, p.nextToken());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n                assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                     /***** ORIGINAL ASSERTION IS HERE *****/\n                try {\n                    p.getIntValue();\n                    try{ fail(\"Should not pass\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n                } catch (InputCoercionException e) {\n                    try{ verifyException(e, \"out of range of int\");                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n                    try{ verifyException(e, \"Integer with \"+BIG_NUM_LEN+\" digits\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n                }\n                p.close();\n            }\n        }\n    }    "
        ]
    },
    "com.fasterxml.jackson.core.json.async.AsyncNumberCoercionTest::testToLongFailing": {
        "begin_line_no": 177,
        "end_line_no": 208,
        "file_path": "src/test/java/com/fasterxml/jackson/core/json/async/AsyncNumberCoercionTest.java",
        "to": [
            ""
        ]
    },
    "com.fasterxml.jackson.core.json.async.AsyncNumberCoercionTest::testToIntFailing": {
        "begin_line_no": 63,
        "end_line_no": 141,
        "file_path": "src/test/java/com/fasterxml/jackson/core/json/async/AsyncNumberCoercionTest.java",
        "to": [
            ""
        ]
    },
    "com.fasterxml.jackson.core.read.NumberCoercionTest::testToLongFailing": {
        "begin_line_no": 175,
        "end_line_no": 209,
        "file_path": "src/test/java/com/fasterxml/jackson/core/read/NumberCoercionTest.java",
        "to": [
            ""
        ]
    },
    "com.fasterxml.jackson.core.read.NumberCoercionTest::testToIntFailing": {
        "begin_line_no": 56,
        "end_line_no": 137,
        "file_path": "src/test/java/com/fasterxml/jackson/core/read/NumberCoercionTest.java",
        "to": [
            ""
        ]
    },
    "com.fasterxml.jackson.core.read.NumberOverflowTest::testMaliciousLongOverflow": {
        "begin_line_no": 64,
        "end_line_no": 81,
        "file_path": "src/test/java/com/fasterxml/jackson/core/read/NumberOverflowTest.java",
        "to": [
            ""
        ]
    },
    "com.fasterxml.jackson.core.read.NumberOverflowTest::testSimpleLongOverflow": {
        "begin_line_no": 27,
        "end_line_no": 58,
        "file_path": "src/test/java/com/fasterxml/jackson/core/read/NumberOverflowTest.java",
        "to": [
            ""
        ]
    },
    "com.fasterxml.jackson.core.read.NumberParsingTest::testSimpleLong": {
        "begin_line_no": 106,
        "end_line_no": 112,
        "file_path": "src/test/java/com/fasterxml/jackson/core/read/NumberParsingTest.java",
        "to": [
            ""
        ]
    }
}