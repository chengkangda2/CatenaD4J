{
    "com.fasterxml.jackson.core.json.async.AsyncNumberCoercionTest::testToIntFailing": {
        "begin_line_no": 63,
        "end_line_no": 141,
        "file_path": "src/test/java/com/fasterxml/jackson/core/json/async/AsyncNumberCoercionTest.java",
        "to": [
            "    public void testToIntFailing$catena_5() throws Exception\n    {\n        AsyncReaderWrapper p;\n\n        // long -> error\n        long big = 1L + Integer.MAX_VALUE;\n        p = createParser(String.valueOf(big));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(big, p.getLongValue());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(Integer.TYPE, e.getTargetType());                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n        long small = -1L + Integer.MIN_VALUE;\n        p = createParser(String.valueOf(small));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(small), p.getNumberValue());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(small, p.getLongValue());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // double -> error\n        p = createParser(String.valueOf(big)+\".0\");\n        try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals((double) big, p.getDoubleValue());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        p = createParser(String.valueOf(small)+\".0\");\n        try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals((double) small, p.getDoubleValue());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // BigInteger -> error\n        p = createParser(String.valueOf(big));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        p = createParser(String.valueOf(small));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
            "    public void testToIntFailing$catena_10() throws Exception\n    {\n        AsyncReaderWrapper p;\n\n        // long -> error\n        long big = 1L + Integer.MAX_VALUE;\n        p = createParser(String.valueOf(big));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(big, p.getLongValue());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        long small = -1L + Integer.MIN_VALUE;\n        p = createParser(String.valueOf(small));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(small), p.getNumberValue());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(small, p.getLongValue());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            verifyException(e, \"out of range of int\");                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // double -> error\n        p = createParser(String.valueOf(big)+\".0\");\n        try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals((double) big, p.getDoubleValue());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        p = createParser(String.valueOf(small)+\".0\");\n        try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals((double) small, p.getDoubleValue());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // BigInteger -> error\n        p = createParser(String.valueOf(big));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        p = createParser(String.valueOf(small));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
            "    public void testToIntFailing$catena_2() throws Exception\n    {\n        AsyncReaderWrapper p;\n\n        // long -> error\n        long big = 1L + Integer.MAX_VALUE;\n        p = createParser(String.valueOf(big));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(big, p.getLongValue());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            fail(\"Should not pass\");                                                                        /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        long small = -1L + Integer.MIN_VALUE;\n        p = createParser(String.valueOf(small));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(small), p.getNumberValue());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(small, p.getLongValue());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // double -> error\n        p = createParser(String.valueOf(big)+\".0\");\n        try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals((double) big, p.getDoubleValue());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        p = createParser(String.valueOf(small)+\".0\");\n        try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals((double) small, p.getDoubleValue());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // BigInteger -> error\n        p = createParser(String.valueOf(big));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        p = createParser(String.valueOf(small));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
            "    public void testToIntFailing$catena_23() throws Exception\n    {\n        AsyncReaderWrapper p;\n\n        // long -> error\n        long big = 1L + Integer.MAX_VALUE;\n        p = createParser(String.valueOf(big));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(big, p.getLongValue());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        long small = -1L + Integer.MIN_VALUE;\n        p = createParser(String.valueOf(small));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(small), p.getNumberValue());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(small, p.getLongValue());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // double -> error\n        p = createParser(String.valueOf(big)+\".0\");\n        try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals((double) big, p.getDoubleValue());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        p = createParser(String.valueOf(small)+\".0\");\n        try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals((double) small, p.getDoubleValue());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                     /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // BigInteger -> error\n        p = createParser(String.valueOf(big));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        p = createParser(String.valueOf(small));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
            "    public void testToIntFailing$catena_11() throws Exception\n    {\n        AsyncReaderWrapper p;\n\n        // long -> error\n        long big = 1L + Integer.MAX_VALUE;\n        p = createParser(String.valueOf(big));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(big, p.getLongValue());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        long small = -1L + Integer.MIN_VALUE;\n        p = createParser(String.valueOf(small));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(small), p.getNumberValue());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(small, p.getLongValue());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                     /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // double -> error\n        p = createParser(String.valueOf(big)+\".0\");\n        try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals((double) big, p.getDoubleValue());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        p = createParser(String.valueOf(small)+\".0\");\n        try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals((double) small, p.getDoubleValue());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // BigInteger -> error\n        p = createParser(String.valueOf(big));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        p = createParser(String.valueOf(small));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
            "    public void testToIntFailing$catena_30() throws Exception\n    {\n        AsyncReaderWrapper p;\n\n        // long -> error\n        long big = 1L + Integer.MAX_VALUE;\n        p = createParser(String.valueOf(big));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(big, p.getLongValue());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        long small = -1L + Integer.MIN_VALUE;\n        p = createParser(String.valueOf(small));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(small), p.getNumberValue());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(small, p.getLongValue());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // double -> error\n        p = createParser(String.valueOf(big)+\".0\");\n        try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals((double) big, p.getDoubleValue());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        p = createParser(String.valueOf(small)+\".0\");\n        try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals((double) small, p.getDoubleValue());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // BigInteger -> error\n        p = createParser(String.valueOf(big));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(Integer.TYPE, e.getTargetType());                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n        p = createParser(String.valueOf(small));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
            "    public void testToIntFailing$catena_19() throws Exception\n    {\n        AsyncReaderWrapper p;\n\n        // long -> error\n        long big = 1L + Integer.MAX_VALUE;\n        p = createParser(String.valueOf(big));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(big, p.getLongValue());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        long small = -1L + Integer.MIN_VALUE;\n        p = createParser(String.valueOf(small));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(small), p.getNumberValue());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(small, p.getLongValue());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // double -> error\n        p = createParser(String.valueOf(big)+\".0\");\n        try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals((double) big, p.getDoubleValue());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        p = createParser(String.valueOf(small)+\".0\");\n        assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                           /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals((double) small, p.getDoubleValue());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // BigInteger -> error\n        p = createParser(String.valueOf(big));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        p = createParser(String.valueOf(small));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
            "    public void testToIntFailing$catena_8() throws Exception\n    {\n        AsyncReaderWrapper p;\n\n        // long -> error\n        long big = 1L + Integer.MAX_VALUE;\n        p = createParser(String.valueOf(big));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(big, p.getLongValue());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        long small = -1L + Integer.MIN_VALUE;\n        p = createParser(String.valueOf(small));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(small), p.getNumberValue());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(small, p.getLongValue());                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // double -> error\n        p = createParser(String.valueOf(big)+\".0\");\n        try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals((double) big, p.getDoubleValue());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        p = createParser(String.valueOf(small)+\".0\");\n        try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals((double) small, p.getDoubleValue());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // BigInteger -> error\n        p = createParser(String.valueOf(big));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        p = createParser(String.valueOf(small));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
            "    public void testToIntFailing$catena_29() throws Exception\n    {\n        AsyncReaderWrapper p;\n\n        // long -> error\n        long big = 1L + Integer.MAX_VALUE;\n        p = createParser(String.valueOf(big));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(big, p.getLongValue());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        long small = -1L + Integer.MIN_VALUE;\n        p = createParser(String.valueOf(small));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(small), p.getNumberValue());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(small, p.getLongValue());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // double -> error\n        p = createParser(String.valueOf(big)+\".0\");\n        try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals((double) big, p.getDoubleValue());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        p = createParser(String.valueOf(small)+\".0\");\n        try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals((double) small, p.getDoubleValue());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // BigInteger -> error\n        p = createParser(String.valueOf(big));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                     /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        p = createParser(String.valueOf(small));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
            "    public void testToIntFailing$catena_14() throws Exception\n    {\n        AsyncReaderWrapper p;\n\n        // long -> error\n        long big = 1L + Integer.MAX_VALUE;\n        p = createParser(String.valueOf(big));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(big, p.getLongValue());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        long small = -1L + Integer.MIN_VALUE;\n        p = createParser(String.valueOf(small));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(small), p.getNumberValue());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(small, p.getLongValue());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // double -> error\n        p = createParser(String.valueOf(big)+\".0\");\n        try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals((double) big, p.getDoubleValue());                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        p = createParser(String.valueOf(small)+\".0\");\n        try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals((double) small, p.getDoubleValue());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // BigInteger -> error\n        p = createParser(String.valueOf(big));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        p = createParser(String.valueOf(small));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
            "    public void testToIntFailing$catena_25() throws Exception\n    {\n        AsyncReaderWrapper p;\n\n        // long -> error\n        long big = 1L + Integer.MAX_VALUE;\n        p = createParser(String.valueOf(big));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(big, p.getLongValue());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        long small = -1L + Integer.MIN_VALUE;\n        p = createParser(String.valueOf(small));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(small), p.getNumberValue());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(small, p.getLongValue());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // double -> error\n        p = createParser(String.valueOf(big)+\".0\");\n        try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals((double) big, p.getDoubleValue());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        p = createParser(String.valueOf(small)+\".0\");\n        try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals((double) small, p.getDoubleValue());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // BigInteger -> error\n        p = createParser(String.valueOf(big));\n        assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        p = createParser(String.valueOf(small));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
            "    public void testToIntFailing$catena_21() throws Exception\n    {\n        AsyncReaderWrapper p;\n\n        // long -> error\n        long big = 1L + Integer.MAX_VALUE;\n        p = createParser(String.valueOf(big));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(big, p.getLongValue());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        long small = -1L + Integer.MIN_VALUE;\n        p = createParser(String.valueOf(small));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(small), p.getNumberValue());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(small, p.getLongValue());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // double -> error\n        p = createParser(String.valueOf(big)+\".0\");\n        try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals((double) big, p.getDoubleValue());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        p = createParser(String.valueOf(small)+\".0\");\n        try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals((double) small, p.getDoubleValue());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            fail(\"Should not pass\");                                                                        /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // BigInteger -> error\n        p = createParser(String.valueOf(big));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        p = createParser(String.valueOf(small));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
            "    public void testToIntFailing$catena_15() throws Exception\n    {\n        AsyncReaderWrapper p;\n\n        // long -> error\n        long big = 1L + Integer.MAX_VALUE;\n        p = createParser(String.valueOf(big));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(big, p.getLongValue());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        long small = -1L + Integer.MIN_VALUE;\n        p = createParser(String.valueOf(small));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(small), p.getNumberValue());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(small, p.getLongValue());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // double -> error\n        p = createParser(String.valueOf(big)+\".0\");\n        try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals((double) big, p.getDoubleValue());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            fail(\"Should not pass\");                                                                        /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        p = createParser(String.valueOf(small)+\".0\");\n        try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals((double) small, p.getDoubleValue());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // BigInteger -> error\n        p = createParser(String.valueOf(big));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        p = createParser(String.valueOf(small));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
            "    public void testToIntFailing$catena_35() throws Exception\n    {\n        AsyncReaderWrapper p;\n\n        // long -> error\n        long big = 1L + Integer.MAX_VALUE;\n        p = createParser(String.valueOf(big));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(big, p.getLongValue());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        long small = -1L + Integer.MIN_VALUE;\n        p = createParser(String.valueOf(small));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(small), p.getNumberValue());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(small, p.getLongValue());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // double -> error\n        p = createParser(String.valueOf(big)+\".0\");\n        try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals((double) big, p.getDoubleValue());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        p = createParser(String.valueOf(small)+\".0\");\n        try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals((double) small, p.getDoubleValue());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // BigInteger -> error\n        p = createParser(String.valueOf(big));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        p = createParser(String.valueOf(small));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                     /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
            "    public void testToIntFailing$catena_18() throws Exception\n    {\n        AsyncReaderWrapper p;\n\n        // long -> error\n        long big = 1L + Integer.MAX_VALUE;\n        p = createParser(String.valueOf(big));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(big, p.getLongValue());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        long small = -1L + Integer.MIN_VALUE;\n        p = createParser(String.valueOf(small));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(small), p.getNumberValue());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(small, p.getLongValue());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // double -> error\n        p = createParser(String.valueOf(big)+\".0\");\n        try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals((double) big, p.getDoubleValue());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(Integer.TYPE, e.getTargetType());                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n        p = createParser(String.valueOf(small)+\".0\");\n        try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals((double) small, p.getDoubleValue());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // BigInteger -> error\n        p = createParser(String.valueOf(big));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        p = createParser(String.valueOf(small));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
            "    public void testToIntFailing$catena_36() throws Exception\n    {\n        AsyncReaderWrapper p;\n\n        // long -> error\n        long big = 1L + Integer.MAX_VALUE;\n        p = createParser(String.valueOf(big));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(big, p.getLongValue());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        long small = -1L + Integer.MIN_VALUE;\n        p = createParser(String.valueOf(small));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(small), p.getNumberValue());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(small, p.getLongValue());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // double -> error\n        p = createParser(String.valueOf(big)+\".0\");\n        try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals((double) big, p.getDoubleValue());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        p = createParser(String.valueOf(small)+\".0\");\n        try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals((double) small, p.getDoubleValue());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // BigInteger -> error\n        p = createParser(String.valueOf(big));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        p = createParser(String.valueOf(small));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(Integer.TYPE, e.getTargetType());                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n    }",
            "    public void testToIntFailing$catena_3() throws Exception\n    {\n        AsyncReaderWrapper p;\n\n        // long -> error\n        long big = 1L + Integer.MAX_VALUE;\n        p = createParser(String.valueOf(big));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(big, p.getLongValue());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            verifyException(e, \"out of range of int\");                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        long small = -1L + Integer.MIN_VALUE;\n        p = createParser(String.valueOf(small));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(small), p.getNumberValue());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(small, p.getLongValue());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // double -> error\n        p = createParser(String.valueOf(big)+\".0\");\n        try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals((double) big, p.getDoubleValue());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        p = createParser(String.valueOf(small)+\".0\");\n        try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals((double) small, p.getDoubleValue());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // BigInteger -> error\n        p = createParser(String.valueOf(big));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        p = createParser(String.valueOf(small));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
            "    public void testToIntFailing$catena_13() throws Exception\n    {\n        AsyncReaderWrapper p;\n\n        // long -> error\n        long big = 1L + Integer.MAX_VALUE;\n        p = createParser(String.valueOf(big));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(big, p.getLongValue());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        long small = -1L + Integer.MIN_VALUE;\n        p = createParser(String.valueOf(small));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(small), p.getNumberValue());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(small, p.getLongValue());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // double -> error\n        p = createParser(String.valueOf(big)+\".0\");\n        assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                           /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals((double) big, p.getDoubleValue());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        p = createParser(String.valueOf(small)+\".0\");\n        try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals((double) small, p.getDoubleValue());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // BigInteger -> error\n        p = createParser(String.valueOf(big));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        p = createParser(String.valueOf(small));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
            "    public void testToIntFailing$catena_20() throws Exception\n    {\n        AsyncReaderWrapper p;\n\n        // long -> error\n        long big = 1L + Integer.MAX_VALUE;\n        p = createParser(String.valueOf(big));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(big, p.getLongValue());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        long small = -1L + Integer.MIN_VALUE;\n        p = createParser(String.valueOf(small));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(small), p.getNumberValue());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(small, p.getLongValue());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // double -> error\n        p = createParser(String.valueOf(big)+\".0\");\n        try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals((double) big, p.getDoubleValue());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        p = createParser(String.valueOf(small)+\".0\");\n        try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals((double) small, p.getDoubleValue());                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // BigInteger -> error\n        p = createParser(String.valueOf(big));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        p = createParser(String.valueOf(small));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
            "    public void testToIntFailing$catena_24() throws Exception\n    {\n        AsyncReaderWrapper p;\n\n        // long -> error\n        long big = 1L + Integer.MAX_VALUE;\n        p = createParser(String.valueOf(big));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(big, p.getLongValue());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        long small = -1L + Integer.MIN_VALUE;\n        p = createParser(String.valueOf(small));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(small), p.getNumberValue());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(small, p.getLongValue());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // double -> error\n        p = createParser(String.valueOf(big)+\".0\");\n        try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals((double) big, p.getDoubleValue());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        p = createParser(String.valueOf(small)+\".0\");\n        try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals((double) small, p.getDoubleValue());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(Integer.TYPE, e.getTargetType());                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n\n        // BigInteger -> error\n        p = createParser(String.valueOf(big));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        p = createParser(String.valueOf(small));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
            "    public void testToIntFailing$catena_4() throws Exception\n    {\n        AsyncReaderWrapper p;\n\n        // long -> error\n        long big = 1L + Integer.MAX_VALUE;\n        p = createParser(String.valueOf(big));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(big, p.getLongValue());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                     /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        long small = -1L + Integer.MIN_VALUE;\n        p = createParser(String.valueOf(small));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(small), p.getNumberValue());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(small, p.getLongValue());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // double -> error\n        p = createParser(String.valueOf(big)+\".0\");\n        try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals((double) big, p.getDoubleValue());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        p = createParser(String.valueOf(small)+\".0\");\n        try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals((double) small, p.getDoubleValue());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // BigInteger -> error\n        p = createParser(String.valueOf(big));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        p = createParser(String.valueOf(small));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
            "    public void testToIntFailing$catena_27() throws Exception\n    {\n        AsyncReaderWrapper p;\n\n        // long -> error\n        long big = 1L + Integer.MAX_VALUE;\n        p = createParser(String.valueOf(big));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(big, p.getLongValue());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        long small = -1L + Integer.MIN_VALUE;\n        p = createParser(String.valueOf(small));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(small), p.getNumberValue());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(small, p.getLongValue());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // double -> error\n        p = createParser(String.valueOf(big)+\".0\");\n        try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals((double) big, p.getDoubleValue());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        p = createParser(String.valueOf(small)+\".0\");\n        try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals((double) small, p.getDoubleValue());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // BigInteger -> error\n        p = createParser(String.valueOf(big));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            fail(\"Should not pass\");                                                                        /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        p = createParser(String.valueOf(small));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
            "    public void testToIntFailing$catena_33() throws Exception\n    {\n        AsyncReaderWrapper p;\n\n        // long -> error\n        long big = 1L + Integer.MAX_VALUE;\n        p = createParser(String.valueOf(big));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(big, p.getLongValue());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        long small = -1L + Integer.MIN_VALUE;\n        p = createParser(String.valueOf(small));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(small), p.getNumberValue());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(small, p.getLongValue());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // double -> error\n        p = createParser(String.valueOf(big)+\".0\");\n        try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals((double) big, p.getDoubleValue());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        p = createParser(String.valueOf(small)+\".0\");\n        try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals((double) small, p.getDoubleValue());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // BigInteger -> error\n        p = createParser(String.valueOf(big));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        p = createParser(String.valueOf(small));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            fail(\"Should not pass\");                                                                        /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
            "    public void testToIntFailing$catena_9() throws Exception\n    {\n        AsyncReaderWrapper p;\n\n        // long -> error\n        long big = 1L + Integer.MAX_VALUE;\n        p = createParser(String.valueOf(big));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(big, p.getLongValue());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        long small = -1L + Integer.MIN_VALUE;\n        p = createParser(String.valueOf(small));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(small), p.getNumberValue());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(small, p.getLongValue());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            fail(\"Should not pass\");                                                                        /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // double -> error\n        p = createParser(String.valueOf(big)+\".0\");\n        try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals((double) big, p.getDoubleValue());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        p = createParser(String.valueOf(small)+\".0\");\n        try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals((double) small, p.getDoubleValue());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // BigInteger -> error\n        p = createParser(String.valueOf(big));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        p = createParser(String.valueOf(small));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
            "    public void testToIntFailing$catena_7() throws Exception\n    {\n        AsyncReaderWrapper p;\n\n        // long -> error\n        long big = 1L + Integer.MAX_VALUE;\n        p = createParser(String.valueOf(big));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(big, p.getLongValue());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        long small = -1L + Integer.MIN_VALUE;\n        p = createParser(String.valueOf(small));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(Long.valueOf(small), p.getNumberValue());                                              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(small, p.getLongValue());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // double -> error\n        p = createParser(String.valueOf(big)+\".0\");\n        try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals((double) big, p.getDoubleValue());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        p = createParser(String.valueOf(small)+\".0\");\n        try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals((double) small, p.getDoubleValue());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // BigInteger -> error\n        p = createParser(String.valueOf(big));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        p = createParser(String.valueOf(small));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
            "    public void testToIntFailing$catena_1() throws Exception\n    {\n        AsyncReaderWrapper p;\n\n        // long -> error\n        long big = 1L + Integer.MAX_VALUE;\n        p = createParser(String.valueOf(big));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(big, p.getLongValue());                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        long small = -1L + Integer.MIN_VALUE;\n        p = createParser(String.valueOf(small));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(small), p.getNumberValue());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(small, p.getLongValue());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // double -> error\n        p = createParser(String.valueOf(big)+\".0\");\n        try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals((double) big, p.getDoubleValue());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        p = createParser(String.valueOf(small)+\".0\");\n        try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals((double) small, p.getDoubleValue());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // BigInteger -> error\n        p = createParser(String.valueOf(big));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        p = createParser(String.valueOf(small));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
            "    public void testToIntFailing$catena_16() throws Exception\n    {\n        AsyncReaderWrapper p;\n\n        // long -> error\n        long big = 1L + Integer.MAX_VALUE;\n        p = createParser(String.valueOf(big));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(big, p.getLongValue());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        long small = -1L + Integer.MIN_VALUE;\n        p = createParser(String.valueOf(small));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(small), p.getNumberValue());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(small, p.getLongValue());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // double -> error\n        p = createParser(String.valueOf(big)+\".0\");\n        try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals((double) big, p.getDoubleValue());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            verifyException(e, \"out of range of int\");                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        p = createParser(String.valueOf(small)+\".0\");\n        try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals((double) small, p.getDoubleValue());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // BigInteger -> error\n        p = createParser(String.valueOf(big));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        p = createParser(String.valueOf(small));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
            "    public void testToIntFailing$catena_12() throws Exception\n    {\n        AsyncReaderWrapper p;\n\n        // long -> error\n        long big = 1L + Integer.MAX_VALUE;\n        p = createParser(String.valueOf(big));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(big, p.getLongValue());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        long small = -1L + Integer.MIN_VALUE;\n        p = createParser(String.valueOf(small));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(small), p.getNumberValue());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(small, p.getLongValue());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(Integer.TYPE, e.getTargetType());                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n\n        // double -> error\n        p = createParser(String.valueOf(big)+\".0\");\n        try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals((double) big, p.getDoubleValue());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        p = createParser(String.valueOf(small)+\".0\");\n        try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals((double) small, p.getDoubleValue());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // BigInteger -> error\n        p = createParser(String.valueOf(big));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        p = createParser(String.valueOf(small));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
            "    public void testToIntFailing$catena_28() throws Exception\n    {\n        AsyncReaderWrapper p;\n\n        // long -> error\n        long big = 1L + Integer.MAX_VALUE;\n        p = createParser(String.valueOf(big));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(big, p.getLongValue());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        long small = -1L + Integer.MIN_VALUE;\n        p = createParser(String.valueOf(small));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(small), p.getNumberValue());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(small, p.getLongValue());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // double -> error\n        p = createParser(String.valueOf(big)+\".0\");\n        try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals((double) big, p.getDoubleValue());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        p = createParser(String.valueOf(small)+\".0\");\n        try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals((double) small, p.getDoubleValue());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // BigInteger -> error\n        p = createParser(String.valueOf(big));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            verifyException(e, \"out of range of int\");                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        p = createParser(String.valueOf(small));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
            "    public void testToIntFailing$catena_6() throws Exception\n    {\n        AsyncReaderWrapper p;\n\n        // long -> error\n        long big = 1L + Integer.MAX_VALUE;\n        p = createParser(String.valueOf(big));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(big, p.getLongValue());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        long small = -1L + Integer.MIN_VALUE;\n        p = createParser(String.valueOf(small));\n        assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(Long.valueOf(small), p.getNumberValue());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(small, p.getLongValue());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // double -> error\n        p = createParser(String.valueOf(big)+\".0\");\n        try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals((double) big, p.getDoubleValue());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        p = createParser(String.valueOf(small)+\".0\");\n        try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals((double) small, p.getDoubleValue());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // BigInteger -> error\n        p = createParser(String.valueOf(big));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        p = createParser(String.valueOf(small));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
            "    public void testToIntFailing$catena_34() throws Exception\n    {\n        AsyncReaderWrapper p;\n\n        // long -> error\n        long big = 1L + Integer.MAX_VALUE;\n        p = createParser(String.valueOf(big));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(big, p.getLongValue());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        long small = -1L + Integer.MIN_VALUE;\n        p = createParser(String.valueOf(small));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(small), p.getNumberValue());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(small, p.getLongValue());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // double -> error\n        p = createParser(String.valueOf(big)+\".0\");\n        try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals((double) big, p.getDoubleValue());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        p = createParser(String.valueOf(small)+\".0\");\n        try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals((double) small, p.getDoubleValue());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // BigInteger -> error\n        p = createParser(String.valueOf(big));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        p = createParser(String.valueOf(small));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            verifyException(e, \"out of range of int\");                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
            "    public void testToIntFailing$catena_26() throws Exception\n    {\n        AsyncReaderWrapper p;\n\n        // long -> error\n        long big = 1L + Integer.MAX_VALUE;\n        p = createParser(String.valueOf(big));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(big, p.getLongValue());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        long small = -1L + Integer.MIN_VALUE;\n        p = createParser(String.valueOf(small));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(small), p.getNumberValue());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(small, p.getLongValue());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // double -> error\n        p = createParser(String.valueOf(big)+\".0\");\n        try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals((double) big, p.getDoubleValue());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        p = createParser(String.valueOf(small)+\".0\");\n        try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals((double) small, p.getDoubleValue());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // BigInteger -> error\n        p = createParser(String.valueOf(big));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());                                      /***** ORIGINAL ASSERTION IS HERE *****/\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        p = createParser(String.valueOf(small));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
            "    public void testToIntFailing$catena_32() throws Exception\n    {\n        AsyncReaderWrapper p;\n\n        // long -> error\n        long big = 1L + Integer.MAX_VALUE;\n        p = createParser(String.valueOf(big));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(big, p.getLongValue());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        long small = -1L + Integer.MIN_VALUE;\n        p = createParser(String.valueOf(small));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(small), p.getNumberValue());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(small, p.getLongValue());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // double -> error\n        p = createParser(String.valueOf(big)+\".0\");\n        try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals((double) big, p.getDoubleValue());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        p = createParser(String.valueOf(small)+\".0\");\n        try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals((double) small, p.getDoubleValue());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // BigInteger -> error\n        p = createParser(String.valueOf(big));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        p = createParser(String.valueOf(small));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());                                    /***** ORIGINAL ASSERTION IS HERE *****/\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
            "    public void testToIntFailing$catena_22() throws Exception\n    {\n        AsyncReaderWrapper p;\n\n        // long -> error\n        long big = 1L + Integer.MAX_VALUE;\n        p = createParser(String.valueOf(big));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(big, p.getLongValue());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        long small = -1L + Integer.MIN_VALUE;\n        p = createParser(String.valueOf(small));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(small), p.getNumberValue());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(small, p.getLongValue());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // double -> error\n        p = createParser(String.valueOf(big)+\".0\");\n        try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals((double) big, p.getDoubleValue());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        p = createParser(String.valueOf(small)+\".0\");\n        try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals((double) small, p.getDoubleValue());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            verifyException(e, \"out of range of int\");                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // BigInteger -> error\n        p = createParser(String.valueOf(big));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        p = createParser(String.valueOf(small));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
            "    public void testToIntFailing$catena_0() throws Exception\n    {\n        AsyncReaderWrapper p;\n\n        // long -> error\n        long big = 1L + Integer.MAX_VALUE;\n        p = createParser(String.valueOf(big));\n        assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(big, p.getLongValue());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        long small = -1L + Integer.MIN_VALUE;\n        p = createParser(String.valueOf(small));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(small), p.getNumberValue());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(small, p.getLongValue());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // double -> error\n        p = createParser(String.valueOf(big)+\".0\");\n        try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals((double) big, p.getDoubleValue());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        p = createParser(String.valueOf(small)+\".0\");\n        try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals((double) small, p.getDoubleValue());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // BigInteger -> error\n        p = createParser(String.valueOf(big));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        p = createParser(String.valueOf(small));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
            "    public void testToIntFailing$catena_17() throws Exception\n    {\n        AsyncReaderWrapper p;\n\n        // long -> error\n        long big = 1L + Integer.MAX_VALUE;\n        p = createParser(String.valueOf(big));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(big, p.getLongValue());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        long small = -1L + Integer.MIN_VALUE;\n        p = createParser(String.valueOf(small));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(small), p.getNumberValue());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(small, p.getLongValue());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // double -> error\n        p = createParser(String.valueOf(big)+\".0\");\n        try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals((double) big, p.getDoubleValue());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                     /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        p = createParser(String.valueOf(small)+\".0\");\n        try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals((double) small, p.getDoubleValue());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // BigInteger -> error\n        p = createParser(String.valueOf(big));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        p = createParser(String.valueOf(small));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
            "    public void testToIntFailing$catena_31() throws Exception\n    {\n        AsyncReaderWrapper p;\n\n        // long -> error\n        long big = 1L + Integer.MAX_VALUE;\n        p = createParser(String.valueOf(big));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(big, p.getLongValue());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        long small = -1L + Integer.MIN_VALUE;\n        p = createParser(String.valueOf(small));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(small), p.getNumberValue());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(small, p.getLongValue());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // double -> error\n        p = createParser(String.valueOf(big)+\".0\");\n        try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals((double) big, p.getDoubleValue());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        p = createParser(String.valueOf(small)+\".0\");\n        try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals((double) small, p.getDoubleValue());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // BigInteger -> error\n        p = createParser(String.valueOf(big));\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        p = createParser(String.valueOf(small));\n        assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            p.getIntValue();\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (InputCoercionException e) {\n            try{ verifyException(e, \"out of range of int\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Integer.TYPE, e.getTargetType());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }"
        ]
    },
    "com.fasterxml.jackson.core.read.NumberCoercionTest::testToIntFailing": {
        "begin_line_no": 56,
        "end_line_no": 137,
        "file_path": "src/test/java/com/fasterxml/jackson/core/read/NumberCoercionTest.java",
        "to": [
            "    @SuppressWarnings(\"resource\")\n    public void testToIntFailing$catena_19() throws Exception\n    {\n        for (int mode : ALL_STREAMING_MODES) {\n            JsonParser p;\n\n            // long -> error\n            long big = 1L + Integer.MAX_VALUE;\n            p = createParser(mode, String.valueOf(big));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(big, p.getLongValue());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            long small = -1L + Integer.MIN_VALUE;\n            p = createParser(mode, String.valueOf(small));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Long.valueOf(small), p.getNumberValue());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(small, p.getLongValue());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n\n            // double -> error\n            p = createParser(mode, String.valueOf(big)+\".0\");\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((double) big, p.getDoubleValue());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            p = createParser(mode, String.valueOf(small)+\".0\");\n            assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                       /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals((double) small, p.getDoubleValue());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n\n            // BigInteger -> error\n            p = createParser(mode, String.valueOf(big));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            p = createParser(mode, String.valueOf(small));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n    }",
            "    @SuppressWarnings(\"resource\")\n    public void testToIntFailing$catena_21() throws Exception\n    {\n        for (int mode : ALL_STREAMING_MODES) {\n            JsonParser p;\n\n            // long -> error\n            long big = 1L + Integer.MAX_VALUE;\n            p = createParser(mode, String.valueOf(big));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(big, p.getLongValue());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            long small = -1L + Integer.MIN_VALUE;\n            p = createParser(mode, String.valueOf(small));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Long.valueOf(small), p.getNumberValue());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(small, p.getLongValue());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n\n            // double -> error\n            p = createParser(mode, String.valueOf(big)+\".0\");\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((double) big, p.getDoubleValue());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            p = createParser(mode, String.valueOf(small)+\".0\");\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((double) small, p.getDoubleValue());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                fail(\"Should not pass\");                                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n\n            // BigInteger -> error\n            p = createParser(mode, String.valueOf(big));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            p = createParser(mode, String.valueOf(small));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n    }",
            "    @SuppressWarnings(\"resource\")\n    public void testToIntFailing$catena_13() throws Exception\n    {\n        for (int mode : ALL_STREAMING_MODES) {\n            JsonParser p;\n\n            // long -> error\n            long big = 1L + Integer.MAX_VALUE;\n            p = createParser(mode, String.valueOf(big));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(big, p.getLongValue());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            long small = -1L + Integer.MIN_VALUE;\n            p = createParser(mode, String.valueOf(small));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Long.valueOf(small), p.getNumberValue());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(small, p.getLongValue());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n\n            // double -> error\n            p = createParser(mode, String.valueOf(big)+\".0\");\n            assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                       /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals((double) big, p.getDoubleValue());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            p = createParser(mode, String.valueOf(small)+\".0\");\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((double) small, p.getDoubleValue());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n\n            // BigInteger -> error\n            p = createParser(mode, String.valueOf(big));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            p = createParser(mode, String.valueOf(small));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n    }",
            "    @SuppressWarnings(\"resource\")\n    public void testToIntFailing$catena_8() throws Exception\n    {\n        for (int mode : ALL_STREAMING_MODES) {\n            JsonParser p;\n\n            // long -> error\n            long big = 1L + Integer.MAX_VALUE;\n            p = createParser(mode, String.valueOf(big));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(big, p.getLongValue());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            long small = -1L + Integer.MIN_VALUE;\n            p = createParser(mode, String.valueOf(small));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Long.valueOf(small), p.getNumberValue());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(small, p.getLongValue());                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n\n            // double -> error\n            p = createParser(mode, String.valueOf(big)+\".0\");\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((double) big, p.getDoubleValue());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            p = createParser(mode, String.valueOf(small)+\".0\");\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((double) small, p.getDoubleValue());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n\n            // BigInteger -> error\n            p = createParser(mode, String.valueOf(big));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            p = createParser(mode, String.valueOf(small));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n    }",
            "    @SuppressWarnings(\"resource\")\n    public void testToIntFailing$catena_10() throws Exception\n    {\n        for (int mode : ALL_STREAMING_MODES) {\n            JsonParser p;\n\n            // long -> error\n            long big = 1L + Integer.MAX_VALUE;\n            p = createParser(mode, String.valueOf(big));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(big, p.getLongValue());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            long small = -1L + Integer.MIN_VALUE;\n            p = createParser(mode, String.valueOf(small));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Long.valueOf(small), p.getNumberValue());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(small, p.getLongValue());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                verifyException(e, \"out of range of int\");                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n\n            // double -> error\n            p = createParser(mode, String.valueOf(big)+\".0\");\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((double) big, p.getDoubleValue());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            p = createParser(mode, String.valueOf(small)+\".0\");\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((double) small, p.getDoubleValue());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n\n            // BigInteger -> error\n            p = createParser(mode, String.valueOf(big));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            p = createParser(mode, String.valueOf(small));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n    }",
            "    @SuppressWarnings(\"resource\")\n    public void testToIntFailing$catena_7() throws Exception\n    {\n        for (int mode : ALL_STREAMING_MODES) {\n            JsonParser p;\n\n            // long -> error\n            long big = 1L + Integer.MAX_VALUE;\n            p = createParser(mode, String.valueOf(big));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(big, p.getLongValue());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            long small = -1L + Integer.MIN_VALUE;\n            p = createParser(mode, String.valueOf(small));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(Long.valueOf(small), p.getNumberValue());                                          /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(small, p.getLongValue());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n\n            // double -> error\n            p = createParser(mode, String.valueOf(big)+\".0\");\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((double) big, p.getDoubleValue());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            p = createParser(mode, String.valueOf(small)+\".0\");\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((double) small, p.getDoubleValue());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n\n            // BigInteger -> error\n            p = createParser(mode, String.valueOf(big));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            p = createParser(mode, String.valueOf(small));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n    }",
            "    @SuppressWarnings(\"resource\")\n    public void testToIntFailing$catena_26() throws Exception\n    {\n        for (int mode : ALL_STREAMING_MODES) {\n            JsonParser p;\n\n            // long -> error\n            long big = 1L + Integer.MAX_VALUE;\n            p = createParser(mode, String.valueOf(big));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(big, p.getLongValue());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            long small = -1L + Integer.MIN_VALUE;\n            p = createParser(mode, String.valueOf(small));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Long.valueOf(small), p.getNumberValue());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(small, p.getLongValue());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n\n            // double -> error\n            p = createParser(mode, String.valueOf(big)+\".0\");\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((double) big, p.getDoubleValue());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            p = createParser(mode, String.valueOf(small)+\".0\");\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((double) small, p.getDoubleValue());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n\n            // BigInteger -> error\n            p = createParser(mode, String.valueOf(big));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());                                  /***** ORIGINAL ASSERTION IS HERE *****/\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            p = createParser(mode, String.valueOf(small));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n    }",
            "    @SuppressWarnings(\"resource\")\n    public void testToIntFailing$catena_36() throws Exception\n    {\n        for (int mode : ALL_STREAMING_MODES) {\n            JsonParser p;\n\n            // long -> error\n            long big = 1L + Integer.MAX_VALUE;\n            p = createParser(mode, String.valueOf(big));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(big, p.getLongValue());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            long small = -1L + Integer.MIN_VALUE;\n            p = createParser(mode, String.valueOf(small));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Long.valueOf(small), p.getNumberValue());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(small, p.getLongValue());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n\n            // double -> error\n            p = createParser(mode, String.valueOf(big)+\".0\");\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((double) big, p.getDoubleValue());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            p = createParser(mode, String.valueOf(small)+\".0\");\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((double) small, p.getDoubleValue());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n\n            // BigInteger -> error\n            p = createParser(mode, String.valueOf(big));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            p = createParser(mode, String.valueOf(small));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                assertEquals(Integer.TYPE, e.getTargetType());                                              /***** ORIGINAL ASSERTION IS HERE *****/\n            }\n        }\n    }",
            "    @SuppressWarnings(\"resource\")\n    public void testToIntFailing$catena_3() throws Exception\n    {\n        for (int mode : ALL_STREAMING_MODES) {\n            JsonParser p;\n\n            // long -> error\n            long big = 1L + Integer.MAX_VALUE;\n            p = createParser(mode, String.valueOf(big));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(big, p.getLongValue());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                verifyException(e, \"out of range of int\");                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            long small = -1L + Integer.MIN_VALUE;\n            p = createParser(mode, String.valueOf(small));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Long.valueOf(small), p.getNumberValue());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(small, p.getLongValue());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n\n            // double -> error\n            p = createParser(mode, String.valueOf(big)+\".0\");\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((double) big, p.getDoubleValue());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            p = createParser(mode, String.valueOf(small)+\".0\");\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((double) small, p.getDoubleValue());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n\n            // BigInteger -> error\n            p = createParser(mode, String.valueOf(big));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            p = createParser(mode, String.valueOf(small));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n    }",
            "    @SuppressWarnings(\"resource\")\n    public void testToIntFailing$catena_30() throws Exception\n    {\n        for (int mode : ALL_STREAMING_MODES) {\n            JsonParser p;\n\n            // long -> error\n            long big = 1L + Integer.MAX_VALUE;\n            p = createParser(mode, String.valueOf(big));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(big, p.getLongValue());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            long small = -1L + Integer.MIN_VALUE;\n            p = createParser(mode, String.valueOf(small));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Long.valueOf(small), p.getNumberValue());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(small, p.getLongValue());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n\n            // double -> error\n            p = createParser(mode, String.valueOf(big)+\".0\");\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((double) big, p.getDoubleValue());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            p = createParser(mode, String.valueOf(small)+\".0\");\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((double) small, p.getDoubleValue());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n\n            // BigInteger -> error\n            p = createParser(mode, String.valueOf(big));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                assertEquals(Integer.TYPE, e.getTargetType());                                              /***** ORIGINAL ASSERTION IS HERE *****/\n            }\n            p = createParser(mode, String.valueOf(small));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n    }",
            "    @SuppressWarnings(\"resource\")\n    public void testToIntFailing$catena_2() throws Exception\n    {\n        for (int mode : ALL_STREAMING_MODES) {\n            JsonParser p;\n\n            // long -> error\n            long big = 1L + Integer.MAX_VALUE;\n            p = createParser(mode, String.valueOf(big));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(big, p.getLongValue());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                fail(\"Should not pass\");                                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            long small = -1L + Integer.MIN_VALUE;\n            p = createParser(mode, String.valueOf(small));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Long.valueOf(small), p.getNumberValue());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(small, p.getLongValue());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n\n            // double -> error\n            p = createParser(mode, String.valueOf(big)+\".0\");\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((double) big, p.getDoubleValue());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            p = createParser(mode, String.valueOf(small)+\".0\");\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((double) small, p.getDoubleValue());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n\n            // BigInteger -> error\n            p = createParser(mode, String.valueOf(big));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            p = createParser(mode, String.valueOf(small));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n    }",
            "    @SuppressWarnings(\"resource\")\n    public void testToIntFailing$catena_11() throws Exception\n    {\n        for (int mode : ALL_STREAMING_MODES) {\n            JsonParser p;\n\n            // long -> error\n            long big = 1L + Integer.MAX_VALUE;\n            p = createParser(mode, String.valueOf(big));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(big, p.getLongValue());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            long small = -1L + Integer.MIN_VALUE;\n            p = createParser(mode, String.valueOf(small));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Long.valueOf(small), p.getNumberValue());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(small, p.getLongValue());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                 /***** ORIGINAL ASSERTION IS HERE *****/\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n\n            // double -> error\n            p = createParser(mode, String.valueOf(big)+\".0\");\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((double) big, p.getDoubleValue());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            p = createParser(mode, String.valueOf(small)+\".0\");\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((double) small, p.getDoubleValue());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n\n            // BigInteger -> error\n            p = createParser(mode, String.valueOf(big));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            p = createParser(mode, String.valueOf(small));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n    }",
            "    @SuppressWarnings(\"resource\")\n    public void testToIntFailing$catena_35() throws Exception\n    {\n        for (int mode : ALL_STREAMING_MODES) {\n            JsonParser p;\n\n            // long -> error\n            long big = 1L + Integer.MAX_VALUE;\n            p = createParser(mode, String.valueOf(big));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(big, p.getLongValue());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            long small = -1L + Integer.MIN_VALUE;\n            p = createParser(mode, String.valueOf(small));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Long.valueOf(small), p.getNumberValue());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(small, p.getLongValue());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n\n            // double -> error\n            p = createParser(mode, String.valueOf(big)+\".0\");\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((double) big, p.getDoubleValue());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            p = createParser(mode, String.valueOf(small)+\".0\");\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((double) small, p.getDoubleValue());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n\n            // BigInteger -> error\n            p = createParser(mode, String.valueOf(big));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            p = createParser(mode, String.valueOf(small));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                 /***** ORIGINAL ASSERTION IS HERE *****/\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n    }",
            "    @SuppressWarnings(\"resource\")\n    public void testToIntFailing$catena_23() throws Exception\n    {\n        for (int mode : ALL_STREAMING_MODES) {\n            JsonParser p;\n\n            // long -> error\n            long big = 1L + Integer.MAX_VALUE;\n            p = createParser(mode, String.valueOf(big));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(big, p.getLongValue());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            long small = -1L + Integer.MIN_VALUE;\n            p = createParser(mode, String.valueOf(small));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Long.valueOf(small), p.getNumberValue());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(small, p.getLongValue());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n\n            // double -> error\n            p = createParser(mode, String.valueOf(big)+\".0\");\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((double) big, p.getDoubleValue());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            p = createParser(mode, String.valueOf(small)+\".0\");\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((double) small, p.getDoubleValue());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                 /***** ORIGINAL ASSERTION IS HERE *****/\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n\n            // BigInteger -> error\n            p = createParser(mode, String.valueOf(big));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            p = createParser(mode, String.valueOf(small));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n    }",
            "    @SuppressWarnings(\"resource\")\n    public void testToIntFailing$catena_29() throws Exception\n    {\n        for (int mode : ALL_STREAMING_MODES) {\n            JsonParser p;\n\n            // long -> error\n            long big = 1L + Integer.MAX_VALUE;\n            p = createParser(mode, String.valueOf(big));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(big, p.getLongValue());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            long small = -1L + Integer.MIN_VALUE;\n            p = createParser(mode, String.valueOf(small));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Long.valueOf(small), p.getNumberValue());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(small, p.getLongValue());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n\n            // double -> error\n            p = createParser(mode, String.valueOf(big)+\".0\");\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((double) big, p.getDoubleValue());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            p = createParser(mode, String.valueOf(small)+\".0\");\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((double) small, p.getDoubleValue());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n\n            // BigInteger -> error\n            p = createParser(mode, String.valueOf(big));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                 /***** ORIGINAL ASSERTION IS HERE *****/\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            p = createParser(mode, String.valueOf(small));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n    }",
            "    @SuppressWarnings(\"resource\")\n    public void testToIntFailing$catena_27() throws Exception\n    {\n        for (int mode : ALL_STREAMING_MODES) {\n            JsonParser p;\n\n            // long -> error\n            long big = 1L + Integer.MAX_VALUE;\n            p = createParser(mode, String.valueOf(big));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(big, p.getLongValue());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            long small = -1L + Integer.MIN_VALUE;\n            p = createParser(mode, String.valueOf(small));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Long.valueOf(small), p.getNumberValue());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(small, p.getLongValue());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n\n            // double -> error\n            p = createParser(mode, String.valueOf(big)+\".0\");\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((double) big, p.getDoubleValue());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            p = createParser(mode, String.valueOf(small)+\".0\");\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((double) small, p.getDoubleValue());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n\n            // BigInteger -> error\n            p = createParser(mode, String.valueOf(big));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                fail(\"Should not pass\");                                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            p = createParser(mode, String.valueOf(small));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n    }",
            "    @SuppressWarnings(\"resource\")\n    public void testToIntFailing$catena_9() throws Exception\n    {\n        for (int mode : ALL_STREAMING_MODES) {\n            JsonParser p;\n\n            // long -> error\n            long big = 1L + Integer.MAX_VALUE;\n            p = createParser(mode, String.valueOf(big));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(big, p.getLongValue());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            long small = -1L + Integer.MIN_VALUE;\n            p = createParser(mode, String.valueOf(small));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Long.valueOf(small), p.getNumberValue());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(small, p.getLongValue());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                fail(\"Should not pass\");                                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n\n            // double -> error\n            p = createParser(mode, String.valueOf(big)+\".0\");\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((double) big, p.getDoubleValue());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            p = createParser(mode, String.valueOf(small)+\".0\");\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((double) small, p.getDoubleValue());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n\n            // BigInteger -> error\n            p = createParser(mode, String.valueOf(big));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            p = createParser(mode, String.valueOf(small));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n    }",
            "    @SuppressWarnings(\"resource\")\n    public void testToIntFailing$catena_32() throws Exception\n    {\n        for (int mode : ALL_STREAMING_MODES) {\n            JsonParser p;\n\n            // long -> error\n            long big = 1L + Integer.MAX_VALUE;\n            p = createParser(mode, String.valueOf(big));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(big, p.getLongValue());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            long small = -1L + Integer.MIN_VALUE;\n            p = createParser(mode, String.valueOf(small));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Long.valueOf(small), p.getNumberValue());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(small, p.getLongValue());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n\n            // double -> error\n            p = createParser(mode, String.valueOf(big)+\".0\");\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((double) big, p.getDoubleValue());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            p = createParser(mode, String.valueOf(small)+\".0\");\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((double) small, p.getDoubleValue());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n\n            // BigInteger -> error\n            p = createParser(mode, String.valueOf(big));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            p = createParser(mode, String.valueOf(small));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());                                /***** ORIGINAL ASSERTION IS HERE *****/\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n    }",
            "    @SuppressWarnings(\"resource\")\n    public void testToIntFailing$catena_20() throws Exception\n    {\n        for (int mode : ALL_STREAMING_MODES) {\n            JsonParser p;\n\n            // long -> error\n            long big = 1L + Integer.MAX_VALUE;\n            p = createParser(mode, String.valueOf(big));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(big, p.getLongValue());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            long small = -1L + Integer.MIN_VALUE;\n            p = createParser(mode, String.valueOf(small));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Long.valueOf(small), p.getNumberValue());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(small, p.getLongValue());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n\n            // double -> error\n            p = createParser(mode, String.valueOf(big)+\".0\");\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((double) big, p.getDoubleValue());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            p = createParser(mode, String.valueOf(small)+\".0\");\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals((double) small, p.getDoubleValue());                                               /***** ORIGINAL ASSERTION IS HERE *****/\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n\n            // BigInteger -> error\n            p = createParser(mode, String.valueOf(big));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            p = createParser(mode, String.valueOf(small));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n    }",
            "    @SuppressWarnings(\"resource\")\n    public void testToIntFailing$catena_12() throws Exception\n    {\n        for (int mode : ALL_STREAMING_MODES) {\n            JsonParser p;\n\n            // long -> error\n            long big = 1L + Integer.MAX_VALUE;\n            p = createParser(mode, String.valueOf(big));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(big, p.getLongValue());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            long small = -1L + Integer.MIN_VALUE;\n            p = createParser(mode, String.valueOf(small));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Long.valueOf(small), p.getNumberValue());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(small, p.getLongValue());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                assertEquals(Integer.TYPE, e.getTargetType());                                              /***** ORIGINAL ASSERTION IS HERE *****/\n            }\n\n            // double -> error\n            p = createParser(mode, String.valueOf(big)+\".0\");\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((double) big, p.getDoubleValue());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            p = createParser(mode, String.valueOf(small)+\".0\");\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((double) small, p.getDoubleValue());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n\n            // BigInteger -> error\n            p = createParser(mode, String.valueOf(big));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            p = createParser(mode, String.valueOf(small));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n    }",
            "    @SuppressWarnings(\"resource\")\n    public void testToIntFailing$catena_33() throws Exception\n    {\n        for (int mode : ALL_STREAMING_MODES) {\n            JsonParser p;\n\n            // long -> error\n            long big = 1L + Integer.MAX_VALUE;\n            p = createParser(mode, String.valueOf(big));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(big, p.getLongValue());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            long small = -1L + Integer.MIN_VALUE;\n            p = createParser(mode, String.valueOf(small));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Long.valueOf(small), p.getNumberValue());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(small, p.getLongValue());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n\n            // double -> error\n            p = createParser(mode, String.valueOf(big)+\".0\");\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((double) big, p.getDoubleValue());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            p = createParser(mode, String.valueOf(small)+\".0\");\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((double) small, p.getDoubleValue());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n\n            // BigInteger -> error\n            p = createParser(mode, String.valueOf(big));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            p = createParser(mode, String.valueOf(small));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                fail(\"Should not pass\");                                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n    }",
            "    @SuppressWarnings(\"resource\")\n    public void testToIntFailing$catena_24() throws Exception\n    {\n        for (int mode : ALL_STREAMING_MODES) {\n            JsonParser p;\n\n            // long -> error\n            long big = 1L + Integer.MAX_VALUE;\n            p = createParser(mode, String.valueOf(big));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(big, p.getLongValue());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            long small = -1L + Integer.MIN_VALUE;\n            p = createParser(mode, String.valueOf(small));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Long.valueOf(small), p.getNumberValue());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(small, p.getLongValue());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n\n            // double -> error\n            p = createParser(mode, String.valueOf(big)+\".0\");\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((double) big, p.getDoubleValue());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            p = createParser(mode, String.valueOf(small)+\".0\");\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((double) small, p.getDoubleValue());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                assertEquals(Integer.TYPE, e.getTargetType());                                              /***** ORIGINAL ASSERTION IS HERE *****/\n            }\n\n            // BigInteger -> error\n            p = createParser(mode, String.valueOf(big));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            p = createParser(mode, String.valueOf(small));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n    }",
            "    @SuppressWarnings(\"resource\")\n    public void testToIntFailing$catena_34() throws Exception\n    {\n        for (int mode : ALL_STREAMING_MODES) {\n            JsonParser p;\n\n            // long -> error\n            long big = 1L + Integer.MAX_VALUE;\n            p = createParser(mode, String.valueOf(big));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(big, p.getLongValue());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            long small = -1L + Integer.MIN_VALUE;\n            p = createParser(mode, String.valueOf(small));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Long.valueOf(small), p.getNumberValue());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(small, p.getLongValue());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n\n            // double -> error\n            p = createParser(mode, String.valueOf(big)+\".0\");\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((double) big, p.getDoubleValue());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            p = createParser(mode, String.valueOf(small)+\".0\");\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((double) small, p.getDoubleValue());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n\n            // BigInteger -> error\n            p = createParser(mode, String.valueOf(big));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            p = createParser(mode, String.valueOf(small));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                verifyException(e, \"out of range of int\");                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n    }",
            "    @SuppressWarnings(\"resource\")\n    public void testToIntFailing$catena_18() throws Exception\n    {\n        for (int mode : ALL_STREAMING_MODES) {\n            JsonParser p;\n\n            // long -> error\n            long big = 1L + Integer.MAX_VALUE;\n            p = createParser(mode, String.valueOf(big));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(big, p.getLongValue());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            long small = -1L + Integer.MIN_VALUE;\n            p = createParser(mode, String.valueOf(small));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Long.valueOf(small), p.getNumberValue());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(small, p.getLongValue());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n\n            // double -> error\n            p = createParser(mode, String.valueOf(big)+\".0\");\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((double) big, p.getDoubleValue());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                assertEquals(Integer.TYPE, e.getTargetType());                                              /***** ORIGINAL ASSERTION IS HERE *****/\n            }\n            p = createParser(mode, String.valueOf(small)+\".0\");\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((double) small, p.getDoubleValue());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n\n            // BigInteger -> error\n            p = createParser(mode, String.valueOf(big));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            p = createParser(mode, String.valueOf(small));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n    }",
            "    @SuppressWarnings(\"resource\")\n    public void testToIntFailing$catena_5() throws Exception\n    {\n        for (int mode : ALL_STREAMING_MODES) {\n            JsonParser p;\n\n            // long -> error\n            long big = 1L + Integer.MAX_VALUE;\n            p = createParser(mode, String.valueOf(big));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(big, p.getLongValue());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                assertEquals(Integer.TYPE, e.getTargetType());                                              /***** ORIGINAL ASSERTION IS HERE *****/\n            }\n            long small = -1L + Integer.MIN_VALUE;\n            p = createParser(mode, String.valueOf(small));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Long.valueOf(small), p.getNumberValue());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(small, p.getLongValue());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n\n            // double -> error\n            p = createParser(mode, String.valueOf(big)+\".0\");\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((double) big, p.getDoubleValue());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            p = createParser(mode, String.valueOf(small)+\".0\");\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((double) small, p.getDoubleValue());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n\n            // BigInteger -> error\n            p = createParser(mode, String.valueOf(big));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            p = createParser(mode, String.valueOf(small));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n    }",
            "    @SuppressWarnings(\"resource\")\n    public void testToIntFailing$catena_17() throws Exception\n    {\n        for (int mode : ALL_STREAMING_MODES) {\n            JsonParser p;\n\n            // long -> error\n            long big = 1L + Integer.MAX_VALUE;\n            p = createParser(mode, String.valueOf(big));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(big, p.getLongValue());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            long small = -1L + Integer.MIN_VALUE;\n            p = createParser(mode, String.valueOf(small));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Long.valueOf(small), p.getNumberValue());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(small, p.getLongValue());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n\n            // double -> error\n            p = createParser(mode, String.valueOf(big)+\".0\");\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((double) big, p.getDoubleValue());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                 /***** ORIGINAL ASSERTION IS HERE *****/\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            p = createParser(mode, String.valueOf(small)+\".0\");\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((double) small, p.getDoubleValue());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n\n            // BigInteger -> error\n            p = createParser(mode, String.valueOf(big));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            p = createParser(mode, String.valueOf(small));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n    }",
            "    @SuppressWarnings(\"resource\")\n    public void testToIntFailing$catena_4() throws Exception\n    {\n        for (int mode : ALL_STREAMING_MODES) {\n            JsonParser p;\n\n            // long -> error\n            long big = 1L + Integer.MAX_VALUE;\n            p = createParser(mode, String.valueOf(big));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(big, p.getLongValue());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                                 /***** ORIGINAL ASSERTION IS HERE *****/\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            long small = -1L + Integer.MIN_VALUE;\n            p = createParser(mode, String.valueOf(small));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Long.valueOf(small), p.getNumberValue());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(small, p.getLongValue());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n\n            // double -> error\n            p = createParser(mode, String.valueOf(big)+\".0\");\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((double) big, p.getDoubleValue());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            p = createParser(mode, String.valueOf(small)+\".0\");\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((double) small, p.getDoubleValue());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n\n            // BigInteger -> error\n            p = createParser(mode, String.valueOf(big));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            p = createParser(mode, String.valueOf(small));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n    }",
            "    @SuppressWarnings(\"resource\")\n    public void testToIntFailing$catena_31() throws Exception\n    {\n        for (int mode : ALL_STREAMING_MODES) {\n            JsonParser p;\n\n            // long -> error\n            long big = 1L + Integer.MAX_VALUE;\n            p = createParser(mode, String.valueOf(big));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(big, p.getLongValue());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            long small = -1L + Integer.MIN_VALUE;\n            p = createParser(mode, String.valueOf(small));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Long.valueOf(small), p.getNumberValue());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(small, p.getLongValue());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n\n            // double -> error\n            p = createParser(mode, String.valueOf(big)+\".0\");\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((double) big, p.getDoubleValue());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            p = createParser(mode, String.valueOf(small)+\".0\");\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((double) small, p.getDoubleValue());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n\n            // BigInteger -> error\n            p = createParser(mode, String.valueOf(big));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            p = createParser(mode, String.valueOf(small));\n            assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                         /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n    }",
            "    @SuppressWarnings(\"resource\")\n    public void testToIntFailing$catena_14() throws Exception\n    {\n        for (int mode : ALL_STREAMING_MODES) {\n            JsonParser p;\n\n            // long -> error\n            long big = 1L + Integer.MAX_VALUE;\n            p = createParser(mode, String.valueOf(big));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(big, p.getLongValue());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            long small = -1L + Integer.MIN_VALUE;\n            p = createParser(mode, String.valueOf(small));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Long.valueOf(small), p.getNumberValue());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(small, p.getLongValue());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n\n            // double -> error\n            p = createParser(mode, String.valueOf(big)+\".0\");\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals((double) big, p.getDoubleValue());                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            p = createParser(mode, String.valueOf(small)+\".0\");\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((double) small, p.getDoubleValue());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n\n            // BigInteger -> error\n            p = createParser(mode, String.valueOf(big));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            p = createParser(mode, String.valueOf(small));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n    }",
            "    @SuppressWarnings(\"resource\")\n    public void testToIntFailing$catena_25() throws Exception\n    {\n        for (int mode : ALL_STREAMING_MODES) {\n            JsonParser p;\n\n            // long -> error\n            long big = 1L + Integer.MAX_VALUE;\n            p = createParser(mode, String.valueOf(big));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(big, p.getLongValue());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            long small = -1L + Integer.MIN_VALUE;\n            p = createParser(mode, String.valueOf(small));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Long.valueOf(small), p.getNumberValue());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(small, p.getLongValue());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n\n            // double -> error\n            p = createParser(mode, String.valueOf(big)+\".0\");\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((double) big, p.getDoubleValue());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            p = createParser(mode, String.valueOf(small)+\".0\");\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((double) small, p.getDoubleValue());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n\n            // BigInteger -> error\n            p = createParser(mode, String.valueOf(big));\n            assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                         /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            p = createParser(mode, String.valueOf(small));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n    }",
            "    @SuppressWarnings(\"resource\")\n    public void testToIntFailing$catena_22() throws Exception\n    {\n        for (int mode : ALL_STREAMING_MODES) {\n            JsonParser p;\n\n            // long -> error\n            long big = 1L + Integer.MAX_VALUE;\n            p = createParser(mode, String.valueOf(big));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(big, p.getLongValue());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            long small = -1L + Integer.MIN_VALUE;\n            p = createParser(mode, String.valueOf(small));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Long.valueOf(small), p.getNumberValue());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(small, p.getLongValue());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n\n            // double -> error\n            p = createParser(mode, String.valueOf(big)+\".0\");\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((double) big, p.getDoubleValue());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            p = createParser(mode, String.valueOf(small)+\".0\");\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((double) small, p.getDoubleValue());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                verifyException(e, \"out of range of int\");                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n\n            // BigInteger -> error\n            p = createParser(mode, String.valueOf(big));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            p = createParser(mode, String.valueOf(small));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n    }",
            "    @SuppressWarnings(\"resource\")\n    public void testToIntFailing$catena_15() throws Exception\n    {\n        for (int mode : ALL_STREAMING_MODES) {\n            JsonParser p;\n\n            // long -> error\n            long big = 1L + Integer.MAX_VALUE;\n            p = createParser(mode, String.valueOf(big));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(big, p.getLongValue());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            long small = -1L + Integer.MIN_VALUE;\n            p = createParser(mode, String.valueOf(small));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Long.valueOf(small), p.getNumberValue());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(small, p.getLongValue());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n\n            // double -> error\n            p = createParser(mode, String.valueOf(big)+\".0\");\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((double) big, p.getDoubleValue());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                fail(\"Should not pass\");                                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            p = createParser(mode, String.valueOf(small)+\".0\");\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((double) small, p.getDoubleValue());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n\n            // BigInteger -> error\n            p = createParser(mode, String.valueOf(big));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            p = createParser(mode, String.valueOf(small));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n    }",
            "    @SuppressWarnings(\"resource\")\n    public void testToIntFailing$catena_16() throws Exception\n    {\n        for (int mode : ALL_STREAMING_MODES) {\n            JsonParser p;\n\n            // long -> error\n            long big = 1L + Integer.MAX_VALUE;\n            p = createParser(mode, String.valueOf(big));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(big, p.getLongValue());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            long small = -1L + Integer.MIN_VALUE;\n            p = createParser(mode, String.valueOf(small));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Long.valueOf(small), p.getNumberValue());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(small, p.getLongValue());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n\n            // double -> error\n            p = createParser(mode, String.valueOf(big)+\".0\");\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((double) big, p.getDoubleValue());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                verifyException(e, \"out of range of int\");                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            p = createParser(mode, String.valueOf(small)+\".0\");\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((double) small, p.getDoubleValue());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n\n            // BigInteger -> error\n            p = createParser(mode, String.valueOf(big));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            p = createParser(mode, String.valueOf(small));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n    }",
            "    @SuppressWarnings(\"resource\")\n    public void testToIntFailing$catena_6() throws Exception\n    {\n        for (int mode : ALL_STREAMING_MODES) {\n            JsonParser p;\n\n            // long -> error\n            long big = 1L + Integer.MAX_VALUE;\n            p = createParser(mode, String.valueOf(big));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(big, p.getLongValue());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            long small = -1L + Integer.MIN_VALUE;\n            p = createParser(mode, String.valueOf(small));\n            assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                         /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(Long.valueOf(small), p.getNumberValue());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(small, p.getLongValue());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n\n            // double -> error\n            p = createParser(mode, String.valueOf(big)+\".0\");\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((double) big, p.getDoubleValue());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            p = createParser(mode, String.valueOf(small)+\".0\");\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((double) small, p.getDoubleValue());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n\n            // BigInteger -> error\n            p = createParser(mode, String.valueOf(big));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            p = createParser(mode, String.valueOf(small));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n    }",
            "    @SuppressWarnings(\"resource\")\n    public void testToIntFailing$catena_1() throws Exception\n    {\n        for (int mode : ALL_STREAMING_MODES) {\n            JsonParser p;\n\n            // long -> error\n            long big = 1L + Integer.MAX_VALUE;\n            p = createParser(mode, String.valueOf(big));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(big, p.getLongValue());                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            long small = -1L + Integer.MIN_VALUE;\n            p = createParser(mode, String.valueOf(small));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Long.valueOf(small), p.getNumberValue());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(small, p.getLongValue());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n\n            // double -> error\n            p = createParser(mode, String.valueOf(big)+\".0\");\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((double) big, p.getDoubleValue());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            p = createParser(mode, String.valueOf(small)+\".0\");\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((double) small, p.getDoubleValue());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n\n            // BigInteger -> error\n            p = createParser(mode, String.valueOf(big));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            p = createParser(mode, String.valueOf(small));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n    }",
            "    @SuppressWarnings(\"resource\")\n    public void testToIntFailing$catena_0() throws Exception\n    {\n        for (int mode : ALL_STREAMING_MODES) {\n            JsonParser p;\n\n            // long -> error\n            long big = 1L + Integer.MAX_VALUE;\n            p = createParser(mode, String.valueOf(big));\n            assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                         /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(big, p.getLongValue());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            long small = -1L + Integer.MIN_VALUE;\n            p = createParser(mode, String.valueOf(small));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Long.valueOf(small), p.getNumberValue());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(small, p.getLongValue());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n\n            // double -> error\n            p = createParser(mode, String.valueOf(big)+\".0\");\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((double) big, p.getDoubleValue());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            p = createParser(mode, String.valueOf(small)+\".0\");\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((double) small, p.getDoubleValue());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n\n            // BigInteger -> error\n            p = createParser(mode, String.valueOf(big));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            p = createParser(mode, String.valueOf(small));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n    }",
            "    @SuppressWarnings(\"resource\")\n    public void testToIntFailing$catena_28() throws Exception\n    {\n        for (int mode : ALL_STREAMING_MODES) {\n            JsonParser p;\n\n            // long -> error\n            long big = 1L + Integer.MAX_VALUE;\n            p = createParser(mode, String.valueOf(big));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(big, p.getLongValue());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            long small = -1L + Integer.MIN_VALUE;\n            p = createParser(mode, String.valueOf(small));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(Long.valueOf(small), p.getNumberValue());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(small, p.getLongValue());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n\n            // double -> error\n            p = createParser(mode, String.valueOf(big)+\".0\");\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((double) big, p.getDoubleValue());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            p = createParser(mode, String.valueOf(small)+\".0\");\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((double) small, p.getDoubleValue());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n\n            // BigInteger -> error\n            p = createParser(mode, String.valueOf(big));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                verifyException(e, \"out of range of int\");                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            p = createParser(mode, String.valueOf(small));\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Should not pass\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"out of range of int\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertEquals(Integer.TYPE, e.getTargetType());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n    }"
        ]
    },
    "com.fasterxml.jackson.core.json.async.AsyncNumberCoercionTest::testToLongFailing": {
        "begin_line_no": 177,
        "end_line_no": 208,
        "file_path": "src/test/java/com/fasterxml/jackson/core/json/async/AsyncNumberCoercionTest.java",
        "to": [
            ""
        ]
    },
    "com.fasterxml.jackson.core.read.NumberCoercionTest::testToLongFailing": {
        "begin_line_no": 175,
        "end_line_no": 209,
        "file_path": "src/test/java/com/fasterxml/jackson/core/read/NumberCoercionTest.java",
        "to": [
            ""
        ]
    },
    "com.fasterxml.jackson.core.read.NumberOverflowTest::testMaliciousLongOverflow": {
        "begin_line_no": 64,
        "end_line_no": 81,
        "file_path": "src/test/java/com/fasterxml/jackson/core/read/NumberOverflowTest.java",
        "to": [
            ""
        ]
    },
    "com.fasterxml.jackson.core.read.NumberOverflowTest::testSimpleLongOverflow": {
        "begin_line_no": 27,
        "end_line_no": 58,
        "file_path": "src/test/java/com/fasterxml/jackson/core/read/NumberOverflowTest.java",
        "to": [
            ""
        ]
    },
    "com.fasterxml.jackson.core.read.NumberOverflowTest::testMaliciousIntOverflow": {
        "begin_line_no": 84,
        "end_line_no": 101,
        "file_path": "src/test/java/com/fasterxml/jackson/core/read/NumberOverflowTest.java",
        "to": [
            ""
        ]
    },
    "com.fasterxml.jackson.core.read.NumberParsingTest::testSimpleLong": {
        "begin_line_no": 106,
        "end_line_no": 112,
        "file_path": "src/test/java/com/fasterxml/jackson/core/read/NumberParsingTest.java",
        "to": [
            ""
        ]
    }
}