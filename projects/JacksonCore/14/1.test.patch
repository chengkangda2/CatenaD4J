{
    "com.fasterxml.jackson.core.io.TestIOContext::testAllocations": {
        "begin_line_no": 9,
        "end_line_no": 91,
        "file_path": "src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java",
        "to": [
            "    public void testAllocations$catena_5() throws Exception\n    {\n        IOContext ctxt = new IOContext(new BufferRecycler(), \"N/A\", true);\n\n        /* I/O Read buffer */\n\n        // First succeeds:\n        try{ assertNotNull(ctxt.allocReadIOBuffer());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        // second fails\n        try {\n            ctxt.allocReadIOBuffer();\n        } catch (IllegalStateException e) {\n            try{ verifyException(e, \"second time\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        // Also: can't succeed with different buffer\n        try {\n            ctxt.releaseReadIOBuffer(new byte[1]);\n        } catch (IllegalArgumentException e) {\n            try{ verifyException(e, \"smaller than original\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        // but call with null is a NOP for convenience\n        ctxt.releaseReadIOBuffer(null);\n\n        /* I/O Write buffer */\n\n        try{ assertNotNull(ctxt.allocWriteEncodingBuffer());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            ctxt.allocWriteEncodingBuffer();\n        } catch (IllegalStateException e) {\n            try{ verifyException(e, \"second time\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            ctxt.releaseWriteEncodingBuffer(new byte[1]);\n        } catch (IllegalArgumentException e) {\n            verifyException(e, \"smaller than original\");                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n        ctxt.releaseWriteEncodingBuffer(null);\n\n        /* Token (read) buffer */\n\n        try{ assertNotNull(ctxt.allocTokenBuffer());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            ctxt.allocTokenBuffer();\n        } catch (IllegalStateException e) {\n            try{ verifyException(e, \"second time\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            ctxt.releaseTokenBuffer(new char[1]);\n        } catch (IllegalArgumentException e) {\n            try{ verifyException(e, \"smaller than original\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        ctxt.releaseTokenBuffer(null);\n\n        /* Concat (write?) buffer */\n\n        try{ assertNotNull(ctxt.allocConcatBuffer());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            ctxt.allocConcatBuffer();\n        } catch (IllegalStateException e) {\n            try{ verifyException(e, \"second time\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            ctxt.releaseConcatBuffer(new char[1]);\n        } catch (IllegalArgumentException e) {\n            try{ verifyException(e, \"smaller than original\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        ctxt.releaseConcatBuffer(null);\n\n        /* NameCopy (write?) buffer */\n\n        try{ assertNotNull(ctxt.allocNameCopyBuffer(100));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            ctxt.allocNameCopyBuffer(100);\n        } catch (IllegalStateException e) {\n            try{ verifyException(e, \"second time\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            ctxt.releaseNameCopyBuffer(new char[1]);\n        } catch (IllegalArgumentException e) {\n            try{ verifyException(e, \"smaller than original\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        ctxt.releaseNameCopyBuffer(null);\n    }",
            "    public void testAllocations$catena_11() throws Exception\n    {\n        IOContext ctxt = new IOContext(new BufferRecycler(), \"N/A\", true);\n\n        /* I/O Read buffer */\n\n        // First succeeds:\n        try{ assertNotNull(ctxt.allocReadIOBuffer());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        // second fails\n        try {\n            ctxt.allocReadIOBuffer();\n        } catch (IllegalStateException e) {\n            try{ verifyException(e, \"second time\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        // Also: can't succeed with different buffer\n        try {\n            ctxt.releaseReadIOBuffer(new byte[1]);\n        } catch (IllegalArgumentException e) {\n            try{ verifyException(e, \"smaller than original\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        // but call with null is a NOP for convenience\n        ctxt.releaseReadIOBuffer(null);\n\n        /* I/O Write buffer */\n\n        try{ assertNotNull(ctxt.allocWriteEncodingBuffer());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            ctxt.allocWriteEncodingBuffer();\n        } catch (IllegalStateException e) {\n            try{ verifyException(e, \"second time\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            ctxt.releaseWriteEncodingBuffer(new byte[1]);\n        } catch (IllegalArgumentException e) {\n            try{ verifyException(e, \"smaller than original\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        ctxt.releaseWriteEncodingBuffer(null);\n\n        /* Token (read) buffer */\n\n        try{ assertNotNull(ctxt.allocTokenBuffer());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            ctxt.allocTokenBuffer();\n        } catch (IllegalStateException e) {\n            try{ verifyException(e, \"second time\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            ctxt.releaseTokenBuffer(new char[1]);\n        } catch (IllegalArgumentException e) {\n            try{ verifyException(e, \"smaller than original\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        ctxt.releaseTokenBuffer(null);\n\n        /* Concat (write?) buffer */\n\n        try{ assertNotNull(ctxt.allocConcatBuffer());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            ctxt.allocConcatBuffer();\n        } catch (IllegalStateException e) {\n            try{ verifyException(e, \"second time\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            ctxt.releaseConcatBuffer(new char[1]);\n        } catch (IllegalArgumentException e) {\n            verifyException(e, \"smaller than original\");                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n        ctxt.releaseConcatBuffer(null);\n\n        /* NameCopy (write?) buffer */\n\n        try{ assertNotNull(ctxt.allocNameCopyBuffer(100));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            ctxt.allocNameCopyBuffer(100);\n        } catch (IllegalStateException e) {\n            try{ verifyException(e, \"second time\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            ctxt.releaseNameCopyBuffer(new char[1]);\n        } catch (IllegalArgumentException e) {\n            try{ verifyException(e, \"smaller than original\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        ctxt.releaseNameCopyBuffer(null);\n    }",
            "    public void testAllocations$catena_8() throws Exception\n    {\n        IOContext ctxt = new IOContext(new BufferRecycler(), \"N/A\", true);\n\n        /* I/O Read buffer */\n\n        // First succeeds:\n        try{ assertNotNull(ctxt.allocReadIOBuffer());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        // second fails\n        try {\n            ctxt.allocReadIOBuffer();\n        } catch (IllegalStateException e) {\n            try{ verifyException(e, \"second time\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        // Also: can't succeed with different buffer\n        try {\n            ctxt.releaseReadIOBuffer(new byte[1]);\n        } catch (IllegalArgumentException e) {\n            try{ verifyException(e, \"smaller than original\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        // but call with null is a NOP for convenience\n        ctxt.releaseReadIOBuffer(null);\n\n        /* I/O Write buffer */\n\n        try{ assertNotNull(ctxt.allocWriteEncodingBuffer());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            ctxt.allocWriteEncodingBuffer();\n        } catch (IllegalStateException e) {\n            try{ verifyException(e, \"second time\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            ctxt.releaseWriteEncodingBuffer(new byte[1]);\n        } catch (IllegalArgumentException e) {\n            try{ verifyException(e, \"smaller than original\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        ctxt.releaseWriteEncodingBuffer(null);\n\n        /* Token (read) buffer */\n\n        try{ assertNotNull(ctxt.allocTokenBuffer());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            ctxt.allocTokenBuffer();\n        } catch (IllegalStateException e) {\n            try{ verifyException(e, \"second time\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            ctxt.releaseTokenBuffer(new char[1]);\n        } catch (IllegalArgumentException e) {\n            verifyException(e, \"smaller than original\");                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n        ctxt.releaseTokenBuffer(null);\n\n        /* Concat (write?) buffer */\n\n        try{ assertNotNull(ctxt.allocConcatBuffer());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            ctxt.allocConcatBuffer();\n        } catch (IllegalStateException e) {\n            try{ verifyException(e, \"second time\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            ctxt.releaseConcatBuffer(new char[1]);\n        } catch (IllegalArgumentException e) {\n            try{ verifyException(e, \"smaller than original\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        ctxt.releaseConcatBuffer(null);\n\n        /* NameCopy (write?) buffer */\n\n        try{ assertNotNull(ctxt.allocNameCopyBuffer(100));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            ctxt.allocNameCopyBuffer(100);\n        } catch (IllegalStateException e) {\n            try{ verifyException(e, \"second time\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            ctxt.releaseNameCopyBuffer(new char[1]);\n        } catch (IllegalArgumentException e) {\n            try{ verifyException(e, \"smaller than original\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        ctxt.releaseNameCopyBuffer(null);\n    }",
            "    public void testAllocations$catena_2() throws Exception\n    {\n        IOContext ctxt = new IOContext(new BufferRecycler(), \"N/A\", true);\n\n        /* I/O Read buffer */\n\n        // First succeeds:\n        try{ assertNotNull(ctxt.allocReadIOBuffer());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        // second fails\n        try {\n            ctxt.allocReadIOBuffer();\n        } catch (IllegalStateException e) {\n            try{ verifyException(e, \"second time\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        // Also: can't succeed with different buffer\n        try {\n            ctxt.releaseReadIOBuffer(new byte[1]);\n        } catch (IllegalArgumentException e) {\n            verifyException(e, \"smaller than original\");                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n        // but call with null is a NOP for convenience\n        ctxt.releaseReadIOBuffer(null);\n\n        /* I/O Write buffer */\n\n        try{ assertNotNull(ctxt.allocWriteEncodingBuffer());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            ctxt.allocWriteEncodingBuffer();\n        } catch (IllegalStateException e) {\n            try{ verifyException(e, \"second time\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            ctxt.releaseWriteEncodingBuffer(new byte[1]);\n        } catch (IllegalArgumentException e) {\n            try{ verifyException(e, \"smaller than original\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        ctxt.releaseWriteEncodingBuffer(null);\n\n        /* Token (read) buffer */\n\n        try{ assertNotNull(ctxt.allocTokenBuffer());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            ctxt.allocTokenBuffer();\n        } catch (IllegalStateException e) {\n            try{ verifyException(e, \"second time\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            ctxt.releaseTokenBuffer(new char[1]);\n        } catch (IllegalArgumentException e) {\n            try{ verifyException(e, \"smaller than original\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        ctxt.releaseTokenBuffer(null);\n\n        /* Concat (write?) buffer */\n\n        try{ assertNotNull(ctxt.allocConcatBuffer());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            ctxt.allocConcatBuffer();\n        } catch (IllegalStateException e) {\n            try{ verifyException(e, \"second time\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            ctxt.releaseConcatBuffer(new char[1]);\n        } catch (IllegalArgumentException e) {\n            try{ verifyException(e, \"smaller than original\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        ctxt.releaseConcatBuffer(null);\n\n        /* NameCopy (write?) buffer */\n\n        try{ assertNotNull(ctxt.allocNameCopyBuffer(100));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            ctxt.allocNameCopyBuffer(100);\n        } catch (IllegalStateException e) {\n            try{ verifyException(e, \"second time\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            ctxt.releaseNameCopyBuffer(new char[1]);\n        } catch (IllegalArgumentException e) {\n            try{ verifyException(e, \"smaller than original\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        ctxt.releaseNameCopyBuffer(null);\n    }",
            "    public void testAllocations$catena_14() throws Exception\n    {\n        IOContext ctxt = new IOContext(new BufferRecycler(), \"N/A\", true);\n\n        /* I/O Read buffer */\n\n        // First succeeds:\n        try{ assertNotNull(ctxt.allocReadIOBuffer());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        // second fails\n        try {\n            ctxt.allocReadIOBuffer();\n        } catch (IllegalStateException e) {\n            try{ verifyException(e, \"second time\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        // Also: can't succeed with different buffer\n        try {\n            ctxt.releaseReadIOBuffer(new byte[1]);\n        } catch (IllegalArgumentException e) {\n            try{ verifyException(e, \"smaller than original\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        // but call with null is a NOP for convenience\n        ctxt.releaseReadIOBuffer(null);\n\n        /* I/O Write buffer */\n\n        try{ assertNotNull(ctxt.allocWriteEncodingBuffer());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            ctxt.allocWriteEncodingBuffer();\n        } catch (IllegalStateException e) {\n            try{ verifyException(e, \"second time\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            ctxt.releaseWriteEncodingBuffer(new byte[1]);\n        } catch (IllegalArgumentException e) {\n            try{ verifyException(e, \"smaller than original\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        ctxt.releaseWriteEncodingBuffer(null);\n\n        /* Token (read) buffer */\n\n        try{ assertNotNull(ctxt.allocTokenBuffer());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            ctxt.allocTokenBuffer();\n        } catch (IllegalStateException e) {\n            try{ verifyException(e, \"second time\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            ctxt.releaseTokenBuffer(new char[1]);\n        } catch (IllegalArgumentException e) {\n            try{ verifyException(e, \"smaller than original\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        ctxt.releaseTokenBuffer(null);\n\n        /* Concat (write?) buffer */\n\n        try{ assertNotNull(ctxt.allocConcatBuffer());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            ctxt.allocConcatBuffer();\n        } catch (IllegalStateException e) {\n            try{ verifyException(e, \"second time\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            ctxt.releaseConcatBuffer(new char[1]);\n        } catch (IllegalArgumentException e) {\n            try{ verifyException(e, \"smaller than original\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        ctxt.releaseConcatBuffer(null);\n\n        /* NameCopy (write?) buffer */\n\n        try{ assertNotNull(ctxt.allocNameCopyBuffer(100));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            ctxt.allocNameCopyBuffer(100);\n        } catch (IllegalStateException e) {\n            try{ verifyException(e, \"second time\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            ctxt.releaseNameCopyBuffer(new char[1]);\n        } catch (IllegalArgumentException e) {\n            verifyException(e, \"smaller than original\");                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n        ctxt.releaseNameCopyBuffer(null);\n    }",
            "    public void testAllocations$catena_0() throws Exception\n    {\n        IOContext ctxt = new IOContext(new BufferRecycler(), \"N/A\", true);\n\n        /* I/O Read buffer */\n\n        // First succeeds:\n        assertNotNull(ctxt.allocReadIOBuffer());                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        // second fails\n        try {\n            ctxt.allocReadIOBuffer();\n        } catch (IllegalStateException e) {\n            try{ verifyException(e, \"second time\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        // Also: can't succeed with different buffer\n        try {\n            ctxt.releaseReadIOBuffer(new byte[1]);\n        } catch (IllegalArgumentException e) {\n            try{ verifyException(e, \"smaller than original\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        // but call with null is a NOP for convenience\n        ctxt.releaseReadIOBuffer(null);\n\n        /* I/O Write buffer */\n\n        try{ assertNotNull(ctxt.allocWriteEncodingBuffer());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            ctxt.allocWriteEncodingBuffer();\n        } catch (IllegalStateException e) {\n            try{ verifyException(e, \"second time\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            ctxt.releaseWriteEncodingBuffer(new byte[1]);\n        } catch (IllegalArgumentException e) {\n            try{ verifyException(e, \"smaller than original\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        ctxt.releaseWriteEncodingBuffer(null);\n\n        /* Token (read) buffer */\n\n        try{ assertNotNull(ctxt.allocTokenBuffer());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            ctxt.allocTokenBuffer();\n        } catch (IllegalStateException e) {\n            try{ verifyException(e, \"second time\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            ctxt.releaseTokenBuffer(new char[1]);\n        } catch (IllegalArgumentException e) {\n            try{ verifyException(e, \"smaller than original\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        ctxt.releaseTokenBuffer(null);\n\n        /* Concat (write?) buffer */\n\n        try{ assertNotNull(ctxt.allocConcatBuffer());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            ctxt.allocConcatBuffer();\n        } catch (IllegalStateException e) {\n            try{ verifyException(e, \"second time\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            ctxt.releaseConcatBuffer(new char[1]);\n        } catch (IllegalArgumentException e) {\n            try{ verifyException(e, \"smaller than original\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        ctxt.releaseConcatBuffer(null);\n\n        /* NameCopy (write?) buffer */\n\n        try{ assertNotNull(ctxt.allocNameCopyBuffer(100));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            ctxt.allocNameCopyBuffer(100);\n        } catch (IllegalStateException e) {\n            try{ verifyException(e, \"second time\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            ctxt.releaseNameCopyBuffer(new char[1]);\n        } catch (IllegalArgumentException e) {\n            try{ verifyException(e, \"smaller than original\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        ctxt.releaseNameCopyBuffer(null);\n    }",
            "    public void testAllocations$catena_1() throws Exception\n    {\n        IOContext ctxt = new IOContext(new BufferRecycler(), \"N/A\", true);\n\n        /* I/O Read buffer */\n\n        // First succeeds:\n        try{ assertNotNull(ctxt.allocReadIOBuffer());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        // second fails\n        try {\n            ctxt.allocReadIOBuffer();\n        } catch (IllegalStateException e) {\n            verifyException(e, \"second time\");                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n        // Also: can't succeed with different buffer\n        try {\n            ctxt.releaseReadIOBuffer(new byte[1]);\n        } catch (IllegalArgumentException e) {\n            try{ verifyException(e, \"smaller than original\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        // but call with null is a NOP for convenience\n        ctxt.releaseReadIOBuffer(null);\n\n        /* I/O Write buffer */\n\n        try{ assertNotNull(ctxt.allocWriteEncodingBuffer());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            ctxt.allocWriteEncodingBuffer();\n        } catch (IllegalStateException e) {\n            try{ verifyException(e, \"second time\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            ctxt.releaseWriteEncodingBuffer(new byte[1]);\n        } catch (IllegalArgumentException e) {\n            try{ verifyException(e, \"smaller than original\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        ctxt.releaseWriteEncodingBuffer(null);\n\n        /* Token (read) buffer */\n\n        try{ assertNotNull(ctxt.allocTokenBuffer());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            ctxt.allocTokenBuffer();\n        } catch (IllegalStateException e) {\n            try{ verifyException(e, \"second time\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            ctxt.releaseTokenBuffer(new char[1]);\n        } catch (IllegalArgumentException e) {\n            try{ verifyException(e, \"smaller than original\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        ctxt.releaseTokenBuffer(null);\n\n        /* Concat (write?) buffer */\n\n        try{ assertNotNull(ctxt.allocConcatBuffer());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            ctxt.allocConcatBuffer();\n        } catch (IllegalStateException e) {\n            try{ verifyException(e, \"second time\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            ctxt.releaseConcatBuffer(new char[1]);\n        } catch (IllegalArgumentException e) {\n            try{ verifyException(e, \"smaller than original\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        ctxt.releaseConcatBuffer(null);\n\n        /* NameCopy (write?) buffer */\n\n        try{ assertNotNull(ctxt.allocNameCopyBuffer(100));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            ctxt.allocNameCopyBuffer(100);\n        } catch (IllegalStateException e) {\n            try{ verifyException(e, \"second time\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            ctxt.releaseNameCopyBuffer(new char[1]);\n        } catch (IllegalArgumentException e) {\n            try{ verifyException(e, \"smaller than original\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        ctxt.releaseNameCopyBuffer(null);\n    }",
            "    public void testAllocations$catena_3() throws Exception\n    {\n        IOContext ctxt = new IOContext(new BufferRecycler(), \"N/A\", true);\n\n        /* I/O Read buffer */\n\n        // First succeeds:\n        try{ assertNotNull(ctxt.allocReadIOBuffer());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        // second fails\n        try {\n            ctxt.allocReadIOBuffer();\n        } catch (IllegalStateException e) {\n            try{ verifyException(e, \"second time\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        // Also: can't succeed with different buffer\n        try {\n            ctxt.releaseReadIOBuffer(new byte[1]);\n        } catch (IllegalArgumentException e) {\n            try{ verifyException(e, \"smaller than original\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        // but call with null is a NOP for convenience\n        ctxt.releaseReadIOBuffer(null);\n\n        /* I/O Write buffer */\n\n        assertNotNull(ctxt.allocWriteEncodingBuffer());                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        try {\n            ctxt.allocWriteEncodingBuffer();\n        } catch (IllegalStateException e) {\n            try{ verifyException(e, \"second time\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            ctxt.releaseWriteEncodingBuffer(new byte[1]);\n        } catch (IllegalArgumentException e) {\n            try{ verifyException(e, \"smaller than original\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        ctxt.releaseWriteEncodingBuffer(null);\n\n        /* Token (read) buffer */\n\n        try{ assertNotNull(ctxt.allocTokenBuffer());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            ctxt.allocTokenBuffer();\n        } catch (IllegalStateException e) {\n            try{ verifyException(e, \"second time\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            ctxt.releaseTokenBuffer(new char[1]);\n        } catch (IllegalArgumentException e) {\n            try{ verifyException(e, \"smaller than original\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        ctxt.releaseTokenBuffer(null);\n\n        /* Concat (write?) buffer */\n\n        try{ assertNotNull(ctxt.allocConcatBuffer());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            ctxt.allocConcatBuffer();\n        } catch (IllegalStateException e) {\n            try{ verifyException(e, \"second time\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            ctxt.releaseConcatBuffer(new char[1]);\n        } catch (IllegalArgumentException e) {\n            try{ verifyException(e, \"smaller than original\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        ctxt.releaseConcatBuffer(null);\n\n        /* NameCopy (write?) buffer */\n\n        try{ assertNotNull(ctxt.allocNameCopyBuffer(100));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            ctxt.allocNameCopyBuffer(100);\n        } catch (IllegalStateException e) {\n            try{ verifyException(e, \"second time\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            ctxt.releaseNameCopyBuffer(new char[1]);\n        } catch (IllegalArgumentException e) {\n            try{ verifyException(e, \"smaller than original\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        ctxt.releaseNameCopyBuffer(null);\n    }",
            "    public void testAllocations$catena_4() throws Exception\n    {\n        IOContext ctxt = new IOContext(new BufferRecycler(), \"N/A\", true);\n\n        /* I/O Read buffer */\n\n        // First succeeds:\n        try{ assertNotNull(ctxt.allocReadIOBuffer());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        // second fails\n        try {\n            ctxt.allocReadIOBuffer();\n        } catch (IllegalStateException e) {\n            try{ verifyException(e, \"second time\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        // Also: can't succeed with different buffer\n        try {\n            ctxt.releaseReadIOBuffer(new byte[1]);\n        } catch (IllegalArgumentException e) {\n            try{ verifyException(e, \"smaller than original\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        // but call with null is a NOP for convenience\n        ctxt.releaseReadIOBuffer(null);\n\n        /* I/O Write buffer */\n\n        try{ assertNotNull(ctxt.allocWriteEncodingBuffer());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            ctxt.allocWriteEncodingBuffer();\n        } catch (IllegalStateException e) {\n            verifyException(e, \"second time\");                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n        try {\n            ctxt.releaseWriteEncodingBuffer(new byte[1]);\n        } catch (IllegalArgumentException e) {\n            try{ verifyException(e, \"smaller than original\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        ctxt.releaseWriteEncodingBuffer(null);\n\n        /* Token (read) buffer */\n\n        try{ assertNotNull(ctxt.allocTokenBuffer());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            ctxt.allocTokenBuffer();\n        } catch (IllegalStateException e) {\n            try{ verifyException(e, \"second time\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            ctxt.releaseTokenBuffer(new char[1]);\n        } catch (IllegalArgumentException e) {\n            try{ verifyException(e, \"smaller than original\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        ctxt.releaseTokenBuffer(null);\n\n        /* Concat (write?) buffer */\n\n        try{ assertNotNull(ctxt.allocConcatBuffer());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            ctxt.allocConcatBuffer();\n        } catch (IllegalStateException e) {\n            try{ verifyException(e, \"second time\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            ctxt.releaseConcatBuffer(new char[1]);\n        } catch (IllegalArgumentException e) {\n            try{ verifyException(e, \"smaller than original\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        ctxt.releaseConcatBuffer(null);\n\n        /* NameCopy (write?) buffer */\n\n        try{ assertNotNull(ctxt.allocNameCopyBuffer(100));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            ctxt.allocNameCopyBuffer(100);\n        } catch (IllegalStateException e) {\n            try{ verifyException(e, \"second time\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            ctxt.releaseNameCopyBuffer(new char[1]);\n        } catch (IllegalArgumentException e) {\n            try{ verifyException(e, \"smaller than original\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        ctxt.releaseNameCopyBuffer(null);\n    }",
            "    public void testAllocations$catena_6() throws Exception\n    {\n        IOContext ctxt = new IOContext(new BufferRecycler(), \"N/A\", true);\n\n        /* I/O Read buffer */\n\n        // First succeeds:\n        try{ assertNotNull(ctxt.allocReadIOBuffer());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        // second fails\n        try {\n            ctxt.allocReadIOBuffer();\n        } catch (IllegalStateException e) {\n            try{ verifyException(e, \"second time\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        // Also: can't succeed with different buffer\n        try {\n            ctxt.releaseReadIOBuffer(new byte[1]);\n        } catch (IllegalArgumentException e) {\n            try{ verifyException(e, \"smaller than original\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        // but call with null is a NOP for convenience\n        ctxt.releaseReadIOBuffer(null);\n\n        /* I/O Write buffer */\n\n        try{ assertNotNull(ctxt.allocWriteEncodingBuffer());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            ctxt.allocWriteEncodingBuffer();\n        } catch (IllegalStateException e) {\n            try{ verifyException(e, \"second time\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            ctxt.releaseWriteEncodingBuffer(new byte[1]);\n        } catch (IllegalArgumentException e) {\n            try{ verifyException(e, \"smaller than original\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        ctxt.releaseWriteEncodingBuffer(null);\n\n        /* Token (read) buffer */\n\n        assertNotNull(ctxt.allocTokenBuffer());                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try {\n            ctxt.allocTokenBuffer();\n        } catch (IllegalStateException e) {\n            try{ verifyException(e, \"second time\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            ctxt.releaseTokenBuffer(new char[1]);\n        } catch (IllegalArgumentException e) {\n            try{ verifyException(e, \"smaller than original\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        ctxt.releaseTokenBuffer(null);\n\n        /* Concat (write?) buffer */\n\n        try{ assertNotNull(ctxt.allocConcatBuffer());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            ctxt.allocConcatBuffer();\n        } catch (IllegalStateException e) {\n            try{ verifyException(e, \"second time\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            ctxt.releaseConcatBuffer(new char[1]);\n        } catch (IllegalArgumentException e) {\n            try{ verifyException(e, \"smaller than original\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        ctxt.releaseConcatBuffer(null);\n\n        /* NameCopy (write?) buffer */\n\n        try{ assertNotNull(ctxt.allocNameCopyBuffer(100));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            ctxt.allocNameCopyBuffer(100);\n        } catch (IllegalStateException e) {\n            try{ verifyException(e, \"second time\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            ctxt.releaseNameCopyBuffer(new char[1]);\n        } catch (IllegalArgumentException e) {\n            try{ verifyException(e, \"smaller than original\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        ctxt.releaseNameCopyBuffer(null);\n    }",
            "    public void testAllocations$catena_7() throws Exception\n    {\n        IOContext ctxt = new IOContext(new BufferRecycler(), \"N/A\", true);\n\n        /* I/O Read buffer */\n\n        // First succeeds:\n        try{ assertNotNull(ctxt.allocReadIOBuffer());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        // second fails\n        try {\n            ctxt.allocReadIOBuffer();\n        } catch (IllegalStateException e) {\n            try{ verifyException(e, \"second time\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        // Also: can't succeed with different buffer\n        try {\n            ctxt.releaseReadIOBuffer(new byte[1]);\n        } catch (IllegalArgumentException e) {\n            try{ verifyException(e, \"smaller than original\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        // but call with null is a NOP for convenience\n        ctxt.releaseReadIOBuffer(null);\n\n        /* I/O Write buffer */\n\n        try{ assertNotNull(ctxt.allocWriteEncodingBuffer());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            ctxt.allocWriteEncodingBuffer();\n        } catch (IllegalStateException e) {\n            try{ verifyException(e, \"second time\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            ctxt.releaseWriteEncodingBuffer(new byte[1]);\n        } catch (IllegalArgumentException e) {\n            try{ verifyException(e, \"smaller than original\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        ctxt.releaseWriteEncodingBuffer(null);\n\n        /* Token (read) buffer */\n\n        try{ assertNotNull(ctxt.allocTokenBuffer());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            ctxt.allocTokenBuffer();\n        } catch (IllegalStateException e) {\n            verifyException(e, \"second time\");                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n        try {\n            ctxt.releaseTokenBuffer(new char[1]);\n        } catch (IllegalArgumentException e) {\n            try{ verifyException(e, \"smaller than original\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        ctxt.releaseTokenBuffer(null);\n\n        /* Concat (write?) buffer */\n\n        try{ assertNotNull(ctxt.allocConcatBuffer());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            ctxt.allocConcatBuffer();\n        } catch (IllegalStateException e) {\n            try{ verifyException(e, \"second time\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            ctxt.releaseConcatBuffer(new char[1]);\n        } catch (IllegalArgumentException e) {\n            try{ verifyException(e, \"smaller than original\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        ctxt.releaseConcatBuffer(null);\n\n        /* NameCopy (write?) buffer */\n\n        try{ assertNotNull(ctxt.allocNameCopyBuffer(100));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            ctxt.allocNameCopyBuffer(100);\n        } catch (IllegalStateException e) {\n            try{ verifyException(e, \"second time\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            ctxt.releaseNameCopyBuffer(new char[1]);\n        } catch (IllegalArgumentException e) {\n            try{ verifyException(e, \"smaller than original\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        ctxt.releaseNameCopyBuffer(null);\n    }",
            "    public void testAllocations$catena_9() throws Exception\n    {\n        IOContext ctxt = new IOContext(new BufferRecycler(), \"N/A\", true);\n\n        /* I/O Read buffer */\n\n        // First succeeds:\n        try{ assertNotNull(ctxt.allocReadIOBuffer());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        // second fails\n        try {\n            ctxt.allocReadIOBuffer();\n        } catch (IllegalStateException e) {\n            try{ verifyException(e, \"second time\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        // Also: can't succeed with different buffer\n        try {\n            ctxt.releaseReadIOBuffer(new byte[1]);\n        } catch (IllegalArgumentException e) {\n            try{ verifyException(e, \"smaller than original\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        // but call with null is a NOP for convenience\n        ctxt.releaseReadIOBuffer(null);\n\n        /* I/O Write buffer */\n\n        try{ assertNotNull(ctxt.allocWriteEncodingBuffer());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            ctxt.allocWriteEncodingBuffer();\n        } catch (IllegalStateException e) {\n            try{ verifyException(e, \"second time\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            ctxt.releaseWriteEncodingBuffer(new byte[1]);\n        } catch (IllegalArgumentException e) {\n            try{ verifyException(e, \"smaller than original\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        ctxt.releaseWriteEncodingBuffer(null);\n\n        /* Token (read) buffer */\n\n        try{ assertNotNull(ctxt.allocTokenBuffer());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            ctxt.allocTokenBuffer();\n        } catch (IllegalStateException e) {\n            try{ verifyException(e, \"second time\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            ctxt.releaseTokenBuffer(new char[1]);\n        } catch (IllegalArgumentException e) {\n            try{ verifyException(e, \"smaller than original\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        ctxt.releaseTokenBuffer(null);\n\n        /* Concat (write?) buffer */\n\n        assertNotNull(ctxt.allocConcatBuffer());                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        try {\n            ctxt.allocConcatBuffer();\n        } catch (IllegalStateException e) {\n            try{ verifyException(e, \"second time\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            ctxt.releaseConcatBuffer(new char[1]);\n        } catch (IllegalArgumentException e) {\n            try{ verifyException(e, \"smaller than original\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        ctxt.releaseConcatBuffer(null);\n\n        /* NameCopy (write?) buffer */\n\n        try{ assertNotNull(ctxt.allocNameCopyBuffer(100));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            ctxt.allocNameCopyBuffer(100);\n        } catch (IllegalStateException e) {\n            try{ verifyException(e, \"second time\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            ctxt.releaseNameCopyBuffer(new char[1]);\n        } catch (IllegalArgumentException e) {\n            try{ verifyException(e, \"smaller than original\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        ctxt.releaseNameCopyBuffer(null);\n    }",
            "    public void testAllocations$catena_10() throws Exception\n    {\n        IOContext ctxt = new IOContext(new BufferRecycler(), \"N/A\", true);\n\n        /* I/O Read buffer */\n\n        // First succeeds:\n        try{ assertNotNull(ctxt.allocReadIOBuffer());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        // second fails\n        try {\n            ctxt.allocReadIOBuffer();\n        } catch (IllegalStateException e) {\n            try{ verifyException(e, \"second time\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        // Also: can't succeed with different buffer\n        try {\n            ctxt.releaseReadIOBuffer(new byte[1]);\n        } catch (IllegalArgumentException e) {\n            try{ verifyException(e, \"smaller than original\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        // but call with null is a NOP for convenience\n        ctxt.releaseReadIOBuffer(null);\n\n        /* I/O Write buffer */\n\n        try{ assertNotNull(ctxt.allocWriteEncodingBuffer());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            ctxt.allocWriteEncodingBuffer();\n        } catch (IllegalStateException e) {\n            try{ verifyException(e, \"second time\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            ctxt.releaseWriteEncodingBuffer(new byte[1]);\n        } catch (IllegalArgumentException e) {\n            try{ verifyException(e, \"smaller than original\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        ctxt.releaseWriteEncodingBuffer(null);\n\n        /* Token (read) buffer */\n\n        try{ assertNotNull(ctxt.allocTokenBuffer());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            ctxt.allocTokenBuffer();\n        } catch (IllegalStateException e) {\n            try{ verifyException(e, \"second time\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            ctxt.releaseTokenBuffer(new char[1]);\n        } catch (IllegalArgumentException e) {\n            try{ verifyException(e, \"smaller than original\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        ctxt.releaseTokenBuffer(null);\n\n        /* Concat (write?) buffer */\n\n        try{ assertNotNull(ctxt.allocConcatBuffer());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            ctxt.allocConcatBuffer();\n        } catch (IllegalStateException e) {\n            verifyException(e, \"second time\");                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n        try {\n            ctxt.releaseConcatBuffer(new char[1]);\n        } catch (IllegalArgumentException e) {\n            try{ verifyException(e, \"smaller than original\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        ctxt.releaseConcatBuffer(null);\n\n        /* NameCopy (write?) buffer */\n\n        try{ assertNotNull(ctxt.allocNameCopyBuffer(100));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            ctxt.allocNameCopyBuffer(100);\n        } catch (IllegalStateException e) {\n            try{ verifyException(e, \"second time\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            ctxt.releaseNameCopyBuffer(new char[1]);\n        } catch (IllegalArgumentException e) {\n            try{ verifyException(e, \"smaller than original\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        ctxt.releaseNameCopyBuffer(null);\n    }",
            "    public void testAllocations$catena_12() throws Exception\n    {\n        IOContext ctxt = new IOContext(new BufferRecycler(), \"N/A\", true);\n\n        /* I/O Read buffer */\n\n        // First succeeds:\n        try{ assertNotNull(ctxt.allocReadIOBuffer());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        // second fails\n        try {\n            ctxt.allocReadIOBuffer();\n        } catch (IllegalStateException e) {\n            try{ verifyException(e, \"second time\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        // Also: can't succeed with different buffer\n        try {\n            ctxt.releaseReadIOBuffer(new byte[1]);\n        } catch (IllegalArgumentException e) {\n            try{ verifyException(e, \"smaller than original\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        // but call with null is a NOP for convenience\n        ctxt.releaseReadIOBuffer(null);\n\n        /* I/O Write buffer */\n\n        try{ assertNotNull(ctxt.allocWriteEncodingBuffer());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            ctxt.allocWriteEncodingBuffer();\n        } catch (IllegalStateException e) {\n            try{ verifyException(e, \"second time\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            ctxt.releaseWriteEncodingBuffer(new byte[1]);\n        } catch (IllegalArgumentException e) {\n            try{ verifyException(e, \"smaller than original\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        ctxt.releaseWriteEncodingBuffer(null);\n\n        /* Token (read) buffer */\n\n        try{ assertNotNull(ctxt.allocTokenBuffer());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            ctxt.allocTokenBuffer();\n        } catch (IllegalStateException e) {\n            try{ verifyException(e, \"second time\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            ctxt.releaseTokenBuffer(new char[1]);\n        } catch (IllegalArgumentException e) {\n            try{ verifyException(e, \"smaller than original\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        ctxt.releaseTokenBuffer(null);\n\n        /* Concat (write?) buffer */\n\n        try{ assertNotNull(ctxt.allocConcatBuffer());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            ctxt.allocConcatBuffer();\n        } catch (IllegalStateException e) {\n            try{ verifyException(e, \"second time\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            ctxt.releaseConcatBuffer(new char[1]);\n        } catch (IllegalArgumentException e) {\n            try{ verifyException(e, \"smaller than original\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        ctxt.releaseConcatBuffer(null);\n\n        /* NameCopy (write?) buffer */\n\n        assertNotNull(ctxt.allocNameCopyBuffer(100));                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n        try {\n            ctxt.allocNameCopyBuffer(100);\n        } catch (IllegalStateException e) {\n            try{ verifyException(e, \"second time\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            ctxt.releaseNameCopyBuffer(new char[1]);\n        } catch (IllegalArgumentException e) {\n            try{ verifyException(e, \"smaller than original\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        ctxt.releaseNameCopyBuffer(null);\n    }",
            "    public void testAllocations$catena_13() throws Exception\n    {\n        IOContext ctxt = new IOContext(new BufferRecycler(), \"N/A\", true);\n\n        /* I/O Read buffer */\n\n        // First succeeds:\n        try{ assertNotNull(ctxt.allocReadIOBuffer());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        // second fails\n        try {\n            ctxt.allocReadIOBuffer();\n        } catch (IllegalStateException e) {\n            try{ verifyException(e, \"second time\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        // Also: can't succeed with different buffer\n        try {\n            ctxt.releaseReadIOBuffer(new byte[1]);\n        } catch (IllegalArgumentException e) {\n            try{ verifyException(e, \"smaller than original\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        // but call with null is a NOP for convenience\n        ctxt.releaseReadIOBuffer(null);\n\n        /* I/O Write buffer */\n\n        try{ assertNotNull(ctxt.allocWriteEncodingBuffer());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            ctxt.allocWriteEncodingBuffer();\n        } catch (IllegalStateException e) {\n            try{ verifyException(e, \"second time\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            ctxt.releaseWriteEncodingBuffer(new byte[1]);\n        } catch (IllegalArgumentException e) {\n            try{ verifyException(e, \"smaller than original\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        ctxt.releaseWriteEncodingBuffer(null);\n\n        /* Token (read) buffer */\n\n        try{ assertNotNull(ctxt.allocTokenBuffer());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            ctxt.allocTokenBuffer();\n        } catch (IllegalStateException e) {\n            try{ verifyException(e, \"second time\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            ctxt.releaseTokenBuffer(new char[1]);\n        } catch (IllegalArgumentException e) {\n            try{ verifyException(e, \"smaller than original\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        ctxt.releaseTokenBuffer(null);\n\n        /* Concat (write?) buffer */\n\n        try{ assertNotNull(ctxt.allocConcatBuffer());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            ctxt.allocConcatBuffer();\n        } catch (IllegalStateException e) {\n            try{ verifyException(e, \"second time\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            ctxt.releaseConcatBuffer(new char[1]);\n        } catch (IllegalArgumentException e) {\n            try{ verifyException(e, \"smaller than original\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        ctxt.releaseConcatBuffer(null);\n\n        /* NameCopy (write?) buffer */\n\n        try{ assertNotNull(ctxt.allocNameCopyBuffer(100));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            ctxt.allocNameCopyBuffer(100);\n        } catch (IllegalStateException e) {\n            verifyException(e, \"second time\");                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n        try {\n            ctxt.releaseNameCopyBuffer(new char[1]);\n        } catch (IllegalArgumentException e) {\n            try{ verifyException(e, \"smaller than original\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        ctxt.releaseNameCopyBuffer(null);\n    }"
        ]
    }
}