{
    "com.fasterxml.jackson.core.sym.TestSymbolTables::testShortNameCollisionsDirectNew": {
        "begin_line_no": 460,
        "end_line_no": 484,
        "file_path": "src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java",
        "to": [
            "    public void testShortNameCollisionsDirectNew$catena_4() throws IOException\n    {\n        final int COUNT = 700;\n        {\n            ByteQuadsCanonicalizer symbols =\n                    ByteQuadsCanonicalizer.createRoot(333).makeChild(JsonFactory.Feature.collectDefaults());\n            for (int i = 0; i < COUNT; ++i) {\n                String id = String.valueOf((char) i);\n                int[] quads = calcQuads(id.getBytes(\"UTF-8\"));\n                symbols.addName(id, quads, quads.length);\n            }\n            try{ assertEquals(COUNT, symbols.size());                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(1024, symbols.bucketCount());                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            // Primary is good, but secondary spills cluster in nasty way...\n            try{ assertEquals(564, symbols.primaryCount());                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(122, symbols.secondaryCount());                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(14, symbols.tertiaryCount());                                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(0, symbols.spilloverCount());                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(COUNT,\n                    symbols.primaryCount() + symbols.secondaryCount() + symbols.tertiaryCount() + symbols.spilloverCount());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
            "    public void testShortNameCollisionsDirectNew$catena_3() throws IOException\n    {\n        final int COUNT = 700;\n        {\n            ByteQuadsCanonicalizer symbols =\n                    ByteQuadsCanonicalizer.createRoot(333).makeChild(JsonFactory.Feature.collectDefaults());\n            for (int i = 0; i < COUNT; ++i) {\n                String id = String.valueOf((char) i);\n                int[] quads = calcQuads(id.getBytes(\"UTF-8\"));\n                symbols.addName(id, quads, quads.length);\n            }\n            try{ assertEquals(COUNT, symbols.size());                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(1024, symbols.bucketCount());                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            // Primary is good, but secondary spills cluster in nasty way...\n            try{ assertEquals(564, symbols.primaryCount());                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(122, symbols.secondaryCount());                                                                        /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(14, symbols.tertiaryCount());                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, symbols.spilloverCount());                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(COUNT,\n                    symbols.primaryCount() + symbols.secondaryCount() + symbols.tertiaryCount() + symbols.spilloverCount());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
            "    public void testShortNameCollisionsDirectNew$catena_1() throws IOException\n    {\n        final int COUNT = 700;\n        {\n            ByteQuadsCanonicalizer symbols =\n                    ByteQuadsCanonicalizer.createRoot(333).makeChild(JsonFactory.Feature.collectDefaults());\n            for (int i = 0; i < COUNT; ++i) {\n                String id = String.valueOf((char) i);\n                int[] quads = calcQuads(id.getBytes(\"UTF-8\"));\n                symbols.addName(id, quads, quads.length);\n            }\n            try{ assertEquals(COUNT, symbols.size());                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            assertEquals(1024, symbols.bucketCount());                                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n\n            // Primary is good, but secondary spills cluster in nasty way...\n            try{ assertEquals(564, symbols.primaryCount());                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(122, symbols.secondaryCount());                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(14, symbols.tertiaryCount());                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, symbols.spilloverCount());                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(COUNT,\n                    symbols.primaryCount() + symbols.secondaryCount() + symbols.tertiaryCount() + symbols.spilloverCount());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
            "    public void testShortNameCollisionsDirectNew$catena_5() throws IOException\n    {\n        final int COUNT = 700;\n        {\n            ByteQuadsCanonicalizer symbols =\n                    ByteQuadsCanonicalizer.createRoot(333).makeChild(JsonFactory.Feature.collectDefaults());\n            for (int i = 0; i < COUNT; ++i) {\n                String id = String.valueOf((char) i);\n                int[] quads = calcQuads(id.getBytes(\"UTF-8\"));\n                symbols.addName(id, quads, quads.length);\n            }\n            try{ assertEquals(COUNT, symbols.size());                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(1024, symbols.bucketCount());                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            // Primary is good, but secondary spills cluster in nasty way...\n            try{ assertEquals(564, symbols.primaryCount());                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(122, symbols.secondaryCount());                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(14, symbols.tertiaryCount());                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(0, symbols.spilloverCount());                                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n\n            try{ assertEquals(COUNT,\n                    symbols.primaryCount() + symbols.secondaryCount() + symbols.tertiaryCount() + symbols.spilloverCount());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
            "    public void testShortNameCollisionsDirectNew$catena_2() throws IOException\n    {\n        final int COUNT = 700;\n        {\n            ByteQuadsCanonicalizer symbols =\n                    ByteQuadsCanonicalizer.createRoot(333).makeChild(JsonFactory.Feature.collectDefaults());\n            for (int i = 0; i < COUNT; ++i) {\n                String id = String.valueOf((char) i);\n                int[] quads = calcQuads(id.getBytes(\"UTF-8\"));\n                symbols.addName(id, quads, quads.length);\n            }\n            try{ assertEquals(COUNT, symbols.size());                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(1024, symbols.bucketCount());                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            // Primary is good, but secondary spills cluster in nasty way...\n            assertEquals(564, symbols.primaryCount());                                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(122, symbols.secondaryCount());                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(14, symbols.tertiaryCount());                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, symbols.spilloverCount());                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(COUNT,\n                    symbols.primaryCount() + symbols.secondaryCount() + symbols.tertiaryCount() + symbols.spilloverCount());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
            "    public void testShortNameCollisionsDirectNew$catena_0() throws IOException\n    {\n        final int COUNT = 700;\n        {\n            ByteQuadsCanonicalizer symbols =\n                    ByteQuadsCanonicalizer.createRoot(333).makeChild(JsonFactory.Feature.collectDefaults());\n            for (int i = 0; i < COUNT; ++i) {\n                String id = String.valueOf((char) i);\n                int[] quads = calcQuads(id.getBytes(\"UTF-8\"));\n                symbols.addName(id, quads, quads.length);\n            }\n            assertEquals(COUNT, symbols.size());                                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n\n            try{ assertEquals(1024, symbols.bucketCount());                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            // Primary is good, but secondary spills cluster in nasty way...\n            try{ assertEquals(564, symbols.primaryCount());                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(122, symbols.secondaryCount());                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(14, symbols.tertiaryCount());                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, symbols.spilloverCount());                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(COUNT,\n                    symbols.primaryCount() + symbols.secondaryCount() + symbols.tertiaryCount() + symbols.spilloverCount());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
            "    public void testShortNameCollisionsDirectNew$catena_6() throws IOException\n    {\n        final int COUNT = 700;\n        {\n            ByteQuadsCanonicalizer symbols =\n                    ByteQuadsCanonicalizer.createRoot(333).makeChild(JsonFactory.Feature.collectDefaults());\n            for (int i = 0; i < COUNT; ++i) {\n                String id = String.valueOf((char) i);\n                int[] quads = calcQuads(id.getBytes(\"UTF-8\"));\n                symbols.addName(id, quads, quads.length);\n            }\n            try{ assertEquals(COUNT, symbols.size());                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(1024, symbols.bucketCount());                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            // Primary is good, but secondary spills cluster in nasty way...\n            try{ assertEquals(564, symbols.primaryCount());                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(122, symbols.secondaryCount());                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(14, symbols.tertiaryCount());                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, symbols.spilloverCount());                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            assertEquals(COUNT,\n                    symbols.primaryCount() + symbols.secondaryCount() + symbols.tertiaryCount() + symbols.spilloverCount());    /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n    }"
        ]
    },
    "com.fasterxml.jackson.core.sym.TestSymbolTables::testCollisionsWithBytesNew187b": {
        "begin_line_no": 303,
        "end_line_no": 327,
        "file_path": "src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java",
        "to": [
            "    public void testCollisionsWithBytesNew187b$catena_2() throws IOException\n    {\n        ByteQuadsCanonicalizer symbols =\n                ByteQuadsCanonicalizer.createRoot(1).makeChild(JsonFactory.Feature.collectDefaults());\n\n        final int COUNT = 10000;\n        for (int i = 0; i < COUNT; ++i) {\n            String id = String.valueOf(i);\n            int[] quads = calcQuads(id.getBytes(\"UTF-8\"));\n            symbols.addName(id, quads, quads.length);\n        }\n        try{ assertEquals(COUNT, symbols.size());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(16384, symbols.bucketCount());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // fragile, but essential to verify low collision counts;\n        // here bit low primary, 55% \n        assertEquals(5402, symbols.primaryCount());                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        // secondary higher than usual, above 25%\n        try{ assertEquals(2744, symbols.secondaryCount());                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        // and most of remaining in tertiary\n        try{ assertEquals(1834, symbols.tertiaryCount());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        // with a bit of spillover\n        try{ assertEquals(20, symbols.spilloverCount());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testCollisionsWithBytesNew187b$catena_5() throws IOException\n    {\n        ByteQuadsCanonicalizer symbols =\n                ByteQuadsCanonicalizer.createRoot(1).makeChild(JsonFactory.Feature.collectDefaults());\n\n        final int COUNT = 10000;\n        for (int i = 0; i < COUNT; ++i) {\n            String id = String.valueOf(i);\n            int[] quads = calcQuads(id.getBytes(\"UTF-8\"));\n            symbols.addName(id, quads, quads.length);\n        }\n        try{ assertEquals(COUNT, symbols.size());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(16384, symbols.bucketCount());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // fragile, but essential to verify low collision counts;\n        // here bit low primary, 55% \n        try{ assertEquals(5402, symbols.primaryCount());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        // secondary higher than usual, above 25%\n        try{ assertEquals(2744, symbols.secondaryCount());                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        // and most of remaining in tertiary\n        try{ assertEquals(1834, symbols.tertiaryCount());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        // with a bit of spillover\n        assertEquals(20, symbols.spilloverCount());                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n    }",
            "    public void testCollisionsWithBytesNew187b$catena_1() throws IOException\n    {\n        ByteQuadsCanonicalizer symbols =\n                ByteQuadsCanonicalizer.createRoot(1).makeChild(JsonFactory.Feature.collectDefaults());\n\n        final int COUNT = 10000;\n        for (int i = 0; i < COUNT; ++i) {\n            String id = String.valueOf(i);\n            int[] quads = calcQuads(id.getBytes(\"UTF-8\"));\n            symbols.addName(id, quads, quads.length);\n        }\n        try{ assertEquals(COUNT, symbols.size());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        assertEquals(16384, symbols.bucketCount());                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // fragile, but essential to verify low collision counts;\n        // here bit low primary, 55% \n        try{ assertEquals(5402, symbols.primaryCount());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        // secondary higher than usual, above 25%\n        try{ assertEquals(2744, symbols.secondaryCount());                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        // and most of remaining in tertiary\n        try{ assertEquals(1834, symbols.tertiaryCount());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        // with a bit of spillover\n        try{ assertEquals(20, symbols.spilloverCount());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testCollisionsWithBytesNew187b$catena_3() throws IOException\n    {\n        ByteQuadsCanonicalizer symbols =\n                ByteQuadsCanonicalizer.createRoot(1).makeChild(JsonFactory.Feature.collectDefaults());\n\n        final int COUNT = 10000;\n        for (int i = 0; i < COUNT; ++i) {\n            String id = String.valueOf(i);\n            int[] quads = calcQuads(id.getBytes(\"UTF-8\"));\n            symbols.addName(id, quads, quads.length);\n        }\n        try{ assertEquals(COUNT, symbols.size());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(16384, symbols.bucketCount());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // fragile, but essential to verify low collision counts;\n        // here bit low primary, 55% \n        try{ assertEquals(5402, symbols.primaryCount());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        // secondary higher than usual, above 25%\n        assertEquals(2744, symbols.secondaryCount());                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n        // and most of remaining in tertiary\n        try{ assertEquals(1834, symbols.tertiaryCount());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        // with a bit of spillover\n        try{ assertEquals(20, symbols.spilloverCount());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testCollisionsWithBytesNew187b$catena_4() throws IOException\n    {\n        ByteQuadsCanonicalizer symbols =\n                ByteQuadsCanonicalizer.createRoot(1).makeChild(JsonFactory.Feature.collectDefaults());\n\n        final int COUNT = 10000;\n        for (int i = 0; i < COUNT; ++i) {\n            String id = String.valueOf(i);\n            int[] quads = calcQuads(id.getBytes(\"UTF-8\"));\n            symbols.addName(id, quads, quads.length);\n        }\n        try{ assertEquals(COUNT, symbols.size());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(16384, symbols.bucketCount());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // fragile, but essential to verify low collision counts;\n        // here bit low primary, 55% \n        try{ assertEquals(5402, symbols.primaryCount());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        // secondary higher than usual, above 25%\n        try{ assertEquals(2744, symbols.secondaryCount());                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        // and most of remaining in tertiary\n        assertEquals(1834, symbols.tertiaryCount());                                                        /***** ORIGINAL ASSERTION IS HERE *****/\n        // with a bit of spillover\n        try{ assertEquals(20, symbols.spilloverCount());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testCollisionsWithBytesNew187b$catena_0() throws IOException\n    {\n        ByteQuadsCanonicalizer symbols =\n                ByteQuadsCanonicalizer.createRoot(1).makeChild(JsonFactory.Feature.collectDefaults());\n\n        final int COUNT = 10000;\n        for (int i = 0; i < COUNT; ++i) {\n            String id = String.valueOf(i);\n            int[] quads = calcQuads(id.getBytes(\"UTF-8\"));\n            symbols.addName(id, quads, quads.length);\n        }\n        assertEquals(COUNT, symbols.size());                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        try{ assertEquals(16384, symbols.bucketCount());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // fragile, but essential to verify low collision counts;\n        // here bit low primary, 55% \n        try{ assertEquals(5402, symbols.primaryCount());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        // secondary higher than usual, above 25%\n        try{ assertEquals(2744, symbols.secondaryCount());                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        // and most of remaining in tertiary\n        try{ assertEquals(1834, symbols.tertiaryCount());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        // with a bit of spillover\n        try{ assertEquals(20, symbols.spilloverCount());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    },
    "com.fasterxml.jackson.core.sym.TestSymbolTables::testSyntheticWithBytesNew": {
        "begin_line_no": 64,
        "end_line_no": 89,
        "file_path": "src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java",
        "to": [
            "    public void testSyntheticWithBytesNew$catena_4() throws IOException\n    {\n        // pass seed, to keep results consistent:\n        final int SEED = 33333;\n        ByteQuadsCanonicalizer symbols =\n                ByteQuadsCanonicalizer.createRoot(SEED).makeChild(JsonFactory.Feature.collectDefaults());\n\n        final int COUNT = 12000;\n        for (int i = 0; i < COUNT; ++i) {\n            String id = fieldNameFor(i);\n            int[] quads = calcQuads(id.getBytes(\"UTF-8\"));\n            symbols.addName(id, quads, quads.length);\n        }\n        try{ assertEquals(COUNT, symbols.size());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(16384, symbols.bucketCount());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // fragile, but essential to verify low collision counts;\n        // anywhere between 70-80% primary matches\n        try{ assertEquals(8534, symbols.primaryCount());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        // secondary between 10-20%\n        try{ assertEquals(2534, symbols.secondaryCount());                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        // and most of remaining in tertiary\n        assertEquals(932, symbols.tertiaryCount());                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        // so that spill-over is empty or close to\n        try{ assertEquals(0, symbols.spilloverCount());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testSyntheticWithBytesNew$catena_2() throws IOException\n    {\n        // pass seed, to keep results consistent:\n        final int SEED = 33333;\n        ByteQuadsCanonicalizer symbols =\n                ByteQuadsCanonicalizer.createRoot(SEED).makeChild(JsonFactory.Feature.collectDefaults());\n\n        final int COUNT = 12000;\n        for (int i = 0; i < COUNT; ++i) {\n            String id = fieldNameFor(i);\n            int[] quads = calcQuads(id.getBytes(\"UTF-8\"));\n            symbols.addName(id, quads, quads.length);\n        }\n        try{ assertEquals(COUNT, symbols.size());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(16384, symbols.bucketCount());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // fragile, but essential to verify low collision counts;\n        // anywhere between 70-80% primary matches\n        assertEquals(8534, symbols.primaryCount());                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        // secondary between 10-20%\n        try{ assertEquals(2534, symbols.secondaryCount());                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        // and most of remaining in tertiary\n        try{ assertEquals(932, symbols.tertiaryCount());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        // so that spill-over is empty or close to\n        try{ assertEquals(0, symbols.spilloverCount());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testSyntheticWithBytesNew$catena_0() throws IOException\n    {\n        // pass seed, to keep results consistent:\n        final int SEED = 33333;\n        ByteQuadsCanonicalizer symbols =\n                ByteQuadsCanonicalizer.createRoot(SEED).makeChild(JsonFactory.Feature.collectDefaults());\n\n        final int COUNT = 12000;\n        for (int i = 0; i < COUNT; ++i) {\n            String id = fieldNameFor(i);\n            int[] quads = calcQuads(id.getBytes(\"UTF-8\"));\n            symbols.addName(id, quads, quads.length);\n        }\n        assertEquals(COUNT, symbols.size());                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(16384, symbols.bucketCount());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // fragile, but essential to verify low collision counts;\n        // anywhere between 70-80% primary matches\n        try{ assertEquals(8534, symbols.primaryCount());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        // secondary between 10-20%\n        try{ assertEquals(2534, symbols.secondaryCount());                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        // and most of remaining in tertiary\n        try{ assertEquals(932, symbols.tertiaryCount());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        // so that spill-over is empty or close to\n        try{ assertEquals(0, symbols.spilloverCount());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testSyntheticWithBytesNew$catena_1() throws IOException\n    {\n        // pass seed, to keep results consistent:\n        final int SEED = 33333;\n        ByteQuadsCanonicalizer symbols =\n                ByteQuadsCanonicalizer.createRoot(SEED).makeChild(JsonFactory.Feature.collectDefaults());\n\n        final int COUNT = 12000;\n        for (int i = 0; i < COUNT; ++i) {\n            String id = fieldNameFor(i);\n            int[] quads = calcQuads(id.getBytes(\"UTF-8\"));\n            symbols.addName(id, quads, quads.length);\n        }\n        try{ assertEquals(COUNT, symbols.size());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(16384, symbols.bucketCount());                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        // fragile, but essential to verify low collision counts;\n        // anywhere between 70-80% primary matches\n        try{ assertEquals(8534, symbols.primaryCount());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        // secondary between 10-20%\n        try{ assertEquals(2534, symbols.secondaryCount());                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        // and most of remaining in tertiary\n        try{ assertEquals(932, symbols.tertiaryCount());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        // so that spill-over is empty or close to\n        try{ assertEquals(0, symbols.spilloverCount());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testSyntheticWithBytesNew$catena_3() throws IOException\n    {\n        // pass seed, to keep results consistent:\n        final int SEED = 33333;\n        ByteQuadsCanonicalizer symbols =\n                ByteQuadsCanonicalizer.createRoot(SEED).makeChild(JsonFactory.Feature.collectDefaults());\n\n        final int COUNT = 12000;\n        for (int i = 0; i < COUNT; ++i) {\n            String id = fieldNameFor(i);\n            int[] quads = calcQuads(id.getBytes(\"UTF-8\"));\n            symbols.addName(id, quads, quads.length);\n        }\n        try{ assertEquals(COUNT, symbols.size());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(16384, symbols.bucketCount());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // fragile, but essential to verify low collision counts;\n        // anywhere between 70-80% primary matches\n        try{ assertEquals(8534, symbols.primaryCount());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        // secondary between 10-20%\n        assertEquals(2534, symbols.secondaryCount());                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n        // and most of remaining in tertiary\n        try{ assertEquals(932, symbols.tertiaryCount());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        // so that spill-over is empty or close to\n        try{ assertEquals(0, symbols.spilloverCount());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testSyntheticWithBytesNew$catena_5() throws IOException\n    {\n        // pass seed, to keep results consistent:\n        final int SEED = 33333;\n        ByteQuadsCanonicalizer symbols =\n                ByteQuadsCanonicalizer.createRoot(SEED).makeChild(JsonFactory.Feature.collectDefaults());\n\n        final int COUNT = 12000;\n        for (int i = 0; i < COUNT; ++i) {\n            String id = fieldNameFor(i);\n            int[] quads = calcQuads(id.getBytes(\"UTF-8\"));\n            symbols.addName(id, quads, quads.length);\n        }\n        try{ assertEquals(COUNT, symbols.size());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(16384, symbols.bucketCount());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // fragile, but essential to verify low collision counts;\n        // anywhere between 70-80% primary matches\n        try{ assertEquals(8534, symbols.primaryCount());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        // secondary between 10-20%\n        try{ assertEquals(2534, symbols.secondaryCount());                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        // and most of remaining in tertiary\n        try{ assertEquals(932, symbols.tertiaryCount());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        // so that spill-over is empty or close to\n        assertEquals(0, symbols.spilloverCount());                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
        ]
    }
}