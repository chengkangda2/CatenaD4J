{
    "com.fasterxml.jackson.core.json.ParserSequenceTest::testInitialized": {
        "begin_line_no": 50,
        "end_line_no": 64,
        "file_path": "src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java",
        "to": [
            "    public void testInitialized$catena_5() throws Exception\n    {\n        JsonParser p1 = JSON_FACTORY.createParser(\"1 2\");\n        JsonParser p2 = JSON_FACTORY.createParser(\"3 false\");\n        // consume '1', move to '2'\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p1.nextToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p1.nextToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        JsonParserSequence seq = JsonParserSequence.createFlattened(p1, p2);\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, seq.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, seq.getIntValue());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, seq.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(3, seq.getIntValue());                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        seq.close();\n    }",
            "    public void testInitialized$catena_4() throws Exception\n    {\n        JsonParser p1 = JSON_FACTORY.createParser(\"1 2\");\n        JsonParser p2 = JSON_FACTORY.createParser(\"3 false\");\n        // consume '1', move to '2'\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p1.nextToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p1.nextToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        JsonParserSequence seq = JsonParserSequence.createFlattened(p1, p2);\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, seq.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, seq.getIntValue());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertToken(JsonToken.VALUE_NUMBER_INT, seq.nextToken());                                           /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(3, seq.getIntValue());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        seq.close();\n    }",
            "    public void testInitialized$catena_3() throws Exception\n    {\n        JsonParser p1 = JSON_FACTORY.createParser(\"1 2\");\n        JsonParser p2 = JSON_FACTORY.createParser(\"3 false\");\n        // consume '1', move to '2'\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p1.nextToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p1.nextToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        JsonParserSequence seq = JsonParserSequence.createFlattened(p1, p2);\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, seq.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(2, seq.getIntValue());                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, seq.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, seq.getIntValue());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        seq.close();\n    }",
            "    public void testInitialized$catena_0() throws Exception\n    {\n        JsonParser p1 = JSON_FACTORY.createParser(\"1 2\");\n        JsonParser p2 = JSON_FACTORY.createParser(\"3 false\");\n        // consume '1', move to '2'\n        assertToken(JsonToken.VALUE_NUMBER_INT, p1.nextToken());                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p1.nextToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        JsonParserSequence seq = JsonParserSequence.createFlattened(p1, p2);\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, seq.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, seq.getIntValue());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, seq.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, seq.getIntValue());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        seq.close();\n    }",
            "    public void testInitialized$catena_1() throws Exception\n    {\n        JsonParser p1 = JSON_FACTORY.createParser(\"1 2\");\n        JsonParser p2 = JSON_FACTORY.createParser(\"3 false\");\n        // consume '1', move to '2'\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p1.nextToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertToken(JsonToken.VALUE_NUMBER_INT, p1.nextToken());                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        JsonParserSequence seq = JsonParserSequence.createFlattened(p1, p2);\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, seq.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, seq.getIntValue());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, seq.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, seq.getIntValue());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        seq.close();\n    }",
            "    public void testInitialized$catena_2() throws Exception\n    {\n        JsonParser p1 = JSON_FACTORY.createParser(\"1 2\");\n        JsonParser p2 = JSON_FACTORY.createParser(\"3 false\");\n        // consume '1', move to '2'\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p1.nextToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, p1.nextToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        JsonParserSequence seq = JsonParserSequence.createFlattened(p1, p2);\n        assertToken(JsonToken.VALUE_NUMBER_INT, seq.nextToken());                                           /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(2, seq.getIntValue());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, seq.nextToken());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, seq.getIntValue());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        seq.close();\n    }"
        ]
    }
}