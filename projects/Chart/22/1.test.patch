{
    "org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey": {
        "begin_line_no": 387,
        "end_line_no": 414,
        "file_path": "tests/org/jfree/data/junit/KeyedObjects2DTests.java",
        "to": [
            "    public void testRemoveColumnByKey$catena_2() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        data.removeColumn(\"C2\");\n        try{ assertEquals(1, data.getColumnCount());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Obj1\", data.getObject(0, 0));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // try unknown column key\n        boolean pass = false;\n        try {\n            data.removeColumn(\"XXX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        assertTrue(pass);                                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        // try null column key\n        pass = false;\n        try {\n            data.removeColumn(null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testRemoveColumnByKey$catena_1() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        data.removeColumn(\"C2\");\n        try{ assertEquals(1, data.getColumnCount());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"Obj1\", data.getObject(0, 0));                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        // try unknown column key\n        boolean pass = false;\n        try {\n            data.removeColumn(\"XXX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // try null column key\n        pass = false;\n        try {\n            data.removeColumn(null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testRemoveColumnByKey$catena_3() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        data.removeColumn(\"C2\");\n        try{ assertEquals(1, data.getColumnCount());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Obj1\", data.getObject(0, 0));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // try unknown column key\n        boolean pass = false;\n        try {\n            data.removeColumn(\"XXX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // try null column key\n        pass = false;\n        try {\n            data.removeColumn(null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);                                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n    }",
            "    public void testRemoveColumnByKey$catena_0() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        data.removeColumn(\"C2\");\n        assertEquals(1, data.getColumnCount());                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"Obj1\", data.getObject(0, 0));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // try unknown column key\n        boolean pass = false;\n        try {\n            data.removeColumn(\"XXX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // try null column key\n        pass = false;\n        try {\n            data.removeColumn(null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    },
    "org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex": {
        "begin_line_no": 323,
        "end_line_no": 350,
        "file_path": "tests/org/jfree/data/junit/KeyedObjects2DTests.java",
        "to": [
            "    public void testRemoveColumnByIndex$catena_2() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        data.removeColumn(0);\n        try{ assertEquals(1, data.getColumnCount());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Obj2\", data.getObject(1, 0));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // try negative column index\n        boolean pass = false;\n        try {\n            data.removeColumn(-1);\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        assertTrue(pass);                                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        // try column index too high\n        pass = false;\n        try {\n            data.removeColumn(data.getColumnCount());\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testRemoveColumnByIndex$catena_1() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        data.removeColumn(0);\n        try{ assertEquals(1, data.getColumnCount());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"Obj2\", data.getObject(1, 0));                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        // try negative column index\n        boolean pass = false;\n        try {\n            data.removeColumn(-1);\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // try column index too high\n        pass = false;\n        try {\n            data.removeColumn(data.getColumnCount());\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testRemoveColumnByIndex$catena_0() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        data.removeColumn(0);\n        assertEquals(1, data.getColumnCount());                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"Obj2\", data.getObject(1, 0));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // try negative column index\n        boolean pass = false;\n        try {\n            data.removeColumn(-1);\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // try column index too high\n        pass = false;\n        try {\n            data.removeColumn(data.getColumnCount());\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testRemoveColumnByIndex$catena_3() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        data.removeColumn(0);\n        try{ assertEquals(1, data.getColumnCount());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Obj2\", data.getObject(1, 0));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // try negative column index\n        boolean pass = false;\n        try {\n            data.removeColumn(-1);\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // try column index too high\n        pass = false;\n        try {\n            data.removeColumn(data.getColumnCount());\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        assertTrue(pass);                                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
        ]
    }
}