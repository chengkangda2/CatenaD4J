{
    "org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey": {
        "begin_line_no": 387,
        "end_line_no": 414,
        "file_path": "tests/org/jfree/data/junit/KeyedObjects2DTests.java",
        "to": [
            "    public void testRemoveColumnByKey$catena_2() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        data.removeColumn(\"C2\");\n        try{ assertEquals(1, data.getColumnCount());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Obj1\", data.getObject(0, 0));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // try unknown column key\n        boolean pass = false;\n        try {\n            data.removeColumn(\"XXX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        assertTrue(pass);                                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        // try null column key\n        pass = false;\n        try {\n            data.removeColumn(null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testRemoveColumnByKey$catena_1() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        data.removeColumn(\"C2\");\n        try{ assertEquals(1, data.getColumnCount());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"Obj1\", data.getObject(0, 0));                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        // try unknown column key\n        boolean pass = false;\n        try {\n            data.removeColumn(\"XXX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // try null column key\n        pass = false;\n        try {\n            data.removeColumn(null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testRemoveColumnByKey$catena_3() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        data.removeColumn(\"C2\");\n        try{ assertEquals(1, data.getColumnCount());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Obj1\", data.getObject(0, 0));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // try unknown column key\n        boolean pass = false;\n        try {\n            data.removeColumn(\"XXX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // try null column key\n        pass = false;\n        try {\n            data.removeColumn(null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);                                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n    }",
            "    public void testRemoveColumnByKey$catena_0() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        data.removeColumn(\"C2\");\n        assertEquals(1, data.getColumnCount());                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"Obj1\", data.getObject(0, 0));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // try unknown column key\n        boolean pass = false;\n        try {\n            data.removeColumn(\"XXX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // try null column key\n        pass = false;\n        try {\n            data.removeColumn(null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    },
    "org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex": {
        "begin_line_no": 323,
        "end_line_no": 350,
        "file_path": "tests/org/jfree/data/junit/KeyedObjects2DTests.java",
        "to": [
            "    public void testRemoveColumnByIndex$catena_2() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        data.removeColumn(0);\n        try{ assertEquals(1, data.getColumnCount());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Obj2\", data.getObject(1, 0));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // try negative column index\n        boolean pass = false;\n        try {\n            data.removeColumn(-1);\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        assertTrue(pass);                                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        // try column index too high\n        pass = false;\n        try {\n            data.removeColumn(data.getColumnCount());\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testRemoveColumnByIndex$catena_1() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        data.removeColumn(0);\n        try{ assertEquals(1, data.getColumnCount());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"Obj2\", data.getObject(1, 0));                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        // try negative column index\n        boolean pass = false;\n        try {\n            data.removeColumn(-1);\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // try column index too high\n        pass = false;\n        try {\n            data.removeColumn(data.getColumnCount());\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testRemoveColumnByIndex$catena_0() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        data.removeColumn(0);\n        assertEquals(1, data.getColumnCount());                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"Obj2\", data.getObject(1, 0));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // try negative column index\n        boolean pass = false;\n        try {\n            data.removeColumn(-1);\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // try column index too high\n        pass = false;\n        try {\n            data.removeColumn(data.getColumnCount());\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testRemoveColumnByIndex$catena_3() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        data.removeColumn(0);\n        try{ assertEquals(1, data.getColumnCount());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Obj2\", data.getObject(1, 0));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // try negative column index\n        boolean pass = false;\n        try {\n            data.removeColumn(-1);\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // try column index too high\n        pass = false;\n        try {\n            data.removeColumn(data.getColumnCount());\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        assertTrue(pass);                                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
        ]
    },
    "org.jfree.data.junit.KeyedObjects2DTests::testRemoveValue": {
        "begin_line_no": 419,
        "end_line_no": 427,
        "file_path": "tests/org/jfree/data/junit/KeyedObjects2DTests.java",
        "to": [
            "    public void testRemoveValue$catena_0() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        data.removeObject(\"R2\", \"C2\");\n        assertEquals(1, data.getRowCount());                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(1, data.getColumnCount());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Obj1\", data.getObject(0, 0));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testRemoveValue$catena_2() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        data.removeObject(\"R2\", \"C2\");\n        try{ assertEquals(1, data.getRowCount());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, data.getColumnCount());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"Obj1\", data.getObject(0, 0));                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
        ]
    },
    "org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey": {
        "begin_line_no": 205,
        "end_line_no": 250,
        "file_path": "tests/org/jfree/data/junit/KeyedObjects2DTests.java",
        "to": [
            "    public void testGetValueByKey$catena_0() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.addObject(\"Obj1\", \"R1\", \"C1\");\n        data.addObject(\"Obj2\", \"R2\", \"C2\");\n        assertEquals(\"Obj1\", data.getObject(\"R1\", \"C1\"));                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"Obj2\", data.getObject(\"R2\", \"C2\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(data.getObject(\"R1\", \"C2\"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(data.getObject(\"R2\", \"C1\"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // check invalid indices\n        boolean pass = false;\n        try {\n            data.getObject(\"XX\", \"C1\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        pass = false;\n        try {\n            data.getObject(\"R1\", \"XX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        pass = false;\n        try {\n            data.getObject(\"XX\", \"C1\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        pass = false;\n        try {\n            data.getObject(\"R1\", \"XX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testGetValueByKey$catena_1() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.addObject(\"Obj1\", \"R1\", \"C1\");\n        data.addObject(\"Obj2\", \"R2\", \"C2\");\n        try{ assertEquals(\"Obj1\", data.getObject(\"R1\", \"C1\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"Obj2\", data.getObject(\"R2\", \"C2\"));                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertNull(data.getObject(\"R1\", \"C2\"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(data.getObject(\"R2\", \"C1\"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // check invalid indices\n        boolean pass = false;\n        try {\n            data.getObject(\"XX\", \"C1\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        pass = false;\n        try {\n            data.getObject(\"R1\", \"XX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        pass = false;\n        try {\n            data.getObject(\"XX\", \"C1\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        pass = false;\n        try {\n            data.getObject(\"R1\", \"XX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testGetValueByKey$catena_4() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.addObject(\"Obj1\", \"R1\", \"C1\");\n        data.addObject(\"Obj2\", \"R2\", \"C2\");\n        try{ assertEquals(\"Obj1\", data.getObject(\"R1\", \"C1\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Obj2\", data.getObject(\"R2\", \"C2\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(data.getObject(\"R1\", \"C2\"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(data.getObject(\"R2\", \"C1\"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // check invalid indices\n        boolean pass = false;\n        try {\n            data.getObject(\"XX\", \"C1\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        assertTrue(pass);                                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        pass = false;\n        try {\n            data.getObject(\"R1\", \"XX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        pass = false;\n        try {\n            data.getObject(\"XX\", \"C1\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        pass = false;\n        try {\n            data.getObject(\"R1\", \"XX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testGetValueByKey$catena_5() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.addObject(\"Obj1\", \"R1\", \"C1\");\n        data.addObject(\"Obj2\", \"R2\", \"C2\");\n        try{ assertEquals(\"Obj1\", data.getObject(\"R1\", \"C1\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Obj2\", data.getObject(\"R2\", \"C2\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(data.getObject(\"R1\", \"C2\"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(data.getObject(\"R2\", \"C1\"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // check invalid indices\n        boolean pass = false;\n        try {\n            data.getObject(\"XX\", \"C1\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        pass = false;\n        try {\n            data.getObject(\"R1\", \"XX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        assertTrue(pass);                                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n\n        pass = false;\n        try {\n            data.getObject(\"XX\", \"C1\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        pass = false;\n        try {\n            data.getObject(\"R1\", \"XX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testGetValueByKey$catena_6() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.addObject(\"Obj1\", \"R1\", \"C1\");\n        data.addObject(\"Obj2\", \"R2\", \"C2\");\n        try{ assertEquals(\"Obj1\", data.getObject(\"R1\", \"C1\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Obj2\", data.getObject(\"R2\", \"C2\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(data.getObject(\"R1\", \"C2\"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(data.getObject(\"R2\", \"C1\"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // check invalid indices\n        boolean pass = false;\n        try {\n            data.getObject(\"XX\", \"C1\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        pass = false;\n        try {\n            data.getObject(\"R1\", \"XX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        pass = false;\n        try {\n            data.getObject(\"XX\", \"C1\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        assertTrue(pass);                                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n\n        pass = false;\n        try {\n            data.getObject(\"R1\", \"XX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testGetValueByKey$catena_7() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.addObject(\"Obj1\", \"R1\", \"C1\");\n        data.addObject(\"Obj2\", \"R2\", \"C2\");\n        try{ assertEquals(\"Obj1\", data.getObject(\"R1\", \"C1\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Obj2\", data.getObject(\"R2\", \"C2\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(data.getObject(\"R1\", \"C2\"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(data.getObject(\"R2\", \"C1\"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // check invalid indices\n        boolean pass = false;\n        try {\n            data.getObject(\"XX\", \"C1\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        pass = false;\n        try {\n            data.getObject(\"R1\", \"XX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        pass = false;\n        try {\n            data.getObject(\"XX\", \"C1\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        pass = false;\n        try {\n            data.getObject(\"R1\", \"XX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        assertTrue(pass);                                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
        ]
    },
    "org.jfree.data.junit.KeyedObjects2DTests::testSetObject": {
        "begin_line_no": 255,
        "end_line_no": 286,
        "file_path": "tests/org/jfree/data/junit/KeyedObjects2DTests.java",
        "to": [
            "    public void testSetObject$catena_0() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        assertEquals(\"Obj1\", data.getObject(\"R1\", \"C1\"));                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"Obj2\", data.getObject(\"R2\", \"C2\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(data.getObject(\"R1\", \"C2\"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(data.getObject(\"R2\", \"C1\"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // confirm overwriting an existing value\n        data.setObject(\"ABC\", \"R2\", \"C2\");\n        try{ assertEquals(\"ABC\", data.getObject(\"R2\", \"C2\"));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // try null keys\n        boolean pass = false;\n        try {\n            data.setObject(\"X\", null, \"C1\");\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        pass = false;\n        try {\n            data.setObject(\"X\", \"R1\", null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testSetObject$catena_1() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        try{ assertEquals(\"Obj1\", data.getObject(\"R1\", \"C1\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"Obj2\", data.getObject(\"R2\", \"C2\"));                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertNull(data.getObject(\"R1\", \"C2\"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(data.getObject(\"R2\", \"C1\"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // confirm overwriting an existing value\n        data.setObject(\"ABC\", \"R2\", \"C2\");\n        try{ assertEquals(\"ABC\", data.getObject(\"R2\", \"C2\"));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // try null keys\n        boolean pass = false;\n        try {\n            data.setObject(\"X\", null, \"C1\");\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        pass = false;\n        try {\n            data.setObject(\"X\", \"R1\", null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testSetObject$catena_4() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        try{ assertEquals(\"Obj1\", data.getObject(\"R1\", \"C1\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Obj2\", data.getObject(\"R2\", \"C2\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(data.getObject(\"R1\", \"C2\"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(data.getObject(\"R2\", \"C1\"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // confirm overwriting an existing value\n        data.setObject(\"ABC\", \"R2\", \"C2\");\n        assertEquals(\"ABC\", data.getObject(\"R2\", \"C2\"));                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        // try null keys\n        boolean pass = false;\n        try {\n            data.setObject(\"X\", null, \"C1\");\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        pass = false;\n        try {\n            data.setObject(\"X\", \"R1\", null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testSetObject$catena_5() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        try{ assertEquals(\"Obj1\", data.getObject(\"R1\", \"C1\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Obj2\", data.getObject(\"R2\", \"C2\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(data.getObject(\"R1\", \"C2\"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(data.getObject(\"R2\", \"C1\"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // confirm overwriting an existing value\n        data.setObject(\"ABC\", \"R2\", \"C2\");\n        try{ assertEquals(\"ABC\", data.getObject(\"R2\", \"C2\"));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // try null keys\n        boolean pass = false;\n        try {\n            data.setObject(\"X\", null, \"C1\");\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);                                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        pass = false;\n        try {\n            data.setObject(\"X\", \"R1\", null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testSetObject$catena_6() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        try{ assertEquals(\"Obj1\", data.getObject(\"R1\", \"C1\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Obj2\", data.getObject(\"R2\", \"C2\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(data.getObject(\"R1\", \"C2\"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(data.getObject(\"R2\", \"C1\"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // confirm overwriting an existing value\n        data.setObject(\"ABC\", \"R2\", \"C2\");\n        try{ assertEquals(\"ABC\", data.getObject(\"R2\", \"C2\"));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // try null keys\n        boolean pass = false;\n        try {\n            data.setObject(\"X\", null, \"C1\");\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        pass = false;\n        try {\n            data.setObject(\"X\", \"R1\", null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);                                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
        ]
    },
    "org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey": {
        "begin_line_no": 355,
        "end_line_no": 382,
        "file_path": "tests/org/jfree/data/junit/KeyedObjects2DTests.java",
        "to": [
            ""
        ]
    }
}