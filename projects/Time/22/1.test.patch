{
    "org.joda.time.TestDuration_Basics::testToPeriod_fixedZone": {
        "begin_line_no": 470,
        "end_line_no": 492,
        "file_path": "src/test/java/org/joda/time/TestDuration_Basics.java",
        "to": [
            "    public void testToPeriod_fixedZone$catena_4() throws Throwable {\n        DateTimeZone zone = DateTimeZone.getDefault();\n        try {\n            DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));\n            long length =\n                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n                5L * DateTimeConstants.MILLIS_PER_HOUR +\n                6L * DateTimeConstants.MILLIS_PER_MINUTE +\n                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n            Duration dur = new Duration(length);\n            Period test = dur.toPeriod();\n            try{ assertEquals(0, test.getYears());                }catch(Throwable __SHOULD_BE_IGNORED){}  // (4 + (3 * 7) + (2 * 30) + 365) == 450\n            try{ assertEquals(0, test.getMonths());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, test.getWeeks());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, test.getDays());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals((450 * 24) + 5, test.getHours());                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(6, test.getMinutes());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(7, test.getSeconds());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(8, test.getMillis());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            DateTimeZone.setDefault(zone);\n        }\n    }",
            "    public void testToPeriod_fixedZone$catena_3() throws Throwable {\n        DateTimeZone zone = DateTimeZone.getDefault();\n        try {\n            DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));\n            long length =\n                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n                5L * DateTimeConstants.MILLIS_PER_HOUR +\n                6L * DateTimeConstants.MILLIS_PER_MINUTE +\n                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n            Duration dur = new Duration(length);\n            Period test = dur.toPeriod();\n            try{ assertEquals(0, test.getYears());                }catch(Throwable __SHOULD_BE_IGNORED){}  // (4 + (3 * 7) + (2 * 30) + 365) == 450\n            try{ assertEquals(0, test.getMonths());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, test.getWeeks());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(0, test.getDays());                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals((450 * 24) + 5, test.getHours());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(6, test.getMinutes());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(7, test.getSeconds());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(8, test.getMillis());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            DateTimeZone.setDefault(zone);\n        }\n    }",
            "    public void testToPeriod_fixedZone$catena_2() throws Throwable {\n        DateTimeZone zone = DateTimeZone.getDefault();\n        try {\n            DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));\n            long length =\n                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n                5L * DateTimeConstants.MILLIS_PER_HOUR +\n                6L * DateTimeConstants.MILLIS_PER_MINUTE +\n                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n            Duration dur = new Duration(length);\n            Period test = dur.toPeriod();\n            try{ assertEquals(0, test.getYears());                }catch(Throwable __SHOULD_BE_IGNORED){}  // (4 + (3 * 7) + (2 * 30) + 365) == 450\n            try{ assertEquals(0, test.getMonths());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(0, test.getWeeks());                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(0, test.getDays());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((450 * 24) + 5, test.getHours());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(6, test.getMinutes());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(7, test.getSeconds());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(8, test.getMillis());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            DateTimeZone.setDefault(zone);\n        }\n    }",
            "    public void testToPeriod_fixedZone$catena_0() throws Throwable {\n        DateTimeZone zone = DateTimeZone.getDefault();\n        try {\n            DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));\n            long length =\n                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n                5L * DateTimeConstants.MILLIS_PER_HOUR +\n                6L * DateTimeConstants.MILLIS_PER_MINUTE +\n                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n            Duration dur = new Duration(length);\n            Period test = dur.toPeriod();\n            assertEquals(0, test.getYears());                     /***** ORIGINAL ASSERTION IS HERE *****/  // (4 + (3 * 7) + (2 * 30) + 365) == 450\n            try{ assertEquals(0, test.getMonths());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, test.getWeeks());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, test.getDays());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((450 * 24) + 5, test.getHours());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(6, test.getMinutes());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(7, test.getSeconds());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(8, test.getMillis());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            DateTimeZone.setDefault(zone);\n        }\n    }",
            "    public void testToPeriod_fixedZone$catena_1() throws Throwable {\n        DateTimeZone zone = DateTimeZone.getDefault();\n        try {\n            DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));\n            long length =\n                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n                5L * DateTimeConstants.MILLIS_PER_HOUR +\n                6L * DateTimeConstants.MILLIS_PER_MINUTE +\n                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n            Duration dur = new Duration(length);\n            Period test = dur.toPeriod();\n            try{ assertEquals(0, test.getYears());                }catch(Throwable __SHOULD_BE_IGNORED){}  // (4 + (3 * 7) + (2 * 30) + 365) == 450\n            assertEquals(0, test.getMonths());                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(0, test.getWeeks());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, test.getDays());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((450 * 24) + 5, test.getHours());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(6, test.getMinutes());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(7, test.getSeconds());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(8, test.getMillis());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            DateTimeZone.setDefault(zone);\n        }\n    }",
            "    public void testToPeriod_fixedZone$catena_5() throws Throwable {\n        DateTimeZone zone = DateTimeZone.getDefault();\n        try {\n            DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));\n            long length =\n                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n                5L * DateTimeConstants.MILLIS_PER_HOUR +\n                6L * DateTimeConstants.MILLIS_PER_MINUTE +\n                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n            Duration dur = new Duration(length);\n            Period test = dur.toPeriod();\n            try{ assertEquals(0, test.getYears());                }catch(Throwable __SHOULD_BE_IGNORED){}  // (4 + (3 * 7) + (2 * 30) + 365) == 450\n            try{ assertEquals(0, test.getMonths());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, test.getWeeks());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, test.getDays());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((450 * 24) + 5, test.getHours());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(6, test.getMinutes());                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(7, test.getSeconds());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(8, test.getMillis());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            DateTimeZone.setDefault(zone);\n        }\n    }",
            "    public void testToPeriod_fixedZone$catena_6() throws Throwable {\n        DateTimeZone zone = DateTimeZone.getDefault();\n        try {\n            DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));\n            long length =\n                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n                5L * DateTimeConstants.MILLIS_PER_HOUR +\n                6L * DateTimeConstants.MILLIS_PER_MINUTE +\n                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n            Duration dur = new Duration(length);\n            Period test = dur.toPeriod();\n            try{ assertEquals(0, test.getYears());                }catch(Throwable __SHOULD_BE_IGNORED){}  // (4 + (3 * 7) + (2 * 30) + 365) == 450\n            try{ assertEquals(0, test.getMonths());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, test.getWeeks());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, test.getDays());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((450 * 24) + 5, test.getHours());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(6, test.getMinutes());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(7, test.getSeconds());                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(8, test.getMillis());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            DateTimeZone.setDefault(zone);\n        }\n    }",
            "    public void testToPeriod_fixedZone$catena_7() throws Throwable {\n        DateTimeZone zone = DateTimeZone.getDefault();\n        try {\n            DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));\n            long length =\n                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n                5L * DateTimeConstants.MILLIS_PER_HOUR +\n                6L * DateTimeConstants.MILLIS_PER_MINUTE +\n                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n            Duration dur = new Duration(length);\n            Period test = dur.toPeriod();\n            try{ assertEquals(0, test.getYears());                }catch(Throwable __SHOULD_BE_IGNORED){}  // (4 + (3 * 7) + (2 * 30) + 365) == 450\n            try{ assertEquals(0, test.getMonths());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, test.getWeeks());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, test.getDays());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((450 * 24) + 5, test.getHours());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(6, test.getMinutes());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(7, test.getSeconds());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(8, test.getMillis());                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n        } finally {\n            DateTimeZone.setDefault(zone);\n        }\n    }"
        ]
    },
    "org.joda.time.TestPeriod_Constructors::testConstructor_long_fixedZone": {
        "begin_line_no": 174,
        "end_line_no": 197,
        "file_path": "src/test/java/org/joda/time/TestPeriod_Constructors.java",
        "to": [
            "    public void testConstructor_long_fixedZone$catena_5() throws Throwable {\n        DateTimeZone zone = DateTimeZone.getDefault();\n        try {\n            DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));\n            long length =\n                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n                5L * DateTimeConstants.MILLIS_PER_HOUR +\n                6L * DateTimeConstants.MILLIS_PER_MINUTE +\n                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n            Period test = new Period(length);\n            try{ assertEquals(PeriodType.standard(), test.getPeriodType());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            // only time fields are precise in AllType\n            try{ assertEquals(0, test.getYears());                }catch(Throwable __SHOULD_BE_IGNORED){}  // (4 + (3 * 7) + (2 * 30) + 365) == 450\n            try{ assertEquals(0, test.getMonths());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, test.getWeeks());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, test.getDays());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals((450 * 24) + 5, test.getHours());                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(6, test.getMinutes());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(7, test.getSeconds());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(8, test.getMillis());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            DateTimeZone.setDefault(zone);\n        }\n    }",
            "    public void testConstructor_long_fixedZone$catena_4() throws Throwable {\n        DateTimeZone zone = DateTimeZone.getDefault();\n        try {\n            DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));\n            long length =\n                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n                5L * DateTimeConstants.MILLIS_PER_HOUR +\n                6L * DateTimeConstants.MILLIS_PER_MINUTE +\n                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n            Period test = new Period(length);\n            try{ assertEquals(PeriodType.standard(), test.getPeriodType());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            // only time fields are precise in AllType\n            try{ assertEquals(0, test.getYears());                }catch(Throwable __SHOULD_BE_IGNORED){}  // (4 + (3 * 7) + (2 * 30) + 365) == 450\n            try{ assertEquals(0, test.getMonths());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, test.getWeeks());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(0, test.getDays());                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals((450 * 24) + 5, test.getHours());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(6, test.getMinutes());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(7, test.getSeconds());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(8, test.getMillis());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            DateTimeZone.setDefault(zone);\n        }\n    }",
            "    public void testConstructor_long_fixedZone$catena_3() throws Throwable {\n        DateTimeZone zone = DateTimeZone.getDefault();\n        try {\n            DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));\n            long length =\n                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n                5L * DateTimeConstants.MILLIS_PER_HOUR +\n                6L * DateTimeConstants.MILLIS_PER_MINUTE +\n                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n            Period test = new Period(length);\n            try{ assertEquals(PeriodType.standard(), test.getPeriodType());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            // only time fields are precise in AllType\n            try{ assertEquals(0, test.getYears());                }catch(Throwable __SHOULD_BE_IGNORED){}  // (4 + (3 * 7) + (2 * 30) + 365) == 450\n            try{ assertEquals(0, test.getMonths());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(0, test.getWeeks());                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(0, test.getDays());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((450 * 24) + 5, test.getHours());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(6, test.getMinutes());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(7, test.getSeconds());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(8, test.getMillis());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            DateTimeZone.setDefault(zone);\n        }\n    }",
            "    public void testConstructor_long_fixedZone$catena_0() throws Throwable {\n        DateTimeZone zone = DateTimeZone.getDefault();\n        try {\n            DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));\n            long length =\n                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n                5L * DateTimeConstants.MILLIS_PER_HOUR +\n                6L * DateTimeConstants.MILLIS_PER_MINUTE +\n                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n            Period test = new Period(length);\n            assertEquals(PeriodType.standard(), test.getPeriodType());                                      /***** ORIGINAL ASSERTION IS HERE *****/\n            // only time fields are precise in AllType\n            try{ assertEquals(0, test.getYears());                }catch(Throwable __SHOULD_BE_IGNORED){}  // (4 + (3 * 7) + (2 * 30) + 365) == 450\n            try{ assertEquals(0, test.getMonths());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, test.getWeeks());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, test.getDays());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((450 * 24) + 5, test.getHours());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(6, test.getMinutes());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(7, test.getSeconds());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(8, test.getMillis());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            DateTimeZone.setDefault(zone);\n        }\n    }",
            "    public void testConstructor_long_fixedZone$catena_1() throws Throwable {\n        DateTimeZone zone = DateTimeZone.getDefault();\n        try {\n            DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));\n            long length =\n                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n                5L * DateTimeConstants.MILLIS_PER_HOUR +\n                6L * DateTimeConstants.MILLIS_PER_MINUTE +\n                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n            Period test = new Period(length);\n            try{ assertEquals(PeriodType.standard(), test.getPeriodType());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            // only time fields are precise in AllType\n            assertEquals(0, test.getYears());                     /***** ORIGINAL ASSERTION IS HERE *****/  // (4 + (3 * 7) + (2 * 30) + 365) == 450\n            try{ assertEquals(0, test.getMonths());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, test.getWeeks());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, test.getDays());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((450 * 24) + 5, test.getHours());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(6, test.getMinutes());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(7, test.getSeconds());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(8, test.getMillis());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            DateTimeZone.setDefault(zone);\n        }\n    }",
            "    public void testConstructor_long_fixedZone$catena_2() throws Throwable {\n        DateTimeZone zone = DateTimeZone.getDefault();\n        try {\n            DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));\n            long length =\n                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n                5L * DateTimeConstants.MILLIS_PER_HOUR +\n                6L * DateTimeConstants.MILLIS_PER_MINUTE +\n                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n            Period test = new Period(length);\n            try{ assertEquals(PeriodType.standard(), test.getPeriodType());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            // only time fields are precise in AllType\n            try{ assertEquals(0, test.getYears());                }catch(Throwable __SHOULD_BE_IGNORED){}  // (4 + (3 * 7) + (2 * 30) + 365) == 450\n            assertEquals(0, test.getMonths());                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(0, test.getWeeks());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, test.getDays());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((450 * 24) + 5, test.getHours());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(6, test.getMinutes());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(7, test.getSeconds());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(8, test.getMillis());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            DateTimeZone.setDefault(zone);\n        }\n    }",
            "    public void testConstructor_long_fixedZone$catena_6() throws Throwable {\n        DateTimeZone zone = DateTimeZone.getDefault();\n        try {\n            DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));\n            long length =\n                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n                5L * DateTimeConstants.MILLIS_PER_HOUR +\n                6L * DateTimeConstants.MILLIS_PER_MINUTE +\n                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n            Period test = new Period(length);\n            try{ assertEquals(PeriodType.standard(), test.getPeriodType());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            // only time fields are precise in AllType\n            try{ assertEquals(0, test.getYears());                }catch(Throwable __SHOULD_BE_IGNORED){}  // (4 + (3 * 7) + (2 * 30) + 365) == 450\n            try{ assertEquals(0, test.getMonths());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, test.getWeeks());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, test.getDays());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((450 * 24) + 5, test.getHours());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(6, test.getMinutes());                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(7, test.getSeconds());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(8, test.getMillis());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            DateTimeZone.setDefault(zone);\n        }\n    }",
            "    public void testConstructor_long_fixedZone$catena_7() throws Throwable {\n        DateTimeZone zone = DateTimeZone.getDefault();\n        try {\n            DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));\n            long length =\n                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n                5L * DateTimeConstants.MILLIS_PER_HOUR +\n                6L * DateTimeConstants.MILLIS_PER_MINUTE +\n                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n            Period test = new Period(length);\n            try{ assertEquals(PeriodType.standard(), test.getPeriodType());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            // only time fields are precise in AllType\n            try{ assertEquals(0, test.getYears());                }catch(Throwable __SHOULD_BE_IGNORED){}  // (4 + (3 * 7) + (2 * 30) + 365) == 450\n            try{ assertEquals(0, test.getMonths());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, test.getWeeks());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, test.getDays());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((450 * 24) + 5, test.getHours());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(6, test.getMinutes());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(7, test.getSeconds());                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(8, test.getMillis());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            DateTimeZone.setDefault(zone);\n        }\n    }",
            "    public void testConstructor_long_fixedZone$catena_8() throws Throwable {\n        DateTimeZone zone = DateTimeZone.getDefault();\n        try {\n            DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));\n            long length =\n                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n                5L * DateTimeConstants.MILLIS_PER_HOUR +\n                6L * DateTimeConstants.MILLIS_PER_MINUTE +\n                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n            Period test = new Period(length);\n            try{ assertEquals(PeriodType.standard(), test.getPeriodType());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            // only time fields are precise in AllType\n            try{ assertEquals(0, test.getYears());                }catch(Throwable __SHOULD_BE_IGNORED){}  // (4 + (3 * 7) + (2 * 30) + 365) == 450\n            try{ assertEquals(0, test.getMonths());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, test.getWeeks());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(0, test.getDays());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals((450 * 24) + 5, test.getHours());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(6, test.getMinutes());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(7, test.getSeconds());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(8, test.getMillis());                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n        } finally {\n            DateTimeZone.setDefault(zone);\n        }\n    }"
        ]
    }
}