{
    "org.joda.time.TestPartial_Constructors::testConstructorEx7_TypeArray_intArray": {
        "begin_line_no": 260,
        "end_line_no": 315,
        "file_path": "src/test/java/org/joda/time/TestPartial_Constructors.java",
        "to": [
            "    public void testConstructorEx7_TypeArray_intArray$catena_4() throws Throwable {\n        int[] values = new int[] {1, 1, 1};\n        DateTimeFieldType[] types = new DateTimeFieldType[] {\n            DateTimeFieldType.dayOfMonth(), DateTimeFieldType.year(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.era(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            fail();                                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.era() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.dayOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.yearOfEra(), DateTimeFieldType.year(), DateTimeFieldType.dayOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
            "    public void testConstructorEx7_TypeArray_intArray$catena_6() throws Throwable {\n        int[] values = new int[] {1, 1, 1};\n        DateTimeFieldType[] types = new DateTimeFieldType[] {\n            DateTimeFieldType.dayOfMonth(), DateTimeFieldType.year(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.era(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.era() };\n        try {\n            new Partial(types, values);\n            fail();                                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.dayOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.yearOfEra(), DateTimeFieldType.year(), DateTimeFieldType.dayOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }"
        ]
    }
}