{
    "org.joda.time.TestMonths::testFactory_monthsBetween_RPartial_MonthDay": {
        "begin_line_no": 130,
        "end_line_no": 143,
        "file_path": "src/test/java/org/joda/time/TestMonths.java",
        "to": [
            "    public void testFactory_monthsBetween_RPartial_MonthDay$catena_1() {\n        MonthDay start = new MonthDay(2, 1);\n        MonthDay end1 = new MonthDay(2, 28);\n        MonthDay end2 = new MonthDay(2, 29);\n        MonthDay end3 = new MonthDay(3, 1);\n        \n        try{ assertEquals(0, Months.monthsBetween(start, end1).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(0, Months.monthsBetween(start, end2).getMonths());                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(1, Months.monthsBetween(start, end3).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(0, Months.monthsBetween(end1, start).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, Months.monthsBetween(end2, start).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, Months.monthsBetween(end3, start).getMonths());                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testFactory_monthsBetween_RPartial_MonthDay$catena_4() {\n        MonthDay start = new MonthDay(2, 1);\n        MonthDay end1 = new MonthDay(2, 28);\n        MonthDay end2 = new MonthDay(2, 29);\n        MonthDay end3 = new MonthDay(3, 1);\n        \n        try{ assertEquals(0, Months.monthsBetween(start, end1).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, Months.monthsBetween(start, end2).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, Months.monthsBetween(start, end3).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(0, Months.monthsBetween(end1, start).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(0, Months.monthsBetween(end2, start).getMonths());                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(-1, Months.monthsBetween(end3, start).getMonths());                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    },
    "org.joda.time.TestDays::testFactory_daysBetween_RPartial_MonthDay": {
        "begin_line_no": 123,
        "end_line_no": 138,
        "file_path": "src/test/java/org/joda/time/TestDays.java",
        "to": [
            "    public void testFactory_daysBetween_RPartial_MonthDay$catena_3() {\n        MonthDay start1 = new MonthDay(2, 1);\n        MonthDay start2 = new MonthDay(2, 28);\n        MonthDay end1 = new MonthDay(2, 28);\n        MonthDay end2 = new MonthDay(2, 29);\n        \n        try{ assertEquals(27, Days.daysBetween(start1, end1).getDays());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(28, Days.daysBetween(start1, end2).getDays());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, Days.daysBetween(start2, end1).getDays());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(1, Days.daysBetween(start2, end2).getDays());                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        try{ assertEquals(-27, Days.daysBetween(end1, start1).getDays());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-28, Days.daysBetween(end2, start1).getDays());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, Days.daysBetween(end1, start2).getDays());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, Days.daysBetween(end2, start2).getDays());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testFactory_daysBetween_RPartial_MonthDay$catena_1() {\n        MonthDay start1 = new MonthDay(2, 1);\n        MonthDay start2 = new MonthDay(2, 28);\n        MonthDay end1 = new MonthDay(2, 28);\n        MonthDay end2 = new MonthDay(2, 29);\n        \n        try{ assertEquals(27, Days.daysBetween(start1, end1).getDays());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(28, Days.daysBetween(start1, end2).getDays());                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(0, Days.daysBetween(start2, end1).getDays());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, Days.daysBetween(start2, end2).getDays());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(-27, Days.daysBetween(end1, start1).getDays());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-28, Days.daysBetween(end2, start1).getDays());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, Days.daysBetween(end1, start2).getDays());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, Days.daysBetween(end2, start2).getDays());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testFactory_daysBetween_RPartial_MonthDay$catena_7() {\n        MonthDay start1 = new MonthDay(2, 1);\n        MonthDay start2 = new MonthDay(2, 28);\n        MonthDay end1 = new MonthDay(2, 28);\n        MonthDay end2 = new MonthDay(2, 29);\n        \n        try{ assertEquals(27, Days.daysBetween(start1, end1).getDays());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(28, Days.daysBetween(start1, end2).getDays());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, Days.daysBetween(start2, end1).getDays());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, Days.daysBetween(start2, end2).getDays());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(-27, Days.daysBetween(end1, start1).getDays());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-28, Days.daysBetween(end2, start1).getDays());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, Days.daysBetween(end1, start2).getDays());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(-1, Days.daysBetween(end2, start2).getDays());                                         /***** ORIGINAL ASSERTION IS HERE *****/\n    }",
            "    public void testFactory_daysBetween_RPartial_MonthDay$catena_5() {\n        MonthDay start1 = new MonthDay(2, 1);\n        MonthDay start2 = new MonthDay(2, 28);\n        MonthDay end1 = new MonthDay(2, 28);\n        MonthDay end2 = new MonthDay(2, 29);\n        \n        try{ assertEquals(27, Days.daysBetween(start1, end1).getDays());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(28, Days.daysBetween(start1, end2).getDays());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, Days.daysBetween(start2, end1).getDays());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, Days.daysBetween(start2, end2).getDays());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(-27, Days.daysBetween(end1, start1).getDays());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(-28, Days.daysBetween(end2, start1).getDays());                                        /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(0, Days.daysBetween(end1, start2).getDays());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, Days.daysBetween(end2, start2).getDays());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    }
}