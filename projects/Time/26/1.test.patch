{
    "org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_NewYork_winter": {
        "begin_line_no": 1125,
        "end_line_no": 1130,
        "file_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "to": [
            "    public void testWithMillisOfSecondInDstChange_NewYork_winter$catena_1() {\n        DateTime dateTime = new DateTime(\"2007-11-04T01:30:00.123-05:00\", ZONE_NEW_YORK);\n        try{ assertEquals(\"2007-11-04T01:30:00.123-05:00\", dateTime.toString());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        DateTime test = dateTime.withMillisOfSecond(0);\n        assertEquals(\"2007-11-04T01:30:00.000-05:00\", test.toString());                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
        ]
    },
    "org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW": {
        "begin_line_no": 1172,
        "end_line_no": 1189,
        "file_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "to": [
            "    public void testBug2182444_ausNSW$catena_7() {\n        Chronology chronAusNSW = GregorianChronology.getInstance(DateTimeZone.forID(\"Australia/NSW\"));\n        Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);\n        DateTime australiaNSWStandardInUTC = new DateTime(2008, 4, 5, 16, 0, 0, 0, chronUTC);\n        DateTime australiaNSWDaylightInUTC = new DateTime(2008, 4, 5, 15, 0, 0, 0, chronUTC);\n        try{ assertTrue(\"Should be standard time\", chronAusNSW.getZone().isStandardOffset(australiaNSWStandardInUTC.getMillis()));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(\"Should be daylight time\", chronAusNSW.getZone().isStandardOffset(australiaNSWDaylightInUTC.getMillis()));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        DateTime australiaNSWStandardInAustraliaNSW = australiaNSWStandardInUTC.toDateTime(chronAusNSW);\n        DateTime australiaNSWDaylightInAusraliaNSW = australiaNSWDaylightInUTC.toDateTime(chronAusNSW);\n        try{ assertEquals(2, australiaNSWStandardInAustraliaNSW.getHourOfDay());                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(australiaNSWStandardInAustraliaNSW.getHourOfDay(), australiaNSWDaylightInAusraliaNSW.getHourOfDay());                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(australiaNSWStandardInAustraliaNSW.getMillis() != australiaNSWDaylightInAusraliaNSW.getMillis());                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(australiaNSWStandardInAustraliaNSW, australiaNSWStandardInAustraliaNSW.withHourOfDay(2));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(australiaNSWStandardInAustraliaNSW.getMillis() + 3, australiaNSWStandardInAustraliaNSW.withMillisOfSecond(3).getMillis());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(australiaNSWDaylightInAusraliaNSW, australiaNSWDaylightInAusraliaNSW.withHourOfDay(2));                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(australiaNSWDaylightInAusraliaNSW.getMillis() + 3, australiaNSWDaylightInAusraliaNSW.withMillisOfSecond(3).getMillis());      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testBug2182444_ausNSW$catena_8() {\n        Chronology chronAusNSW = GregorianChronology.getInstance(DateTimeZone.forID(\"Australia/NSW\"));\n        Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);\n        DateTime australiaNSWStandardInUTC = new DateTime(2008, 4, 5, 16, 0, 0, 0, chronUTC);\n        DateTime australiaNSWDaylightInUTC = new DateTime(2008, 4, 5, 15, 0, 0, 0, chronUTC);\n        try{ assertTrue(\"Should be standard time\", chronAusNSW.getZone().isStandardOffset(australiaNSWStandardInUTC.getMillis()));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(\"Should be daylight time\", chronAusNSW.getZone().isStandardOffset(australiaNSWDaylightInUTC.getMillis()));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        DateTime australiaNSWStandardInAustraliaNSW = australiaNSWStandardInUTC.toDateTime(chronAusNSW);\n        DateTime australiaNSWDaylightInAusraliaNSW = australiaNSWDaylightInUTC.toDateTime(chronAusNSW);\n        try{ assertEquals(2, australiaNSWStandardInAustraliaNSW.getHourOfDay());                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(australiaNSWStandardInAustraliaNSW.getHourOfDay(), australiaNSWDaylightInAusraliaNSW.getHourOfDay());                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(australiaNSWStandardInAustraliaNSW.getMillis() != australiaNSWDaylightInAusraliaNSW.getMillis());                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(australiaNSWStandardInAustraliaNSW, australiaNSWStandardInAustraliaNSW.withHourOfDay(2));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(australiaNSWStandardInAustraliaNSW.getMillis() + 3, australiaNSWStandardInAustraliaNSW.withMillisOfSecond(3).getMillis());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(australiaNSWDaylightInAusraliaNSW, australiaNSWDaylightInAusraliaNSW.withHourOfDay(2));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(australiaNSWDaylightInAusraliaNSW.getMillis() + 3, australiaNSWDaylightInAusraliaNSW.withMillisOfSecond(3).getMillis());           /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
        ]
    },
    "org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_Paris_summer": {
        "begin_line_no": 1104,
        "end_line_no": 1109,
        "file_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "to": [
            "    public void testWithMillisOfSecondInDstChange_Paris_summer$catena_1() {\n        DateTime dateTime = new DateTime(\"2010-10-31T02:30:10.123+02:00\", ZONE_PARIS);\n        try{ assertEquals(\"2010-10-31T02:30:10.123+02:00\", dateTime.toString());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        DateTime test = dateTime.withMillisOfSecond(0);\n        assertEquals(\"2010-10-31T02:30:10.000+02:00\", test.toString());                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
        ]
    },
    "org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange": {
        "begin_line_no": 1090,
        "end_line_no": 1095,
        "file_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "to": [
            "    public void testWithMinuteOfHourInDstChange$catena_1() {\n        DateTime dateTime = new DateTime(\"2010-10-31T02:30:10.123+02:00\", ZONE_PARIS);\n        try{ assertEquals(\"2010-10-31T02:30:10.123+02:00\", dateTime.toString());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        DateTime test = dateTime.withMinuteOfHour(0);\n        assertEquals(\"2010-10-31T02:00:10.123+02:00\", test.toString());                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
        ]
    },
    "org.joda.time.TestDateTimeZoneCutover::testWithSecondOfMinuteInDstChange": {
        "begin_line_no": 1097,
        "end_line_no": 1102,
        "file_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "to": [
            "    public void testWithSecondOfMinuteInDstChange$catena_1() {\n        DateTime dateTime = new DateTime(\"2010-10-31T02:30:10.123+02:00\", ZONE_PARIS);\n        try{ assertEquals(\"2010-10-31T02:30:10.123+02:00\", dateTime.toString());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        DateTime test = dateTime.withSecondOfMinute(0);\n        assertEquals(\"2010-10-31T02:30:00.123+02:00\", test.toString());                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
        ]
    },
    "org.joda.time.TestDateTimeZoneCutover::testWithHourOfDayInDstChange": {
        "begin_line_no": 1083,
        "end_line_no": 1088,
        "file_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "to": [
            "    public void testWithHourOfDayInDstChange$catena_1() {\n        DateTime dateTime = new DateTime(\"2010-10-31T02:30:10.123+02:00\", ZONE_PARIS);\n        try{ assertEquals(\"2010-10-31T02:30:10.123+02:00\", dateTime.toString());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        DateTime test = dateTime.withHourOfDay(2);\n        assertEquals(\"2010-10-31T02:30:10.123+02:00\", test.toString());                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
        ]
    },
    "org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange_mockZone": {
        "begin_line_no": 1063,
        "end_line_no": 1081,
        "file_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "to": [
            "    public void testWithMinuteOfHourInDstChange_mockZone$catena_3() {\n        DateTime cutover = new DateTime(2010, 10, 31, 1, 15, DateTimeZone.forOffsetHoursMinutes(0, 30));\n        try{ assertEquals(\"2010-10-31T01:15:00.000+00:30\", cutover.toString());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        DateTimeZone halfHourZone = new MockZone(cutover.getMillis(), 3600000, -1800);\n        DateTime pre = new DateTime(2010, 10, 31, 1, 0, halfHourZone);\n        try{ assertEquals(\"2010-10-31T01:00:00.000+01:00\", pre.toString());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        DateTime post = new DateTime(2010, 10, 31, 1, 59, halfHourZone);\n        try{ assertEquals(\"2010-10-31T01:59:00.000+00:30\", post.toString());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        DateTime testPre1 = pre.withMinuteOfHour(30);\n        assertEquals(\"2010-10-31T01:30:00.000+01:00\", testPre1.toString());               /***** ORIGINAL ASSERTION IS HERE *****/  // retain offset\n        DateTime testPre2 = pre.withMinuteOfHour(50);\n        try{ assertEquals(\"2010-10-31T01:50:00.000+00:30\", testPre2.toString());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        DateTime testPost1 = post.withMinuteOfHour(30);\n        try{ assertEquals(\"2010-10-31T01:30:00.000+00:30\", testPost1.toString());         }catch(Throwable __SHOULD_BE_IGNORED){}  // retain offset\n        DateTime testPost2 = post.withMinuteOfHour(10);\n        try{ assertEquals(\"2010-10-31T01:10:00.000+01:00\", testPost2.toString());                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    },
    "org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral": {
        "begin_line_no": 1153,
        "end_line_no": 1170,
        "file_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "to": [
            "    public void testBug2182444_usCentral$catena_5() {\n        Chronology chronUSCentral = GregorianChronology.getInstance(DateTimeZone.forID(\"US/Central\"));\n        Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);\n        DateTime usCentralStandardInUTC = new DateTime(2008, 11, 2, 7, 0, 0, 0, chronUTC);\n        DateTime usCentralDaylightInUTC = new DateTime(2008, 11, 2, 6, 0, 0, 0, chronUTC);\n        try{ assertTrue(\"Should be standard time\", chronUSCentral.getZone().isStandardOffset(usCentralStandardInUTC.getMillis()));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(\"Should be daylight time\", chronUSCentral.getZone().isStandardOffset(usCentralDaylightInUTC.getMillis()));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        DateTime usCentralStandardInUSCentral = usCentralStandardInUTC.toDateTime(chronUSCentral);\n        DateTime usCentralDaylightInUSCentral = usCentralDaylightInUTC.toDateTime(chronUSCentral);\n        try{ assertEquals(1, usCentralStandardInUSCentral.getHourOfDay());                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(usCentralStandardInUSCentral.getHourOfDay(), usCentralDaylightInUSCentral.getHourOfDay());                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(usCentralStandardInUSCentral.getMillis() != usCentralDaylightInUSCentral.getMillis());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(usCentralStandardInUSCentral, usCentralStandardInUSCentral.withHourOfDay(1));                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(usCentralStandardInUSCentral.getMillis() + 3, usCentralStandardInUSCentral.withMillisOfSecond(3).getMillis());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(usCentralDaylightInUSCentral, usCentralDaylightInUSCentral.withHourOfDay(1));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(usCentralDaylightInUSCentral.getMillis() + 3, usCentralDaylightInUSCentral.withMillisOfSecond(3).getMillis());    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testBug2182444_usCentral$catena_6() {\n        Chronology chronUSCentral = GregorianChronology.getInstance(DateTimeZone.forID(\"US/Central\"));\n        Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);\n        DateTime usCentralStandardInUTC = new DateTime(2008, 11, 2, 7, 0, 0, 0, chronUTC);\n        DateTime usCentralDaylightInUTC = new DateTime(2008, 11, 2, 6, 0, 0, 0, chronUTC);\n        try{ assertTrue(\"Should be standard time\", chronUSCentral.getZone().isStandardOffset(usCentralStandardInUTC.getMillis()));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(\"Should be daylight time\", chronUSCentral.getZone().isStandardOffset(usCentralDaylightInUTC.getMillis()));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        DateTime usCentralStandardInUSCentral = usCentralStandardInUTC.toDateTime(chronUSCentral);\n        DateTime usCentralDaylightInUSCentral = usCentralDaylightInUTC.toDateTime(chronUSCentral);\n        try{ assertEquals(1, usCentralStandardInUSCentral.getHourOfDay());                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(usCentralStandardInUSCentral.getHourOfDay(), usCentralDaylightInUSCentral.getHourOfDay());                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(usCentralStandardInUSCentral.getMillis() != usCentralDaylightInUSCentral.getMillis());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(usCentralStandardInUSCentral, usCentralStandardInUSCentral.withHourOfDay(1));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(usCentralStandardInUSCentral.getMillis() + 3, usCentralStandardInUSCentral.withMillisOfSecond(3).getMillis());         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(usCentralDaylightInUSCentral, usCentralDaylightInUSCentral.withHourOfDay(1));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(usCentralDaylightInUSCentral.getMillis() + 3, usCentralDaylightInUSCentral.withMillisOfSecond(3).getMillis());    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    }
}