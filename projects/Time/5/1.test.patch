{
    "org.joda.time.TestPeriod_Basics::testNormalizedStandard_periodType_months2": {
        "begin_line_no": 1527,
        "end_line_no": 1532,
        "file_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "to": [
            "    public void testNormalizedStandard_periodType_months2$catena_1() {\n        Period test = new Period(-2, 15, 0, 0, 0, 0, 0, 0);\n        Period result = test.normalizedStandard(PeriodType.months());\n        try{ assertEquals(new Period(-2, 15, 0, 0, 0, 0, 0, 0), test);                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(new Period(0, -9, 0, 0, 0, 0, 0, 0, PeriodType.months()), result);                     /***** ORIGINAL ASSERTION IS HERE *****/\n    }",
            "    public void testNormalizedStandard_periodType_months2$catena_0() {\n        Period test = new Period(-2, 15, 0, 0, 0, 0, 0, 0);\n        Period result = test.normalizedStandard(PeriodType.months());\n        assertEquals(new Period(-2, 15, 0, 0, 0, 0, 0, 0), test);                                           /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(new Period(0, -9, 0, 0, 0, 0, 0, 0, PeriodType.months()), result);                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    },
    "org.joda.time.TestPeriod_Basics::testNormalizedStandard_periodType_monthsWeeks": {
        "begin_line_no": 1551,
        "end_line_no": 1560,
        "file_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "to": [
            "    public void testNormalizedStandard_periodType_monthsWeeks$catena_0() {\n        PeriodType type = PeriodType.forFields(new DurationFieldType[]{\n                        DurationFieldType.months(),\n                        DurationFieldType.weeks(),\n                        DurationFieldType.days()});\n        Period test = new Period(2, 4, 6, 0, 0, 0, 0, 0);\n        Period result = test.normalizedStandard(type);\n        assertEquals(new Period(2, 4, 6, 0, 0, 0, 0, 0), test);                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(new Period(0, 28, 6, 0, 0, 0, 0, 0, type), result);                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testNormalizedStandard_periodType_monthsWeeks$catena_1() {\n        PeriodType type = PeriodType.forFields(new DurationFieldType[]{\n                        DurationFieldType.months(),\n                        DurationFieldType.weeks(),\n                        DurationFieldType.days()});\n        Period test = new Period(2, 4, 6, 0, 0, 0, 0, 0);\n        Period result = test.normalizedStandard(type);\n        try{ assertEquals(new Period(2, 4, 6, 0, 0, 0, 0, 0), test);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(new Period(0, 28, 6, 0, 0, 0, 0, 0, type), result);                                    /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
        ]
    },
    "org.joda.time.TestPeriod_Basics::testNormalizedStandard_periodType_months1": {
        "begin_line_no": 1520,
        "end_line_no": 1525,
        "file_path": "src/test/java/org/joda/time/TestPeriod_Basics.java",
        "to": [
            "    public void testNormalizedStandard_periodType_months1$catena_0() {\n        Period test = new Period(1, 15, 0, 0, 0, 0, 0, 0);\n        Period result = test.normalizedStandard(PeriodType.months());\n        assertEquals(new Period(1, 15, 0, 0, 0, 0, 0, 0), test);                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(new Period(0, 27, 0, 0, 0, 0, 0, 0, PeriodType.months()), result);                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testNormalizedStandard_periodType_months1$catena_1() {\n        Period test = new Period(1, 15, 0, 0, 0, 0, 0, 0);\n        Period result = test.normalizedStandard(PeriodType.months());\n        try{ assertEquals(new Period(1, 15, 0, 0, 0, 0, 0, 0), test);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(new Period(0, 27, 0, 0, 0, 0, 0, 0, PeriodType.months()), result);                     /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
        ]
    }
}