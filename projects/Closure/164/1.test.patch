{
    "com.google.javascript.rhino.jstype.FunctionTypeTest::testSupAndInfOfReturnTypesWithNumOfParams": {
        "begin_line_no": 141,
        "end_line_no": 153,
        "file_path": "test/com/google/javascript/rhino/jstype/FunctionTypeTest.java",
        "to": [
            "  public void testSupAndInfOfReturnTypesWithNumOfParams$catena_1() {\n    FunctionType twoNumbers = new FunctionBuilder(registry)\n        .withParamsNode(registry.createParameters(NUMBER_TYPE, NUMBER_TYPE))\n        .withReturnType(BOOLEAN_TYPE).build();\n    FunctionType oneNumber = new FunctionBuilder(registry)\n        .withParamsNode(registry.createParameters(NUMBER_TYPE))\n        .withReturnType(BOOLEAN_TYPE).build();\n\n    try{ assertLeastSupertype(\n        \"function (number, number): boolean\", twoNumbers, oneNumber);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertGreatestSubtype(\n        \"function (number): boolean\", twoNumbers, oneNumber);                                               /***** ORIGINAL ASSERTION IS HERE *****/\n  }",
            "  public void testSupAndInfOfReturnTypesWithNumOfParams$catena_0() {\n    FunctionType twoNumbers = new FunctionBuilder(registry)\n        .withParamsNode(registry.createParameters(NUMBER_TYPE, NUMBER_TYPE))\n        .withReturnType(BOOLEAN_TYPE).build();\n    FunctionType oneNumber = new FunctionBuilder(registry)\n        .withParamsNode(registry.createParameters(NUMBER_TYPE))\n        .withReturnType(BOOLEAN_TYPE).build();\n\n    assertLeastSupertype(\n        \"function (number, number): boolean\", twoNumbers, oneNumber);                                       /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertGreatestSubtype(\n        \"function (number): boolean\", twoNumbers, oneNumber);                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n  }"
        ]
    }
}