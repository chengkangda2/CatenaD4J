{
    "com.google.javascript.rhino.jstype.RecordTypeTest::testRecursiveRecord": {
        "begin_line_no": 46,
        "end_line_no": 63,
        "file_path": "test/com/google/javascript/rhino/jstype/RecordTypeTest.java",
        "to": [
            "  public void testRecursiveRecord$catena_2() {\n    ProxyObjectType loop = new ProxyObjectType(registry, NUMBER_TYPE);\n    JSType record = new RecordTypeBuilder(registry)\n        .addProperty(\"loop\", loop, null)\n        .addProperty(\"number\", NUMBER_TYPE, null)\n        .addProperty(\"string\", STRING_TYPE, null)\n        .build();\n    try{ assertEquals(\"{loop: number, number: number, string: string}\",\n        record.toString());                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    loop.setReferencedType(record);\n    try{ assertEquals(\"{loop: {...}, number: number, string: string}\",\n        record.toString());                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertEquals(\"{loop: ?, number: number, string: string}\",\n        record.toAnnotationString());                                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ Asserts.assertEquivalenceOperations(record, loop);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testRecursiveRecord$catena_0() {\n    ProxyObjectType loop = new ProxyObjectType(registry, NUMBER_TYPE);\n    JSType record = new RecordTypeBuilder(registry)\n        .addProperty(\"loop\", loop, null)\n        .addProperty(\"number\", NUMBER_TYPE, null)\n        .addProperty(\"string\", STRING_TYPE, null)\n        .build();\n    assertEquals(\"{loop: number, number: number, string: string}\",\n        record.toString());                                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n\n    loop.setReferencedType(record);\n    try{ assertEquals(\"{loop: {...}, number: number, string: string}\",\n        record.toString());                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"{loop: ?, number: number, string: string}\",\n        record.toAnnotationString());                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ Asserts.assertEquivalenceOperations(record, loop);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testRecursiveRecord$catena_1() {\n    ProxyObjectType loop = new ProxyObjectType(registry, NUMBER_TYPE);\n    JSType record = new RecordTypeBuilder(registry)\n        .addProperty(\"loop\", loop, null)\n        .addProperty(\"number\", NUMBER_TYPE, null)\n        .addProperty(\"string\", STRING_TYPE, null)\n        .build();\n    try{ assertEquals(\"{loop: number, number: number, string: string}\",\n        record.toString());                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    loop.setReferencedType(record);\n    assertEquals(\"{loop: {...}, number: number, string: string}\",\n        record.toString());                                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertEquals(\"{loop: ?, number: number, string: string}\",\n        record.toAnnotationString());                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ Asserts.assertEquivalenceOperations(record, loop);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testRecursiveRecord$catena_3() {\n    ProxyObjectType loop = new ProxyObjectType(registry, NUMBER_TYPE);\n    JSType record = new RecordTypeBuilder(registry)\n        .addProperty(\"loop\", loop, null)\n        .addProperty(\"number\", NUMBER_TYPE, null)\n        .addProperty(\"string\", STRING_TYPE, null)\n        .build();\n    try{ assertEquals(\"{loop: number, number: number, string: string}\",\n        record.toString());                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    loop.setReferencedType(record);\n    try{ assertEquals(\"{loop: {...}, number: number, string: string}\",\n        record.toString());                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"{loop: ?, number: number, string: string}\",\n        record.toAnnotationString());                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    Asserts.assertEquivalenceOperations(record, loop);                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
        ]
    },
    "com.google.javascript.rhino.jstype.RecordTypeTest::testLongToString": {
        "begin_line_no": 65,
        "end_line_no": 80,
        "file_path": "test/com/google/javascript/rhino/jstype/RecordTypeTest.java",
        "to": [
            "  public void testLongToString$catena_0() {\n    JSType record = new RecordTypeBuilder(registry)\n        .addProperty(\"a1\", NUMBER_TYPE, null)\n        .addProperty(\"a2\", NUMBER_TYPE, null)\n        .addProperty(\"a3\", NUMBER_TYPE, null)\n        .addProperty(\"a4\", NUMBER_TYPE, null)\n        .addProperty(\"a5\", NUMBER_TYPE, null)\n        .addProperty(\"a6\", NUMBER_TYPE, null)\n        .build();\n    assertEquals(\"{a1: number, a2: number, a3: number, a4: number, ...}\",\n        record.toString());                                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertEquals(\n        \"{a1: number, a2: number, a3: number, a4: number,\" +\n        \" a5: number, a6: number}\",\n        record.toAnnotationString());                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n  }"
        ]
    }
}