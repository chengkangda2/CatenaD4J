{
    "com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldGetElem": {
        "begin_line_no": 764,
        "end_line_no": 778,
        "file_path": "test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java",
        "to": [
            "  public void testFoldGetElem$catena_5() {\n    try{ fold(\"x = [,10][0]\", \"x = void 0\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][0]\", \"x = 10\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][1]\", \"x = 20\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][0.5]\", \"\",\n        PeepholeFoldConstants.INVALID_GETELEM_INDEX_ERROR);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][-1]\",    \"\",\n        PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = [10, 20][2]\",     \"\",\n        PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ foldSame(\"x = [foo(), 0][1]\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [0, foo()][1]\", \"x = foo()\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = [0, foo()][0]\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testFoldGetElem$catena_0() {\n    fold(\"x = [,10][0]\", \"x = void 0\");                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = [10, 20][0]\", \"x = 10\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][1]\", \"x = 20\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][0.5]\", \"\",\n        PeepholeFoldConstants.INVALID_GETELEM_INDEX_ERROR);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][-1]\",    \"\",\n        PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][2]\",     \"\",\n        PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ foldSame(\"x = [foo(), 0][1]\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [0, foo()][1]\", \"x = foo()\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = [0, foo()][0]\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testFoldGetElem$catena_7() {\n    try{ fold(\"x = [,10][0]\", \"x = void 0\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][0]\", \"x = 10\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][1]\", \"x = 20\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][0.5]\", \"\",\n        PeepholeFoldConstants.INVALID_GETELEM_INDEX_ERROR);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][-1]\",    \"\",\n        PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][2]\",     \"\",\n        PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ foldSame(\"x = [foo(), 0][1]\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = [0, foo()][1]\", \"x = foo()\");                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ foldSame(\"x = [0, foo()][0]\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testFoldGetElem$catena_6() {\n    try{ fold(\"x = [,10][0]\", \"x = void 0\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][0]\", \"x = 10\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][1]\", \"x = 20\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][0.5]\", \"\",\n        PeepholeFoldConstants.INVALID_GETELEM_INDEX_ERROR);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][-1]\",    \"\",\n        PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][2]\",     \"\",\n        PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    foldSame(\"x = [foo(), 0][1]\");                                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = [0, foo()][1]\", \"x = foo()\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = [0, foo()][0]\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testFoldGetElem$catena_8() {\n    try{ fold(\"x = [,10][0]\", \"x = void 0\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][0]\", \"x = 10\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][1]\", \"x = 20\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][0.5]\", \"\",\n        PeepholeFoldConstants.INVALID_GETELEM_INDEX_ERROR);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][-1]\",    \"\",\n        PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][2]\",     \"\",\n        PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ foldSame(\"x = [foo(), 0][1]\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [0, foo()][1]\", \"x = foo()\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    foldSame(\"x = [0, foo()][0]\");                                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n  }",
            "  public void testFoldGetElem$catena_1() {\n    try{ fold(\"x = [,10][0]\", \"x = void 0\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = [10, 20][0]\", \"x = 10\");                                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = [10, 20][1]\", \"x = 20\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][0.5]\", \"\",\n        PeepholeFoldConstants.INVALID_GETELEM_INDEX_ERROR);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][-1]\",    \"\",\n        PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][2]\",     \"\",\n        PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ foldSame(\"x = [foo(), 0][1]\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [0, foo()][1]\", \"x = foo()\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = [0, foo()][0]\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testFoldGetElem$catena_2() {\n    try{ fold(\"x = [,10][0]\", \"x = void 0\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][0]\", \"x = 10\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = [10, 20][1]\", \"x = 20\");                                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = [10, 20][0.5]\", \"\",\n        PeepholeFoldConstants.INVALID_GETELEM_INDEX_ERROR);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][-1]\",    \"\",\n        PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [10, 20][2]\",     \"\",\n        PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ foldSame(\"x = [foo(), 0][1]\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [0, foo()][1]\", \"x = foo()\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = [0, foo()][0]\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n  }"
        ]
    }
}