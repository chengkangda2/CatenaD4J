{
    "com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps": {
        "begin_line_no": 68,
        "end_line_no": 73,
        "file_path": "test/com/google/javascript/jscomp/ConvertToDottedPropertiesTest.java",
        "to": [
            "  public void testQuotedProps$catena_3() {\n    try{ testSame(\"({'':0})\");                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"({'1.0':0})\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"({'\\u1d17A':0})\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    testSame(\"({'a\\u0004b':0})\");                                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n  }",
            "  public void testQuotedProps$catena_0() {\n    testSame(\"({'':0})\");                                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testSame(\"({'1.0':0})\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"({'\\u1d17A':0})\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"({'a\\u0004b':0})\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testQuotedProps$catena_1() {\n    try{ testSame(\"({'':0})\");                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    testSame(\"({'1.0':0})\");                                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testSame(\"({'\\u1d17A':0})\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"({'a\\u0004b':0})\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testQuotedProps$catena_2() {\n    try{ testSame(\"({'':0})\");                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"({'1.0':0})\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    testSame(\"({'\\u1d17A':0})\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testSame(\"({'a\\u0004b':0})\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }"
        ]
    },
    "com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert": {
        "begin_line_no": 41,
        "end_line_no": 65,
        "file_path": "test/com/google/javascript/jscomp/ConvertToDottedPropertiesTest.java",
        "to": [
            "  public void testDoNotConvert$catena_15() {\n    try{ testSame(\"a[0]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['']\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[' ']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[',']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[';']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[':']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['.']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['0']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p ']\");                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p' + '']\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[P]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[$]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p()]\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['default']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Ignorable control characters are ok in Java identifiers, but not in JS.\n    testSame(\"a['A\\u0004']\");                                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n    // upper case lower half of o from phonetic extensions set.\n    // valid in Safari, not in Firefox, IE.\n    try{ test(\"a['\\u1d17A']\", \"a['\\u1d17A']\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Latin capital N with tilde - nice if we handled it, but for now let's\n    // only allow simple Latin (aka ASCII) to be converted.\n    try{ test(\"a['\\u00d1StuffAfter']\", \"a['\\u00d1StuffAfter']\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testDoNotConvert$catena_0() {\n    testSame(\"a[0]\");                                                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testSame(\"a['']\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[' ']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[',']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[';']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[':']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['.']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['0']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p ']\");                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p' + '']\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[P]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[$]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p()]\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['default']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Ignorable control characters are ok in Java identifiers, but not in JS.\n    try{ testSame(\"a['A\\u0004']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // upper case lower half of o from phonetic extensions set.\n    // valid in Safari, not in Firefox, IE.\n    try{ test(\"a['\\u1d17A']\", \"a['\\u1d17A']\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Latin capital N with tilde - nice if we handled it, but for now let's\n    // only allow simple Latin (aka ASCII) to be converted.\n    try{ test(\"a['\\u00d1StuffAfter']\", \"a['\\u00d1StuffAfter']\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testDoNotConvert$catena_1() {\n    try{ testSame(\"a[0]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    testSame(\"a['']\");                                                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testSame(\"a[' ']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[',']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[';']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[':']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['.']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['0']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p ']\");                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p' + '']\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[P]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[$]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p()]\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['default']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Ignorable control characters are ok in Java identifiers, but not in JS.\n    try{ testSame(\"a['A\\u0004']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // upper case lower half of o from phonetic extensions set.\n    // valid in Safari, not in Firefox, IE.\n    try{ test(\"a['\\u1d17A']\", \"a['\\u1d17A']\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Latin capital N with tilde - nice if we handled it, but for now let's\n    // only allow simple Latin (aka ASCII) to be converted.\n    try{ test(\"a['\\u00d1StuffAfter']\", \"a['\\u00d1StuffAfter']\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testDoNotConvert$catena_2() {\n    try{ testSame(\"a[0]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['']\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    testSame(\"a[' ']\");                                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testSame(\"a[',']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[';']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[':']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['.']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['0']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p ']\");                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p' + '']\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[P]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[$]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p()]\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['default']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Ignorable control characters are ok in Java identifiers, but not in JS.\n    try{ testSame(\"a['A\\u0004']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // upper case lower half of o from phonetic extensions set.\n    // valid in Safari, not in Firefox, IE.\n    try{ test(\"a['\\u1d17A']\", \"a['\\u1d17A']\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Latin capital N with tilde - nice if we handled it, but for now let's\n    // only allow simple Latin (aka ASCII) to be converted.\n    try{ test(\"a['\\u00d1StuffAfter']\", \"a['\\u00d1StuffAfter']\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testDoNotConvert$catena_3() {\n    try{ testSame(\"a[0]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['']\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[' ']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    testSame(\"a[',']\");                                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testSame(\"a[';']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[':']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['.']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['0']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p ']\");                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p' + '']\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[P]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[$]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p()]\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['default']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Ignorable control characters are ok in Java identifiers, but not in JS.\n    try{ testSame(\"a['A\\u0004']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // upper case lower half of o from phonetic extensions set.\n    // valid in Safari, not in Firefox, IE.\n    try{ test(\"a['\\u1d17A']\", \"a['\\u1d17A']\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Latin capital N with tilde - nice if we handled it, but for now let's\n    // only allow simple Latin (aka ASCII) to be converted.\n    try{ test(\"a['\\u00d1StuffAfter']\", \"a['\\u00d1StuffAfter']\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testDoNotConvert$catena_4() {\n    try{ testSame(\"a[0]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['']\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[' ']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[',']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    testSame(\"a[';']\");                                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testSame(\"a[':']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['.']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['0']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p ']\");                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p' + '']\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[P]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[$]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p()]\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['default']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Ignorable control characters are ok in Java identifiers, but not in JS.\n    try{ testSame(\"a['A\\u0004']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // upper case lower half of o from phonetic extensions set.\n    // valid in Safari, not in Firefox, IE.\n    try{ test(\"a['\\u1d17A']\", \"a['\\u1d17A']\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Latin capital N with tilde - nice if we handled it, but for now let's\n    // only allow simple Latin (aka ASCII) to be converted.\n    try{ test(\"a['\\u00d1StuffAfter']\", \"a['\\u00d1StuffAfter']\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testDoNotConvert$catena_5() {\n    try{ testSame(\"a[0]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['']\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[' ']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[',']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[';']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    testSame(\"a[':']\");                                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testSame(\"a['.']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['0']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p ']\");                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p' + '']\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[P]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[$]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p()]\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['default']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Ignorable control characters are ok in Java identifiers, but not in JS.\n    try{ testSame(\"a['A\\u0004']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // upper case lower half of o from phonetic extensions set.\n    // valid in Safari, not in Firefox, IE.\n    try{ test(\"a['\\u1d17A']\", \"a['\\u1d17A']\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Latin capital N with tilde - nice if we handled it, but for now let's\n    // only allow simple Latin (aka ASCII) to be converted.\n    try{ test(\"a['\\u00d1StuffAfter']\", \"a['\\u00d1StuffAfter']\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testDoNotConvert$catena_6() {\n    try{ testSame(\"a[0]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['']\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[' ']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[',']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[';']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[':']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    testSame(\"a['.']\");                                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testSame(\"a['0']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p ']\");                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p' + '']\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[P]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[$]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p()]\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['default']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Ignorable control characters are ok in Java identifiers, but not in JS.\n    try{ testSame(\"a['A\\u0004']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // upper case lower half of o from phonetic extensions set.\n    // valid in Safari, not in Firefox, IE.\n    try{ test(\"a['\\u1d17A']\", \"a['\\u1d17A']\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Latin capital N with tilde - nice if we handled it, but for now let's\n    // only allow simple Latin (aka ASCII) to be converted.\n    try{ test(\"a['\\u00d1StuffAfter']\", \"a['\\u00d1StuffAfter']\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testDoNotConvert$catena_7() {\n    try{ testSame(\"a[0]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['']\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[' ']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[',']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[';']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[':']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['.']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    testSame(\"a['0']\");                                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testSame(\"a['p ']\");                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p' + '']\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[P]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[$]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p()]\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['default']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Ignorable control characters are ok in Java identifiers, but not in JS.\n    try{ testSame(\"a['A\\u0004']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // upper case lower half of o from phonetic extensions set.\n    // valid in Safari, not in Firefox, IE.\n    try{ test(\"a['\\u1d17A']\", \"a['\\u1d17A']\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Latin capital N with tilde - nice if we handled it, but for now let's\n    // only allow simple Latin (aka ASCII) to be converted.\n    try{ test(\"a['\\u00d1StuffAfter']\", \"a['\\u00d1StuffAfter']\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testDoNotConvert$catena_8() {\n    try{ testSame(\"a[0]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['']\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[' ']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[',']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[';']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[':']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['.']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['0']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    testSame(\"a['p ']\");                                                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testSame(\"a['p' + '']\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[P]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[$]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p()]\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['default']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Ignorable control characters are ok in Java identifiers, but not in JS.\n    try{ testSame(\"a['A\\u0004']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // upper case lower half of o from phonetic extensions set.\n    // valid in Safari, not in Firefox, IE.\n    try{ test(\"a['\\u1d17A']\", \"a['\\u1d17A']\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Latin capital N with tilde - nice if we handled it, but for now let's\n    // only allow simple Latin (aka ASCII) to be converted.\n    try{ test(\"a['\\u00d1StuffAfter']\", \"a['\\u00d1StuffAfter']\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testDoNotConvert$catena_9() {\n    try{ testSame(\"a[0]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['']\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[' ']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[',']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[';']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[':']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['.']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['0']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p ']\");                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    testSame(\"a['p' + '']\");                                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testSame(\"a[p]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[P]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[$]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p()]\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['default']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Ignorable control characters are ok in Java identifiers, but not in JS.\n    try{ testSame(\"a['A\\u0004']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // upper case lower half of o from phonetic extensions set.\n    // valid in Safari, not in Firefox, IE.\n    try{ test(\"a['\\u1d17A']\", \"a['\\u1d17A']\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Latin capital N with tilde - nice if we handled it, but for now let's\n    // only allow simple Latin (aka ASCII) to be converted.\n    try{ test(\"a['\\u00d1StuffAfter']\", \"a['\\u00d1StuffAfter']\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testDoNotConvert$catena_10() {\n    try{ testSame(\"a[0]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['']\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[' ']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[',']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[';']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[':']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['.']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['0']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p ']\");                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p' + '']\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    testSame(\"a[p]\");                                                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testSame(\"a[P]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[$]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p()]\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['default']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Ignorable control characters are ok in Java identifiers, but not in JS.\n    try{ testSame(\"a['A\\u0004']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // upper case lower half of o from phonetic extensions set.\n    // valid in Safari, not in Firefox, IE.\n    try{ test(\"a['\\u1d17A']\", \"a['\\u1d17A']\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Latin capital N with tilde - nice if we handled it, but for now let's\n    // only allow simple Latin (aka ASCII) to be converted.\n    try{ test(\"a['\\u00d1StuffAfter']\", \"a['\\u00d1StuffAfter']\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testDoNotConvert$catena_11() {\n    try{ testSame(\"a[0]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['']\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[' ']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[',']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[';']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[':']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['.']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['0']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p ']\");                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p' + '']\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    testSame(\"a[P]\");                                                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testSame(\"a[$]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p()]\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['default']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Ignorable control characters are ok in Java identifiers, but not in JS.\n    try{ testSame(\"a['A\\u0004']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // upper case lower half of o from phonetic extensions set.\n    // valid in Safari, not in Firefox, IE.\n    try{ test(\"a['\\u1d17A']\", \"a['\\u1d17A']\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Latin capital N with tilde - nice if we handled it, but for now let's\n    // only allow simple Latin (aka ASCII) to be converted.\n    try{ test(\"a['\\u00d1StuffAfter']\", \"a['\\u00d1StuffAfter']\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testDoNotConvert$catena_12() {\n    try{ testSame(\"a[0]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['']\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[' ']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[',']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[';']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[':']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['.']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['0']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p ']\");                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p' + '']\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[P]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    testSame(\"a[$]\");                                                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testSame(\"a[p()]\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['default']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Ignorable control characters are ok in Java identifiers, but not in JS.\n    try{ testSame(\"a['A\\u0004']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // upper case lower half of o from phonetic extensions set.\n    // valid in Safari, not in Firefox, IE.\n    try{ test(\"a['\\u1d17A']\", \"a['\\u1d17A']\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Latin capital N with tilde - nice if we handled it, but for now let's\n    // only allow simple Latin (aka ASCII) to be converted.\n    try{ test(\"a['\\u00d1StuffAfter']\", \"a['\\u00d1StuffAfter']\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testDoNotConvert$catena_13() {\n    try{ testSame(\"a[0]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['']\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[' ']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[',']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[';']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[':']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['.']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['0']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p ']\");                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p' + '']\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[P]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[$]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    testSame(\"a[p()]\");                                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testSame(\"a['default']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Ignorable control characters are ok in Java identifiers, but not in JS.\n    try{ testSame(\"a['A\\u0004']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // upper case lower half of o from phonetic extensions set.\n    // valid in Safari, not in Firefox, IE.\n    try{ test(\"a['\\u1d17A']\", \"a['\\u1d17A']\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Latin capital N with tilde - nice if we handled it, but for now let's\n    // only allow simple Latin (aka ASCII) to be converted.\n    try{ test(\"a['\\u00d1StuffAfter']\", \"a['\\u00d1StuffAfter']\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testDoNotConvert$catena_14() {\n    try{ testSame(\"a[0]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['']\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[' ']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[',']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[';']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[':']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['.']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['0']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p ']\");                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p' + '']\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[P]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[$]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p()]\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    testSame(\"a['default']\");                                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n    // Ignorable control characters are ok in Java identifiers, but not in JS.\n    try{ testSame(\"a['A\\u0004']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // upper case lower half of o from phonetic extensions set.\n    // valid in Safari, not in Firefox, IE.\n    try{ test(\"a['\\u1d17A']\", \"a['\\u1d17A']\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Latin capital N with tilde - nice if we handled it, but for now let's\n    // only allow simple Latin (aka ASCII) to be converted.\n    try{ test(\"a['\\u00d1StuffAfter']\", \"a['\\u00d1StuffAfter']\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testDoNotConvert$catena_16() {\n    try{ testSame(\"a[0]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['']\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[' ']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[',']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[';']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[':']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['.']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['0']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p ']\");                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p' + '']\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[P]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[$]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p()]\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['default']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Ignorable control characters are ok in Java identifiers, but not in JS.\n    try{ testSame(\"a['A\\u0004']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // upper case lower half of o from phonetic extensions set.\n    // valid in Safari, not in Firefox, IE.\n    test(\"a['\\u1d17A']\", \"a['\\u1d17A']\");                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n    // Latin capital N with tilde - nice if we handled it, but for now let's\n    // only allow simple Latin (aka ASCII) to be converted.\n    try{ test(\"a['\\u00d1StuffAfter']\", \"a['\\u00d1StuffAfter']\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testDoNotConvert$catena_17() {\n    try{ testSame(\"a[0]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['']\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[' ']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[',']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[';']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[':']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['.']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['0']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p ']\");                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p' + '']\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[P]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[$]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p()]\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['default']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Ignorable control characters are ok in Java identifiers, but not in JS.\n    try{ testSame(\"a['A\\u0004']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // upper case lower half of o from phonetic extensions set.\n    // valid in Safari, not in Firefox, IE.\n    try{ test(\"a['\\u1d17A']\", \"a['\\u1d17A']\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Latin capital N with tilde - nice if we handled it, but for now let's\n    // only allow simple Latin (aka ASCII) to be converted.\n    test(\"a['\\u00d1StuffAfter']\", \"a['\\u00d1StuffAfter']\");                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
        ]
    }
}