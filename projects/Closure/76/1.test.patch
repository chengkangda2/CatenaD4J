{
    "com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testInExpression2": {
        "begin_line_no": 456,
        "end_line_no": 488,
        "file_path": "test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java",
        "to": [
            "  public void testInExpression2$catena_0() {\n    // This can be improved.  \"a = 1\" is dead but \"a\" is read in the following\n    // expression.\n    inFunction(\n        \"var a; a = 1; if ((a = 2) || (a = 3) || (a)) {}\",\n        \"var a; a = 1; if ((    2) || (a = 3) || (a)) {}\");                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ inFunction(\n        \"var a; (a = 1) || (a = 2)\",\n        \"var a; 1 || 2\");                                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ inFunction(\"var a; (a = 1) || (a = 2); return a\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ inFunction(\n        \"var a; a = 1; a ? a = 2 : a;\",\n        \"var a; a = 1; a ?     2 : a;\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ inFunction(\"var a; a = 1; a ? a = 2 : a; return a\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ inFunction(\n        \"var a; a = 1; a ? a : a = 2;\",\n        \"var a; a = 1; a ? a : 2;\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ inFunction(\"var a; a = 1; a ? a : a =2; return a\");                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ inFunction(\n        \"var a; (a = 1) ? a = 2 : a = 3;\",\n        \"var a;      1  ?     2 :     3;\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // This can be improved.  \"a = 1\" is dead but \"a\" is read in the following\n    // expression.\n    try{ inFunction(\"var a; (a = 1) ? a = 2 : a = 3; return a\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n  }"
        ]
    }
}