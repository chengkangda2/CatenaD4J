{
    "com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3": {
        "begin_line_no": 254,
        "end_line_no": 276,
        "file_path": "test/com/google/javascript/jscomp/NormalizeTest.java",
        "to": [
            "  public void testRemoveDuplicateVarDeclarations3$catena_1() {\n    try{ test(\"var f = 1; function f(){}\",\n         \"f = 1; function f(){}\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    test(\"var f; function f(){}\",\n         \"function f(){}\");                                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\"if (a) { var f = 1; } else { function f(){} }\",\n         \"if (a) { var f = 1; } else { f = function (){} }\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"function f(){} var f = 1;\",\n         \"function f(){} f = 1;\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f(){} var f;\",\n         \"function f(){}\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (a) { function f(){} } else { var f = 1; }\",\n         \"if (a) { var f = function (){} } else { f = 1; }\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(johnlenz): Do we need to handle this differently for \"third_party\"\n    // mode? Remove the previous function definitions?\n    try{ test(\"function f(){} function f(){}\",\n         \"function f(){} function f(){}\",\n         SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (a) { function f(){} } else { function f(){} }\",\n         \"if (a) { var f = function (){} } else { f = function (){} }\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testRemoveDuplicateVarDeclarations3$catena_0() {\n    test(\"var f = 1; function f(){}\",\n         \"f = 1; function f(){}\");                                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\"var f; function f(){}\",\n         \"function f(){}\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (a) { var f = 1; } else { function f(){} }\",\n         \"if (a) { var f = 1; } else { f = function (){} }\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"function f(){} var f = 1;\",\n         \"function f(){} f = 1;\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f(){} var f;\",\n         \"function f(){}\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (a) { function f(){} } else { var f = 1; }\",\n         \"if (a) { var f = function (){} } else { f = 1; }\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(johnlenz): Do we need to handle this differently for \"third_party\"\n    // mode? Remove the previous function definitions?\n    try{ test(\"function f(){} function f(){}\",\n         \"function f(){} function f(){}\",\n         SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (a) { function f(){} } else { function f(){} }\",\n         \"if (a) { var f = function (){} } else { f = function (){} }\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testRemoveDuplicateVarDeclarations3$catena_3() {\n    try{ test(\"var f = 1; function f(){}\",\n         \"f = 1; function f(){}\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var f; function f(){}\",\n         \"function f(){}\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (a) { var f = 1; } else { function f(){} }\",\n         \"if (a) { var f = 1; } else { f = function (){} }\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    test(\"function f(){} var f = 1;\",\n         \"function f(){} f = 1;\");                                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\"function f(){} var f;\",\n         \"function f(){}\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (a) { function f(){} } else { var f = 1; }\",\n         \"if (a) { var f = function (){} } else { f = 1; }\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(johnlenz): Do we need to handle this differently for \"third_party\"\n    // mode? Remove the previous function definitions?\n    try{ test(\"function f(){} function f(){}\",\n         \"function f(){} function f(){}\",\n         SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (a) { function f(){} } else { function f(){} }\",\n         \"if (a) { var f = function (){} } else { f = function (){} }\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testRemoveDuplicateVarDeclarations3$catena_4() {\n    try{ test(\"var f = 1; function f(){}\",\n         \"f = 1; function f(){}\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var f; function f(){}\",\n         \"function f(){}\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (a) { var f = 1; } else { function f(){} }\",\n         \"if (a) { var f = 1; } else { f = function (){} }\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"function f(){} var f = 1;\",\n         \"function f(){} f = 1;\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    test(\"function f(){} var f;\",\n         \"function f(){}\");                                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\"if (a) { function f(){} } else { var f = 1; }\",\n         \"if (a) { var f = function (){} } else { f = 1; }\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(johnlenz): Do we need to handle this differently for \"third_party\"\n    // mode? Remove the previous function definitions?\n    try{ test(\"function f(){} function f(){}\",\n         \"function f(){} function f(){}\",\n         SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (a) { function f(){} } else { function f(){} }\",\n         \"if (a) { var f = function (){} } else { f = function (){} }\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testRemoveDuplicateVarDeclarations3$catena_6() {\n    try{ test(\"var f = 1; function f(){}\",\n         \"f = 1; function f(){}\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var f; function f(){}\",\n         \"function f(){}\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (a) { var f = 1; } else { function f(){} }\",\n         \"if (a) { var f = 1; } else { f = function (){} }\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"function f(){} var f = 1;\",\n         \"function f(){} f = 1;\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f(){} var f;\",\n         \"function f(){}\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (a) { function f(){} } else { var f = 1; }\",\n         \"if (a) { var f = function (){} } else { f = 1; }\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(johnlenz): Do we need to handle this differently for \"third_party\"\n    // mode? Remove the previous function definitions?\n    test(\"function f(){} function f(){}\",\n         \"function f(){} function f(){}\",\n         SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR);                                                /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\"if (a) { function f(){} } else { function f(){} }\",\n         \"if (a) { var f = function (){} } else { f = function (){} }\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }"
        ]
    },
    "com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations": {
        "begin_line_no": 161,
        "end_line_no": 190,
        "file_path": "test/com/google/javascript/jscomp/NormalizeTest.java",
        "to": [
            "  public void testNormalizeFunctionDeclarations$catena_0() throws Exception {\n    testSame(\"function f() {}\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testSame(\"var f = function () {}\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var f = function f() {}\",\n         \"var f = function f$$1() {}\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = function g() {}\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"a:function g() {}\",\n         \"a:{ var g = function () {} }\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"{function g() {}}\",\n         \"{var g = function () {}}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"if (function g() {}) {}\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (true) {function g() {}}\",\n         \"if (true) {var g = function () {}}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (true) {} else {function g() {}}\",\n         \"if (true) {} else {var g = function () {}}\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"switch (function g() {}) {}\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"switch (1) { case 1: function g() {}}\",\n         \"switch (1) { case 1: var g = function () {}}\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n    try{ testSameInFunction(\"function f() {}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); a:function g() {}\",\n                   \"f(); a:{ var g = function () {} }\");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); {function g() {}}\",\n                   \"f(); {var g = function () {}}\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); if (true) {function g() {}}\",\n                   \"f(); if (true) {var g = function () {}}\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"if (true) {} else {function g() {}}\",\n                   \"if (true) {} else {var g = function () {}}\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testNormalizeFunctionDeclarations$catena_1() throws Exception {\n    try{ testSame(\"function f() {}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    testSame(\"var f = function () {}\");                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\"var f = function f() {}\",\n         \"var f = function f$$1() {}\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = function g() {}\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"a:function g() {}\",\n         \"a:{ var g = function () {} }\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"{function g() {}}\",\n         \"{var g = function () {}}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"if (function g() {}) {}\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (true) {function g() {}}\",\n         \"if (true) {var g = function () {}}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (true) {} else {function g() {}}\",\n         \"if (true) {} else {var g = function () {}}\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"switch (function g() {}) {}\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"switch (1) { case 1: function g() {}}\",\n         \"switch (1) { case 1: var g = function () {}}\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n    try{ testSameInFunction(\"function f() {}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); a:function g() {}\",\n                   \"f(); a:{ var g = function () {} }\");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); {function g() {}}\",\n                   \"f(); {var g = function () {}}\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); if (true) {function g() {}}\",\n                   \"f(); if (true) {var g = function () {}}\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"if (true) {} else {function g() {}}\",\n                   \"if (true) {} else {var g = function () {}}\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testNormalizeFunctionDeclarations$catena_2() throws Exception {\n    try{ testSame(\"function f() {}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = function () {}\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    test(\"var f = function f() {}\",\n         \"var f = function f$$1() {}\");                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testSame(\"var f = function g() {}\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"a:function g() {}\",\n         \"a:{ var g = function () {} }\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"{function g() {}}\",\n         \"{var g = function () {}}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"if (function g() {}) {}\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (true) {function g() {}}\",\n         \"if (true) {var g = function () {}}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (true) {} else {function g() {}}\",\n         \"if (true) {} else {var g = function () {}}\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"switch (function g() {}) {}\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"switch (1) { case 1: function g() {}}\",\n         \"switch (1) { case 1: var g = function () {}}\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n    try{ testSameInFunction(\"function f() {}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); a:function g() {}\",\n                   \"f(); a:{ var g = function () {} }\");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); {function g() {}}\",\n                   \"f(); {var g = function () {}}\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); if (true) {function g() {}}\",\n                   \"f(); if (true) {var g = function () {}}\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"if (true) {} else {function g() {}}\",\n                   \"if (true) {} else {var g = function () {}}\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testNormalizeFunctionDeclarations$catena_3() throws Exception {\n    try{ testSame(\"function f() {}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = function () {}\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var f = function f() {}\",\n         \"var f = function f$$1() {}\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    testSame(\"var f = function g() {}\");                                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\"a:function g() {}\",\n         \"a:{ var g = function () {} }\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"{function g() {}}\",\n         \"{var g = function () {}}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"if (function g() {}) {}\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (true) {function g() {}}\",\n         \"if (true) {var g = function () {}}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (true) {} else {function g() {}}\",\n         \"if (true) {} else {var g = function () {}}\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"switch (function g() {}) {}\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"switch (1) { case 1: function g() {}}\",\n         \"switch (1) { case 1: var g = function () {}}\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n    try{ testSameInFunction(\"function f() {}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); a:function g() {}\",\n                   \"f(); a:{ var g = function () {} }\");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); {function g() {}}\",\n                   \"f(); {var g = function () {}}\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); if (true) {function g() {}}\",\n                   \"f(); if (true) {var g = function () {}}\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"if (true) {} else {function g() {}}\",\n                   \"if (true) {} else {var g = function () {}}\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testNormalizeFunctionDeclarations$catena_6() throws Exception {\n    try{ testSame(\"function f() {}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = function () {}\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var f = function f() {}\",\n         \"var f = function f$$1() {}\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = function g() {}\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"a:function g() {}\",\n         \"a:{ var g = function () {} }\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"{function g() {}}\",\n         \"{var g = function () {}}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    testSame(\"if (function g() {}) {}\");                                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\"if (true) {function g() {}}\",\n         \"if (true) {var g = function () {}}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (true) {} else {function g() {}}\",\n         \"if (true) {} else {var g = function () {}}\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"switch (function g() {}) {}\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"switch (1) { case 1: function g() {}}\",\n         \"switch (1) { case 1: var g = function () {}}\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n    try{ testSameInFunction(\"function f() {}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); a:function g() {}\",\n                   \"f(); a:{ var g = function () {} }\");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); {function g() {}}\",\n                   \"f(); {var g = function () {}}\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); if (true) {function g() {}}\",\n                   \"f(); if (true) {var g = function () {}}\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"if (true) {} else {function g() {}}\",\n                   \"if (true) {} else {var g = function () {}}\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testNormalizeFunctionDeclarations$catena_9() throws Exception {\n    try{ testSame(\"function f() {}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = function () {}\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var f = function f() {}\",\n         \"var f = function f$$1() {}\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = function g() {}\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"a:function g() {}\",\n         \"a:{ var g = function () {} }\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"{function g() {}}\",\n         \"{var g = function () {}}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"if (function g() {}) {}\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (true) {function g() {}}\",\n         \"if (true) {var g = function () {}}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (true) {} else {function g() {}}\",\n         \"if (true) {} else {var g = function () {}}\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    testSame(\"switch (function g() {}) {}\");                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\"switch (1) { case 1: function g() {}}\",\n         \"switch (1) { case 1: var g = function () {}}\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n    try{ testSameInFunction(\"function f() {}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); a:function g() {}\",\n                   \"f(); a:{ var g = function () {} }\");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); {function g() {}}\",\n                   \"f(); {var g = function () {}}\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); if (true) {function g() {}}\",\n                   \"f(); if (true) {var g = function () {}}\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"if (true) {} else {function g() {}}\",\n                   \"if (true) {} else {var g = function () {}}\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testNormalizeFunctionDeclarations$catena_11() throws Exception {\n    try{ testSame(\"function f() {}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = function () {}\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var f = function f() {}\",\n         \"var f = function f$$1() {}\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = function g() {}\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"a:function g() {}\",\n         \"a:{ var g = function () {} }\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"{function g() {}}\",\n         \"{var g = function () {}}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"if (function g() {}) {}\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (true) {function g() {}}\",\n         \"if (true) {var g = function () {}}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (true) {} else {function g() {}}\",\n         \"if (true) {} else {var g = function () {}}\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"switch (function g() {}) {}\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"switch (1) { case 1: function g() {}}\",\n         \"switch (1) { case 1: var g = function () {}}\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n    testSameInFunction(\"function f() {}\");                                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testInFunction(\"f(); a:function g() {}\",\n                   \"f(); a:{ var g = function () {} }\");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); {function g() {}}\",\n                   \"f(); {var g = function () {}}\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"f(); if (true) {function g() {}}\",\n                   \"f(); if (true) {var g = function () {}}\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testInFunction(\"if (true) {} else {function g() {}}\",\n                   \"if (true) {} else {var g = function () {}}\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }"
        ]
    },
    "com.google.javascript.jscomp.NormalizeTest::testMoveFunctions2": {
        "begin_line_no": 139,
        "end_line_no": 147,
        "file_path": "test/com/google/javascript/jscomp/NormalizeTest.java",
        "to": [
            "  public void testMoveFunctions2$catena_0() throws Exception {\n    testSame(\"function f() { function foo() {} }\");                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\"function f() { f(); a:function bar() {} }\",\n         \"function f() { f(); a:{ var bar = function () {} }}\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f() { f(); {function bar() {}}}\",\n         \"function f() { f(); {var bar = function () {}}}\");                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f() { f(); if (true) {function bar() {}}}\",\n         \"function f() { f(); if (true) {var bar = function () {}}}\");                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }"
        ]
    }
}