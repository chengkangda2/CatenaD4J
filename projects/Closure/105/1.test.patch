{
    "com.google.javascript.jscomp.FoldConstantsTest::testStringJoinAdd": {
        "begin_line_no": 623,
        "end_line_no": 658,
        "file_path": "test/com/google/javascript/jscomp/FoldConstantsTest.java",
        "to": [
            "  public void testStringJoinAdd$catena_16() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\", \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join(\\\",\\\")\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\", \"x = [foo,\\\"a,b,c\\\"].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\", \"x = [\\\"a,b,c\\\",foo].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join(',')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join(',')\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, ''].join(',')\", \"x = [',', foo, ''].join(',')\");                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join(',')\");                                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n    \n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join(',')\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testStringJoinAdd$catena_17() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\", \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join(\\\",\\\")\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\", \"x = [foo,\\\"a,b,c\\\"].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\", \"x = [\\\"a,b,c\\\",foo].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join(',')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join(',')\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, ''].join(',')\", \"x = [',', foo, ''].join(',')\");                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join(',')\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join(',')\");                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n    \n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testStringJoinAdd$catena_13() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\", \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join(\\\",\\\")\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\", \"x = [foo,\\\"a,b,c\\\"].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\", \"x = [\\\"a,b,c\\\",foo].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    // TODO(user): Its possible to fold this better.\n    foldSame(\"x = ['', foo].join(',')\");                                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ foldSame(\"x = ['', foo, ''].join(',')\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, ''].join(',')\", \"x = [',', foo, ''].join(',')\");                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join(',')\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join(',')\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testStringJoinAdd$catena_15() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\", \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join(\\\",\\\")\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\", \"x = [foo,\\\"a,b,c\\\"].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\", \"x = [\\\"a,b,c\\\",foo].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join(',')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join(',')\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    fold(\"x = ['', '', foo, ''].join(',')\", \"x = [',', foo, ''].join(',')\");                                /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join(',')\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join(',')\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testStringJoinAdd$catena_14() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\", \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join(\\\",\\\")\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\", \"x = [foo,\\\"a,b,c\\\"].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\", \"x = [\\\"a,b,c\\\",foo].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join(',')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    foldSame(\"x = ['', foo, ''].join(',')\");                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n    \n    try{ fold(\"x = ['', '', foo, ''].join(',')\", \"x = [',', foo, ''].join(',')\");                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join(',')\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join(',')\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testStringJoinAdd$catena_0() {\n    fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\", \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join(\\\",\\\")\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\", \"x = [foo,\\\"a,b,c\\\"].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\", \"x = [\\\"a,b,c\\\",foo].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join(',')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join(',')\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, ''].join(',')\", \"x = [',', foo, ''].join(',')\");                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join(',')\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join(',')\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testStringJoinAdd$catena_1() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\", \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join(\\\",\\\")\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\", \"x = [foo,\\\"a,b,c\\\"].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\", \"x = [\\\"a,b,c\\\",foo].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join(',')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join(',')\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, ''].join(',')\", \"x = [',', foo, ''].join(',')\");                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join(',')\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join(',')\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testStringJoinAdd$catena_2() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\", \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join(\\\",\\\")\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\", \"x = [foo,\\\"a,b,c\\\"].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\", \"x = [\\\"a,b,c\\\",foo].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join(',')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join(',')\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, ''].join(',')\", \"x = [',', foo, ''].join(',')\");                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join(',')\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join(',')\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testStringJoinAdd$catena_3() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\", \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join(\\\",\\\")\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\", \"x = [foo,\\\"a,b,c\\\"].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\", \"x = [\\\"a,b,c\\\",foo].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join(',')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join(',')\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, ''].join(',')\", \"x = [',', foo, ''].join(',')\");                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join(',')\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join(',')\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testStringJoinAdd$catena_4() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = ['a', foo, 'b', 'c'].join(',')\", \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join(\\\",\\\")\");                      /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\", \"x = [foo,\\\"a,b,c\\\"].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\", \"x = [\\\"a,b,c\\\",foo].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join(',')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join(',')\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, ''].join(',')\", \"x = [',', foo, ''].join(',')\");                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join(',')\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join(',')\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testStringJoinAdd$catena_5() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\", \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join(\\\",\\\")\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = [foo, 'a', 'b', 'c'].join(',')\", \"x = [foo,\\\"a,b,c\\\"].join(\\\",\\\")\");                          /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\", \"x = [\\\"a,b,c\\\",foo].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join(',')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join(',')\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, ''].join(',')\", \"x = [',', foo, ''].join(',')\");                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join(',')\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join(',')\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testStringJoinAdd$catena_6() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\", \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join(\\\",\\\")\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\", \"x = [foo,\\\"a,b,c\\\"].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = ['a', 'b', 'c', foo].join(',')\", \"x = [\\\"a,b,c\\\",foo].join(\\\",\\\")\");                          /***** ORIGINAL ASSERTION IS HERE *****/\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join(',')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join(',')\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, ''].join(',')\", \"x = [',', foo, ''].join(',')\");                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join(',')\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join(',')\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testStringJoinAdd$catena_7() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\", \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join(\\\",\\\")\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\", \"x = [foo,\\\"a,b,c\\\"].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\", \"x = [\\\"a,b,c\\\",foo].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join(',')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join(',')\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, ''].join(',')\", \"x = [',', foo, ''].join(',')\");                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join(',')\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join(',')\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testStringJoinAdd$catena_8() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\", \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join(\\\",\\\")\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\", \"x = [foo,\\\"a,b,c\\\"].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\", \"x = [\\\"a,b,c\\\",foo].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join(',')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join(',')\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, ''].join(',')\", \"x = [',', foo, ''].join(',')\");                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join(',')\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join(',')\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testStringJoinAdd$catena_9() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\", \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join(\\\",\\\")\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\", \"x = [foo,\\\"a,b,c\\\"].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\", \"x = [\\\"a,b,c\\\",foo].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join(',')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join(',')\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, ''].join(',')\", \"x = [',', foo, ''].join(',')\");                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join(',')\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join(',')\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testStringJoinAdd$catena_10() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\", \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join(\\\",\\\")\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\", \"x = [foo,\\\"a,b,c\\\"].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\", \"x = [\\\"a,b,c\\\",foo].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join(',')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join(',')\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, ''].join(',')\", \"x = [',', foo, ''].join(',')\");                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join(',')\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join(',')\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testStringJoinAdd$catena_11() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\", \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join(\\\",\\\")\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\", \"x = [foo,\\\"a,b,c\\\"].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\", \"x = [\\\"a,b,c\\\",foo].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join(',')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join(',')\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, ''].join(',')\", \"x = [',', foo, ''].join(',')\");                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join(',')\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join(',')\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testStringJoinAdd$catena_12() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\", \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join(\\\",\\\")\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\", \"x = [foo,\\\"a,b,c\\\"].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\", \"x = [\\\"a,b,c\\\",foo].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  /***** ORIGINAL ASSERTION IS HERE *****/\n    \n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join(',')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join(',')\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, ''].join(',')\", \"x = [',', foo, ''].join(',')\");                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join(',')\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join(',')\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testStringJoinAdd$catena_18() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\", \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join(\\\",\\\")\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\", \"x = [foo,\\\"a,b,c\\\"].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\", \"x = [\\\"a,b,c\\\",foo].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join(',')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join(',')\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, ''].join(',')\", \"x = [',', foo, ''].join(',')\");                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join(',')\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join(',')\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
        ]
    }
}