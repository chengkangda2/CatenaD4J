{
    "org.apache.commons.collections4.IteratorUtilsTest::testCollatedIterator": {
        "begin_line_no": 923,
        "end_line_no": 969,
        "file_path": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java",
        "to": [
            "    @Test\n    public void testCollatedIterator$catena_5() {\n        try {\n            IteratorUtils.collatedIterator(null, collectionOdd.iterator(), null);\n            try{ fail(\"expecting NullPointerException\");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NullPointerException npe) {\n            // expected\n        }\n\n        try {\n            IteratorUtils.collatedIterator(null, null, collectionEven.iterator());\n            try{ fail(\"expecting NullPointerException\");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NullPointerException npe) {\n            // expected\n        }\n\n        // natural ordering\n        Iterator<Integer> it = \n                IteratorUtils.collatedIterator(null, collectionOdd.iterator(), collectionEven.iterator());\n\n        List<Integer> result = IteratorUtils.toList(it);\n        try{ assertEquals(12, result.size());                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        List<Integer> combinedList = new ArrayList<Integer>();\n        combinedList.addAll(collectionOdd);\n        combinedList.addAll(collectionEven);\n        Collections.sort(combinedList);\n\n        try{ assertEquals(combinedList, result);                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        it = IteratorUtils.collatedIterator(null, collectionOdd.iterator(), emptyCollection.iterator());\n        result = IteratorUtils.toList(it);\n        try{ assertEquals(collectionOdd, result);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        final Comparator<Integer> reverseComparator =\n                ComparatorUtils.reversedComparator(ComparatorUtils.<Integer>naturalComparator());\n\n        Collections.reverse((List<Integer>) collectionOdd);\n        Collections.reverse((List<Integer>) collectionEven);\n        Collections.reverse(combinedList);\n\n        it = IteratorUtils.collatedIterator(reverseComparator,\n                                            collectionOdd.iterator(),\n                                            collectionEven.iterator());\n        result = IteratorUtils.toList(it);\n        assertEquals(combinedList, result);                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n    }",
            "    @Test\n    public void testCollatedIterator$catena_0() {\n        try {\n            IteratorUtils.collatedIterator(null, collectionOdd.iterator(), null);\n            fail(\"expecting NullPointerException\");                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (NullPointerException npe) {\n            // expected\n        }\n\n        try {\n            IteratorUtils.collatedIterator(null, null, collectionEven.iterator());\n            try{ fail(\"expecting NullPointerException\");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NullPointerException npe) {\n            // expected\n        }\n\n        // natural ordering\n        Iterator<Integer> it = \n                IteratorUtils.collatedIterator(null, collectionOdd.iterator(), collectionEven.iterator());\n\n        List<Integer> result = IteratorUtils.toList(it);\n        try{ assertEquals(12, result.size());                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        List<Integer> combinedList = new ArrayList<Integer>();\n        combinedList.addAll(collectionOdd);\n        combinedList.addAll(collectionEven);\n        Collections.sort(combinedList);\n\n        try{ assertEquals(combinedList, result);                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        it = IteratorUtils.collatedIterator(null, collectionOdd.iterator(), emptyCollection.iterator());\n        result = IteratorUtils.toList(it);\n        try{ assertEquals(collectionOdd, result);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        final Comparator<Integer> reverseComparator =\n                ComparatorUtils.reversedComparator(ComparatorUtils.<Integer>naturalComparator());\n\n        Collections.reverse((List<Integer>) collectionOdd);\n        Collections.reverse((List<Integer>) collectionEven);\n        Collections.reverse(combinedList);\n\n        it = IteratorUtils.collatedIterator(reverseComparator,\n                                            collectionOdd.iterator(),\n                                            collectionEven.iterator());\n        result = IteratorUtils.toList(it);\n        try{ assertEquals(combinedList, result);                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void testCollatedIterator$catena_3() {\n        try {\n            IteratorUtils.collatedIterator(null, collectionOdd.iterator(), null);\n            try{ fail(\"expecting NullPointerException\");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NullPointerException npe) {\n            // expected\n        }\n\n        try {\n            IteratorUtils.collatedIterator(null, null, collectionEven.iterator());\n            try{ fail(\"expecting NullPointerException\");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NullPointerException npe) {\n            // expected\n        }\n\n        // natural ordering\n        Iterator<Integer> it = \n                IteratorUtils.collatedIterator(null, collectionOdd.iterator(), collectionEven.iterator());\n\n        List<Integer> result = IteratorUtils.toList(it);\n        try{ assertEquals(12, result.size());                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        List<Integer> combinedList = new ArrayList<Integer>();\n        combinedList.addAll(collectionOdd);\n        combinedList.addAll(collectionEven);\n        Collections.sort(combinedList);\n\n        assertEquals(combinedList, result);                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n\n        it = IteratorUtils.collatedIterator(null, collectionOdd.iterator(), emptyCollection.iterator());\n        result = IteratorUtils.toList(it);\n        try{ assertEquals(collectionOdd, result);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        final Comparator<Integer> reverseComparator =\n                ComparatorUtils.reversedComparator(ComparatorUtils.<Integer>naturalComparator());\n\n        Collections.reverse((List<Integer>) collectionOdd);\n        Collections.reverse((List<Integer>) collectionEven);\n        Collections.reverse(combinedList);\n\n        it = IteratorUtils.collatedIterator(reverseComparator,\n                                            collectionOdd.iterator(),\n                                            collectionEven.iterator());\n        result = IteratorUtils.toList(it);\n        try{ assertEquals(combinedList, result);                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void testCollatedIterator$catena_1() {\n        try {\n            IteratorUtils.collatedIterator(null, collectionOdd.iterator(), null);\n            try{ fail(\"expecting NullPointerException\");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NullPointerException npe) {\n            // expected\n        }\n\n        try {\n            IteratorUtils.collatedIterator(null, null, collectionEven.iterator());\n            fail(\"expecting NullPointerException\");                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (NullPointerException npe) {\n            // expected\n        }\n\n        // natural ordering\n        Iterator<Integer> it = \n                IteratorUtils.collatedIterator(null, collectionOdd.iterator(), collectionEven.iterator());\n\n        List<Integer> result = IteratorUtils.toList(it);\n        try{ assertEquals(12, result.size());                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        List<Integer> combinedList = new ArrayList<Integer>();\n        combinedList.addAll(collectionOdd);\n        combinedList.addAll(collectionEven);\n        Collections.sort(combinedList);\n\n        try{ assertEquals(combinedList, result);                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        it = IteratorUtils.collatedIterator(null, collectionOdd.iterator(), emptyCollection.iterator());\n        result = IteratorUtils.toList(it);\n        try{ assertEquals(collectionOdd, result);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        final Comparator<Integer> reverseComparator =\n                ComparatorUtils.reversedComparator(ComparatorUtils.<Integer>naturalComparator());\n\n        Collections.reverse((List<Integer>) collectionOdd);\n        Collections.reverse((List<Integer>) collectionEven);\n        Collections.reverse(combinedList);\n\n        it = IteratorUtils.collatedIterator(reverseComparator,\n                                            collectionOdd.iterator(),\n                                            collectionEven.iterator());\n        result = IteratorUtils.toList(it);\n        try{ assertEquals(combinedList, result);                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void testCollatedIterator$catena_2() {\n        try {\n            IteratorUtils.collatedIterator(null, collectionOdd.iterator(), null);\n            try{ fail(\"expecting NullPointerException\");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NullPointerException npe) {\n            // expected\n        }\n\n        try {\n            IteratorUtils.collatedIterator(null, null, collectionEven.iterator());\n            try{ fail(\"expecting NullPointerException\");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NullPointerException npe) {\n            // expected\n        }\n\n        // natural ordering\n        Iterator<Integer> it = \n                IteratorUtils.collatedIterator(null, collectionOdd.iterator(), collectionEven.iterator());\n\n        List<Integer> result = IteratorUtils.toList(it);\n        assertEquals(12, result.size());                                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n\n        List<Integer> combinedList = new ArrayList<Integer>();\n        combinedList.addAll(collectionOdd);\n        combinedList.addAll(collectionEven);\n        Collections.sort(combinedList);\n\n        try{ assertEquals(combinedList, result);                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        it = IteratorUtils.collatedIterator(null, collectionOdd.iterator(), emptyCollection.iterator());\n        result = IteratorUtils.toList(it);\n        try{ assertEquals(collectionOdd, result);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        final Comparator<Integer> reverseComparator =\n                ComparatorUtils.reversedComparator(ComparatorUtils.<Integer>naturalComparator());\n\n        Collections.reverse((List<Integer>) collectionOdd);\n        Collections.reverse((List<Integer>) collectionEven);\n        Collections.reverse(combinedList);\n\n        it = IteratorUtils.collatedIterator(reverseComparator,\n                                            collectionOdd.iterator(),\n                                            collectionEven.iterator());\n        result = IteratorUtils.toList(it);\n        try{ assertEquals(combinedList, result);                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void testCollatedIterator$catena_4() {\n        try {\n            IteratorUtils.collatedIterator(null, collectionOdd.iterator(), null);\n            try{ fail(\"expecting NullPointerException\");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NullPointerException npe) {\n            // expected\n        }\n\n        try {\n            IteratorUtils.collatedIterator(null, null, collectionEven.iterator());\n            try{ fail(\"expecting NullPointerException\");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NullPointerException npe) {\n            // expected\n        }\n\n        // natural ordering\n        Iterator<Integer> it = \n                IteratorUtils.collatedIterator(null, collectionOdd.iterator(), collectionEven.iterator());\n\n        List<Integer> result = IteratorUtils.toList(it);\n        try{ assertEquals(12, result.size());                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        List<Integer> combinedList = new ArrayList<Integer>();\n        combinedList.addAll(collectionOdd);\n        combinedList.addAll(collectionEven);\n        Collections.sort(combinedList);\n\n        try{ assertEquals(combinedList, result);                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        it = IteratorUtils.collatedIterator(null, collectionOdd.iterator(), emptyCollection.iterator());\n        result = IteratorUtils.toList(it);\n        assertEquals(collectionOdd, result);                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n\n        final Comparator<Integer> reverseComparator =\n                ComparatorUtils.reversedComparator(ComparatorUtils.<Integer>naturalComparator());\n\n        Collections.reverse((List<Integer>) collectionOdd);\n        Collections.reverse((List<Integer>) collectionEven);\n        Collections.reverse(combinedList);\n\n        it = IteratorUtils.collatedIterator(reverseComparator,\n                                            collectionOdd.iterator(),\n                                            collectionEven.iterator());\n        result = IteratorUtils.toList(it);\n        try{ assertEquals(combinedList, result);                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    }
}