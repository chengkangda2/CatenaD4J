{
    "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyCharArrayWithSupplementaryChars": {
        "begin_line_no": 687,
        "end_line_no": 698,
        "file_path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
        "to": [
            "\tpublic void testContainsAnyCharArrayWithSupplementaryChars$catena_6() {\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20000.toCharArray()));      }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20001.toCharArray()));      }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000, CharU20000.toCharArray()));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\t// Sanity check:\n\t\ttry{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\t// Test:\n\t\tassertEquals(false, StringUtils.containsAny(CharU20000, CharU20001.toCharArray()));                       /***** ORIGINAL ASSERTION IS HERE *****/\n\t\ttry{ assertEquals(false, StringUtils.containsAny(CharU20001, CharU20000.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\t}",
            "\tpublic void testContainsAnyCharArrayWithSupplementaryChars$catena_7() {\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20000.toCharArray()));      }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20001.toCharArray()));      }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000, CharU20000.toCharArray()));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\t// Sanity check:\n\t\ttry{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\t// Test:\n\t\ttry{ assertEquals(false, StringUtils.containsAny(CharU20000, CharU20001.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\tassertEquals(false, StringUtils.containsAny(CharU20001, CharU20000.toCharArray()));                       /***** ORIGINAL ASSERTION IS HERE *****/\n\t}"
        ]
    },
    "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyStringWithSupplementaryChars": {
        "begin_line_no": 671,
        "end_line_no": 682,
        "file_path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
        "to": [
            "\tpublic void testContainsAnyStringWithSupplementaryChars$catena_7() {\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20000));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20001));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000, CharU20000));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\t// Sanity check:\n\t\ttry{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\t// Test:\n\t\ttry{ assertEquals(false, StringUtils.containsAny(CharU20000, CharU20001));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\tassertEquals(false, StringUtils.containsAny(CharU20001, CharU20000));                                     /***** ORIGINAL ASSERTION IS HERE *****/\n\t}",
            "\tpublic void testContainsAnyStringWithSupplementaryChars$catena_6() {\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20000));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20001));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000, CharU20000));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\t// Sanity check:\n\t\ttry{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\t// Test:\n\t\tassertEquals(false, StringUtils.containsAny(CharU20000, CharU20001));                                     /***** ORIGINAL ASSERTION IS HERE *****/\n\t\ttry{ assertEquals(false, StringUtils.containsAny(CharU20001, CharU20000));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\t}"
        ]
    }
}