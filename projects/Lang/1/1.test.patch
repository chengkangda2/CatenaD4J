{
    "org.apache.commons.lang3.math.NumberUtilsTest::TestLang747": {
        "begin_line_no": 249,
        "end_line_no": 284,
        "file_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "to": [
            "    @Test\n    public void TestLang747$catena_20() {\n        try{ assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));             /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // Leading zero tests\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void TestLang747$catena_19() {\n        try{ assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void TestLang747$catena_5() {\n        try{ assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void TestLang747$catena_23() {\n        try{ assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));                 /***** ORIGINAL ASSERTION IS HERE *****/\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void TestLang747$catena_21() {\n        try{ assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void TestLang747$catena_8() {\n        try{ assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void TestLang747$catena_6() {\n        try{ assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));                               /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // Leading zero tests\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void TestLang747$catena_0() {\n        assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void TestLang747$catena_1() {\n        try{ assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void TestLang747$catena_2() {\n        try{ assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void TestLang747$catena_3() {\n        try{ assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));                                /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void TestLang747$catena_4() {\n        try{ assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void TestLang747$catena_7() {\n        try{ assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void TestLang747$catena_9() {\n        try{ assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));                              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void TestLang747$catena_10() {\n        try{ assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));                             /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void TestLang747$catena_11() {\n        try{ assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));                         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void TestLang747$catena_12() {\n        try{ assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));                        /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void TestLang747$catena_13() {\n        try{ assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));                       /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void TestLang747$catena_14() {\n        try{ assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));                      /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void TestLang747$catena_15() {\n        try{ assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));                     /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void TestLang747$catena_16() {\n        try{ assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));                    /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void TestLang747$catena_17() {\n        try{ assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void TestLang747$catena_18() {\n        try{ assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));                  /***** ORIGINAL ASSERTION IS HERE *****/\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void TestLang747$catena_22() {\n        try{ assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));                  /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void TestLang747$catena_24() {\n        try{ assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void TestLang747$catena_25() {\n        try{ assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));            /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
        ]
    }
}