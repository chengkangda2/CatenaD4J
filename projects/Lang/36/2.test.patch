{
    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber": {
        "begin_line_no": 176,
        "end_line_no": 214,
        "file_path": "src/test/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "to": [
            "    public void testCreateNumber$catena_23() {\n        // a lot of things can go wrong\n        try{ assertEquals(\"createNumber(String) 1 failed\", new Float(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 2 failed\", new Integer(\"12345\"), NumberUtils.createNumber(\"12345\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", new Double(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", new Double(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", new Float(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", new Float(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 5 failed\", new Long(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\"\n            + (Integer.MAX_VALUE + 1L)));                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", new Long(12345), NumberUtils.createNumber(\"12345L\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", new Long(12345), NumberUtils.createNumber(\"12345l\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 7 failed\", new Float(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 8 failed\", new Integer(\"-12345\"), NumberUtils.createNumber(\"-12345\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9 failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10 failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 11 failed\", new Double(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 12 failed\", new Float(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 13 failed\", new Double(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 14 failed\", new Double(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils\n                .createNumber(\"12345678901234567890L\"));                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n        if (SystemUtils.isJavaVersionAtLeast(1.3f)) {\n            try{ assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n                    .createNumber(\"1.1E-700F\"));                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(\"createNumber(String) 16 failed\", new Long(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 17 failed\", new Long(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE));                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Long.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-521\n        assertEquals(\"createNumber(String) LANG-521 failed\", new Float(\"2.\"), NumberUtils.createNumber(\"2.\"));                /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
        ]
    }
}