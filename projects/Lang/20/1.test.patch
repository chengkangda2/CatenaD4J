{
    "org.apache.commons.lang3.StringUtilsTest::testJoin_Objectarray": {
        "begin_line_no": 184,
        "end_line_no": 198,
        "file_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "to": [
            "    public void testJoin_Objectarray$catena_5() {\n//        assertEquals(null, StringUtils.join(null)); // generates warning\n        try{ assertEquals(null, StringUtils.join((Object[]) null));             }catch(Throwable __SHOULD_BE_IGNORED){} // equivalent explicit cast\n        // test additional varargs calls\n        try{ assertEquals(\"\", StringUtils.join());                                           }catch(Throwable __SHOULD_BE_IGNORED){} // empty array\n        try{ assertEquals(\"\", StringUtils.join((Object) null));                    }catch(Throwable __SHOULD_BE_IGNORED){} // => new Object[]{null}\n\n        try{ assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", StringUtils.join(NULL_ARRAY_LIST));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"null\", StringUtils.join(NULL_TO_STRING_LIST));                                        /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"abc\", StringUtils.join(new String[] {\"a\", \"b\", \"c\"}));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"a\", StringUtils.join(new String[] {null, \"a\", \"\"}));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo\", StringUtils.join(MIXED_ARRAY_LIST));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo2\", StringUtils.join(MIXED_TYPE_LIST));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testJoin_Objectarray$catena_0() {\n//        assertEquals(null, StringUtils.join(null)); // generates warning\n        assertEquals(null, StringUtils.join((Object[]) null));                  /***** ORIGINAL ASSERTION IS HERE *****/ // equivalent explicit cast\n        // test additional varargs calls\n        try{ assertEquals(\"\", StringUtils.join());                                           }catch(Throwable __SHOULD_BE_IGNORED){} // empty array\n        try{ assertEquals(\"\", StringUtils.join((Object) null));                    }catch(Throwable __SHOULD_BE_IGNORED){} // => new Object[]{null}\n\n        try{ assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", StringUtils.join(NULL_ARRAY_LIST));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"null\", StringUtils.join(NULL_TO_STRING_LIST));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"abc\", StringUtils.join(new String[] {\"a\", \"b\", \"c\"}));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"a\", StringUtils.join(new String[] {null, \"a\", \"\"}));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo\", StringUtils.join(MIXED_ARRAY_LIST));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo2\", StringUtils.join(MIXED_TYPE_LIST));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testJoin_Objectarray$catena_1() {\n//        assertEquals(null, StringUtils.join(null)); // generates warning\n        try{ assertEquals(null, StringUtils.join((Object[]) null));             }catch(Throwable __SHOULD_BE_IGNORED){} // equivalent explicit cast\n        // test additional varargs calls\n        assertEquals(\"\", StringUtils.join());                                                /***** ORIGINAL ASSERTION IS HERE *****/ // empty array\n        try{ assertEquals(\"\", StringUtils.join((Object) null));                    }catch(Throwable __SHOULD_BE_IGNORED){} // => new Object[]{null}\n\n        try{ assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", StringUtils.join(NULL_ARRAY_LIST));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"null\", StringUtils.join(NULL_TO_STRING_LIST));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"abc\", StringUtils.join(new String[] {\"a\", \"b\", \"c\"}));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"a\", StringUtils.join(new String[] {null, \"a\", \"\"}));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo\", StringUtils.join(MIXED_ARRAY_LIST));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo2\", StringUtils.join(MIXED_TYPE_LIST));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testJoin_Objectarray$catena_2() {\n//        assertEquals(null, StringUtils.join(null)); // generates warning\n        try{ assertEquals(null, StringUtils.join((Object[]) null));             }catch(Throwable __SHOULD_BE_IGNORED){} // equivalent explicit cast\n        // test additional varargs calls\n        try{ assertEquals(\"\", StringUtils.join());                                           }catch(Throwable __SHOULD_BE_IGNORED){} // empty array\n        assertEquals(\"\", StringUtils.join((Object) null));                         /***** ORIGINAL ASSERTION IS HERE *****/ // => new Object[]{null}\n\n        try{ assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", StringUtils.join(NULL_ARRAY_LIST));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"null\", StringUtils.join(NULL_TO_STRING_LIST));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"abc\", StringUtils.join(new String[] {\"a\", \"b\", \"c\"}));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"a\", StringUtils.join(new String[] {null, \"a\", \"\"}));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo\", StringUtils.join(MIXED_ARRAY_LIST));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo2\", StringUtils.join(MIXED_TYPE_LIST));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testJoin_Objectarray$catena_3() {\n//        assertEquals(null, StringUtils.join(null)); // generates warning\n        try{ assertEquals(null, StringUtils.join((Object[]) null));             }catch(Throwable __SHOULD_BE_IGNORED){} // equivalent explicit cast\n        // test additional varargs calls\n        try{ assertEquals(\"\", StringUtils.join());                                           }catch(Throwable __SHOULD_BE_IGNORED){} // empty array\n        try{ assertEquals(\"\", StringUtils.join((Object) null));                    }catch(Throwable __SHOULD_BE_IGNORED){} // => new Object[]{null}\n\n        assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST));                                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"\", StringUtils.join(NULL_ARRAY_LIST));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"null\", StringUtils.join(NULL_TO_STRING_LIST));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"abc\", StringUtils.join(new String[] {\"a\", \"b\", \"c\"}));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"a\", StringUtils.join(new String[] {null, \"a\", \"\"}));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo\", StringUtils.join(MIXED_ARRAY_LIST));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo2\", StringUtils.join(MIXED_TYPE_LIST));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testJoin_Objectarray$catena_4() {\n//        assertEquals(null, StringUtils.join(null)); // generates warning\n        try{ assertEquals(null, StringUtils.join((Object[]) null));             }catch(Throwable __SHOULD_BE_IGNORED){} // equivalent explicit cast\n        // test additional varargs calls\n        try{ assertEquals(\"\", StringUtils.join());                                           }catch(Throwable __SHOULD_BE_IGNORED){} // empty array\n        try{ assertEquals(\"\", StringUtils.join((Object) null));                    }catch(Throwable __SHOULD_BE_IGNORED){} // => new Object[]{null}\n\n        try{ assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"\", StringUtils.join(NULL_ARRAY_LIST));                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"null\", StringUtils.join(NULL_TO_STRING_LIST));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"abc\", StringUtils.join(new String[] {\"a\", \"b\", \"c\"}));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"a\", StringUtils.join(new String[] {null, \"a\", \"\"}));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo\", StringUtils.join(MIXED_ARRAY_LIST));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo2\", StringUtils.join(MIXED_TYPE_LIST));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testJoin_Objectarray$catena_6() {\n//        assertEquals(null, StringUtils.join(null)); // generates warning\n        try{ assertEquals(null, StringUtils.join((Object[]) null));             }catch(Throwable __SHOULD_BE_IGNORED){} // equivalent explicit cast\n        // test additional varargs calls\n        try{ assertEquals(\"\", StringUtils.join());                                           }catch(Throwable __SHOULD_BE_IGNORED){} // empty array\n        try{ assertEquals(\"\", StringUtils.join((Object) null));                    }catch(Throwable __SHOULD_BE_IGNORED){} // => new Object[]{null}\n\n        try{ assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", StringUtils.join(NULL_ARRAY_LIST));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"null\", StringUtils.join(NULL_TO_STRING_LIST));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"abc\", StringUtils.join(new String[] {\"a\", \"b\", \"c\"}));                                /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"a\", StringUtils.join(new String[] {null, \"a\", \"\"}));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo\", StringUtils.join(MIXED_ARRAY_LIST));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo2\", StringUtils.join(MIXED_TYPE_LIST));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testJoin_Objectarray$catena_7() {\n//        assertEquals(null, StringUtils.join(null)); // generates warning\n        try{ assertEquals(null, StringUtils.join((Object[]) null));             }catch(Throwable __SHOULD_BE_IGNORED){} // equivalent explicit cast\n        // test additional varargs calls\n        try{ assertEquals(\"\", StringUtils.join());                                           }catch(Throwable __SHOULD_BE_IGNORED){} // empty array\n        try{ assertEquals(\"\", StringUtils.join((Object) null));                    }catch(Throwable __SHOULD_BE_IGNORED){} // => new Object[]{null}\n\n        try{ assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", StringUtils.join(NULL_ARRAY_LIST));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"null\", StringUtils.join(NULL_TO_STRING_LIST));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"abc\", StringUtils.join(new String[] {\"a\", \"b\", \"c\"}));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"a\", StringUtils.join(new String[] {null, \"a\", \"\"}));                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"foo\", StringUtils.join(MIXED_ARRAY_LIST));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo2\", StringUtils.join(MIXED_TYPE_LIST));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testJoin_Objectarray$catena_8() {\n//        assertEquals(null, StringUtils.join(null)); // generates warning\n        try{ assertEquals(null, StringUtils.join((Object[]) null));             }catch(Throwable __SHOULD_BE_IGNORED){} // equivalent explicit cast\n        // test additional varargs calls\n        try{ assertEquals(\"\", StringUtils.join());                                           }catch(Throwable __SHOULD_BE_IGNORED){} // empty array\n        try{ assertEquals(\"\", StringUtils.join((Object) null));                    }catch(Throwable __SHOULD_BE_IGNORED){} // => new Object[]{null}\n\n        try{ assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", StringUtils.join(NULL_ARRAY_LIST));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"null\", StringUtils.join(NULL_TO_STRING_LIST));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"abc\", StringUtils.join(new String[] {\"a\", \"b\", \"c\"}));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"a\", StringUtils.join(new String[] {null, \"a\", \"\"}));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"foo\", StringUtils.join(MIXED_ARRAY_LIST));                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"foo2\", StringUtils.join(MIXED_TYPE_LIST));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testJoin_Objectarray$catena_9() {\n//        assertEquals(null, StringUtils.join(null)); // generates warning\n        try{ assertEquals(null, StringUtils.join((Object[]) null));             }catch(Throwable __SHOULD_BE_IGNORED){} // equivalent explicit cast\n        // test additional varargs calls\n        try{ assertEquals(\"\", StringUtils.join());                                           }catch(Throwable __SHOULD_BE_IGNORED){} // empty array\n        try{ assertEquals(\"\", StringUtils.join((Object) null));                    }catch(Throwable __SHOULD_BE_IGNORED){} // => new Object[]{null}\n\n        try{ assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", StringUtils.join(NULL_ARRAY_LIST));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"null\", StringUtils.join(NULL_TO_STRING_LIST));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"abc\", StringUtils.join(new String[] {\"a\", \"b\", \"c\"}));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"a\", StringUtils.join(new String[] {null, \"a\", \"\"}));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo\", StringUtils.join(MIXED_ARRAY_LIST));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"foo2\", StringUtils.join(MIXED_TYPE_LIST));                                            /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
        ]
    },
    "org.apache.commons.lang3.StringUtilsTest::testJoin_ArrayChar": {
        "begin_line_no": 200,
        "end_line_no": 213,
        "file_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
        "to": [
            "    public void testJoin_ArrayChar$catena_0() {\n        assertEquals(null, StringUtils.join((Object[]) null, ','));                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(TEXT_LIST_CHAR, StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\";;foo\", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR_CHAR));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo;2\", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR_CHAR));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"/\", StringUtils.join(MIXED_ARRAY_LIST, '/', 0, MIXED_ARRAY_LIST.length-1));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 1));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"null\", StringUtils.join(NULL_TO_STRING_LIST,'/', 0, 1));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo/2\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 2));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"2\", StringUtils.join(MIXED_TYPE_LIST, '/', 1, 2));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", StringUtils.join(MIXED_TYPE_LIST, '/', 2, 1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testJoin_ArrayChar$catena_1() {\n        try{ assertEquals(null, StringUtils.join((Object[]) null, ','));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(TEXT_LIST_CHAR, StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR));                         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\";;foo\", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR_CHAR));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo;2\", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR_CHAR));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"/\", StringUtils.join(MIXED_ARRAY_LIST, '/', 0, MIXED_ARRAY_LIST.length-1));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 1));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"null\", StringUtils.join(NULL_TO_STRING_LIST,'/', 0, 1));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo/2\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 2));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"2\", StringUtils.join(MIXED_TYPE_LIST, '/', 1, 2));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", StringUtils.join(MIXED_TYPE_LIST, '/', 2, 1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testJoin_ArrayChar$catena_2() {\n        try{ assertEquals(null, StringUtils.join((Object[]) null, ','));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(TEXT_LIST_CHAR, StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR));                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\";;foo\", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR_CHAR));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo;2\", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR_CHAR));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"/\", StringUtils.join(MIXED_ARRAY_LIST, '/', 0, MIXED_ARRAY_LIST.length-1));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 1));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"null\", StringUtils.join(NULL_TO_STRING_LIST,'/', 0, 1));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo/2\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 2));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"2\", StringUtils.join(MIXED_TYPE_LIST, '/', 1, 2));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", StringUtils.join(MIXED_TYPE_LIST, '/', 2, 1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testJoin_ArrayChar$catena_3() {\n        try{ assertEquals(null, StringUtils.join((Object[]) null, ','));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(TEXT_LIST_CHAR, StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\";;foo\", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR_CHAR));                          /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"foo;2\", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR_CHAR));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"/\", StringUtils.join(MIXED_ARRAY_LIST, '/', 0, MIXED_ARRAY_LIST.length-1));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 1));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"null\", StringUtils.join(NULL_TO_STRING_LIST,'/', 0, 1));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo/2\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 2));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"2\", StringUtils.join(MIXED_TYPE_LIST, '/', 1, 2));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", StringUtils.join(MIXED_TYPE_LIST, '/', 2, 1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testJoin_ArrayChar$catena_4() {\n        try{ assertEquals(null, StringUtils.join((Object[]) null, ','));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(TEXT_LIST_CHAR, StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\";;foo\", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR_CHAR));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"foo;2\", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR_CHAR));                           /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ assertEquals(\"/\", StringUtils.join(MIXED_ARRAY_LIST, '/', 0, MIXED_ARRAY_LIST.length-1));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 1));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"null\", StringUtils.join(NULL_TO_STRING_LIST,'/', 0, 1));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo/2\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 2));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"2\", StringUtils.join(MIXED_TYPE_LIST, '/', 1, 2));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", StringUtils.join(MIXED_TYPE_LIST, '/', 2, 1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testJoin_ArrayChar$catena_5() {\n        try{ assertEquals(null, StringUtils.join((Object[]) null, ','));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(TEXT_LIST_CHAR, StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\";;foo\", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR_CHAR));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo;2\", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR_CHAR));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        assertEquals(\"/\", StringUtils.join(MIXED_ARRAY_LIST, '/', 0, MIXED_ARRAY_LIST.length-1));           /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"foo\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 1));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"null\", StringUtils.join(NULL_TO_STRING_LIST,'/', 0, 1));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo/2\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 2));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"2\", StringUtils.join(MIXED_TYPE_LIST, '/', 1, 2));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", StringUtils.join(MIXED_TYPE_LIST, '/', 2, 1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testJoin_ArrayChar$catena_6() {\n        try{ assertEquals(null, StringUtils.join((Object[]) null, ','));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(TEXT_LIST_CHAR, StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\";;foo\", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR_CHAR));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo;2\", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR_CHAR));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"/\", StringUtils.join(MIXED_ARRAY_LIST, '/', 0, MIXED_ARRAY_LIST.length-1));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"foo\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 1));                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"null\", StringUtils.join(NULL_TO_STRING_LIST,'/', 0, 1));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo/2\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 2));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"2\", StringUtils.join(MIXED_TYPE_LIST, '/', 1, 2));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", StringUtils.join(MIXED_TYPE_LIST, '/', 2, 1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testJoin_ArrayChar$catena_8() {\n        try{ assertEquals(null, StringUtils.join((Object[]) null, ','));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(TEXT_LIST_CHAR, StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\";;foo\", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR_CHAR));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo;2\", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR_CHAR));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"/\", StringUtils.join(MIXED_ARRAY_LIST, '/', 0, MIXED_ARRAY_LIST.length-1));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 1));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"null\", StringUtils.join(NULL_TO_STRING_LIST,'/', 0, 1));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"foo/2\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 2));                                /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"2\", StringUtils.join(MIXED_TYPE_LIST, '/', 1, 2));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", StringUtils.join(MIXED_TYPE_LIST, '/', 2, 1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testJoin_ArrayChar$catena_9() {\n        try{ assertEquals(null, StringUtils.join((Object[]) null, ','));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(TEXT_LIST_CHAR, StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\";;foo\", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR_CHAR));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo;2\", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR_CHAR));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"/\", StringUtils.join(MIXED_ARRAY_LIST, '/', 0, MIXED_ARRAY_LIST.length-1));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 1));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"null\", StringUtils.join(NULL_TO_STRING_LIST,'/', 0, 1));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo/2\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 2));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"2\", StringUtils.join(MIXED_TYPE_LIST, '/', 1, 2));                                    /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"\", StringUtils.join(MIXED_TYPE_LIST, '/', 2, 1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testJoin_ArrayChar$catena_10() {\n        try{ assertEquals(null, StringUtils.join((Object[]) null, ','));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(TEXT_LIST_CHAR, StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\";;foo\", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR_CHAR));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo;2\", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR_CHAR));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"/\", StringUtils.join(MIXED_ARRAY_LIST, '/', 0, MIXED_ARRAY_LIST.length-1));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 1));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"null\", StringUtils.join(NULL_TO_STRING_LIST,'/', 0, 1));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo/2\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 2));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"2\", StringUtils.join(MIXED_TYPE_LIST, '/', 1, 2));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"\", StringUtils.join(MIXED_TYPE_LIST, '/', 2, 1));                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
        ]
    }
}