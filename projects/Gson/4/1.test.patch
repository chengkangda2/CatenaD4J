{
    "com.google.gson.stream.JsonReaderTest::testTopLevelValueTypes": {
        "begin_line_no": 1222,
        "end_line_no": 1247,
        "file_path": "gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
        "to": [
            "  public void testTopLevelValueTypes$catena_7() throws IOException {\n    JsonReader reader1 = new JsonReader(reader(\"true\"));\n    try{ assertTrue(reader1.nextBoolean());                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(JsonToken.END_DOCUMENT, reader1.peek());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    JsonReader reader2 = new JsonReader(reader(\"false\"));\n    try{ assertFalse(reader2.nextBoolean());                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(JsonToken.END_DOCUMENT, reader2.peek());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    JsonReader reader3 = new JsonReader(reader(\"null\"));\n    try{ assertEquals(JsonToken.NULL, reader3.peek());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    reader3.nextNull();\n    try{ assertEquals(JsonToken.END_DOCUMENT, reader3.peek());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    JsonReader reader4 = new JsonReader(reader(\"123\"));\n    try{ assertEquals(123, reader4.nextInt());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertEquals(JsonToken.END_DOCUMENT, reader4.peek());                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n\n    JsonReader reader5 = new JsonReader(reader(\"123.4\"));\n    try{ assertEquals(123.4, reader5.nextDouble());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(JsonToken.END_DOCUMENT, reader5.peek());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    JsonReader reader6 = new JsonReader(reader(\"\\\"a\\\"\"));\n    try{ assertEquals(\"a\", reader6.nextString());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(JsonToken.END_DOCUMENT, reader6.peek());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testTopLevelValueTypes$catena_2() throws IOException {\n    JsonReader reader1 = new JsonReader(reader(\"true\"));\n    try{ assertTrue(reader1.nextBoolean());                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(JsonToken.END_DOCUMENT, reader1.peek());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    JsonReader reader2 = new JsonReader(reader(\"false\"));\n    assertFalse(reader2.nextBoolean());                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertEquals(JsonToken.END_DOCUMENT, reader2.peek());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    JsonReader reader3 = new JsonReader(reader(\"null\"));\n    try{ assertEquals(JsonToken.NULL, reader3.peek());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    reader3.nextNull();\n    try{ assertEquals(JsonToken.END_DOCUMENT, reader3.peek());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    JsonReader reader4 = new JsonReader(reader(\"123\"));\n    try{ assertEquals(123, reader4.nextInt());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(JsonToken.END_DOCUMENT, reader4.peek());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    JsonReader reader5 = new JsonReader(reader(\"123.4\"));\n    try{ assertEquals(123.4, reader5.nextDouble());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(JsonToken.END_DOCUMENT, reader5.peek());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    JsonReader reader6 = new JsonReader(reader(\"\\\"a\\\"\"));\n    try{ assertEquals(\"a\", reader6.nextString());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(JsonToken.END_DOCUMENT, reader6.peek());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testTopLevelValueTypes$catena_4() throws IOException {\n    JsonReader reader1 = new JsonReader(reader(\"true\"));\n    try{ assertTrue(reader1.nextBoolean());                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(JsonToken.END_DOCUMENT, reader1.peek());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    JsonReader reader2 = new JsonReader(reader(\"false\"));\n    try{ assertFalse(reader2.nextBoolean());                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(JsonToken.END_DOCUMENT, reader2.peek());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    JsonReader reader3 = new JsonReader(reader(\"null\"));\n    assertEquals(JsonToken.NULL, reader3.peek());                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    reader3.nextNull();\n    try{ assertEquals(JsonToken.END_DOCUMENT, reader3.peek());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    JsonReader reader4 = new JsonReader(reader(\"123\"));\n    try{ assertEquals(123, reader4.nextInt());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(JsonToken.END_DOCUMENT, reader4.peek());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    JsonReader reader5 = new JsonReader(reader(\"123.4\"));\n    try{ assertEquals(123.4, reader5.nextDouble());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(JsonToken.END_DOCUMENT, reader5.peek());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    JsonReader reader6 = new JsonReader(reader(\"\\\"a\\\"\"));\n    try{ assertEquals(\"a\", reader6.nextString());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(JsonToken.END_DOCUMENT, reader6.peek());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testTopLevelValueTypes$catena_9() throws IOException {\n    JsonReader reader1 = new JsonReader(reader(\"true\"));\n    try{ assertTrue(reader1.nextBoolean());                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(JsonToken.END_DOCUMENT, reader1.peek());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    JsonReader reader2 = new JsonReader(reader(\"false\"));\n    try{ assertFalse(reader2.nextBoolean());                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(JsonToken.END_DOCUMENT, reader2.peek());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    JsonReader reader3 = new JsonReader(reader(\"null\"));\n    try{ assertEquals(JsonToken.NULL, reader3.peek());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    reader3.nextNull();\n    try{ assertEquals(JsonToken.END_DOCUMENT, reader3.peek());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    JsonReader reader4 = new JsonReader(reader(\"123\"));\n    try{ assertEquals(123, reader4.nextInt());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(JsonToken.END_DOCUMENT, reader4.peek());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    JsonReader reader5 = new JsonReader(reader(\"123.4\"));\n    try{ assertEquals(123.4, reader5.nextDouble());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertEquals(JsonToken.END_DOCUMENT, reader5.peek());                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n\n    JsonReader reader6 = new JsonReader(reader(\"\\\"a\\\"\"));\n    try{ assertEquals(\"a\", reader6.nextString());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(JsonToken.END_DOCUMENT, reader6.peek());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testTopLevelValueTypes$catena_1() throws IOException {\n    JsonReader reader1 = new JsonReader(reader(\"true\"));\n    try{ assertTrue(reader1.nextBoolean());                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertEquals(JsonToken.END_DOCUMENT, reader1.peek());                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n\n    JsonReader reader2 = new JsonReader(reader(\"false\"));\n    try{ assertFalse(reader2.nextBoolean());                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(JsonToken.END_DOCUMENT, reader2.peek());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    JsonReader reader3 = new JsonReader(reader(\"null\"));\n    try{ assertEquals(JsonToken.NULL, reader3.peek());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    reader3.nextNull();\n    try{ assertEquals(JsonToken.END_DOCUMENT, reader3.peek());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    JsonReader reader4 = new JsonReader(reader(\"123\"));\n    try{ assertEquals(123, reader4.nextInt());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(JsonToken.END_DOCUMENT, reader4.peek());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    JsonReader reader5 = new JsonReader(reader(\"123.4\"));\n    try{ assertEquals(123.4, reader5.nextDouble());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(JsonToken.END_DOCUMENT, reader5.peek());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    JsonReader reader6 = new JsonReader(reader(\"\\\"a\\\"\"));\n    try{ assertEquals(\"a\", reader6.nextString());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(JsonToken.END_DOCUMENT, reader6.peek());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testTopLevelValueTypes$catena_0() throws IOException {\n    JsonReader reader1 = new JsonReader(reader(\"true\"));\n    assertTrue(reader1.nextBoolean());                                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertEquals(JsonToken.END_DOCUMENT, reader1.peek());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    JsonReader reader2 = new JsonReader(reader(\"false\"));\n    try{ assertFalse(reader2.nextBoolean());                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(JsonToken.END_DOCUMENT, reader2.peek());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    JsonReader reader3 = new JsonReader(reader(\"null\"));\n    try{ assertEquals(JsonToken.NULL, reader3.peek());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    reader3.nextNull();\n    try{ assertEquals(JsonToken.END_DOCUMENT, reader3.peek());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    JsonReader reader4 = new JsonReader(reader(\"123\"));\n    try{ assertEquals(123, reader4.nextInt());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(JsonToken.END_DOCUMENT, reader4.peek());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    JsonReader reader5 = new JsonReader(reader(\"123.4\"));\n    try{ assertEquals(123.4, reader5.nextDouble());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(JsonToken.END_DOCUMENT, reader5.peek());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    JsonReader reader6 = new JsonReader(reader(\"\\\"a\\\"\"));\n    try{ assertEquals(\"a\", reader6.nextString());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(JsonToken.END_DOCUMENT, reader6.peek());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testTopLevelValueTypes$catena_8() throws IOException {\n    JsonReader reader1 = new JsonReader(reader(\"true\"));\n    try{ assertTrue(reader1.nextBoolean());                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(JsonToken.END_DOCUMENT, reader1.peek());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    JsonReader reader2 = new JsonReader(reader(\"false\"));\n    try{ assertFalse(reader2.nextBoolean());                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(JsonToken.END_DOCUMENT, reader2.peek());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    JsonReader reader3 = new JsonReader(reader(\"null\"));\n    try{ assertEquals(JsonToken.NULL, reader3.peek());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    reader3.nextNull();\n    try{ assertEquals(JsonToken.END_DOCUMENT, reader3.peek());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    JsonReader reader4 = new JsonReader(reader(\"123\"));\n    try{ assertEquals(123, reader4.nextInt());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(JsonToken.END_DOCUMENT, reader4.peek());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    JsonReader reader5 = new JsonReader(reader(\"123.4\"));\n    assertEquals(123.4, reader5.nextDouble());                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertEquals(JsonToken.END_DOCUMENT, reader5.peek());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    JsonReader reader6 = new JsonReader(reader(\"\\\"a\\\"\"));\n    try{ assertEquals(\"a\", reader6.nextString());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(JsonToken.END_DOCUMENT, reader6.peek());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testTopLevelValueTypes$catena_6() throws IOException {\n    JsonReader reader1 = new JsonReader(reader(\"true\"));\n    try{ assertTrue(reader1.nextBoolean());                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(JsonToken.END_DOCUMENT, reader1.peek());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    JsonReader reader2 = new JsonReader(reader(\"false\"));\n    try{ assertFalse(reader2.nextBoolean());                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(JsonToken.END_DOCUMENT, reader2.peek());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    JsonReader reader3 = new JsonReader(reader(\"null\"));\n    try{ assertEquals(JsonToken.NULL, reader3.peek());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    reader3.nextNull();\n    try{ assertEquals(JsonToken.END_DOCUMENT, reader3.peek());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    JsonReader reader4 = new JsonReader(reader(\"123\"));\n    assertEquals(123, reader4.nextInt());                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertEquals(JsonToken.END_DOCUMENT, reader4.peek());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    JsonReader reader5 = new JsonReader(reader(\"123.4\"));\n    try{ assertEquals(123.4, reader5.nextDouble());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(JsonToken.END_DOCUMENT, reader5.peek());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    JsonReader reader6 = new JsonReader(reader(\"\\\"a\\\"\"));\n    try{ assertEquals(\"a\", reader6.nextString());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(JsonToken.END_DOCUMENT, reader6.peek());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testTopLevelValueTypes$catena_3() throws IOException {\n    JsonReader reader1 = new JsonReader(reader(\"true\"));\n    try{ assertTrue(reader1.nextBoolean());                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(JsonToken.END_DOCUMENT, reader1.peek());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    JsonReader reader2 = new JsonReader(reader(\"false\"));\n    try{ assertFalse(reader2.nextBoolean());                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertEquals(JsonToken.END_DOCUMENT, reader2.peek());                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n\n    JsonReader reader3 = new JsonReader(reader(\"null\"));\n    try{ assertEquals(JsonToken.NULL, reader3.peek());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    reader3.nextNull();\n    try{ assertEquals(JsonToken.END_DOCUMENT, reader3.peek());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    JsonReader reader4 = new JsonReader(reader(\"123\"));\n    try{ assertEquals(123, reader4.nextInt());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(JsonToken.END_DOCUMENT, reader4.peek());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    JsonReader reader5 = new JsonReader(reader(\"123.4\"));\n    try{ assertEquals(123.4, reader5.nextDouble());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(JsonToken.END_DOCUMENT, reader5.peek());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    JsonReader reader6 = new JsonReader(reader(\"\\\"a\\\"\"));\n    try{ assertEquals(\"a\", reader6.nextString());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(JsonToken.END_DOCUMENT, reader6.peek());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testTopLevelValueTypes$catena_5() throws IOException {\n    JsonReader reader1 = new JsonReader(reader(\"true\"));\n    try{ assertTrue(reader1.nextBoolean());                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(JsonToken.END_DOCUMENT, reader1.peek());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    JsonReader reader2 = new JsonReader(reader(\"false\"));\n    try{ assertFalse(reader2.nextBoolean());                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(JsonToken.END_DOCUMENT, reader2.peek());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    JsonReader reader3 = new JsonReader(reader(\"null\"));\n    try{ assertEquals(JsonToken.NULL, reader3.peek());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    reader3.nextNull();\n    assertEquals(JsonToken.END_DOCUMENT, reader3.peek());                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n\n    JsonReader reader4 = new JsonReader(reader(\"123\"));\n    try{ assertEquals(123, reader4.nextInt());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(JsonToken.END_DOCUMENT, reader4.peek());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    JsonReader reader5 = new JsonReader(reader(\"123.4\"));\n    try{ assertEquals(123.4, reader5.nextDouble());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(JsonToken.END_DOCUMENT, reader5.peek());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    JsonReader reader6 = new JsonReader(reader(\"\\\"a\\\"\"));\n    try{ assertEquals(\"a\", reader6.nextString());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(JsonToken.END_DOCUMENT, reader6.peek());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n  }"
        ]
    },
    "com.google.gson.stream.JsonWriterTest::testTopLevelValueTypes": {
        "begin_line_no": 28,
        "end_line_no": 58,
        "file_path": "gson/src/test/java/com/google/gson/stream/JsonWriterTest.java",
        "to": [
            ""
        ]
    }
}