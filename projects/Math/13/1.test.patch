{
    "org.apache.commons.math3.optimization.fitting.PolynomialFitterTest::testLargeSample": {
        "begin_line_no": 226,
        "end_line_no": 251,
        "file_path": "src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java",
        "to": [
            "    @Test\n    public void testLargeSample$catena_1() {\n        Random randomizer = new Random(0x5551480dca5b369bl);\n        double maxError = 0;\n        for (int degree = 0; degree < 10; ++degree) {\n            PolynomialFunction p = buildRandomPolynomial(degree, randomizer);\n\n            PolynomialFitter fitter = new PolynomialFitter(new LevenbergMarquardtOptimizer());\n            for (int i = 0; i < 40000; ++i) {\n                double x = -1.0 + i / 20000.0;\n                fitter.addObservedPoint(1.0, x,\n                                        p.value(x) + 0.1 * randomizer.nextGaussian());\n            }\n\n            final double[] init = new double[degree + 1];\n            PolynomialFunction fitted = new PolynomialFunction(fitter.fit(init));\n\n            for (double x = -1.0; x < 1.0; x += 0.01) {\n                double error = FastMath.abs(p.value(x) - fitted.value(x)) /\n                              (1.0 + FastMath.abs(p.value(x)));\n                maxError = FastMath.max(maxError, error);\n                try{ Assert.assertTrue(FastMath.abs(error) < 0.01);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n        Assert.assertTrue(maxError > 0.001);                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n    }",
            "    @Test\n    public void testLargeSample$catena_0() {\n        Random randomizer = new Random(0x5551480dca5b369bl);\n        double maxError = 0;\n        for (int degree = 0; degree < 10; ++degree) {\n            PolynomialFunction p = buildRandomPolynomial(degree, randomizer);\n\n            PolynomialFitter fitter = new PolynomialFitter(new LevenbergMarquardtOptimizer());\n            for (int i = 0; i < 40000; ++i) {\n                double x = -1.0 + i / 20000.0;\n                fitter.addObservedPoint(1.0, x,\n                                        p.value(x) + 0.1 * randomizer.nextGaussian());\n            }\n\n            final double[] init = new double[degree + 1];\n            PolynomialFunction fitted = new PolynomialFunction(fitter.fit(init));\n\n            for (double x = -1.0; x < 1.0; x += 0.01) {\n                double error = FastMath.abs(p.value(x) - fitted.value(x)) /\n                              (1.0 + FastMath.abs(p.value(x)));\n                maxError = FastMath.max(maxError, error);\n                Assert.assertTrue(FastMath.abs(error) < 0.01);                                              /***** ORIGINAL ASSERTION IS HERE *****/\n            }\n        }\n        try{ Assert.assertTrue(maxError > 0.001);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    }
}