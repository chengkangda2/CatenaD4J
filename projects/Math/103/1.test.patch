{
    "org.apache.commons.math.distribution.NormalDistributionTest::testExtremeValues": {
        "begin_line_no": 128,
        "end_line_no": 144,
        "file_path": "src/test/org/apache/commons/math/distribution/NormalDistributionTest.java",
        "to": [
            "    public void testExtremeValues$catena_2() throws Exception {\n        NormalDistribution distribution = (NormalDistribution) getDistribution();\n        distribution.setMean(0);\n        distribution.setStandardDeviation(1);\n        for (int i = 0; i < 100; i+=5) { // make sure no convergence exception\n            double lowerTail = distribution.cumulativeProbability((double)-i);\n            double upperTail = distribution.cumulativeProbability((double) i);\n            if (i < 10) { // make sure not top-coded\n                try{ assertTrue(lowerTail > 0.0d);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertTrue(upperTail < 1.0d);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            else { // make sure top coding not reversed\n                assertTrue(lowerTail < 0.00001);                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n                try{ assertTrue(upperTail > 0.99999);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        } \n   }",
            "    public void testExtremeValues$catena_1() throws Exception {\n        NormalDistribution distribution = (NormalDistribution) getDistribution();\n        distribution.setMean(0);\n        distribution.setStandardDeviation(1);\n        for (int i = 0; i < 100; i+=5) { // make sure no convergence exception\n            double lowerTail = distribution.cumulativeProbability((double)-i);\n            double upperTail = distribution.cumulativeProbability((double) i);\n            if (i < 10) { // make sure not top-coded\n                try{ assertTrue(lowerTail > 0.0d);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n                assertTrue(upperTail < 1.0d);                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n            }\n            else { // make sure top coding not reversed\n                try{ assertTrue(lowerTail < 0.00001);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertTrue(upperTail > 0.99999);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        } \n   }",
            "    public void testExtremeValues$catena_0() throws Exception {\n        NormalDistribution distribution = (NormalDistribution) getDistribution();\n        distribution.setMean(0);\n        distribution.setStandardDeviation(1);\n        for (int i = 0; i < 100; i+=5) { // make sure no convergence exception\n            double lowerTail = distribution.cumulativeProbability((double)-i);\n            double upperTail = distribution.cumulativeProbability((double) i);\n            if (i < 10) { // make sure not top-coded\n                assertTrue(lowerTail > 0.0d);                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n                try{ assertTrue(upperTail < 1.0d);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            else { // make sure top coding not reversed\n                try{ assertTrue(lowerTail < 0.00001);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertTrue(upperTail > 0.99999);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        } \n   }",
            "    public void testExtremeValues$catena_3() throws Exception {\n        NormalDistribution distribution = (NormalDistribution) getDistribution();\n        distribution.setMean(0);\n        distribution.setStandardDeviation(1);\n        for (int i = 0; i < 100; i+=5) { // make sure no convergence exception\n            double lowerTail = distribution.cumulativeProbability((double)-i);\n            double upperTail = distribution.cumulativeProbability((double) i);\n            if (i < 10) { // make sure not top-coded\n                try{ assertTrue(lowerTail > 0.0d);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertTrue(upperTail < 1.0d);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            else { // make sure top coding not reversed\n                try{ assertTrue(lowerTail < 0.00001);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n                assertTrue(upperTail > 0.99999);                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n            }\n        } \n   }"
        ]
    }
}