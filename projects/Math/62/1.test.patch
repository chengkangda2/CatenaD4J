{
    "org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizerTest::testQuinticMin": {
        "begin_line_no": 57,
        "end_line_no": 80,
        "file_path": "src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java",
        "to": [
            "    @Test\n    public void testQuinticMin$catena_0() throws MathException {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer(1e-9, 1e-14);\n        underlying.setMaxEvaluations(300);\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(4312000053L);\n        MultiStartUnivariateRealOptimizer optimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n\n        UnivariateRealPointValuePair optimum\n            = optimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2);\n        assertEquals(-0.2719561293, optimum.getPoint(), 1e-9);                                              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(-0.0443342695, optimum.getValue(), 1e-9);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        UnivariateRealPointValuePair[] optima = optimizer.getOptima();\n        for (int i = 0; i < optima.length; ++i) {\n            try{ assertEquals(f.value(optima[i].getPoint()), optima[i].getValue(), 1e-9);                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertTrue(optimizer.getEvaluations() >= 50);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(optimizer.getEvaluations() <= 100);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void testQuinticMin$catena_4() throws MathException {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer(1e-9, 1e-14);\n        underlying.setMaxEvaluations(300);\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(4312000053L);\n        MultiStartUnivariateRealOptimizer optimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n\n        UnivariateRealPointValuePair optimum\n            = optimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2);\n        try{ assertEquals(-0.2719561293, optimum.getPoint(), 1e-9);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.0443342695, optimum.getValue(), 1e-9);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        UnivariateRealPointValuePair[] optima = optimizer.getOptima();\n        for (int i = 0; i < optima.length; ++i) {\n            try{ assertEquals(f.value(optima[i].getPoint()), optima[i].getValue(), 1e-9);                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertTrue(optimizer.getEvaluations() >= 50);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(optimizer.getEvaluations() <= 100);                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n    }",
            "    @Test\n    public void testQuinticMin$catena_1() throws MathException {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer(1e-9, 1e-14);\n        underlying.setMaxEvaluations(300);\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(4312000053L);\n        MultiStartUnivariateRealOptimizer optimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n\n        UnivariateRealPointValuePair optimum\n            = optimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2);\n        try{ assertEquals(-0.2719561293, optimum.getPoint(), 1e-9);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(-0.0443342695, optimum.getValue(), 1e-9);                                              /***** ORIGINAL ASSERTION IS HERE *****/\n\n        UnivariateRealPointValuePair[] optima = optimizer.getOptima();\n        for (int i = 0; i < optima.length; ++i) {\n            try{ assertEquals(f.value(optima[i].getPoint()), optima[i].getValue(), 1e-9);                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertTrue(optimizer.getEvaluations() >= 50);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(optimizer.getEvaluations() <= 100);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void testQuinticMin$catena_2() throws MathException {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer(1e-9, 1e-14);\n        underlying.setMaxEvaluations(300);\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(4312000053L);\n        MultiStartUnivariateRealOptimizer optimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n\n        UnivariateRealPointValuePair optimum\n            = optimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2);\n        try{ assertEquals(-0.2719561293, optimum.getPoint(), 1e-9);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.0443342695, optimum.getValue(), 1e-9);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        UnivariateRealPointValuePair[] optima = optimizer.getOptima();\n        for (int i = 0; i < optima.length; ++i) {\n            assertEquals(f.value(optima[i].getPoint()), optima[i].getValue(), 1e-9);                        /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n        try{ assertTrue(optimizer.getEvaluations() >= 50);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(optimizer.getEvaluations() <= 100);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void testQuinticMin$catena_3() throws MathException {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer(1e-9, 1e-14);\n        underlying.setMaxEvaluations(300);\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(4312000053L);\n        MultiStartUnivariateRealOptimizer optimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n\n        UnivariateRealPointValuePair optimum\n            = optimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2);\n        try{ assertEquals(-0.2719561293, optimum.getPoint(), 1e-9);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.0443342695, optimum.getValue(), 1e-9);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        UnivariateRealPointValuePair[] optima = optimizer.getOptima();\n        for (int i = 0; i < optima.length; ++i) {\n            try{ assertEquals(f.value(optima[i].getPoint()), optima[i].getValue(), 1e-9);                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        assertTrue(optimizer.getEvaluations() >= 50);                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(optimizer.getEvaluations() <= 100);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    }
}