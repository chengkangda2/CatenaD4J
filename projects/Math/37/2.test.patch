{
    "org.apache.commons.math.complex.ComplexTest::testTanInf": {
        "begin_line_no": 1013,
        "end_line_no": 1023,
        "file_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "to": [
            "    @Test\n    public void testTanInf$catena_1() {\n        try{ TestUtils.assertSame(Complex.valueOf(0.0, 1.0), oneInf.tan());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        TestUtils.assertSame(Complex.valueOf(0.0, -1.0), oneNegInf.tan());                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ TestUtils.assertSame(Complex.NaN, infOne.tan());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfOne.tan());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infInf.tan());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infNegInf.tan());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfInf.tan());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfNegInf.tan());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void testTanInf$catena_0() {\n        TestUtils.assertSame(Complex.valueOf(0.0, 1.0), oneInf.tan());                                      /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ TestUtils.assertSame(Complex.valueOf(0.0, -1.0), oneNegInf.tan());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infOne.tan());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfOne.tan());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infInf.tan());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infNegInf.tan());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfInf.tan());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfNegInf.tan());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    },
    "org.apache.commons.math.complex.ComplexTest::testTan": {
        "begin_line_no": 994,
        "end_line_no": 1006,
        "file_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "to": [
            "    @Test\n    public void testTan$catena_1() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(-0.000187346, 0.999356);\n        try{ TestUtils.assertEquals(expected, z.tan(), 1.0e-5);                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        /* Check that no overflow occurs (MATH-722) */\n        Complex actual = new Complex(3.0, 1E10).tan();\n        expected = new Complex(0, 1);\n        TestUtils.assertEquals(expected, actual, 1.0e-5);                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        actual = new Complex(3.0, -1E10).tan();\n        expected = new Complex(0, -1);\n        try{ TestUtils.assertEquals(expected, actual, 1.0e-5);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void testTan$catena_2() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(-0.000187346, 0.999356);\n        try{ TestUtils.assertEquals(expected, z.tan(), 1.0e-5);                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        /* Check that no overflow occurs (MATH-722) */\n        Complex actual = new Complex(3.0, 1E10).tan();\n        expected = new Complex(0, 1);\n        try{ TestUtils.assertEquals(expected, actual, 1.0e-5);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        actual = new Complex(3.0, -1E10).tan();\n        expected = new Complex(0, -1);\n        TestUtils.assertEquals(expected, actual, 1.0e-5);                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
        ]
    }
}