{
    "org.apache.commons.math.dfp.DfpTest::testIssue567": {
        "begin_line_no": 1509,
        "end_line_no": 1516,
        "file_path": "src/test/java/org/apache/commons/math/dfp/DfpTest.java",
        "to": [
            "    @Test\n    public void testIssue567$catena_3() {\n        DfpField field = new DfpField(100);\n        try{ Assert.assertEquals(0.0, field.getZero().toDouble(), MathUtils.SAFE_MIN);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ Assert.assertEquals(0.0, field.newDfp(0.0).toDouble(), MathUtils.SAFE_MIN);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ Assert.assertEquals(-1, FastMath.copySign(1, field.newDfp(-0.0).toDouble()), MathUtils.EPSILON);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        Assert.assertEquals(+1, FastMath.copySign(1, field.newDfp(+0.0).toDouble()), MathUtils.EPSILON);         /***** ORIGINAL ASSERTION IS HERE *****/\n    }",
            "    @Test\n    public void testIssue567$catena_0() {\n        DfpField field = new DfpField(100);\n        Assert.assertEquals(0.0, field.getZero().toDouble(), MathUtils.SAFE_MIN);                                /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ Assert.assertEquals(0.0, field.newDfp(0.0).toDouble(), MathUtils.SAFE_MIN);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ Assert.assertEquals(-1, FastMath.copySign(1, field.newDfp(-0.0).toDouble()), MathUtils.EPSILON);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ Assert.assertEquals(+1, FastMath.copySign(1, field.newDfp(+0.0).toDouble()), MathUtils.EPSILON);    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void testIssue567$catena_1() {\n        DfpField field = new DfpField(100);\n        try{ Assert.assertEquals(0.0, field.getZero().toDouble(), MathUtils.SAFE_MIN);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        Assert.assertEquals(0.0, field.newDfp(0.0).toDouble(), MathUtils.SAFE_MIN);                              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ Assert.assertEquals(-1, FastMath.copySign(1, field.newDfp(-0.0).toDouble()), MathUtils.EPSILON);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ Assert.assertEquals(+1, FastMath.copySign(1, field.newDfp(+0.0).toDouble()), MathUtils.EPSILON);    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    }
}