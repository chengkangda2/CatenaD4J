{
    "org.apache.commons.math.util.MathUtilsTest::testGcd": {
        "begin_line_no": 407,
        "end_line_no": 455,
        "file_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "to": [
            "    public void testGcd$catena_17() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.gcd(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(b, MathUtils.gcd(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.gcd(0, -b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(-a, 0));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(10, MathUtils.gcd(a, b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(a, -b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(1, MathUtils.gcd(a, c));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(a, -c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, -c));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, 0);\n            fail(\"expecting ArithmeticException\");                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(0, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n    }",
            "    public void testGcd$catena_18() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.gcd(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(b, MathUtils.gcd(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.gcd(0, -b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(-a, 0));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(10, MathUtils.gcd(a, b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(a, -b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(1, MathUtils.gcd(a, c));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(a, -c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, -c));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(0, Integer.MIN_VALUE);\n            fail(\"expecting ArithmeticException\");                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n    }"
        ]
    }
}