{
    "org.apache.commons.math.util.MathUtilsTest::testLcm": {
        "begin_line_no": 565,
        "end_line_no": 609,
        "file_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "to": [
            "    public void testLcm$catena_11() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.lcm(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, MathUtils.lcm(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.lcm(1, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.lcm(a, 1));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(-a, b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(-a, -b));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2310, MathUtils.lcm(a, c));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Assert that no intermediate value overflows:\n        // The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)\n        try{ assertEquals((1<<20)*15, MathUtils.lcm((1<<20)*3, (1<<20)*5));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Special case\n        try{ assertEquals(0, MathUtils.lcm(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1);\n            fail(\"Expecting ArithmeticException\");                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n        \n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1<<20);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n\n        try {\n            MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n    }",
            "    public void testLcm$catena_12() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.lcm(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, MathUtils.lcm(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.lcm(1, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.lcm(a, 1));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(-a, b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(-a, -b));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2310, MathUtils.lcm(a, c));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Assert that no intermediate value overflows:\n        // The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)\n        try{ assertEquals((1<<20)*15, MathUtils.lcm((1<<20)*3, (1<<20)*5));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Special case\n        try{ assertEquals(0, MathUtils.lcm(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n        \n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1<<20);\n            fail(\"Expecting ArithmeticException\");                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n\n        try {\n            MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n    }",
            "    public void testLcm$catena_0() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        assertEquals(0, MathUtils.lcm(0, b));                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(0, MathUtils.lcm(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.lcm(1, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.lcm(a, 1));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(-a, b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(-a, -b));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2310, MathUtils.lcm(a, c));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Assert that no intermediate value overflows:\n        // The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)\n        try{ assertEquals((1<<20)*15, MathUtils.lcm((1<<20)*3, (1<<20)*5));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Special case\n        try{ assertEquals(0, MathUtils.lcm(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n        \n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1<<20);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n\n        try {\n            MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n    }",
            "    public void testLcm$catena_1() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.lcm(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(0, MathUtils.lcm(a, 0));                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(b, MathUtils.lcm(1, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.lcm(a, 1));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(-a, b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(-a, -b));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2310, MathUtils.lcm(a, c));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Assert that no intermediate value overflows:\n        // The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)\n        try{ assertEquals((1<<20)*15, MathUtils.lcm((1<<20)*3, (1<<20)*5));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Special case\n        try{ assertEquals(0, MathUtils.lcm(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n        \n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1<<20);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n\n        try {\n            MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n    }",
            "    public void testLcm$catena_2() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.lcm(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, MathUtils.lcm(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(b, MathUtils.lcm(1, b));                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(a, MathUtils.lcm(a, 1));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(-a, b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(-a, -b));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2310, MathUtils.lcm(a, c));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Assert that no intermediate value overflows:\n        // The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)\n        try{ assertEquals((1<<20)*15, MathUtils.lcm((1<<20)*3, (1<<20)*5));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Special case\n        try{ assertEquals(0, MathUtils.lcm(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n        \n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1<<20);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n\n        try {\n            MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n    }",
            "    public void testLcm$catena_3() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.lcm(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, MathUtils.lcm(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.lcm(1, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(a, MathUtils.lcm(a, 1));                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(150, MathUtils.lcm(a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(-a, b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(-a, -b));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2310, MathUtils.lcm(a, c));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Assert that no intermediate value overflows:\n        // The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)\n        try{ assertEquals((1<<20)*15, MathUtils.lcm((1<<20)*3, (1<<20)*5));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Special case\n        try{ assertEquals(0, MathUtils.lcm(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n        \n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1<<20);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n\n        try {\n            MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n    }",
            "    public void testLcm$catena_4() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.lcm(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, MathUtils.lcm(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.lcm(1, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.lcm(a, 1));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(150, MathUtils.lcm(a, b));                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(150, MathUtils.lcm(-a, b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(-a, -b));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2310, MathUtils.lcm(a, c));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Assert that no intermediate value overflows:\n        // The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)\n        try{ assertEquals((1<<20)*15, MathUtils.lcm((1<<20)*3, (1<<20)*5));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Special case\n        try{ assertEquals(0, MathUtils.lcm(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n        \n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1<<20);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n\n        try {\n            MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n    }",
            "    public void testLcm$catena_5() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.lcm(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, MathUtils.lcm(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.lcm(1, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.lcm(a, 1));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(150, MathUtils.lcm(-a, b));                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(150, MathUtils.lcm(a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(-a, -b));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2310, MathUtils.lcm(a, c));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Assert that no intermediate value overflows:\n        // The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)\n        try{ assertEquals((1<<20)*15, MathUtils.lcm((1<<20)*3, (1<<20)*5));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Special case\n        try{ assertEquals(0, MathUtils.lcm(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n        \n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1<<20);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n\n        try {\n            MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n    }",
            "    public void testLcm$catena_6() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.lcm(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, MathUtils.lcm(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.lcm(1, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.lcm(a, 1));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(-a, b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(150, MathUtils.lcm(a, -b));                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(150, MathUtils.lcm(-a, -b));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2310, MathUtils.lcm(a, c));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Assert that no intermediate value overflows:\n        // The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)\n        try{ assertEquals((1<<20)*15, MathUtils.lcm((1<<20)*3, (1<<20)*5));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Special case\n        try{ assertEquals(0, MathUtils.lcm(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n        \n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1<<20);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n\n        try {\n            MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n    }",
            "    public void testLcm$catena_7() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.lcm(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, MathUtils.lcm(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.lcm(1, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.lcm(a, 1));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(-a, b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(150, MathUtils.lcm(-a, -b));                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(2310, MathUtils.lcm(a, c));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Assert that no intermediate value overflows:\n        // The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)\n        try{ assertEquals((1<<20)*15, MathUtils.lcm((1<<20)*3, (1<<20)*5));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Special case\n        try{ assertEquals(0, MathUtils.lcm(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n        \n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1<<20);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n\n        try {\n            MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n    }",
            "    public void testLcm$catena_8() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.lcm(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, MathUtils.lcm(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.lcm(1, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.lcm(a, 1));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(-a, b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(-a, -b));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(2310, MathUtils.lcm(a, c));                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // Assert that no intermediate value overflows:\n        // The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)\n        try{ assertEquals((1<<20)*15, MathUtils.lcm((1<<20)*3, (1<<20)*5));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Special case\n        try{ assertEquals(0, MathUtils.lcm(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n        \n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1<<20);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n\n        try {\n            MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n    }",
            "    public void testLcm$catena_9() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.lcm(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, MathUtils.lcm(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.lcm(1, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.lcm(a, 1));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(-a, b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(-a, -b));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2310, MathUtils.lcm(a, c));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Assert that no intermediate value overflows:\n        // The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)\n        assertEquals((1<<20)*15, MathUtils.lcm((1<<20)*3, (1<<20)*5));                                      /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // Special case\n        try{ assertEquals(0, MathUtils.lcm(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n        \n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1<<20);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n\n        try {\n            MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n    }",
            "    public void testLcm$catena_10() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.lcm(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, MathUtils.lcm(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.lcm(1, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.lcm(a, 1));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(-a, b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(-a, -b));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2310, MathUtils.lcm(a, c));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Assert that no intermediate value overflows:\n        // The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)\n        try{ assertEquals((1<<20)*15, MathUtils.lcm((1<<20)*3, (1<<20)*5));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Special case\n        assertEquals(0, MathUtils.lcm(0, 0));                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n        \n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1<<20);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n\n        try {\n            MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n    }",
            "    public void testLcm$catena_13() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.lcm(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, MathUtils.lcm(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.lcm(1, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.lcm(a, 1));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(-a, b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(150, MathUtils.lcm(-a, -b));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2310, MathUtils.lcm(a, c));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Assert that no intermediate value overflows:\n        // The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)\n        try{ assertEquals((1<<20)*15, MathUtils.lcm((1<<20)*3, (1<<20)*5));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Special case\n        try{ assertEquals(0, MathUtils.lcm(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n        \n        try {\n            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int\n            MathUtils.lcm(Integer.MIN_VALUE, 1<<20);\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n\n        try {\n            MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);\n            fail(\"Expecting ArithmeticException\");                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n    }"
        ]
    },
    "org.apache.commons.math.util.MathUtilsTest::testGcd": {
        "begin_line_no": 407,
        "end_line_no": 455,
        "file_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "to": [
            "    public void testGcd$catena_0() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        assertEquals(0, MathUtils.gcd(0, 0));                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ assertEquals(b, MathUtils.gcd(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.gcd(0, -b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(-a, 0));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(10, MathUtils.gcd(a, b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(a, -b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(1, MathUtils.gcd(a, c));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(a, -c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, -c));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(0, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n    }",
            "    public void testGcd$catena_1() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.gcd(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        assertEquals(b, MathUtils.gcd(0, b));                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(a, MathUtils.gcd(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.gcd(0, -b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(-a, 0));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(10, MathUtils.gcd(a, b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(a, -b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(1, MathUtils.gcd(a, c));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(a, -c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, -c));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(0, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n    }",
            "    public void testGcd$catena_2() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.gcd(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(b, MathUtils.gcd(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(a, MathUtils.gcd(a, 0));                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(b, MathUtils.gcd(0, -b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(-a, 0));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(10, MathUtils.gcd(a, b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(a, -b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(1, MathUtils.gcd(a, c));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(a, -c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, -c));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(0, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n    }",
            "    public void testGcd$catena_3() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.gcd(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(b, MathUtils.gcd(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(b, MathUtils.gcd(0, -b));                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(a, MathUtils.gcd(-a, 0));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(10, MathUtils.gcd(a, b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(a, -b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(1, MathUtils.gcd(a, c));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(a, -c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, -c));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(0, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n    }",
            "    public void testGcd$catena_4() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.gcd(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(b, MathUtils.gcd(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.gcd(0, -b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(a, MathUtils.gcd(-a, 0));                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ assertEquals(10, MathUtils.gcd(a, b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(a, -b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(1, MathUtils.gcd(a, c));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(a, -c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, -c));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(0, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n    }",
            "    public void testGcd$catena_5() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.gcd(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(b, MathUtils.gcd(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.gcd(0, -b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(-a, 0));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        assertEquals(10, MathUtils.gcd(a, b));                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(10, MathUtils.gcd(-a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(a, -b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(1, MathUtils.gcd(a, c));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(a, -c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, -c));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(0, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n    }",
            "    public void testGcd$catena_6() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.gcd(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(b, MathUtils.gcd(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.gcd(0, -b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(-a, 0));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(10, MathUtils.gcd(a, b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(10, MathUtils.gcd(-a, b));                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(10, MathUtils.gcd(a, -b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(1, MathUtils.gcd(a, c));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(a, -c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, -c));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(0, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n    }",
            "    public void testGcd$catena_7() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.gcd(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(b, MathUtils.gcd(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.gcd(0, -b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(-a, 0));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(10, MathUtils.gcd(a, b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(10, MathUtils.gcd(a, -b));                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(10, MathUtils.gcd(-a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(1, MathUtils.gcd(a, c));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(a, -c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, -c));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(0, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n    }",
            "    public void testGcd$catena_8() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.gcd(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(b, MathUtils.gcd(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.gcd(0, -b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(-a, 0));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(10, MathUtils.gcd(a, b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(a, -b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(10, MathUtils.gcd(-a, -b));                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ assertEquals(1, MathUtils.gcd(a, c));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(a, -c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, -c));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(0, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n    }",
            "    public void testGcd$catena_9() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.gcd(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(b, MathUtils.gcd(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.gcd(0, -b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(-a, 0));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(10, MathUtils.gcd(a, b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(a, -b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        assertEquals(1, MathUtils.gcd(a, c));                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(1, MathUtils.gcd(-a, c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(a, -c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, -c));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(0, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n    }",
            "    public void testGcd$catena_10() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.gcd(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(b, MathUtils.gcd(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.gcd(0, -b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(-a, 0));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(10, MathUtils.gcd(a, b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(a, -b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(1, MathUtils.gcd(a, c));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(1, MathUtils.gcd(-a, c));                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(1, MathUtils.gcd(a, -c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, -c));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(0, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n    }",
            "    public void testGcd$catena_11() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.gcd(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(b, MathUtils.gcd(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.gcd(0, -b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(-a, 0));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(10, MathUtils.gcd(a, b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(a, -b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(1, MathUtils.gcd(a, c));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(1, MathUtils.gcd(a, -c));                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(1, MathUtils.gcd(-a, -c));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(0, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n    }",
            "    public void testGcd$catena_12() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.gcd(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(b, MathUtils.gcd(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.gcd(0, -b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(-a, 0));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(10, MathUtils.gcd(a, b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(a, -b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(1, MathUtils.gcd(a, c));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(a, -c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(1, MathUtils.gcd(-a, -c));                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(0, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n    }",
            "    public void testGcd$catena_13() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.gcd(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(b, MathUtils.gcd(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.gcd(0, -b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(-a, 0));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(10, MathUtils.gcd(a, b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(a, -b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(1, MathUtils.gcd(a, c));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(a, -c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, -c));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                                 /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(0, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n    }",
            "    public void testGcd$catena_14() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.gcd(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(b, MathUtils.gcd(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.gcd(0, -b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(-a, 0));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(10, MathUtils.gcd(a, b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(a, -b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(1, MathUtils.gcd(a, c));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(a, -c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, -c));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(0, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n    }",
            "    public void testGcd$catena_15() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.gcd(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(b, MathUtils.gcd(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.gcd(0, -b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(-a, 0));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(10, MathUtils.gcd(a, b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(a, -b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(1, MathUtils.gcd(a, c));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(a, -c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, -c));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(0, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n    }",
            "    public void testGcd$catena_16() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.gcd(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(b, MathUtils.gcd(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.gcd(0, -b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(-a, 0));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(10, MathUtils.gcd(a, b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(a, -b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(1, MathUtils.gcd(a, c));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(a, -c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, -c));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                      /***** ORIGINAL ASSERTION IS HERE *****/\n        try {\n            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(0, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n    }",
            "    public void testGcd$catena_19() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        try{ assertEquals(0, MathUtils.gcd(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(b, MathUtils.gcd(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(b, MathUtils.gcd(0, -b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(a, MathUtils.gcd(-a, 0));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(10, MathUtils.gcd(a, b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(a, -b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(10, MathUtils.gcd(-a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(1, MathUtils.gcd(a, c));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(a, -c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, MathUtils.gcd(-a, -c));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(0, Integer.MIN_VALUE);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n        try {\n            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE\n            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);\n            fail(\"expecting ArithmeticException\");                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (ArithmeticException expected) {\n            // expected\n        }\n    }"
        ]
    }
}