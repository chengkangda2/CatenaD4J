{
    "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest::testIssue716": {
        "begin_line_no": 84,
        "end_line_no": 97,
        "file_path": "src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java",
        "to": [
            "    @Test\n    public void testIssue716$catena_0() {\n        BracketingNthOrderBrentSolver solver =\n                new BracketingNthOrderBrentSolver(1.0e-12, 1.0e-10, 1.0e-22, 5);\n        UnivariateFunction sharpTurn = new UnivariateFunction() {\n            public double value(double x) {\n                return (2 * x + 1) / (1.0e9 * (x + 1));\n            }\n        };\n        double result = solver.solve(100, sharpTurn, -0.9999999, 30, 15, AllowedSolution.RIGHT_SIDE);\n        Assert.assertEquals(0, sharpTurn.value(result), solver.getFunctionValueAccuracy());                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ Assert.assertTrue(sharpTurn.value(result) >= 0);                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ Assert.assertEquals(-0.5, result, 1.0e-10);                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void testIssue716$catena_2() {\n        BracketingNthOrderBrentSolver solver =\n                new BracketingNthOrderBrentSolver(1.0e-12, 1.0e-10, 1.0e-22, 5);\n        UnivariateFunction sharpTurn = new UnivariateFunction() {\n            public double value(double x) {\n                return (2 * x + 1) / (1.0e9 * (x + 1));\n            }\n        };\n        double result = solver.solve(100, sharpTurn, -0.9999999, 30, 15, AllowedSolution.RIGHT_SIDE);\n        try{ Assert.assertEquals(0, sharpTurn.value(result), solver.getFunctionValueAccuracy());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ Assert.assertTrue(sharpTurn.value(result) >= 0);                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        Assert.assertEquals(-0.5, result, 1.0e-10);                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n    }",
            "    @Test\n    public void testIssue716$catena_1() {\n        BracketingNthOrderBrentSolver solver =\n                new BracketingNthOrderBrentSolver(1.0e-12, 1.0e-10, 1.0e-22, 5);\n        UnivariateFunction sharpTurn = new UnivariateFunction() {\n            public double value(double x) {\n                return (2 * x + 1) / (1.0e9 * (x + 1));\n            }\n        };\n        double result = solver.solve(100, sharpTurn, -0.9999999, 30, 15, AllowedSolution.RIGHT_SIDE);\n        try{ Assert.assertEquals(0, sharpTurn.value(result), solver.getFunctionValueAccuracy());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        Assert.assertTrue(sharpTurn.value(result) >= 0);                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ Assert.assertEquals(-0.5, result, 1.0e-10);                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    }
}