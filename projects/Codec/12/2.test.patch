{
    "org.apache.commons.codec.binary.Base64InputStreamTest::testAvailable": {
        "begin_line_no": 160,
        "end_line_no": 171,
        "file_path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
        "to": [
            "    @Test\n    public void testAvailable$catena_0() throws Throwable {\n        InputStream ins = new ByteArrayInputStream(StringUtils.getBytesIso8859_1(ENCODED_B64));\n        Base64InputStream b64stream = new Base64InputStream(ins);\n        assertEquals(1, b64stream.available());                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(6, b64stream.skip(10));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        // End of stream reached\n        try{ assertEquals(0, b64stream.available());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, b64stream.read());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, b64stream.read());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, b64stream.available());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void testAvailable$catena_2() throws Throwable {\n        InputStream ins = new ByteArrayInputStream(StringUtils.getBytesIso8859_1(ENCODED_B64));\n        Base64InputStream b64stream = new Base64InputStream(ins);\n        try{ assertEquals(1, b64stream.available());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(6, b64stream.skip(10));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        // End of stream reached\n        assertEquals(0, b64stream.available());                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(-1, b64stream.read());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, b64stream.read());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, b64stream.available());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void testAvailable$catena_3() throws Throwable {\n        InputStream ins = new ByteArrayInputStream(StringUtils.getBytesIso8859_1(ENCODED_B64));\n        Base64InputStream b64stream = new Base64InputStream(ins);\n        try{ assertEquals(1, b64stream.available());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(6, b64stream.skip(10));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        // End of stream reached\n        try{ assertEquals(0, b64stream.available());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(-1, b64stream.read());                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(-1, b64stream.read());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, b64stream.available());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void testAvailable$catena_4() throws Throwable {\n        InputStream ins = new ByteArrayInputStream(StringUtils.getBytesIso8859_1(ENCODED_B64));\n        Base64InputStream b64stream = new Base64InputStream(ins);\n        try{ assertEquals(1, b64stream.available());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(6, b64stream.skip(10));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        // End of stream reached\n        try{ assertEquals(0, b64stream.available());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, b64stream.read());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(-1, b64stream.read());                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(0, b64stream.available());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void testAvailable$catena_5() throws Throwable {\n        InputStream ins = new ByteArrayInputStream(StringUtils.getBytesIso8859_1(ENCODED_B64));\n        Base64InputStream b64stream = new Base64InputStream(ins);\n        try{ assertEquals(1, b64stream.available());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(6, b64stream.skip(10));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        // End of stream reached\n        try{ assertEquals(0, b64stream.available());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, b64stream.read());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, b64stream.read());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(0, b64stream.available());                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
        ]
    },
    "org.apache.commons.codec.binary.Base32InputStreamTest::testAvailable": {
        "begin_line_no": 152,
        "end_line_no": 163,
        "file_path": "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java",
        "to": [
            "    @Test\n    public void testAvailable$catena_0() throws Throwable {\n        InputStream ins = new ByteArrayInputStream(StringUtils.getBytesIso8859_1(ENCODED_FOO));\n        Base32InputStream b32stream = new Base32InputStream(ins);\n        assertEquals(1, b32stream.available());                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(3, b32stream.skip(10));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        // End of stream reached\n        try{ assertEquals(0, b32stream.available());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, b32stream.read());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, b32stream.read());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, b32stream.available());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void testAvailable$catena_2() throws Throwable {\n        InputStream ins = new ByteArrayInputStream(StringUtils.getBytesIso8859_1(ENCODED_FOO));\n        Base32InputStream b32stream = new Base32InputStream(ins);\n        try{ assertEquals(1, b32stream.available());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, b32stream.skip(10));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        // End of stream reached\n        assertEquals(0, b32stream.available());                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(-1, b32stream.read());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, b32stream.read());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, b32stream.available());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void testAvailable$catena_3() throws Throwable {\n        InputStream ins = new ByteArrayInputStream(StringUtils.getBytesIso8859_1(ENCODED_FOO));\n        Base32InputStream b32stream = new Base32InputStream(ins);\n        try{ assertEquals(1, b32stream.available());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, b32stream.skip(10));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        // End of stream reached\n        try{ assertEquals(0, b32stream.available());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(-1, b32stream.read());                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(-1, b32stream.read());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, b32stream.available());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void testAvailable$catena_4() throws Throwable {\n        InputStream ins = new ByteArrayInputStream(StringUtils.getBytesIso8859_1(ENCODED_FOO));\n        Base32InputStream b32stream = new Base32InputStream(ins);\n        try{ assertEquals(1, b32stream.available());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, b32stream.skip(10));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        // End of stream reached\n        try{ assertEquals(0, b32stream.available());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, b32stream.read());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(-1, b32stream.read());                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(0, b32stream.available());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void testAvailable$catena_5() throws Throwable {\n        InputStream ins = new ByteArrayInputStream(StringUtils.getBytesIso8859_1(ENCODED_FOO));\n        Base32InputStream b32stream = new Base32InputStream(ins);\n        try{ assertEquals(1, b32stream.available());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, b32stream.skip(10));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        // End of stream reached\n        try{ assertEquals(0, b32stream.available());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, b32stream.read());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, b32stream.read());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(0, b32stream.available());                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
        ]
    },
    "org.apache.commons.codec.binary.Base32InputStreamTest::testSkipToEnd": {
        "begin_line_no": 521,
        "end_line_no": 530,
        "file_path": "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java",
        "to": [
            "    @Test\n    public void testSkipToEnd$catena_0() throws Throwable {\n        InputStream ins = new ByteArrayInputStream(StringUtils.getBytesIso8859_1(ENCODED_FOO));\n        Base32InputStream b32stream = new Base32InputStream(ins);\n        // due to CODEC-130, skip now skips correctly decoded characters rather than encoded\n        assertEquals(3, b32stream.skip(3));                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        // End of stream reached\n        try{ assertEquals(-1, b32stream.read());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, b32stream.read());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void testSkipToEnd$catena_2() throws Throwable {\n        InputStream ins = new ByteArrayInputStream(StringUtils.getBytesIso8859_1(ENCODED_FOO));\n        Base32InputStream b32stream = new Base32InputStream(ins);\n        // due to CODEC-130, skip now skips correctly decoded characters rather than encoded\n        try{ assertEquals(3, b32stream.skip(3));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // End of stream reached\n        try{ assertEquals(-1, b32stream.read());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(-1, b32stream.read());                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
        ]
    },
    "org.apache.commons.codec.binary.Base32InputStreamTest::testCodec130": {
        "begin_line_no": 47,
        "end_line_no": 64,
        "file_path": "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java",
        "to": [
            ""
        ]
    },
    "org.apache.commons.codec.binary.Base32InputStreamTest::testSkipWrongArgument": {
        "begin_line_no": 537,
        "end_line_no": 542,
        "file_path": "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java",
        "to": [
            ""
        ]
    },
    "org.apache.commons.codec.binary.Base32InputStreamTest::testSkipPastEnd": {
        "begin_line_no": 505,
        "end_line_no": 514,
        "file_path": "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java",
        "to": [
            "    @Test\n    public void testSkipPastEnd$catena_1() throws Throwable {\n        InputStream ins = new ByteArrayInputStream(StringUtils.getBytesIso8859_1(ENCODED_FOO));\n        Base32InputStream b32stream = new Base32InputStream(ins);\n        // due to CODEC-130, skip now skips correctly decoded characters rather than encoded\n        try{ assertEquals(3, b32stream.skip(10));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        // End of stream reached\n        assertEquals(-1, b32stream.read());                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(-1, b32stream.read());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void testSkipPastEnd$catena_2() throws Throwable {\n        InputStream ins = new ByteArrayInputStream(StringUtils.getBytesIso8859_1(ENCODED_FOO));\n        Base32InputStream b32stream = new Base32InputStream(ins);\n        // due to CODEC-130, skip now skips correctly decoded characters rather than encoded\n        try{ assertEquals(3, b32stream.skip(10));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        // End of stream reached\n        try{ assertEquals(-1, b32stream.read());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(-1, b32stream.read());                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
        ]
    },
    "org.apache.commons.codec.binary.Base32InputStreamTest::testSkipBig": {
        "begin_line_no": 490,
        "end_line_no": 498,
        "file_path": "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java",
        "to": [
            "    @Test\n    public void testSkipBig$catena_1() throws Throwable {\n        InputStream ins = new ByteArrayInputStream(StringUtils.getBytesIso8859_1(ENCODED_FOO));\n        Base32InputStream b32stream = new Base32InputStream(ins);\n        try{ assertEquals(3, b32stream.skip(1024));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        // End of stream reached\n        assertEquals(-1, b32stream.read());                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(-1, b32stream.read());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void testSkipBig$catena_2() throws Throwable {\n        InputStream ins = new ByteArrayInputStream(StringUtils.getBytesIso8859_1(ENCODED_FOO));\n        Base32InputStream b32stream = new Base32InputStream(ins);\n        try{ assertEquals(3, b32stream.skip(1024));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        // End of stream reached\n        try{ assertEquals(-1, b32stream.read());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(-1, b32stream.read());                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
        ]
    },
    "org.apache.commons.codec.binary.Base64InputStreamTest::testSkipToEnd": {
        "begin_line_no": 532,
        "end_line_no": 541,
        "file_path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
        "to": [
            "    @Test\n    public void testSkipToEnd$catena_0() throws Throwable {\n        InputStream ins = new ByteArrayInputStream(StringUtils.getBytesIso8859_1(ENCODED_B64));\n        Base64InputStream b64stream = new Base64InputStream(ins);\n        // due to CODEC-130, skip now skips correctly decoded characters rather than encoded\n        assertEquals(6, b64stream.skip(6));                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        // End of stream reached\n        try{ assertEquals(-1, b64stream.read());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, b64stream.read());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void testSkipToEnd$catena_2() throws Throwable {\n        InputStream ins = new ByteArrayInputStream(StringUtils.getBytesIso8859_1(ENCODED_B64));\n        Base64InputStream b64stream = new Base64InputStream(ins);\n        // due to CODEC-130, skip now skips correctly decoded characters rather than encoded\n        try{ assertEquals(6, b64stream.skip(6));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // End of stream reached\n        try{ assertEquals(-1, b64stream.read());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(-1, b64stream.read());                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
        ]
    },
    "org.apache.commons.codec.binary.Base64InputStreamTest::testCodec130": {
        "begin_line_no": 57,
        "end_line_no": 74,
        "file_path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
        "to": [
            ""
        ]
    },
    "org.apache.commons.codec.binary.Base64InputStreamTest::testSkipWrongArgument": {
        "begin_line_no": 548,
        "end_line_no": 553,
        "file_path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
        "to": [
            ""
        ]
    },
    "org.apache.commons.codec.binary.Base64InputStreamTest::testSkipPastEnd": {
        "begin_line_no": 516,
        "end_line_no": 525,
        "file_path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
        "to": [
            "    @Test\n    public void testSkipPastEnd$catena_1() throws Throwable {\n        InputStream ins = new ByteArrayInputStream(StringUtils.getBytesIso8859_1(ENCODED_B64));\n        Base64InputStream b64stream = new Base64InputStream(ins);\n        // due to CODEC-130, skip now skips correctly decoded characters rather than encoded\n        try{ assertEquals(6, b64stream.skip(10));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        // End of stream reached\n        assertEquals(-1, b64stream.read());                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(-1, b64stream.read());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void testSkipPastEnd$catena_2() throws Throwable {\n        InputStream ins = new ByteArrayInputStream(StringUtils.getBytesIso8859_1(ENCODED_B64));\n        Base64InputStream b64stream = new Base64InputStream(ins);\n        // due to CODEC-130, skip now skips correctly decoded characters rather than encoded\n        try{ assertEquals(6, b64stream.skip(10));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        // End of stream reached\n        try{ assertEquals(-1, b64stream.read());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(-1, b64stream.read());                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
        ]
    },
    "org.apache.commons.codec.binary.Base64InputStreamTest::testSkipBig": {
        "begin_line_no": 484,
        "end_line_no": 492,
        "file_path": "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java",
        "to": [
            "    @Test\n    public void testSkipBig$catena_1() throws Throwable {\n        InputStream ins = new ByteArrayInputStream(StringUtils.getBytesIso8859_1(ENCODED_B64));\n        Base64InputStream b64stream = new Base64InputStream(ins);\n        try{ assertEquals(6, b64stream.skip(1024));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        // End of stream reached\n        assertEquals(-1, b64stream.read());                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(-1, b64stream.read());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void testSkipBig$catena_2() throws Throwable {\n        InputStream ins = new ByteArrayInputStream(StringUtils.getBytesIso8859_1(ENCODED_B64));\n        Base64InputStream b64stream = new Base64InputStream(ins);\n        try{ assertEquals(6, b64stream.skip(1024));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        // End of stream reached\n        try{ assertEquals(-1, b64stream.read());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(-1, b64stream.read());                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
        ]
    }
}