{
    "org.apache.commons.codec.language.DoubleMetaphoneTest::testCodec184": {
        "begin_line_no": 1063,
        "end_line_no": 1071,
        "file_path": "src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
        "to": [
            "    @Test\n    public void testCodec184$catena_1() throws Throwable {\n        try{ assertTrue(new DoubleMetaphone().isDoubleMetaphoneEqual(\"\", \"\", false));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(new DoubleMetaphone().isDoubleMetaphoneEqual(\"\", \"\", true));                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertFalse(new DoubleMetaphone().isDoubleMetaphoneEqual(\"aa\", \"\", false));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(new DoubleMetaphone().isDoubleMetaphoneEqual(\"aa\", \"\", true));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(new DoubleMetaphone().isDoubleMetaphoneEqual(\"\", \"aa\", false));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(new DoubleMetaphone().isDoubleMetaphoneEqual(\"\", \"aa\", true));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n      }",
            "    @Test\n    public void testCodec184$catena_5() throws Throwable {\n        try{ assertTrue(new DoubleMetaphone().isDoubleMetaphoneEqual(\"\", \"\", false));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(new DoubleMetaphone().isDoubleMetaphoneEqual(\"\", \"\", true));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(new DoubleMetaphone().isDoubleMetaphoneEqual(\"aa\", \"\", false));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(new DoubleMetaphone().isDoubleMetaphoneEqual(\"aa\", \"\", true));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(new DoubleMetaphone().isDoubleMetaphoneEqual(\"\", \"aa\", false));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertFalse(new DoubleMetaphone().isDoubleMetaphoneEqual(\"\", \"aa\", true));                          /***** ORIGINAL ASSERTION IS HERE *****/\n      }",
            "    @Test\n    public void testCodec184$catena_4() throws Throwable {\n        try{ assertTrue(new DoubleMetaphone().isDoubleMetaphoneEqual(\"\", \"\", false));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(new DoubleMetaphone().isDoubleMetaphoneEqual(\"\", \"\", true));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(new DoubleMetaphone().isDoubleMetaphoneEqual(\"aa\", \"\", false));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(new DoubleMetaphone().isDoubleMetaphoneEqual(\"aa\", \"\", true));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertFalse(new DoubleMetaphone().isDoubleMetaphoneEqual(\"\", \"aa\", false));                         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertFalse(new DoubleMetaphone().isDoubleMetaphoneEqual(\"\", \"aa\", true));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n      }",
            "    @Test\n    public void testCodec184$catena_0() throws Throwable {\n        assertTrue(new DoubleMetaphone().isDoubleMetaphoneEqual(\"\", \"\", false));                            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(new DoubleMetaphone().isDoubleMetaphoneEqual(\"\", \"\", true));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(new DoubleMetaphone().isDoubleMetaphoneEqual(\"aa\", \"\", false));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(new DoubleMetaphone().isDoubleMetaphoneEqual(\"aa\", \"\", true));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(new DoubleMetaphone().isDoubleMetaphoneEqual(\"\", \"aa\", false));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(new DoubleMetaphone().isDoubleMetaphoneEqual(\"\", \"aa\", true));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n      }",
            "    @Test\n    public void testCodec184$catena_2() throws Throwable {\n        try{ assertTrue(new DoubleMetaphone().isDoubleMetaphoneEqual(\"\", \"\", false));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(new DoubleMetaphone().isDoubleMetaphoneEqual(\"\", \"\", true));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertFalse(new DoubleMetaphone().isDoubleMetaphoneEqual(\"aa\", \"\", false));                         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertFalse(new DoubleMetaphone().isDoubleMetaphoneEqual(\"aa\", \"\", true));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(new DoubleMetaphone().isDoubleMetaphoneEqual(\"\", \"aa\", false));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(new DoubleMetaphone().isDoubleMetaphoneEqual(\"\", \"aa\", true));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n      }",
            "    @Test\n    public void testCodec184$catena_3() throws Throwable {\n        try{ assertTrue(new DoubleMetaphone().isDoubleMetaphoneEqual(\"\", \"\", false));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(new DoubleMetaphone().isDoubleMetaphoneEqual(\"\", \"\", true));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(new DoubleMetaphone().isDoubleMetaphoneEqual(\"aa\", \"\", false));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertFalse(new DoubleMetaphone().isDoubleMetaphoneEqual(\"aa\", \"\", true));                          /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertFalse(new DoubleMetaphone().isDoubleMetaphoneEqual(\"\", \"aa\", false));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(new DoubleMetaphone().isDoubleMetaphoneEqual(\"\", \"aa\", true));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n      }"
        ]
    },
    "org.apache.commons.codec.language.DoubleMetaphoneTest::testIsDoubleMetaphoneEqualBasic": {
        "begin_line_no": 1122,
        "end_line_no": 1138,
        "file_path": "src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java",
        "to": [
            "    @Test\n    public void testIsDoubleMetaphoneEqualBasic$catena_1() {\n        final String[][] testFixture = new String[][] { { \n                \"\", \"\" }, {\n                \"Case\", \"case\" }, {\n                \"CASE\", \"Case\" }, {\n                \"caSe\", \"cAsE\" }, {\n                \"cookie\", \"quick\" }, {\n                \"quick\", \"cookie\" }, {\n                \"Brian\", \"Bryan\" }, {\n                \"Auto\", \"Otto\" }, {\n                \"Steven\", \"Stefan\" }, {\n                \"Philipowitz\", \"Filipowicz\" }\n        };\n        try{ doubleMetaphoneEqualTest(testFixture, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        doubleMetaphoneEqualTest(testFixture, true);                                                        /***** ORIGINAL ASSERTION IS HERE *****/\n    }",
            "    @Test\n    public void testIsDoubleMetaphoneEqualBasic$catena_0() {\n        final String[][] testFixture = new String[][] { { \n                \"\", \"\" }, {\n                \"Case\", \"case\" }, {\n                \"CASE\", \"Case\" }, {\n                \"caSe\", \"cAsE\" }, {\n                \"cookie\", \"quick\" }, {\n                \"quick\", \"cookie\" }, {\n                \"Brian\", \"Bryan\" }, {\n                \"Auto\", \"Otto\" }, {\n                \"Steven\", \"Stefan\" }, {\n                \"Philipowitz\", \"Filipowicz\" }\n        };\n        doubleMetaphoneEqualTest(testFixture, false);                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ doubleMetaphoneEqualTest(testFixture, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    }
}