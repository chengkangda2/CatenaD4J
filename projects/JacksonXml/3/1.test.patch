{
    "com.fasterxml.jackson.dataformat.xml.stream.XmlParserNextXxxTest::testXmlAttributesWithNextTextValue": {
        "begin_line_no": 30,
        "end_line_no": 54,
        "file_path": "src/test/java/com/fasterxml/jackson/dataformat/xml/stream/XmlParserNextXxxTest.java",
        "to": [
            "    public void testXmlAttributesWithNextTextValue$catena_7() throws Exception\n    {\n        final String XML = \"<data max=\\\"7\\\" offset=\\\"9\\\"/>\";\n\n        FromXmlParser xp = (FromXmlParser) _xmlFactory.createParser(new StringReader(XML));\n\n        // First: verify handling without forcing array handling:\n        try{ assertToken(JsonToken.START_OBJECT, xp.nextToken());                                 }catch(Throwable __SHOULD_BE_IGNORED){} // <data>\n        try{ assertToken(JsonToken.FIELD_NAME, xp.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){} // <max>\n        try{ assertEquals(\"max\", xp.getCurrentName());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"7\", xp.nextTextValue());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.FIELD_NAME, xp.nextToken());                                 }catch(Throwable __SHOULD_BE_IGNORED){} // <offset>\n        try{ assertEquals(\"offset\", xp.getCurrentName());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"offset\", xp.getText());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        assertEquals(\"9\", xp.nextTextValue());                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ assertEquals(\"9\", xp.getText());                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.END_OBJECT, xp.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){} // </data>\n        xp.close();\n    }",
            "    public void testXmlAttributesWithNextTextValue$catena_3() throws Exception\n    {\n        final String XML = \"<data max=\\\"7\\\" offset=\\\"9\\\"/>\";\n\n        FromXmlParser xp = (FromXmlParser) _xmlFactory.createParser(new StringReader(XML));\n\n        // First: verify handling without forcing array handling:\n        try{ assertToken(JsonToken.START_OBJECT, xp.nextToken());                                 }catch(Throwable __SHOULD_BE_IGNORED){} // <data>\n        try{ assertToken(JsonToken.FIELD_NAME, xp.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){} // <max>\n        try{ assertEquals(\"max\", xp.getCurrentName());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        assertEquals(\"7\", xp.nextTextValue());                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ assertToken(JsonToken.FIELD_NAME, xp.nextToken());                                 }catch(Throwable __SHOULD_BE_IGNORED){} // <offset>\n        try{ assertEquals(\"offset\", xp.getCurrentName());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"offset\", xp.getText());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"9\", xp.nextTextValue());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"9\", xp.getText());                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.END_OBJECT, xp.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){} // </data>\n        xp.close();\n    }",
            "    public void testXmlAttributesWithNextTextValue$catena_0() throws Exception\n    {\n        final String XML = \"<data max=\\\"7\\\" offset=\\\"9\\\"/>\";\n\n        FromXmlParser xp = (FromXmlParser) _xmlFactory.createParser(new StringReader(XML));\n\n        // First: verify handling without forcing array handling:\n        assertToken(JsonToken.START_OBJECT, xp.nextToken());                                      /***** ORIGINAL ASSERTION IS HERE *****/ // <data>\n        try{ assertToken(JsonToken.FIELD_NAME, xp.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){} // <max>\n        try{ assertEquals(\"max\", xp.getCurrentName());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"7\", xp.nextTextValue());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.FIELD_NAME, xp.nextToken());                                 }catch(Throwable __SHOULD_BE_IGNORED){} // <offset>\n        try{ assertEquals(\"offset\", xp.getCurrentName());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"offset\", xp.getText());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"9\", xp.nextTextValue());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"9\", xp.getText());                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.END_OBJECT, xp.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){} // </data>\n        xp.close();\n    }",
            "    public void testXmlAttributesWithNextTextValue$catena_1() throws Exception\n    {\n        final String XML = \"<data max=\\\"7\\\" offset=\\\"9\\\"/>\";\n\n        FromXmlParser xp = (FromXmlParser) _xmlFactory.createParser(new StringReader(XML));\n\n        // First: verify handling without forcing array handling:\n        try{ assertToken(JsonToken.START_OBJECT, xp.nextToken());                                 }catch(Throwable __SHOULD_BE_IGNORED){} // <data>\n        assertToken(JsonToken.FIELD_NAME, xp.nextToken());                                         /***** ORIGINAL ASSERTION IS HERE *****/ // <max>\n        try{ assertEquals(\"max\", xp.getCurrentName());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"7\", xp.nextTextValue());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.FIELD_NAME, xp.nextToken());                                 }catch(Throwable __SHOULD_BE_IGNORED){} // <offset>\n        try{ assertEquals(\"offset\", xp.getCurrentName());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"offset\", xp.getText());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"9\", xp.nextTextValue());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"9\", xp.getText());                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.END_OBJECT, xp.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){} // </data>\n        xp.close();\n    }",
            "    public void testXmlAttributesWithNextTextValue$catena_2() throws Exception\n    {\n        final String XML = \"<data max=\\\"7\\\" offset=\\\"9\\\"/>\";\n\n        FromXmlParser xp = (FromXmlParser) _xmlFactory.createParser(new StringReader(XML));\n\n        // First: verify handling without forcing array handling:\n        try{ assertToken(JsonToken.START_OBJECT, xp.nextToken());                                 }catch(Throwable __SHOULD_BE_IGNORED){} // <data>\n        try{ assertToken(JsonToken.FIELD_NAME, xp.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){} // <max>\n        assertEquals(\"max\", xp.getCurrentName());                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ assertEquals(\"7\", xp.nextTextValue());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.FIELD_NAME, xp.nextToken());                                 }catch(Throwable __SHOULD_BE_IGNORED){} // <offset>\n        try{ assertEquals(\"offset\", xp.getCurrentName());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"offset\", xp.getText());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"9\", xp.nextTextValue());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"9\", xp.getText());                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.END_OBJECT, xp.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){} // </data>\n        xp.close();\n    }",
            "    public void testXmlAttributesWithNextTextValue$catena_4() throws Exception\n    {\n        final String XML = \"<data max=\\\"7\\\" offset=\\\"9\\\"/>\";\n\n        FromXmlParser xp = (FromXmlParser) _xmlFactory.createParser(new StringReader(XML));\n\n        // First: verify handling without forcing array handling:\n        try{ assertToken(JsonToken.START_OBJECT, xp.nextToken());                                 }catch(Throwable __SHOULD_BE_IGNORED){} // <data>\n        try{ assertToken(JsonToken.FIELD_NAME, xp.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){} // <max>\n        try{ assertEquals(\"max\", xp.getCurrentName());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"7\", xp.nextTextValue());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        assertToken(JsonToken.FIELD_NAME, xp.nextToken());                                      /***** ORIGINAL ASSERTION IS HERE *****/ // <offset>\n        try{ assertEquals(\"offset\", xp.getCurrentName());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"offset\", xp.getText());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"9\", xp.nextTextValue());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"9\", xp.getText());                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.END_OBJECT, xp.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){} // </data>\n        xp.close();\n    }",
            "    public void testXmlAttributesWithNextTextValue$catena_5() throws Exception\n    {\n        final String XML = \"<data max=\\\"7\\\" offset=\\\"9\\\"/>\";\n\n        FromXmlParser xp = (FromXmlParser) _xmlFactory.createParser(new StringReader(XML));\n\n        // First: verify handling without forcing array handling:\n        try{ assertToken(JsonToken.START_OBJECT, xp.nextToken());                                 }catch(Throwable __SHOULD_BE_IGNORED){} // <data>\n        try{ assertToken(JsonToken.FIELD_NAME, xp.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){} // <max>\n        try{ assertEquals(\"max\", xp.getCurrentName());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"7\", xp.nextTextValue());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.FIELD_NAME, xp.nextToken());                                 }catch(Throwable __SHOULD_BE_IGNORED){} // <offset>\n        assertEquals(\"offset\", xp.getCurrentName());                                                        /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ assertEquals(\"offset\", xp.getText());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"9\", xp.nextTextValue());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"9\", xp.getText());                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.END_OBJECT, xp.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){} // </data>\n        xp.close();\n    }",
            "    public void testXmlAttributesWithNextTextValue$catena_6() throws Exception\n    {\n        final String XML = \"<data max=\\\"7\\\" offset=\\\"9\\\"/>\";\n\n        FromXmlParser xp = (FromXmlParser) _xmlFactory.createParser(new StringReader(XML));\n\n        // First: verify handling without forcing array handling:\n        try{ assertToken(JsonToken.START_OBJECT, xp.nextToken());                                 }catch(Throwable __SHOULD_BE_IGNORED){} // <data>\n        try{ assertToken(JsonToken.FIELD_NAME, xp.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){} // <max>\n        try{ assertEquals(\"max\", xp.getCurrentName());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"7\", xp.nextTextValue());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.FIELD_NAME, xp.nextToken());                                 }catch(Throwable __SHOULD_BE_IGNORED){} // <offset>\n        try{ assertEquals(\"offset\", xp.getCurrentName());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        assertEquals(\"offset\", xp.getText());                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ assertEquals(\"9\", xp.nextTextValue());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"9\", xp.getText());                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.END_OBJECT, xp.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){} // </data>\n        xp.close();\n    }",
            "    public void testXmlAttributesWithNextTextValue$catena_8() throws Exception\n    {\n        final String XML = \"<data max=\\\"7\\\" offset=\\\"9\\\"/>\";\n\n        FromXmlParser xp = (FromXmlParser) _xmlFactory.createParser(new StringReader(XML));\n\n        // First: verify handling without forcing array handling:\n        try{ assertToken(JsonToken.START_OBJECT, xp.nextToken());                                 }catch(Throwable __SHOULD_BE_IGNORED){} // <data>\n        try{ assertToken(JsonToken.FIELD_NAME, xp.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){} // <max>\n        try{ assertEquals(\"max\", xp.getCurrentName());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"7\", xp.nextTextValue());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.FIELD_NAME, xp.nextToken());                                 }catch(Throwable __SHOULD_BE_IGNORED){} // <offset>\n        try{ assertEquals(\"offset\", xp.getCurrentName());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"offset\", xp.getText());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"9\", xp.nextTextValue());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        assertEquals(\"9\", xp.getText());                                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ assertToken(JsonToken.END_OBJECT, xp.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){} // </data>\n        xp.close();\n    }",
            "    public void testXmlAttributesWithNextTextValue$catena_9() throws Exception\n    {\n        final String XML = \"<data max=\\\"7\\\" offset=\\\"9\\\"/>\";\n\n        FromXmlParser xp = (FromXmlParser) _xmlFactory.createParser(new StringReader(XML));\n\n        // First: verify handling without forcing array handling:\n        try{ assertToken(JsonToken.START_OBJECT, xp.nextToken());                                 }catch(Throwable __SHOULD_BE_IGNORED){} // <data>\n        try{ assertToken(JsonToken.FIELD_NAME, xp.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){} // <max>\n        try{ assertEquals(\"max\", xp.getCurrentName());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"7\", xp.nextTextValue());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertToken(JsonToken.FIELD_NAME, xp.nextToken());                                 }catch(Throwable __SHOULD_BE_IGNORED){} // <offset>\n        try{ assertEquals(\"offset\", xp.getCurrentName());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"offset\", xp.getText());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"9\", xp.nextTextValue());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"9\", xp.getText());                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        assertToken(JsonToken.END_OBJECT, xp.nextToken());                                       /***** ORIGINAL ASSERTION IS HERE *****/ // </data>\n        xp.close();\n    }"
        ]
    }
}