{
    "com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest::testNestedWithEmpty2": {
        "begin_line_no": 103,
        "end_line_no": 123,
        "file_path": "src/test/java/com/fasterxml/jackson/dataformat/xml/lists/NestedUnwrappedListsTest.java",
        "to": [
            "    public void testNestedWithEmpty2$catena_4() throws Exception\n    {\n        final String XML =\n\"<ServiceDelivery>\\n\"\n+\"  <ResponseTimestamp>2012-09-12T09:28:17.213-04:00</ResponseTimestamp>\\n\"\n+\"  <VehicleMonitoringDelivery>\\n\"\n+\"    <VehicleActivity>\\n\"\n+\"    </VehicleActivity>\\n\"\n+\"  </VehicleMonitoringDelivery>\\n\"\n+\"</ServiceDelivery>\\n\"\n                ;\n        \n        ServiceDelivery svc = _xmlMapper.readValue(XML, ServiceDelivery.class);\n        try{ assertNotNull(svc);                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(svc.vehicleMonitoringDelivery);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, svc.vehicleMonitoringDelivery.size());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        VehicleMonitoringDelivery del = svc.vehicleMonitoringDelivery.get(0);\n        try{ assertNotNull(del.vehicleActivity);                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // 06-Jan-2015, tatu: Really should have one empty entry, not 0\n        assertEquals(1, del.vehicleActivity.size());                                                        /***** ORIGINAL ASSERTION IS HERE *****/\n    }",
            "    public void testNestedWithEmpty2$catena_0() throws Exception\n    {\n        final String XML =\n\"<ServiceDelivery>\\n\"\n+\"  <ResponseTimestamp>2012-09-12T09:28:17.213-04:00</ResponseTimestamp>\\n\"\n+\"  <VehicleMonitoringDelivery>\\n\"\n+\"    <VehicleActivity>\\n\"\n+\"    </VehicleActivity>\\n\"\n+\"  </VehicleMonitoringDelivery>\\n\"\n+\"</ServiceDelivery>\\n\"\n                ;\n        \n        ServiceDelivery svc = _xmlMapper.readValue(XML, ServiceDelivery.class);\n        assertNotNull(svc);                                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertNotNull(svc.vehicleMonitoringDelivery);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, svc.vehicleMonitoringDelivery.size());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        VehicleMonitoringDelivery del = svc.vehicleMonitoringDelivery.get(0);\n        try{ assertNotNull(del.vehicleActivity);                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // 06-Jan-2015, tatu: Really should have one empty entry, not 0\n        try{ assertEquals(1, del.vehicleActivity.size());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testNestedWithEmpty2$catena_1() throws Exception\n    {\n        final String XML =\n\"<ServiceDelivery>\\n\"\n+\"  <ResponseTimestamp>2012-09-12T09:28:17.213-04:00</ResponseTimestamp>\\n\"\n+\"  <VehicleMonitoringDelivery>\\n\"\n+\"    <VehicleActivity>\\n\"\n+\"    </VehicleActivity>\\n\"\n+\"  </VehicleMonitoringDelivery>\\n\"\n+\"</ServiceDelivery>\\n\"\n                ;\n        \n        ServiceDelivery svc = _xmlMapper.readValue(XML, ServiceDelivery.class);\n        try{ assertNotNull(svc);                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertNotNull(svc.vehicleMonitoringDelivery);                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(1, svc.vehicleMonitoringDelivery.size());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        VehicleMonitoringDelivery del = svc.vehicleMonitoringDelivery.get(0);\n        try{ assertNotNull(del.vehicleActivity);                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // 06-Jan-2015, tatu: Really should have one empty entry, not 0\n        try{ assertEquals(1, del.vehicleActivity.size());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testNestedWithEmpty2$catena_2() throws Exception\n    {\n        final String XML =\n\"<ServiceDelivery>\\n\"\n+\"  <ResponseTimestamp>2012-09-12T09:28:17.213-04:00</ResponseTimestamp>\\n\"\n+\"  <VehicleMonitoringDelivery>\\n\"\n+\"    <VehicleActivity>\\n\"\n+\"    </VehicleActivity>\\n\"\n+\"  </VehicleMonitoringDelivery>\\n\"\n+\"</ServiceDelivery>\\n\"\n                ;\n        \n        ServiceDelivery svc = _xmlMapper.readValue(XML, ServiceDelivery.class);\n        try{ assertNotNull(svc);                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(svc.vehicleMonitoringDelivery);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(1, svc.vehicleMonitoringDelivery.size());                                              /***** ORIGINAL ASSERTION IS HERE *****/\n        VehicleMonitoringDelivery del = svc.vehicleMonitoringDelivery.get(0);\n        try{ assertNotNull(del.vehicleActivity);                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // 06-Jan-2015, tatu: Really should have one empty entry, not 0\n        try{ assertEquals(1, del.vehicleActivity.size());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testNestedWithEmpty2$catena_3() throws Exception\n    {\n        final String XML =\n\"<ServiceDelivery>\\n\"\n+\"  <ResponseTimestamp>2012-09-12T09:28:17.213-04:00</ResponseTimestamp>\\n\"\n+\"  <VehicleMonitoringDelivery>\\n\"\n+\"    <VehicleActivity>\\n\"\n+\"    </VehicleActivity>\\n\"\n+\"  </VehicleMonitoringDelivery>\\n\"\n+\"</ServiceDelivery>\\n\"\n                ;\n        \n        ServiceDelivery svc = _xmlMapper.readValue(XML, ServiceDelivery.class);\n        try{ assertNotNull(svc);                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(svc.vehicleMonitoringDelivery);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, svc.vehicleMonitoringDelivery.size());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        VehicleMonitoringDelivery del = svc.vehicleMonitoringDelivery.get(0);\n        assertNotNull(del.vehicleActivity);                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        // 06-Jan-2015, tatu: Really should have one empty entry, not 0\n        try{ assertEquals(1, del.vehicleActivity.size());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    },
    "com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedListsTest::testNestedWithEmpty": {
        "begin_line_no": 86,
        "end_line_no": 101,
        "file_path": "src/test/java/com/fasterxml/jackson/dataformat/xml/lists/NestedUnwrappedListsTest.java",
        "to": [
            "    public void testNestedWithEmpty$catena_2() throws Exception\n    {\n        final String XML =\n\"<ServiceDelivery>\\n\"\n+\"  <ResponseTimestamp>2012-09-12T09:28:17.213-04:00</ResponseTimestamp>\\n\"\n+\"  <VehicleMonitoringDelivery>\\n\"\n+\"  </VehicleMonitoringDelivery>\\n\"\n+\"</ServiceDelivery>\\n\"\n                ;\n        \n        ServiceDelivery svc = _xmlMapper.readValue(XML, ServiceDelivery.class);\n        try{ assertNotNull(svc);                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(svc.vehicleMonitoringDelivery);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        // 06-Jan-2015, tatu: Really should have one empty entry, not 0\n        assertEquals(1, svc.vehicleMonitoringDelivery.size());                                              /***** ORIGINAL ASSERTION IS HERE *****/\n    }",
            "    public void testNestedWithEmpty$catena_0() throws Exception\n    {\n        final String XML =\n\"<ServiceDelivery>\\n\"\n+\"  <ResponseTimestamp>2012-09-12T09:28:17.213-04:00</ResponseTimestamp>\\n\"\n+\"  <VehicleMonitoringDelivery>\\n\"\n+\"  </VehicleMonitoringDelivery>\\n\"\n+\"</ServiceDelivery>\\n\"\n                ;\n        \n        ServiceDelivery svc = _xmlMapper.readValue(XML, ServiceDelivery.class);\n        assertNotNull(svc);                                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertNotNull(svc.vehicleMonitoringDelivery);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        // 06-Jan-2015, tatu: Really should have one empty entry, not 0\n        try{ assertEquals(1, svc.vehicleMonitoringDelivery.size());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testNestedWithEmpty$catena_1() throws Exception\n    {\n        final String XML =\n\"<ServiceDelivery>\\n\"\n+\"  <ResponseTimestamp>2012-09-12T09:28:17.213-04:00</ResponseTimestamp>\\n\"\n+\"  <VehicleMonitoringDelivery>\\n\"\n+\"  </VehicleMonitoringDelivery>\\n\"\n+\"</ServiceDelivery>\\n\"\n                ;\n        \n        ServiceDelivery svc = _xmlMapper.readValue(XML, ServiceDelivery.class);\n        try{ assertNotNull(svc);                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertNotNull(svc.vehicleMonitoringDelivery);                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n        // 06-Jan-2015, tatu: Really should have one empty entry, not 0\n        try{ assertEquals(1, svc.vehicleMonitoringDelivery.size());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    },
    "com.fasterxml.jackson.dataformat.xml.lists.NestedUnwrappedLists180Test::testNestedUnwrappedLists180": {
        "begin_line_no": 38,
        "end_line_no": 73,
        "file_path": "src/test/java/com/fasterxml/jackson/dataformat/xml/lists/NestedUnwrappedLists180Test.java",
        "to": [
            "    public void testNestedUnwrappedLists180$catena_0() throws Exception\n    {\n        /*\n        Records recs = new Records();\n        recs.records.add(new Record());\n        recs.records.add(new Record());\n        recs.records.add(new Record());\n        recs.records.get(0).fields.add(new Field(\"a\"));\n        recs.records.get(2).fields.add(new Field(\"b\"));\n\n        String xml = MAPPER.writerWithDefaultPrettyPrinter().writeValueAsString(recs);\n        */\n\n        String xml =\n\"<Records>\\n\"\n// Important: it's the empty CDATA here that causes breakage -- empty element alone would be fine\n//+\"<records>\\n</records>\\n\"\n+\"<records></records>\\n\"\n+\"  <records>\\n\"\n+\"   <fields name='b'/>\\n\"\n+\"  </records>\\n\"\n+\"</Records>\\n\"\n;\n        \n//System.out.println(\"XML: \"+xml);\n\n        Records result = MAPPER.readValue(xml, Records.class);\n        assertNotNull(result.records);                                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(2, result.records.size());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(result.records.get(1));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.records.get(1).fields.size());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"b\", result.records.get(1).fields.get(0).name);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // also, first one ought not be null should it? Ideally not...\n        try{ assertNotNull(result.records.get(0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testNestedUnwrappedLists180$catena_1() throws Exception\n    {\n        /*\n        Records recs = new Records();\n        recs.records.add(new Record());\n        recs.records.add(new Record());\n        recs.records.add(new Record());\n        recs.records.get(0).fields.add(new Field(\"a\"));\n        recs.records.get(2).fields.add(new Field(\"b\"));\n\n        String xml = MAPPER.writerWithDefaultPrettyPrinter().writeValueAsString(recs);\n        */\n\n        String xml =\n\"<Records>\\n\"\n// Important: it's the empty CDATA here that causes breakage -- empty element alone would be fine\n//+\"<records>\\n</records>\\n\"\n+\"<records></records>\\n\"\n+\"  <records>\\n\"\n+\"   <fields name='b'/>\\n\"\n+\"  </records>\\n\"\n+\"</Records>\\n\"\n;\n        \n//System.out.println(\"XML: \"+xml);\n\n        Records result = MAPPER.readValue(xml, Records.class);\n        try{ assertNotNull(result.records);                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(2, result.records.size());                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertNotNull(result.records.get(1));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.records.get(1).fields.size());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"b\", result.records.get(1).fields.get(0).name);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // also, first one ought not be null should it? Ideally not...\n        try{ assertNotNull(result.records.get(0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testNestedUnwrappedLists180$catena_2() throws Exception\n    {\n        /*\n        Records recs = new Records();\n        recs.records.add(new Record());\n        recs.records.add(new Record());\n        recs.records.add(new Record());\n        recs.records.get(0).fields.add(new Field(\"a\"));\n        recs.records.get(2).fields.add(new Field(\"b\"));\n\n        String xml = MAPPER.writerWithDefaultPrettyPrinter().writeValueAsString(recs);\n        */\n\n        String xml =\n\"<Records>\\n\"\n// Important: it's the empty CDATA here that causes breakage -- empty element alone would be fine\n//+\"<records>\\n</records>\\n\"\n+\"<records></records>\\n\"\n+\"  <records>\\n\"\n+\"   <fields name='b'/>\\n\"\n+\"  </records>\\n\"\n+\"</Records>\\n\"\n;\n        \n//System.out.println(\"XML: \"+xml);\n\n        Records result = MAPPER.readValue(xml, Records.class);\n        try{ assertNotNull(result.records);                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, result.records.size());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertNotNull(result.records.get(1));                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(1, result.records.get(1).fields.size());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"b\", result.records.get(1).fields.get(0).name);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // also, first one ought not be null should it? Ideally not...\n        try{ assertNotNull(result.records.get(0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testNestedUnwrappedLists180$catena_3() throws Exception\n    {\n        /*\n        Records recs = new Records();\n        recs.records.add(new Record());\n        recs.records.add(new Record());\n        recs.records.add(new Record());\n        recs.records.get(0).fields.add(new Field(\"a\"));\n        recs.records.get(2).fields.add(new Field(\"b\"));\n\n        String xml = MAPPER.writerWithDefaultPrettyPrinter().writeValueAsString(recs);\n        */\n\n        String xml =\n\"<Records>\\n\"\n// Important: it's the empty CDATA here that causes breakage -- empty element alone would be fine\n//+\"<records>\\n</records>\\n\"\n+\"<records></records>\\n\"\n+\"  <records>\\n\"\n+\"   <fields name='b'/>\\n\"\n+\"  </records>\\n\"\n+\"</Records>\\n\"\n;\n        \n//System.out.println(\"XML: \"+xml);\n\n        Records result = MAPPER.readValue(xml, Records.class);\n        try{ assertNotNull(result.records);                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, result.records.size());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(result.records.get(1));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(1, result.records.get(1).fields.size());                                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"b\", result.records.get(1).fields.get(0).name);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // also, first one ought not be null should it? Ideally not...\n        try{ assertNotNull(result.records.get(0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testNestedUnwrappedLists180$catena_4() throws Exception\n    {\n        /*\n        Records recs = new Records();\n        recs.records.add(new Record());\n        recs.records.add(new Record());\n        recs.records.add(new Record());\n        recs.records.get(0).fields.add(new Field(\"a\"));\n        recs.records.get(2).fields.add(new Field(\"b\"));\n\n        String xml = MAPPER.writerWithDefaultPrettyPrinter().writeValueAsString(recs);\n        */\n\n        String xml =\n\"<Records>\\n\"\n// Important: it's the empty CDATA here that causes breakage -- empty element alone would be fine\n//+\"<records>\\n</records>\\n\"\n+\"<records></records>\\n\"\n+\"  <records>\\n\"\n+\"   <fields name='b'/>\\n\"\n+\"  </records>\\n\"\n+\"</Records>\\n\"\n;\n        \n//System.out.println(\"XML: \"+xml);\n\n        Records result = MAPPER.readValue(xml, Records.class);\n        try{ assertNotNull(result.records);                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, result.records.size());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(result.records.get(1));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.records.get(1).fields.size());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"b\", result.records.get(1).fields.get(0).name);                                        /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // also, first one ought not be null should it? Ideally not...\n        try{ assertNotNull(result.records.get(0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    }
}