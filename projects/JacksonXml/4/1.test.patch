{
    "com.fasterxml.jackson.dataformat.xml.misc.RootNameTest::testDynamicRootName": {
        "begin_line_no": 67,
        "end_line_no": 82,
        "file_path": "src/test/java/com/fasterxml/jackson/dataformat/xml/misc/RootNameTest.java",
        "to": [
            "    public void testDynamicRootName$catena_2() throws IOException\n    {\n        String xml;\n\n        ObjectWriter w = _xmlMapper.writer().withRootName(\"rudy\");\n\n        xml = w.writeValueAsString(new StringBean(\"foo\"));\n        try{ assertEquals(\"<rudy><text>foo</text></rudy>\", xml);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        xml = w.writeValueAsString(new StringBean(null));\n        try{ assertEquals(\"<rudy><text/></rudy>\", xml);                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // and even with null will respect configured root name\n        xml = w.writeValueAsString(null);\n        assertEquals(\"<rudy/>\", xml);                                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n    }",
            "    public void testDynamicRootName$catena_0() throws IOException\n    {\n        String xml;\n\n        ObjectWriter w = _xmlMapper.writer().withRootName(\"rudy\");\n\n        xml = w.writeValueAsString(new StringBean(\"foo\"));\n        assertEquals(\"<rudy><text>foo</text></rudy>\", xml);                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n\n        xml = w.writeValueAsString(new StringBean(null));\n        try{ assertEquals(\"<rudy><text/></rudy>\", xml);                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // and even with null will respect configured root name\n        xml = w.writeValueAsString(null);\n        try{ assertEquals(\"<rudy/>\", xml);                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testDynamicRootName$catena_1() throws IOException\n    {\n        String xml;\n\n        ObjectWriter w = _xmlMapper.writer().withRootName(\"rudy\");\n\n        xml = w.writeValueAsString(new StringBean(\"foo\"));\n        try{ assertEquals(\"<rudy><text>foo</text></rudy>\", xml);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        xml = w.writeValueAsString(new StringBean(null));\n        assertEquals(\"<rudy><text/></rudy>\", xml);                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // and even with null will respect configured root name\n        xml = w.writeValueAsString(null);\n        try{ assertEquals(\"<rudy/>\", xml);                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    }
}