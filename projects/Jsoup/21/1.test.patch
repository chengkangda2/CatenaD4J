{
    "org.jsoup.select.SelectorTest::handlesCommasInSelector": {
        "begin_line_no": 588,
        "end_line_no": 599,
        "file_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "to": [
            "    @Test public void handlesCommasInSelector$catena_2() {\n        Document doc = Jsoup.parse(\"<p name='1,2'>One</p><div>Two</div><ol><li>123</li><li>Text</li></ol>\");\n\n        Elements ps = doc.select(\"[name=1,2]\");\n        try{ assertEquals(1, ps.size());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        Elements containers = doc.select(\"div, li:matches([0-9,]+)\");\n        try{ assertEquals(2, containers.size());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"div\", containers.get(0).tagName());                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"li\", containers.get(1).tagName());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"123\", containers.get(1).text());                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test public void handlesCommasInSelector$catena_1() {\n        Document doc = Jsoup.parse(\"<p name='1,2'>One</p><div>Two</div><ol><li>123</li><li>Text</li></ol>\");\n\n        Elements ps = doc.select(\"[name=1,2]\");\n        try{ assertEquals(1, ps.size());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        Elements containers = doc.select(\"div, li:matches([0-9,]+)\");\n        assertEquals(2, containers.size());                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"div\", containers.get(0).tagName());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"li\", containers.get(1).tagName());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"123\", containers.get(1).text());                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test public void handlesCommasInSelector$catena_3() {\n        Document doc = Jsoup.parse(\"<p name='1,2'>One</p><div>Two</div><ol><li>123</li><li>Text</li></ol>\");\n\n        Elements ps = doc.select(\"[name=1,2]\");\n        try{ assertEquals(1, ps.size());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        Elements containers = doc.select(\"div, li:matches([0-9,]+)\");\n        try{ assertEquals(2, containers.size());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"div\", containers.get(0).tagName());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"li\", containers.get(1).tagName());                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"123\", containers.get(1).text());                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test public void handlesCommasInSelector$catena_0() {\n        Document doc = Jsoup.parse(\"<p name='1,2'>One</p><div>Two</div><ol><li>123</li><li>Text</li></ol>\");\n\n        Elements ps = doc.select(\"[name=1,2]\");\n        assertEquals(1, ps.size());                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n\n        Elements containers = doc.select(\"div, li:matches([0-9,]+)\");\n        try{ assertEquals(2, containers.size());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"div\", containers.get(0).tagName());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"li\", containers.get(1).tagName());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"123\", containers.get(1).text());                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test public void handlesCommasInSelector$catena_4() {\n        Document doc = Jsoup.parse(\"<p name='1,2'>One</p><div>Two</div><ol><li>123</li><li>Text</li></ol>\");\n\n        Elements ps = doc.select(\"[name=1,2]\");\n        try{ assertEquals(1, ps.size());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        Elements containers = doc.select(\"div, li:matches([0-9,]+)\");\n        try{ assertEquals(2, containers.size());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"div\", containers.get(0).tagName());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"li\", containers.get(1).tagName());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"123\", containers.get(1).text());                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
        ]
    },
    "org.jsoup.select.SelectorTest::mixCombinatorGroup": {
        "begin_line_no": 324,
        "end_line_no": 332,
        "file_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "to": [
            "    @Test public void mixCombinatorGroup$catena_0() {\n        String h = \"<div class=foo><ol><li>One<li>Two<li>Three</ol></div>\";\n        Document doc = Jsoup.parse(h);\n        Elements els = doc.select(\".foo > ol, ol > li + li\");\n\n        assertEquals(2, els.size());                                                                        /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"li\", els.get(0).tagName());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Three\", els.get(1).text());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test public void mixCombinatorGroup$catena_1() {\n        String h = \"<div class=foo><ol><li>One<li>Two<li>Three</ol></div>\";\n        Document doc = Jsoup.parse(h);\n        Elements els = doc.select(\".foo > ol, ol > li + li\");\n\n        try{ assertEquals(2, els.size());                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"li\", els.get(0).tagName());                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"Three\", els.get(1).text());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test public void mixCombinatorGroup$catena_2() {\n        String h = \"<div class=foo><ol><li>One<li>Two<li>Three</ol></div>\";\n        Document doc = Jsoup.parse(h);\n        Elements els = doc.select(\".foo > ol, ol > li + li\");\n\n        try{ assertEquals(2, els.size());                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"li\", els.get(0).tagName());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"Three\", els.get(1).text());                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
        ]
    }
}