{
    "patch": [
        {
            "file_name": "src/main/java/org/jsoup/nodes/Entities.java",
            "replaced_with": "import org.jsoup.parser.Parser;\n",
            "patch_type": "insert",
            "next_line_no": 3
        },
        {
            "file_name": "src/main/java/org/jsoup/nodes/Entities.java",
            "replaced_with": "    public static boolean isBaseNamedEntity(String name) {\n        return base.containsKey(name);\n    }\n",
            "patch_type": "insert",
            "next_line_no": 61
        },
        {
            "file_name": "src/main/java/org/jsoup/nodes/Entities.java",
            "from_line_no": 103,
            "to_line_no": 129,
            "replaced_with": "        return Parser.unescapeEntities(string, strict);\n",
            "replaced": "        if (!string.contains(\"&\"))\n            return string;\n        Matcher m = strict? strictUnescapePattern.matcher(string) : unescapePattern.matcher(string);\n        StringBuffer accum = new StringBuffer(string.length());\n        while (m.find()) {\n            int charval = -1;\n            String num = m.group(3);\n            if (num != null) {\n                try {\n                    int base = m.group(2) != null ? 16 : 10;\n                    charval = Integer.valueOf(num, base);\n                } catch (NumberFormatException e) {\n                }\n            } else {\n                String name = m.group(1);\n                if (full.containsKey(name))\n                    charval = full.get(name);\n            }\n            if (charval != -1 || charval > 0xFFFF) {\n                String c = Character.toString((char) charval);\n                m.appendReplacement(accum, Matcher.quoteReplacement(c));\n            } else {\n                m.appendReplacement(accum, Matcher.quoteReplacement(m.group(0)));\n            }\n        }\n        m.appendTail(accum);\n        return accum.toString();\n",
            "patch_type": "replace",
            "next_line_no": 130
        },
        {
            "file_name": "src/main/java/org/jsoup/parser/Parser.java",
            "replaced_with": "    public static String unescapeEntities(String string, boolean inAttribute) {\n        Tokeniser tokeniser = new Tokeniser(new CharacterReader(string), ParseErrorList.noTracking());\n        return tokeniser.unescapeEntities(inAttribute);\n    }\n",
            "patch_type": "insert",
            "next_line_no": 133
        },
        {
            "file_name": "src/main/java/org/jsoup/parser/Tokeniser.java",
            "from_line_no": 139,
            "to_line_no": 147,
            "replaced_with": "            boolean found = (Entities.isBaseNamedEntity(nameRef) || (Entities.isNamedEntity(nameRef) && looksLegit));\n",
            "replaced": "            boolean found = false;\n            while (nameRef.length() > 0 && !found) {\n                if (Entities.isNamedEntity(nameRef))\n                    found = true;\n                else {\n                    nameRef = nameRef.substring(0, nameRef.length()-1);\n                    reader.unconsume();\n                }\n            }\n",
            "patch_type": "replace",
            "next_line_no": 148
        },
        {
            "file_name": "src/main/java/org/jsoup/parser/Tokeniser.java",
            "replaced_with": "    String unescapeEntities(boolean inAttribute) {\n        StringBuilder builder = new StringBuilder();\n        while (!reader.isEmpty()) {\n            builder.append(reader.consumeTo('&'));\n            if (reader.matches('&')) {\n                reader.consume();\n                Character c = consumeCharacterReference(null, inAttribute);\n                if (c == null)\n                    builder.append('&');\n                else\n                    builder.append(c);\n            }\n        }\n        return builder.toString();\n    }\n",
            "patch_type": "insert",
            "next_line_no": 238
        }
    ]
}