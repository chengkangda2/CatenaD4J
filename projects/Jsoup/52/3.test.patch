{
    "org.jsoup.parser.XmlTreeBuilderTest::handlesXmlDeclarationAsDeclaration": {
        "begin_line_no": 105,
        "end_line_no": 112,
        "file_path": "src/test/java/org/jsoup/parser/XmlTreeBuilderTest.java",
        "to": [
            "    @Test public void handlesXmlDeclarationAsDeclaration$catena_0() {\n        String html = \"<?xml encoding='UTF-8' ?><body>One</body><!-- comment -->\";\n        Document doc = Jsoup.parse(html, \"\", Parser.xmlParser());\n        assertEquals(\"<?xml encoding=\\\"UTF-8\\\"?> <body> One </body> <!-- comment -->\",\n                StringUtil.normaliseWhitespace(doc.outerHtml()));                                           /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"#declaration\", doc.childNode(0).nodeName());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"#comment\", doc.childNode(2).nodeName());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test public void handlesXmlDeclarationAsDeclaration$catena_1() {\n        String html = \"<?xml encoding='UTF-8' ?><body>One</body><!-- comment -->\";\n        Document doc = Jsoup.parse(html, \"\", Parser.xmlParser());\n        try{ assertEquals(\"<?xml encoding=\\\"UTF-8\\\"?> <body> One </body> <!-- comment -->\",\n                StringUtil.normaliseWhitespace(doc.outerHtml()));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"#declaration\", doc.childNode(0).nodeName());                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"#comment\", doc.childNode(2).nodeName());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test public void handlesXmlDeclarationAsDeclaration$catena_2() {\n        String html = \"<?xml encoding='UTF-8' ?><body>One</body><!-- comment -->\";\n        Document doc = Jsoup.parse(html, \"\", Parser.xmlParser());\n        try{ assertEquals(\"<?xml encoding=\\\"UTF-8\\\"?> <body> One </body> <!-- comment -->\",\n                StringUtil.normaliseWhitespace(doc.outerHtml()));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"#declaration\", doc.childNode(0).nodeName());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"#comment\", doc.childNode(2).nodeName());                                              /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
        ]
    },
    "org.jsoup.parser.XmlTreeBuilderTest::testDetectCharsetEncodingDeclaration": {
        "begin_line_no": 136,
        "end_line_no": 144,
        "file_path": "src/test/java/org/jsoup/parser/XmlTreeBuilderTest.java",
        "to": [
            "    @Test\n    public void testDetectCharsetEncodingDeclaration$catena_1() throws IOException, URISyntaxException {\n        File xmlFile = new File(XmlTreeBuilder.class.getResource(\"/htmltests/xml-charset.xml\").toURI());\n        InputStream inStream = new FileInputStream(xmlFile);\n        Document doc = Jsoup.parse(inStream, null, \"http://example.com/\", Parser.xmlParser());\n        try{ assertEquals(\"ISO-8859-1\", doc.charset().name());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"<?xml version=\\\"1.0\\\" encoding=\\\"ISO-8859-1\\\"?> <data>\u00e4\u00f6\u00e5\u00e9\u00fc</data>\",\n            TextUtil.stripNewlines(doc.html()));                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
        ]
    },
    "org.jsoup.parser.XmlTreeBuilderTest::testParseDeclarationAttributes": {
        "begin_line_no": 146,
        "end_line_no": 156,
        "file_path": "src/test/java/org/jsoup/parser/XmlTreeBuilderTest.java",
        "to": [
            "    @Test\n    public void testParseDeclarationAttributes$catena_4() {\n        String xml = \"<?xml version='1' encoding='UTF-8' something='else'?><val>One</val>\";\n        Document doc = Jsoup.parse(xml, \"\", Parser.xmlParser());\n        XmlDeclaration decl = (XmlDeclaration) doc.childNode(0);\n        try{ assertEquals(\"1\", decl.attr(\"version\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"UTF-8\", decl.attr(\"encoding\"));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"else\", decl.attr(\"something\"));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"version=\\\"1\\\" encoding=\\\"UTF-8\\\" something=\\\"else\\\"\", decl.getWholeDeclaration());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"<?xml version=\\\"1\\\" encoding=\\\"UTF-8\\\" something=\\\"else\\\"?>\", decl.outerHtml());           /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
        ]
    },
    "org.jsoup.nodes.DocumentTest::testMetaCharsetUpdateXmlNoCharset": {
        "begin_line_no": 345,
        "end_line_no": 359,
        "file_path": "src/test/java/org/jsoup/nodes/DocumentTest.java",
        "to": [
            "    @Test\n    public void testMetaCharsetUpdateXmlNoCharset$catena_1() {\n        final Document doc = createXmlDocument(\"1.0\", \"none\", false);\n        doc.updateMetaCharsetElement(true);\n        doc.charset(Charset.forName(charsetUtf8));\n        \n        final String xmlCharsetUTF8 = \"<?xml version=\\\"1.0\\\" encoding=\\\"\" + charsetUtf8 + \"\\\"?>\\n\" +\n                                        \"<root>\\n\" +\n                                        \" node\\n\" +\n                                        \"</root>\";\n        try{ assertEquals(xmlCharsetUTF8, doc.toString());                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        XmlDeclaration selectedNode = (XmlDeclaration) doc.childNode(0);\n        assertEquals(charsetUtf8, selectedNode.attr(\"encoding\"));                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
        ]
    },
    "org.jsoup.nodes.DocumentTest::testMetaCharsetUpdateXmlIso8859": {
        "begin_line_no": 327,
        "end_line_no": 343,
        "file_path": "src/test/java/org/jsoup/nodes/DocumentTest.java",
        "to": [
            "    @Test\n    public void testMetaCharsetUpdateXmlIso8859$catena_1() {\n        final Document doc = createXmlDocument(\"1.0\", \"changeThis\", true);\n        doc.updateMetaCharsetElement(true);\n        doc.charset(Charset.forName(charsetIso8859));\n        \n        final String xmlCharsetISO = \"<?xml version=\\\"1.0\\\" encoding=\\\"\" + charsetIso8859 + \"\\\"?>\\n\" +\n                                        \"<root>\\n\" +\n                                        \" node\\n\" +\n                                        \"</root>\";\n        try{ assertEquals(xmlCharsetISO, doc.toString());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        XmlDeclaration selectedNode = (XmlDeclaration) doc.childNode(0);\n        assertEquals(charsetIso8859, doc.charset().name());                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(charsetIso8859, selectedNode.attr(\"encoding\"));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(doc.charset(), doc.outputSettings().charset());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void testMetaCharsetUpdateXmlIso8859$catena_2() {\n        final Document doc = createXmlDocument(\"1.0\", \"changeThis\", true);\n        doc.updateMetaCharsetElement(true);\n        doc.charset(Charset.forName(charsetIso8859));\n        \n        final String xmlCharsetISO = \"<?xml version=\\\"1.0\\\" encoding=\\\"\" + charsetIso8859 + \"\\\"?>\\n\" +\n                                        \"<root>\\n\" +\n                                        \" node\\n\" +\n                                        \"</root>\";\n        try{ assertEquals(xmlCharsetISO, doc.toString());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        XmlDeclaration selectedNode = (XmlDeclaration) doc.childNode(0);\n        try{ assertEquals(charsetIso8859, doc.charset().name());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(charsetIso8859, selectedNode.attr(\"encoding\"));                                        /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(doc.charset(), doc.outputSettings().charset());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void testMetaCharsetUpdateXmlIso8859$catena_3() {\n        final Document doc = createXmlDocument(\"1.0\", \"changeThis\", true);\n        doc.updateMetaCharsetElement(true);\n        doc.charset(Charset.forName(charsetIso8859));\n        \n        final String xmlCharsetISO = \"<?xml version=\\\"1.0\\\" encoding=\\\"\" + charsetIso8859 + \"\\\"?>\\n\" +\n                                        \"<root>\\n\" +\n                                        \" node\\n\" +\n                                        \"</root>\";\n        try{ assertEquals(xmlCharsetISO, doc.toString());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        XmlDeclaration selectedNode = (XmlDeclaration) doc.childNode(0);\n        try{ assertEquals(charsetIso8859, doc.charset().name());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(charsetIso8859, selectedNode.attr(\"encoding\"));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(doc.charset(), doc.outputSettings().charset());                                        /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
        ]
    },
    "org.jsoup.nodes.DocumentTest::testMetaCharsetUpdateXmlUtf8": {
        "begin_line_no": 309,
        "end_line_no": 325,
        "file_path": "src/test/java/org/jsoup/nodes/DocumentTest.java",
        "to": [
            "    @Test\n    public void testMetaCharsetUpdateXmlUtf8$catena_1() {\n        final Document doc = createXmlDocument(\"1.0\", \"changeThis\", true);\n        doc.updateMetaCharsetElement(true);\n        doc.charset(Charset.forName(charsetUtf8));\n        \n        final String xmlCharsetUTF8 = \"<?xml version=\\\"1.0\\\" encoding=\\\"\" + charsetUtf8 + \"\\\"?>\\n\" +\n                                        \"<root>\\n\" +\n                                        \" node\\n\" +\n                                        \"</root>\";\n        try{ assertEquals(xmlCharsetUTF8, doc.toString());                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        XmlDeclaration selectedNode = (XmlDeclaration) doc.childNode(0);\n        assertEquals(charsetUtf8, doc.charset().name());                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(charsetUtf8, selectedNode.attr(\"encoding\"));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(doc.charset(), doc.outputSettings().charset());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void testMetaCharsetUpdateXmlUtf8$catena_2() {\n        final Document doc = createXmlDocument(\"1.0\", \"changeThis\", true);\n        doc.updateMetaCharsetElement(true);\n        doc.charset(Charset.forName(charsetUtf8));\n        \n        final String xmlCharsetUTF8 = \"<?xml version=\\\"1.0\\\" encoding=\\\"\" + charsetUtf8 + \"\\\"?>\\n\" +\n                                        \"<root>\\n\" +\n                                        \" node\\n\" +\n                                        \"</root>\";\n        try{ assertEquals(xmlCharsetUTF8, doc.toString());                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        XmlDeclaration selectedNode = (XmlDeclaration) doc.childNode(0);\n        try{ assertEquals(charsetUtf8, doc.charset().name());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(charsetUtf8, selectedNode.attr(\"encoding\"));                                           /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(doc.charset(), doc.outputSettings().charset());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void testMetaCharsetUpdateXmlUtf8$catena_3() {\n        final Document doc = createXmlDocument(\"1.0\", \"changeThis\", true);\n        doc.updateMetaCharsetElement(true);\n        doc.charset(Charset.forName(charsetUtf8));\n        \n        final String xmlCharsetUTF8 = \"<?xml version=\\\"1.0\\\" encoding=\\\"\" + charsetUtf8 + \"\\\"?>\\n\" +\n                                        \"<root>\\n\" +\n                                        \" node\\n\" +\n                                        \"</root>\";\n        try{ assertEquals(xmlCharsetUTF8, doc.toString());                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        XmlDeclaration selectedNode = (XmlDeclaration) doc.childNode(0);\n        try{ assertEquals(charsetUtf8, doc.charset().name());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(charsetUtf8, selectedNode.attr(\"encoding\"));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(doc.charset(), doc.outputSettings().charset());                                        /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
        ]
    },
    "org.jsoup.nodes.DocumentTest::testMetaCharsetUpdateXmlDisabledNoChanges": {
        "begin_line_no": 371,
        "end_line_no": 384,
        "file_path": "src/test/java/org/jsoup/nodes/DocumentTest.java",
        "to": [
            "    @Test\n    public void testMetaCharsetUpdateXmlDisabledNoChanges$catena_1() {\n        final Document doc = createXmlDocument(\"dontTouch\", \"dontTouch\", true);\n        \n        final String xmlCharset = \"<?xml version=\\\"dontTouch\\\" encoding=\\\"dontTouch\\\"?>\\n\" +\n                                    \"<root>\\n\" +\n                                    \" node\\n\" +\n                                    \"</root>\";\n        try{ assertEquals(xmlCharset, doc.toString());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        XmlDeclaration selectedNode = (XmlDeclaration) doc.childNode(0);\n        assertEquals(\"dontTouch\", selectedNode.attr(\"encoding\"));                                           /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"dontTouch\", selectedNode.attr(\"version\"));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void testMetaCharsetUpdateXmlDisabledNoChanges$catena_2() {\n        final Document doc = createXmlDocument(\"dontTouch\", \"dontTouch\", true);\n        \n        final String xmlCharset = \"<?xml version=\\\"dontTouch\\\" encoding=\\\"dontTouch\\\"?>\\n\" +\n                                    \"<root>\\n\" +\n                                    \" node\\n\" +\n                                    \"</root>\";\n        try{ assertEquals(xmlCharset, doc.toString());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        XmlDeclaration selectedNode = (XmlDeclaration) doc.childNode(0);\n        try{ assertEquals(\"dontTouch\", selectedNode.attr(\"encoding\"));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"dontTouch\", selectedNode.attr(\"version\"));                                            /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
        ]
    }
}