{
    "org.jsoup.parser.HtmlParserTest::selfClosingVoidIsNotAnError": {
        "begin_line_no": 967,
        "end_line_no": 976,
        "file_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "to": [
            "    @Test public void selfClosingVoidIsNotAnError$catena_1() {\n        String html = \"<p>test<br/>test<br/></p>\";\n        Parser parser = Parser.htmlParser().setTrackErrors(5);\n        parser.parseInput(html, \"\");\n        try{ assertEquals(0, parser.getErrors().size());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        assertTrue(Jsoup.isValid(html, Whitelist.basic()));                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        String clean = Jsoup.clean(html, Whitelist.basic());\n        try{ assertEquals(\"<p>test<br>test<br></p>\", clean);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test public void selfClosingVoidIsNotAnError$catena_0() {\n        String html = \"<p>test<br/>test<br/></p>\";\n        Parser parser = Parser.htmlParser().setTrackErrors(5);\n        parser.parseInput(html, \"\");\n        assertEquals(0, parser.getErrors().size());                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ assertTrue(Jsoup.isValid(html, Whitelist.basic()));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        String clean = Jsoup.clean(html, Whitelist.basic());\n        try{ assertEquals(\"<p>test<br>test<br></p>\", clean);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test public void selfClosingVoidIsNotAnError$catena_2() {\n        String html = \"<p>test<br/>test<br/></p>\";\n        Parser parser = Parser.htmlParser().setTrackErrors(5);\n        parser.parseInput(html, \"\");\n        try{ assertEquals(0, parser.getErrors().size());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertTrue(Jsoup.isValid(html, Whitelist.basic()));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        String clean = Jsoup.clean(html, Whitelist.basic());\n        assertEquals(\"<p>test<br>test<br></p>\", clean);                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
        ]
    },
    "org.jsoup.parser.HtmlParserTest::selfClosingOnNonvoidIsError": {
        "begin_line_no": 978,
        "end_line_no": 988,
        "file_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "to": [
            "    @Test public void selfClosingOnNonvoidIsError$catena_1() {\n        String html = \"<p>test</p><div /><div>Two</div>\";\n        Parser parser = Parser.htmlParser().setTrackErrors(5);\n        parser.parseInput(html, \"\");\n        try{ assertEquals(1, parser.getErrors().size());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"18: Tag cannot be self closing; not a void tag\", parser.getErrors().get(0).toString());         /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ assertFalse(Jsoup.isValid(html, Whitelist.relaxed()));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        String clean = Jsoup.clean(html, Whitelist.relaxed());\n        try{ assertEquals(\"<p>test</p> <div></div> <div> Two </div>\", StringUtil.normaliseWhitespace(clean));         }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test public void selfClosingOnNonvoidIsError$catena_0() {\n        String html = \"<p>test</p><div /><div>Two</div>\";\n        Parser parser = Parser.htmlParser().setTrackErrors(5);\n        parser.parseInput(html, \"\");\n        assertEquals(1, parser.getErrors().size());                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"18: Tag cannot be self closing; not a void tag\", parser.getErrors().get(0).toString());    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertFalse(Jsoup.isValid(html, Whitelist.relaxed()));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        String clean = Jsoup.clean(html, Whitelist.relaxed());\n        try{ assertEquals(\"<p>test</p> <div></div> <div> Two </div>\", StringUtil.normaliseWhitespace(clean));         }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test public void selfClosingOnNonvoidIsError$catena_2() {\n        String html = \"<p>test</p><div /><div>Two</div>\";\n        Parser parser = Parser.htmlParser().setTrackErrors(5);\n        parser.parseInput(html, \"\");\n        try{ assertEquals(1, parser.getErrors().size());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"18: Tag cannot be self closing; not a void tag\", parser.getErrors().get(0).toString());    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        assertFalse(Jsoup.isValid(html, Whitelist.relaxed()));                                                        /***** ORIGINAL ASSERTION IS HERE *****/\n        String clean = Jsoup.clean(html, Whitelist.relaxed());\n        try{ assertEquals(\"<p>test</p> <div></div> <div> Two </div>\", StringUtil.normaliseWhitespace(clean));         }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test public void selfClosingOnNonvoidIsError$catena_3() {\n        String html = \"<p>test</p><div /><div>Two</div>\";\n        Parser parser = Parser.htmlParser().setTrackErrors(5);\n        parser.parseInput(html, \"\");\n        try{ assertEquals(1, parser.getErrors().size());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"18: Tag cannot be self closing; not a void tag\", parser.getErrors().get(0).toString());    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertFalse(Jsoup.isValid(html, Whitelist.relaxed()));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        String clean = Jsoup.clean(html, Whitelist.relaxed());\n        assertEquals(\"<p>test</p> <div></div> <div> Two </div>\", StringUtil.normaliseWhitespace(clean));              /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
        ]
    },
    "org.jsoup.parser.HtmlParserTest::tracksErrorsWhenRequested": {
        "begin_line_no": 689,
        "end_line_no": 701,
        "file_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java",
        "to": [
            "    @Test public void tracksErrorsWhenRequested$catena_4() {\n        String html = \"<p>One</p href='no'><!DOCTYPE html>&arrgh;<font /><br /><foo\";\n        Parser parser = Parser.htmlParser().setTrackErrors(500);\n        Document doc = Jsoup.parse(html, \"http://example.com\", parser);\n        \n        List<ParseError> errors = parser.getErrors();\n        try{ assertEquals(5, errors.size());                                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"20: Attributes incorrectly present on end tag\", errors.get(0).toString());                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"35: Unexpected token [Doctype] when in state [InBody]\", errors.get(1).toString());                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"36: Invalid character reference: invalid named referenece 'arrgh'\", errors.get(2).toString());      }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"50: Tag cannot be self closing; not a void tag\", errors.get(3).toString());                              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"61: Unexpectedly reached end of file (EOF) in input state [TagName]\", errors.get(4).toString());    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test public void tracksErrorsWhenRequested$catena_0() {\n        String html = \"<p>One</p href='no'><!DOCTYPE html>&arrgh;<font /><br /><foo\";\n        Parser parser = Parser.htmlParser().setTrackErrors(500);\n        Document doc = Jsoup.parse(html, \"http://example.com\", parser);\n        \n        List<ParseError> errors = parser.getErrors();\n        assertEquals(5, errors.size());                                                                                        /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"20: Attributes incorrectly present on end tag\", errors.get(0).toString());                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"35: Unexpected token [Doctype] when in state [InBody]\", errors.get(1).toString());                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"36: Invalid character reference: invalid named referenece 'arrgh'\", errors.get(2).toString());      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"50: Tag cannot be self closing; not a void tag\", errors.get(3).toString());                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"61: Unexpectedly reached end of file (EOF) in input state [TagName]\", errors.get(4).toString());    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test public void tracksErrorsWhenRequested$catena_1() {\n        String html = \"<p>One</p href='no'><!DOCTYPE html>&arrgh;<font /><br /><foo\";\n        Parser parser = Parser.htmlParser().setTrackErrors(500);\n        Document doc = Jsoup.parse(html, \"http://example.com\", parser);\n        \n        List<ParseError> errors = parser.getErrors();\n        try{ assertEquals(5, errors.size());                                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"20: Attributes incorrectly present on end tag\", errors.get(0).toString());                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"35: Unexpected token [Doctype] when in state [InBody]\", errors.get(1).toString());                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"36: Invalid character reference: invalid named referenece 'arrgh'\", errors.get(2).toString());      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"50: Tag cannot be self closing; not a void tag\", errors.get(3).toString());                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"61: Unexpectedly reached end of file (EOF) in input state [TagName]\", errors.get(4).toString());    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test public void tracksErrorsWhenRequested$catena_2() {\n        String html = \"<p>One</p href='no'><!DOCTYPE html>&arrgh;<font /><br /><foo\";\n        Parser parser = Parser.htmlParser().setTrackErrors(500);\n        Document doc = Jsoup.parse(html, \"http://example.com\", parser);\n        \n        List<ParseError> errors = parser.getErrors();\n        try{ assertEquals(5, errors.size());                                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"20: Attributes incorrectly present on end tag\", errors.get(0).toString());                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"35: Unexpected token [Doctype] when in state [InBody]\", errors.get(1).toString());                       /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"36: Invalid character reference: invalid named referenece 'arrgh'\", errors.get(2).toString());      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"50: Tag cannot be self closing; not a void tag\", errors.get(3).toString());                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"61: Unexpectedly reached end of file (EOF) in input state [TagName]\", errors.get(4).toString());    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test public void tracksErrorsWhenRequested$catena_3() {\n        String html = \"<p>One</p href='no'><!DOCTYPE html>&arrgh;<font /><br /><foo\";\n        Parser parser = Parser.htmlParser().setTrackErrors(500);\n        Document doc = Jsoup.parse(html, \"http://example.com\", parser);\n        \n        List<ParseError> errors = parser.getErrors();\n        try{ assertEquals(5, errors.size());                                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"20: Attributes incorrectly present on end tag\", errors.get(0).toString());                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"35: Unexpected token [Doctype] when in state [InBody]\", errors.get(1).toString());                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"36: Invalid character reference: invalid named referenece 'arrgh'\", errors.get(2).toString());           /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"50: Tag cannot be self closing; not a void tag\", errors.get(3).toString());                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"61: Unexpectedly reached end of file (EOF) in input state [TagName]\", errors.get(4).toString());    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test public void tracksErrorsWhenRequested$catena_5() {\n        String html = \"<p>One</p href='no'><!DOCTYPE html>&arrgh;<font /><br /><foo\";\n        Parser parser = Parser.htmlParser().setTrackErrors(500);\n        Document doc = Jsoup.parse(html, \"http://example.com\", parser);\n        \n        List<ParseError> errors = parser.getErrors();\n        try{ assertEquals(5, errors.size());                                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"20: Attributes incorrectly present on end tag\", errors.get(0).toString());                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"35: Unexpected token [Doctype] when in state [InBody]\", errors.get(1).toString());                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"36: Invalid character reference: invalid named referenece 'arrgh'\", errors.get(2).toString());      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"50: Tag cannot be self closing; not a void tag\", errors.get(3).toString());                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"61: Unexpectedly reached end of file (EOF) in input state [TagName]\", errors.get(4).toString());         /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
        ]
    }
}