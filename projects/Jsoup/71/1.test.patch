{
    "org.jsoup.select.SelectorTest::splitOnBr": {
        "begin_line_no": 786,
        "end_line_no": 795,
        "file_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "to": [
            "    @Test public void splitOnBr$catena_2() {\n        String html = \"<div><p>One<br>Two<br>Three</p></div>\";\n        Document doc = Jsoup.parse(html);\n\n        Elements els = doc.select(\"p:matchText\");\n        try{ assertEquals(3, els.size());                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"One\", els.get(0).text());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"Two\", els.get(1).text());                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"Three\", els.get(2).toString());                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test public void splitOnBr$catena_3() {\n        String html = \"<div><p>One<br>Two<br>Three</p></div>\";\n        Document doc = Jsoup.parse(html);\n\n        Elements els = doc.select(\"p:matchText\");\n        try{ assertEquals(3, els.size());                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"One\", els.get(0).text());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Two\", els.get(1).text());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"Three\", els.get(2).toString());                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n    }",
            "    @Test public void splitOnBr$catena_0() {\n        String html = \"<div><p>One<br>Two<br>Three</p></div>\";\n        Document doc = Jsoup.parse(html);\n\n        Elements els = doc.select(\"p:matchText\");\n        assertEquals(3, els.size());                                                                        /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"One\", els.get(0).text());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Two\", els.get(1).text());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Three\", els.get(2).toString());                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test public void splitOnBr$catena_1() {\n        String html = \"<div><p>One<br>Two<br>Three</p></div>\";\n        Document doc = Jsoup.parse(html);\n\n        Elements els = doc.select(\"p:matchText\");\n        try{ assertEquals(3, els.size());                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"One\", els.get(0).text());                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"Two\", els.get(1).text());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Three\", els.get(2).toString());                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    },
    "org.jsoup.select.SelectorTest::textAsElements": {
        "begin_line_no": 770,
        "end_line_no": 784,
        "file_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "to": [
            "    @Test public void textAsElements$catena_0() {\n        String html = \"<p>One<br>Two</p>\";\n        Document doc = Jsoup.parse(html);\n        String origHtml = doc.html();\n\n        Elements one = doc.select(\"p:matchText:first-child\");\n        assertEquals(\"One\", one.first().text());                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        Elements two = doc.select(\"p:matchText:last-child\");\n        try{ assertEquals(\"Two\", two.first().text());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(origHtml, doc.html());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Two\", doc.select(\"p:matchText + br + *\").text());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test public void textAsElements$catena_3() {\n        String html = \"<p>One<br>Two</p>\";\n        Document doc = Jsoup.parse(html);\n        String origHtml = doc.html();\n\n        Elements one = doc.select(\"p:matchText:first-child\");\n        try{ assertEquals(\"One\", one.first().text());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        Elements two = doc.select(\"p:matchText:last-child\");\n        try{ assertEquals(\"Two\", two.first().text());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(origHtml, doc.html());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        assertEquals(\"Two\", doc.select(\"p:matchText + br + *\").text());                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    }",
            "    @Test public void textAsElements$catena_2() {\n        String html = \"<p>One<br>Two</p>\";\n        Document doc = Jsoup.parse(html);\n        String origHtml = doc.html();\n\n        Elements one = doc.select(\"p:matchText:first-child\");\n        try{ assertEquals(\"One\", one.first().text());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        Elements two = doc.select(\"p:matchText:last-child\");\n        try{ assertEquals(\"Two\", two.first().text());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        assertEquals(origHtml, doc.html());                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ assertEquals(\"Two\", doc.select(\"p:matchText + br + *\").text());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test public void textAsElements$catena_1() {\n        String html = \"<p>One<br>Two</p>\";\n        Document doc = Jsoup.parse(html);\n        String origHtml = doc.html();\n\n        Elements one = doc.select(\"p:matchText:first-child\");\n        try{ assertEquals(\"One\", one.first().text());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        Elements two = doc.select(\"p:matchText:last-child\");\n        assertEquals(\"Two\", two.first().text());                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ assertEquals(origHtml, doc.html());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Two\", doc.select(\"p:matchText + br + *\").text());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    }
}