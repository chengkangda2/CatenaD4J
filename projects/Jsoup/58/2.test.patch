{
    "org.jsoup.safety.CleanerTest::testIsValidBodyHtml": {
        "begin_line_no": 145,
        "end_line_no": 165,
        "file_path": "src/test/java/org/jsoup/safety/CleanerTest.java",
        "to": [
            "    @Test public void testIsValidBodyHtml$catena_5() {\n        String ok = \"<p>Test <b><a href='http://example.com/' rel='nofollow'>OK</a></b></p>\";\n        String ok1 = \"<p>Test <b><a href='http://example.com/'>OK</a></b></p>\"; // missing enforced is OK because still needs run thru cleaner\n        String nok1 = \"<p><script></script>Not <b>OK</b></p>\";\n        String nok2 = \"<p align=right>Test Not <b>OK</b></p>\";\n        String nok3 = \"<!-- comment --><p>Not OK</p>\"; // comments and the like will be cleaned\n        String nok4 = \"<html><head>Foo</head><body><b>OK</b></body></html>\"; // not body html\n        String nok5 = \"<p>Test <b><a href='http://example.com/' rel='nofollowme'>OK</a></b></p>\";\n        String nok6 = \"<p>Test <b><a href='http://example.com/'>OK</b></p>\"; // missing close tag\n        String nok7 = \"</div>What\";\n        try{ assertTrue(Jsoup.isValid(ok, Whitelist.basic()));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(Jsoup.isValid(ok1, Whitelist.basic()));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(Jsoup.isValid(nok1, Whitelist.basic()));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(Jsoup.isValid(nok2, Whitelist.basic()));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(Jsoup.isValid(nok3, Whitelist.basic()));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertFalse(Jsoup.isValid(nok4, Whitelist.basic()));                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertFalse(Jsoup.isValid(nok5, Whitelist.basic()));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(Jsoup.isValid(nok6, Whitelist.basic()));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(Jsoup.isValid(ok, Whitelist.none()));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(Jsoup.isValid(nok7, Whitelist.basic()));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test public void testIsValidBodyHtml$catena_9() {\n        String ok = \"<p>Test <b><a href='http://example.com/' rel='nofollow'>OK</a></b></p>\";\n        String ok1 = \"<p>Test <b><a href='http://example.com/'>OK</a></b></p>\"; // missing enforced is OK because still needs run thru cleaner\n        String nok1 = \"<p><script></script>Not <b>OK</b></p>\";\n        String nok2 = \"<p align=right>Test Not <b>OK</b></p>\";\n        String nok3 = \"<!-- comment --><p>Not OK</p>\"; // comments and the like will be cleaned\n        String nok4 = \"<html><head>Foo</head><body><b>OK</b></body></html>\"; // not body html\n        String nok5 = \"<p>Test <b><a href='http://example.com/' rel='nofollowme'>OK</a></b></p>\";\n        String nok6 = \"<p>Test <b><a href='http://example.com/'>OK</b></p>\"; // missing close tag\n        String nok7 = \"</div>What\";\n        try{ assertTrue(Jsoup.isValid(ok, Whitelist.basic()));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(Jsoup.isValid(ok1, Whitelist.basic()));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(Jsoup.isValid(nok1, Whitelist.basic()));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(Jsoup.isValid(nok2, Whitelist.basic()));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(Jsoup.isValid(nok3, Whitelist.basic()));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(Jsoup.isValid(nok4, Whitelist.basic()));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(Jsoup.isValid(nok5, Whitelist.basic()));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(Jsoup.isValid(nok6, Whitelist.basic()));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(Jsoup.isValid(ok, Whitelist.none()));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertFalse(Jsoup.isValid(nok7, Whitelist.basic()));                                                /***** ORIGINAL ASSERTION IS HERE *****/\n    }",
            "    @Test public void testIsValidBodyHtml$catena_7() {\n        String ok = \"<p>Test <b><a href='http://example.com/' rel='nofollow'>OK</a></b></p>\";\n        String ok1 = \"<p>Test <b><a href='http://example.com/'>OK</a></b></p>\"; // missing enforced is OK because still needs run thru cleaner\n        String nok1 = \"<p><script></script>Not <b>OK</b></p>\";\n        String nok2 = \"<p align=right>Test Not <b>OK</b></p>\";\n        String nok3 = \"<!-- comment --><p>Not OK</p>\"; // comments and the like will be cleaned\n        String nok4 = \"<html><head>Foo</head><body><b>OK</b></body></html>\"; // not body html\n        String nok5 = \"<p>Test <b><a href='http://example.com/' rel='nofollowme'>OK</a></b></p>\";\n        String nok6 = \"<p>Test <b><a href='http://example.com/'>OK</b></p>\"; // missing close tag\n        String nok7 = \"</div>What\";\n        try{ assertTrue(Jsoup.isValid(ok, Whitelist.basic()));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(Jsoup.isValid(ok1, Whitelist.basic()));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(Jsoup.isValid(nok1, Whitelist.basic()));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(Jsoup.isValid(nok2, Whitelist.basic()));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(Jsoup.isValid(nok3, Whitelist.basic()));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(Jsoup.isValid(nok4, Whitelist.basic()));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(Jsoup.isValid(nok5, Whitelist.basic()));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertFalse(Jsoup.isValid(nok6, Whitelist.basic()));                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertFalse(Jsoup.isValid(ok, Whitelist.none()));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(Jsoup.isValid(nok7, Whitelist.basic()));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test public void testIsValidBodyHtml$catena_0() {\n        String ok = \"<p>Test <b><a href='http://example.com/' rel='nofollow'>OK</a></b></p>\";\n        String ok1 = \"<p>Test <b><a href='http://example.com/'>OK</a></b></p>\"; // missing enforced is OK because still needs run thru cleaner\n        String nok1 = \"<p><script></script>Not <b>OK</b></p>\";\n        String nok2 = \"<p align=right>Test Not <b>OK</b></p>\";\n        String nok3 = \"<!-- comment --><p>Not OK</p>\"; // comments and the like will be cleaned\n        String nok4 = \"<html><head>Foo</head><body><b>OK</b></body></html>\"; // not body html\n        String nok5 = \"<p>Test <b><a href='http://example.com/' rel='nofollowme'>OK</a></b></p>\";\n        String nok6 = \"<p>Test <b><a href='http://example.com/'>OK</b></p>\"; // missing close tag\n        String nok7 = \"</div>What\";\n        assertTrue(Jsoup.isValid(ok, Whitelist.basic()));                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(Jsoup.isValid(ok1, Whitelist.basic()));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(Jsoup.isValid(nok1, Whitelist.basic()));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(Jsoup.isValid(nok2, Whitelist.basic()));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(Jsoup.isValid(nok3, Whitelist.basic()));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(Jsoup.isValid(nok4, Whitelist.basic()));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(Jsoup.isValid(nok5, Whitelist.basic()));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(Jsoup.isValid(nok6, Whitelist.basic()));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(Jsoup.isValid(ok, Whitelist.none()));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(Jsoup.isValid(nok7, Whitelist.basic()));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test public void testIsValidBodyHtml$catena_1() {\n        String ok = \"<p>Test <b><a href='http://example.com/' rel='nofollow'>OK</a></b></p>\";\n        String ok1 = \"<p>Test <b><a href='http://example.com/'>OK</a></b></p>\"; // missing enforced is OK because still needs run thru cleaner\n        String nok1 = \"<p><script></script>Not <b>OK</b></p>\";\n        String nok2 = \"<p align=right>Test Not <b>OK</b></p>\";\n        String nok3 = \"<!-- comment --><p>Not OK</p>\"; // comments and the like will be cleaned\n        String nok4 = \"<html><head>Foo</head><body><b>OK</b></body></html>\"; // not body html\n        String nok5 = \"<p>Test <b><a href='http://example.com/' rel='nofollowme'>OK</a></b></p>\";\n        String nok6 = \"<p>Test <b><a href='http://example.com/'>OK</b></p>\"; // missing close tag\n        String nok7 = \"</div>What\";\n        try{ assertTrue(Jsoup.isValid(ok, Whitelist.basic()));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(Jsoup.isValid(ok1, Whitelist.basic()));                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertFalse(Jsoup.isValid(nok1, Whitelist.basic()));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(Jsoup.isValid(nok2, Whitelist.basic()));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(Jsoup.isValid(nok3, Whitelist.basic()));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(Jsoup.isValid(nok4, Whitelist.basic()));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(Jsoup.isValid(nok5, Whitelist.basic()));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(Jsoup.isValid(nok6, Whitelist.basic()));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(Jsoup.isValid(ok, Whitelist.none()));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(Jsoup.isValid(nok7, Whitelist.basic()));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test public void testIsValidBodyHtml$catena_2() {\n        String ok = \"<p>Test <b><a href='http://example.com/' rel='nofollow'>OK</a></b></p>\";\n        String ok1 = \"<p>Test <b><a href='http://example.com/'>OK</a></b></p>\"; // missing enforced is OK because still needs run thru cleaner\n        String nok1 = \"<p><script></script>Not <b>OK</b></p>\";\n        String nok2 = \"<p align=right>Test Not <b>OK</b></p>\";\n        String nok3 = \"<!-- comment --><p>Not OK</p>\"; // comments and the like will be cleaned\n        String nok4 = \"<html><head>Foo</head><body><b>OK</b></body></html>\"; // not body html\n        String nok5 = \"<p>Test <b><a href='http://example.com/' rel='nofollowme'>OK</a></b></p>\";\n        String nok6 = \"<p>Test <b><a href='http://example.com/'>OK</b></p>\"; // missing close tag\n        String nok7 = \"</div>What\";\n        try{ assertTrue(Jsoup.isValid(ok, Whitelist.basic()));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(Jsoup.isValid(ok1, Whitelist.basic()));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertFalse(Jsoup.isValid(nok1, Whitelist.basic()));                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertFalse(Jsoup.isValid(nok2, Whitelist.basic()));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(Jsoup.isValid(nok3, Whitelist.basic()));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(Jsoup.isValid(nok4, Whitelist.basic()));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(Jsoup.isValid(nok5, Whitelist.basic()));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(Jsoup.isValid(nok6, Whitelist.basic()));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(Jsoup.isValid(ok, Whitelist.none()));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(Jsoup.isValid(nok7, Whitelist.basic()));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test public void testIsValidBodyHtml$catena_3() {\n        String ok = \"<p>Test <b><a href='http://example.com/' rel='nofollow'>OK</a></b></p>\";\n        String ok1 = \"<p>Test <b><a href='http://example.com/'>OK</a></b></p>\"; // missing enforced is OK because still needs run thru cleaner\n        String nok1 = \"<p><script></script>Not <b>OK</b></p>\";\n        String nok2 = \"<p align=right>Test Not <b>OK</b></p>\";\n        String nok3 = \"<!-- comment --><p>Not OK</p>\"; // comments and the like will be cleaned\n        String nok4 = \"<html><head>Foo</head><body><b>OK</b></body></html>\"; // not body html\n        String nok5 = \"<p>Test <b><a href='http://example.com/' rel='nofollowme'>OK</a></b></p>\";\n        String nok6 = \"<p>Test <b><a href='http://example.com/'>OK</b></p>\"; // missing close tag\n        String nok7 = \"</div>What\";\n        try{ assertTrue(Jsoup.isValid(ok, Whitelist.basic()));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(Jsoup.isValid(ok1, Whitelist.basic()));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(Jsoup.isValid(nok1, Whitelist.basic()));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertFalse(Jsoup.isValid(nok2, Whitelist.basic()));                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertFalse(Jsoup.isValid(nok3, Whitelist.basic()));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(Jsoup.isValid(nok4, Whitelist.basic()));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(Jsoup.isValid(nok5, Whitelist.basic()));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(Jsoup.isValid(nok6, Whitelist.basic()));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(Jsoup.isValid(ok, Whitelist.none()));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(Jsoup.isValid(nok7, Whitelist.basic()));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test public void testIsValidBodyHtml$catena_4() {\n        String ok = \"<p>Test <b><a href='http://example.com/' rel='nofollow'>OK</a></b></p>\";\n        String ok1 = \"<p>Test <b><a href='http://example.com/'>OK</a></b></p>\"; // missing enforced is OK because still needs run thru cleaner\n        String nok1 = \"<p><script></script>Not <b>OK</b></p>\";\n        String nok2 = \"<p align=right>Test Not <b>OK</b></p>\";\n        String nok3 = \"<!-- comment --><p>Not OK</p>\"; // comments and the like will be cleaned\n        String nok4 = \"<html><head>Foo</head><body><b>OK</b></body></html>\"; // not body html\n        String nok5 = \"<p>Test <b><a href='http://example.com/' rel='nofollowme'>OK</a></b></p>\";\n        String nok6 = \"<p>Test <b><a href='http://example.com/'>OK</b></p>\"; // missing close tag\n        String nok7 = \"</div>What\";\n        try{ assertTrue(Jsoup.isValid(ok, Whitelist.basic()));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(Jsoup.isValid(ok1, Whitelist.basic()));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(Jsoup.isValid(nok1, Whitelist.basic()));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(Jsoup.isValid(nok2, Whitelist.basic()));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertFalse(Jsoup.isValid(nok3, Whitelist.basic()));                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertFalse(Jsoup.isValid(nok4, Whitelist.basic()));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(Jsoup.isValid(nok5, Whitelist.basic()));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(Jsoup.isValid(nok6, Whitelist.basic()));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(Jsoup.isValid(ok, Whitelist.none()));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(Jsoup.isValid(nok7, Whitelist.basic()));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test public void testIsValidBodyHtml$catena_6() {\n        String ok = \"<p>Test <b><a href='http://example.com/' rel='nofollow'>OK</a></b></p>\";\n        String ok1 = \"<p>Test <b><a href='http://example.com/'>OK</a></b></p>\"; // missing enforced is OK because still needs run thru cleaner\n        String nok1 = \"<p><script></script>Not <b>OK</b></p>\";\n        String nok2 = \"<p align=right>Test Not <b>OK</b></p>\";\n        String nok3 = \"<!-- comment --><p>Not OK</p>\"; // comments and the like will be cleaned\n        String nok4 = \"<html><head>Foo</head><body><b>OK</b></body></html>\"; // not body html\n        String nok5 = \"<p>Test <b><a href='http://example.com/' rel='nofollowme'>OK</a></b></p>\";\n        String nok6 = \"<p>Test <b><a href='http://example.com/'>OK</b></p>\"; // missing close tag\n        String nok7 = \"</div>What\";\n        try{ assertTrue(Jsoup.isValid(ok, Whitelist.basic()));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(Jsoup.isValid(ok1, Whitelist.basic()));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(Jsoup.isValid(nok1, Whitelist.basic()));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(Jsoup.isValid(nok2, Whitelist.basic()));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(Jsoup.isValid(nok3, Whitelist.basic()));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(Jsoup.isValid(nok4, Whitelist.basic()));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertFalse(Jsoup.isValid(nok5, Whitelist.basic()));                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertFalse(Jsoup.isValid(nok6, Whitelist.basic()));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(Jsoup.isValid(ok, Whitelist.none()));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(Jsoup.isValid(nok7, Whitelist.basic()));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test public void testIsValidBodyHtml$catena_8() {\n        String ok = \"<p>Test <b><a href='http://example.com/' rel='nofollow'>OK</a></b></p>\";\n        String ok1 = \"<p>Test <b><a href='http://example.com/'>OK</a></b></p>\"; // missing enforced is OK because still needs run thru cleaner\n        String nok1 = \"<p><script></script>Not <b>OK</b></p>\";\n        String nok2 = \"<p align=right>Test Not <b>OK</b></p>\";\n        String nok3 = \"<!-- comment --><p>Not OK</p>\"; // comments and the like will be cleaned\n        String nok4 = \"<html><head>Foo</head><body><b>OK</b></body></html>\"; // not body html\n        String nok5 = \"<p>Test <b><a href='http://example.com/' rel='nofollowme'>OK</a></b></p>\";\n        String nok6 = \"<p>Test <b><a href='http://example.com/'>OK</b></p>\"; // missing close tag\n        String nok7 = \"</div>What\";\n        try{ assertTrue(Jsoup.isValid(ok, Whitelist.basic()));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(Jsoup.isValid(ok1, Whitelist.basic()));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(Jsoup.isValid(nok1, Whitelist.basic()));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(Jsoup.isValid(nok2, Whitelist.basic()));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(Jsoup.isValid(nok3, Whitelist.basic()));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(Jsoup.isValid(nok4, Whitelist.basic()));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(Jsoup.isValid(nok5, Whitelist.basic()));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(Jsoup.isValid(nok6, Whitelist.basic()));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertFalse(Jsoup.isValid(ok, Whitelist.none()));                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertFalse(Jsoup.isValid(nok7, Whitelist.basic()));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    },
    "org.jsoup.safety.CleanerTest::testIsValidDocument": {
        "begin_line_no": 167,
        "end_line_no": 177,
        "file_path": "src/test/java/org/jsoup/safety/CleanerTest.java",
        "to": [
            "    @Test public void testIsValidDocument$catena_0() {\n        String ok = \"<html><head></head><body><p>Hello</p></body><html>\";\n        String nok = \"<html><head><script>woops</script><title>Hello</title></head><body><p>Hello</p></body><html>\";\n\n        Whitelist relaxed = Whitelist.relaxed();\n        Cleaner cleaner = new Cleaner(relaxed);\n        Document okDoc = Jsoup.parse(ok);\n        assertTrue(cleaner.isValid(okDoc));                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertFalse(cleaner.isValid(Jsoup.parse(nok)));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(new Cleaner(Whitelist.none()).isValid(okDoc));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test public void testIsValidDocument$catena_2() {\n        String ok = \"<html><head></head><body><p>Hello</p></body><html>\";\n        String nok = \"<html><head><script>woops</script><title>Hello</title></head><body><p>Hello</p></body><html>\";\n\n        Whitelist relaxed = Whitelist.relaxed();\n        Cleaner cleaner = new Cleaner(relaxed);\n        Document okDoc = Jsoup.parse(ok);\n        try{ assertTrue(cleaner.isValid(okDoc));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(cleaner.isValid(Jsoup.parse(nok)));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertFalse(new Cleaner(Whitelist.none()).isValid(okDoc));                                          /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
        ]
    }
}