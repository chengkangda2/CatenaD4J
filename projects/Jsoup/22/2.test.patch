{
    "org.jsoup.nodes.NodeTest::nodeIsNotASiblingOfItself": {
        "begin_line_no": 200,
        "end_line_no": 209,
        "file_path": "src/test/java/org/jsoup/nodes/NodeTest.java",
        "to": [
            "    @Test public void nodeIsNotASiblingOfItself$catena_3() {\n        Document doc = Jsoup.parse(\"<div><p>One<p>Two<p>Three</div>\");\n        Element p2 = doc.select(\"p\").get(1);\n\n        try{ assertEquals(\"Two\", p2.text());                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        List<Node> nodes = p2.siblingNodes();\n        try{ assertEquals(2, nodes.size());                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"<p>One</p>\", nodes.get(0).outerHtml());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"<p>Three</p>\", nodes.get(1).outerHtml());                                             /***** ORIGINAL ASSERTION IS HERE *****/\n    }",
            "    @Test public void nodeIsNotASiblingOfItself$catena_1() {\n        Document doc = Jsoup.parse(\"<div><p>One<p>Two<p>Three</div>\");\n        Element p2 = doc.select(\"p\").get(1);\n\n        try{ assertEquals(\"Two\", p2.text());                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        List<Node> nodes = p2.siblingNodes();\n        assertEquals(2, nodes.size());                                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"<p>One</p>\", nodes.get(0).outerHtml());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"<p>Three</p>\", nodes.get(1).outerHtml());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test public void nodeIsNotASiblingOfItself$catena_0() {\n        Document doc = Jsoup.parse(\"<div><p>One<p>Two<p>Three</div>\");\n        Element p2 = doc.select(\"p\").get(1);\n\n        assertEquals(\"Two\", p2.text());                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        List<Node> nodes = p2.siblingNodes();\n        try{ assertEquals(2, nodes.size());                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"<p>One</p>\", nodes.get(0).outerHtml());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"<p>Three</p>\", nodes.get(1).outerHtml());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test public void nodeIsNotASiblingOfItself$catena_2() {\n        Document doc = Jsoup.parse(\"<div><p>One<p>Two<p>Three</div>\");\n        Element p2 = doc.select(\"p\").get(1);\n\n        try{ assertEquals(\"Two\", p2.text());                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        List<Node> nodes = p2.siblingNodes();\n        try{ assertEquals(2, nodes.size());                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"<p>One</p>\", nodes.get(0).outerHtml());                                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"<p>Three</p>\", nodes.get(1).outerHtml());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    },
    "org.jsoup.nodes.ElementTest::elementIsNotASiblingOfItself": {
        "begin_line_no": 532,
        "end_line_no": 541,
        "file_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "to": [
            "    @Test public void elementIsNotASiblingOfItself$catena_0() {\n        Document doc = Jsoup.parse(\"<div><p>One<p>Two<p>Three</div>\");\n        Element p2 = doc.select(\"p\").get(1);\n\n        assertEquals(\"Two\", p2.text());                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        Elements els = p2.siblingElements();\n        try{ assertEquals(2, els.size());                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"<p>One</p>\", els.get(0).outerHtml());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"<p>Three</p>\", els.get(1).outerHtml());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test public void elementIsNotASiblingOfItself$catena_2() {\n        Document doc = Jsoup.parse(\"<div><p>One<p>Two<p>Three</div>\");\n        Element p2 = doc.select(\"p\").get(1);\n\n        try{ assertEquals(\"Two\", p2.text());                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        Elements els = p2.siblingElements();\n        try{ assertEquals(2, els.size());                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"<p>One</p>\", els.get(0).outerHtml());                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"<p>Three</p>\", els.get(1).outerHtml());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    },
    "org.jsoup.nodes.NodeTest::orphanNodeReturnsNullForSiblingElements": {
        "begin_line_no": 185,
        "end_line_no": 198,
        "file_path": "src/test/java/org/jsoup/nodes/NodeTest.java",
        "to": [
            "    @Test public void orphanNodeReturnsNullForSiblingElements$catena_0() {\n        Node node = new Element(Tag.valueOf(\"p\"), \"\");\n        Element el = new Element(Tag.valueOf(\"p\"), \"\");\n\n        assertEquals(0, node.siblingIndex());                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(0, node.siblingNodes().size());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertNull(node.previousSibling());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(node.nextSibling());                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(0, el.siblingElements().size());                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(el.previousElementSibling());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(el.nextElementSibling());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test public void orphanNodeReturnsNullForSiblingElements$catena_3() {\n        Node node = new Element(Tag.valueOf(\"p\"), \"\");\n        Element el = new Element(Tag.valueOf(\"p\"), \"\");\n\n        try{ assertEquals(0, node.siblingIndex());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, node.siblingNodes().size());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertNull(node.previousSibling());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertNull(node.nextSibling());                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ assertEquals(0, el.siblingElements().size());                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(el.previousElementSibling());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(el.nextElementSibling());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    }
}