{
    "org.jsoup.select.SelectorTest::notParas": {
        "begin_line_no": 542,
        "end_line_no": 554,
        "file_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "to": [
            "    @Test public void notParas$catena_0() {\n        Document doc = Jsoup.parse(\"<p id=1>One</p> <p>Two</p> <p><span>Three</span></p>\");\n\n        Elements el1 = doc.select(\"p:not([id=1])\");\n        assertEquals(2, el1.size());                                                                        /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"Two\", el1.first().text());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Three\", el1.last().text());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        Elements el2 = doc.select(\"p:not(:has(span))\");\n        try{ assertEquals(2, el2.size());                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"One\", el2.first().text());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Two\", el2.last().text());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test public void notParas$catena_4() {\n        Document doc = Jsoup.parse(\"<p id=1>One</p> <p>Two</p> <p><span>Three</span></p>\");\n\n        Elements el1 = doc.select(\"p:not([id=1])\");\n        try{ assertEquals(2, el1.size());                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Two\", el1.first().text());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Three\", el1.last().text());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        Elements el2 = doc.select(\"p:not(:has(span))\");\n        try{ assertEquals(2, el2.size());                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"One\", el2.first().text());                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"Two\", el2.last().text());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test public void notParas$catena_2() {\n        Document doc = Jsoup.parse(\"<p id=1>One</p> <p>Two</p> <p><span>Three</span></p>\");\n\n        Elements el1 = doc.select(\"p:not([id=1])\");\n        try{ assertEquals(2, el1.size());                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Two\", el1.first().text());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"Three\", el1.last().text());                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n\n        Elements el2 = doc.select(\"p:not(:has(span))\");\n        try{ assertEquals(2, el2.size());                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"One\", el2.first().text());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Two\", el2.last().text());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test public void notParas$catena_1() {\n        Document doc = Jsoup.parse(\"<p id=1>One</p> <p>Two</p> <p><span>Three</span></p>\");\n\n        Elements el1 = doc.select(\"p:not([id=1])\");\n        try{ assertEquals(2, el1.size());                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"Two\", el1.first().text());                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"Three\", el1.last().text());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        Elements el2 = doc.select(\"p:not(:has(span))\");\n        try{ assertEquals(2, el2.size());                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"One\", el2.first().text());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Two\", el2.last().text());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    },
    "org.jsoup.select.SelectorTest::notClass": {
        "begin_line_no": 565,
        "end_line_no": 571,
        "file_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "to": [
            "    @Test public void notClass$catena_0() {\n        Document doc = Jsoup.parse(\"<div class=left>One</div><div class=right id=1><p>Two</p></div>\");\n\n        Elements el1 = doc.select(\"div:not(.left)\");\n        assertEquals(1, el1.size());                                                                        /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"1\", el1.first().id());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test public void notClass$catena_1() {\n        Document doc = Jsoup.parse(\"<div class=left>One</div><div class=right id=1><p>Two</p></div>\");\n\n        Elements el1 = doc.select(\"div:not(.left)\");\n        try{ assertEquals(1, el1.size());                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"1\", el1.first().id());                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
        ]
    },
    "org.jsoup.select.SelectorTest::notAll": {
        "begin_line_no": 556,
        "end_line_no": 563,
        "file_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "to": [
            "    @Test public void notAll$catena_1() {\n        Document doc = Jsoup.parse(\"<p>Two</p> <p><span>Three</span></p>\");\n\n        Elements el1 = doc.body().select(\":not(p)\"); // should just be the span\n        try{ assertEquals(2, el1.size());                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"body\", el1.first().tagName());                                                        /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"span\", el1.last().tagName());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test public void notAll$catena_2() {\n        Document doc = Jsoup.parse(\"<p>Two</p> <p><span>Three</span></p>\");\n\n        Elements el1 = doc.body().select(\":not(p)\"); // should just be the span\n        try{ assertEquals(2, el1.size());                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"body\", el1.first().tagName());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"span\", el1.last().tagName());                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n    }",
            "    @Test public void notAll$catena_0() {\n        Document doc = Jsoup.parse(\"<p>Two</p> <p><span>Three</span></p>\");\n\n        Elements el1 = doc.body().select(\":not(p)\"); // should just be the span\n        assertEquals(2, el1.size());                                                                        /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"body\", el1.first().tagName());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"span\", el1.last().tagName());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    },
    "org.jsoup.select.SelectorTest::testPseudoHas": {
        "begin_line_no": 405,
        "end_line_no": 428,
        "file_path": "src/test/java/org/jsoup/select/SelectorTest.java",
        "to": [
            "    @Test public void testPseudoHas$catena_0() {\n        Document doc = Jsoup.parse(\"<div id=0><p><span>Hello</span></p></div> <div id=1><span class=foo>There</span></div> <div id=2><p>Not</p></div>\");\n\n        Elements divs1 = doc.select(\"div:has(span)\");\n        assertEquals(2, divs1.size());                                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"0\", divs1.get(0).id());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"1\", divs1.get(1).id());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        Elements divs2 = doc.select(\"div:has([class]\");\n        try{ assertEquals(1, divs2.size());                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"1\", divs2.get(0).id());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        Elements divs3 = doc.select(\"div:has(span, p)\");\n        try{ assertEquals(3, divs3.size());                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"0\", divs3.get(0).id());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"1\", divs3.get(1).id());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"2\", divs3.get(2).id());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        Elements els1 = doc.body().select(\":has(p)\");\n        try{ assertEquals(3, els1.size());                                                }catch(Throwable __SHOULD_BE_IGNORED){} // body, div, dib\n        try{ assertEquals(\"body\", els1.first().tagName());                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"0\", els1.get(1).id());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"2\", els1.get(2).id());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test public void testPseudoHas$catena_1() {\n        Document doc = Jsoup.parse(\"<div id=0><p><span>Hello</span></p></div> <div id=1><span class=foo>There</span></div> <div id=2><p>Not</p></div>\");\n\n        Elements divs1 = doc.select(\"div:has(span)\");\n        try{ assertEquals(2, divs1.size());                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"0\", divs1.get(0).id());                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"1\", divs1.get(1).id());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        Elements divs2 = doc.select(\"div:has([class]\");\n        try{ assertEquals(1, divs2.size());                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"1\", divs2.get(0).id());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        Elements divs3 = doc.select(\"div:has(span, p)\");\n        try{ assertEquals(3, divs3.size());                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"0\", divs3.get(0).id());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"1\", divs3.get(1).id());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"2\", divs3.get(2).id());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        Elements els1 = doc.body().select(\":has(p)\");\n        try{ assertEquals(3, els1.size());                                                }catch(Throwable __SHOULD_BE_IGNORED){} // body, div, dib\n        try{ assertEquals(\"body\", els1.first().tagName());                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"0\", els1.get(1).id());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"2\", els1.get(2).id());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test public void testPseudoHas$catena_2() {\n        Document doc = Jsoup.parse(\"<div id=0><p><span>Hello</span></p></div> <div id=1><span class=foo>There</span></div> <div id=2><p>Not</p></div>\");\n\n        Elements divs1 = doc.select(\"div:has(span)\");\n        try{ assertEquals(2, divs1.size());                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"0\", divs1.get(0).id());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"1\", divs1.get(1).id());                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n\n        Elements divs2 = doc.select(\"div:has([class]\");\n        try{ assertEquals(1, divs2.size());                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"1\", divs2.get(0).id());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        Elements divs3 = doc.select(\"div:has(span, p)\");\n        try{ assertEquals(3, divs3.size());                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"0\", divs3.get(0).id());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"1\", divs3.get(1).id());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"2\", divs3.get(2).id());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        Elements els1 = doc.body().select(\":has(p)\");\n        try{ assertEquals(3, els1.size());                                                }catch(Throwable __SHOULD_BE_IGNORED){} // body, div, dib\n        try{ assertEquals(\"body\", els1.first().tagName());                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"0\", els1.get(1).id());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"2\", els1.get(2).id());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test public void testPseudoHas$catena_3() {\n        Document doc = Jsoup.parse(\"<div id=0><p><span>Hello</span></p></div> <div id=1><span class=foo>There</span></div> <div id=2><p>Not</p></div>\");\n\n        Elements divs1 = doc.select(\"div:has(span)\");\n        try{ assertEquals(2, divs1.size());                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"0\", divs1.get(0).id());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"1\", divs1.get(1).id());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        Elements divs2 = doc.select(\"div:has([class]\");\n        assertEquals(1, divs2.size());                                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"1\", divs2.get(0).id());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        Elements divs3 = doc.select(\"div:has(span, p)\");\n        try{ assertEquals(3, divs3.size());                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"0\", divs3.get(0).id());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"1\", divs3.get(1).id());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"2\", divs3.get(2).id());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        Elements els1 = doc.body().select(\":has(p)\");\n        try{ assertEquals(3, els1.size());                                                }catch(Throwable __SHOULD_BE_IGNORED){} // body, div, dib\n        try{ assertEquals(\"body\", els1.first().tagName());                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"0\", els1.get(1).id());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"2\", els1.get(2).id());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test public void testPseudoHas$catena_4() {\n        Document doc = Jsoup.parse(\"<div id=0><p><span>Hello</span></p></div> <div id=1><span class=foo>There</span></div> <div id=2><p>Not</p></div>\");\n\n        Elements divs1 = doc.select(\"div:has(span)\");\n        try{ assertEquals(2, divs1.size());                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"0\", divs1.get(0).id());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"1\", divs1.get(1).id());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        Elements divs2 = doc.select(\"div:has([class]\");\n        try{ assertEquals(1, divs2.size());                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"1\", divs2.get(0).id());                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n\n        Elements divs3 = doc.select(\"div:has(span, p)\");\n        try{ assertEquals(3, divs3.size());                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"0\", divs3.get(0).id());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"1\", divs3.get(1).id());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"2\", divs3.get(2).id());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        Elements els1 = doc.body().select(\":has(p)\");\n        try{ assertEquals(3, els1.size());                                                }catch(Throwable __SHOULD_BE_IGNORED){} // body, div, dib\n        try{ assertEquals(\"body\", els1.first().tagName());                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"0\", els1.get(1).id());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"2\", els1.get(2).id());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test public void testPseudoHas$catena_5() {\n        Document doc = Jsoup.parse(\"<div id=0><p><span>Hello</span></p></div> <div id=1><span class=foo>There</span></div> <div id=2><p>Not</p></div>\");\n\n        Elements divs1 = doc.select(\"div:has(span)\");\n        try{ assertEquals(2, divs1.size());                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"0\", divs1.get(0).id());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"1\", divs1.get(1).id());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        Elements divs2 = doc.select(\"div:has([class]\");\n        try{ assertEquals(1, divs2.size());                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"1\", divs2.get(0).id());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        Elements divs3 = doc.select(\"div:has(span, p)\");\n        assertEquals(3, divs3.size());                                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"0\", divs3.get(0).id());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"1\", divs3.get(1).id());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"2\", divs3.get(2).id());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        Elements els1 = doc.body().select(\":has(p)\");\n        try{ assertEquals(3, els1.size());                                                }catch(Throwable __SHOULD_BE_IGNORED){} // body, div, dib\n        try{ assertEquals(\"body\", els1.first().tagName());                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"0\", els1.get(1).id());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"2\", els1.get(2).id());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test public void testPseudoHas$catena_6() {\n        Document doc = Jsoup.parse(\"<div id=0><p><span>Hello</span></p></div> <div id=1><span class=foo>There</span></div> <div id=2><p>Not</p></div>\");\n\n        Elements divs1 = doc.select(\"div:has(span)\");\n        try{ assertEquals(2, divs1.size());                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"0\", divs1.get(0).id());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"1\", divs1.get(1).id());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        Elements divs2 = doc.select(\"div:has([class]\");\n        try{ assertEquals(1, divs2.size());                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"1\", divs2.get(0).id());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        Elements divs3 = doc.select(\"div:has(span, p)\");\n        try{ assertEquals(3, divs3.size());                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"0\", divs3.get(0).id());                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"1\", divs3.get(1).id());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"2\", divs3.get(2).id());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        Elements els1 = doc.body().select(\":has(p)\");\n        try{ assertEquals(3, els1.size());                                                }catch(Throwable __SHOULD_BE_IGNORED){} // body, div, dib\n        try{ assertEquals(\"body\", els1.first().tagName());                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"0\", els1.get(1).id());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"2\", els1.get(2).id());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test public void testPseudoHas$catena_7() {\n        Document doc = Jsoup.parse(\"<div id=0><p><span>Hello</span></p></div> <div id=1><span class=foo>There</span></div> <div id=2><p>Not</p></div>\");\n\n        Elements divs1 = doc.select(\"div:has(span)\");\n        try{ assertEquals(2, divs1.size());                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"0\", divs1.get(0).id());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"1\", divs1.get(1).id());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        Elements divs2 = doc.select(\"div:has([class]\");\n        try{ assertEquals(1, divs2.size());                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"1\", divs2.get(0).id());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        Elements divs3 = doc.select(\"div:has(span, p)\");\n        try{ assertEquals(3, divs3.size());                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"0\", divs3.get(0).id());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"1\", divs3.get(1).id());                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"2\", divs3.get(2).id());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        Elements els1 = doc.body().select(\":has(p)\");\n        try{ assertEquals(3, els1.size());                                                }catch(Throwable __SHOULD_BE_IGNORED){} // body, div, dib\n        try{ assertEquals(\"body\", els1.first().tagName());                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"0\", els1.get(1).id());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"2\", els1.get(2).id());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test public void testPseudoHas$catena_8() {\n        Document doc = Jsoup.parse(\"<div id=0><p><span>Hello</span></p></div> <div id=1><span class=foo>There</span></div> <div id=2><p>Not</p></div>\");\n\n        Elements divs1 = doc.select(\"div:has(span)\");\n        try{ assertEquals(2, divs1.size());                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"0\", divs1.get(0).id());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"1\", divs1.get(1).id());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        Elements divs2 = doc.select(\"div:has([class]\");\n        try{ assertEquals(1, divs2.size());                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"1\", divs2.get(0).id());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        Elements divs3 = doc.select(\"div:has(span, p)\");\n        try{ assertEquals(3, divs3.size());                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"0\", divs3.get(0).id());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"1\", divs3.get(1).id());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"2\", divs3.get(2).id());                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n\n        Elements els1 = doc.body().select(\":has(p)\");\n        try{ assertEquals(3, els1.size());                                                }catch(Throwable __SHOULD_BE_IGNORED){} // body, div, dib\n        try{ assertEquals(\"body\", els1.first().tagName());                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"0\", els1.get(1).id());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"2\", els1.get(2).id());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    }
}