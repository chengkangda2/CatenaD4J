{
    "org.jsoup.safety.CleanerTest::testIsValid": {
        "begin_line_no": 91,
        "end_line_no": 100,
        "file_path": "src/test/java/org/jsoup/safety/CleanerTest.java",
        "to": [
            "    @Test public void testIsValid$catena_3() {\n        String ok = \"<p>Test <b><a href='http://example.com/'>OK</a></b></p>\";\n        String nok1 = \"<p><script></script>Not <b>OK</b></p>\";\n        String nok2 = \"<p align=right>Test Not <b>OK</b></p>\";\n        String nok3 = \"<!-- comment --><p>Not OK</p>\"; // comments and the like will be cleaned\n        try{ assertTrue(Jsoup.isValid(ok, Whitelist.basic()));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(Jsoup.isValid(nok1, Whitelist.basic()));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(Jsoup.isValid(nok2, Whitelist.basic()));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertFalse(Jsoup.isValid(nok3, Whitelist.basic()));                                                /***** ORIGINAL ASSERTION IS HERE *****/\n    }",
            "    @Test public void testIsValid$catena_0() {\n        String ok = \"<p>Test <b><a href='http://example.com/'>OK</a></b></p>\";\n        String nok1 = \"<p><script></script>Not <b>OK</b></p>\";\n        String nok2 = \"<p align=right>Test Not <b>OK</b></p>\";\n        String nok3 = \"<!-- comment --><p>Not OK</p>\"; // comments and the like will be cleaned\n        assertTrue(Jsoup.isValid(ok, Whitelist.basic()));                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertFalse(Jsoup.isValid(nok1, Whitelist.basic()));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(Jsoup.isValid(nok2, Whitelist.basic()));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(Jsoup.isValid(nok3, Whitelist.basic()));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test public void testIsValid$catena_1() {\n        String ok = \"<p>Test <b><a href='http://example.com/'>OK</a></b></p>\";\n        String nok1 = \"<p><script></script>Not <b>OK</b></p>\";\n        String nok2 = \"<p align=right>Test Not <b>OK</b></p>\";\n        String nok3 = \"<!-- comment --><p>Not OK</p>\"; // comments and the like will be cleaned\n        try{ assertTrue(Jsoup.isValid(ok, Whitelist.basic()));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertFalse(Jsoup.isValid(nok1, Whitelist.basic()));                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertFalse(Jsoup.isValid(nok2, Whitelist.basic()));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(Jsoup.isValid(nok3, Whitelist.basic()));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test public void testIsValid$catena_2() {\n        String ok = \"<p>Test <b><a href='http://example.com/'>OK</a></b></p>\";\n        String nok1 = \"<p><script></script>Not <b>OK</b></p>\";\n        String nok2 = \"<p align=right>Test Not <b>OK</b></p>\";\n        String nok3 = \"<!-- comment --><p>Not OK</p>\"; // comments and the like will be cleaned\n        try{ assertTrue(Jsoup.isValid(ok, Whitelist.basic()));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(Jsoup.isValid(nok1, Whitelist.basic()));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertFalse(Jsoup.isValid(nok2, Whitelist.basic()));                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertFalse(Jsoup.isValid(nok3, Whitelist.basic()));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    }
}