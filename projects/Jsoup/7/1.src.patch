{
    "patch": [
        {
            "file_name": "src/main/java/org/jsoup/nodes/Document.java",
            "replaced_with": "import org.jsoup.select.Elements;\n",
            "patch_type": "insert",
            "next_line_no": 5
        },
        {
            "file_name": "src/main/java/org/jsoup/nodes/Document.java",
            "replaced_with": "        normaliseStructure(\"head\", htmlEl);\n        normaliseStructure(\"body\", htmlEl);\n",
            "patch_type": "insert",
            "next_line_no": 113
        },
        {
            "file_name": "src/main/java/org/jsoup/nodes/Document.java",
            "replaced_with": "    private void normaliseStructure(String tag, Element htmlEl) {\n        Elements elements = this.getElementsByTag(tag);\n        Element master = elements.first(); // will always be available as created above if not existent\n        if (elements.size() > 1) { // dupes, move contents to master\n            List<Node> toMove = new ArrayList<Node>();\n            for (int i = 1; i < elements.size(); i++) {\n                Node dupe = elements.get(i);\n                for (Node node : dupe.childNodes)\n                    toMove.add(node);\n                dupe.remove();\n            }\n\n            for (Node dupe : toMove)\n                master.appendChild(dupe);\n        }\n",
            "patch_type": "insert",
            "next_line_no": 137
        },
        {
            "file_name": "src/main/java/org/jsoup/nodes/Document.java",
            "replaced_with": "        if (!master.parent().equals(htmlEl)) {\n            htmlEl.appendChild(master); // includes remove()            \n        }\n    }\n",
            "patch_type": "insert",
            "next_line_no": 138
        }
    ]
}