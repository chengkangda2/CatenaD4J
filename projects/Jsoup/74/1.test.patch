{
    "org.jsoup.nodes.ElementTest::testNormalizesInvisiblesInText": {
        "begin_line_no": 1204,
        "end_line_no": 1220,
        "file_path": "src/test/java/org/jsoup/nodes/ElementTest.java",
        "to": [
            "    @Test public void testNormalizesInvisiblesInText$catena_3() {\n        // return Character.getType(c) == 16 && (c == 8203 || c == 8204 || c == 8205 || c == 173);\n        String escaped = \"This&shy;is&#x200b;one&#x200c;long&#x200d;word\";\n        String decoded = \"This\\u00ADis\\u200Bone\\u200Clong\\u200Dword\"; // browser would not display those soft hyphens / other chars, so we don't want them in the text\n\n        Document doc = Jsoup.parse(\"<p>\" + escaped);\n        Element p = doc.select(\"p\").first();\n        doc.outputSettings().charset(\"ascii\"); // so that the outer html is easier to see with escaped invisibles\n        try{ assertEquals(\"Thisisonelongword\", p.text());                             }catch(Throwable __SHOULD_BE_IGNORED){} // text is normalized\n        try{ assertEquals(\"<p>\" + escaped + \"</p>\", p.outerHtml());    }catch(Throwable __SHOULD_BE_IGNORED){} // html / whole text keeps &shy etc;\n        try{ assertEquals(decoded, p.textNodes().get(0).getWholeText());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        Element matched = doc.select(\"p:contains(Thisisonelongword)\").first(); // really just oneloneword, no invisibles\n        assertEquals(\"p\", matched.nodeName());                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(matched.is(\":containsOwn(Thisisonelongword)\"));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
            "    @Test public void testNormalizesInvisiblesInText$catena_4() {\n        // return Character.getType(c) == 16 && (c == 8203 || c == 8204 || c == 8205 || c == 173);\n        String escaped = \"This&shy;is&#x200b;one&#x200c;long&#x200d;word\";\n        String decoded = \"This\\u00ADis\\u200Bone\\u200Clong\\u200Dword\"; // browser would not display those soft hyphens / other chars, so we don't want them in the text\n\n        Document doc = Jsoup.parse(\"<p>\" + escaped);\n        Element p = doc.select(\"p\").first();\n        doc.outputSettings().charset(\"ascii\"); // so that the outer html is easier to see with escaped invisibles\n        try{ assertEquals(\"Thisisonelongword\", p.text());                             }catch(Throwable __SHOULD_BE_IGNORED){} // text is normalized\n        try{ assertEquals(\"<p>\" + escaped + \"</p>\", p.outerHtml());    }catch(Throwable __SHOULD_BE_IGNORED){} // html / whole text keeps &shy etc;\n        try{ assertEquals(decoded, p.textNodes().get(0).getWholeText());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        Element matched = doc.select(\"p:contains(Thisisonelongword)\").first(); // really just oneloneword, no invisibles\n        try{ assertEquals(\"p\", matched.nodeName());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(matched.is(\":containsOwn(Thisisonelongword)\"));                                          /***** ORIGINAL ASSERTION IS HERE *****/\n\n    }",
            "    @Test public void testNormalizesInvisiblesInText$catena_0() {\n        // return Character.getType(c) == 16 && (c == 8203 || c == 8204 || c == 8205 || c == 173);\n        String escaped = \"This&shy;is&#x200b;one&#x200c;long&#x200d;word\";\n        String decoded = \"This\\u00ADis\\u200Bone\\u200Clong\\u200Dword\"; // browser would not display those soft hyphens / other chars, so we don't want them in the text\n\n        Document doc = Jsoup.parse(\"<p>\" + escaped);\n        Element p = doc.select(\"p\").first();\n        doc.outputSettings().charset(\"ascii\"); // so that the outer html is easier to see with escaped invisibles\n        assertEquals(\"Thisisonelongword\", p.text());                                  /***** ORIGINAL ASSERTION IS HERE *****/ // text is normalized\n        try{ assertEquals(\"<p>\" + escaped + \"</p>\", p.outerHtml());    }catch(Throwable __SHOULD_BE_IGNORED){} // html / whole text keeps &shy etc;\n        try{ assertEquals(decoded, p.textNodes().get(0).getWholeText());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        Element matched = doc.select(\"p:contains(Thisisonelongword)\").first(); // really just oneloneword, no invisibles\n        try{ assertEquals(\"p\", matched.nodeName());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(matched.is(\":containsOwn(Thisisonelongword)\"));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
            "    @Test public void testNormalizesInvisiblesInText$catena_1() {\n        // return Character.getType(c) == 16 && (c == 8203 || c == 8204 || c == 8205 || c == 173);\n        String escaped = \"This&shy;is&#x200b;one&#x200c;long&#x200d;word\";\n        String decoded = \"This\\u00ADis\\u200Bone\\u200Clong\\u200Dword\"; // browser would not display those soft hyphens / other chars, so we don't want them in the text\n\n        Document doc = Jsoup.parse(\"<p>\" + escaped);\n        Element p = doc.select(\"p\").first();\n        doc.outputSettings().charset(\"ascii\"); // so that the outer html is easier to see with escaped invisibles\n        try{ assertEquals(\"Thisisonelongword\", p.text());                             }catch(Throwable __SHOULD_BE_IGNORED){} // text is normalized\n        assertEquals(\"<p>\" + escaped + \"</p>\", p.outerHtml());         /***** ORIGINAL ASSERTION IS HERE *****/ // html / whole text keeps &shy etc;\n        try{ assertEquals(decoded, p.textNodes().get(0).getWholeText());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        Element matched = doc.select(\"p:contains(Thisisonelongword)\").first(); // really just oneloneword, no invisibles\n        try{ assertEquals(\"p\", matched.nodeName());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(matched.is(\":containsOwn(Thisisonelongword)\"));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
            "    @Test public void testNormalizesInvisiblesInText$catena_2() {\n        // return Character.getType(c) == 16 && (c == 8203 || c == 8204 || c == 8205 || c == 173);\n        String escaped = \"This&shy;is&#x200b;one&#x200c;long&#x200d;word\";\n        String decoded = \"This\\u00ADis\\u200Bone\\u200Clong\\u200Dword\"; // browser would not display those soft hyphens / other chars, so we don't want them in the text\n\n        Document doc = Jsoup.parse(\"<p>\" + escaped);\n        Element p = doc.select(\"p\").first();\n        doc.outputSettings().charset(\"ascii\"); // so that the outer html is easier to see with escaped invisibles\n        try{ assertEquals(\"Thisisonelongword\", p.text());                             }catch(Throwable __SHOULD_BE_IGNORED){} // text is normalized\n        try{ assertEquals(\"<p>\" + escaped + \"</p>\", p.outerHtml());    }catch(Throwable __SHOULD_BE_IGNORED){} // html / whole text keeps &shy etc;\n        assertEquals(decoded, p.textNodes().get(0).getWholeText());                                         /***** ORIGINAL ASSERTION IS HERE *****/\n\n        Element matched = doc.select(\"p:contains(Thisisonelongword)\").first(); // really just oneloneword, no invisibles\n        try{ assertEquals(\"p\", matched.nodeName());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(matched.is(\":containsOwn(Thisisonelongword)\"));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }"
        ]
    }
}