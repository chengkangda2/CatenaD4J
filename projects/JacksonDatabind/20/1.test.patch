{
    "com.fasterxml.jackson.databind.introspect.TestNamingStrategyStd::testNamingWithObjectNode": {
        "begin_line_no": 305,
        "end_line_no": 318,
        "file_path": "src/test/java/com/fasterxml/jackson/databind/introspect/TestNamingStrategyStd.java",
        "to": [
            "    public void testNamingWithObjectNode$catena_3() throws Exception\n    {\n        ObjectMapper m = new ObjectMapper();\n        m.setPropertyNamingStrategy(PropertyNamingStrategy.LOWER_CASE);\n        ClassWithObjectNodeField result =\n            m.readValue(\n                \"{ \\\"id\\\": \\\"1\\\", \\\"json\\\": { \\\"foo\\\": \\\"bar\\\", \\\"baz\\\": \\\"bing\\\" } }\",\n                ClassWithObjectNodeField.class);\n        try{ assertNotNull(result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"1\", result.id);                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(result.json);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(2, result.json.size());                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"bing\", result.json.path(\"baz\").asText());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testNamingWithObjectNode$catena_2() throws Exception\n    {\n        ObjectMapper m = new ObjectMapper();\n        m.setPropertyNamingStrategy(PropertyNamingStrategy.LOWER_CASE);\n        ClassWithObjectNodeField result =\n            m.readValue(\n                \"{ \\\"id\\\": \\\"1\\\", \\\"json\\\": { \\\"foo\\\": \\\"bar\\\", \\\"baz\\\": \\\"bing\\\" } }\",\n                ClassWithObjectNodeField.class);\n        try{ assertNotNull(result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"1\", result.id);                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertNotNull(result.json);                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(2, result.json.size());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"bing\", result.json.path(\"baz\").asText());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testNamingWithObjectNode$catena_0() throws Exception\n    {\n        ObjectMapper m = new ObjectMapper();\n        m.setPropertyNamingStrategy(PropertyNamingStrategy.LOWER_CASE);\n        ClassWithObjectNodeField result =\n            m.readValue(\n                \"{ \\\"id\\\": \\\"1\\\", \\\"json\\\": { \\\"foo\\\": \\\"bar\\\", \\\"baz\\\": \\\"bing\\\" } }\",\n                ClassWithObjectNodeField.class);\n        assertNotNull(result);                                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"1\", result.id);                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(result.json);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, result.json.size());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"bing\", result.json.path(\"baz\").asText());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testNamingWithObjectNode$catena_1() throws Exception\n    {\n        ObjectMapper m = new ObjectMapper();\n        m.setPropertyNamingStrategy(PropertyNamingStrategy.LOWER_CASE);\n        ClassWithObjectNodeField result =\n            m.readValue(\n                \"{ \\\"id\\\": \\\"1\\\", \\\"json\\\": { \\\"foo\\\": \\\"bar\\\", \\\"baz\\\": \\\"bing\\\" } }\",\n                ClassWithObjectNodeField.class);\n        try{ assertNotNull(result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"1\", result.id);                                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertNotNull(result.json);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, result.json.size());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"bing\", result.json.path(\"baz\").asText());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testNamingWithObjectNode$catena_4() throws Exception\n    {\n        ObjectMapper m = new ObjectMapper();\n        m.setPropertyNamingStrategy(PropertyNamingStrategy.LOWER_CASE);\n        ClassWithObjectNodeField result =\n            m.readValue(\n                \"{ \\\"id\\\": \\\"1\\\", \\\"json\\\": { \\\"foo\\\": \\\"bar\\\", \\\"baz\\\": \\\"bing\\\" } }\",\n                ClassWithObjectNodeField.class);\n        try{ assertNotNull(result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"1\", result.id);                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(result.json);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, result.json.size());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"bing\", result.json.path(\"baz\").asText());                                             /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
        ]
    }
}