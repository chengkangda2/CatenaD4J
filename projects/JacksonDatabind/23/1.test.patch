{
    "com.fasterxml.jackson.databind.ser.TestJsonSerialize2::testEmptyInclusionScalars": {
        "begin_line_no": 221,
        "end_line_no": 245,
        "file_path": "src/test/java/com/fasterxml/jackson/databind/ser/TestJsonSerialize2.java",
        "to": [
            "    public void testEmptyInclusionScalars$catena_8() throws IOException\n    {\n        ObjectMapper defMapper = MAPPER;\n        ObjectMapper inclMapper = new ObjectMapper().setSerializationInclusion(JsonInclude.Include.NON_EMPTY);\n\n        // First, Strings\n        StringWrapper str = new StringWrapper(\"\");\n        try{ assertEquals(\"{\\\"str\\\":\\\"\\\"}\", defMapper.writeValueAsString(str));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"{}\", inclMapper.writeValueAsString(str));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"{}\", inclMapper.writeValueAsString(new StringWrapper()));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"{\\\"value\\\":\\\"x\\\"}\", defMapper.writeValueAsString(new NonEmptyString(\"x\")));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"{}\", defMapper.writeValueAsString(new NonEmptyString(\"\")));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Then numbers\n        try{ assertEquals(\"{\\\"value\\\":12}\", defMapper.writeValueAsString(new NonEmptyInt(12)));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"{}\", defMapper.writeValueAsString(new NonEmptyInt(0)));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"{\\\"value\\\":1.25}\", defMapper.writeValueAsString(new NonEmptyDouble(1.25)));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"{}\", defMapper.writeValueAsString(new NonEmptyDouble(0.0)));                          /***** ORIGINAL ASSERTION IS HERE *****/\n\n        IntWrapper zero = new IntWrapper(0);\n        try{ assertEquals(\"{\\\"i\\\":0}\", defMapper.writeValueAsString(zero));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"{}\", inclMapper.writeValueAsString(zero));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testEmptyInclusionScalars$catena_0() throws IOException\n    {\n        ObjectMapper defMapper = MAPPER;\n        ObjectMapper inclMapper = new ObjectMapper().setSerializationInclusion(JsonInclude.Include.NON_EMPTY);\n\n        // First, Strings\n        StringWrapper str = new StringWrapper(\"\");\n        assertEquals(\"{\\\"str\\\":\\\"\\\"}\", defMapper.writeValueAsString(str));                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"{}\", inclMapper.writeValueAsString(str));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"{}\", inclMapper.writeValueAsString(new StringWrapper()));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"{\\\"value\\\":\\\"x\\\"}\", defMapper.writeValueAsString(new NonEmptyString(\"x\")));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"{}\", defMapper.writeValueAsString(new NonEmptyString(\"\")));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Then numbers\n        try{ assertEquals(\"{\\\"value\\\":12}\", defMapper.writeValueAsString(new NonEmptyInt(12)));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"{}\", defMapper.writeValueAsString(new NonEmptyInt(0)));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"{\\\"value\\\":1.25}\", defMapper.writeValueAsString(new NonEmptyDouble(1.25)));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"{}\", defMapper.writeValueAsString(new NonEmptyDouble(0.0)));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        IntWrapper zero = new IntWrapper(0);\n        try{ assertEquals(\"{\\\"i\\\":0}\", defMapper.writeValueAsString(zero));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"{}\", inclMapper.writeValueAsString(zero));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testEmptyInclusionScalars$catena_1() throws IOException\n    {\n        ObjectMapper defMapper = MAPPER;\n        ObjectMapper inclMapper = new ObjectMapper().setSerializationInclusion(JsonInclude.Include.NON_EMPTY);\n\n        // First, Strings\n        StringWrapper str = new StringWrapper(\"\");\n        try{ assertEquals(\"{\\\"str\\\":\\\"\\\"}\", defMapper.writeValueAsString(str));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"{}\", inclMapper.writeValueAsString(str));                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"{}\", inclMapper.writeValueAsString(new StringWrapper()));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"{\\\"value\\\":\\\"x\\\"}\", defMapper.writeValueAsString(new NonEmptyString(\"x\")));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"{}\", defMapper.writeValueAsString(new NonEmptyString(\"\")));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Then numbers\n        try{ assertEquals(\"{\\\"value\\\":12}\", defMapper.writeValueAsString(new NonEmptyInt(12)));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"{}\", defMapper.writeValueAsString(new NonEmptyInt(0)));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"{\\\"value\\\":1.25}\", defMapper.writeValueAsString(new NonEmptyDouble(1.25)));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"{}\", defMapper.writeValueAsString(new NonEmptyDouble(0.0)));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        IntWrapper zero = new IntWrapper(0);\n        try{ assertEquals(\"{\\\"i\\\":0}\", defMapper.writeValueAsString(zero));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"{}\", inclMapper.writeValueAsString(zero));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testEmptyInclusionScalars$catena_2() throws IOException\n    {\n        ObjectMapper defMapper = MAPPER;\n        ObjectMapper inclMapper = new ObjectMapper().setSerializationInclusion(JsonInclude.Include.NON_EMPTY);\n\n        // First, Strings\n        StringWrapper str = new StringWrapper(\"\");\n        try{ assertEquals(\"{\\\"str\\\":\\\"\\\"}\", defMapper.writeValueAsString(str));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"{}\", inclMapper.writeValueAsString(str));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"{}\", inclMapper.writeValueAsString(new StringWrapper()));                             /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ assertEquals(\"{\\\"value\\\":\\\"x\\\"}\", defMapper.writeValueAsString(new NonEmptyString(\"x\")));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"{}\", defMapper.writeValueAsString(new NonEmptyString(\"\")));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Then numbers\n        try{ assertEquals(\"{\\\"value\\\":12}\", defMapper.writeValueAsString(new NonEmptyInt(12)));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"{}\", defMapper.writeValueAsString(new NonEmptyInt(0)));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"{\\\"value\\\":1.25}\", defMapper.writeValueAsString(new NonEmptyDouble(1.25)));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"{}\", defMapper.writeValueAsString(new NonEmptyDouble(0.0)));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        IntWrapper zero = new IntWrapper(0);\n        try{ assertEquals(\"{\\\"i\\\":0}\", defMapper.writeValueAsString(zero));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"{}\", inclMapper.writeValueAsString(zero));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testEmptyInclusionScalars$catena_3() throws IOException\n    {\n        ObjectMapper defMapper = MAPPER;\n        ObjectMapper inclMapper = new ObjectMapper().setSerializationInclusion(JsonInclude.Include.NON_EMPTY);\n\n        // First, Strings\n        StringWrapper str = new StringWrapper(\"\");\n        try{ assertEquals(\"{\\\"str\\\":\\\"\\\"}\", defMapper.writeValueAsString(str));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"{}\", inclMapper.writeValueAsString(str));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"{}\", inclMapper.writeValueAsString(new StringWrapper()));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        assertEquals(\"{\\\"value\\\":\\\"x\\\"}\", defMapper.writeValueAsString(new NonEmptyString(\"x\")));           /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"{}\", defMapper.writeValueAsString(new NonEmptyString(\"\")));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Then numbers\n        try{ assertEquals(\"{\\\"value\\\":12}\", defMapper.writeValueAsString(new NonEmptyInt(12)));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"{}\", defMapper.writeValueAsString(new NonEmptyInt(0)));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"{\\\"value\\\":1.25}\", defMapper.writeValueAsString(new NonEmptyDouble(1.25)));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"{}\", defMapper.writeValueAsString(new NonEmptyDouble(0.0)));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        IntWrapper zero = new IntWrapper(0);\n        try{ assertEquals(\"{\\\"i\\\":0}\", defMapper.writeValueAsString(zero));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"{}\", inclMapper.writeValueAsString(zero));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testEmptyInclusionScalars$catena_4() throws IOException\n    {\n        ObjectMapper defMapper = MAPPER;\n        ObjectMapper inclMapper = new ObjectMapper().setSerializationInclusion(JsonInclude.Include.NON_EMPTY);\n\n        // First, Strings\n        StringWrapper str = new StringWrapper(\"\");\n        try{ assertEquals(\"{\\\"str\\\":\\\"\\\"}\", defMapper.writeValueAsString(str));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"{}\", inclMapper.writeValueAsString(str));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"{}\", inclMapper.writeValueAsString(new StringWrapper()));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"{\\\"value\\\":\\\"x\\\"}\", defMapper.writeValueAsString(new NonEmptyString(\"x\")));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"{}\", defMapper.writeValueAsString(new NonEmptyString(\"\")));                           /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // Then numbers\n        try{ assertEquals(\"{\\\"value\\\":12}\", defMapper.writeValueAsString(new NonEmptyInt(12)));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"{}\", defMapper.writeValueAsString(new NonEmptyInt(0)));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"{\\\"value\\\":1.25}\", defMapper.writeValueAsString(new NonEmptyDouble(1.25)));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"{}\", defMapper.writeValueAsString(new NonEmptyDouble(0.0)));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        IntWrapper zero = new IntWrapper(0);\n        try{ assertEquals(\"{\\\"i\\\":0}\", defMapper.writeValueAsString(zero));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"{}\", inclMapper.writeValueAsString(zero));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testEmptyInclusionScalars$catena_5() throws IOException\n    {\n        ObjectMapper defMapper = MAPPER;\n        ObjectMapper inclMapper = new ObjectMapper().setSerializationInclusion(JsonInclude.Include.NON_EMPTY);\n\n        // First, Strings\n        StringWrapper str = new StringWrapper(\"\");\n        try{ assertEquals(\"{\\\"str\\\":\\\"\\\"}\", defMapper.writeValueAsString(str));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"{}\", inclMapper.writeValueAsString(str));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"{}\", inclMapper.writeValueAsString(new StringWrapper()));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"{\\\"value\\\":\\\"x\\\"}\", defMapper.writeValueAsString(new NonEmptyString(\"x\")));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"{}\", defMapper.writeValueAsString(new NonEmptyString(\"\")));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Then numbers\n        assertEquals(\"{\\\"value\\\":12}\", defMapper.writeValueAsString(new NonEmptyInt(12)));                  /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"{}\", defMapper.writeValueAsString(new NonEmptyInt(0)));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"{\\\"value\\\":1.25}\", defMapper.writeValueAsString(new NonEmptyDouble(1.25)));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"{}\", defMapper.writeValueAsString(new NonEmptyDouble(0.0)));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        IntWrapper zero = new IntWrapper(0);\n        try{ assertEquals(\"{\\\"i\\\":0}\", defMapper.writeValueAsString(zero));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"{}\", inclMapper.writeValueAsString(zero));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testEmptyInclusionScalars$catena_7() throws IOException\n    {\n        ObjectMapper defMapper = MAPPER;\n        ObjectMapper inclMapper = new ObjectMapper().setSerializationInclusion(JsonInclude.Include.NON_EMPTY);\n\n        // First, Strings\n        StringWrapper str = new StringWrapper(\"\");\n        try{ assertEquals(\"{\\\"str\\\":\\\"\\\"}\", defMapper.writeValueAsString(str));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"{}\", inclMapper.writeValueAsString(str));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"{}\", inclMapper.writeValueAsString(new StringWrapper()));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"{\\\"value\\\":\\\"x\\\"}\", defMapper.writeValueAsString(new NonEmptyString(\"x\")));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"{}\", defMapper.writeValueAsString(new NonEmptyString(\"\")));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Then numbers\n        try{ assertEquals(\"{\\\"value\\\":12}\", defMapper.writeValueAsString(new NonEmptyInt(12)));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"{}\", defMapper.writeValueAsString(new NonEmptyInt(0)));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        assertEquals(\"{\\\"value\\\":1.25}\", defMapper.writeValueAsString(new NonEmptyDouble(1.25)));           /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"{}\", defMapper.writeValueAsString(new NonEmptyDouble(0.0)));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        IntWrapper zero = new IntWrapper(0);\n        try{ assertEquals(\"{\\\"i\\\":0}\", defMapper.writeValueAsString(zero));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"{}\", inclMapper.writeValueAsString(zero));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testEmptyInclusionScalars$catena_9() throws IOException\n    {\n        ObjectMapper defMapper = MAPPER;\n        ObjectMapper inclMapper = new ObjectMapper().setSerializationInclusion(JsonInclude.Include.NON_EMPTY);\n\n        // First, Strings\n        StringWrapper str = new StringWrapper(\"\");\n        try{ assertEquals(\"{\\\"str\\\":\\\"\\\"}\", defMapper.writeValueAsString(str));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"{}\", inclMapper.writeValueAsString(str));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"{}\", inclMapper.writeValueAsString(new StringWrapper()));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"{\\\"value\\\":\\\"x\\\"}\", defMapper.writeValueAsString(new NonEmptyString(\"x\")));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"{}\", defMapper.writeValueAsString(new NonEmptyString(\"\")));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Then numbers\n        try{ assertEquals(\"{\\\"value\\\":12}\", defMapper.writeValueAsString(new NonEmptyInt(12)));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"{}\", defMapper.writeValueAsString(new NonEmptyInt(0)));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"{\\\"value\\\":1.25}\", defMapper.writeValueAsString(new NonEmptyDouble(1.25)));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"{}\", defMapper.writeValueAsString(new NonEmptyDouble(0.0)));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        IntWrapper zero = new IntWrapper(0);\n        assertEquals(\"{\\\"i\\\":0}\", defMapper.writeValueAsString(zero));                                      /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"{}\", inclMapper.writeValueAsString(zero));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    }
}