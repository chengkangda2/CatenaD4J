{
    "com.fasterxml.jackson.databind.deser.TestUntypedDeserialization::testNestedUntyped989": {
        "begin_line_no": 254,
        "end_line_no": 268,
        "file_path": "src/test/java/com/fasterxml/jackson/databind/deser/TestUntypedDeserialization.java",
        "to": [
            "    public void testNestedUntyped989$catena_3() throws IOException\n    {\n        Untyped989 pojo;\n        ObjectReader r = MAPPER.readerFor(Untyped989.class);\n\n        pojo = r.readValue(\"[]\");\n        try{ assertTrue(pojo.value instanceof List);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        pojo = r.readValue(\"[{}]\");\n        try{ assertTrue(pojo.value instanceof List);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        pojo = r.readValue(\"{}\");\n        try{ assertTrue(pojo.value instanceof Map);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        pojo = r.readValue(\"{\\\"a\\\":[]}\");\n        assertTrue(pojo.value instanceof Map);                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n    }",
            "    public void testNestedUntyped989$catena_0() throws IOException\n    {\n        Untyped989 pojo;\n        ObjectReader r = MAPPER.readerFor(Untyped989.class);\n\n        pojo = r.readValue(\"[]\");\n        assertTrue(pojo.value instanceof List);                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        pojo = r.readValue(\"[{}]\");\n        try{ assertTrue(pojo.value instanceof List);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        pojo = r.readValue(\"{}\");\n        try{ assertTrue(pojo.value instanceof Map);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        pojo = r.readValue(\"{\\\"a\\\":[]}\");\n        try{ assertTrue(pojo.value instanceof Map);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testNestedUntyped989$catena_2() throws IOException\n    {\n        Untyped989 pojo;\n        ObjectReader r = MAPPER.readerFor(Untyped989.class);\n\n        pojo = r.readValue(\"[]\");\n        try{ assertTrue(pojo.value instanceof List);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        pojo = r.readValue(\"[{}]\");\n        try{ assertTrue(pojo.value instanceof List);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        pojo = r.readValue(\"{}\");\n        assertTrue(pojo.value instanceof Map);                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n        pojo = r.readValue(\"{\\\"a\\\":[]}\");\n        try{ assertTrue(pojo.value instanceof Map);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testNestedUntyped989$catena_1() throws IOException\n    {\n        Untyped989 pojo;\n        ObjectReader r = MAPPER.readerFor(Untyped989.class);\n\n        pojo = r.readValue(\"[]\");\n        try{ assertTrue(pojo.value instanceof List);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        pojo = r.readValue(\"[{}]\");\n        assertTrue(pojo.value instanceof List);                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        pojo = r.readValue(\"{}\");\n        try{ assertTrue(pojo.value instanceof Map);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        pojo = r.readValue(\"{\\\"a\\\":[]}\");\n        try{ assertTrue(pojo.value instanceof Map);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    }
}