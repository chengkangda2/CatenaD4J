{
    "com.fasterxml.jackson.databind.ser.jdk.DateSerializationTest::testDateISO8601_10k": {
        "begin_line_no": 130,
        "end_line_no": 137,
        "file_path": "src/test/java/com/fasterxml/jackson/databind/ser/jdk/DateSerializationTest.java",
        "to": [
            "    public void testDateISO8601_10k$catena_1() throws IOException\n    {\n        ObjectWriter w = MAPPER.writer()\n                .without(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\n        try{ serialize(w, judate(10204, 1, 1,  00, 00, 00, 0, \"UTC\"),   \"+10204-01-01T00:00:00.000+0000\");      }catch(Throwable __SHOULD_BE_IGNORED){}\n        // and although specification lacks for beyond 5 digits (well, actually even 5...), let's do our best:\n        serialize(w, judate(123456, 1, 1,  00, 00, 00, 0, \"UTC\"),   \"+123456-01-01T00:00:00.000+0000\");         /***** ORIGINAL ASSERTION IS HERE *****/\n    }",
            "    public void testDateISO8601_10k$catena_0() throws IOException\n    {\n        ObjectWriter w = MAPPER.writer()\n                .without(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\n        serialize(w, judate(10204, 1, 1,  00, 00, 00, 0, \"UTC\"),   \"+10204-01-01T00:00:00.000+0000\");           /***** ORIGINAL ASSERTION IS HERE *****/\n        // and although specification lacks for beyond 5 digits (well, actually even 5...), let's do our best:\n        try{ serialize(w, judate(123456, 1, 1,  00, 00, 00, 0, \"UTC\"),   \"+123456-01-01T00:00:00.000+0000\");    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    },
    "com.fasterxml.jackson.databind.ser.jdk.DateSerializationTest::testDateISO8601_BCE": {
        "begin_line_no": 140,
        "end_line_no": 152,
        "file_path": "src/test/java/com/fasterxml/jackson/databind/ser/jdk/DateSerializationTest.java",
        "to": [
            ""
        ]
    }
}