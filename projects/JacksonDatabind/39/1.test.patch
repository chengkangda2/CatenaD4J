{
    "com.fasterxml.jackson.databind.jsontype.TestPolymorphicWithDefaultImpl::testUnknownTypeIDRecovery": {
        "begin_line_no": 215,
        "end_line_no": 231,
        "file_path": "src/test/java/com/fasterxml/jackson/databind/jsontype/TestPolymorphicWithDefaultImpl.java",
        "to": [
            "    public void testUnknownTypeIDRecovery$catena_1() throws Exception\n    {\n        ObjectReader reader = MAPPER.readerFor(CallRecord.class).without(\n                DeserializationFeature.FAIL_ON_INVALID_SUBTYPE);\n        String json = aposToQuotes(\"{'version':0.0,'application':'123',\"\n                +\"'item':{'type':'xevent','location':'location1'},\"\n                +\"'item2':{'type':'event','location':'location1'}}\");\n        // can't read item2 - which is valid\n        CallRecord r = reader.readValue(json);\n        try{ assertNull(r.item);                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertNotNull(r.item2);                                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n\n        json = aposToQuotes(\"{'item':{'type':'xevent','location':'location1'}, 'version':0.0,'application':'123'}\");\n        CallRecord r3 = reader.readValue(json);\n        try{ assertNull(r3.item);                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"123\", r3.application);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testUnknownTypeIDRecovery$catena_0() throws Exception\n    {\n        ObjectReader reader = MAPPER.readerFor(CallRecord.class).without(\n                DeserializationFeature.FAIL_ON_INVALID_SUBTYPE);\n        String json = aposToQuotes(\"{'version':0.0,'application':'123',\"\n                +\"'item':{'type':'xevent','location':'location1'},\"\n                +\"'item2':{'type':'event','location':'location1'}}\");\n        // can't read item2 - which is valid\n        CallRecord r = reader.readValue(json);\n        assertNull(r.item);                                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertNotNull(r.item2);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        json = aposToQuotes(\"{'item':{'type':'xevent','location':'location1'}, 'version':0.0,'application':'123'}\");\n        CallRecord r3 = reader.readValue(json);\n        try{ assertNull(r3.item);                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"123\", r3.application);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testUnknownTypeIDRecovery$catena_3() throws Exception\n    {\n        ObjectReader reader = MAPPER.readerFor(CallRecord.class).without(\n                DeserializationFeature.FAIL_ON_INVALID_SUBTYPE);\n        String json = aposToQuotes(\"{'version':0.0,'application':'123',\"\n                +\"'item':{'type':'xevent','location':'location1'},\"\n                +\"'item2':{'type':'event','location':'location1'}}\");\n        // can't read item2 - which is valid\n        CallRecord r = reader.readValue(json);\n        try{ assertNull(r.item);                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(r.item2);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        json = aposToQuotes(\"{'item':{'type':'xevent','location':'location1'}, 'version':0.0,'application':'123'}\");\n        CallRecord r3 = reader.readValue(json);\n        try{ assertNull(r3.item);                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"123\", r3.application);                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n    }",
            "    public void testUnknownTypeIDRecovery$catena_2() throws Exception\n    {\n        ObjectReader reader = MAPPER.readerFor(CallRecord.class).without(\n                DeserializationFeature.FAIL_ON_INVALID_SUBTYPE);\n        String json = aposToQuotes(\"{'version':0.0,'application':'123',\"\n                +\"'item':{'type':'xevent','location':'location1'},\"\n                +\"'item2':{'type':'event','location':'location1'}}\");\n        // can't read item2 - which is valid\n        CallRecord r = reader.readValue(json);\n        try{ assertNull(r.item);                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(r.item2);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        json = aposToQuotes(\"{'item':{'type':'xevent','location':'location1'}, 'version':0.0,'application':'123'}\");\n        CallRecord r3 = reader.readValue(json);\n        assertNull(r3.item);                                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"123\", r3.application);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    }
}