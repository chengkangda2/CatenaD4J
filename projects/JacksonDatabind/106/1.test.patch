{
    "com.fasterxml.jackson.databind.node.TestTreeTraversingParser::testNumberOverflowLong": {
        "begin_line_no": 314,
        "end_line_no": 353,
        "file_path": "src/test/java/com/fasterxml/jackson/databind/node/TestTreeTraversingParser.java",
        "to": [
            "    public void testNumberOverflowLong$catena_14() throws IOException\n    {\n        final BigInteger tooBig = BigInteger.valueOf(Long.MAX_VALUE).add(BigInteger.ONE);\n        try (final JsonParser p = MAPPER.readTree(\"[ \"+tooBig+\" ]\").traverse()) {\n            try{ assertToken(JsonToken.START_ARRAY, p.nextToken());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(NumberType.BIG_INTEGER, p.getNumberType());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getLongValue();\n                try{ fail(\"Expected failure for `long` overflow\");                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig+\") out of range of long\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n        try (final JsonParser p = MAPPER.readTree(\"{ \\\"value\\\" : \"+tooBig+\" }\").traverse()) {\n            try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(NumberType.BIG_INTEGER, p.getNumberType());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getLongValue();\n                try{ fail(\"Expected failure for `long` overflow\");                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig+\") out of range of long\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n        // But also from floating-point\n        final String tooBig2 = \"1.0e30\";\n        try (final JsonParser p = MAPPER.readTree(\"[ \"+tooBig2+\" ]\").traverse()) {\n            try{ assertToken(JsonToken.START_ARRAY, p.nextToken());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(NumberType.DOUBLE, p.getNumberType());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getLongValue();\n                fail(\"Expected failure for `long` overflow\");                                               /***** ORIGINAL ASSERTION IS HERE *****/\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig2+\") out of range of long\");                }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n    }",
            "    public void testNumberOverflowLong$catena_3() throws IOException\n    {\n        final BigInteger tooBig = BigInteger.valueOf(Long.MAX_VALUE).add(BigInteger.ONE);\n        try (final JsonParser p = MAPPER.readTree(\"[ \"+tooBig+\" ]\").traverse()) {\n            try{ assertToken(JsonToken.START_ARRAY, p.nextToken());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(NumberType.BIG_INTEGER, p.getNumberType());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getLongValue();\n                fail(\"Expected failure for `long` overflow\");                                               /***** ORIGINAL ASSERTION IS HERE *****/\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig+\") out of range of long\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n        try (final JsonParser p = MAPPER.readTree(\"{ \\\"value\\\" : \"+tooBig+\" }\").traverse()) {\n            try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(NumberType.BIG_INTEGER, p.getNumberType());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getLongValue();\n                try{ fail(\"Expected failure for `long` overflow\");                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig+\") out of range of long\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n        // But also from floating-point\n        final String tooBig2 = \"1.0e30\";\n        try (final JsonParser p = MAPPER.readTree(\"[ \"+tooBig2+\" ]\").traverse()) {\n            try{ assertToken(JsonToken.START_ARRAY, p.nextToken());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(NumberType.DOUBLE, p.getNumberType());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getLongValue();\n                try{ fail(\"Expected failure for `long` overflow\");                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig2+\") out of range of long\");                }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n    }",
            "    public void testNumberOverflowLong$catena_9() throws IOException\n    {\n        final BigInteger tooBig = BigInteger.valueOf(Long.MAX_VALUE).add(BigInteger.ONE);\n        try (final JsonParser p = MAPPER.readTree(\"[ \"+tooBig+\" ]\").traverse()) {\n            try{ assertToken(JsonToken.START_ARRAY, p.nextToken());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(NumberType.BIG_INTEGER, p.getNumberType());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getLongValue();\n                try{ fail(\"Expected failure for `long` overflow\");                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig+\") out of range of long\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n        try (final JsonParser p = MAPPER.readTree(\"{ \\\"value\\\" : \"+tooBig+\" }\").traverse()) {\n            try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(NumberType.BIG_INTEGER, p.getNumberType());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getLongValue();\n                fail(\"Expected failure for `long` overflow\");                                               /***** ORIGINAL ASSERTION IS HERE *****/\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig+\") out of range of long\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n        // But also from floating-point\n        final String tooBig2 = \"1.0e30\";\n        try (final JsonParser p = MAPPER.readTree(\"[ \"+tooBig2+\" ]\").traverse()) {\n            try{ assertToken(JsonToken.START_ARRAY, p.nextToken());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(NumberType.DOUBLE, p.getNumberType());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getLongValue();\n                try{ fail(\"Expected failure for `long` overflow\");                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig2+\") out of range of long\");                }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n    }",
            "    public void testNumberOverflowLong$catena_0() throws IOException\n    {\n        final BigInteger tooBig = BigInteger.valueOf(Long.MAX_VALUE).add(BigInteger.ONE);\n        try (final JsonParser p = MAPPER.readTree(\"[ \"+tooBig+\" ]\").traverse()) {\n            assertToken(JsonToken.START_ARRAY, p.nextToken());                                              /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(NumberType.BIG_INTEGER, p.getNumberType());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getLongValue();\n                try{ fail(\"Expected failure for `long` overflow\");                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig+\") out of range of long\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n        try (final JsonParser p = MAPPER.readTree(\"{ \\\"value\\\" : \"+tooBig+\" }\").traverse()) {\n            try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(NumberType.BIG_INTEGER, p.getNumberType());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getLongValue();\n                try{ fail(\"Expected failure for `long` overflow\");                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig+\") out of range of long\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n        // But also from floating-point\n        final String tooBig2 = \"1.0e30\";\n        try (final JsonParser p = MAPPER.readTree(\"[ \"+tooBig2+\" ]\").traverse()) {\n            try{ assertToken(JsonToken.START_ARRAY, p.nextToken());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(NumberType.DOUBLE, p.getNumberType());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getLongValue();\n                try{ fail(\"Expected failure for `long` overflow\");                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig2+\") out of range of long\");                }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n    }",
            "    public void testNumberOverflowLong$catena_1() throws IOException\n    {\n        final BigInteger tooBig = BigInteger.valueOf(Long.MAX_VALUE).add(BigInteger.ONE);\n        try (final JsonParser p = MAPPER.readTree(\"[ \"+tooBig+\" ]\").traverse()) {\n            try{ assertToken(JsonToken.START_ARRAY, p.nextToken());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                         /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(NumberType.BIG_INTEGER, p.getNumberType());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getLongValue();\n                try{ fail(\"Expected failure for `long` overflow\");                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig+\") out of range of long\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n        try (final JsonParser p = MAPPER.readTree(\"{ \\\"value\\\" : \"+tooBig+\" }\").traverse()) {\n            try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(NumberType.BIG_INTEGER, p.getNumberType());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getLongValue();\n                try{ fail(\"Expected failure for `long` overflow\");                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig+\") out of range of long\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n        // But also from floating-point\n        final String tooBig2 = \"1.0e30\";\n        try (final JsonParser p = MAPPER.readTree(\"[ \"+tooBig2+\" ]\").traverse()) {\n            try{ assertToken(JsonToken.START_ARRAY, p.nextToken());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(NumberType.DOUBLE, p.getNumberType());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getLongValue();\n                try{ fail(\"Expected failure for `long` overflow\");                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig2+\") out of range of long\");                }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n    }",
            "    public void testNumberOverflowLong$catena_2() throws IOException\n    {\n        final BigInteger tooBig = BigInteger.valueOf(Long.MAX_VALUE).add(BigInteger.ONE);\n        try (final JsonParser p = MAPPER.readTree(\"[ \"+tooBig+\" ]\").traverse()) {\n            try{ assertToken(JsonToken.START_ARRAY, p.nextToken());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(NumberType.BIG_INTEGER, p.getNumberType());                                        /***** ORIGINAL ASSERTION IS HERE *****/\n            try {\n                p.getLongValue();\n                try{ fail(\"Expected failure for `long` overflow\");                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig+\") out of range of long\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n        try (final JsonParser p = MAPPER.readTree(\"{ \\\"value\\\" : \"+tooBig+\" }\").traverse()) {\n            try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(NumberType.BIG_INTEGER, p.getNumberType());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getLongValue();\n                try{ fail(\"Expected failure for `long` overflow\");                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig+\") out of range of long\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n        // But also from floating-point\n        final String tooBig2 = \"1.0e30\";\n        try (final JsonParser p = MAPPER.readTree(\"[ \"+tooBig2+\" ]\").traverse()) {\n            try{ assertToken(JsonToken.START_ARRAY, p.nextToken());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(NumberType.DOUBLE, p.getNumberType());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getLongValue();\n                try{ fail(\"Expected failure for `long` overflow\");                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig2+\") out of range of long\");                }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n    }",
            "    public void testNumberOverflowLong$catena_4() throws IOException\n    {\n        final BigInteger tooBig = BigInteger.valueOf(Long.MAX_VALUE).add(BigInteger.ONE);\n        try (final JsonParser p = MAPPER.readTree(\"[ \"+tooBig+\" ]\").traverse()) {\n            try{ assertToken(JsonToken.START_ARRAY, p.nextToken());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(NumberType.BIG_INTEGER, p.getNumberType());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getLongValue();\n                try{ fail(\"Expected failure for `long` overflow\");                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                verifyException(e, \"Numeric value (\"+tooBig+\") out of range of long\");                      /***** ORIGINAL ASSERTION IS HERE *****/\n            }\n        }\n        try (final JsonParser p = MAPPER.readTree(\"{ \\\"value\\\" : \"+tooBig+\" }\").traverse()) {\n            try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(NumberType.BIG_INTEGER, p.getNumberType());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getLongValue();\n                try{ fail(\"Expected failure for `long` overflow\");                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig+\") out of range of long\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n        // But also from floating-point\n        final String tooBig2 = \"1.0e30\";\n        try (final JsonParser p = MAPPER.readTree(\"[ \"+tooBig2+\" ]\").traverse()) {\n            try{ assertToken(JsonToken.START_ARRAY, p.nextToken());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(NumberType.DOUBLE, p.getNumberType());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getLongValue();\n                try{ fail(\"Expected failure for `long` overflow\");                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig2+\") out of range of long\");                }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n    }",
            "    public void testNumberOverflowLong$catena_5() throws IOException\n    {\n        final BigInteger tooBig = BigInteger.valueOf(Long.MAX_VALUE).add(BigInteger.ONE);\n        try (final JsonParser p = MAPPER.readTree(\"[ \"+tooBig+\" ]\").traverse()) {\n            try{ assertToken(JsonToken.START_ARRAY, p.nextToken());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(NumberType.BIG_INTEGER, p.getNumberType());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getLongValue();\n                try{ fail(\"Expected failure for `long` overflow\");                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig+\") out of range of long\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n        try (final JsonParser p = MAPPER.readTree(\"{ \\\"value\\\" : \"+tooBig+\" }\").traverse()) {\n            assertToken(JsonToken.START_OBJECT, p.nextToken());                                             /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(NumberType.BIG_INTEGER, p.getNumberType());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getLongValue();\n                try{ fail(\"Expected failure for `long` overflow\");                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig+\") out of range of long\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n        // But also from floating-point\n        final String tooBig2 = \"1.0e30\";\n        try (final JsonParser p = MAPPER.readTree(\"[ \"+tooBig2+\" ]\").traverse()) {\n            try{ assertToken(JsonToken.START_ARRAY, p.nextToken());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(NumberType.DOUBLE, p.getNumberType());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getLongValue();\n                try{ fail(\"Expected failure for `long` overflow\");                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig2+\") out of range of long\");                }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n    }",
            "    public void testNumberOverflowLong$catena_6() throws IOException\n    {\n        final BigInteger tooBig = BigInteger.valueOf(Long.MAX_VALUE).add(BigInteger.ONE);\n        try (final JsonParser p = MAPPER.readTree(\"[ \"+tooBig+\" ]\").traverse()) {\n            try{ assertToken(JsonToken.START_ARRAY, p.nextToken());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(NumberType.BIG_INTEGER, p.getNumberType());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getLongValue();\n                try{ fail(\"Expected failure for `long` overflow\");                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig+\") out of range of long\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n        try (final JsonParser p = MAPPER.readTree(\"{ \\\"value\\\" : \"+tooBig+\" }\").traverse()) {\n            try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertToken(JsonToken.FIELD_NAME, p.nextToken());                                               /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(NumberType.BIG_INTEGER, p.getNumberType());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getLongValue();\n                try{ fail(\"Expected failure for `long` overflow\");                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig+\") out of range of long\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n        // But also from floating-point\n        final String tooBig2 = \"1.0e30\";\n        try (final JsonParser p = MAPPER.readTree(\"[ \"+tooBig2+\" ]\").traverse()) {\n            try{ assertToken(JsonToken.START_ARRAY, p.nextToken());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(NumberType.DOUBLE, p.getNumberType());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getLongValue();\n                try{ fail(\"Expected failure for `long` overflow\");                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig2+\") out of range of long\");                }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n    }",
            "    public void testNumberOverflowLong$catena_7() throws IOException\n    {\n        final BigInteger tooBig = BigInteger.valueOf(Long.MAX_VALUE).add(BigInteger.ONE);\n        try (final JsonParser p = MAPPER.readTree(\"[ \"+tooBig+\" ]\").traverse()) {\n            try{ assertToken(JsonToken.START_ARRAY, p.nextToken());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(NumberType.BIG_INTEGER, p.getNumberType());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getLongValue();\n                try{ fail(\"Expected failure for `long` overflow\");                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig+\") out of range of long\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n        try (final JsonParser p = MAPPER.readTree(\"{ \\\"value\\\" : \"+tooBig+\" }\").traverse()) {\n            try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                         /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(NumberType.BIG_INTEGER, p.getNumberType());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getLongValue();\n                try{ fail(\"Expected failure for `long` overflow\");                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig+\") out of range of long\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n        // But also from floating-point\n        final String tooBig2 = \"1.0e30\";\n        try (final JsonParser p = MAPPER.readTree(\"[ \"+tooBig2+\" ]\").traverse()) {\n            try{ assertToken(JsonToken.START_ARRAY, p.nextToken());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(NumberType.DOUBLE, p.getNumberType());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getLongValue();\n                try{ fail(\"Expected failure for `long` overflow\");                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig2+\") out of range of long\");                }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n    }",
            "    public void testNumberOverflowLong$catena_8() throws IOException\n    {\n        final BigInteger tooBig = BigInteger.valueOf(Long.MAX_VALUE).add(BigInteger.ONE);\n        try (final JsonParser p = MAPPER.readTree(\"[ \"+tooBig+\" ]\").traverse()) {\n            try{ assertToken(JsonToken.START_ARRAY, p.nextToken());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(NumberType.BIG_INTEGER, p.getNumberType());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getLongValue();\n                try{ fail(\"Expected failure for `long` overflow\");                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig+\") out of range of long\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n        try (final JsonParser p = MAPPER.readTree(\"{ \\\"value\\\" : \"+tooBig+\" }\").traverse()) {\n            try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(NumberType.BIG_INTEGER, p.getNumberType());                                        /***** ORIGINAL ASSERTION IS HERE *****/\n            try {\n                p.getLongValue();\n                try{ fail(\"Expected failure for `long` overflow\");                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig+\") out of range of long\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n        // But also from floating-point\n        final String tooBig2 = \"1.0e30\";\n        try (final JsonParser p = MAPPER.readTree(\"[ \"+tooBig2+\" ]\").traverse()) {\n            try{ assertToken(JsonToken.START_ARRAY, p.nextToken());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(NumberType.DOUBLE, p.getNumberType());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getLongValue();\n                try{ fail(\"Expected failure for `long` overflow\");                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig2+\") out of range of long\");                }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n    }",
            "    public void testNumberOverflowLong$catena_10() throws IOException\n    {\n        final BigInteger tooBig = BigInteger.valueOf(Long.MAX_VALUE).add(BigInteger.ONE);\n        try (final JsonParser p = MAPPER.readTree(\"[ \"+tooBig+\" ]\").traverse()) {\n            try{ assertToken(JsonToken.START_ARRAY, p.nextToken());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(NumberType.BIG_INTEGER, p.getNumberType());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getLongValue();\n                try{ fail(\"Expected failure for `long` overflow\");                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig+\") out of range of long\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n        try (final JsonParser p = MAPPER.readTree(\"{ \\\"value\\\" : \"+tooBig+\" }\").traverse()) {\n            try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(NumberType.BIG_INTEGER, p.getNumberType());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getLongValue();\n                try{ fail(\"Expected failure for `long` overflow\");                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                verifyException(e, \"Numeric value (\"+tooBig+\") out of range of long\");                      /***** ORIGINAL ASSERTION IS HERE *****/\n            }\n        }\n        // But also from floating-point\n        final String tooBig2 = \"1.0e30\";\n        try (final JsonParser p = MAPPER.readTree(\"[ \"+tooBig2+\" ]\").traverse()) {\n            try{ assertToken(JsonToken.START_ARRAY, p.nextToken());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(NumberType.DOUBLE, p.getNumberType());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getLongValue();\n                try{ fail(\"Expected failure for `long` overflow\");                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig2+\") out of range of long\");                }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n    }",
            "    public void testNumberOverflowLong$catena_11() throws IOException\n    {\n        final BigInteger tooBig = BigInteger.valueOf(Long.MAX_VALUE).add(BigInteger.ONE);\n        try (final JsonParser p = MAPPER.readTree(\"[ \"+tooBig+\" ]\").traverse()) {\n            try{ assertToken(JsonToken.START_ARRAY, p.nextToken());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(NumberType.BIG_INTEGER, p.getNumberType());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getLongValue();\n                try{ fail(\"Expected failure for `long` overflow\");                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig+\") out of range of long\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n        try (final JsonParser p = MAPPER.readTree(\"{ \\\"value\\\" : \"+tooBig+\" }\").traverse()) {\n            try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(NumberType.BIG_INTEGER, p.getNumberType());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getLongValue();\n                try{ fail(\"Expected failure for `long` overflow\");                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig+\") out of range of long\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n        // But also from floating-point\n        final String tooBig2 = \"1.0e30\";\n        try (final JsonParser p = MAPPER.readTree(\"[ \"+tooBig2+\" ]\").traverse()) {\n            assertToken(JsonToken.START_ARRAY, p.nextToken());                                              /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(NumberType.DOUBLE, p.getNumberType());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getLongValue();\n                try{ fail(\"Expected failure for `long` overflow\");                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig2+\") out of range of long\");                }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n    }",
            "    public void testNumberOverflowLong$catena_12() throws IOException\n    {\n        final BigInteger tooBig = BigInteger.valueOf(Long.MAX_VALUE).add(BigInteger.ONE);\n        try (final JsonParser p = MAPPER.readTree(\"[ \"+tooBig+\" ]\").traverse()) {\n            try{ assertToken(JsonToken.START_ARRAY, p.nextToken());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(NumberType.BIG_INTEGER, p.getNumberType());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getLongValue();\n                try{ fail(\"Expected failure for `long` overflow\");                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig+\") out of range of long\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n        try (final JsonParser p = MAPPER.readTree(\"{ \\\"value\\\" : \"+tooBig+\" }\").traverse()) {\n            try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(NumberType.BIG_INTEGER, p.getNumberType());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getLongValue();\n                try{ fail(\"Expected failure for `long` overflow\");                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig+\") out of range of long\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n        // But also from floating-point\n        final String tooBig2 = \"1.0e30\";\n        try (final JsonParser p = MAPPER.readTree(\"[ \"+tooBig2+\" ]\").traverse()) {\n            try{ assertToken(JsonToken.START_ARRAY, p.nextToken());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                       /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(NumberType.DOUBLE, p.getNumberType());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getLongValue();\n                try{ fail(\"Expected failure for `long` overflow\");                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig2+\") out of range of long\");                }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n    }",
            "    public void testNumberOverflowLong$catena_13() throws IOException\n    {\n        final BigInteger tooBig = BigInteger.valueOf(Long.MAX_VALUE).add(BigInteger.ONE);\n        try (final JsonParser p = MAPPER.readTree(\"[ \"+tooBig+\" ]\").traverse()) {\n            try{ assertToken(JsonToken.START_ARRAY, p.nextToken());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(NumberType.BIG_INTEGER, p.getNumberType());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getLongValue();\n                try{ fail(\"Expected failure for `long` overflow\");                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig+\") out of range of long\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n        try (final JsonParser p = MAPPER.readTree(\"{ \\\"value\\\" : \"+tooBig+\" }\").traverse()) {\n            try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(NumberType.BIG_INTEGER, p.getNumberType());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getLongValue();\n                try{ fail(\"Expected failure for `long` overflow\");                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig+\") out of range of long\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n        // But also from floating-point\n        final String tooBig2 = \"1.0e30\";\n        try (final JsonParser p = MAPPER.readTree(\"[ \"+tooBig2+\" ]\").traverse()) {\n            try{ assertToken(JsonToken.START_ARRAY, p.nextToken());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(NumberType.DOUBLE, p.getNumberType());                                             /***** ORIGINAL ASSERTION IS HERE *****/\n            try {\n                p.getLongValue();\n                try{ fail(\"Expected failure for `long` overflow\");                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig2+\") out of range of long\");                }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n    }",
            "    public void testNumberOverflowLong$catena_15() throws IOException\n    {\n        final BigInteger tooBig = BigInteger.valueOf(Long.MAX_VALUE).add(BigInteger.ONE);\n        try (final JsonParser p = MAPPER.readTree(\"[ \"+tooBig+\" ]\").traverse()) {\n            try{ assertToken(JsonToken.START_ARRAY, p.nextToken());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(NumberType.BIG_INTEGER, p.getNumberType());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getLongValue();\n                try{ fail(\"Expected failure for `long` overflow\");                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig+\") out of range of long\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n        try (final JsonParser p = MAPPER.readTree(\"{ \\\"value\\\" : \"+tooBig+\" }\").traverse()) {\n            try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(NumberType.BIG_INTEGER, p.getNumberType());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getLongValue();\n                try{ fail(\"Expected failure for `long` overflow\");                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig+\") out of range of long\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n        // But also from floating-point\n        final String tooBig2 = \"1.0e30\";\n        try (final JsonParser p = MAPPER.readTree(\"[ \"+tooBig2+\" ]\").traverse()) {\n            try{ assertToken(JsonToken.START_ARRAY, p.nextToken());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(NumberType.DOUBLE, p.getNumberType());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getLongValue();\n                try{ fail(\"Expected failure for `long` overflow\");                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                verifyException(e, \"Numeric value (\"+tooBig2+\") out of range of long\");                     /***** ORIGINAL ASSERTION IS HERE *****/\n            }\n        }\n    }"
        ]
    },
    "com.fasterxml.jackson.databind.node.TestTreeTraversingParser::testNumberOverflowInt": {
        "begin_line_no": 273,
        "end_line_no": 312,
        "file_path": "src/test/java/com/fasterxml/jackson/databind/node/TestTreeTraversingParser.java",
        "to": [
            "    public void testNumberOverflowInt$catena_0() throws IOException\n    {\n        final long tooBig = 1L + Integer.MAX_VALUE;\n        try (final JsonParser p = MAPPER.readTree(\"[ \"+tooBig+\" ]\").traverse()) {\n            assertToken(JsonToken.START_ARRAY, p.nextToken());                                              /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(NumberType.LONG, p.getNumberType());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Expected failure for `int` overflow\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig+\") out of range of int\");                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n        try (final JsonParser p = MAPPER.readTree(\"{ \\\"value\\\" : \"+tooBig+\" }\").traverse()) {\n            try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(NumberType.LONG, p.getNumberType());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Expected failure for `int` overflow\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig+\") out of range of int\");                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n        // But also from floating-point\n        final String tooBig2 = \"1.0e10\";\n        try (final JsonParser p = MAPPER.readTree(\"[ \"+tooBig2+\" ]\").traverse()) {\n            try{ assertToken(JsonToken.START_ARRAY, p.nextToken());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(NumberType.DOUBLE, p.getNumberType());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Expected failure for `int` overflow\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig2+\") out of range of int\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n    }",
            "    public void testNumberOverflowInt$catena_1() throws IOException\n    {\n        final long tooBig = 1L + Integer.MAX_VALUE;\n        try (final JsonParser p = MAPPER.readTree(\"[ \"+tooBig+\" ]\").traverse()) {\n            try{ assertToken(JsonToken.START_ARRAY, p.nextToken());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                         /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(NumberType.LONG, p.getNumberType());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Expected failure for `int` overflow\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig+\") out of range of int\");                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n        try (final JsonParser p = MAPPER.readTree(\"{ \\\"value\\\" : \"+tooBig+\" }\").traverse()) {\n            try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(NumberType.LONG, p.getNumberType());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Expected failure for `int` overflow\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig+\") out of range of int\");                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n        // But also from floating-point\n        final String tooBig2 = \"1.0e10\";\n        try (final JsonParser p = MAPPER.readTree(\"[ \"+tooBig2+\" ]\").traverse()) {\n            try{ assertToken(JsonToken.START_ARRAY, p.nextToken());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(NumberType.DOUBLE, p.getNumberType());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Expected failure for `int` overflow\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig2+\") out of range of int\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n    }",
            "    public void testNumberOverflowInt$catena_2() throws IOException\n    {\n        final long tooBig = 1L + Integer.MAX_VALUE;\n        try (final JsonParser p = MAPPER.readTree(\"[ \"+tooBig+\" ]\").traverse()) {\n            try{ assertToken(JsonToken.START_ARRAY, p.nextToken());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(NumberType.LONG, p.getNumberType());                                               /***** ORIGINAL ASSERTION IS HERE *****/\n            try {\n                p.getIntValue();\n                try{ fail(\"Expected failure for `int` overflow\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig+\") out of range of int\");                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n        try (final JsonParser p = MAPPER.readTree(\"{ \\\"value\\\" : \"+tooBig+\" }\").traverse()) {\n            try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(NumberType.LONG, p.getNumberType());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Expected failure for `int` overflow\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig+\") out of range of int\");                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n        // But also from floating-point\n        final String tooBig2 = \"1.0e10\";\n        try (final JsonParser p = MAPPER.readTree(\"[ \"+tooBig2+\" ]\").traverse()) {\n            try{ assertToken(JsonToken.START_ARRAY, p.nextToken());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(NumberType.DOUBLE, p.getNumberType());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Expected failure for `int` overflow\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig2+\") out of range of int\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n    }",
            "    public void testNumberOverflowInt$catena_4() throws IOException\n    {\n        final long tooBig = 1L + Integer.MAX_VALUE;\n        try (final JsonParser p = MAPPER.readTree(\"[ \"+tooBig+\" ]\").traverse()) {\n            try{ assertToken(JsonToken.START_ARRAY, p.nextToken());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(NumberType.LONG, p.getNumberType());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Expected failure for `int` overflow\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                verifyException(e, \"Numeric value (\"+tooBig+\") out of range of int\");                       /***** ORIGINAL ASSERTION IS HERE *****/\n            }\n        }\n        try (final JsonParser p = MAPPER.readTree(\"{ \\\"value\\\" : \"+tooBig+\" }\").traverse()) {\n            try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(NumberType.LONG, p.getNumberType());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Expected failure for `int` overflow\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig+\") out of range of int\");                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n        // But also from floating-point\n        final String tooBig2 = \"1.0e10\";\n        try (final JsonParser p = MAPPER.readTree(\"[ \"+tooBig2+\" ]\").traverse()) {\n            try{ assertToken(JsonToken.START_ARRAY, p.nextToken());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(NumberType.DOUBLE, p.getNumberType());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Expected failure for `int` overflow\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig2+\") out of range of int\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n    }",
            "    public void testNumberOverflowInt$catena_5() throws IOException\n    {\n        final long tooBig = 1L + Integer.MAX_VALUE;\n        try (final JsonParser p = MAPPER.readTree(\"[ \"+tooBig+\" ]\").traverse()) {\n            try{ assertToken(JsonToken.START_ARRAY, p.nextToken());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(NumberType.LONG, p.getNumberType());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Expected failure for `int` overflow\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig+\") out of range of int\");                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n        try (final JsonParser p = MAPPER.readTree(\"{ \\\"value\\\" : \"+tooBig+\" }\").traverse()) {\n            assertToken(JsonToken.START_OBJECT, p.nextToken());                                             /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(NumberType.LONG, p.getNumberType());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Expected failure for `int` overflow\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig+\") out of range of int\");                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n        // But also from floating-point\n        final String tooBig2 = \"1.0e10\";\n        try (final JsonParser p = MAPPER.readTree(\"[ \"+tooBig2+\" ]\").traverse()) {\n            try{ assertToken(JsonToken.START_ARRAY, p.nextToken());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(NumberType.DOUBLE, p.getNumberType());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Expected failure for `int` overflow\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig2+\") out of range of int\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n    }",
            "    public void testNumberOverflowInt$catena_6() throws IOException\n    {\n        final long tooBig = 1L + Integer.MAX_VALUE;\n        try (final JsonParser p = MAPPER.readTree(\"[ \"+tooBig+\" ]\").traverse()) {\n            try{ assertToken(JsonToken.START_ARRAY, p.nextToken());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(NumberType.LONG, p.getNumberType());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Expected failure for `int` overflow\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig+\") out of range of int\");                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n        try (final JsonParser p = MAPPER.readTree(\"{ \\\"value\\\" : \"+tooBig+\" }\").traverse()) {\n            try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertToken(JsonToken.FIELD_NAME, p.nextToken());                                               /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(NumberType.LONG, p.getNumberType());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Expected failure for `int` overflow\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig+\") out of range of int\");                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n        // But also from floating-point\n        final String tooBig2 = \"1.0e10\";\n        try (final JsonParser p = MAPPER.readTree(\"[ \"+tooBig2+\" ]\").traverse()) {\n            try{ assertToken(JsonToken.START_ARRAY, p.nextToken());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(NumberType.DOUBLE, p.getNumberType());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Expected failure for `int` overflow\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig2+\") out of range of int\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n    }",
            "    public void testNumberOverflowInt$catena_7() throws IOException\n    {\n        final long tooBig = 1L + Integer.MAX_VALUE;\n        try (final JsonParser p = MAPPER.readTree(\"[ \"+tooBig+\" ]\").traverse()) {\n            try{ assertToken(JsonToken.START_ARRAY, p.nextToken());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(NumberType.LONG, p.getNumberType());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Expected failure for `int` overflow\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig+\") out of range of int\");                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n        try (final JsonParser p = MAPPER.readTree(\"{ \\\"value\\\" : \"+tooBig+\" }\").traverse()) {\n            try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                         /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(NumberType.LONG, p.getNumberType());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Expected failure for `int` overflow\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig+\") out of range of int\");                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n        // But also from floating-point\n        final String tooBig2 = \"1.0e10\";\n        try (final JsonParser p = MAPPER.readTree(\"[ \"+tooBig2+\" ]\").traverse()) {\n            try{ assertToken(JsonToken.START_ARRAY, p.nextToken());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(NumberType.DOUBLE, p.getNumberType());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Expected failure for `int` overflow\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig2+\") out of range of int\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n    }",
            "    public void testNumberOverflowInt$catena_8() throws IOException\n    {\n        final long tooBig = 1L + Integer.MAX_VALUE;\n        try (final JsonParser p = MAPPER.readTree(\"[ \"+tooBig+\" ]\").traverse()) {\n            try{ assertToken(JsonToken.START_ARRAY, p.nextToken());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(NumberType.LONG, p.getNumberType());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Expected failure for `int` overflow\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig+\") out of range of int\");                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n        try (final JsonParser p = MAPPER.readTree(\"{ \\\"value\\\" : \"+tooBig+\" }\").traverse()) {\n            try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(NumberType.LONG, p.getNumberType());                                               /***** ORIGINAL ASSERTION IS HERE *****/\n            try {\n                p.getIntValue();\n                try{ fail(\"Expected failure for `int` overflow\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig+\") out of range of int\");                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n        // But also from floating-point\n        final String tooBig2 = \"1.0e10\";\n        try (final JsonParser p = MAPPER.readTree(\"[ \"+tooBig2+\" ]\").traverse()) {\n            try{ assertToken(JsonToken.START_ARRAY, p.nextToken());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(NumberType.DOUBLE, p.getNumberType());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Expected failure for `int` overflow\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig2+\") out of range of int\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n    }",
            "    public void testNumberOverflowInt$catena_10() throws IOException\n    {\n        final long tooBig = 1L + Integer.MAX_VALUE;\n        try (final JsonParser p = MAPPER.readTree(\"[ \"+tooBig+\" ]\").traverse()) {\n            try{ assertToken(JsonToken.START_ARRAY, p.nextToken());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(NumberType.LONG, p.getNumberType());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Expected failure for `int` overflow\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig+\") out of range of int\");                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n        try (final JsonParser p = MAPPER.readTree(\"{ \\\"value\\\" : \"+tooBig+\" }\").traverse()) {\n            try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(NumberType.LONG, p.getNumberType());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Expected failure for `int` overflow\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                verifyException(e, \"Numeric value (\"+tooBig+\") out of range of int\");                       /***** ORIGINAL ASSERTION IS HERE *****/\n            }\n        }\n        // But also from floating-point\n        final String tooBig2 = \"1.0e10\";\n        try (final JsonParser p = MAPPER.readTree(\"[ \"+tooBig2+\" ]\").traverse()) {\n            try{ assertToken(JsonToken.START_ARRAY, p.nextToken());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(NumberType.DOUBLE, p.getNumberType());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Expected failure for `int` overflow\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig2+\") out of range of int\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n    }",
            "    public void testNumberOverflowInt$catena_11() throws IOException\n    {\n        final long tooBig = 1L + Integer.MAX_VALUE;\n        try (final JsonParser p = MAPPER.readTree(\"[ \"+tooBig+\" ]\").traverse()) {\n            try{ assertToken(JsonToken.START_ARRAY, p.nextToken());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(NumberType.LONG, p.getNumberType());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Expected failure for `int` overflow\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig+\") out of range of int\");                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n        try (final JsonParser p = MAPPER.readTree(\"{ \\\"value\\\" : \"+tooBig+\" }\").traverse()) {\n            try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(NumberType.LONG, p.getNumberType());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Expected failure for `int` overflow\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig+\") out of range of int\");                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n        // But also from floating-point\n        final String tooBig2 = \"1.0e10\";\n        try (final JsonParser p = MAPPER.readTree(\"[ \"+tooBig2+\" ]\").traverse()) {\n            assertToken(JsonToken.START_ARRAY, p.nextToken());                                              /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(NumberType.DOUBLE, p.getNumberType());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Expected failure for `int` overflow\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig2+\") out of range of int\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n    }",
            "    public void testNumberOverflowInt$catena_12() throws IOException\n    {\n        final long tooBig = 1L + Integer.MAX_VALUE;\n        try (final JsonParser p = MAPPER.readTree(\"[ \"+tooBig+\" ]\").traverse()) {\n            try{ assertToken(JsonToken.START_ARRAY, p.nextToken());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(NumberType.LONG, p.getNumberType());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Expected failure for `int` overflow\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig+\") out of range of int\");                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n        try (final JsonParser p = MAPPER.readTree(\"{ \\\"value\\\" : \"+tooBig+\" }\").traverse()) {\n            try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(NumberType.LONG, p.getNumberType());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Expected failure for `int` overflow\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig+\") out of range of int\");                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n        // But also from floating-point\n        final String tooBig2 = \"1.0e10\";\n        try (final JsonParser p = MAPPER.readTree(\"[ \"+tooBig2+\" ]\").traverse()) {\n            try{ assertToken(JsonToken.START_ARRAY, p.nextToken());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                       /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(NumberType.DOUBLE, p.getNumberType());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Expected failure for `int` overflow\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig2+\") out of range of int\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n    }",
            "    public void testNumberOverflowInt$catena_13() throws IOException\n    {\n        final long tooBig = 1L + Integer.MAX_VALUE;\n        try (final JsonParser p = MAPPER.readTree(\"[ \"+tooBig+\" ]\").traverse()) {\n            try{ assertToken(JsonToken.START_ARRAY, p.nextToken());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(NumberType.LONG, p.getNumberType());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Expected failure for `int` overflow\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig+\") out of range of int\");                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n        try (final JsonParser p = MAPPER.readTree(\"{ \\\"value\\\" : \"+tooBig+\" }\").traverse()) {\n            try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(NumberType.LONG, p.getNumberType());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Expected failure for `int` overflow\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig+\") out of range of int\");                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n        // But also from floating-point\n        final String tooBig2 = \"1.0e10\";\n        try (final JsonParser p = MAPPER.readTree(\"[ \"+tooBig2+\" ]\").traverse()) {\n            try{ assertToken(JsonToken.START_ARRAY, p.nextToken());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(NumberType.DOUBLE, p.getNumberType());                                             /***** ORIGINAL ASSERTION IS HERE *****/\n            try {\n                p.getIntValue();\n                try{ fail(\"Expected failure for `int` overflow\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig2+\") out of range of int\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n    }",
            "    public void testNumberOverflowInt$catena_15() throws IOException\n    {\n        final long tooBig = 1L + Integer.MAX_VALUE;\n        try (final JsonParser p = MAPPER.readTree(\"[ \"+tooBig+\" ]\").traverse()) {\n            try{ assertToken(JsonToken.START_ARRAY, p.nextToken());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(NumberType.LONG, p.getNumberType());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Expected failure for `int` overflow\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig+\") out of range of int\");                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n        try (final JsonParser p = MAPPER.readTree(\"{ \\\"value\\\" : \"+tooBig+\" }\").traverse()) {\n            try{ assertToken(JsonToken.START_OBJECT, p.nextToken());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.FIELD_NAME, p.nextToken());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(NumberType.LONG, p.getNumberType());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Expected failure for `int` overflow\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                try{ verifyException(e, \"Numeric value (\"+tooBig+\") out of range of int\");                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n        // But also from floating-point\n        final String tooBig2 = \"1.0e10\";\n        try (final JsonParser p = MAPPER.readTree(\"[ \"+tooBig2+\" ]\").traverse()) {\n            try{ assertToken(JsonToken.START_ARRAY, p.nextToken());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(NumberType.DOUBLE, p.getNumberType());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n            try {\n                p.getIntValue();\n                try{ fail(\"Expected failure for `int` overflow\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            } catch (InputCoercionException e) {\n                verifyException(e, \"Numeric value (\"+tooBig2+\") out of range of int\");                      /***** ORIGINAL ASSERTION IS HERE *****/\n            }\n        }\n    }"
        ]
    }
}