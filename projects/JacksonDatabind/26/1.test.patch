{
    "com.fasterxml.jackson.databind.TestJDKSerialization::testEnumHandlers": {
        "begin_line_no": 71,
        "end_line_no": 102,
        "file_path": "src/test/java/com/fasterxml/jackson/databind/TestJDKSerialization.java",
        "to": [
            "    public void testEnumHandlers$catena_0() throws IOException\n    {\n        ObjectMapper mapper = new ObjectMapper();\n        // ensure we have serializers and/or deserializers, first\n        String json = mapper.writerFor(EnumPOJO.class)\n                .writeValueAsString(new EnumPOJO());\n        EnumPOJO result = mapper.readerFor(EnumPOJO.class)\n                .readValue(json);\n        assertNotNull(result);                                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // and then use JDK serialization to freeze/thaw objects\n        byte[] bytes = jdkSerialize(mapper);\n        ObjectMapper mapper2 = jdkDeserialize(bytes);\n        try{ assertNotNull(mapper2);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        bytes = jdkSerialize(mapper.readerFor(EnumPOJO.class));\n        ObjectReader r = jdkDeserialize(bytes);\n        try{ assertNotNull(r);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        /* 14-Aug-2015, tatu: Looks like pre-loading JsonSerializer is problematic\n         *    at this point; comment out for now. Try to fix later on.\n         */\n        bytes = jdkSerialize(mapper.writerFor(EnumPOJO.class));\n        ObjectWriter w = jdkDeserialize(bytes);\n        try{ assertNotNull(w);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // plus, ensure objects are usable:\n        String json2 = w.writeValueAsString(new EnumPOJO());\n        try{ assertEquals(json, json2);                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        EnumPOJO result2 = r.readValue(json2);\n        try{ assertNotNull(result2);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testEnumHandlers$catena_4() throws IOException\n    {\n        ObjectMapper mapper = new ObjectMapper();\n        // ensure we have serializers and/or deserializers, first\n        String json = mapper.writerFor(EnumPOJO.class)\n                .writeValueAsString(new EnumPOJO());\n        EnumPOJO result = mapper.readerFor(EnumPOJO.class)\n                .readValue(json);\n        try{ assertNotNull(result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // and then use JDK serialization to freeze/thaw objects\n        byte[] bytes = jdkSerialize(mapper);\n        ObjectMapper mapper2 = jdkDeserialize(bytes);\n        try{ assertNotNull(mapper2);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        bytes = jdkSerialize(mapper.readerFor(EnumPOJO.class));\n        ObjectReader r = jdkDeserialize(bytes);\n        try{ assertNotNull(r);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        /* 14-Aug-2015, tatu: Looks like pre-loading JsonSerializer is problematic\n         *    at this point; comment out for now. Try to fix later on.\n         */\n        bytes = jdkSerialize(mapper.writerFor(EnumPOJO.class));\n        ObjectWriter w = jdkDeserialize(bytes);\n        try{ assertNotNull(w);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // plus, ensure objects are usable:\n        String json2 = w.writeValueAsString(new EnumPOJO());\n        assertEquals(json, json2);                                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        EnumPOJO result2 = r.readValue(json2);\n        try{ assertNotNull(result2);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testEnumHandlers$catena_1() throws IOException\n    {\n        ObjectMapper mapper = new ObjectMapper();\n        // ensure we have serializers and/or deserializers, first\n        String json = mapper.writerFor(EnumPOJO.class)\n                .writeValueAsString(new EnumPOJO());\n        EnumPOJO result = mapper.readerFor(EnumPOJO.class)\n                .readValue(json);\n        try{ assertNotNull(result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // and then use JDK serialization to freeze/thaw objects\n        byte[] bytes = jdkSerialize(mapper);\n        ObjectMapper mapper2 = jdkDeserialize(bytes);\n        assertNotNull(mapper2);                                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n\n        bytes = jdkSerialize(mapper.readerFor(EnumPOJO.class));\n        ObjectReader r = jdkDeserialize(bytes);\n        try{ assertNotNull(r);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        /* 14-Aug-2015, tatu: Looks like pre-loading JsonSerializer is problematic\n         *    at this point; comment out for now. Try to fix later on.\n         */\n        bytes = jdkSerialize(mapper.writerFor(EnumPOJO.class));\n        ObjectWriter w = jdkDeserialize(bytes);\n        try{ assertNotNull(w);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // plus, ensure objects are usable:\n        String json2 = w.writeValueAsString(new EnumPOJO());\n        try{ assertEquals(json, json2);                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        EnumPOJO result2 = r.readValue(json2);\n        try{ assertNotNull(result2);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testEnumHandlers$catena_3() throws IOException\n    {\n        ObjectMapper mapper = new ObjectMapper();\n        // ensure we have serializers and/or deserializers, first\n        String json = mapper.writerFor(EnumPOJO.class)\n                .writeValueAsString(new EnumPOJO());\n        EnumPOJO result = mapper.readerFor(EnumPOJO.class)\n                .readValue(json);\n        try{ assertNotNull(result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // and then use JDK serialization to freeze/thaw objects\n        byte[] bytes = jdkSerialize(mapper);\n        ObjectMapper mapper2 = jdkDeserialize(bytes);\n        try{ assertNotNull(mapper2);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        bytes = jdkSerialize(mapper.readerFor(EnumPOJO.class));\n        ObjectReader r = jdkDeserialize(bytes);\n        try{ assertNotNull(r);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        /* 14-Aug-2015, tatu: Looks like pre-loading JsonSerializer is problematic\n         *    at this point; comment out for now. Try to fix later on.\n         */\n        bytes = jdkSerialize(mapper.writerFor(EnumPOJO.class));\n        ObjectWriter w = jdkDeserialize(bytes);\n        assertNotNull(w);                                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // plus, ensure objects are usable:\n        String json2 = w.writeValueAsString(new EnumPOJO());\n        try{ assertEquals(json, json2);                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        EnumPOJO result2 = r.readValue(json2);\n        try{ assertNotNull(result2);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testEnumHandlers$catena_5() throws IOException\n    {\n        ObjectMapper mapper = new ObjectMapper();\n        // ensure we have serializers and/or deserializers, first\n        String json = mapper.writerFor(EnumPOJO.class)\n                .writeValueAsString(new EnumPOJO());\n        EnumPOJO result = mapper.readerFor(EnumPOJO.class)\n                .readValue(json);\n        try{ assertNotNull(result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // and then use JDK serialization to freeze/thaw objects\n        byte[] bytes = jdkSerialize(mapper);\n        ObjectMapper mapper2 = jdkDeserialize(bytes);\n        try{ assertNotNull(mapper2);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        bytes = jdkSerialize(mapper.readerFor(EnumPOJO.class));\n        ObjectReader r = jdkDeserialize(bytes);\n        try{ assertNotNull(r);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        /* 14-Aug-2015, tatu: Looks like pre-loading JsonSerializer is problematic\n         *    at this point; comment out for now. Try to fix later on.\n         */\n        bytes = jdkSerialize(mapper.writerFor(EnumPOJO.class));\n        ObjectWriter w = jdkDeserialize(bytes);\n        try{ assertNotNull(w);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // plus, ensure objects are usable:\n        String json2 = w.writeValueAsString(new EnumPOJO());\n        try{ assertEquals(json, json2);                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        EnumPOJO result2 = r.readValue(json2);\n        assertNotNull(result2);                                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n    }",
            "    public void testEnumHandlers$catena_2() throws IOException\n    {\n        ObjectMapper mapper = new ObjectMapper();\n        // ensure we have serializers and/or deserializers, first\n        String json = mapper.writerFor(EnumPOJO.class)\n                .writeValueAsString(new EnumPOJO());\n        EnumPOJO result = mapper.readerFor(EnumPOJO.class)\n                .readValue(json);\n        try{ assertNotNull(result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // and then use JDK serialization to freeze/thaw objects\n        byte[] bytes = jdkSerialize(mapper);\n        ObjectMapper mapper2 = jdkDeserialize(bytes);\n        try{ assertNotNull(mapper2);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        bytes = jdkSerialize(mapper.readerFor(EnumPOJO.class));\n        ObjectReader r = jdkDeserialize(bytes);\n        assertNotNull(r);                                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n\n        /* 14-Aug-2015, tatu: Looks like pre-loading JsonSerializer is problematic\n         *    at this point; comment out for now. Try to fix later on.\n         */\n        bytes = jdkSerialize(mapper.writerFor(EnumPOJO.class));\n        ObjectWriter w = jdkDeserialize(bytes);\n        try{ assertNotNull(w);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // plus, ensure objects are usable:\n        String json2 = w.writeValueAsString(new EnumPOJO());\n        try{ assertEquals(json, json2);                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        EnumPOJO result2 = r.readValue(json2);\n        try{ assertNotNull(result2);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    }
}