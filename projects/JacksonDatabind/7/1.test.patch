{
    "com.fasterxml.jackson.databind.creators.TestCreatorsDelegating::testDelegateWithTokenBuffer": {
        "begin_line_no": 124,
        "end_line_no": 143,
        "file_path": "src/test/java/com/fasterxml/jackson/databind/creators/TestCreatorsDelegating.java",
        "to": [
            "    public void testDelegateWithTokenBuffer$catena_2() throws Exception\n    {\n        ObjectMapper mapper = new ObjectMapper();\n        Value592 value = mapper.readValue(\"{\\\"a\\\":1,\\\"b\\\":2}\", Value592.class);\n        try{ assertNotNull(value);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        Object ob = value.stuff;\n        try{ assertEquals(TokenBuffer.class, ob.getClass());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        JsonParser jp = ((TokenBuffer) ob).asParser();\n        assertToken(JsonToken.START_OBJECT, jp.nextToken());                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertToken(JsonToken.FIELD_NAME, jp.nextToken());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"a\", jp.getCurrentName());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, jp.getIntValue());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertToken(JsonToken.FIELD_NAME, jp.nextToken());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"b\", jp.getCurrentName());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, jp.getIntValue());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertToken(JsonToken.END_OBJECT, jp.nextToken());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        jp.close();\n    }",
            "    public void testDelegateWithTokenBuffer$catena_5() throws Exception\n    {\n        ObjectMapper mapper = new ObjectMapper();\n        Value592 value = mapper.readValue(\"{\\\"a\\\":1,\\\"b\\\":2}\", Value592.class);\n        try{ assertNotNull(value);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        Object ob = value.stuff;\n        try{ assertEquals(TokenBuffer.class, ob.getClass());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        JsonParser jp = ((TokenBuffer) ob).asParser();\n        try{ assertToken(JsonToken.START_OBJECT, jp.nextToken());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertToken(JsonToken.FIELD_NAME, jp.nextToken());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"a\", jp.getCurrentName());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(1, jp.getIntValue());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertToken(JsonToken.FIELD_NAME, jp.nextToken());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"b\", jp.getCurrentName());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, jp.getIntValue());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertToken(JsonToken.END_OBJECT, jp.nextToken());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        jp.close();\n    }",
            "    public void testDelegateWithTokenBuffer$catena_11() throws Exception\n    {\n        ObjectMapper mapper = new ObjectMapper();\n        Value592 value = mapper.readValue(\"{\\\"a\\\":1,\\\"b\\\":2}\", Value592.class);\n        try{ assertNotNull(value);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        Object ob = value.stuff;\n        try{ assertEquals(TokenBuffer.class, ob.getClass());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        JsonParser jp = ((TokenBuffer) ob).asParser();\n        try{ assertToken(JsonToken.START_OBJECT, jp.nextToken());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertToken(JsonToken.FIELD_NAME, jp.nextToken());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"a\", jp.getCurrentName());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, jp.getIntValue());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertToken(JsonToken.FIELD_NAME, jp.nextToken());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"b\", jp.getCurrentName());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, jp.getIntValue());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertToken(JsonToken.END_OBJECT, jp.nextToken());                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        jp.close();\n    }",
            "    public void testDelegateWithTokenBuffer$catena_9() throws Exception\n    {\n        ObjectMapper mapper = new ObjectMapper();\n        Value592 value = mapper.readValue(\"{\\\"a\\\":1,\\\"b\\\":2}\", Value592.class);\n        try{ assertNotNull(value);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        Object ob = value.stuff;\n        try{ assertEquals(TokenBuffer.class, ob.getClass());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        JsonParser jp = ((TokenBuffer) ob).asParser();\n        try{ assertToken(JsonToken.START_OBJECT, jp.nextToken());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertToken(JsonToken.FIELD_NAME, jp.nextToken());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"a\", jp.getCurrentName());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, jp.getIntValue());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertToken(JsonToken.FIELD_NAME, jp.nextToken());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"b\", jp.getCurrentName());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(2, jp.getIntValue());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertToken(JsonToken.END_OBJECT, jp.nextToken());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        jp.close();\n    }",
            "    public void testDelegateWithTokenBuffer$catena_8() throws Exception\n    {\n        ObjectMapper mapper = new ObjectMapper();\n        Value592 value = mapper.readValue(\"{\\\"a\\\":1,\\\"b\\\":2}\", Value592.class);\n        try{ assertNotNull(value);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        Object ob = value.stuff;\n        try{ assertEquals(TokenBuffer.class, ob.getClass());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        JsonParser jp = ((TokenBuffer) ob).asParser();\n        try{ assertToken(JsonToken.START_OBJECT, jp.nextToken());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertToken(JsonToken.FIELD_NAME, jp.nextToken());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"a\", jp.getCurrentName());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, jp.getIntValue());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertToken(JsonToken.FIELD_NAME, jp.nextToken());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"b\", jp.getCurrentName());                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, jp.getIntValue());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertToken(JsonToken.END_OBJECT, jp.nextToken());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        jp.close();\n    }",
            "    public void testDelegateWithTokenBuffer$catena_7() throws Exception\n    {\n        ObjectMapper mapper = new ObjectMapper();\n        Value592 value = mapper.readValue(\"{\\\"a\\\":1,\\\"b\\\":2}\", Value592.class);\n        try{ assertNotNull(value);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        Object ob = value.stuff;\n        try{ assertEquals(TokenBuffer.class, ob.getClass());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        JsonParser jp = ((TokenBuffer) ob).asParser();\n        try{ assertToken(JsonToken.START_OBJECT, jp.nextToken());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertToken(JsonToken.FIELD_NAME, jp.nextToken());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"a\", jp.getCurrentName());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, jp.getIntValue());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertToken(JsonToken.FIELD_NAME, jp.nextToken());                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"b\", jp.getCurrentName());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, jp.getIntValue());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertToken(JsonToken.END_OBJECT, jp.nextToken());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        jp.close();\n    }",
            "    public void testDelegateWithTokenBuffer$catena_10() throws Exception\n    {\n        ObjectMapper mapper = new ObjectMapper();\n        Value592 value = mapper.readValue(\"{\\\"a\\\":1,\\\"b\\\":2}\", Value592.class);\n        try{ assertNotNull(value);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        Object ob = value.stuff;\n        try{ assertEquals(TokenBuffer.class, ob.getClass());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        JsonParser jp = ((TokenBuffer) ob).asParser();\n        try{ assertToken(JsonToken.START_OBJECT, jp.nextToken());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertToken(JsonToken.FIELD_NAME, jp.nextToken());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"a\", jp.getCurrentName());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, jp.getIntValue());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertToken(JsonToken.FIELD_NAME, jp.nextToken());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"b\", jp.getCurrentName());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(2, jp.getIntValue());                                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertToken(JsonToken.END_OBJECT, jp.nextToken());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        jp.close();\n    }",
            "    public void testDelegateWithTokenBuffer$catena_3() throws Exception\n    {\n        ObjectMapper mapper = new ObjectMapper();\n        Value592 value = mapper.readValue(\"{\\\"a\\\":1,\\\"b\\\":2}\", Value592.class);\n        try{ assertNotNull(value);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        Object ob = value.stuff;\n        try{ assertEquals(TokenBuffer.class, ob.getClass());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        JsonParser jp = ((TokenBuffer) ob).asParser();\n        try{ assertToken(JsonToken.START_OBJECT, jp.nextToken());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertToken(JsonToken.FIELD_NAME, jp.nextToken());                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"a\", jp.getCurrentName());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, jp.getIntValue());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertToken(JsonToken.FIELD_NAME, jp.nextToken());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"b\", jp.getCurrentName());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, jp.getIntValue());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertToken(JsonToken.END_OBJECT, jp.nextToken());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        jp.close();\n    }",
            "    public void testDelegateWithTokenBuffer$catena_6() throws Exception\n    {\n        ObjectMapper mapper = new ObjectMapper();\n        Value592 value = mapper.readValue(\"{\\\"a\\\":1,\\\"b\\\":2}\", Value592.class);\n        try{ assertNotNull(value);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        Object ob = value.stuff;\n        try{ assertEquals(TokenBuffer.class, ob.getClass());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        JsonParser jp = ((TokenBuffer) ob).asParser();\n        try{ assertToken(JsonToken.START_OBJECT, jp.nextToken());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertToken(JsonToken.FIELD_NAME, jp.nextToken());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"a\", jp.getCurrentName());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(1, jp.getIntValue());                                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertToken(JsonToken.FIELD_NAME, jp.nextToken());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"b\", jp.getCurrentName());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, jp.getIntValue());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertToken(JsonToken.END_OBJECT, jp.nextToken());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        jp.close();\n    }",
            "    public void testDelegateWithTokenBuffer$catena_0() throws Exception\n    {\n        ObjectMapper mapper = new ObjectMapper();\n        Value592 value = mapper.readValue(\"{\\\"a\\\":1,\\\"b\\\":2}\", Value592.class);\n        assertNotNull(value);                                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n        Object ob = value.stuff;\n        try{ assertEquals(TokenBuffer.class, ob.getClass());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        JsonParser jp = ((TokenBuffer) ob).asParser();\n        try{ assertToken(JsonToken.START_OBJECT, jp.nextToken());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertToken(JsonToken.FIELD_NAME, jp.nextToken());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"a\", jp.getCurrentName());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, jp.getIntValue());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertToken(JsonToken.FIELD_NAME, jp.nextToken());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"b\", jp.getCurrentName());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, jp.getIntValue());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertToken(JsonToken.END_OBJECT, jp.nextToken());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        jp.close();\n    }",
            "    public void testDelegateWithTokenBuffer$catena_1() throws Exception\n    {\n        ObjectMapper mapper = new ObjectMapper();\n        Value592 value = mapper.readValue(\"{\\\"a\\\":1,\\\"b\\\":2}\", Value592.class);\n        try{ assertNotNull(value);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        Object ob = value.stuff;\n        assertEquals(TokenBuffer.class, ob.getClass());                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        JsonParser jp = ((TokenBuffer) ob).asParser();\n        try{ assertToken(JsonToken.START_OBJECT, jp.nextToken());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertToken(JsonToken.FIELD_NAME, jp.nextToken());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"a\", jp.getCurrentName());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, jp.getIntValue());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertToken(JsonToken.FIELD_NAME, jp.nextToken());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"b\", jp.getCurrentName());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, jp.getIntValue());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertToken(JsonToken.END_OBJECT, jp.nextToken());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        jp.close();\n    }",
            "    public void testDelegateWithTokenBuffer$catena_4() throws Exception\n    {\n        ObjectMapper mapper = new ObjectMapper();\n        Value592 value = mapper.readValue(\"{\\\"a\\\":1,\\\"b\\\":2}\", Value592.class);\n        try{ assertNotNull(value);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        Object ob = value.stuff;\n        try{ assertEquals(TokenBuffer.class, ob.getClass());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        JsonParser jp = ((TokenBuffer) ob).asParser();\n        try{ assertToken(JsonToken.START_OBJECT, jp.nextToken());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertToken(JsonToken.FIELD_NAME, jp.nextToken());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"a\", jp.getCurrentName());                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, jp.getIntValue());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertToken(JsonToken.FIELD_NAME, jp.nextToken());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"b\", jp.getCurrentName());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, jp.getIntValue());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertToken(JsonToken.END_OBJECT, jp.nextToken());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        jp.close();\n    }"
        ]
    }
}