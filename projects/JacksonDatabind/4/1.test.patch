{
    "com.fasterxml.jackson.databind.deser.TestCollectionDeserialization::testArrayIndexForExceptions": {
        "begin_line_no": 205,
        "end_line_no": 243,
        "file_path": "src/test/java/com/fasterxml/jackson/databind/deser/TestCollectionDeserialization.java",
        "to": [
            "    public void testArrayIndexForExceptions$catena_7() throws Exception\n    {\n        final String OBJECTS_JSON = \"[ \\\"KEY2\\\", false ]\";\n        try {\n            MAPPER.readValue(OBJECTS_JSON, Key[].class);\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (JsonMappingException e) {\n            try{ verifyException(e, \"Can not deserialize\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            List<JsonMappingException.Reference> refs = e.getPath();\n            try{ assertEquals(1, refs.size());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(1, refs.get(0).getIndex());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        try {\n            MAPPER.readValue(\"[ \\\"xyz\\\", { } ]\", String[].class);\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (JsonMappingException e) {\n            try{ verifyException(e, \"Can not deserialize\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            List<JsonMappingException.Reference> refs = e.getPath();\n            try{ assertEquals(1, refs.size());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(1, refs.get(0).getIndex());                                                        /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n\n        try {\n            MAPPER.readValue(\"{\\\"keys\\\":\"+OBJECTS_JSON+\"}\", KeyListBean.class);\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (JsonMappingException e) {\n            try{ verifyException(e, \"Can not deserialize\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            List<JsonMappingException.Reference> refs = e.getPath();\n            try{ assertEquals(2, refs.size());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            // Bean has no index, but has name:\n            try{ assertEquals(-1, refs.get(0).getIndex());                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"keys\", refs.get(0).getFieldName());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            // and for List, reverse:\n            try{ assertEquals(1, refs.get(1).getIndex());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertNull(refs.get(1).getFieldName());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
            "    public void testArrayIndexForExceptions$catena_6() throws Exception\n    {\n        final String OBJECTS_JSON = \"[ \\\"KEY2\\\", false ]\";\n        try {\n            MAPPER.readValue(OBJECTS_JSON, Key[].class);\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (JsonMappingException e) {\n            try{ verifyException(e, \"Can not deserialize\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            List<JsonMappingException.Reference> refs = e.getPath();\n            try{ assertEquals(1, refs.size());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(1, refs.get(0).getIndex());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        try {\n            MAPPER.readValue(\"[ \\\"xyz\\\", { } ]\", String[].class);\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (JsonMappingException e) {\n            try{ verifyException(e, \"Can not deserialize\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            List<JsonMappingException.Reference> refs = e.getPath();\n            assertEquals(1, refs.size());                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(1, refs.get(0).getIndex());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        try {\n            MAPPER.readValue(\"{\\\"keys\\\":\"+OBJECTS_JSON+\"}\", KeyListBean.class);\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (JsonMappingException e) {\n            try{ verifyException(e, \"Can not deserialize\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            List<JsonMappingException.Reference> refs = e.getPath();\n            try{ assertEquals(2, refs.size());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            // Bean has no index, but has name:\n            try{ assertEquals(-1, refs.get(0).getIndex());                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"keys\", refs.get(0).getFieldName());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            // and for List, reverse:\n            try{ assertEquals(1, refs.get(1).getIndex());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertNull(refs.get(1).getFieldName());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
            "    public void testArrayIndexForExceptions$catena_0() throws Exception\n    {\n        final String OBJECTS_JSON = \"[ \\\"KEY2\\\", false ]\";\n        try {\n            MAPPER.readValue(OBJECTS_JSON, Key[].class);\n            fail(\"Should not pass\");                                                                        /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (JsonMappingException e) {\n            try{ verifyException(e, \"Can not deserialize\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            List<JsonMappingException.Reference> refs = e.getPath();\n            try{ assertEquals(1, refs.size());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(1, refs.get(0).getIndex());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        try {\n            MAPPER.readValue(\"[ \\\"xyz\\\", { } ]\", String[].class);\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (JsonMappingException e) {\n            try{ verifyException(e, \"Can not deserialize\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            List<JsonMappingException.Reference> refs = e.getPath();\n            try{ assertEquals(1, refs.size());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(1, refs.get(0).getIndex());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        try {\n            MAPPER.readValue(\"{\\\"keys\\\":\"+OBJECTS_JSON+\"}\", KeyListBean.class);\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (JsonMappingException e) {\n            try{ verifyException(e, \"Can not deserialize\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            List<JsonMappingException.Reference> refs = e.getPath();\n            try{ assertEquals(2, refs.size());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            // Bean has no index, but has name:\n            try{ assertEquals(-1, refs.get(0).getIndex());                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"keys\", refs.get(0).getFieldName());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            // and for List, reverse:\n            try{ assertEquals(1, refs.get(1).getIndex());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertNull(refs.get(1).getFieldName());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
            "    public void testArrayIndexForExceptions$catena_1() throws Exception\n    {\n        final String OBJECTS_JSON = \"[ \\\"KEY2\\\", false ]\";\n        try {\n            MAPPER.readValue(OBJECTS_JSON, Key[].class);\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (JsonMappingException e) {\n            verifyException(e, \"Can not deserialize\");                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n            List<JsonMappingException.Reference> refs = e.getPath();\n            try{ assertEquals(1, refs.size());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(1, refs.get(0).getIndex());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        try {\n            MAPPER.readValue(\"[ \\\"xyz\\\", { } ]\", String[].class);\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (JsonMappingException e) {\n            try{ verifyException(e, \"Can not deserialize\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            List<JsonMappingException.Reference> refs = e.getPath();\n            try{ assertEquals(1, refs.size());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(1, refs.get(0).getIndex());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        try {\n            MAPPER.readValue(\"{\\\"keys\\\":\"+OBJECTS_JSON+\"}\", KeyListBean.class);\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (JsonMappingException e) {\n            try{ verifyException(e, \"Can not deserialize\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            List<JsonMappingException.Reference> refs = e.getPath();\n            try{ assertEquals(2, refs.size());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            // Bean has no index, but has name:\n            try{ assertEquals(-1, refs.get(0).getIndex());                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"keys\", refs.get(0).getFieldName());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            // and for List, reverse:\n            try{ assertEquals(1, refs.get(1).getIndex());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertNull(refs.get(1).getFieldName());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
            "    public void testArrayIndexForExceptions$catena_2() throws Exception\n    {\n        final String OBJECTS_JSON = \"[ \\\"KEY2\\\", false ]\";\n        try {\n            MAPPER.readValue(OBJECTS_JSON, Key[].class);\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (JsonMappingException e) {\n            try{ verifyException(e, \"Can not deserialize\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            List<JsonMappingException.Reference> refs = e.getPath();\n            assertEquals(1, refs.size());                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(1, refs.get(0).getIndex());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        try {\n            MAPPER.readValue(\"[ \\\"xyz\\\", { } ]\", String[].class);\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (JsonMappingException e) {\n            try{ verifyException(e, \"Can not deserialize\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            List<JsonMappingException.Reference> refs = e.getPath();\n            try{ assertEquals(1, refs.size());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(1, refs.get(0).getIndex());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        try {\n            MAPPER.readValue(\"{\\\"keys\\\":\"+OBJECTS_JSON+\"}\", KeyListBean.class);\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (JsonMappingException e) {\n            try{ verifyException(e, \"Can not deserialize\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            List<JsonMappingException.Reference> refs = e.getPath();\n            try{ assertEquals(2, refs.size());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            // Bean has no index, but has name:\n            try{ assertEquals(-1, refs.get(0).getIndex());                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"keys\", refs.get(0).getFieldName());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            // and for List, reverse:\n            try{ assertEquals(1, refs.get(1).getIndex());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertNull(refs.get(1).getFieldName());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
            "    public void testArrayIndexForExceptions$catena_3() throws Exception\n    {\n        final String OBJECTS_JSON = \"[ \\\"KEY2\\\", false ]\";\n        try {\n            MAPPER.readValue(OBJECTS_JSON, Key[].class);\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (JsonMappingException e) {\n            try{ verifyException(e, \"Can not deserialize\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            List<JsonMappingException.Reference> refs = e.getPath();\n            try{ assertEquals(1, refs.size());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(1, refs.get(0).getIndex());                                                        /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n\n        try {\n            MAPPER.readValue(\"[ \\\"xyz\\\", { } ]\", String[].class);\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (JsonMappingException e) {\n            try{ verifyException(e, \"Can not deserialize\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            List<JsonMappingException.Reference> refs = e.getPath();\n            try{ assertEquals(1, refs.size());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(1, refs.get(0).getIndex());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        try {\n            MAPPER.readValue(\"{\\\"keys\\\":\"+OBJECTS_JSON+\"}\", KeyListBean.class);\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (JsonMappingException e) {\n            try{ verifyException(e, \"Can not deserialize\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            List<JsonMappingException.Reference> refs = e.getPath();\n            try{ assertEquals(2, refs.size());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            // Bean has no index, but has name:\n            try{ assertEquals(-1, refs.get(0).getIndex());                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"keys\", refs.get(0).getFieldName());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            // and for List, reverse:\n            try{ assertEquals(1, refs.get(1).getIndex());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertNull(refs.get(1).getFieldName());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
            "    public void testArrayIndexForExceptions$catena_4() throws Exception\n    {\n        final String OBJECTS_JSON = \"[ \\\"KEY2\\\", false ]\";\n        try {\n            MAPPER.readValue(OBJECTS_JSON, Key[].class);\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (JsonMappingException e) {\n            try{ verifyException(e, \"Can not deserialize\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            List<JsonMappingException.Reference> refs = e.getPath();\n            try{ assertEquals(1, refs.size());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(1, refs.get(0).getIndex());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        try {\n            MAPPER.readValue(\"[ \\\"xyz\\\", { } ]\", String[].class);\n            fail(\"Should not pass\");                                                                        /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (JsonMappingException e) {\n            try{ verifyException(e, \"Can not deserialize\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            List<JsonMappingException.Reference> refs = e.getPath();\n            try{ assertEquals(1, refs.size());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(1, refs.get(0).getIndex());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        try {\n            MAPPER.readValue(\"{\\\"keys\\\":\"+OBJECTS_JSON+\"}\", KeyListBean.class);\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (JsonMappingException e) {\n            try{ verifyException(e, \"Can not deserialize\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            List<JsonMappingException.Reference> refs = e.getPath();\n            try{ assertEquals(2, refs.size());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            // Bean has no index, but has name:\n            try{ assertEquals(-1, refs.get(0).getIndex());                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"keys\", refs.get(0).getFieldName());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            // and for List, reverse:\n            try{ assertEquals(1, refs.get(1).getIndex());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertNull(refs.get(1).getFieldName());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
            "    public void testArrayIndexForExceptions$catena_5() throws Exception\n    {\n        final String OBJECTS_JSON = \"[ \\\"KEY2\\\", false ]\";\n        try {\n            MAPPER.readValue(OBJECTS_JSON, Key[].class);\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (JsonMappingException e) {\n            try{ verifyException(e, \"Can not deserialize\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            List<JsonMappingException.Reference> refs = e.getPath();\n            try{ assertEquals(1, refs.size());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(1, refs.get(0).getIndex());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        try {\n            MAPPER.readValue(\"[ \\\"xyz\\\", { } ]\", String[].class);\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (JsonMappingException e) {\n            verifyException(e, \"Can not deserialize\");                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n            List<JsonMappingException.Reference> refs = e.getPath();\n            try{ assertEquals(1, refs.size());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(1, refs.get(0).getIndex());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        try {\n            MAPPER.readValue(\"{\\\"keys\\\":\"+OBJECTS_JSON+\"}\", KeyListBean.class);\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (JsonMappingException e) {\n            try{ verifyException(e, \"Can not deserialize\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            List<JsonMappingException.Reference> refs = e.getPath();\n            try{ assertEquals(2, refs.size());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            // Bean has no index, but has name:\n            try{ assertEquals(-1, refs.get(0).getIndex());                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"keys\", refs.get(0).getFieldName());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            // and for List, reverse:\n            try{ assertEquals(1, refs.get(1).getIndex());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertNull(refs.get(1).getFieldName());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
            "    public void testArrayIndexForExceptions$catena_8() throws Exception\n    {\n        final String OBJECTS_JSON = \"[ \\\"KEY2\\\", false ]\";\n        try {\n            MAPPER.readValue(OBJECTS_JSON, Key[].class);\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (JsonMappingException e) {\n            try{ verifyException(e, \"Can not deserialize\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            List<JsonMappingException.Reference> refs = e.getPath();\n            try{ assertEquals(1, refs.size());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(1, refs.get(0).getIndex());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        try {\n            MAPPER.readValue(\"[ \\\"xyz\\\", { } ]\", String[].class);\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (JsonMappingException e) {\n            try{ verifyException(e, \"Can not deserialize\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            List<JsonMappingException.Reference> refs = e.getPath();\n            try{ assertEquals(1, refs.size());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(1, refs.get(0).getIndex());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        try {\n            MAPPER.readValue(\"{\\\"keys\\\":\"+OBJECTS_JSON+\"}\", KeyListBean.class);\n            fail(\"Should not pass\");                                                                        /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (JsonMappingException e) {\n            try{ verifyException(e, \"Can not deserialize\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            List<JsonMappingException.Reference> refs = e.getPath();\n            try{ assertEquals(2, refs.size());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            // Bean has no index, but has name:\n            try{ assertEquals(-1, refs.get(0).getIndex());                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"keys\", refs.get(0).getFieldName());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            // and for List, reverse:\n            try{ assertEquals(1, refs.get(1).getIndex());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertNull(refs.get(1).getFieldName());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
            "    public void testArrayIndexForExceptions$catena_9() throws Exception\n    {\n        final String OBJECTS_JSON = \"[ \\\"KEY2\\\", false ]\";\n        try {\n            MAPPER.readValue(OBJECTS_JSON, Key[].class);\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (JsonMappingException e) {\n            try{ verifyException(e, \"Can not deserialize\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            List<JsonMappingException.Reference> refs = e.getPath();\n            try{ assertEquals(1, refs.size());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(1, refs.get(0).getIndex());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        try {\n            MAPPER.readValue(\"[ \\\"xyz\\\", { } ]\", String[].class);\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (JsonMappingException e) {\n            try{ verifyException(e, \"Can not deserialize\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            List<JsonMappingException.Reference> refs = e.getPath();\n            try{ assertEquals(1, refs.size());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(1, refs.get(0).getIndex());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        try {\n            MAPPER.readValue(\"{\\\"keys\\\":\"+OBJECTS_JSON+\"}\", KeyListBean.class);\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (JsonMappingException e) {\n            verifyException(e, \"Can not deserialize\");                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n            List<JsonMappingException.Reference> refs = e.getPath();\n            try{ assertEquals(2, refs.size());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            // Bean has no index, but has name:\n            try{ assertEquals(-1, refs.get(0).getIndex());                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"keys\", refs.get(0).getFieldName());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            // and for List, reverse:\n            try{ assertEquals(1, refs.get(1).getIndex());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertNull(refs.get(1).getFieldName());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
            "    public void testArrayIndexForExceptions$catena_10() throws Exception\n    {\n        final String OBJECTS_JSON = \"[ \\\"KEY2\\\", false ]\";\n        try {\n            MAPPER.readValue(OBJECTS_JSON, Key[].class);\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (JsonMappingException e) {\n            try{ verifyException(e, \"Can not deserialize\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            List<JsonMappingException.Reference> refs = e.getPath();\n            try{ assertEquals(1, refs.size());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(1, refs.get(0).getIndex());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        try {\n            MAPPER.readValue(\"[ \\\"xyz\\\", { } ]\", String[].class);\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (JsonMappingException e) {\n            try{ verifyException(e, \"Can not deserialize\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            List<JsonMappingException.Reference> refs = e.getPath();\n            try{ assertEquals(1, refs.size());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(1, refs.get(0).getIndex());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        try {\n            MAPPER.readValue(\"{\\\"keys\\\":\"+OBJECTS_JSON+\"}\", KeyListBean.class);\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (JsonMappingException e) {\n            try{ verifyException(e, \"Can not deserialize\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            List<JsonMappingException.Reference> refs = e.getPath();\n            assertEquals(2, refs.size());                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n            // Bean has no index, but has name:\n            try{ assertEquals(-1, refs.get(0).getIndex());                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"keys\", refs.get(0).getFieldName());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            // and for List, reverse:\n            try{ assertEquals(1, refs.get(1).getIndex());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertNull(refs.get(1).getFieldName());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
            "    public void testArrayIndexForExceptions$catena_11() throws Exception\n    {\n        final String OBJECTS_JSON = \"[ \\\"KEY2\\\", false ]\";\n        try {\n            MAPPER.readValue(OBJECTS_JSON, Key[].class);\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (JsonMappingException e) {\n            try{ verifyException(e, \"Can not deserialize\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            List<JsonMappingException.Reference> refs = e.getPath();\n            try{ assertEquals(1, refs.size());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(1, refs.get(0).getIndex());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        try {\n            MAPPER.readValue(\"[ \\\"xyz\\\", { } ]\", String[].class);\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (JsonMappingException e) {\n            try{ verifyException(e, \"Can not deserialize\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            List<JsonMappingException.Reference> refs = e.getPath();\n            try{ assertEquals(1, refs.size());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(1, refs.get(0).getIndex());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        try {\n            MAPPER.readValue(\"{\\\"keys\\\":\"+OBJECTS_JSON+\"}\", KeyListBean.class);\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (JsonMappingException e) {\n            try{ verifyException(e, \"Can not deserialize\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            List<JsonMappingException.Reference> refs = e.getPath();\n            try{ assertEquals(2, refs.size());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            // Bean has no index, but has name:\n            assertEquals(-1, refs.get(0).getIndex());                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(\"keys\", refs.get(0).getFieldName());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            // and for List, reverse:\n            try{ assertEquals(1, refs.get(1).getIndex());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertNull(refs.get(1).getFieldName());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
            "    public void testArrayIndexForExceptions$catena_12() throws Exception\n    {\n        final String OBJECTS_JSON = \"[ \\\"KEY2\\\", false ]\";\n        try {\n            MAPPER.readValue(OBJECTS_JSON, Key[].class);\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (JsonMappingException e) {\n            try{ verifyException(e, \"Can not deserialize\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            List<JsonMappingException.Reference> refs = e.getPath();\n            try{ assertEquals(1, refs.size());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(1, refs.get(0).getIndex());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        try {\n            MAPPER.readValue(\"[ \\\"xyz\\\", { } ]\", String[].class);\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (JsonMappingException e) {\n            try{ verifyException(e, \"Can not deserialize\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            List<JsonMappingException.Reference> refs = e.getPath();\n            try{ assertEquals(1, refs.size());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(1, refs.get(0).getIndex());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        try {\n            MAPPER.readValue(\"{\\\"keys\\\":\"+OBJECTS_JSON+\"}\", KeyListBean.class);\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (JsonMappingException e) {\n            try{ verifyException(e, \"Can not deserialize\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            List<JsonMappingException.Reference> refs = e.getPath();\n            try{ assertEquals(2, refs.size());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            // Bean has no index, but has name:\n            try{ assertEquals(-1, refs.get(0).getIndex());                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(\"keys\", refs.get(0).getFieldName());                                               /***** ORIGINAL ASSERTION IS HERE *****/\n\n            // and for List, reverse:\n            try{ assertEquals(1, refs.get(1).getIndex());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertNull(refs.get(1).getFieldName());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
            "    public void testArrayIndexForExceptions$catena_13() throws Exception\n    {\n        final String OBJECTS_JSON = \"[ \\\"KEY2\\\", false ]\";\n        try {\n            MAPPER.readValue(OBJECTS_JSON, Key[].class);\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (JsonMappingException e) {\n            try{ verifyException(e, \"Can not deserialize\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            List<JsonMappingException.Reference> refs = e.getPath();\n            try{ assertEquals(1, refs.size());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(1, refs.get(0).getIndex());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        try {\n            MAPPER.readValue(\"[ \\\"xyz\\\", { } ]\", String[].class);\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (JsonMappingException e) {\n            try{ verifyException(e, \"Can not deserialize\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            List<JsonMappingException.Reference> refs = e.getPath();\n            try{ assertEquals(1, refs.size());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(1, refs.get(0).getIndex());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        try {\n            MAPPER.readValue(\"{\\\"keys\\\":\"+OBJECTS_JSON+\"}\", KeyListBean.class);\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (JsonMappingException e) {\n            try{ verifyException(e, \"Can not deserialize\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            List<JsonMappingException.Reference> refs = e.getPath();\n            try{ assertEquals(2, refs.size());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            // Bean has no index, but has name:\n            try{ assertEquals(-1, refs.get(0).getIndex());                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"keys\", refs.get(0).getFieldName());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            // and for List, reverse:\n            assertEquals(1, refs.get(1).getIndex());                                                        /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertNull(refs.get(1).getFieldName());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
            "    public void testArrayIndexForExceptions$catena_14() throws Exception\n    {\n        final String OBJECTS_JSON = \"[ \\\"KEY2\\\", false ]\";\n        try {\n            MAPPER.readValue(OBJECTS_JSON, Key[].class);\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (JsonMappingException e) {\n            try{ verifyException(e, \"Can not deserialize\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            List<JsonMappingException.Reference> refs = e.getPath();\n            try{ assertEquals(1, refs.size());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(1, refs.get(0).getIndex());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        try {\n            MAPPER.readValue(\"[ \\\"xyz\\\", { } ]\", String[].class);\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (JsonMappingException e) {\n            try{ verifyException(e, \"Can not deserialize\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            List<JsonMappingException.Reference> refs = e.getPath();\n            try{ assertEquals(1, refs.size());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(1, refs.get(0).getIndex());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        try {\n            MAPPER.readValue(\"{\\\"keys\\\":\"+OBJECTS_JSON+\"}\", KeyListBean.class);\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (JsonMappingException e) {\n            try{ verifyException(e, \"Can not deserialize\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            List<JsonMappingException.Reference> refs = e.getPath();\n            try{ assertEquals(2, refs.size());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            // Bean has no index, but has name:\n            try{ assertEquals(-1, refs.get(0).getIndex());                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"keys\", refs.get(0).getFieldName());                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            // and for List, reverse:\n            try{ assertEquals(1, refs.get(1).getIndex());                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertNull(refs.get(1).getFieldName());                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n    }"
        ]
    }
}