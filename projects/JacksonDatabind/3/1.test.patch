{
    "com.fasterxml.jackson.databind.deser.TestArrayDeserialization::testStringArray": {
        "begin_line_no": 243,
        "end_line_no": 270,
        "file_path": "src/test/java/com/fasterxml/jackson/databind/deser/TestArrayDeserialization.java",
        "to": [
            "    public void testStringArray$catena_5() throws Exception\n    {\n        final String[] STRS = new String[] {\n            \"a\", \"b\", \"abcd\", \"\", \"???\", \"\\\"quoted\\\"\", \"lf: \\n\",\n        };\n        StringWriter sw = new StringWriter();\n        JsonGenerator jg = MAPPER.getFactory().createGenerator(sw);\n        jg.writeStartArray();\n        for (String str : STRS) {\n            jg.writeString(str);\n        }\n        jg.writeEndArray();\n        jg.close();\n\n        String[] result = MAPPER.readValue(sw.toString(), String[].class);\n        try{ assertNotNull(result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(STRS.length, result.length);                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        for (int i = 0; i < STRS.length; ++i) {\n            try{ assertEquals(STRS[i], result[i]);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // [#479]: null handling was busted in 2.4.0\n        result = MAPPER.readValue(\" [ null ]\", String[].class);\n        try{ assertNotNull(result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.length);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertNull(result[0]);                                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n    }",
            "    public void testStringArray$catena_4() throws Exception\n    {\n        final String[] STRS = new String[] {\n            \"a\", \"b\", \"abcd\", \"\", \"???\", \"\\\"quoted\\\"\", \"lf: \\n\",\n        };\n        StringWriter sw = new StringWriter();\n        JsonGenerator jg = MAPPER.getFactory().createGenerator(sw);\n        jg.writeStartArray();\n        for (String str : STRS) {\n            jg.writeString(str);\n        }\n        jg.writeEndArray();\n        jg.close();\n\n        String[] result = MAPPER.readValue(sw.toString(), String[].class);\n        try{ assertNotNull(result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(STRS.length, result.length);                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        for (int i = 0; i < STRS.length; ++i) {\n            try{ assertEquals(STRS[i], result[i]);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // [#479]: null handling was busted in 2.4.0\n        result = MAPPER.readValue(\" [ null ]\", String[].class);\n        try{ assertNotNull(result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(1, result.length);                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertNull(result[0]);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testStringArray$catena_3() throws Exception\n    {\n        final String[] STRS = new String[] {\n            \"a\", \"b\", \"abcd\", \"\", \"???\", \"\\\"quoted\\\"\", \"lf: \\n\",\n        };\n        StringWriter sw = new StringWriter();\n        JsonGenerator jg = MAPPER.getFactory().createGenerator(sw);\n        jg.writeStartArray();\n        for (String str : STRS) {\n            jg.writeString(str);\n        }\n        jg.writeEndArray();\n        jg.close();\n\n        String[] result = MAPPER.readValue(sw.toString(), String[].class);\n        try{ assertNotNull(result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(STRS.length, result.length);                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        for (int i = 0; i < STRS.length; ++i) {\n            try{ assertEquals(STRS[i], result[i]);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // [#479]: null handling was busted in 2.4.0\n        result = MAPPER.readValue(\" [ null ]\", String[].class);\n        assertNotNull(result);                                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(1, result.length);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(result[0]);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testStringArray$catena_1() throws Exception\n    {\n        final String[] STRS = new String[] {\n            \"a\", \"b\", \"abcd\", \"\", \"???\", \"\\\"quoted\\\"\", \"lf: \\n\",\n        };\n        StringWriter sw = new StringWriter();\n        JsonGenerator jg = MAPPER.getFactory().createGenerator(sw);\n        jg.writeStartArray();\n        for (String str : STRS) {\n            jg.writeString(str);\n        }\n        jg.writeEndArray();\n        jg.close();\n\n        String[] result = MAPPER.readValue(sw.toString(), String[].class);\n        try{ assertNotNull(result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        assertEquals(STRS.length, result.length);                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n        for (int i = 0; i < STRS.length; ++i) {\n            try{ assertEquals(STRS[i], result[i]);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // [#479]: null handling was busted in 2.4.0\n        result = MAPPER.readValue(\" [ null ]\", String[].class);\n        try{ assertNotNull(result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.length);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(result[0]);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testStringArray$catena_0() throws Exception\n    {\n        final String[] STRS = new String[] {\n            \"a\", \"b\", \"abcd\", \"\", \"???\", \"\\\"quoted\\\"\", \"lf: \\n\",\n        };\n        StringWriter sw = new StringWriter();\n        JsonGenerator jg = MAPPER.getFactory().createGenerator(sw);\n        jg.writeStartArray();\n        for (String str : STRS) {\n            jg.writeString(str);\n        }\n        jg.writeEndArray();\n        jg.close();\n\n        String[] result = MAPPER.readValue(sw.toString(), String[].class);\n        assertNotNull(result);                                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ assertEquals(STRS.length, result.length);                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        for (int i = 0; i < STRS.length; ++i) {\n            try{ assertEquals(STRS[i], result[i]);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // [#479]: null handling was busted in 2.4.0\n        result = MAPPER.readValue(\" [ null ]\", String[].class);\n        try{ assertNotNull(result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.length);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(result[0]);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testStringArray$catena_2() throws Exception\n    {\n        final String[] STRS = new String[] {\n            \"a\", \"b\", \"abcd\", \"\", \"???\", \"\\\"quoted\\\"\", \"lf: \\n\",\n        };\n        StringWriter sw = new StringWriter();\n        JsonGenerator jg = MAPPER.getFactory().createGenerator(sw);\n        jg.writeStartArray();\n        for (String str : STRS) {\n            jg.writeString(str);\n        }\n        jg.writeEndArray();\n        jg.close();\n\n        String[] result = MAPPER.readValue(sw.toString(), String[].class);\n        try{ assertNotNull(result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(STRS.length, result.length);                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        for (int i = 0; i < STRS.length; ++i) {\n            assertEquals(STRS[i], result[i]);                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n\n        // [#479]: null handling was busted in 2.4.0\n        result = MAPPER.readValue(\" [ null ]\", String[].class);\n        try{ assertNotNull(result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.length);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(result[0]);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    }
}