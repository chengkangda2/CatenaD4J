{
    "com.fasterxml.jackson.databind.interop.DeprecatedTypeHandling1102Test::testExplicitMapType": {
        "begin_line_no": 72,
        "end_line_no": 89,
        "file_path": "src/test/java/com/fasterxml/jackson/databind/interop/DeprecatedTypeHandling1102Test.java",
        "to": [
            "    @SuppressWarnings(\"deprecation\")\n    public void testExplicitMapType$catena_4() throws Exception\n    {\n        JavaType key = SimpleType.construct(String.class);\n        JavaType elem = SimpleType.construct(Point.class);\n        JavaType t = MapType.construct(Map.class, key, elem);\n\n        final String json = aposToQuotes(\"{'x':{'x':3,'y':5}}\");        \n\n        Map<String,Point> m = MAPPER.readValue(json, t);\n        try{ assertNotNull(m);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, m.size());                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        Object ob = m.values().iterator().next();\n        try{ assertEquals(Point.class, ob.getClass());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        Point p = (Point) ob;\n        try{ assertEquals(3, p.x);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(5, p.getY());                                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n    }",
            "    @SuppressWarnings(\"deprecation\")\n    public void testExplicitMapType$catena_3() throws Exception\n    {\n        JavaType key = SimpleType.construct(String.class);\n        JavaType elem = SimpleType.construct(Point.class);\n        JavaType t = MapType.construct(Map.class, key, elem);\n\n        final String json = aposToQuotes(\"{'x':{'x':3,'y':5}}\");        \n\n        Map<String,Point> m = MAPPER.readValue(json, t);\n        try{ assertNotNull(m);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, m.size());                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        Object ob = m.values().iterator().next();\n        try{ assertEquals(Point.class, ob.getClass());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        Point p = (Point) ob;\n        assertEquals(3, p.x);                                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(5, p.getY());                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @SuppressWarnings(\"deprecation\")\n    public void testExplicitMapType$catena_0() throws Exception\n    {\n        JavaType key = SimpleType.construct(String.class);\n        JavaType elem = SimpleType.construct(Point.class);\n        JavaType t = MapType.construct(Map.class, key, elem);\n\n        final String json = aposToQuotes(\"{'x':{'x':3,'y':5}}\");        \n\n        Map<String,Point> m = MAPPER.readValue(json, t);\n        assertNotNull(m);                                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(1, m.size());                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        Object ob = m.values().iterator().next();\n        try{ assertEquals(Point.class, ob.getClass());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        Point p = (Point) ob;\n        try{ assertEquals(3, p.x);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, p.getY());                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @SuppressWarnings(\"deprecation\")\n    public void testExplicitMapType$catena_1() throws Exception\n    {\n        JavaType key = SimpleType.construct(String.class);\n        JavaType elem = SimpleType.construct(Point.class);\n        JavaType t = MapType.construct(Map.class, key, elem);\n\n        final String json = aposToQuotes(\"{'x':{'x':3,'y':5}}\");        \n\n        Map<String,Point> m = MAPPER.readValue(json, t);\n        try{ assertNotNull(m);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(1, m.size());                                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        Object ob = m.values().iterator().next();\n        try{ assertEquals(Point.class, ob.getClass());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        Point p = (Point) ob;\n        try{ assertEquals(3, p.x);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, p.getY());                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @SuppressWarnings(\"deprecation\")\n    public void testExplicitMapType$catena_2() throws Exception\n    {\n        JavaType key = SimpleType.construct(String.class);\n        JavaType elem = SimpleType.construct(Point.class);\n        JavaType t = MapType.construct(Map.class, key, elem);\n\n        final String json = aposToQuotes(\"{'x':{'x':3,'y':5}}\");        \n\n        Map<String,Point> m = MAPPER.readValue(json, t);\n        try{ assertNotNull(m);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, m.size());                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        Object ob = m.values().iterator().next();\n        assertEquals(Point.class, ob.getClass());                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n        Point p = (Point) ob;\n        try{ assertEquals(3, p.x);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, p.getY());                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    },
    "com.fasterxml.jackson.databind.interop.DeprecatedTypeHandling1102Test::testExplicitCollectionType": {
        "begin_line_no": 54,
        "end_line_no": 70,
        "file_path": "src/test/java/com/fasterxml/jackson/databind/interop/DeprecatedTypeHandling1102Test.java",
        "to": [
            ""
        ]
    },
    "com.fasterxml.jackson.databind.interop.DeprecatedTypeHandling1102Test::testPOJOSubType": {
        "begin_line_no": 42,
        "end_line_no": 52,
        "file_path": "src/test/java/com/fasterxml/jackson/databind/interop/DeprecatedTypeHandling1102Test.java",
        "to": [
            ""
        ]
    }
}