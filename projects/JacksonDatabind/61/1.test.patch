{
    "com.fasterxml.jackson.databind.jsontype.DefaultTypingWithPrimitivesTest::testDefaultTypingWithLong": {
        "begin_line_no": 17,
        "end_line_no": 41,
        "file_path": "src/test/java/com/fasterxml/jackson/databind/jsontype/DefaultTypingWithPrimitivesTest.java",
        "to": [
            "    public void testDefaultTypingWithLong$catena_0() throws Exception\n    {\n        Data data = new Data();\n        data.key = 1L;\n        Map<String, Object> mapData = new HashMap<String, Object>();\n        mapData.put(\"longInMap\", 2L);\n        mapData.put(\"longAsField\", data);\n\n        // Configure Jackson to preserve types\n        ObjectMapper mapper = new ObjectMapper();\n        StdTypeResolverBuilder resolver = new StdTypeResolverBuilder();\n        resolver.init(JsonTypeInfo.Id.CLASS, null);\n        resolver.inclusion(JsonTypeInfo.As.PROPERTY);\n        resolver.typeProperty(\"__t\");\n        mapper.setDefaultTyping(resolver);\n        mapper.enable(SerializationFeature.INDENT_OUTPUT);\n\n        // Serialize\n        String json = mapper.writeValueAsString(mapData);\n\n        // Deserialize\n        Map<?,?> result = mapper.readValue(json, Map.class);\n        assertNotNull(result);                                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(2, result.size());                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testDefaultTypingWithLong$catena_1() throws Exception\n    {\n        Data data = new Data();\n        data.key = 1L;\n        Map<String, Object> mapData = new HashMap<String, Object>();\n        mapData.put(\"longInMap\", 2L);\n        mapData.put(\"longAsField\", data);\n\n        // Configure Jackson to preserve types\n        ObjectMapper mapper = new ObjectMapper();\n        StdTypeResolverBuilder resolver = new StdTypeResolverBuilder();\n        resolver.init(JsonTypeInfo.Id.CLASS, null);\n        resolver.inclusion(JsonTypeInfo.As.PROPERTY);\n        resolver.typeProperty(\"__t\");\n        mapper.setDefaultTyping(resolver);\n        mapper.enable(SerializationFeature.INDENT_OUTPUT);\n\n        // Serialize\n        String json = mapper.writeValueAsString(mapData);\n\n        // Deserialize\n        Map<?,?> result = mapper.readValue(json, Map.class);\n        try{ assertNotNull(result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(2, result.size());                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
        ]
    }
}