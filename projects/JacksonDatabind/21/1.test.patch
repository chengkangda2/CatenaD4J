{
    "com.fasterxml.jackson.databind.deser.TestEnumDeserialization::testEnumWithJsonPropertyRename": {
        "begin_line_no": 470,
        "end_line_no": 483,
        "file_path": "src/test/java/com/fasterxml/jackson/databind/deser/TestEnumDeserialization.java",
        "to": [
            "    public void testEnumWithJsonPropertyRename$catena_0() throws Exception\n    {\n        String json = MAPPER.writeValueAsString(new EnumWithPropertyAnno[] {\n                EnumWithPropertyAnno.B, EnumWithPropertyAnno.A\n        });\n        assertEquals(\"[\\\"b\\\",\\\"a\\\"]\", json);                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // and while not really proper place, let's also verify deser while we're at it\n        EnumWithPropertyAnno[] result = MAPPER.readValue(json, EnumWithPropertyAnno[].class);\n        try{ assertNotNull(result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, result.length);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(EnumWithPropertyAnno.B, result[0]);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(EnumWithPropertyAnno.A, result[1]);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testEnumWithJsonPropertyRename$catena_1() throws Exception\n    {\n        String json = MAPPER.writeValueAsString(new EnumWithPropertyAnno[] {\n                EnumWithPropertyAnno.B, EnumWithPropertyAnno.A\n        });\n        try{ assertEquals(\"[\\\"b\\\",\\\"a\\\"]\", json);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // and while not really proper place, let's also verify deser while we're at it\n        EnumWithPropertyAnno[] result = MAPPER.readValue(json, EnumWithPropertyAnno[].class);\n        assertNotNull(result);                                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(2, result.length);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(EnumWithPropertyAnno.B, result[0]);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(EnumWithPropertyAnno.A, result[1]);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testEnumWithJsonPropertyRename$catena_2() throws Exception\n    {\n        String json = MAPPER.writeValueAsString(new EnumWithPropertyAnno[] {\n                EnumWithPropertyAnno.B, EnumWithPropertyAnno.A\n        });\n        try{ assertEquals(\"[\\\"b\\\",\\\"a\\\"]\", json);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // and while not really proper place, let's also verify deser while we're at it\n        EnumWithPropertyAnno[] result = MAPPER.readValue(json, EnumWithPropertyAnno[].class);\n        try{ assertNotNull(result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(2, result.length);                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertSame(EnumWithPropertyAnno.B, result[0]);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(EnumWithPropertyAnno.A, result[1]);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testEnumWithJsonPropertyRename$catena_3() throws Exception\n    {\n        String json = MAPPER.writeValueAsString(new EnumWithPropertyAnno[] {\n                EnumWithPropertyAnno.B, EnumWithPropertyAnno.A\n        });\n        try{ assertEquals(\"[\\\"b\\\",\\\"a\\\"]\", json);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // and while not really proper place, let's also verify deser while we're at it\n        EnumWithPropertyAnno[] result = MAPPER.readValue(json, EnumWithPropertyAnno[].class);\n        try{ assertNotNull(result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, result.length);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertSame(EnumWithPropertyAnno.B, result[0]);                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertSame(EnumWithPropertyAnno.A, result[1]);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testEnumWithJsonPropertyRename$catena_4() throws Exception\n    {\n        String json = MAPPER.writeValueAsString(new EnumWithPropertyAnno[] {\n                EnumWithPropertyAnno.B, EnumWithPropertyAnno.A\n        });\n        try{ assertEquals(\"[\\\"b\\\",\\\"a\\\"]\", json);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // and while not really proper place, let's also verify deser while we're at it\n        EnumWithPropertyAnno[] result = MAPPER.readValue(json, EnumWithPropertyAnno[].class);\n        try{ assertNotNull(result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, result.length);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(EnumWithPropertyAnno.B, result[0]);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertSame(EnumWithPropertyAnno.A, result[1]);                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
        ]
    }
}