{
    "com.fasterxml.jackson.databind.deser.jdk.MapDeserializerCachingTest::testCachedSerialize": {
        "begin_line_no": 35,
        "end_line_no": 51,
        "file_path": "src/test/java/com/fasterxml/jackson/databind/deser/jdk/MapDeserializerCachingTest.java",
        "to": [
            "    public void testCachedSerialize$catena_2() throws IOException {\n        ObjectMapper mapper = new ObjectMapper();\n        String json = aposToQuotes(\"{'data':{'1st':'onedata','2nd':'twodata'}}\");\n\n        // Do deserialization with non-annotated map property\n        NonAnnotatedMapHolderClass ignored = mapper.readValue(json, NonAnnotatedMapHolderClass.class);\n        try{ assertTrue(ignored.data.containsKey(\"1st\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(ignored.data.containsKey(\"2nd\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n//mapper = new ObjectMapper();\n        \n        MapHolder model2 = mapper.readValue(json, MapHolder.class);\n        if (!model2.data.containsKey(\"1st (CUSTOM)\")\n            || !model2.data.containsKey(\"2nd (CUSTOM)\")) {\n            fail(\"Not using custom key deserializer for input: \"+json+\"; resulted in: \"+model2.data);         /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n    }",
            "    public void testCachedSerialize$catena_0() throws IOException {\n        ObjectMapper mapper = new ObjectMapper();\n        String json = aposToQuotes(\"{'data':{'1st':'onedata','2nd':'twodata'}}\");\n\n        // Do deserialization with non-annotated map property\n        NonAnnotatedMapHolderClass ignored = mapper.readValue(json, NonAnnotatedMapHolderClass.class);\n        assertTrue(ignored.data.containsKey(\"1st\"));                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(ignored.data.containsKey(\"2nd\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n//mapper = new ObjectMapper();\n        \n        MapHolder model2 = mapper.readValue(json, MapHolder.class);\n        if (!model2.data.containsKey(\"1st (CUSTOM)\")\n            || !model2.data.containsKey(\"2nd (CUSTOM)\")) {\n            try{ fail(\"Not using custom key deserializer for input: \"+json+\"; resulted in: \"+model2.data);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
            "    public void testCachedSerialize$catena_1() throws IOException {\n        ObjectMapper mapper = new ObjectMapper();\n        String json = aposToQuotes(\"{'data':{'1st':'onedata','2nd':'twodata'}}\");\n\n        // Do deserialization with non-annotated map property\n        NonAnnotatedMapHolderClass ignored = mapper.readValue(json, NonAnnotatedMapHolderClass.class);\n        try{ assertTrue(ignored.data.containsKey(\"1st\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(ignored.data.containsKey(\"2nd\"));                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n\n//mapper = new ObjectMapper();\n        \n        MapHolder model2 = mapper.readValue(json, MapHolder.class);\n        if (!model2.data.containsKey(\"1st (CUSTOM)\")\n            || !model2.data.containsKey(\"2nd (CUSTOM)\")) {\n            try{ fail(\"Not using custom key deserializer for input: \"+json+\"; resulted in: \"+model2.data);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }"
        ]
    }
}