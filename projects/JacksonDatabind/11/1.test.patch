{
    "com.fasterxml.jackson.databind.type.TestJavaType::testLocalType728": {
        "begin_line_no": 31,
        "end_line_no": 50,
        "file_path": "src/test/java/com/fasterxml/jackson/databind/type/TestJavaType.java",
        "to": [
            "    public void testLocalType728$catena_0() throws Exception\n    {\n        TypeFactory tf = TypeFactory.defaultInstance();\n        Method m = Issue728.class.getMethod(\"method\", CharSequence.class);\n        assertNotNull(m);                                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // Start with return type\n        // first type-erased\n        JavaType t = tf.constructType(m.getReturnType());\n        try{ assertEquals(CharSequence.class, t.getRawClass());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        // then generic\n        t = tf.constructType(m.getGenericReturnType());\n        try{ assertEquals(CharSequence.class, t.getRawClass());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // then parameter type\n        t = tf.constructType(m.getParameterTypes()[0]);\n        try{ assertEquals(CharSequence.class, t.getRawClass());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        t = tf.constructType(m.getGenericParameterTypes()[0]);\n        try{ assertEquals(CharSequence.class, t.getRawClass());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testLocalType728$catena_1() throws Exception\n    {\n        TypeFactory tf = TypeFactory.defaultInstance();\n        Method m = Issue728.class.getMethod(\"method\", CharSequence.class);\n        try{ assertNotNull(m);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Start with return type\n        // first type-erased\n        JavaType t = tf.constructType(m.getReturnType());\n        assertEquals(CharSequence.class, t.getRawClass());                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        // then generic\n        t = tf.constructType(m.getGenericReturnType());\n        try{ assertEquals(CharSequence.class, t.getRawClass());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // then parameter type\n        t = tf.constructType(m.getParameterTypes()[0]);\n        try{ assertEquals(CharSequence.class, t.getRawClass());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        t = tf.constructType(m.getGenericParameterTypes()[0]);\n        try{ assertEquals(CharSequence.class, t.getRawClass());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testLocalType728$catena_3() throws Exception\n    {\n        TypeFactory tf = TypeFactory.defaultInstance();\n        Method m = Issue728.class.getMethod(\"method\", CharSequence.class);\n        try{ assertNotNull(m);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Start with return type\n        // first type-erased\n        JavaType t = tf.constructType(m.getReturnType());\n        try{ assertEquals(CharSequence.class, t.getRawClass());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        // then generic\n        t = tf.constructType(m.getGenericReturnType());\n        try{ assertEquals(CharSequence.class, t.getRawClass());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // then parameter type\n        t = tf.constructType(m.getParameterTypes()[0]);\n        assertEquals(CharSequence.class, t.getRawClass());                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        t = tf.constructType(m.getGenericParameterTypes()[0]);\n        try{ assertEquals(CharSequence.class, t.getRawClass());                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    }
}