{
    "com.fasterxml.jackson.databind.ser.TestConfig::testDateFormatConfig": {
        "begin_line_no": 195,
        "end_line_no": 225,
        "file_path": "src/test/java/com/fasterxml/jackson/databind/ser/TestConfig.java",
        "to": [
            "    public void testDateFormatConfig$catena_9() throws Exception\n    {\n        ObjectMapper mapper = new ObjectMapper();\n        TimeZone tz1 = TimeZone.getTimeZone(\"America/Los_Angeles\");\n        TimeZone tz2 = TimeZone.getTimeZone(\"Central Standard Time\");\n\n        // sanity checks\n        try{ assertEquals(tz1, tz1);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(tz2, tz2);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        if (tz1.equals(tz2)) {\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        mapper.setTimeZone(tz1);\n        try{ assertEquals(tz1, mapper.getSerializationConfig().getTimeZone());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(tz1, mapper.getDeserializationConfig().getTimeZone());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // also better stick via reader/writer as well\n        try{ assertEquals(tz1, mapper.writer().getConfig().getTimeZone());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(tz1, mapper.reader().getConfig().getTimeZone());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        SimpleDateFormat f = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n        f.setTimeZone(tz2);\n        mapper.setDateFormat(f);\n\n        // should not change the timezone tho\n        try{ assertEquals(tz1, mapper.getSerializationConfig().getTimeZone());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(tz1, mapper.getDeserializationConfig().getTimeZone());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(tz1, mapper.writer().getConfig().getTimeZone());                                       /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(tz1, mapper.reader().getConfig().getTimeZone());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testDateFormatConfig$catena_8() throws Exception\n    {\n        ObjectMapper mapper = new ObjectMapper();\n        TimeZone tz1 = TimeZone.getTimeZone(\"America/Los_Angeles\");\n        TimeZone tz2 = TimeZone.getTimeZone(\"Central Standard Time\");\n\n        // sanity checks\n        try{ assertEquals(tz1, tz1);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(tz2, tz2);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        if (tz1.equals(tz2)) {\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        mapper.setTimeZone(tz1);\n        try{ assertEquals(tz1, mapper.getSerializationConfig().getTimeZone());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(tz1, mapper.getDeserializationConfig().getTimeZone());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // also better stick via reader/writer as well\n        try{ assertEquals(tz1, mapper.writer().getConfig().getTimeZone());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(tz1, mapper.reader().getConfig().getTimeZone());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        SimpleDateFormat f = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n        f.setTimeZone(tz2);\n        mapper.setDateFormat(f);\n\n        // should not change the timezone tho\n        try{ assertEquals(tz1, mapper.getSerializationConfig().getTimeZone());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(tz1, mapper.getDeserializationConfig().getTimeZone());                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(tz1, mapper.writer().getConfig().getTimeZone());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(tz1, mapper.reader().getConfig().getTimeZone());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testDateFormatConfig$catena_10() throws Exception\n    {\n        ObjectMapper mapper = new ObjectMapper();\n        TimeZone tz1 = TimeZone.getTimeZone(\"America/Los_Angeles\");\n        TimeZone tz2 = TimeZone.getTimeZone(\"Central Standard Time\");\n\n        // sanity checks\n        try{ assertEquals(tz1, tz1);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(tz2, tz2);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        if (tz1.equals(tz2)) {\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        mapper.setTimeZone(tz1);\n        try{ assertEquals(tz1, mapper.getSerializationConfig().getTimeZone());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(tz1, mapper.getDeserializationConfig().getTimeZone());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // also better stick via reader/writer as well\n        try{ assertEquals(tz1, mapper.writer().getConfig().getTimeZone());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(tz1, mapper.reader().getConfig().getTimeZone());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        SimpleDateFormat f = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n        f.setTimeZone(tz2);\n        mapper.setDateFormat(f);\n\n        // should not change the timezone tho\n        try{ assertEquals(tz1, mapper.getSerializationConfig().getTimeZone());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(tz1, mapper.getDeserializationConfig().getTimeZone());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(tz1, mapper.writer().getConfig().getTimeZone());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(tz1, mapper.reader().getConfig().getTimeZone());                                       /***** ORIGINAL ASSERTION IS HERE *****/\n    }",
            "    public void testDateFormatConfig$catena_7() throws Exception\n    {\n        ObjectMapper mapper = new ObjectMapper();\n        TimeZone tz1 = TimeZone.getTimeZone(\"America/Los_Angeles\");\n        TimeZone tz2 = TimeZone.getTimeZone(\"Central Standard Time\");\n\n        // sanity checks\n        try{ assertEquals(tz1, tz1);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(tz2, tz2);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        if (tz1.equals(tz2)) {\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        mapper.setTimeZone(tz1);\n        try{ assertEquals(tz1, mapper.getSerializationConfig().getTimeZone());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(tz1, mapper.getDeserializationConfig().getTimeZone());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // also better stick via reader/writer as well\n        try{ assertEquals(tz1, mapper.writer().getConfig().getTimeZone());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(tz1, mapper.reader().getConfig().getTimeZone());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        SimpleDateFormat f = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n        f.setTimeZone(tz2);\n        mapper.setDateFormat(f);\n\n        // should not change the timezone tho\n        assertEquals(tz1, mapper.getSerializationConfig().getTimeZone());                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(tz1, mapper.getDeserializationConfig().getTimeZone());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(tz1, mapper.writer().getConfig().getTimeZone());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(tz1, mapper.reader().getConfig().getTimeZone());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testDateFormatConfig$catena_0() throws Exception\n    {\n        ObjectMapper mapper = new ObjectMapper();\n        TimeZone tz1 = TimeZone.getTimeZone(\"America/Los_Angeles\");\n        TimeZone tz2 = TimeZone.getTimeZone(\"Central Standard Time\");\n\n        // sanity checks\n        assertEquals(tz1, tz1);                                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(tz2, tz2);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        if (tz1.equals(tz2)) {\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        mapper.setTimeZone(tz1);\n        try{ assertEquals(tz1, mapper.getSerializationConfig().getTimeZone());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(tz1, mapper.getDeserializationConfig().getTimeZone());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // also better stick via reader/writer as well\n        try{ assertEquals(tz1, mapper.writer().getConfig().getTimeZone());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(tz1, mapper.reader().getConfig().getTimeZone());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        SimpleDateFormat f = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n        f.setTimeZone(tz2);\n        mapper.setDateFormat(f);\n\n        // should not change the timezone tho\n        try{ assertEquals(tz1, mapper.getSerializationConfig().getTimeZone());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(tz1, mapper.getDeserializationConfig().getTimeZone());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(tz1, mapper.writer().getConfig().getTimeZone());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(tz1, mapper.reader().getConfig().getTimeZone());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testDateFormatConfig$catena_1() throws Exception\n    {\n        ObjectMapper mapper = new ObjectMapper();\n        TimeZone tz1 = TimeZone.getTimeZone(\"America/Los_Angeles\");\n        TimeZone tz2 = TimeZone.getTimeZone(\"Central Standard Time\");\n\n        // sanity checks\n        try{ assertEquals(tz1, tz1);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(tz2, tz2);                                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        if (tz1.equals(tz2)) {\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        mapper.setTimeZone(tz1);\n        try{ assertEquals(tz1, mapper.getSerializationConfig().getTimeZone());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(tz1, mapper.getDeserializationConfig().getTimeZone());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // also better stick via reader/writer as well\n        try{ assertEquals(tz1, mapper.writer().getConfig().getTimeZone());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(tz1, mapper.reader().getConfig().getTimeZone());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        SimpleDateFormat f = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n        f.setTimeZone(tz2);\n        mapper.setDateFormat(f);\n\n        // should not change the timezone tho\n        try{ assertEquals(tz1, mapper.getSerializationConfig().getTimeZone());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(tz1, mapper.getDeserializationConfig().getTimeZone());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(tz1, mapper.writer().getConfig().getTimeZone());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(tz1, mapper.reader().getConfig().getTimeZone());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testDateFormatConfig$catena_2() throws Exception\n    {\n        ObjectMapper mapper = new ObjectMapper();\n        TimeZone tz1 = TimeZone.getTimeZone(\"America/Los_Angeles\");\n        TimeZone tz2 = TimeZone.getTimeZone(\"Central Standard Time\");\n\n        // sanity checks\n        try{ assertEquals(tz1, tz1);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(tz2, tz2);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        if (tz1.equals(tz2)) {\n            fail();                                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n\n        mapper.setTimeZone(tz1);\n        try{ assertEquals(tz1, mapper.getSerializationConfig().getTimeZone());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(tz1, mapper.getDeserializationConfig().getTimeZone());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // also better stick via reader/writer as well\n        try{ assertEquals(tz1, mapper.writer().getConfig().getTimeZone());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(tz1, mapper.reader().getConfig().getTimeZone());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        SimpleDateFormat f = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n        f.setTimeZone(tz2);\n        mapper.setDateFormat(f);\n\n        // should not change the timezone tho\n        try{ assertEquals(tz1, mapper.getSerializationConfig().getTimeZone());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(tz1, mapper.getDeserializationConfig().getTimeZone());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(tz1, mapper.writer().getConfig().getTimeZone());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(tz1, mapper.reader().getConfig().getTimeZone());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testDateFormatConfig$catena_3() throws Exception\n    {\n        ObjectMapper mapper = new ObjectMapper();\n        TimeZone tz1 = TimeZone.getTimeZone(\"America/Los_Angeles\");\n        TimeZone tz2 = TimeZone.getTimeZone(\"Central Standard Time\");\n\n        // sanity checks\n        try{ assertEquals(tz1, tz1);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(tz2, tz2);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        if (tz1.equals(tz2)) {\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        mapper.setTimeZone(tz1);\n        assertEquals(tz1, mapper.getSerializationConfig().getTimeZone());                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(tz1, mapper.getDeserializationConfig().getTimeZone());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // also better stick via reader/writer as well\n        try{ assertEquals(tz1, mapper.writer().getConfig().getTimeZone());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(tz1, mapper.reader().getConfig().getTimeZone());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        SimpleDateFormat f = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n        f.setTimeZone(tz2);\n        mapper.setDateFormat(f);\n\n        // should not change the timezone tho\n        try{ assertEquals(tz1, mapper.getSerializationConfig().getTimeZone());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(tz1, mapper.getDeserializationConfig().getTimeZone());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(tz1, mapper.writer().getConfig().getTimeZone());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(tz1, mapper.reader().getConfig().getTimeZone());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testDateFormatConfig$catena_4() throws Exception\n    {\n        ObjectMapper mapper = new ObjectMapper();\n        TimeZone tz1 = TimeZone.getTimeZone(\"America/Los_Angeles\");\n        TimeZone tz2 = TimeZone.getTimeZone(\"Central Standard Time\");\n\n        // sanity checks\n        try{ assertEquals(tz1, tz1);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(tz2, tz2);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        if (tz1.equals(tz2)) {\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        mapper.setTimeZone(tz1);\n        try{ assertEquals(tz1, mapper.getSerializationConfig().getTimeZone());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(tz1, mapper.getDeserializationConfig().getTimeZone());                                 /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // also better stick via reader/writer as well\n        try{ assertEquals(tz1, mapper.writer().getConfig().getTimeZone());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(tz1, mapper.reader().getConfig().getTimeZone());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        SimpleDateFormat f = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n        f.setTimeZone(tz2);\n        mapper.setDateFormat(f);\n\n        // should not change the timezone tho\n        try{ assertEquals(tz1, mapper.getSerializationConfig().getTimeZone());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(tz1, mapper.getDeserializationConfig().getTimeZone());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(tz1, mapper.writer().getConfig().getTimeZone());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(tz1, mapper.reader().getConfig().getTimeZone());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testDateFormatConfig$catena_5() throws Exception\n    {\n        ObjectMapper mapper = new ObjectMapper();\n        TimeZone tz1 = TimeZone.getTimeZone(\"America/Los_Angeles\");\n        TimeZone tz2 = TimeZone.getTimeZone(\"Central Standard Time\");\n\n        // sanity checks\n        try{ assertEquals(tz1, tz1);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(tz2, tz2);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        if (tz1.equals(tz2)) {\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        mapper.setTimeZone(tz1);\n        try{ assertEquals(tz1, mapper.getSerializationConfig().getTimeZone());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(tz1, mapper.getDeserializationConfig().getTimeZone());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // also better stick via reader/writer as well\n        assertEquals(tz1, mapper.writer().getConfig().getTimeZone());                                       /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(tz1, mapper.reader().getConfig().getTimeZone());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        SimpleDateFormat f = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n        f.setTimeZone(tz2);\n        mapper.setDateFormat(f);\n\n        // should not change the timezone tho\n        try{ assertEquals(tz1, mapper.getSerializationConfig().getTimeZone());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(tz1, mapper.getDeserializationConfig().getTimeZone());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(tz1, mapper.writer().getConfig().getTimeZone());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(tz1, mapper.reader().getConfig().getTimeZone());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testDateFormatConfig$catena_6() throws Exception\n    {\n        ObjectMapper mapper = new ObjectMapper();\n        TimeZone tz1 = TimeZone.getTimeZone(\"America/Los_Angeles\");\n        TimeZone tz2 = TimeZone.getTimeZone(\"Central Standard Time\");\n\n        // sanity checks\n        try{ assertEquals(tz1, tz1);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(tz2, tz2);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        if (tz1.equals(tz2)) {\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        mapper.setTimeZone(tz1);\n        try{ assertEquals(tz1, mapper.getSerializationConfig().getTimeZone());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(tz1, mapper.getDeserializationConfig().getTimeZone());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // also better stick via reader/writer as well\n        try{ assertEquals(tz1, mapper.writer().getConfig().getTimeZone());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(tz1, mapper.reader().getConfig().getTimeZone());                                       /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        SimpleDateFormat f = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n        f.setTimeZone(tz2);\n        mapper.setDateFormat(f);\n\n        // should not change the timezone tho\n        try{ assertEquals(tz1, mapper.getSerializationConfig().getTimeZone());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(tz1, mapper.getDeserializationConfig().getTimeZone());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(tz1, mapper.writer().getConfig().getTimeZone());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(tz1, mapper.reader().getConfig().getTimeZone());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    }
}