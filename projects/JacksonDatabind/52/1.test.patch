{
    "com.fasterxml.jackson.databind.jsontype.ext.ExternalTypeId999Test::testExternalTypeId": {
        "begin_line_no": 40,
        "end_line_no": 54,
        "file_path": "src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeId999Test.java",
        "to": [
            "    public void testExternalTypeId$catena_2() throws Exception\n    {\n        TypeReference<?> type = new TypeReference<Message<FooPayload>>() { };\n\n        Message<?> msg = MAPPER.readValue(aposToQuotes(\"{ 'type':'foo', 'payload': {} }\"), type);\n        try{ assertNotNull(msg);                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(msg.payload);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"foo\", msg.type);                                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // and then with different order\n        msg = MAPPER.readValue(aposToQuotes(\"{'payload': {}, 'type':'foo' }\"), type);\n        try{ assertNotNull(msg);                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(msg.payload);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo\", msg.type);                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testExternalTypeId$catena_5() throws Exception\n    {\n        TypeReference<?> type = new TypeReference<Message<FooPayload>>() { };\n\n        Message<?> msg = MAPPER.readValue(aposToQuotes(\"{ 'type':'foo', 'payload': {} }\"), type);\n        try{ assertNotNull(msg);                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(msg.payload);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo\", msg.type);                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // and then with different order\n        msg = MAPPER.readValue(aposToQuotes(\"{'payload': {}, 'type':'foo' }\"), type);\n        try{ assertNotNull(msg);                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(msg.payload);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"foo\", msg.type);                                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n    }",
            "    public void testExternalTypeId$catena_0() throws Exception\n    {\n        TypeReference<?> type = new TypeReference<Message<FooPayload>>() { };\n\n        Message<?> msg = MAPPER.readValue(aposToQuotes(\"{ 'type':'foo', 'payload': {} }\"), type);\n        assertNotNull(msg);                                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertNotNull(msg.payload);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo\", msg.type);                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // and then with different order\n        msg = MAPPER.readValue(aposToQuotes(\"{'payload': {}, 'type':'foo' }\"), type);\n        try{ assertNotNull(msg);                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(msg.payload);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo\", msg.type);                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testExternalTypeId$catena_1() throws Exception\n    {\n        TypeReference<?> type = new TypeReference<Message<FooPayload>>() { };\n\n        Message<?> msg = MAPPER.readValue(aposToQuotes(\"{ 'type':'foo', 'payload': {} }\"), type);\n        try{ assertNotNull(msg);                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertNotNull(msg.payload);                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"foo\", msg.type);                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // and then with different order\n        msg = MAPPER.readValue(aposToQuotes(\"{'payload': {}, 'type':'foo' }\"), type);\n        try{ assertNotNull(msg);                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(msg.payload);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo\", msg.type);                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testExternalTypeId$catena_3() throws Exception\n    {\n        TypeReference<?> type = new TypeReference<Message<FooPayload>>() { };\n\n        Message<?> msg = MAPPER.readValue(aposToQuotes(\"{ 'type':'foo', 'payload': {} }\"), type);\n        try{ assertNotNull(msg);                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(msg.payload);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo\", msg.type);                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // and then with different order\n        msg = MAPPER.readValue(aposToQuotes(\"{'payload': {}, 'type':'foo' }\"), type);\n        assertNotNull(msg);                                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertNotNull(msg.payload);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo\", msg.type);                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testExternalTypeId$catena_4() throws Exception\n    {\n        TypeReference<?> type = new TypeReference<Message<FooPayload>>() { };\n\n        Message<?> msg = MAPPER.readValue(aposToQuotes(\"{ 'type':'foo', 'payload': {} }\"), type);\n        try{ assertNotNull(msg);                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(msg.payload);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo\", msg.type);                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // and then with different order\n        msg = MAPPER.readValue(aposToQuotes(\"{'payload': {}, 'type':'foo' }\"), type);\n        try{ assertNotNull(msg);                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertNotNull(msg.payload);                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"foo\", msg.type);                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    }
}