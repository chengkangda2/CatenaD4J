{
    "com.fasterxml.jackson.databind.deser.exc.ExceptionPathTest::testReferenceChainForInnerClass": {
        "begin_line_no": 29,
        "end_line_no": 40,
        "file_path": "src/test/java/com/fasterxml/jackson/databind/deser/exc/ExceptionPathTest.java",
        "to": [
            "    public void testReferenceChainForInnerClass$catena_1() throws Exception\n    {\n        String json = MAPPER.writeValueAsString(new Outer());\n        try {\n            MAPPER.readValue(json, Outer.class);\n            try{ fail(\"Should not pass\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (JsonMappingException e) {\n            JsonMappingException.Reference reference = e.getPath().get(0);\n            assertEquals(getClass().getName()+\"$Outer[\\\"inner\\\"]\",\n                    reference.toString());                                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n    }",
            "    public void testReferenceChainForInnerClass$catena_0() throws Exception\n    {\n        String json = MAPPER.writeValueAsString(new Outer());\n        try {\n            MAPPER.readValue(json, Outer.class);\n            fail(\"Should not pass\");                                                                        /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (JsonMappingException e) {\n            JsonMappingException.Reference reference = e.getPath().get(0);\n            try{ assertEquals(getClass().getName()+\"$Outer[\\\"inner\\\"]\",\n                    reference.toString());                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }"
        ]
    },
    "com.fasterxml.jackson.databind.deser.exc.TestExceptionHandlingWithJsonCreatorDeserialization::testShouldThrowJsonMappingExceptionWithPathReference": {
        "begin_line_no": 52,
        "end_line_no": 67,
        "file_path": "src/test/java/com/fasterxml/jackson/databind/deser/exc/TestExceptionHandlingWithJsonCreatorDeserialization.java",
        "to": [
            "    public void testShouldThrowJsonMappingExceptionWithPathReference$catena_1() throws IOException {\n        // given\n        ObjectMapper mapper = new ObjectMapper();\n        String input = \"{\\\"bar\\\":{\\\"baz\\\":{qux:\\\"quxValue\\\"))}\";\n        final String THIS = getClass().getName();\n\n        // when\n        try {\n            mapper.readValue(input, Foo.class);\n            try{ fail(\"Upsss! Exception has not been thrown.\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (JsonMappingException ex) {\n            // then\n            assertEquals(THIS+\"$Foo[\\\"bar\\\"]->\"+THIS+\"$Bar[\\\"baz\\\"]\",\n                    ex.getPathReference());                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n    }",
            "    public void testShouldThrowJsonMappingExceptionWithPathReference$catena_0() throws IOException {\n        // given\n        ObjectMapper mapper = new ObjectMapper();\n        String input = \"{\\\"bar\\\":{\\\"baz\\\":{qux:\\\"quxValue\\\"))}\";\n        final String THIS = getClass().getName();\n\n        // when\n        try {\n            mapper.readValue(input, Foo.class);\n            fail(\"Upsss! Exception has not been thrown.\");                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (JsonMappingException ex) {\n            // then\n            try{ assertEquals(THIS+\"$Foo[\\\"bar\\\"]->\"+THIS+\"$Bar[\\\"baz\\\"]\",\n                    ex.getPathReference());                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }"
        ]
    },
    "com.fasterxml.jackson.databind.deser.exc.TestExceptionHandlingWithDefaultDeserialization::testShouldThrowJsonMappingExceptionWithPathReference": {
        "begin_line_no": 41,
        "end_line_no": 56,
        "file_path": "src/test/java/com/fasterxml/jackson/databind/deser/exc/TestExceptionHandlingWithDefaultDeserialization.java",
        "to": [
            "    public void testShouldThrowJsonMappingExceptionWithPathReference$catena_1() throws IOException {\n        // given\n        ObjectMapper mapper = new ObjectMapper();\n        String input = \"{\\\"bar\\\":{\\\"baz\\\":{qux:\\\"quxValue\\\"))}\";\n        final String THIS = getClass().getName();\n\n        // when\n        try {\n            mapper.readValue(input, Foo.class);\n            try{ fail(\"Upsss! Exception has not been thrown.\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (JsonMappingException ex) {\n            // then\n            assertEquals(THIS+\"$Foo[\\\"bar\\\"]->\"+THIS+\"$Bar[\\\"baz\\\"]\",\n                    ex.getPathReference());                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n    }",
            "    public void testShouldThrowJsonMappingExceptionWithPathReference$catena_0() throws IOException {\n        // given\n        ObjectMapper mapper = new ObjectMapper();\n        String input = \"{\\\"bar\\\":{\\\"baz\\\":{qux:\\\"quxValue\\\"))}\";\n        final String THIS = getClass().getName();\n\n        // when\n        try {\n            mapper.readValue(input, Foo.class);\n            fail(\"Upsss! Exception has not been thrown.\");                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (JsonMappingException ex) {\n            // then\n            try{ assertEquals(THIS+\"$Foo[\\\"bar\\\"]->\"+THIS+\"$Bar[\\\"baz\\\"]\",\n                    ex.getPathReference());                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }"
        ]
    }
}