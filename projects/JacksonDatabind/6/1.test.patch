{
    "com.fasterxml.jackson.databind.deser.TestDateDeserialization::testISO8601MissingSeconds": {
        "begin_line_no": 186,
        "end_line_no": 201,
        "file_path": "src/test/java/com/fasterxml/jackson/databind/deser/TestDateDeserialization.java",
        "to": [
            "    public void testISO8601MissingSeconds$catena_0() throws Exception\n    {\n        String inputStr;\n        Date inputDate;\n        Calendar c = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"));\n    \n        inputStr = \"1997-07-16T19:20+01:00\";\n        inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class);\n        c.setTime(inputDate);\n        assertEquals(1997, c.get(Calendar.YEAR));                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(Calendar.JULY, c.get(Calendar.MONTH));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(16, c.get(Calendar.DAY_OF_MONTH));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(19 - 1, c.get(Calendar.HOUR_OF_DAY));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, c.get(Calendar.SECOND));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, c.get(Calendar.MILLISECOND));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n}",
            "    public void testISO8601MissingSeconds$catena_5() throws Exception\n    {\n        String inputStr;\n        Date inputDate;\n        Calendar c = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"));\n    \n        inputStr = \"1997-07-16T19:20+01:00\";\n        inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class);\n        c.setTime(inputDate);\n        try{ assertEquals(1997, c.get(Calendar.YEAR));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Calendar.JULY, c.get(Calendar.MONTH));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(16, c.get(Calendar.DAY_OF_MONTH));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(19 - 1, c.get(Calendar.HOUR_OF_DAY));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, c.get(Calendar.SECOND));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(0, c.get(Calendar.MILLISECOND));                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n}",
            "    public void testISO8601MissingSeconds$catena_4() throws Exception\n    {\n        String inputStr;\n        Date inputDate;\n        Calendar c = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"));\n    \n        inputStr = \"1997-07-16T19:20+01:00\";\n        inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class);\n        c.setTime(inputDate);\n        try{ assertEquals(1997, c.get(Calendar.YEAR));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Calendar.JULY, c.get(Calendar.MONTH));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(16, c.get(Calendar.DAY_OF_MONTH));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(19 - 1, c.get(Calendar.HOUR_OF_DAY));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(0, c.get(Calendar.SECOND));                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(0, c.get(Calendar.MILLISECOND));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n}",
            "    public void testISO8601MissingSeconds$catena_3() throws Exception\n    {\n        String inputStr;\n        Date inputDate;\n        Calendar c = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"));\n    \n        inputStr = \"1997-07-16T19:20+01:00\";\n        inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class);\n        c.setTime(inputDate);\n        try{ assertEquals(1997, c.get(Calendar.YEAR));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Calendar.JULY, c.get(Calendar.MONTH));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(16, c.get(Calendar.DAY_OF_MONTH));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(19 - 1, c.get(Calendar.HOUR_OF_DAY));                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(0, c.get(Calendar.SECOND));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, c.get(Calendar.MILLISECOND));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n}",
            "    public void testISO8601MissingSeconds$catena_2() throws Exception\n    {\n        String inputStr;\n        Date inputDate;\n        Calendar c = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"));\n    \n        inputStr = \"1997-07-16T19:20+01:00\";\n        inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class);\n        c.setTime(inputDate);\n        try{ assertEquals(1997, c.get(Calendar.YEAR));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Calendar.JULY, c.get(Calendar.MONTH));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(16, c.get(Calendar.DAY_OF_MONTH));                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(19 - 1, c.get(Calendar.HOUR_OF_DAY));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, c.get(Calendar.SECOND));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, c.get(Calendar.MILLISECOND));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n}",
            "    public void testISO8601MissingSeconds$catena_1() throws Exception\n    {\n        String inputStr;\n        Date inputDate;\n        Calendar c = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"));\n    \n        inputStr = \"1997-07-16T19:20+01:00\";\n        inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class);\n        c.setTime(inputDate);\n        try{ assertEquals(1997, c.get(Calendar.YEAR));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(Calendar.JULY, c.get(Calendar.MONTH));                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(16, c.get(Calendar.DAY_OF_MONTH));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(19 - 1, c.get(Calendar.HOUR_OF_DAY));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, c.get(Calendar.SECOND));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, c.get(Calendar.MILLISECOND));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n}"
        ]
    },
    "com.fasterxml.jackson.databind.deser.TestDateDeserialization::testISO8601PartialMilliseconds": {
        "begin_line_no": 149,
        "end_line_no": 184,
        "file_path": "src/test/java/com/fasterxml/jackson/databind/deser/TestDateDeserialization.java",
        "to": [
            "    public void testISO8601PartialMilliseconds$catena_11() throws Exception\n    {\n        String inputStr;\n        Date inputDate;\n        Calendar c = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"));\n        \n        inputStr = \"2014-10-03T18:00:00.6-05:00\";\n        inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class);\n        c.setTime(inputDate);\n        try{ assertEquals(2014, c.get(Calendar.YEAR));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Calendar.OCTOBER, c.get(Calendar.MONTH));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, c.get(Calendar.DAY_OF_MONTH));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(600, c.get(Calendar.MILLISECOND));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        inputStr = \"2014-10-03T18:00:00.61-05:00\";\n        inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class);\n        c.setTime(inputDate);\n        try{ assertEquals(2014, c.get(Calendar.YEAR));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Calendar.OCTOBER, c.get(Calendar.MONTH));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, c.get(Calendar.DAY_OF_MONTH));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(18 + 5, c.get(Calendar.HOUR_OF_DAY));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, c.get(Calendar.MINUTE));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, c.get(Calendar.SECOND));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(610, c.get(Calendar.MILLISECOND));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        inputStr = \"1997-07-16T19:20:30.45+01:00\";\n        inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class);\n        c.setTime(inputDate);\n        assertEquals(1997, c.get(Calendar.YEAR));                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(Calendar.JULY, c.get(Calendar.MONTH));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(16, c.get(Calendar.DAY_OF_MONTH));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(19 - 1, c.get(Calendar.HOUR_OF_DAY));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(20, c.get(Calendar.MINUTE));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(30, c.get(Calendar.SECOND));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(450, c.get(Calendar.MILLISECOND));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testISO8601PartialMilliseconds$catena_6() throws Exception\n    {\n        String inputStr;\n        Date inputDate;\n        Calendar c = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"));\n        \n        inputStr = \"2014-10-03T18:00:00.6-05:00\";\n        inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class);\n        c.setTime(inputDate);\n        try{ assertEquals(2014, c.get(Calendar.YEAR));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Calendar.OCTOBER, c.get(Calendar.MONTH));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, c.get(Calendar.DAY_OF_MONTH));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(600, c.get(Calendar.MILLISECOND));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        inputStr = \"2014-10-03T18:00:00.61-05:00\";\n        inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class);\n        c.setTime(inputDate);\n        try{ assertEquals(2014, c.get(Calendar.YEAR));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Calendar.OCTOBER, c.get(Calendar.MONTH));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(3, c.get(Calendar.DAY_OF_MONTH));                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(18 + 5, c.get(Calendar.HOUR_OF_DAY));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, c.get(Calendar.MINUTE));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, c.get(Calendar.SECOND));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(610, c.get(Calendar.MILLISECOND));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        inputStr = \"1997-07-16T19:20:30.45+01:00\";\n        inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class);\n        c.setTime(inputDate);\n        try{ assertEquals(1997, c.get(Calendar.YEAR));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Calendar.JULY, c.get(Calendar.MONTH));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(16, c.get(Calendar.DAY_OF_MONTH));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(19 - 1, c.get(Calendar.HOUR_OF_DAY));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(20, c.get(Calendar.MINUTE));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(30, c.get(Calendar.SECOND));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(450, c.get(Calendar.MILLISECOND));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testISO8601PartialMilliseconds$catena_10() throws Exception\n    {\n        String inputStr;\n        Date inputDate;\n        Calendar c = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"));\n        \n        inputStr = \"2014-10-03T18:00:00.6-05:00\";\n        inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class);\n        c.setTime(inputDate);\n        try{ assertEquals(2014, c.get(Calendar.YEAR));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Calendar.OCTOBER, c.get(Calendar.MONTH));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, c.get(Calendar.DAY_OF_MONTH));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(600, c.get(Calendar.MILLISECOND));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        inputStr = \"2014-10-03T18:00:00.61-05:00\";\n        inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class);\n        c.setTime(inputDate);\n        try{ assertEquals(2014, c.get(Calendar.YEAR));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Calendar.OCTOBER, c.get(Calendar.MONTH));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, c.get(Calendar.DAY_OF_MONTH));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(18 + 5, c.get(Calendar.HOUR_OF_DAY));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, c.get(Calendar.MINUTE));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, c.get(Calendar.SECOND));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(610, c.get(Calendar.MILLISECOND));                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n\n        inputStr = \"1997-07-16T19:20:30.45+01:00\";\n        inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class);\n        c.setTime(inputDate);\n        try{ assertEquals(1997, c.get(Calendar.YEAR));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Calendar.JULY, c.get(Calendar.MONTH));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(16, c.get(Calendar.DAY_OF_MONTH));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(19 - 1, c.get(Calendar.HOUR_OF_DAY));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(20, c.get(Calendar.MINUTE));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(30, c.get(Calendar.SECOND));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(450, c.get(Calendar.MILLISECOND));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testISO8601PartialMilliseconds$catena_17() throws Exception\n    {\n        String inputStr;\n        Date inputDate;\n        Calendar c = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"));\n        \n        inputStr = \"2014-10-03T18:00:00.6-05:00\";\n        inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class);\n        c.setTime(inputDate);\n        try{ assertEquals(2014, c.get(Calendar.YEAR));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Calendar.OCTOBER, c.get(Calendar.MONTH));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, c.get(Calendar.DAY_OF_MONTH));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(600, c.get(Calendar.MILLISECOND));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        inputStr = \"2014-10-03T18:00:00.61-05:00\";\n        inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class);\n        c.setTime(inputDate);\n        try{ assertEquals(2014, c.get(Calendar.YEAR));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Calendar.OCTOBER, c.get(Calendar.MONTH));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, c.get(Calendar.DAY_OF_MONTH));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(18 + 5, c.get(Calendar.HOUR_OF_DAY));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, c.get(Calendar.MINUTE));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, c.get(Calendar.SECOND));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(610, c.get(Calendar.MILLISECOND));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        inputStr = \"1997-07-16T19:20:30.45+01:00\";\n        inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class);\n        c.setTime(inputDate);\n        try{ assertEquals(1997, c.get(Calendar.YEAR));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Calendar.JULY, c.get(Calendar.MONTH));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(16, c.get(Calendar.DAY_OF_MONTH));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(19 - 1, c.get(Calendar.HOUR_OF_DAY));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(20, c.get(Calendar.MINUTE));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(30, c.get(Calendar.SECOND));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(450, c.get(Calendar.MILLISECOND));                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    }",
            "    public void testISO8601PartialMilliseconds$catena_9() throws Exception\n    {\n        String inputStr;\n        Date inputDate;\n        Calendar c = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"));\n        \n        inputStr = \"2014-10-03T18:00:00.6-05:00\";\n        inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class);\n        c.setTime(inputDate);\n        try{ assertEquals(2014, c.get(Calendar.YEAR));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Calendar.OCTOBER, c.get(Calendar.MONTH));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, c.get(Calendar.DAY_OF_MONTH));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(600, c.get(Calendar.MILLISECOND));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        inputStr = \"2014-10-03T18:00:00.61-05:00\";\n        inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class);\n        c.setTime(inputDate);\n        try{ assertEquals(2014, c.get(Calendar.YEAR));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Calendar.OCTOBER, c.get(Calendar.MONTH));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, c.get(Calendar.DAY_OF_MONTH));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(18 + 5, c.get(Calendar.HOUR_OF_DAY));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, c.get(Calendar.MINUTE));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(0, c.get(Calendar.SECOND));                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(610, c.get(Calendar.MILLISECOND));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        inputStr = \"1997-07-16T19:20:30.45+01:00\";\n        inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class);\n        c.setTime(inputDate);\n        try{ assertEquals(1997, c.get(Calendar.YEAR));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Calendar.JULY, c.get(Calendar.MONTH));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(16, c.get(Calendar.DAY_OF_MONTH));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(19 - 1, c.get(Calendar.HOUR_OF_DAY));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(20, c.get(Calendar.MINUTE));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(30, c.get(Calendar.SECOND));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(450, c.get(Calendar.MILLISECOND));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testISO8601PartialMilliseconds$catena_8() throws Exception\n    {\n        String inputStr;\n        Date inputDate;\n        Calendar c = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"));\n        \n        inputStr = \"2014-10-03T18:00:00.6-05:00\";\n        inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class);\n        c.setTime(inputDate);\n        try{ assertEquals(2014, c.get(Calendar.YEAR));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Calendar.OCTOBER, c.get(Calendar.MONTH));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, c.get(Calendar.DAY_OF_MONTH));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(600, c.get(Calendar.MILLISECOND));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        inputStr = \"2014-10-03T18:00:00.61-05:00\";\n        inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class);\n        c.setTime(inputDate);\n        try{ assertEquals(2014, c.get(Calendar.YEAR));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Calendar.OCTOBER, c.get(Calendar.MONTH));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, c.get(Calendar.DAY_OF_MONTH));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(18 + 5, c.get(Calendar.HOUR_OF_DAY));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(0, c.get(Calendar.MINUTE));                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(0, c.get(Calendar.SECOND));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(610, c.get(Calendar.MILLISECOND));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        inputStr = \"1997-07-16T19:20:30.45+01:00\";\n        inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class);\n        c.setTime(inputDate);\n        try{ assertEquals(1997, c.get(Calendar.YEAR));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Calendar.JULY, c.get(Calendar.MONTH));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(16, c.get(Calendar.DAY_OF_MONTH));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(19 - 1, c.get(Calendar.HOUR_OF_DAY));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(20, c.get(Calendar.MINUTE));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(30, c.get(Calendar.SECOND));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(450, c.get(Calendar.MILLISECOND));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testISO8601PartialMilliseconds$catena_4() throws Exception\n    {\n        String inputStr;\n        Date inputDate;\n        Calendar c = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"));\n        \n        inputStr = \"2014-10-03T18:00:00.6-05:00\";\n        inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class);\n        c.setTime(inputDate);\n        try{ assertEquals(2014, c.get(Calendar.YEAR));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Calendar.OCTOBER, c.get(Calendar.MONTH));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, c.get(Calendar.DAY_OF_MONTH));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(600, c.get(Calendar.MILLISECOND));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        inputStr = \"2014-10-03T18:00:00.61-05:00\";\n        inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class);\n        c.setTime(inputDate);\n        assertEquals(2014, c.get(Calendar.YEAR));                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(Calendar.OCTOBER, c.get(Calendar.MONTH));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, c.get(Calendar.DAY_OF_MONTH));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(18 + 5, c.get(Calendar.HOUR_OF_DAY));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, c.get(Calendar.MINUTE));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, c.get(Calendar.SECOND));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(610, c.get(Calendar.MILLISECOND));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        inputStr = \"1997-07-16T19:20:30.45+01:00\";\n        inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class);\n        c.setTime(inputDate);\n        try{ assertEquals(1997, c.get(Calendar.YEAR));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Calendar.JULY, c.get(Calendar.MONTH));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(16, c.get(Calendar.DAY_OF_MONTH));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(19 - 1, c.get(Calendar.HOUR_OF_DAY));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(20, c.get(Calendar.MINUTE));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(30, c.get(Calendar.SECOND));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(450, c.get(Calendar.MILLISECOND));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testISO8601PartialMilliseconds$catena_13() throws Exception\n    {\n        String inputStr;\n        Date inputDate;\n        Calendar c = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"));\n        \n        inputStr = \"2014-10-03T18:00:00.6-05:00\";\n        inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class);\n        c.setTime(inputDate);\n        try{ assertEquals(2014, c.get(Calendar.YEAR));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Calendar.OCTOBER, c.get(Calendar.MONTH));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, c.get(Calendar.DAY_OF_MONTH));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(600, c.get(Calendar.MILLISECOND));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        inputStr = \"2014-10-03T18:00:00.61-05:00\";\n        inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class);\n        c.setTime(inputDate);\n        try{ assertEquals(2014, c.get(Calendar.YEAR));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Calendar.OCTOBER, c.get(Calendar.MONTH));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, c.get(Calendar.DAY_OF_MONTH));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(18 + 5, c.get(Calendar.HOUR_OF_DAY));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, c.get(Calendar.MINUTE));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, c.get(Calendar.SECOND));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(610, c.get(Calendar.MILLISECOND));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        inputStr = \"1997-07-16T19:20:30.45+01:00\";\n        inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class);\n        c.setTime(inputDate);\n        try{ assertEquals(1997, c.get(Calendar.YEAR));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Calendar.JULY, c.get(Calendar.MONTH));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(16, c.get(Calendar.DAY_OF_MONTH));                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(19 - 1, c.get(Calendar.HOUR_OF_DAY));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(20, c.get(Calendar.MINUTE));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(30, c.get(Calendar.SECOND));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(450, c.get(Calendar.MILLISECOND));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testISO8601PartialMilliseconds$catena_1() throws Exception\n    {\n        String inputStr;\n        Date inputDate;\n        Calendar c = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"));\n        \n        inputStr = \"2014-10-03T18:00:00.6-05:00\";\n        inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class);\n        c.setTime(inputDate);\n        try{ assertEquals(2014, c.get(Calendar.YEAR));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(Calendar.OCTOBER, c.get(Calendar.MONTH));                                              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(3, c.get(Calendar.DAY_OF_MONTH));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(600, c.get(Calendar.MILLISECOND));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        inputStr = \"2014-10-03T18:00:00.61-05:00\";\n        inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class);\n        c.setTime(inputDate);\n        try{ assertEquals(2014, c.get(Calendar.YEAR));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Calendar.OCTOBER, c.get(Calendar.MONTH));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, c.get(Calendar.DAY_OF_MONTH));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(18 + 5, c.get(Calendar.HOUR_OF_DAY));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, c.get(Calendar.MINUTE));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, c.get(Calendar.SECOND));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(610, c.get(Calendar.MILLISECOND));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        inputStr = \"1997-07-16T19:20:30.45+01:00\";\n        inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class);\n        c.setTime(inputDate);\n        try{ assertEquals(1997, c.get(Calendar.YEAR));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Calendar.JULY, c.get(Calendar.MONTH));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(16, c.get(Calendar.DAY_OF_MONTH));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(19 - 1, c.get(Calendar.HOUR_OF_DAY));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(20, c.get(Calendar.MINUTE));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(30, c.get(Calendar.SECOND));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(450, c.get(Calendar.MILLISECOND));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testISO8601PartialMilliseconds$catena_14() throws Exception\n    {\n        String inputStr;\n        Date inputDate;\n        Calendar c = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"));\n        \n        inputStr = \"2014-10-03T18:00:00.6-05:00\";\n        inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class);\n        c.setTime(inputDate);\n        try{ assertEquals(2014, c.get(Calendar.YEAR));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Calendar.OCTOBER, c.get(Calendar.MONTH));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, c.get(Calendar.DAY_OF_MONTH));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(600, c.get(Calendar.MILLISECOND));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        inputStr = \"2014-10-03T18:00:00.61-05:00\";\n        inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class);\n        c.setTime(inputDate);\n        try{ assertEquals(2014, c.get(Calendar.YEAR));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Calendar.OCTOBER, c.get(Calendar.MONTH));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, c.get(Calendar.DAY_OF_MONTH));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(18 + 5, c.get(Calendar.HOUR_OF_DAY));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, c.get(Calendar.MINUTE));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, c.get(Calendar.SECOND));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(610, c.get(Calendar.MILLISECOND));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        inputStr = \"1997-07-16T19:20:30.45+01:00\";\n        inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class);\n        c.setTime(inputDate);\n        try{ assertEquals(1997, c.get(Calendar.YEAR));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Calendar.JULY, c.get(Calendar.MONTH));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(16, c.get(Calendar.DAY_OF_MONTH));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(19 - 1, c.get(Calendar.HOUR_OF_DAY));                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(20, c.get(Calendar.MINUTE));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(30, c.get(Calendar.SECOND));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(450, c.get(Calendar.MILLISECOND));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testISO8601PartialMilliseconds$catena_12() throws Exception\n    {\n        String inputStr;\n        Date inputDate;\n        Calendar c = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"));\n        \n        inputStr = \"2014-10-03T18:00:00.6-05:00\";\n        inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class);\n        c.setTime(inputDate);\n        try{ assertEquals(2014, c.get(Calendar.YEAR));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Calendar.OCTOBER, c.get(Calendar.MONTH));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, c.get(Calendar.DAY_OF_MONTH));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(600, c.get(Calendar.MILLISECOND));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        inputStr = \"2014-10-03T18:00:00.61-05:00\";\n        inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class);\n        c.setTime(inputDate);\n        try{ assertEquals(2014, c.get(Calendar.YEAR));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Calendar.OCTOBER, c.get(Calendar.MONTH));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, c.get(Calendar.DAY_OF_MONTH));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(18 + 5, c.get(Calendar.HOUR_OF_DAY));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, c.get(Calendar.MINUTE));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, c.get(Calendar.SECOND));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(610, c.get(Calendar.MILLISECOND));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        inputStr = \"1997-07-16T19:20:30.45+01:00\";\n        inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class);\n        c.setTime(inputDate);\n        try{ assertEquals(1997, c.get(Calendar.YEAR));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(Calendar.JULY, c.get(Calendar.MONTH));                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(16, c.get(Calendar.DAY_OF_MONTH));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(19 - 1, c.get(Calendar.HOUR_OF_DAY));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(20, c.get(Calendar.MINUTE));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(30, c.get(Calendar.SECOND));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(450, c.get(Calendar.MILLISECOND));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testISO8601PartialMilliseconds$catena_2() throws Exception\n    {\n        String inputStr;\n        Date inputDate;\n        Calendar c = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"));\n        \n        inputStr = \"2014-10-03T18:00:00.6-05:00\";\n        inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class);\n        c.setTime(inputDate);\n        try{ assertEquals(2014, c.get(Calendar.YEAR));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Calendar.OCTOBER, c.get(Calendar.MONTH));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(3, c.get(Calendar.DAY_OF_MONTH));                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(600, c.get(Calendar.MILLISECOND));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        inputStr = \"2014-10-03T18:00:00.61-05:00\";\n        inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class);\n        c.setTime(inputDate);\n        try{ assertEquals(2014, c.get(Calendar.YEAR));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Calendar.OCTOBER, c.get(Calendar.MONTH));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, c.get(Calendar.DAY_OF_MONTH));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(18 + 5, c.get(Calendar.HOUR_OF_DAY));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, c.get(Calendar.MINUTE));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, c.get(Calendar.SECOND));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(610, c.get(Calendar.MILLISECOND));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        inputStr = \"1997-07-16T19:20:30.45+01:00\";\n        inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class);\n        c.setTime(inputDate);\n        try{ assertEquals(1997, c.get(Calendar.YEAR));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Calendar.JULY, c.get(Calendar.MONTH));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(16, c.get(Calendar.DAY_OF_MONTH));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(19 - 1, c.get(Calendar.HOUR_OF_DAY));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(20, c.get(Calendar.MINUTE));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(30, c.get(Calendar.SECOND));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(450, c.get(Calendar.MILLISECOND));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testISO8601PartialMilliseconds$catena_0() throws Exception\n    {\n        String inputStr;\n        Date inputDate;\n        Calendar c = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"));\n        \n        inputStr = \"2014-10-03T18:00:00.6-05:00\";\n        inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class);\n        c.setTime(inputDate);\n        assertEquals(2014, c.get(Calendar.YEAR));                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(Calendar.OCTOBER, c.get(Calendar.MONTH));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, c.get(Calendar.DAY_OF_MONTH));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(600, c.get(Calendar.MILLISECOND));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        inputStr = \"2014-10-03T18:00:00.61-05:00\";\n        inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class);\n        c.setTime(inputDate);\n        try{ assertEquals(2014, c.get(Calendar.YEAR));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Calendar.OCTOBER, c.get(Calendar.MONTH));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, c.get(Calendar.DAY_OF_MONTH));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(18 + 5, c.get(Calendar.HOUR_OF_DAY));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, c.get(Calendar.MINUTE));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, c.get(Calendar.SECOND));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(610, c.get(Calendar.MILLISECOND));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        inputStr = \"1997-07-16T19:20:30.45+01:00\";\n        inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class);\n        c.setTime(inputDate);\n        try{ assertEquals(1997, c.get(Calendar.YEAR));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Calendar.JULY, c.get(Calendar.MONTH));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(16, c.get(Calendar.DAY_OF_MONTH));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(19 - 1, c.get(Calendar.HOUR_OF_DAY));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(20, c.get(Calendar.MINUTE));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(30, c.get(Calendar.SECOND));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(450, c.get(Calendar.MILLISECOND));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testISO8601PartialMilliseconds$catena_7() throws Exception\n    {\n        String inputStr;\n        Date inputDate;\n        Calendar c = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"));\n        \n        inputStr = \"2014-10-03T18:00:00.6-05:00\";\n        inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class);\n        c.setTime(inputDate);\n        try{ assertEquals(2014, c.get(Calendar.YEAR));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Calendar.OCTOBER, c.get(Calendar.MONTH));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, c.get(Calendar.DAY_OF_MONTH));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(600, c.get(Calendar.MILLISECOND));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        inputStr = \"2014-10-03T18:00:00.61-05:00\";\n        inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class);\n        c.setTime(inputDate);\n        try{ assertEquals(2014, c.get(Calendar.YEAR));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Calendar.OCTOBER, c.get(Calendar.MONTH));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, c.get(Calendar.DAY_OF_MONTH));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(18 + 5, c.get(Calendar.HOUR_OF_DAY));                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(0, c.get(Calendar.MINUTE));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, c.get(Calendar.SECOND));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(610, c.get(Calendar.MILLISECOND));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        inputStr = \"1997-07-16T19:20:30.45+01:00\";\n        inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class);\n        c.setTime(inputDate);\n        try{ assertEquals(1997, c.get(Calendar.YEAR));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Calendar.JULY, c.get(Calendar.MONTH));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(16, c.get(Calendar.DAY_OF_MONTH));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(19 - 1, c.get(Calendar.HOUR_OF_DAY));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(20, c.get(Calendar.MINUTE));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(30, c.get(Calendar.SECOND));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(450, c.get(Calendar.MILLISECOND));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testISO8601PartialMilliseconds$catena_5() throws Exception\n    {\n        String inputStr;\n        Date inputDate;\n        Calendar c = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"));\n        \n        inputStr = \"2014-10-03T18:00:00.6-05:00\";\n        inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class);\n        c.setTime(inputDate);\n        try{ assertEquals(2014, c.get(Calendar.YEAR));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Calendar.OCTOBER, c.get(Calendar.MONTH));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, c.get(Calendar.DAY_OF_MONTH));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(600, c.get(Calendar.MILLISECOND));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        inputStr = \"2014-10-03T18:00:00.61-05:00\";\n        inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class);\n        c.setTime(inputDate);\n        try{ assertEquals(2014, c.get(Calendar.YEAR));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(Calendar.OCTOBER, c.get(Calendar.MONTH));                                              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(3, c.get(Calendar.DAY_OF_MONTH));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(18 + 5, c.get(Calendar.HOUR_OF_DAY));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, c.get(Calendar.MINUTE));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, c.get(Calendar.SECOND));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(610, c.get(Calendar.MILLISECOND));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        inputStr = \"1997-07-16T19:20:30.45+01:00\";\n        inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class);\n        c.setTime(inputDate);\n        try{ assertEquals(1997, c.get(Calendar.YEAR));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Calendar.JULY, c.get(Calendar.MONTH));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(16, c.get(Calendar.DAY_OF_MONTH));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(19 - 1, c.get(Calendar.HOUR_OF_DAY));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(20, c.get(Calendar.MINUTE));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(30, c.get(Calendar.SECOND));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(450, c.get(Calendar.MILLISECOND));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testISO8601PartialMilliseconds$catena_16() throws Exception\n    {\n        String inputStr;\n        Date inputDate;\n        Calendar c = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"));\n        \n        inputStr = \"2014-10-03T18:00:00.6-05:00\";\n        inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class);\n        c.setTime(inputDate);\n        try{ assertEquals(2014, c.get(Calendar.YEAR));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Calendar.OCTOBER, c.get(Calendar.MONTH));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, c.get(Calendar.DAY_OF_MONTH));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(600, c.get(Calendar.MILLISECOND));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        inputStr = \"2014-10-03T18:00:00.61-05:00\";\n        inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class);\n        c.setTime(inputDate);\n        try{ assertEquals(2014, c.get(Calendar.YEAR));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Calendar.OCTOBER, c.get(Calendar.MONTH));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, c.get(Calendar.DAY_OF_MONTH));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(18 + 5, c.get(Calendar.HOUR_OF_DAY));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, c.get(Calendar.MINUTE));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, c.get(Calendar.SECOND));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(610, c.get(Calendar.MILLISECOND));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        inputStr = \"1997-07-16T19:20:30.45+01:00\";\n        inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class);\n        c.setTime(inputDate);\n        try{ assertEquals(1997, c.get(Calendar.YEAR));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Calendar.JULY, c.get(Calendar.MONTH));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(16, c.get(Calendar.DAY_OF_MONTH));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(19 - 1, c.get(Calendar.HOUR_OF_DAY));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(20, c.get(Calendar.MINUTE));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(30, c.get(Calendar.SECOND));                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(450, c.get(Calendar.MILLISECOND));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testISO8601PartialMilliseconds$catena_15() throws Exception\n    {\n        String inputStr;\n        Date inputDate;\n        Calendar c = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"));\n        \n        inputStr = \"2014-10-03T18:00:00.6-05:00\";\n        inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class);\n        c.setTime(inputDate);\n        try{ assertEquals(2014, c.get(Calendar.YEAR));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Calendar.OCTOBER, c.get(Calendar.MONTH));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, c.get(Calendar.DAY_OF_MONTH));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(600, c.get(Calendar.MILLISECOND));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        inputStr = \"2014-10-03T18:00:00.61-05:00\";\n        inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class);\n        c.setTime(inputDate);\n        try{ assertEquals(2014, c.get(Calendar.YEAR));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Calendar.OCTOBER, c.get(Calendar.MONTH));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, c.get(Calendar.DAY_OF_MONTH));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(18 + 5, c.get(Calendar.HOUR_OF_DAY));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, c.get(Calendar.MINUTE));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, c.get(Calendar.SECOND));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(610, c.get(Calendar.MILLISECOND));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        inputStr = \"1997-07-16T19:20:30.45+01:00\";\n        inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class);\n        c.setTime(inputDate);\n        try{ assertEquals(1997, c.get(Calendar.YEAR));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Calendar.JULY, c.get(Calendar.MONTH));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(16, c.get(Calendar.DAY_OF_MONTH));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(19 - 1, c.get(Calendar.HOUR_OF_DAY));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(20, c.get(Calendar.MINUTE));                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(30, c.get(Calendar.SECOND));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(450, c.get(Calendar.MILLISECOND));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testISO8601PartialMilliseconds$catena_3() throws Exception\n    {\n        String inputStr;\n        Date inputDate;\n        Calendar c = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"));\n        \n        inputStr = \"2014-10-03T18:00:00.6-05:00\";\n        inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class);\n        c.setTime(inputDate);\n        try{ assertEquals(2014, c.get(Calendar.YEAR));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Calendar.OCTOBER, c.get(Calendar.MONTH));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, c.get(Calendar.DAY_OF_MONTH));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(600, c.get(Calendar.MILLISECOND));                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n\n        inputStr = \"2014-10-03T18:00:00.61-05:00\";\n        inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class);\n        c.setTime(inputDate);\n        try{ assertEquals(2014, c.get(Calendar.YEAR));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Calendar.OCTOBER, c.get(Calendar.MONTH));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, c.get(Calendar.DAY_OF_MONTH));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(18 + 5, c.get(Calendar.HOUR_OF_DAY));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, c.get(Calendar.MINUTE));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, c.get(Calendar.SECOND));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(610, c.get(Calendar.MILLISECOND));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        inputStr = \"1997-07-16T19:20:30.45+01:00\";\n        inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class);\n        c.setTime(inputDate);\n        try{ assertEquals(1997, c.get(Calendar.YEAR));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Calendar.JULY, c.get(Calendar.MONTH));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(16, c.get(Calendar.DAY_OF_MONTH));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(19 - 1, c.get(Calendar.HOUR_OF_DAY));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(20, c.get(Calendar.MINUTE));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(30, c.get(Calendar.SECOND));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(450, c.get(Calendar.MILLISECOND));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    }
}