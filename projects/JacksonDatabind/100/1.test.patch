{
    "com.fasterxml.jackson.databind.node.TestConversions::testBase64Text": {
        "begin_line_no": 155,
        "end_line_no": 196,
        "file_path": "src/test/java/com/fasterxml/jackson/databind/node/TestConversions.java",
        "to": [
            "    public void testBase64Text$catena_4() throws Exception\n    {\n        // let's actually iterate over sets of encoding modes, lengths\n        \n        final int[] LENS = { 1, 2, 3, 4, 7, 9, 32, 33, 34, 35 };\n        final Base64Variant[] VARIANTS = {\n                Base64Variants.MIME,\n                Base64Variants.MIME_NO_LINEFEEDS,\n                Base64Variants.MODIFIED_FOR_URL,\n                Base64Variants.PEM\n        };\n\n        for (int len : LENS) {\n            byte[] input = new byte[len];\n            for (int i = 0; i < input.length; ++i) {\n                input[i] = (byte) i;\n            }\n            for (Base64Variant variant : VARIANTS) {\n                TextNode n = new TextNode(variant.encode(input));\n                byte[] data = null;\n                try {\n                    data = n.getBinaryValue(variant);\n                } catch (Exception e) {\n                    try{ fail(\"Failed (variant \"+variant+\", data length \"+len+\"): \"+e.getMessage());        }catch(Throwable __SHOULD_BE_IGNORED){}\n                }\n                try{ assertNotNull(data);                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertArrayEquals(data, input);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n                // 15-Aug-2018, tatu: [databind#2096] requires another test\n                JsonParser p = new TreeTraversingParser(n);\n                try{ assertEquals(JsonToken.VALUE_STRING, p.nextToken());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n                try {\n                    data = p.getBinaryValue(variant);\n                } catch (Exception e) {\n                    fail(\"Failed (variant \"+variant+\", data length \"+len+\"): \"+e.getMessage());             /***** ORIGINAL ASSERTION IS HERE *****/\n                }\n                try{ assertNotNull(data);                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertArrayEquals(data, input);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n                p.close();\n            }\n        }\n    }",
            "    public void testBase64Text$catena_0() throws Exception\n    {\n        // let's actually iterate over sets of encoding modes, lengths\n        \n        final int[] LENS = { 1, 2, 3, 4, 7, 9, 32, 33, 34, 35 };\n        final Base64Variant[] VARIANTS = {\n                Base64Variants.MIME,\n                Base64Variants.MIME_NO_LINEFEEDS,\n                Base64Variants.MODIFIED_FOR_URL,\n                Base64Variants.PEM\n        };\n\n        for (int len : LENS) {\n            byte[] input = new byte[len];\n            for (int i = 0; i < input.length; ++i) {\n                input[i] = (byte) i;\n            }\n            for (Base64Variant variant : VARIANTS) {\n                TextNode n = new TextNode(variant.encode(input));\n                byte[] data = null;\n                try {\n                    data = n.getBinaryValue(variant);\n                } catch (Exception e) {\n                    fail(\"Failed (variant \"+variant+\", data length \"+len+\"): \"+e.getMessage());             /***** ORIGINAL ASSERTION IS HERE *****/\n                }\n                try{ assertNotNull(data);                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertArrayEquals(data, input);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n                // 15-Aug-2018, tatu: [databind#2096] requires another test\n                JsonParser p = new TreeTraversingParser(n);\n                try{ assertEquals(JsonToken.VALUE_STRING, p.nextToken());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n                try {\n                    data = p.getBinaryValue(variant);\n                } catch (Exception e) {\n                    try{ fail(\"Failed (variant \"+variant+\", data length \"+len+\"): \"+e.getMessage());        }catch(Throwable __SHOULD_BE_IGNORED){}\n                }\n                try{ assertNotNull(data);                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertArrayEquals(data, input);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n                p.close();\n            }\n        }\n    }",
            "    public void testBase64Text$catena_1() throws Exception\n    {\n        // let's actually iterate over sets of encoding modes, lengths\n        \n        final int[] LENS = { 1, 2, 3, 4, 7, 9, 32, 33, 34, 35 };\n        final Base64Variant[] VARIANTS = {\n                Base64Variants.MIME,\n                Base64Variants.MIME_NO_LINEFEEDS,\n                Base64Variants.MODIFIED_FOR_URL,\n                Base64Variants.PEM\n        };\n\n        for (int len : LENS) {\n            byte[] input = new byte[len];\n            for (int i = 0; i < input.length; ++i) {\n                input[i] = (byte) i;\n            }\n            for (Base64Variant variant : VARIANTS) {\n                TextNode n = new TextNode(variant.encode(input));\n                byte[] data = null;\n                try {\n                    data = n.getBinaryValue(variant);\n                } catch (Exception e) {\n                    try{ fail(\"Failed (variant \"+variant+\", data length \"+len+\"): \"+e.getMessage());        }catch(Throwable __SHOULD_BE_IGNORED){}\n                }\n                assertNotNull(data);                                                                        /***** ORIGINAL ASSERTION IS HERE *****/\n                try{ assertArrayEquals(data, input);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n                // 15-Aug-2018, tatu: [databind#2096] requires another test\n                JsonParser p = new TreeTraversingParser(n);\n                try{ assertEquals(JsonToken.VALUE_STRING, p.nextToken());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n                try {\n                    data = p.getBinaryValue(variant);\n                } catch (Exception e) {\n                    try{ fail(\"Failed (variant \"+variant+\", data length \"+len+\"): \"+e.getMessage());        }catch(Throwable __SHOULD_BE_IGNORED){}\n                }\n                try{ assertNotNull(data);                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertArrayEquals(data, input);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n                p.close();\n            }\n        }\n    }",
            "    public void testBase64Text$catena_2() throws Exception\n    {\n        // let's actually iterate over sets of encoding modes, lengths\n        \n        final int[] LENS = { 1, 2, 3, 4, 7, 9, 32, 33, 34, 35 };\n        final Base64Variant[] VARIANTS = {\n                Base64Variants.MIME,\n                Base64Variants.MIME_NO_LINEFEEDS,\n                Base64Variants.MODIFIED_FOR_URL,\n                Base64Variants.PEM\n        };\n\n        for (int len : LENS) {\n            byte[] input = new byte[len];\n            for (int i = 0; i < input.length; ++i) {\n                input[i] = (byte) i;\n            }\n            for (Base64Variant variant : VARIANTS) {\n                TextNode n = new TextNode(variant.encode(input));\n                byte[] data = null;\n                try {\n                    data = n.getBinaryValue(variant);\n                } catch (Exception e) {\n                    try{ fail(\"Failed (variant \"+variant+\", data length \"+len+\"): \"+e.getMessage());        }catch(Throwable __SHOULD_BE_IGNORED){}\n                }\n                try{ assertNotNull(data);                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n                assertArrayEquals(data, input);                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n\n                // 15-Aug-2018, tatu: [databind#2096] requires another test\n                JsonParser p = new TreeTraversingParser(n);\n                try{ assertEquals(JsonToken.VALUE_STRING, p.nextToken());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n                try {\n                    data = p.getBinaryValue(variant);\n                } catch (Exception e) {\n                    try{ fail(\"Failed (variant \"+variant+\", data length \"+len+\"): \"+e.getMessage());        }catch(Throwable __SHOULD_BE_IGNORED){}\n                }\n                try{ assertNotNull(data);                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertArrayEquals(data, input);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n                p.close();\n            }\n        }\n    }",
            "    public void testBase64Text$catena_3() throws Exception\n    {\n        // let's actually iterate over sets of encoding modes, lengths\n        \n        final int[] LENS = { 1, 2, 3, 4, 7, 9, 32, 33, 34, 35 };\n        final Base64Variant[] VARIANTS = {\n                Base64Variants.MIME,\n                Base64Variants.MIME_NO_LINEFEEDS,\n                Base64Variants.MODIFIED_FOR_URL,\n                Base64Variants.PEM\n        };\n\n        for (int len : LENS) {\n            byte[] input = new byte[len];\n            for (int i = 0; i < input.length; ++i) {\n                input[i] = (byte) i;\n            }\n            for (Base64Variant variant : VARIANTS) {\n                TextNode n = new TextNode(variant.encode(input));\n                byte[] data = null;\n                try {\n                    data = n.getBinaryValue(variant);\n                } catch (Exception e) {\n                    try{ fail(\"Failed (variant \"+variant+\", data length \"+len+\"): \"+e.getMessage());        }catch(Throwable __SHOULD_BE_IGNORED){}\n                }\n                try{ assertNotNull(data);                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertArrayEquals(data, input);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n                // 15-Aug-2018, tatu: [databind#2096] requires another test\n                JsonParser p = new TreeTraversingParser(n);\n                assertEquals(JsonToken.VALUE_STRING, p.nextToken());                                        /***** ORIGINAL ASSERTION IS HERE *****/\n                try {\n                    data = p.getBinaryValue(variant);\n                } catch (Exception e) {\n                    try{ fail(\"Failed (variant \"+variant+\", data length \"+len+\"): \"+e.getMessage());        }catch(Throwable __SHOULD_BE_IGNORED){}\n                }\n                try{ assertNotNull(data);                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertArrayEquals(data, input);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n                p.close();\n            }\n        }\n    }",
            "    public void testBase64Text$catena_5() throws Exception\n    {\n        // let's actually iterate over sets of encoding modes, lengths\n        \n        final int[] LENS = { 1, 2, 3, 4, 7, 9, 32, 33, 34, 35 };\n        final Base64Variant[] VARIANTS = {\n                Base64Variants.MIME,\n                Base64Variants.MIME_NO_LINEFEEDS,\n                Base64Variants.MODIFIED_FOR_URL,\n                Base64Variants.PEM\n        };\n\n        for (int len : LENS) {\n            byte[] input = new byte[len];\n            for (int i = 0; i < input.length; ++i) {\n                input[i] = (byte) i;\n            }\n            for (Base64Variant variant : VARIANTS) {\n                TextNode n = new TextNode(variant.encode(input));\n                byte[] data = null;\n                try {\n                    data = n.getBinaryValue(variant);\n                } catch (Exception e) {\n                    try{ fail(\"Failed (variant \"+variant+\", data length \"+len+\"): \"+e.getMessage());        }catch(Throwable __SHOULD_BE_IGNORED){}\n                }\n                try{ assertNotNull(data);                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertArrayEquals(data, input);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n                // 15-Aug-2018, tatu: [databind#2096] requires another test\n                JsonParser p = new TreeTraversingParser(n);\n                try{ assertEquals(JsonToken.VALUE_STRING, p.nextToken());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n                try {\n                    data = p.getBinaryValue(variant);\n                } catch (Exception e) {\n                    try{ fail(\"Failed (variant \"+variant+\", data length \"+len+\"): \"+e.getMessage());        }catch(Throwable __SHOULD_BE_IGNORED){}\n                }\n                assertNotNull(data);                                                                        /***** ORIGINAL ASSERTION IS HERE *****/\n                try{ assertArrayEquals(data, input);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n                p.close();\n            }\n        }\n    }",
            "    public void testBase64Text$catena_6() throws Exception\n    {\n        // let's actually iterate over sets of encoding modes, lengths\n        \n        final int[] LENS = { 1, 2, 3, 4, 7, 9, 32, 33, 34, 35 };\n        final Base64Variant[] VARIANTS = {\n                Base64Variants.MIME,\n                Base64Variants.MIME_NO_LINEFEEDS,\n                Base64Variants.MODIFIED_FOR_URL,\n                Base64Variants.PEM\n        };\n\n        for (int len : LENS) {\n            byte[] input = new byte[len];\n            for (int i = 0; i < input.length; ++i) {\n                input[i] = (byte) i;\n            }\n            for (Base64Variant variant : VARIANTS) {\n                TextNode n = new TextNode(variant.encode(input));\n                byte[] data = null;\n                try {\n                    data = n.getBinaryValue(variant);\n                } catch (Exception e) {\n                    try{ fail(\"Failed (variant \"+variant+\", data length \"+len+\"): \"+e.getMessage());        }catch(Throwable __SHOULD_BE_IGNORED){}\n                }\n                try{ assertNotNull(data);                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertArrayEquals(data, input);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n                // 15-Aug-2018, tatu: [databind#2096] requires another test\n                JsonParser p = new TreeTraversingParser(n);\n                try{ assertEquals(JsonToken.VALUE_STRING, p.nextToken());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n                try {\n                    data = p.getBinaryValue(variant);\n                } catch (Exception e) {\n                    try{ fail(\"Failed (variant \"+variant+\", data length \"+len+\"): \"+e.getMessage());        }catch(Throwable __SHOULD_BE_IGNORED){}\n                }\n                try{ assertNotNull(data);                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n                assertArrayEquals(data, input);                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n                p.close();\n            }\n        }\n    }"
        ]
    }
}