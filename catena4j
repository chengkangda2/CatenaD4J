#!/usr/bin/env python3
import argparse
from internal.backend import print_help, is_help_cmd, d4j_backend, c4j_backend
from internal import config
from internal import util
parser = argparse.ArgumentParser()
parser.add_argument('command', type=str, help='A specific CatenaD4j command')
parser.add_argument('-p', metavar='project_name',required=False, help='The name of project you want to operate')
parser.add_argument('-v', metavar='bug_id', required=False, help='The version/bug-id you want to operate')
parser.add_argument('-w', metavar='working_dir', required=False, help='The working directory')
parser.add_argument('-o', metavar='output_file', required=False, help='The output file')
try:
    args = parser.parse_args()
    if not args.command in config.all_cmds:
        print_help()
    else:
        c4j_backend(args)
    __retry = False
except util.C4JInsideError:
    # Inside error should not be ignored for debugging
    raise
except:
    raise
    __retry = True
# Use __retry is for making exception info getting short
if __retry:
    if is_help_cmd():
        print_help()
    else:
        d4j_backend()
