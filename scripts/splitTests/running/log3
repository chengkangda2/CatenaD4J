--------------------
Run: Chart_25
@@@
Split test: org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanVertical
file: /root/workbench/exportInfo/d4j_buggy/Chart_25/tests//org/jfree/chart/renderer/category/junit/StatisticalBarRendererTests.java
Begin: Pos(189, 12)
End: Pos(209, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Chart_25/tests//org/jfree/chart/renderer/category/junit/StatisticalBarRendererTests.java
Name: testDrawWithNullMeanVertical
Childs: [StatementAssertion<Begin: Pos(208, 9), End: Pos(208, 28)>,
]
@@@
Split test: org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationVertical
file: /root/workbench/exportInfo/d4j_buggy/Chart_25/tests//org/jfree/chart/renderer/category/junit/StatisticalBarRendererTests.java
Begin: Pos(244, 12)
End: Pos(264, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Chart_25/tests//org/jfree/chart/renderer/category/junit/StatisticalBarRendererTests.java
Name: testDrawWithNullDeviationVertical
Childs: [StatementAssertion<Begin: Pos(263, 9), End: Pos(263, 28)>,
]
@@@
Split test: org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullMeanHorizontal
file: /root/workbench/exportInfo/d4j_buggy/Chart_25/tests//org/jfree/chart/renderer/category/junit/StatisticalBarRendererTests.java
Begin: Pos(216, 12)
End: Pos(237, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Chart_25/tests//org/jfree/chart/renderer/category/junit/StatisticalBarRendererTests.java
Name: testDrawWithNullMeanHorizontal
Childs: [StatementAssertion<Begin: Pos(236, 9), End: Pos(236, 28)>,
]
@@@
Split test: org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullDeviationHorizontal
file: /root/workbench/exportInfo/d4j_buggy/Chart_25/tests//org/jfree/chart/renderer/category/junit/StatisticalBarRendererTests.java
Begin: Pos(271, 12)
End: Pos(292, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Chart_25/tests//org/jfree/chart/renderer/category/junit/StatisticalBarRendererTests.java
Name: testDrawWithNullDeviationHorizontal
Childs: [StatementAssertion<Begin: Pos(291, 9), End: Pos(291, 28)>,
]
--------------------
Run: Chart_22
@@@
Split test: org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey
file: /root/workbench/exportInfo/d4j_buggy/Chart_22/tests//org/jfree/data/junit/KeyedObjects2DTests.java
Begin: Pos(387, 12)
End: Pos(414, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Chart_22/tests//org/jfree/data/junit/KeyedObjects2DTests.java
Name: testRemoveColumnByKey
Childs: [StatementAssertion<Begin: Pos(392, 9), End: Pos(392, 47)>,
StatementAssertion<Begin: Pos(393, 9), End: Pos(393, 51)>,
StatementAssertion<Begin: Pos(403, 9), End: Pos(403, 25)>,
StatementAssertion<Begin: Pos(413, 9), End: Pos(413, 25)>,
]
---
public void testRemoveColumnByKey_catena_0() {
    KeyedObjects2D data = new KeyedObjects2D();
    data.setObject("Obj1", "R1", "C1");
    data.setObject("Obj2", "R2", "C2");
    data.removeColumn("C2");
    assertEquals(1, data.getColumnCount());
    boolean pass = false;
    try {
        data.removeColumn("XXX");
        
    }
    catch(UnknownKeyException e) {
        pass = true;
        
    }
    pass = false;
    try {
        data.removeColumn(null);
        
    }
    catch(IllegalArgumentException e) {
        pass = true;
        
    }
}

---
---
public void testRemoveColumnByKey_catena_1() {
    KeyedObjects2D data = new KeyedObjects2D();
    data.setObject("Obj1", "R1", "C1");
    data.setObject("Obj2", "R2", "C2");
    data.removeColumn("C2");
    assertEquals("Obj1", data.getObject(0, 0));
    boolean pass = false;
    try {
        data.removeColumn("XXX");
        
    }
    catch(UnknownKeyException e) {
        pass = true;
        
    }
    pass = false;
    try {
        data.removeColumn(null);
        
    }
    catch(IllegalArgumentException e) {
        pass = true;
        
    }
}

---
---
public void testRemoveColumnByKey_catena_2() {
    KeyedObjects2D data = new KeyedObjects2D();
    data.setObject("Obj1", "R1", "C1");
    data.setObject("Obj2", "R2", "C2");
    data.removeColumn("C2");
    boolean pass = false;
    try {
        data.removeColumn("XXX");
        
    }
    catch(UnknownKeyException e) {
        pass = true;
        
    }
    assertTrue(pass);
    pass = false;
    try {
        data.removeColumn(null);
        
    }
    catch(IllegalArgumentException e) {
        pass = true;
        
    }
}

---
---
public void testRemoveColumnByKey_catena_3() {
    KeyedObjects2D data = new KeyedObjects2D();
    data.setObject("Obj1", "R1", "C1");
    data.setObject("Obj2", "R2", "C2");
    data.removeColumn("C2");
    boolean pass = false;
    try {
        data.removeColumn("XXX");
        
    }
    catch(UnknownKeyException e) {
        pass = true;
        
    }
    pass = false;
    try {
        data.removeColumn(null);
        
    }
    catch(IllegalArgumentException e) {
        pass = true;
        
    }
    assertTrue(pass);
    
}

---
@@@
Split test: org.jfree.data.junit.KeyedObjects2DTests::testRemoveValue
file: /root/workbench/exportInfo/d4j_buggy/Chart_22/tests//org/jfree/data/junit/KeyedObjects2DTests.java
Begin: Pos(419, 12)
End: Pos(427, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Chart_22/tests//org/jfree/data/junit/KeyedObjects2DTests.java
Name: testRemoveValue
Childs: [StatementAssertion<Begin: Pos(424, 9), End: Pos(424, 44)>,
StatementAssertion<Begin: Pos(425, 9), End: Pos(425, 47)>,
StatementAssertion<Begin: Pos(426, 9), End: Pos(426, 51)>,
]
---
public void testRemoveValue_catena_0() {
    KeyedObjects2D data = new KeyedObjects2D();
    data.setObject("Obj1", "R1", "C1");
    data.setObject("Obj2", "R2", "C2");
    data.removeObject("R2", "C2");
    assertEquals(1, data.getRowCount());
    
}

---
---
public void testRemoveValue_catena_1() {
    KeyedObjects2D data = new KeyedObjects2D();
    data.setObject("Obj1", "R1", "C1");
    data.setObject("Obj2", "R2", "C2");
    data.removeObject("R2", "C2");
    assertEquals(1, data.getColumnCount());
    
}

---
---
public void testRemoveValue_catena_2() {
    KeyedObjects2D data = new KeyedObjects2D();
    data.setObject("Obj1", "R1", "C1");
    data.setObject("Obj2", "R2", "C2");
    data.removeObject("R2", "C2");
    assertEquals("Obj1", data.getObject(0, 0));
    
}

---
@@@
Split test: org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey
file: /root/workbench/exportInfo/d4j_buggy/Chart_22/tests//org/jfree/data/junit/KeyedObjects2DTests.java
Begin: Pos(205, 12)
End: Pos(250, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Chart_22/tests//org/jfree/data/junit/KeyedObjects2DTests.java
Name: testGetValueByKey
Childs: [StatementAssertion<Begin: Pos(209, 9), End: Pos(209, 57)>,
StatementAssertion<Begin: Pos(210, 9), End: Pos(210, 57)>,
StatementAssertion<Begin: Pos(211, 9), End: Pos(211, 47)>,
StatementAssertion<Begin: Pos(212, 9), End: Pos(212, 47)>,
StatementAssertion<Begin: Pos(222, 9), End: Pos(222, 25)>,
StatementAssertion<Begin: Pos(231, 9), End: Pos(231, 25)>,
StatementAssertion<Begin: Pos(240, 9), End: Pos(240, 25)>,
StatementAssertion<Begin: Pos(249, 9), End: Pos(249, 25)>,
]
---
public void testGetValueByKey_catena_0() {
    KeyedObjects2D data = new KeyedObjects2D();
    data.addObject("Obj1", "R1", "C1");
    data.addObject("Obj2", "R2", "C2");
    assertEquals("Obj1", data.getObject("R1", "C1"));
    boolean pass = false;
    try {
        data.getObject("XX", "C1");
        
    }
    catch(UnknownKeyException e) {
        pass = true;
        
    }
    pass = false;
    try {
        data.getObject("R1", "XX");
        
    }
    catch(UnknownKeyException e) {
        pass = true;
        
    }
    pass = false;
    try {
        data.getObject("XX", "C1");
        
    }
    catch(UnknownKeyException e) {
        pass = true;
        
    }
    pass = false;
    try {
        data.getObject("R1", "XX");
        
    }
    catch(UnknownKeyException e) {
        pass = true;
        
    }
}

---
---
public void testGetValueByKey_catena_1() {
    KeyedObjects2D data = new KeyedObjects2D();
    data.addObject("Obj1", "R1", "C1");
    data.addObject("Obj2", "R2", "C2");
    assertEquals("Obj2", data.getObject("R2", "C2"));
    boolean pass = false;
    try {
        data.getObject("XX", "C1");
        
    }
    catch(UnknownKeyException e) {
        pass = true;
        
    }
    pass = false;
    try {
        data.getObject("R1", "XX");
        
    }
    catch(UnknownKeyException e) {
        pass = true;
        
    }
    pass = false;
    try {
        data.getObject("XX", "C1");
        
    }
    catch(UnknownKeyException e) {
        pass = true;
        
    }
    pass = false;
    try {
        data.getObject("R1", "XX");
        
    }
    catch(UnknownKeyException e) {
        pass = true;
        
    }
}

---
---
public void testGetValueByKey_catena_2() {
    KeyedObjects2D data = new KeyedObjects2D();
    data.addObject("Obj1", "R1", "C1");
    data.addObject("Obj2", "R2", "C2");
    assertNull(data.getObject("R1", "C2"));
    boolean pass = false;
    try {
        data.getObject("XX", "C1");
        
    }
    catch(UnknownKeyException e) {
        pass = true;
        
    }
    pass = false;
    try {
        data.getObject("R1", "XX");
        
    }
    catch(UnknownKeyException e) {
        pass = true;
        
    }
    pass = false;
    try {
        data.getObject("XX", "C1");
        
    }
    catch(UnknownKeyException e) {
        pass = true;
        
    }
    pass = false;
    try {
        data.getObject("R1", "XX");
        
    }
    catch(UnknownKeyException e) {
        pass = true;
        
    }
}

---
---
public void testGetValueByKey_catena_3() {
    KeyedObjects2D data = new KeyedObjects2D();
    data.addObject("Obj1", "R1", "C1");
    data.addObject("Obj2", "R2", "C2");
    assertNull(data.getObject("R2", "C1"));
    boolean pass = false;
    try {
        data.getObject("XX", "C1");
        
    }
    catch(UnknownKeyException e) {
        pass = true;
        
    }
    pass = false;
    try {
        data.getObject("R1", "XX");
        
    }
    catch(UnknownKeyException e) {
        pass = true;
        
    }
    pass = false;
    try {
        data.getObject("XX", "C1");
        
    }
    catch(UnknownKeyException e) {
        pass = true;
        
    }
    pass = false;
    try {
        data.getObject("R1", "XX");
        
    }
    catch(UnknownKeyException e) {
        pass = true;
        
    }
}

---
---
public void testGetValueByKey_catena_4() {
    KeyedObjects2D data = new KeyedObjects2D();
    data.addObject("Obj1", "R1", "C1");
    data.addObject("Obj2", "R2", "C2");
    boolean pass = false;
    try {
        data.getObject("XX", "C1");
        
    }
    catch(UnknownKeyException e) {
        pass = true;
        
    }
    assertTrue(pass);
    pass = false;
    try {
        data.getObject("R1", "XX");
        
    }
    catch(UnknownKeyException e) {
        pass = true;
        
    }
    pass = false;
    try {
        data.getObject("XX", "C1");
        
    }
    catch(UnknownKeyException e) {
        pass = true;
        
    }
    pass = false;
    try {
        data.getObject("R1", "XX");
        
    }
    catch(UnknownKeyException e) {
        pass = true;
        
    }
}

---
---
public void testGetValueByKey_catena_5() {
    KeyedObjects2D data = new KeyedObjects2D();
    data.addObject("Obj1", "R1", "C1");
    data.addObject("Obj2", "R2", "C2");
    boolean pass = false;
    try {
        data.getObject("XX", "C1");
        
    }
    catch(UnknownKeyException e) {
        pass = true;
        
    }
    pass = false;
    try {
        data.getObject("R1", "XX");
        
    }
    catch(UnknownKeyException e) {
        pass = true;
        
    }
    assertTrue(pass);
    pass = false;
    try {
        data.getObject("XX", "C1");
        
    }
    catch(UnknownKeyException e) {
        pass = true;
        
    }
    pass = false;
    try {
        data.getObject("R1", "XX");
        
    }
    catch(UnknownKeyException e) {
        pass = true;
        
    }
}

---
---
public void testGetValueByKey_catena_6() {
    KeyedObjects2D data = new KeyedObjects2D();
    data.addObject("Obj1", "R1", "C1");
    data.addObject("Obj2", "R2", "C2");
    boolean pass = false;
    try {
        data.getObject("XX", "C1");
        
    }
    catch(UnknownKeyException e) {
        pass = true;
        
    }
    pass = false;
    try {
        data.getObject("R1", "XX");
        
    }
    catch(UnknownKeyException e) {
        pass = true;
        
    }
    pass = false;
    try {
        data.getObject("XX", "C1");
        
    }
    catch(UnknownKeyException e) {
        pass = true;
        
    }
    assertTrue(pass);
    pass = false;
    try {
        data.getObject("R1", "XX");
        
    }
    catch(UnknownKeyException e) {
        pass = true;
        
    }
}

---
---
public void testGetValueByKey_catena_7() {
    KeyedObjects2D data = new KeyedObjects2D();
    data.addObject("Obj1", "R1", "C1");
    data.addObject("Obj2", "R2", "C2");
    boolean pass = false;
    try {
        data.getObject("XX", "C1");
        
    }
    catch(UnknownKeyException e) {
        pass = true;
        
    }
    pass = false;
    try {
        data.getObject("R1", "XX");
        
    }
    catch(UnknownKeyException e) {
        pass = true;
        
    }
    pass = false;
    try {
        data.getObject("XX", "C1");
        
    }
    catch(UnknownKeyException e) {
        pass = true;
        
    }
    pass = false;
    try {
        data.getObject("R1", "XX");
        
    }
    catch(UnknownKeyException e) {
        pass = true;
        
    }
    assertTrue(pass);
    
}

---
@@@
Split test: org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex
file: /root/workbench/exportInfo/d4j_buggy/Chart_22/tests//org/jfree/data/junit/KeyedObjects2DTests.java
Begin: Pos(323, 12)
End: Pos(350, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Chart_22/tests//org/jfree/data/junit/KeyedObjects2DTests.java
Name: testRemoveColumnByIndex
Childs: [StatementAssertion<Begin: Pos(328, 9), End: Pos(328, 47)>,
StatementAssertion<Begin: Pos(329, 9), End: Pos(329, 51)>,
StatementAssertion<Begin: Pos(339, 9), End: Pos(339, 25)>,
StatementAssertion<Begin: Pos(349, 9), End: Pos(349, 25)>,
]
---
public void testRemoveColumnByIndex_catena_0() {
    KeyedObjects2D data = new KeyedObjects2D();
    data.setObject("Obj1", "R1", "C1");
    data.setObject("Obj2", "R2", "C2");
    data.removeColumn(0);
    assertEquals(1, data.getColumnCount());
    boolean pass = false;
    try {
        data.removeColumn( - 1);
        
    }
    catch(IndexOutOfBoundsException e) {
        pass = true;
        
    }
    pass = false;
    try {
        data.removeColumn(data.getColumnCount());
        
    }
    catch(IndexOutOfBoundsException e) {
        pass = true;
        
    }
}

---
---
public void testRemoveColumnByIndex_catena_1() {
    KeyedObjects2D data = new KeyedObjects2D();
    data.setObject("Obj1", "R1", "C1");
    data.setObject("Obj2", "R2", "C2");
    data.removeColumn(0);
    assertEquals("Obj2", data.getObject(1, 0));
    boolean pass = false;
    try {
        data.removeColumn( - 1);
        
    }
    catch(IndexOutOfBoundsException e) {
        pass = true;
        
    }
    pass = false;
    try {
        data.removeColumn(data.getColumnCount());
        
    }
    catch(IndexOutOfBoundsException e) {
        pass = true;
        
    }
}

---
---
public void testRemoveColumnByIndex_catena_2() {
    KeyedObjects2D data = new KeyedObjects2D();
    data.setObject("Obj1", "R1", "C1");
    data.setObject("Obj2", "R2", "C2");
    data.removeColumn(0);
    boolean pass = false;
    try {
        data.removeColumn( - 1);
        
    }
    catch(IndexOutOfBoundsException e) {
        pass = true;
        
    }
    assertTrue(pass);
    pass = false;
    try {
        data.removeColumn(data.getColumnCount());
        
    }
    catch(IndexOutOfBoundsException e) {
        pass = true;
        
    }
}

---
---
public void testRemoveColumnByIndex_catena_3() {
    KeyedObjects2D data = new KeyedObjects2D();
    data.setObject("Obj1", "R1", "C1");
    data.setObject("Obj2", "R2", "C2");
    data.removeColumn(0);
    boolean pass = false;
    try {
        data.removeColumn( - 1);
        
    }
    catch(IndexOutOfBoundsException e) {
        pass = true;
        
    }
    pass = false;
    try {
        data.removeColumn(data.getColumnCount());
        
    }
    catch(IndexOutOfBoundsException e) {
        pass = true;
        
    }
    assertTrue(pass);
    
}

---
@@@
Split test: org.jfree.data.junit.KeyedObjects2DTests::testSetObject
file: /root/workbench/exportInfo/d4j_buggy/Chart_22/tests//org/jfree/data/junit/KeyedObjects2DTests.java
Begin: Pos(255, 12)
End: Pos(286, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Chart_22/tests//org/jfree/data/junit/KeyedObjects2DTests.java
Name: testSetObject
Childs: [StatementAssertion<Begin: Pos(259, 9), End: Pos(259, 57)>,
StatementAssertion<Begin: Pos(260, 9), End: Pos(260, 57)>,
StatementAssertion<Begin: Pos(261, 9), End: Pos(261, 47)>,
StatementAssertion<Begin: Pos(262, 9), End: Pos(262, 47)>,
StatementAssertion<Begin: Pos(266, 9), End: Pos(266, 56)>,
StatementAssertion<Begin: Pos(276, 9), End: Pos(276, 25)>,
StatementAssertion<Begin: Pos(285, 9), End: Pos(285, 25)>,
]
---
public void testSetObject_catena_0() {
    KeyedObjects2D data = new KeyedObjects2D();
    data.setObject("Obj1", "R1", "C1");
    data.setObject("Obj2", "R2", "C2");
    assertEquals("Obj1", data.getObject("R1", "C1"));
    data.setObject("ABC", "R2", "C2");
    boolean pass = false;
    try {
        data.setObject("X", null, "C1");
        
    }
    catch(IllegalArgumentException e) {
        pass = true;
        
    }
    pass = false;
    try {
        data.setObject("X", "R1", null);
        
    }
    catch(IllegalArgumentException e) {
        pass = true;
        
    }
}

---
---
public void testSetObject_catena_1() {
    KeyedObjects2D data = new KeyedObjects2D();
    data.setObject("Obj1", "R1", "C1");
    data.setObject("Obj2", "R2", "C2");
    assertEquals("Obj2", data.getObject("R2", "C2"));
    data.setObject("ABC", "R2", "C2");
    boolean pass = false;
    try {
        data.setObject("X", null, "C1");
        
    }
    catch(IllegalArgumentException e) {
        pass = true;
        
    }
    pass = false;
    try {
        data.setObject("X", "R1", null);
        
    }
    catch(IllegalArgumentException e) {
        pass = true;
        
    }
}

---
---
public void testSetObject_catena_2() {
    KeyedObjects2D data = new KeyedObjects2D();
    data.setObject("Obj1", "R1", "C1");
    data.setObject("Obj2", "R2", "C2");
    assertNull(data.getObject("R1", "C2"));
    data.setObject("ABC", "R2", "C2");
    boolean pass = false;
    try {
        data.setObject("X", null, "C1");
        
    }
    catch(IllegalArgumentException e) {
        pass = true;
        
    }
    pass = false;
    try {
        data.setObject("X", "R1", null);
        
    }
    catch(IllegalArgumentException e) {
        pass = true;
        
    }
}

---
---
public void testSetObject_catena_3() {
    KeyedObjects2D data = new KeyedObjects2D();
    data.setObject("Obj1", "R1", "C1");
    data.setObject("Obj2", "R2", "C2");
    assertNull(data.getObject("R2", "C1"));
    data.setObject("ABC", "R2", "C2");
    boolean pass = false;
    try {
        data.setObject("X", null, "C1");
        
    }
    catch(IllegalArgumentException e) {
        pass = true;
        
    }
    pass = false;
    try {
        data.setObject("X", "R1", null);
        
    }
    catch(IllegalArgumentException e) {
        pass = true;
        
    }
}

---
---
public void testSetObject_catena_4() {
    KeyedObjects2D data = new KeyedObjects2D();
    data.setObject("Obj1", "R1", "C1");
    data.setObject("Obj2", "R2", "C2");
    data.setObject("ABC", "R2", "C2");
    assertEquals("ABC", data.getObject("R2", "C2"));
    boolean pass = false;
    try {
        data.setObject("X", null, "C1");
        
    }
    catch(IllegalArgumentException e) {
        pass = true;
        
    }
    pass = false;
    try {
        data.setObject("X", "R1", null);
        
    }
    catch(IllegalArgumentException e) {
        pass = true;
        
    }
}

---
---
public void testSetObject_catena_5() {
    KeyedObjects2D data = new KeyedObjects2D();
    data.setObject("Obj1", "R1", "C1");
    data.setObject("Obj2", "R2", "C2");
    data.setObject("ABC", "R2", "C2");
    boolean pass = false;
    try {
        data.setObject("X", null, "C1");
        
    }
    catch(IllegalArgumentException e) {
        pass = true;
        
    }
    assertTrue(pass);
    pass = false;
    try {
        data.setObject("X", "R1", null);
        
    }
    catch(IllegalArgumentException e) {
        pass = true;
        
    }
}

---
---
public void testSetObject_catena_6() {
    KeyedObjects2D data = new KeyedObjects2D();
    data.setObject("Obj1", "R1", "C1");
    data.setObject("Obj2", "R2", "C2");
    data.setObject("ABC", "R2", "C2");
    boolean pass = false;
    try {
        data.setObject("X", null, "C1");
        
    }
    catch(IllegalArgumentException e) {
        pass = true;
        
    }
    pass = false;
    try {
        data.setObject("X", "R1", null);
        
    }
    catch(IllegalArgumentException e) {
        pass = true;
        
    }
    assertTrue(pass);
    
}

---
@@@
Split test: org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey
file: /root/workbench/exportInfo/d4j_buggy/Chart_22/tests//org/jfree/data/junit/KeyedObjects2DTests.java
Begin: Pos(355, 12)
End: Pos(382, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Chart_22/tests//org/jfree/data/junit/KeyedObjects2DTests.java
Name: testRemoveRowByKey
Childs: [StatementAssertion<Begin: Pos(360, 9), End: Pos(360, 44)>,
StatementAssertion<Begin: Pos(361, 9), End: Pos(361, 51)>,
StatementAssertion<Begin: Pos(371, 9), End: Pos(371, 25)>,
StatementAssertion<Begin: Pos(381, 9), End: Pos(381, 25)>,
]
---
public void testRemoveRowByKey_catena_0() {
    KeyedObjects2D data = new KeyedObjects2D();
    data.setObject("Obj1", "R1", "C1");
    data.setObject("Obj2", "R2", "C2");
    data.removeRow("R2");
    assertEquals(1, data.getRowCount());
    boolean pass = false;
    try {
        data.removeRow("XXX");
        
    }
    catch(UnknownKeyException e) {
        pass = true;
        
    }
    pass = false;
    try {
        data.removeRow(null);
        
    }
    catch(IllegalArgumentException e) {
        pass = true;
        
    }
}

---
---
public void testRemoveRowByKey_catena_1() {
    KeyedObjects2D data = new KeyedObjects2D();
    data.setObject("Obj1", "R1", "C1");
    data.setObject("Obj2", "R2", "C2");
    data.removeRow("R2");
    assertEquals("Obj1", data.getObject(0, 0));
    boolean pass = false;
    try {
        data.removeRow("XXX");
        
    }
    catch(UnknownKeyException e) {
        pass = true;
        
    }
    pass = false;
    try {
        data.removeRow(null);
        
    }
    catch(IllegalArgumentException e) {
        pass = true;
        
    }
}

---
---
public void testRemoveRowByKey_catena_2() {
    KeyedObjects2D data = new KeyedObjects2D();
    data.setObject("Obj1", "R1", "C1");
    data.setObject("Obj2", "R2", "C2");
    data.removeRow("R2");
    boolean pass = false;
    try {
        data.removeRow("XXX");
        
    }
    catch(UnknownKeyException e) {
        pass = true;
        
    }
    assertTrue(pass);
    pass = false;
    try {
        data.removeRow(null);
        
    }
    catch(IllegalArgumentException e) {
        pass = true;
        
    }
}

---
---
public void testRemoveRowByKey_catena_3() {
    KeyedObjects2D data = new KeyedObjects2D();
    data.setObject("Obj1", "R1", "C1");
    data.setObject("Obj2", "R2", "C2");
    data.removeRow("R2");
    boolean pass = false;
    try {
        data.removeRow("XXX");
        
    }
    catch(UnknownKeyException e) {
        pass = true;
        
    }
    pass = false;
    try {
        data.removeRow(null);
        
    }
    catch(IllegalArgumentException e) {
        pass = true;
        
    }
    assertTrue(pass);
    
}

---
--------------------
Run: Chart_4
@@@
Split test: org.jfree.chart.axis.junit.LogAxisTests::testXYAutoRange1
file: /root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/axis/junit/LogAxisTests.java
Begin: Pos(253, 12)
End: Pos(275, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/axis/junit/LogAxisTests.java
Name: testXYAutoRange1
Childs: [StatementAssertion<Begin: Pos(273, 9), End: Pos(273, 72)>,
StatementAssertion<Begin: Pos(274, 9), End: Pos(274, 72)>,
]
---
public void testXYAutoRange1_catena_0() {
    XYSeries series = new XYSeries("Series 1");
    series.add(1.0, 1.0);
    series.add(2.0, 2.0);
    series.add(3.0, 3.0);
    XYSeriesCollection dataset = new XYSeriesCollection();
    dataset.addSeries(series);
    JFreeChart chart = ChartFactory.createScatterPlot("Test", "X", "Y", dataset, PlotOrientation.VERTICAL, false, false, false);
    XYPlot plot = (XYPlot)chart.getPlot();
    LogAxis axis = new LogAxis("Log(Y)");
    plot.setRangeAxis(axis);
    assertEquals(0.9465508226401592, axis.getLowerBound(), EPSILON);
    
}

---
---
public void testXYAutoRange1_catena_1() {
    XYSeries series = new XYSeries("Series 1");
    series.add(1.0, 1.0);
    series.add(2.0, 2.0);
    series.add(3.0, 3.0);
    XYSeriesCollection dataset = new XYSeriesCollection();
    dataset.addSeries(series);
    JFreeChart chart = ChartFactory.createScatterPlot("Test", "X", "Y", dataset, PlotOrientation.VERTICAL, false, false, false);
    XYPlot plot = (XYPlot)chart.getPlot();
    LogAxis axis = new LogAxis("Log(Y)");
    plot.setRangeAxis(axis);
    assertEquals(3.1694019256486126, axis.getUpperBound(), EPSILON);
    
}

---
@@@
Split test: org.jfree.chart.axis.junit.LogAxisTests::testXYAutoRange2
file: /root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/axis/junit/LogAxisTests.java
Begin: Pos(281, 12)
End: Pos(303, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/axis/junit/LogAxisTests.java
Name: testXYAutoRange2
Childs: [StatementAssertion<Begin: Pos(301, 9), End: Pos(301, 72)>,
StatementAssertion<Begin: Pos(302, 9), End: Pos(302, 72)>,
]
---
public void testXYAutoRange2_catena_0() {
    XYSeries series = new XYSeries("Series 1");
    series.add(1.0, 1.0);
    series.add(2.0, 2.0);
    series.add(3.0, 3.0);
    XYSeriesCollection dataset = new XYSeriesCollection();
    dataset.addSeries(series);
    JFreeChart chart = ChartFactory.createScatterPlot("Test", "X", "Y", dataset, PlotOrientation.VERTICAL, false, false, false);
    XYPlot plot = (XYPlot)chart.getPlot();
    LogAxis axis = new LogAxis("Log(Y)");
    plot.setRangeAxis(axis);
    assertEquals(0.9465508226401592, axis.getLowerBound(), EPSILON);
    
}

---
---
public void testXYAutoRange2_catena_1() {
    XYSeries series = new XYSeries("Series 1");
    series.add(1.0, 1.0);
    series.add(2.0, 2.0);
    series.add(3.0, 3.0);
    XYSeriesCollection dataset = new XYSeriesCollection();
    dataset.addSeries(series);
    JFreeChart chart = ChartFactory.createScatterPlot("Test", "X", "Y", dataset, PlotOrientation.VERTICAL, false, false, false);
    XYPlot plot = (XYPlot)chart.getPlot();
    LogAxis axis = new LogAxis("Log(Y)");
    plot.setRangeAxis(axis);
    assertEquals(3.1694019256486126, axis.getUpperBound(), EPSILON);
    
}

---
@@@
Split test: org.jfree.chart.axis.junit.NumberAxisTests::testXYAutoRange1
file: /root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/axis/junit/NumberAxisTests.java
Begin: Pos(347, 12)
End: Pos(369, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/axis/junit/NumberAxisTests.java
Name: testXYAutoRange1
Childs: [StatementAssertion<Begin: Pos(367, 9), End: Pos(367, 57)>,
StatementAssertion<Begin: Pos(368, 9), End: Pos(368, 57)>,
]
---
public void testXYAutoRange1_catena_0() {
    XYSeries series = new XYSeries("Series 1");
    series.add(1.0, 1.0);
    series.add(2.0, 2.0);
    series.add(3.0, 3.0);
    XYSeriesCollection dataset = new XYSeriesCollection();
    dataset.addSeries(series);
    JFreeChart chart = ChartFactory.createScatterPlot("Test", "X", "Y", dataset, PlotOrientation.VERTICAL, false, false, false);
    XYPlot plot = (XYPlot)chart.getPlot();
    NumberAxis axis = (NumberAxis)plot.getDomainAxis();
    axis.setAutoRangeIncludesZero(false);
    assertEquals(0.9, axis.getLowerBound(), EPSILON);
    
}

---
---
public void testXYAutoRange1_catena_1() {
    XYSeries series = new XYSeries("Series 1");
    series.add(1.0, 1.0);
    series.add(2.0, 2.0);
    series.add(3.0, 3.0);
    XYSeriesCollection dataset = new XYSeriesCollection();
    dataset.addSeries(series);
    JFreeChart chart = ChartFactory.createScatterPlot("Test", "X", "Y", dataset, PlotOrientation.VERTICAL, false, false, false);
    XYPlot plot = (XYPlot)chart.getPlot();
    NumberAxis axis = (NumberAxis)plot.getDomainAxis();
    axis.setAutoRangeIncludesZero(false);
    assertEquals(3.1, axis.getUpperBound(), EPSILON);
    
}

---
@@@
Split test: org.jfree.chart.axis.junit.NumberAxisTests::testXYAutoRange2
file: /root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/axis/junit/NumberAxisTests.java
Begin: Pos(375, 12)
End: Pos(397, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/axis/junit/NumberAxisTests.java
Name: testXYAutoRange2
Childs: [StatementAssertion<Begin: Pos(395, 9), End: Pos(395, 57)>,
StatementAssertion<Begin: Pos(396, 9), End: Pos(396, 57)>,
]
---
public void testXYAutoRange2_catena_0() {
    XYSeries series = new XYSeries("Series 1");
    series.add(1.0, 1.0);
    series.add(2.0, 2.0);
    series.add(3.0, 3.0);
    XYSeriesCollection dataset = new XYSeriesCollection();
    dataset.addSeries(series);
    JFreeChart chart = ChartFactory.createScatterPlot("Test", "X", "Y", dataset, PlotOrientation.VERTICAL, false, false, false);
    XYPlot plot = (XYPlot)chart.getPlot();
    NumberAxis axis = (NumberAxis)plot.getRangeAxis();
    axis.setAutoRangeIncludesZero(false);
    assertEquals(0.9, axis.getLowerBound(), EPSILON);
    
}

---
---
public void testXYAutoRange2_catena_1() {
    XYSeries series = new XYSeries("Series 1");
    series.add(1.0, 1.0);
    series.add(2.0, 2.0);
    series.add(3.0, 3.0);
    XYSeriesCollection dataset = new XYSeriesCollection();
    dataset.addSeries(series);
    JFreeChart chart = ChartFactory.createScatterPlot("Test", "X", "Y", dataset, PlotOrientation.VERTICAL, false, false, false);
    XYPlot plot = (XYPlot)chart.getPlot();
    NumberAxis axis = (NumberAxis)plot.getRangeAxis();
    axis.setAutoRangeIncludesZero(false);
    assertEquals(3.1, axis.getUpperBound(), EPSILON);
    
}

---
@@@
Split test: org.jfree.chart.axis.junit.ValueAxisTests::testAxisMargins
file: /root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/axis/junit/ValueAxisTests.java
Begin: Pos(228, 12)
End: Pos(245, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/axis/junit/ValueAxisTests.java
Name: testAxisMargins
Childs: [StatementAssertion<Begin: Pos(240, 9), End: Pos(240, 52)>,
StatementAssertion<Begin: Pos(244, 9), End: Pos(244, 52)>,
]
---
public void testAxisMargins_catena_0() {
    XYSeries series = new XYSeries("S1");
    series.add(100.0, 1.1);
    series.add(200.0, 2.2);
    XYSeriesCollection dataset = new XYSeriesCollection(series);
    dataset.setIntervalWidth(0.0);
    JFreeChart chart = ChartFactory.createScatterPlot("Title", "X", "Y", dataset, PlotOrientation.VERTICAL, false, false, false);
    ValueAxis domainAxis = ((XYPlot)chart.getPlot()).getDomainAxis();
    Range r = domainAxis.getRange();
    assertEquals(110.0, r.getLength(), EPSILON);
    domainAxis.setLowerMargin(0.10);
    domainAxis.setUpperMargin(0.10);
    r = domainAxis.getRange();
    
}

---
---
public void testAxisMargins_catena_1() {
    XYSeries series = new XYSeries("S1");
    series.add(100.0, 1.1);
    series.add(200.0, 2.2);
    XYSeriesCollection dataset = new XYSeriesCollection(series);
    dataset.setIntervalWidth(0.0);
    JFreeChart chart = ChartFactory.createScatterPlot("Title", "X", "Y", dataset, PlotOrientation.VERTICAL, false, false, false);
    ValueAxis domainAxis = ((XYPlot)chart.getPlot()).getDomainAxis();
    Range r = domainAxis.getRange();
    domainAxis.setLowerMargin(0.10);
    domainAxis.setUpperMargin(0.10);
    r = domainAxis.getRange();
    assertEquals(120.0, r.getLength(), EPSILON);
    
}

---
@@@
Split test: org.jfree.chart.junit.JFreeChartTests::testSerialization4
file: /root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/junit/JFreeChartTests.java
Begin: Pos(438, 12)
End: Pos(468, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/junit/JFreeChartTests.java
Name: testSerialization4
Childs: [StatementAssertion<Begin: Pos(466, 9), End: Pos(466, 29)>,
]
@@@
Split test: org.jfree.chart.junit.ScatterPlotTests::testDrawWithNullInfo
file: /root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/junit/ScatterPlotTests.java
Begin: Pos(105, 12)
End: Pos(125, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/junit/ScatterPlotTests.java
Name: testDrawWithNullInfo
Childs: [StatementAssertion<Begin: Pos(123, 9), End: Pos(123, 28)>,
]
@@@
Split test: org.jfree.chart.junit.ScatterPlotTests::testSetSeriesToolTipGenerator
file: /root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/junit/ScatterPlotTests.java
Begin: Pos(157, 12)
End: Pos(164, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/junit/ScatterPlotTests.java
Name: testSetSeriesToolTipGenerator
Childs: [StatementAssertion<Begin: Pos(163, 9), End: Pos(163, 30)>,
]
@@@
Split test: org.jfree.chart.junit.ScatterPlotTests::testReplaceDataset
file: /root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/junit/ScatterPlotTests.java
Begin: Pos(130, 12)
End: Pos(151, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/junit/ScatterPlotTests.java
Name: testReplaceDataset
Childs: [StatementAssertion<Begin: Pos(143, 9), End: Pos(143, 35)>,
StatementAssertion<Begin: Pos(146, 9), End: Pos(147, 73)>,
StatementAssertion<Begin: Pos(148, 9), End: Pos(149, 73)>,
]
---
public void testReplaceDataset_catena_0() {
    XYSeries series1 = new XYSeries("Series 1");
    series1.add(10.0, 10.0);
    series1.add(20.0, 20.0);
    series1.add(30.0, 30.0);
    XYDataset dataset = new XYSeriesCollection(series1);
    LocalListener l = new LocalListener();
    this.chart.addChangeListener(l);
    XYPlot plot = (XYPlot)this.chart.getPlot();
    plot.setDataset(dataset);
    assertEquals(true, l.flag);
    ValueAxis axis = plot.getRangeAxis();
    Range range = axis.getRange();
    
}

---
---
public void testReplaceDataset_catena_1() {
    XYSeries series1 = new XYSeries("Series 1");
    series1.add(10.0, 10.0);
    series1.add(20.0, 20.0);
    series1.add(30.0, 30.0);
    XYDataset dataset = new XYSeriesCollection(series1);
    LocalListener l = new LocalListener();
    this.chart.addChangeListener(l);
    XYPlot plot = (XYPlot)this.chart.getPlot();
    plot.setDataset(dataset);
    ValueAxis axis = plot.getRangeAxis();
    Range range = axis.getRange();
    assertTrue("Expecting the lower bound of the range to be around 10: " + range.getLowerBound(), range.getLowerBound() <= 10);
    
}

---
---
public void testReplaceDataset_catena_2() {
    XYSeries series1 = new XYSeries("Series 1");
    series1.add(10.0, 10.0);
    series1.add(20.0, 20.0);
    series1.add(30.0, 30.0);
    XYDataset dataset = new XYSeriesCollection(series1);
    LocalListener l = new LocalListener();
    this.chart.addChangeListener(l);
    XYPlot plot = (XYPlot)this.chart.getPlot();
    plot.setDataset(dataset);
    ValueAxis axis = plot.getRangeAxis();
    Range range = axis.getRange();
    assertTrue("Expecting the upper bound of the range to be around 30: " + range.getUpperBound(), range.getUpperBound() >= 30);
    
}

---
@@@
Split test: org.jfree.chart.junit.TimeSeriesChartTests::testDrawWithNullInfo
file: /root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/junit/TimeSeriesChartTests.java
Begin: Pos(102, 12)
End: Pos(120, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/junit/TimeSeriesChartTests.java
Name: testDrawWithNullInfo
Childs: [StatementAssertion<Begin: Pos(118, 9), End: Pos(118, 28)>,
]
@@@
Split test: org.jfree.chart.junit.TimeSeriesChartTests::testSetSeriesToolTipGenerator
file: /root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/junit/TimeSeriesChartTests.java
Begin: Pos(152, 12)
End: Pos(159, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/junit/TimeSeriesChartTests.java
Name: testSetSeriesToolTipGenerator
Childs: [StatementAssertion<Begin: Pos(158, 9), End: Pos(158, 30)>,
]
@@@
Split test: org.jfree.chart.junit.TimeSeriesChartTests::testReplaceDataset
file: /root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/junit/TimeSeriesChartTests.java
Begin: Pos(125, 12)
End: Pos(146, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/junit/TimeSeriesChartTests.java
Name: testReplaceDataset
Childs: [StatementAssertion<Begin: Pos(138, 9), End: Pos(138, 35)>,
StatementAssertion<Begin: Pos(141, 9), End: Pos(142, 73)>,
StatementAssertion<Begin: Pos(143, 9), End: Pos(144, 73)>,
]
---
public void testReplaceDataset_catena_0() {
    XYSeries series1 = new XYSeries("Series 1");
    series1.add(10.0, 10.0);
    series1.add(20.0, 20.0);
    series1.add(30.0, 30.0);
    XYDataset dataset = new XYSeriesCollection(series1);
    LocalListener l = new LocalListener();
    this.chart.addChangeListener(l);
    XYPlot plot = (XYPlot)this.chart.getPlot();
    plot.setDataset(dataset);
    assertEquals(true, l.flag);
    ValueAxis axis = plot.getRangeAxis();
    Range range = axis.getRange();
    
}

---
---
public void testReplaceDataset_catena_1() {
    XYSeries series1 = new XYSeries("Series 1");
    series1.add(10.0, 10.0);
    series1.add(20.0, 20.0);
    series1.add(30.0, 30.0);
    XYDataset dataset = new XYSeriesCollection(series1);
    LocalListener l = new LocalListener();
    this.chart.addChangeListener(l);
    XYPlot plot = (XYPlot)this.chart.getPlot();
    plot.setDataset(dataset);
    ValueAxis axis = plot.getRangeAxis();
    Range range = axis.getRange();
    assertTrue("Expecting the lower bound of the range to be around 10: " + range.getLowerBound(), range.getLowerBound() <= 10);
    
}

---
---
public void testReplaceDataset_catena_2() {
    XYSeries series1 = new XYSeries("Series 1");
    series1.add(10.0, 10.0);
    series1.add(20.0, 20.0);
    series1.add(30.0, 30.0);
    XYDataset dataset = new XYSeriesCollection(series1);
    LocalListener l = new LocalListener();
    this.chart.addChangeListener(l);
    XYPlot plot = (XYPlot)this.chart.getPlot();
    plot.setDataset(dataset);
    ValueAxis axis = plot.getRangeAxis();
    Range range = axis.getRange();
    assertTrue("Expecting the upper bound of the range to be around 30: " + range.getUpperBound(), range.getUpperBound() >= 30);
    
}

---
@@@
Split test: org.jfree.chart.junit.XYAreaChartTests::testDrawWithNullInfo
file: /root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/junit/XYAreaChartTests.java
Begin: Pos(103, 12)
End: Pos(121, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/junit/XYAreaChartTests.java
Name: testDrawWithNullInfo
Childs: [StatementAssertion<Begin: Pos(119, 9), End: Pos(119, 28)>,
]
@@@
Split test: org.jfree.chart.junit.XYAreaChartTests::testSetSeriesToolTipGenerator
file: /root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/junit/XYAreaChartTests.java
Begin: Pos(153, 12)
End: Pos(161, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/junit/XYAreaChartTests.java
Name: testSetSeriesToolTipGenerator
Childs: [StatementAssertion<Begin: Pos(160, 9), End: Pos(160, 30)>,
]
@@@
Split test: org.jfree.chart.junit.XYAreaChartTests::testReplaceDataset
file: /root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/junit/XYAreaChartTests.java
Begin: Pos(126, 12)
End: Pos(147, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/junit/XYAreaChartTests.java
Name: testReplaceDataset
Childs: [StatementAssertion<Begin: Pos(139, 9), End: Pos(139, 35)>,
StatementAssertion<Begin: Pos(142, 9), End: Pos(143, 73)>,
StatementAssertion<Begin: Pos(144, 9), End: Pos(145, 73)>,
]
---
public void testReplaceDataset_catena_0() {
    XYSeries series1 = new XYSeries("Series 1");
    series1.add(10.0, 10.0);
    series1.add(20.0, 20.0);
    series1.add(30.0, 30.0);
    XYDataset dataset = new XYSeriesCollection(series1);
    LocalListener l = new LocalListener();
    this.chart.addChangeListener(l);
    XYPlot plot = (XYPlot)this.chart.getPlot();
    plot.setDataset(dataset);
    assertEquals(true, l.flag);
    ValueAxis axis = plot.getRangeAxis();
    Range range = axis.getRange();
    
}

---
---
public void testReplaceDataset_catena_1() {
    XYSeries series1 = new XYSeries("Series 1");
    series1.add(10.0, 10.0);
    series1.add(20.0, 20.0);
    series1.add(30.0, 30.0);
    XYDataset dataset = new XYSeriesCollection(series1);
    LocalListener l = new LocalListener();
    this.chart.addChangeListener(l);
    XYPlot plot = (XYPlot)this.chart.getPlot();
    plot.setDataset(dataset);
    ValueAxis axis = plot.getRangeAxis();
    Range range = axis.getRange();
    assertTrue("Expecting the lower bound of the range to be around 10: " + range.getLowerBound(), range.getLowerBound() <= 10);
    
}

---
---
public void testReplaceDataset_catena_2() {
    XYSeries series1 = new XYSeries("Series 1");
    series1.add(10.0, 10.0);
    series1.add(20.0, 20.0);
    series1.add(30.0, 30.0);
    XYDataset dataset = new XYSeriesCollection(series1);
    LocalListener l = new LocalListener();
    this.chart.addChangeListener(l);
    XYPlot plot = (XYPlot)this.chart.getPlot();
    plot.setDataset(dataset);
    ValueAxis axis = plot.getRangeAxis();
    Range range = axis.getRange();
    assertTrue("Expecting the upper bound of the range to be around 30: " + range.getUpperBound(), range.getUpperBound() >= 30);
    
}

---
@@@
Split test: org.jfree.chart.junit.XYStepAreaChartTests::testDrawWithNullInfo
file: /root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/junit/XYStepAreaChartTests.java
Begin: Pos(103, 12)
End: Pos(121, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/junit/XYStepAreaChartTests.java
Name: testDrawWithNullInfo
Childs: [StatementAssertion<Begin: Pos(119, 9), End: Pos(119, 28)>,
]
@@@
Split test: org.jfree.chart.junit.XYStepAreaChartTests::testSetSeriesToolTipGenerator
file: /root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/junit/XYStepAreaChartTests.java
Begin: Pos(153, 12)
End: Pos(160, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/junit/XYStepAreaChartTests.java
Name: testSetSeriesToolTipGenerator
Childs: [StatementAssertion<Begin: Pos(159, 9), End: Pos(159, 30)>,
]
@@@
Split test: org.jfree.chart.junit.XYStepAreaChartTests::testReplaceDataset
file: /root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/junit/XYStepAreaChartTests.java
Begin: Pos(126, 12)
End: Pos(147, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/junit/XYStepAreaChartTests.java
Name: testReplaceDataset
Childs: [StatementAssertion<Begin: Pos(139, 9), End: Pos(139, 35)>,
StatementAssertion<Begin: Pos(142, 9), End: Pos(143, 73)>,
StatementAssertion<Begin: Pos(144, 9), End: Pos(145, 73)>,
]
---
public void testReplaceDataset_catena_0() {
    XYSeries series1 = new XYSeries("Series 1");
    series1.add(10.0, 10.0);
    series1.add(20.0, 20.0);
    series1.add(30.0, 30.0);
    XYDataset dataset = new XYSeriesCollection(series1);
    LocalListener l = new LocalListener();
    this.chart.addChangeListener(l);
    XYPlot plot = (XYPlot)this.chart.getPlot();
    plot.setDataset(dataset);
    assertEquals(true, l.flag);
    ValueAxis axis = plot.getRangeAxis();
    Range range = axis.getRange();
    
}

---
---
public void testReplaceDataset_catena_1() {
    XYSeries series1 = new XYSeries("Series 1");
    series1.add(10.0, 10.0);
    series1.add(20.0, 20.0);
    series1.add(30.0, 30.0);
    XYDataset dataset = new XYSeriesCollection(series1);
    LocalListener l = new LocalListener();
    this.chart.addChangeListener(l);
    XYPlot plot = (XYPlot)this.chart.getPlot();
    plot.setDataset(dataset);
    ValueAxis axis = plot.getRangeAxis();
    Range range = axis.getRange();
    assertTrue("Expecting the lower bound of the range to be around 10: " + range.getLowerBound(), range.getLowerBound() <= 10);
    
}

---
---
public void testReplaceDataset_catena_2() {
    XYSeries series1 = new XYSeries("Series 1");
    series1.add(10.0, 10.0);
    series1.add(20.0, 20.0);
    series1.add(30.0, 30.0);
    XYDataset dataset = new XYSeriesCollection(series1);
    LocalListener l = new LocalListener();
    this.chart.addChangeListener(l);
    XYPlot plot = (XYPlot)this.chart.getPlot();
    plot.setDataset(dataset);
    ValueAxis axis = plot.getRangeAxis();
    Range range = axis.getRange();
    assertTrue("Expecting the upper bound of the range to be around 30: " + range.getUpperBound(), range.getUpperBound() >= 30);
    
}

---
@@@
Split test: org.jfree.chart.junit.XYStepChartTests::testDrawWithNullInfo
file: /root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/junit/XYStepChartTests.java
Begin: Pos(103, 12)
End: Pos(121, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/junit/XYStepChartTests.java
Name: testDrawWithNullInfo
Childs: [StatementAssertion<Begin: Pos(119, 9), End: Pos(119, 28)>,
]
@@@
Split test: org.jfree.chart.junit.XYStepChartTests::testSetSeriesToolTipGenerator
file: /root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/junit/XYStepChartTests.java
Begin: Pos(153, 12)
End: Pos(160, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/junit/XYStepChartTests.java
Name: testSetSeriesToolTipGenerator
Childs: [StatementAssertion<Begin: Pos(159, 9), End: Pos(159, 30)>,
]
@@@
Split test: org.jfree.chart.junit.XYStepChartTests::testReplaceDataset
file: /root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/junit/XYStepChartTests.java
Begin: Pos(126, 12)
End: Pos(147, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/junit/XYStepChartTests.java
Name: testReplaceDataset
Childs: [StatementAssertion<Begin: Pos(139, 9), End: Pos(139, 35)>,
StatementAssertion<Begin: Pos(142, 9), End: Pos(143, 73)>,
StatementAssertion<Begin: Pos(144, 9), End: Pos(145, 73)>,
]
---
public void testReplaceDataset_catena_0() {
    XYSeries series1 = new XYSeries("Series 1");
    series1.add(10.0, 10.0);
    series1.add(20.0, 20.0);
    series1.add(30.0, 30.0);
    XYDataset dataset = new XYSeriesCollection(series1);
    LocalListener l = new LocalListener();
    this.chart.addChangeListener(l);
    XYPlot plot = (XYPlot)this.chart.getPlot();
    plot.setDataset(dataset);
    assertEquals(true, l.flag);
    ValueAxis axis = plot.getRangeAxis();
    Range range = axis.getRange();
    
}

---
---
public void testReplaceDataset_catena_1() {
    XYSeries series1 = new XYSeries("Series 1");
    series1.add(10.0, 10.0);
    series1.add(20.0, 20.0);
    series1.add(30.0, 30.0);
    XYDataset dataset = new XYSeriesCollection(series1);
    LocalListener l = new LocalListener();
    this.chart.addChangeListener(l);
    XYPlot plot = (XYPlot)this.chart.getPlot();
    plot.setDataset(dataset);
    ValueAxis axis = plot.getRangeAxis();
    Range range = axis.getRange();
    assertTrue("Expecting the lower bound of the range to be around 10: " + range.getLowerBound(), range.getLowerBound() <= 10);
    
}

---
---
public void testReplaceDataset_catena_2() {
    XYSeries series1 = new XYSeries("Series 1");
    series1.add(10.0, 10.0);
    series1.add(20.0, 20.0);
    series1.add(30.0, 30.0);
    XYDataset dataset = new XYSeriesCollection(series1);
    LocalListener l = new LocalListener();
    this.chart.addChangeListener(l);
    XYPlot plot = (XYPlot)this.chart.getPlot();
    plot.setDataset(dataset);
    ValueAxis axis = plot.getRangeAxis();
    Range range = axis.getRange();
    assertTrue("Expecting the upper bound of the range to be around 30: " + range.getUpperBound(), range.getUpperBound() >= 30);
    
}

---
@@@
Split test: org.jfree.chart.plot.junit.XYPlotTests::testDrawRangeGridlines
file: /root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/plot/junit/XYPlotTests.java
Begin: Pos(1051, 12)
End: Pos(1071, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/plot/junit/XYPlotTests.java
Name: testDrawRangeGridlines
Childs: [StatementAssertion<Begin: Pos(1070, 9), End: Pos(1070, 28)>,
]
--------------------
Run: Chart_21
@@@
Split test: org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests::testGetRangeBounds
file: /root/workbench/exportInfo/d4j_buggy/Chart_21/tests//org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java
Begin: Pos(270, 12)
End: Pos(294, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Chart_21/tests//org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java
Name: testGetRangeBounds
Childs: [StatementAssertion<Begin: Pos(275, 9), End: Pos(275, 68)>,
StatementAssertion<Begin: Pos(276, 9), End: Pos(276, 67)>,
StatementAssertion<Begin: Pos(280, 9), End: Pos(280, 68)>,
StatementAssertion<Begin: Pos(281, 9), End: Pos(281, 67)>,
StatementAssertion<Begin: Pos(285, 9), End: Pos(285, 68)>,
StatementAssertion<Begin: Pos(286, 9), End: Pos(286, 67)>,
StatementAssertion<Begin: Pos(292, 9), End: Pos(292, 68)>,
StatementAssertion<Begin: Pos(293, 9), End: Pos(293, 67)>,
]
---
public void testGetRangeBounds_catena_0() {
    DefaultBoxAndWhiskerCategoryDataset d1 = new DefaultBoxAndWhiskerCategoryDataset();
    d1.add(new BoxAndWhiskerItem(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, new ArrayList()), "R1", "C1");
    assertEquals(new Range(7.0, 8.0), d1.getRangeBounds(false));
    d1.add(new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, new ArrayList()), "R1", "C1");
    d1.add(new BoxAndWhiskerItem(2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5, new ArrayList()), "R2", "C1");
    d1.add(new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 8.6, 9.6, new ArrayList()), "R1", "C1");
    
}

---
---
public void testGetRangeBounds_catena_1() {
    DefaultBoxAndWhiskerCategoryDataset d1 = new DefaultBoxAndWhiskerCategoryDataset();
    d1.add(new BoxAndWhiskerItem(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, new ArrayList()), "R1", "C1");
    assertEquals(new Range(7.0, 8.0), d1.getRangeBounds(true));
    d1.add(new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, new ArrayList()), "R1", "C1");
    d1.add(new BoxAndWhiskerItem(2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5, new ArrayList()), "R2", "C1");
    d1.add(new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 8.6, 9.6, new ArrayList()), "R1", "C1");
    
}

---
---
public void testGetRangeBounds_catena_2() {
    DefaultBoxAndWhiskerCategoryDataset d1 = new DefaultBoxAndWhiskerCategoryDataset();
    d1.add(new BoxAndWhiskerItem(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, new ArrayList()), "R1", "C1");
    d1.add(new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, new ArrayList()), "R1", "C1");
    assertEquals(new Range(7.5, 8.5), d1.getRangeBounds(false));
    d1.add(new BoxAndWhiskerItem(2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5, new ArrayList()), "R2", "C1");
    d1.add(new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 8.6, 9.6, new ArrayList()), "R1", "C1");
    
}

---
---
public void testGetRangeBounds_catena_3() {
    DefaultBoxAndWhiskerCategoryDataset d1 = new DefaultBoxAndWhiskerCategoryDataset();
    d1.add(new BoxAndWhiskerItem(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, new ArrayList()), "R1", "C1");
    d1.add(new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, new ArrayList()), "R1", "C1");
    assertEquals(new Range(7.5, 8.5), d1.getRangeBounds(true));
    d1.add(new BoxAndWhiskerItem(2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5, new ArrayList()), "R2", "C1");
    d1.add(new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 8.6, 9.6, new ArrayList()), "R1", "C1");
    
}

---
---
public void testGetRangeBounds_catena_4() {
    DefaultBoxAndWhiskerCategoryDataset d1 = new DefaultBoxAndWhiskerCategoryDataset();
    d1.add(new BoxAndWhiskerItem(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, new ArrayList()), "R1", "C1");
    d1.add(new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, new ArrayList()), "R1", "C1");
    d1.add(new BoxAndWhiskerItem(2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5, new ArrayList()), "R2", "C1");
    assertEquals(new Range(7.5, 9.5), d1.getRangeBounds(false));
    d1.add(new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 8.6, 9.6, new ArrayList()), "R1", "C1");
    
}

---
---
public void testGetRangeBounds_catena_5() {
    DefaultBoxAndWhiskerCategoryDataset d1 = new DefaultBoxAndWhiskerCategoryDataset();
    d1.add(new BoxAndWhiskerItem(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, new ArrayList()), "R1", "C1");
    d1.add(new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, new ArrayList()), "R1", "C1");
    d1.add(new BoxAndWhiskerItem(2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5, new ArrayList()), "R2", "C1");
    assertEquals(new Range(7.5, 9.5), d1.getRangeBounds(true));
    d1.add(new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 8.6, 9.6, new ArrayList()), "R1", "C1");
    
}

---
---
public void testGetRangeBounds_catena_6() {
    DefaultBoxAndWhiskerCategoryDataset d1 = new DefaultBoxAndWhiskerCategoryDataset();
    d1.add(new BoxAndWhiskerItem(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, new ArrayList()), "R1", "C1");
    d1.add(new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, new ArrayList()), "R1", "C1");
    d1.add(new BoxAndWhiskerItem(2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5, new ArrayList()), "R2", "C1");
    d1.add(new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 8.6, 9.6, new ArrayList()), "R1", "C1");
    assertEquals(new Range(8.5, 9.6), d1.getRangeBounds(false));
    
}

---
---
public void testGetRangeBounds_catena_7() {
    DefaultBoxAndWhiskerCategoryDataset d1 = new DefaultBoxAndWhiskerCategoryDataset();
    d1.add(new BoxAndWhiskerItem(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, new ArrayList()), "R1", "C1");
    d1.add(new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, new ArrayList()), "R1", "C1");
    d1.add(new BoxAndWhiskerItem(2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5, new ArrayList()), "R2", "C1");
    d1.add(new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 8.6, 9.6, new ArrayList()), "R1", "C1");
    assertEquals(new Range(8.5, 9.6), d1.getRangeBounds(true));
    
}

---
--------------------
Run: Chart_14
@@@
Split test: org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveRangeMarker
file: /root/workbench/exportInfo/d4j_buggy/Chart_14/tests//org/jfree/chart/plot/junit/CategoryPlotTests.java
Begin: Pos(778, 12)
End: Pos(781, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Chart_14/tests//org/jfree/chart/plot/junit/CategoryPlotTests.java
Name: testRemoveRangeMarker
Childs: [StatementAssertion<Begin: Pos(780, 6), End: Pos(780, 63)>,
]
@@@
Split test: org.jfree.chart.plot.junit.CategoryPlotTests::testRemoveDomainMarker
file: /root/workbench/exportInfo/d4j_buggy/Chart_14/tests//org/jfree/chart/plot/junit/CategoryPlotTests.java
Begin: Pos(769, 12)
End: Pos(772, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Chart_14/tests//org/jfree/chart/plot/junit/CategoryPlotTests.java
Name: testRemoveDomainMarker
Childs: [StatementAssertion<Begin: Pos(771, 6), End: Pos(771, 76)>,
]
@@@
Split test: org.jfree.chart.plot.junit.XYPlotTests::testRemoveRangeMarker
file: /root/workbench/exportInfo/d4j_buggy/Chart_14/tests//org/jfree/chart/plot/junit/XYPlotTests.java
Begin: Pos(1035, 12)
End: Pos(1038, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Chart_14/tests//org/jfree/chart/plot/junit/XYPlotTests.java
Name: testRemoveRangeMarker
Childs: [StatementAssertion<Begin: Pos(1037, 6), End: Pos(1037, 63)>,
]
@@@
Split test: org.jfree.chart.plot.junit.XYPlotTests::testRemoveDomainMarker
file: /root/workbench/exportInfo/d4j_buggy/Chart_14/tests//org/jfree/chart/plot/junit/XYPlotTests.java
Begin: Pos(1026, 12)
End: Pos(1029, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Chart_14/tests//org/jfree/chart/plot/junit/XYPlotTests.java
Name: testRemoveDomainMarker
Childs: [StatementAssertion<Begin: Pos(1028, 6), End: Pos(1028, 64)>,
]
--------------------
Run: Chart_16
@@@
Split test: org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests::testGetCategoryIndex
file: /root/workbench/exportInfo/d4j_buggy/Chart_16/tests//org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java
Begin: Pos(410, 12)
End: Pos(416, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Chart_16/tests//org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java
Name: testGetCategoryIndex
Childs: [StatementAssertion<Begin: Pos(415, 6), End: Pos(415, 53)>,
]
@@@
Split test: org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests::testSetCategoryKeys
file: /root/workbench/exportInfo/d4j_buggy/Chart_16/tests//org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java
Begin: Pos(432, 12)
End: Pos(445, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Chart_16/tests//org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java
Name: testSetCategoryKeys
Childs: [StatementAssertion<Begin: Pos(444, 6), End: Pos(444, 22)>,
]
@@@
Split test: org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests::testGetSeriesIndex
file: /root/workbench/exportInfo/d4j_buggy/Chart_16/tests//org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java
Begin: Pos(370, 12)
End: Pos(376, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Chart_16/tests//org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java
Name: testGetSeriesIndex
Childs: [StatementAssertion<Begin: Pos(375, 6), End: Pos(375, 51)>,
]
@@@
Split test: org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests::testGetRowCount
file: /root/workbench/exportInfo/d4j_buggy/Chart_16/tests//org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java
Begin: Pos(485, 12)
End: Pos(491, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Chart_16/tests//org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java
Name: testGetRowCount
Childs: [StatementAssertion<Begin: Pos(490, 9), End: Pos(490, 48)>,
]
@@@
Split test: org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests::testGetRowIndex
file: /root/workbench/exportInfo/d4j_buggy/Chart_16/tests//org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java
Begin: Pos(381, 12)
End: Pos(387, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Chart_16/tests//org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java
Name: testGetRowIndex
Childs: [StatementAssertion<Begin: Pos(386, 6), End: Pos(386, 48)>,
]
@@@
Split test: org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests::testGetColumnCount
file: /root/workbench/exportInfo/d4j_buggy/Chart_16/tests//org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java
Begin: Pos(474, 12)
End: Pos(480, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Chart_16/tests//org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java
Name: testGetColumnCount
Childs: [StatementAssertion<Begin: Pos(479, 9), End: Pos(479, 48)>,
]
@@@
Split test: org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests::testGetColumnIndex
file: /root/workbench/exportInfo/d4j_buggy/Chart_16/tests//org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java
Begin: Pos(421, 12)
End: Pos(427, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Chart_16/tests//org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java
Name: testGetColumnIndex
Childs: [StatementAssertion<Begin: Pos(426, 6), End: Pos(426, 51)>,
]
@@@
Split test: org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests::testCloning2
file: /root/workbench/exportInfo/d4j_buggy/Chart_16/tests//org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java
Begin: Pos(259, 12)
End: Pos(273, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Chart_16/tests//org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java
Name: testCloning2
Childs: [StatementAssertion<Begin: Pos(270, 9), End: Pos(270, 29)>,
StatementAssertion<Begin: Pos(271, 9), End: Pos(271, 51)>,
StatementAssertion<Begin: Pos(272, 9), End: Pos(272, 34)>,
]
---
public void testCloning2_catena_0() {
    DefaultIntervalCategoryDataset d1 = new DefaultIntervalCategoryDataset(new double[0][0], new double[0][0]);
    DefaultIntervalCategoryDataset d2 = null;
    try {
        d2 = (DefaultIntervalCategoryDataset)d1.clone();
        
    }
    catch(CloneNotSupportedException e) {
        e.printStackTrace();
        
    }
    assertTrue(d1 != d2);
    
}

---
---
public void testCloning2_catena_1() {
    DefaultIntervalCategoryDataset d1 = new DefaultIntervalCategoryDataset(new double[0][0], new double[0][0]);
    DefaultIntervalCategoryDataset d2 = null;
    try {
        d2 = (DefaultIntervalCategoryDataset)d1.clone();
        
    }
    catch(CloneNotSupportedException e) {
        e.printStackTrace();
        
    }
    assertTrue(d1.getClass() == d2.getClass());
    
}

---
---
public void testCloning2_catena_2() {
    DefaultIntervalCategoryDataset d1 = new DefaultIntervalCategoryDataset(new double[0][0], new double[0][0]);
    DefaultIntervalCategoryDataset d2 = null;
    try {
        d2 = (DefaultIntervalCategoryDataset)d1.clone();
        
    }
    catch(CloneNotSupportedException e) {
        e.printStackTrace();
        
    }
    assertTrue(d1.equals(d2));
    
}

---
--------------------
Run: Chart_18
@@@
Split test: org.jfree.data.category.junit.DefaultCategoryDatasetTests::testBug1835955
file: /root/workbench/exportInfo/d4j_buggy/Chart_18/tests//org/jfree/data/category/junit/DefaultCategoryDatasetTests.java
Begin: Pos(345, 12)
End: Pos(352, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Chart_18/tests//org/jfree/data/category/junit/DefaultCategoryDatasetTests.java
Name: testBug1835955
Childs: [StatementAssertion<Begin: Pos(351, 6), End: Pos(351, 70)>,
]
@@@
Split test: org.jfree.data.junit.DefaultKeyedValues2DTests::testRemoveColumnByKey
file: /root/workbench/exportInfo/d4j_buggy/Chart_18/tests//org/jfree/data/junit/DefaultKeyedValues2DTests.java
Begin: Pos(349, 12)
End: Pos(366, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Chart_18/tests//org/jfree/data/junit/DefaultKeyedValues2DTests.java
Name: testRemoveColumnByKey
Childs: [StatementAssertion<Begin: Pos(355, 6), End: Pos(355, 70)>,
StatementAssertion<Begin: Pos(365, 6), End: Pos(365, 22)>,
]
---
public void testRemoveColumnByKey_catena_0() {
    DefaultKeyedValues2D d = new DefaultKeyedValues2D();
    d.addValue(new Double(1.0), "R1", "C1");
    d.addValue(new Double(2.0), "R2", "C2");
    d.removeColumn("C2");
    d.addValue(new Double(3.0), "R2", "C2");
    assertEquals(3.0, d.getValue("R2", "C2").doubleValue(), EPSILON);
    boolean pass = false;
    try {
        d.removeColumn("XXX");
        
    }
    catch(UnknownKeyException e) {
        pass = true;
        
    }
}

---
---
public void testRemoveColumnByKey_catena_1() {
    DefaultKeyedValues2D d = new DefaultKeyedValues2D();
    d.addValue(new Double(1.0), "R1", "C1");
    d.addValue(new Double(2.0), "R2", "C2");
    d.removeColumn("C2");
    d.addValue(new Double(3.0), "R2", "C2");
    boolean pass = false;
    try {
        d.removeColumn("XXX");
        
    }
    catch(UnknownKeyException e) {
        pass = true;
        
    }
    assertTrue(pass);
    
}

---
@@@
Split test: org.jfree.data.junit.DefaultKeyedValuesTests::testRemoveValue
file: /root/workbench/exportInfo/d4j_buggy/Chart_18/tests//org/jfree/data/junit/DefaultKeyedValuesTests.java
Begin: Pos(355, 12)
End: Pos(373, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Chart_18/tests//org/jfree/data/junit/DefaultKeyedValuesTests.java
Name: testRemoveValue
Childs: [StatementAssertion<Begin: Pos(361, 9), End: Pos(361, 44)>,
StatementAssertion<Begin: Pos(363, 9), End: Pos(363, 45)>,
StatementAssertion<Begin: Pos(372, 9), End: Pos(372, 25)>,
]
---
public void testRemoveValue_catena_0() {
    DefaultKeyedValues data = new DefaultKeyedValues();
    data.addValue("A", new Double(1.0));
    data.addValue("B", null);
    data.addValue("C", new Double(3.0));
    data.addValue("D", new Double(2.0));
    assertEquals(1, data.getIndex("B"));
    data.removeValue("B");
    boolean pass = false;
    try {
        data.removeValue("XXX");
        
    }
    catch(UnknownKeyException e) {
        pass = true;
        
    }
}

---
---
public void testRemoveValue_catena_1() {
    DefaultKeyedValues data = new DefaultKeyedValues();
    data.addValue("A", new Double(1.0));
    data.addValue("B", null);
    data.addValue("C", new Double(3.0));
    data.addValue("D", new Double(2.0));
    data.removeValue("B");
    assertEquals( - 1, data.getIndex("B"));
    boolean pass = false;
    try {
        data.removeValue("XXX");
        
    }
    catch(UnknownKeyException e) {
        pass = true;
        
    }
}

---
---
public void testRemoveValue_catena_2() {
    DefaultKeyedValues data = new DefaultKeyedValues();
    data.addValue("A", new Double(1.0));
    data.addValue("B", null);
    data.addValue("C", new Double(3.0));
    data.addValue("D", new Double(2.0));
    data.removeValue("B");
    boolean pass = false;
    try {
        data.removeValue("XXX");
        
    }
    catch(UnknownKeyException e) {
        pass = true;
        
    }
    assertTrue(pass);
    
}

---
@@@
Split test: org.jfree.data.junit.DefaultKeyedValuesTests::testGetIndex2
file: /root/workbench/exportInfo/d4j_buggy/Chart_18/tests//org/jfree/data/junit/DefaultKeyedValuesTests.java
Begin: Pos(238, 12)
End: Pos(245, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Chart_18/tests//org/jfree/data/junit/DefaultKeyedValuesTests.java
Name: testGetIndex2
Childs: [StatementAssertion<Begin: Pos(240, 6), End: Pos(240, 40)>,
StatementAssertion<Begin: Pos(242, 6), End: Pos(242, 39)>,
StatementAssertion<Begin: Pos(244, 6), End: Pos(244, 40)>,
]
---
public void testGetIndex2_catena_0() {
    DefaultKeyedValues v = new DefaultKeyedValues();
    assertEquals( - 1, v.getIndex("K1"));
    v.addValue("K1", 1.0);
    v.removeValue("K1");
    
}

---
---
public void testGetIndex2_catena_1() {
    DefaultKeyedValues v = new DefaultKeyedValues();
    v.addValue("K1", 1.0);
    assertEquals(0, v.getIndex("K1"));
    v.removeValue("K1");
    
}

---
---
public void testGetIndex2_catena_2() {
    DefaultKeyedValues v = new DefaultKeyedValues();
    v.addValue("K1", 1.0);
    v.removeValue("K1");
    assertEquals( - 1, v.getIndex("K1"));
    
}

---
--------------------
Run: Chart_19
@@@
Split test: org.jfree.chart.plot.junit.CategoryPlotTests::testGetRangeAxisIndex
file: /root/workbench/exportInfo/d4j_buggy/Chart_19/tests//org/jfree/chart/plot/junit/CategoryPlotTests.java
Begin: Pos(743, 12)
End: Pos(762, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Chart_19/tests//org/jfree/chart/plot/junit/CategoryPlotTests.java
Name: testGetRangeAxisIndex
Childs: [StatementAssertion<Begin: Pos(749, 9), End: Pos(749, 60)>,
StatementAssertion<Begin: Pos(750, 9), End: Pos(750, 61)>,
StatementAssertion<Begin: Pos(752, 9), End: Pos(752, 60)>,
StatementAssertion<Begin: Pos(753, 9), End: Pos(753, 71)>,
StatementAssertion<Begin: Pos(761, 9), End: Pos(761, 25)>,
]
---
public void testGetRangeAxisIndex_catena_0() {
    CategoryAxis domainAxis1 = new CategoryAxis("X1");
    NumberAxis rangeAxis1 = new NumberAxis("Y1");
    NumberAxis rangeAxis2 = new NumberAxis("Y2");
    CategoryPlot plot = new CategoryPlot(null, domainAxis1, rangeAxis1, null);
    assertEquals(0, plot.getRangeAxisIndex(rangeAxis1));
    plot.setRangeAxis(1, rangeAxis2);
    boolean pass = false;
    try {
        plot.getRangeAxisIndex(null);
        
    }
    catch(IllegalArgumentException e) {
        pass = true;
        
    }
}

---
---
public void testGetRangeAxisIndex_catena_1() {
    CategoryAxis domainAxis1 = new CategoryAxis("X1");
    NumberAxis rangeAxis1 = new NumberAxis("Y1");
    NumberAxis rangeAxis2 = new NumberAxis("Y2");
    CategoryPlot plot = new CategoryPlot(null, domainAxis1, rangeAxis1, null);
    assertEquals( - 1, plot.getRangeAxisIndex(rangeAxis2));
    plot.setRangeAxis(1, rangeAxis2);
    boolean pass = false;
    try {
        plot.getRangeAxisIndex(null);
        
    }
    catch(IllegalArgumentException e) {
        pass = true;
        
    }
}

---
---
public void testGetRangeAxisIndex_catena_2() {
    CategoryAxis domainAxis1 = new CategoryAxis("X1");
    NumberAxis rangeAxis1 = new NumberAxis("Y1");
    NumberAxis rangeAxis2 = new NumberAxis("Y2");
    CategoryPlot plot = new CategoryPlot(null, domainAxis1, rangeAxis1, null);
    plot.setRangeAxis(1, rangeAxis2);
    assertEquals(1, plot.getRangeAxisIndex(rangeAxis2));
    boolean pass = false;
    try {
        plot.getRangeAxisIndex(null);
        
    }
    catch(IllegalArgumentException e) {
        pass = true;
        
    }
}

---
---
public void testGetRangeAxisIndex_catena_3() {
    CategoryAxis domainAxis1 = new CategoryAxis("X1");
    NumberAxis rangeAxis1 = new NumberAxis("Y1");
    NumberAxis rangeAxis2 = new NumberAxis("Y2");
    CategoryPlot plot = new CategoryPlot(null, domainAxis1, rangeAxis1, null);
    plot.setRangeAxis(1, rangeAxis2);
    assertEquals( - 1, plot.getRangeAxisIndex(new NumberAxis("Y2")));
    boolean pass = false;
    try {
        plot.getRangeAxisIndex(null);
        
    }
    catch(IllegalArgumentException e) {
        pass = true;
        
    }
}

---
---
public void testGetRangeAxisIndex_catena_4() {
    CategoryAxis domainAxis1 = new CategoryAxis("X1");
    NumberAxis rangeAxis1 = new NumberAxis("Y1");
    NumberAxis rangeAxis2 = new NumberAxis("Y2");
    CategoryPlot plot = new CategoryPlot(null, domainAxis1, rangeAxis1, null);
    plot.setRangeAxis(1, rangeAxis2);
    boolean pass = false;
    try {
        plot.getRangeAxisIndex(null);
        
    }
    catch(IllegalArgumentException e) {
        pass = true;
        
    }
    assertTrue(pass);
    
}

---
@@@
Split test: org.jfree.chart.plot.junit.CategoryPlotTests::testGetDomainAxisIndex
file: /root/workbench/exportInfo/d4j_buggy/Chart_19/tests//org/jfree/chart/plot/junit/CategoryPlotTests.java
Begin: Pos(719, 12)
End: Pos(738, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Chart_19/tests//org/jfree/chart/plot/junit/CategoryPlotTests.java
Name: testGetDomainAxisIndex
Childs: [StatementAssertion<Begin: Pos(725, 9), End: Pos(725, 62)>,
StatementAssertion<Begin: Pos(726, 9), End: Pos(726, 63)>,
StatementAssertion<Begin: Pos(728, 9), End: Pos(728, 62)>,
StatementAssertion<Begin: Pos(729, 9), End: Pos(729, 74)>,
StatementAssertion<Begin: Pos(737, 9), End: Pos(737, 25)>,
]
---
public void testGetDomainAxisIndex_catena_0() {
    CategoryAxis domainAxis1 = new CategoryAxis("X1");
    CategoryAxis domainAxis2 = new CategoryAxis("X2");
    NumberAxis rangeAxis1 = new NumberAxis("Y1");
    CategoryPlot plot = new CategoryPlot(null, domainAxis1, rangeAxis1, null);
    assertEquals(0, plot.getDomainAxisIndex(domainAxis1));
    plot.setDomainAxis(1, domainAxis2);
    boolean pass = false;
    try {
        plot.getDomainAxisIndex(null);
        
    }
    catch(IllegalArgumentException e) {
        pass = true;
        
    }
}

---
---
public void testGetDomainAxisIndex_catena_1() {
    CategoryAxis domainAxis1 = new CategoryAxis("X1");
    CategoryAxis domainAxis2 = new CategoryAxis("X2");
    NumberAxis rangeAxis1 = new NumberAxis("Y1");
    CategoryPlot plot = new CategoryPlot(null, domainAxis1, rangeAxis1, null);
    assertEquals( - 1, plot.getDomainAxisIndex(domainAxis2));
    plot.setDomainAxis(1, domainAxis2);
    boolean pass = false;
    try {
        plot.getDomainAxisIndex(null);
        
    }
    catch(IllegalArgumentException e) {
        pass = true;
        
    }
}

---
---
public void testGetDomainAxisIndex_catena_2() {
    CategoryAxis domainAxis1 = new CategoryAxis("X1");
    CategoryAxis domainAxis2 = new CategoryAxis("X2");
    NumberAxis rangeAxis1 = new NumberAxis("Y1");
    CategoryPlot plot = new CategoryPlot(null, domainAxis1, rangeAxis1, null);
    plot.setDomainAxis(1, domainAxis2);
    assertEquals(1, plot.getDomainAxisIndex(domainAxis2));
    boolean pass = false;
    try {
        plot.getDomainAxisIndex(null);
        
    }
    catch(IllegalArgumentException e) {
        pass = true;
        
    }
}

---
---
public void testGetDomainAxisIndex_catena_3() {
    CategoryAxis domainAxis1 = new CategoryAxis("X1");
    CategoryAxis domainAxis2 = new CategoryAxis("X2");
    NumberAxis rangeAxis1 = new NumberAxis("Y1");
    CategoryPlot plot = new CategoryPlot(null, domainAxis1, rangeAxis1, null);
    plot.setDomainAxis(1, domainAxis2);
    assertEquals( - 1, plot.getDomainAxisIndex(new CategoryAxis("X2")));
    boolean pass = false;
    try {
        plot.getDomainAxisIndex(null);
        
    }
    catch(IllegalArgumentException e) {
        pass = true;
        
    }
}

---
---
public void testGetDomainAxisIndex_catena_4() {
    CategoryAxis domainAxis1 = new CategoryAxis("X1");
    CategoryAxis domainAxis2 = new CategoryAxis("X2");
    NumberAxis rangeAxis1 = new NumberAxis("Y1");
    CategoryPlot plot = new CategoryPlot(null, domainAxis1, rangeAxis1, null);
    plot.setDomainAxis(1, domainAxis2);
    boolean pass = false;
    try {
        plot.getDomainAxisIndex(null);
        
    }
    catch(IllegalArgumentException e) {
        pass = true;
        
    }
    assertTrue(pass);
    
}

---
--------------------
Run: Chart_26
@@@
Split test: org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo
file: /root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/junit/AreaChartTests.java
Begin: Pos(135, 12)
End: Pos(150, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/junit/AreaChartTests.java
Name: testDrawWithNullInfo
Childs: [StatementAssertion<Begin: Pos(149, 9), End: Pos(149, 28)>,
]
@@@
Split test: org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo
file: /root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/junit/BarChart3DTests.java
Begin: Pos(111, 12)
End: Pos(126, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/junit/BarChart3DTests.java
Name: testDrawWithNullInfo
Childs: [StatementAssertion<Begin: Pos(125, 9), End: Pos(125, 28)>,
]
@@@
Split test: org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo
file: /root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/junit/BarChartTests.java
Begin: Pos(111, 12)
End: Pos(130, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/junit/BarChartTests.java
Name: testDrawWithNullInfo
Childs: [StatementAssertion<Begin: Pos(128, 9), End: Pos(128, 28)>,
]
@@@
Split test: org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo
file: /root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/junit/GanttChartTests.java
Begin: Pos(110, 12)
End: Pos(125, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/junit/GanttChartTests.java
Name: testDrawWithNullInfo
Childs: [StatementAssertion<Begin: Pos(124, 9), End: Pos(124, 28)>,
]
@@@
Split test: org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2
file: /root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/junit/GanttChartTests.java
Begin: Pos(131, 12)
End: Pos(144, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/junit/GanttChartTests.java
Name: testDrawWithNullInfo2
Childs: [StatementAssertion<Begin: Pos(143, 9), End: Pos(143, 28)>,
]
@@@
Split test: org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo
file: /root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/junit/LineChart3DTests.java
Begin: Pos(108, 12)
End: Pos(125, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/junit/LineChart3DTests.java
Name: testDrawWithNullInfo
Childs: [StatementAssertion<Begin: Pos(123, 9), End: Pos(123, 28)>,
]
@@@
Split test: org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo
file: /root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/junit/LineChartTests.java
Begin: Pos(108, 12)
End: Pos(125, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/junit/LineChartTests.java
Name: testDrawWithNullInfo
Childs: [StatementAssertion<Begin: Pos(123, 9), End: Pos(123, 28)>,
]
@@@
Split test: org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo
file: /root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/junit/StackedAreaChartTests.java
Begin: Pos(108, 12)
End: Pos(125, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/junit/StackedAreaChartTests.java
Name: testDrawWithNullInfo
Childs: [StatementAssertion<Begin: Pos(123, 9), End: Pos(123, 28)>,
]
@@@
Split test: org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo
file: /root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/junit/StackedBarChart3DTests.java
Begin: Pos(108, 12)
End: Pos(125, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/junit/StackedBarChart3DTests.java
Name: testDrawWithNullInfo
Childs: [StatementAssertion<Begin: Pos(123, 9), End: Pos(123, 28)>,
]
@@@
Split test: org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo
file: /root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/junit/StackedBarChartTests.java
Begin: Pos(112, 12)
End: Pos(131, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/junit/StackedBarChartTests.java
Name: testDrawWithNullInfo
Childs: [StatementAssertion<Begin: Pos(129, 9), End: Pos(129, 28)>,
]
@@@
Split test: org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo
file: /root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/junit/WaterfallChartTests.java
Begin: Pos(104, 12)
End: Pos(123, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/junit/WaterfallChartTests.java
Name: testDrawWithNullInfo
Childs: [StatementAssertion<Begin: Pos(121, 9), End: Pos(121, 28)>,
]
@@@
Split test: org.jfree.chart.plot.junit.CategoryPlotTests::test1654215
file: /root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/plot/junit/CategoryPlotTests.java
Begin: Pos(686, 12)
End: Pos(706, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/plot/junit/CategoryPlotTests.java
Name: test1654215
Childs: [StatementAssertion<Begin: Pos(705, 9), End: Pos(705, 28)>,
]
@@@
Split test: org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3
file: /root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/plot/junit/CategoryPlotTests.java
Begin: Pos(475, 12)
End: Pos(515, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/plot/junit/CategoryPlotTests.java
Name: testSerialization3
Childs: [StatementAssertion<Begin: Pos(502, 13), End: Pos(502, 31)>,
StatementAssertion<Begin: Pos(514, 9), End: Pos(514, 27)>,
]
---
public void testSerialization3_catena_0() {
    DefaultCategoryDataset dataset = new DefaultCategoryDataset();
    JFreeChart chart = ChartFactory.createBarChart("Test Chart", "Category Axis", "Value Axis", dataset, PlotOrientation.VERTICAL, true, true, false);
    JFreeChart chart2 = null;
    try {
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(chart);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));
        chart2 = (JFreeChart)in.readObject();
        in.close();
        
    }
    catch(Exception e) {
        fail(e.toString());
        
    }
    boolean passed = true;
    try {
        chart2.createBufferedImage(300, 200);
        
    }
    catch(Exception e) {
        passed = false;
        e.printStackTrace();
        
    }
}

---
---
public void testSerialization3_catena_1() {
    DefaultCategoryDataset dataset = new DefaultCategoryDataset();
    JFreeChart chart = ChartFactory.createBarChart("Test Chart", "Category Axis", "Value Axis", dataset, PlotOrientation.VERTICAL, true, true, false);
    JFreeChart chart2 = null;
    try {
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(chart);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));
        chart2 = (JFreeChart)in.readObject();
        in.close();
        
    }
    catch(Exception e) {
        
    }
    boolean passed = true;
    try {
        chart2.createBufferedImage(300, 200);
        
    }
    catch(Exception e) {
        passed = false;
        e.printStackTrace();
        
    }
    assertTrue(passed);
    
}

---
@@@
Split test: org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4
file: /root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/plot/junit/CategoryPlotTests.java
Begin: Pos(520, 12)
End: Pos(564, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/plot/junit/CategoryPlotTests.java
Name: testSerialization4
Childs: [StatementAssertion<Begin: Pos(550, 13), End: Pos(550, 31)>,
StatementAssertion<Begin: Pos(552, 9), End: Pos(552, 36)>,
StatementAssertion<Begin: Pos(563, 9), End: Pos(563, 27)>,
]
---
public void testSerialization4_catena_0() {
    DefaultCategoryDataset dataset = new DefaultCategoryDataset();
    JFreeChart chart = ChartFactory.createBarChart("Test Chart", "Category Axis", "Value Axis", dataset, PlotOrientation.VERTICAL, true, true, false);
    CategoryPlot plot = (CategoryPlot)chart.getPlot();
    plot.addRangeMarker(new ValueMarker(1.1), Layer.FOREGROUND);
    plot.addRangeMarker(new IntervalMarker(2.2, 3.3), Layer.BACKGROUND);
    JFreeChart chart2 = null;
    try {
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(chart);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));
        chart2 = (JFreeChart)in.readObject();
        in.close();
        
    }
    catch(Exception e) {
        fail(e.toString());
        
    }
    boolean passed = true;
    try {
        chart2.createBufferedImage(300, 200);
        
    }
    catch(Exception e) {
        passed = false;
        e.printStackTrace();
        
    }
}

---
---
public void testSerialization4_catena_1() {
    DefaultCategoryDataset dataset = new DefaultCategoryDataset();
    JFreeChart chart = ChartFactory.createBarChart("Test Chart", "Category Axis", "Value Axis", dataset, PlotOrientation.VERTICAL, true, true, false);
    CategoryPlot plot = (CategoryPlot)chart.getPlot();
    plot.addRangeMarker(new ValueMarker(1.1), Layer.FOREGROUND);
    plot.addRangeMarker(new IntervalMarker(2.2, 3.3), Layer.BACKGROUND);
    JFreeChart chart2 = null;
    try {
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(chart);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));
        chart2 = (JFreeChart)in.readObject();
        in.close();
        
    }
    catch(Exception e) {
        
    }
    assertEquals(chart, chart2);
    boolean passed = true;
    try {
        chart2.createBufferedImage(300, 200);
        
    }
    catch(Exception e) {
        passed = false;
        e.printStackTrace();
        
    }
}

---
---
public void testSerialization4_catena_2() {
    DefaultCategoryDataset dataset = new DefaultCategoryDataset();
    JFreeChart chart = ChartFactory.createBarChart("Test Chart", "Category Axis", "Value Axis", dataset, PlotOrientation.VERTICAL, true, true, false);
    CategoryPlot plot = (CategoryPlot)chart.getPlot();
    plot.addRangeMarker(new ValueMarker(1.1), Layer.FOREGROUND);
    plot.addRangeMarker(new IntervalMarker(2.2, 3.3), Layer.BACKGROUND);
    JFreeChart chart2 = null;
    try {
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        ObjectOutput out = new ObjectOutputStream(buffer);
        out.writeObject(chart);
        out.close();
        ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));
        chart2 = (JFreeChart)in.readObject();
        in.close();
        
    }
    catch(Exception e) {
        
    }
    boolean passed = true;
    try {
        chart2.createBufferedImage(300, 200);
        
    }
    catch(Exception e) {
        passed = false;
        e.printStackTrace();
        
    }
    assertTrue(passed);
    
}

---
@@@
Split test: org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo
file: /root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/renderer/category/junit/BoxAndWhiskerRendererTests.java
Begin: Pos(188, 12)
End: Pos(209, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/renderer/category/junit/BoxAndWhiskerRendererTests.java
Name: testDrawWithNullInfo
Childs: [StatementAssertion<Begin: Pos(208, 9), End: Pos(208, 28)>,
]
@@@
Split test: org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo
file: /root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/renderer/category/junit/GroupedStackedBarRendererTests.java
Begin: Pos(154, 12)
End: Pos(177, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/renderer/category/junit/GroupedStackedBarRendererTests.java
Name: testDrawWithNullInfo
Childs: [StatementAssertion<Begin: Pos(176, 9), End: Pos(176, 28)>,
]
@@@
Split test: org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo
file: /root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/renderer/category/junit/IntervalBarRendererTests.java
Begin: Pos(155, 12)
End: Pos(177, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/renderer/category/junit/IntervalBarRendererTests.java
Name: testDrawWithNullInfo
Childs: [StatementAssertion<Begin: Pos(176, 9), End: Pos(176, 28)>,
]
@@@
Split test: org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo
file: /root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/renderer/category/junit/LayeredBarRendererTests.java
Begin: Pos(155, 12)
End: Pos(173, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/renderer/category/junit/LayeredBarRendererTests.java
Name: testDrawWithNullInfo
Childs: [StatementAssertion<Begin: Pos(172, 9), End: Pos(172, 28)>,
]
@@@
Split test: org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo
file: /root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/renderer/category/junit/LevelRendererTests.java
Begin: Pos(196, 12)
End: Pos(214, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/renderer/category/junit/LevelRendererTests.java
Name: testDrawWithNullInfo
Childs: [StatementAssertion<Begin: Pos(213, 9), End: Pos(213, 28)>,
]
@@@
Split test: org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo
file: /root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/renderer/category/junit/MinMaxCategoryRendererTests.java
Begin: Pos(154, 12)
End: Pos(172, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/renderer/category/junit/MinMaxCategoryRendererTests.java
Name: testDrawWithNullInfo
Childs: [StatementAssertion<Begin: Pos(171, 9), End: Pos(171, 28)>,
]
@@@
Split test: org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo
file: /root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/renderer/category/junit/StatisticalBarRendererTests.java
Begin: Pos(161, 12)
End: Pos(181, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/renderer/category/junit/StatisticalBarRendererTests.java
Name: testDrawWithNullInfo
Childs: [StatementAssertion<Begin: Pos(180, 9), End: Pos(180, 28)>,
]
@@@
Split test: org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo
file: /root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/renderer/category/junit/StatisticalLineAndShapeRendererTests.java
Begin: Pos(168, 12)
End: Pos(188, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/renderer/category/junit/StatisticalLineAndShapeRendererTests.java
Name: testDrawWithNullInfo
Childs: [StatementAssertion<Begin: Pos(187, 9), End: Pos(187, 28)>,
]
--------------------
Run: Chart_7
@@@
Split test: org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
file: /root/workbench/exportInfo/d4j_buggy/Chart_7/tests//org/jfree/data/time/junit/TimePeriodValuesTests.java
Begin: Pos(367, 12)
End: Pos(378, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Chart_7/tests//org/jfree/data/time/junit/TimePeriodValuesTests.java
Name: testGetMaxMiddleIndex
Childs: [StatementAssertion<Begin: Pos(369, 9), End: Pos(369, 48)>,
StatementAssertion<Begin: Pos(371, 9), End: Pos(371, 47)>,
StatementAssertion<Begin: Pos(373, 9), End: Pos(373, 47)>,
StatementAssertion<Begin: Pos(375, 9), End: Pos(375, 47)>,
StatementAssertion<Begin: Pos(377, 9), End: Pos(377, 47)>,
]
---
public void testGetMaxMiddleIndex_catena_0() {
    TimePeriodValues s = new TimePeriodValues("Test");
    assertEquals( - 1, s.getMaxMiddleIndex());
    s.add(new SimpleTimePeriod(100L, 200L), 1.0);
    s.add(new SimpleTimePeriod(300L, 400L), 2.0);
    s.add(new SimpleTimePeriod(0L, 50L), 3.0);
    s.add(new SimpleTimePeriod(150L, 200L), 4.0);
    
}

---
---
public void testGetMaxMiddleIndex_catena_1() {
    TimePeriodValues s = new TimePeriodValues("Test");
    s.add(new SimpleTimePeriod(100L, 200L), 1.0);
    assertEquals(0, s.getMaxMiddleIndex());
    s.add(new SimpleTimePeriod(300L, 400L), 2.0);
    s.add(new SimpleTimePeriod(0L, 50L), 3.0);
    s.add(new SimpleTimePeriod(150L, 200L), 4.0);
    
}

---
---
public void testGetMaxMiddleIndex_catena_2() {
    TimePeriodValues s = new TimePeriodValues("Test");
    s.add(new SimpleTimePeriod(100L, 200L), 1.0);
    s.add(new SimpleTimePeriod(300L, 400L), 2.0);
    assertEquals(1, s.getMaxMiddleIndex());
    s.add(new SimpleTimePeriod(0L, 50L), 3.0);
    s.add(new SimpleTimePeriod(150L, 200L), 4.0);
    
}

---
---
public void testGetMaxMiddleIndex_catena_3() {
    TimePeriodValues s = new TimePeriodValues("Test");
    s.add(new SimpleTimePeriod(100L, 200L), 1.0);
    s.add(new SimpleTimePeriod(300L, 400L), 2.0);
    s.add(new SimpleTimePeriod(0L, 50L), 3.0);
    assertEquals(1, s.getMaxMiddleIndex());
    s.add(new SimpleTimePeriod(150L, 200L), 4.0);
    
}

---
---
public void testGetMaxMiddleIndex_catena_4() {
    TimePeriodValues s = new TimePeriodValues("Test");
    s.add(new SimpleTimePeriod(100L, 200L), 1.0);
    s.add(new SimpleTimePeriod(300L, 400L), 2.0);
    s.add(new SimpleTimePeriod(0L, 50L), 3.0);
    s.add(new SimpleTimePeriod(150L, 200L), 4.0);
    assertEquals(1, s.getMaxMiddleIndex());
    
}

---
--------------------
Run: Chart_5
@@@
Split test: org.jfree.data.xy.junit.XYSeriesTests::testBug1955483
file: /root/workbench/exportInfo/d4j_buggy/Chart_5/tests//org/jfree/data/xy/junit/XYSeriesTests.java
Begin: Pos(476, 12)
End: Pos(483, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Chart_5/tests//org/jfree/data/xy/junit/XYSeriesTests.java
Name: testBug1955483
Childs: [StatementAssertion<Begin: Pos(480, 9), End: Pos(480, 54)>,
StatementAssertion<Begin: Pos(481, 9), End: Pos(481, 54)>,
StatementAssertion<Begin: Pos(482, 9), End: Pos(482, 47)>,
]
---
public void testBug1955483_catena_0() {
    XYSeries series = new XYSeries("Series", true, true);
    series.addOrUpdate(1.0, 1.0);
    series.addOrUpdate(1.0, 2.0);
    assertEquals(new Double(1.0), series.getY(0));
    
}

---
---
public void testBug1955483_catena_1() {
    XYSeries series = new XYSeries("Series", true, true);
    series.addOrUpdate(1.0, 1.0);
    series.addOrUpdate(1.0, 2.0);
    assertEquals(new Double(2.0), series.getY(1));
    
}

---
---
public void testBug1955483_catena_2() {
    XYSeries series = new XYSeries("Series", true, true);
    series.addOrUpdate(1.0, 1.0);
    series.addOrUpdate(1.0, 2.0);
    assertEquals(2, series.getItemCount());
    
}

---
--------------------
Run: Chart_15
@@@
Split test: org.jfree.chart.plot.junit.PiePlot3DTests::testDrawWithNullDataset
file: /root/workbench/exportInfo/d4j_buggy/Chart_15/tests//org/jfree/chart/plot/junit/PiePlot3DTests.java
Begin: Pos(136, 12)
End: Pos(152, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Chart_15/tests//org/jfree/chart/plot/junit/PiePlot3DTests.java
Name: testDrawWithNullDataset
Childs: [StatementAssertion<Begin: Pos(151, 9), End: Pos(151, 28)>,
]
--------------------
Run: Chart_2
@@@
Split test: org.jfree.data.general.junit.DatasetUtilitiesTests::testBug2849731_2
file: /root/workbench/exportInfo/d4j_buggy/Chart_2/tests//org/jfree/data/general/junit/DatasetUtilitiesTests.java
Begin: Pos(1270, 12)
End: Pos(1288, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Chart_2/tests//org/jfree/data/general/junit/DatasetUtilitiesTests.java
Name: testBug2849731_2
Childs: [StatementAssertion<Begin: Pos(1276, 9), End: Pos(1276, 54)>,
StatementAssertion<Begin: Pos(1277, 9), End: Pos(1277, 54)>,
StatementAssertion<Begin: Pos(1281, 9), End: Pos(1281, 54)>,
StatementAssertion<Begin: Pos(1282, 9), End: Pos(1282, 54)>,
StatementAssertion<Begin: Pos(1286, 9), End: Pos(1286, 54)>,
StatementAssertion<Begin: Pos(1287, 9), End: Pos(1287, 54)>,
]
---
public void testBug2849731_2_catena_0() {
    XYIntervalSeriesCollection d = new XYIntervalSeriesCollection();
    XYIntervalSeries s = new XYIntervalSeries("S1");
    s.add(1.0, Double.NaN, Double.NaN, Double.NaN, 1.5, Double.NaN);
    d.addSeries(s);
    Range r = DatasetUtilities.iterateDomainBounds(d);
    assertEquals(1.0, r.getLowerBound(), EPSILON);
    s.add(1.0, 1.5, Double.NaN, Double.NaN, 1.5, Double.NaN);
    r = DatasetUtilities.iterateDomainBounds(d);
    s.add(1.0, Double.NaN, 0.5, Double.NaN, 1.5, Double.NaN);
    r = DatasetUtilities.iterateDomainBounds(d);
    
}

---
---
public void testBug2849731_2_catena_1() {
    XYIntervalSeriesCollection d = new XYIntervalSeriesCollection();
    XYIntervalSeries s = new XYIntervalSeries("S1");
    s.add(1.0, Double.NaN, Double.NaN, Double.NaN, 1.5, Double.NaN);
    d.addSeries(s);
    Range r = DatasetUtilities.iterateDomainBounds(d);
    assertEquals(1.0, r.getUpperBound(), EPSILON);
    s.add(1.0, 1.5, Double.NaN, Double.NaN, 1.5, Double.NaN);
    r = DatasetUtilities.iterateDomainBounds(d);
    s.add(1.0, Double.NaN, 0.5, Double.NaN, 1.5, Double.NaN);
    r = DatasetUtilities.iterateDomainBounds(d);
    
}

---
---
public void testBug2849731_2_catena_2() {
    XYIntervalSeriesCollection d = new XYIntervalSeriesCollection();
    XYIntervalSeries s = new XYIntervalSeries("S1");
    s.add(1.0, Double.NaN, Double.NaN, Double.NaN, 1.5, Double.NaN);
    d.addSeries(s);
    Range r = DatasetUtilities.iterateDomainBounds(d);
    s.add(1.0, 1.5, Double.NaN, Double.NaN, 1.5, Double.NaN);
    r = DatasetUtilities.iterateDomainBounds(d);
    assertEquals(1.0, r.getLowerBound(), EPSILON);
    s.add(1.0, Double.NaN, 0.5, Double.NaN, 1.5, Double.NaN);
    r = DatasetUtilities.iterateDomainBounds(d);
    
}

---
---
public void testBug2849731_2_catena_3() {
    XYIntervalSeriesCollection d = new XYIntervalSeriesCollection();
    XYIntervalSeries s = new XYIntervalSeries("S1");
    s.add(1.0, Double.NaN, Double.NaN, Double.NaN, 1.5, Double.NaN);
    d.addSeries(s);
    Range r = DatasetUtilities.iterateDomainBounds(d);
    s.add(1.0, 1.5, Double.NaN, Double.NaN, 1.5, Double.NaN);
    r = DatasetUtilities.iterateDomainBounds(d);
    assertEquals(1.5, r.getUpperBound(), EPSILON);
    s.add(1.0, Double.NaN, 0.5, Double.NaN, 1.5, Double.NaN);
    r = DatasetUtilities.iterateDomainBounds(d);
    
}

---
---
public void testBug2849731_2_catena_4() {
    XYIntervalSeriesCollection d = new XYIntervalSeriesCollection();
    XYIntervalSeries s = new XYIntervalSeries("S1");
    s.add(1.0, Double.NaN, Double.NaN, Double.NaN, 1.5, Double.NaN);
    d.addSeries(s);
    Range r = DatasetUtilities.iterateDomainBounds(d);
    s.add(1.0, 1.5, Double.NaN, Double.NaN, 1.5, Double.NaN);
    r = DatasetUtilities.iterateDomainBounds(d);
    s.add(1.0, Double.NaN, 0.5, Double.NaN, 1.5, Double.NaN);
    r = DatasetUtilities.iterateDomainBounds(d);
    assertEquals(0.5, r.getLowerBound(), EPSILON);
    
}

---
---
public void testBug2849731_2_catena_5() {
    XYIntervalSeriesCollection d = new XYIntervalSeriesCollection();
    XYIntervalSeries s = new XYIntervalSeries("S1");
    s.add(1.0, Double.NaN, Double.NaN, Double.NaN, 1.5, Double.NaN);
    d.addSeries(s);
    Range r = DatasetUtilities.iterateDomainBounds(d);
    s.add(1.0, 1.5, Double.NaN, Double.NaN, 1.5, Double.NaN);
    r = DatasetUtilities.iterateDomainBounds(d);
    s.add(1.0, Double.NaN, 0.5, Double.NaN, 1.5, Double.NaN);
    r = DatasetUtilities.iterateDomainBounds(d);
    assertEquals(1.5, r.getUpperBound(), EPSILON);
    
}

---
@@@
Split test: org.jfree.data.general.junit.DatasetUtilitiesTests::testBug2849731_3
file: /root/workbench/exportInfo/d4j_buggy/Chart_2/tests//org/jfree/data/general/junit/DatasetUtilitiesTests.java
Begin: Pos(1293, 12)
End: Pos(1311, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Chart_2/tests//org/jfree/data/general/junit/DatasetUtilitiesTests.java
Name: testBug2849731_3
Childs: [StatementAssertion<Begin: Pos(1299, 9), End: Pos(1299, 54)>,
StatementAssertion<Begin: Pos(1300, 9), End: Pos(1300, 54)>,
StatementAssertion<Begin: Pos(1304, 9), End: Pos(1304, 54)>,
StatementAssertion<Begin: Pos(1305, 9), End: Pos(1305, 54)>,
StatementAssertion<Begin: Pos(1309, 9), End: Pos(1309, 54)>,
StatementAssertion<Begin: Pos(1310, 9), End: Pos(1310, 54)>,
]
---
public void testBug2849731_3_catena_0() {
    XYIntervalSeriesCollection d = new XYIntervalSeriesCollection();
    XYIntervalSeries s = new XYIntervalSeries("S1");
    s.add(1.0, Double.NaN, Double.NaN, 1.5, Double.NaN, Double.NaN);
    d.addSeries(s);
    Range r = DatasetUtilities.iterateRangeBounds(d);
    assertEquals(1.5, r.getLowerBound(), EPSILON);
    s.add(1.0, 1.5, Double.NaN, Double.NaN, Double.NaN, 2.5);
    r = DatasetUtilities.iterateRangeBounds(d);
    s.add(1.0, Double.NaN, 0.5, Double.NaN, 3.5, Double.NaN);
    r = DatasetUtilities.iterateRangeBounds(d);
    
}

---
---
public void testBug2849731_3_catena_1() {
    XYIntervalSeriesCollection d = new XYIntervalSeriesCollection();
    XYIntervalSeries s = new XYIntervalSeries("S1");
    s.add(1.0, Double.NaN, Double.NaN, 1.5, Double.NaN, Double.NaN);
    d.addSeries(s);
    Range r = DatasetUtilities.iterateRangeBounds(d);
    assertEquals(1.5, r.getUpperBound(), EPSILON);
    s.add(1.0, 1.5, Double.NaN, Double.NaN, Double.NaN, 2.5);
    r = DatasetUtilities.iterateRangeBounds(d);
    s.add(1.0, Double.NaN, 0.5, Double.NaN, 3.5, Double.NaN);
    r = DatasetUtilities.iterateRangeBounds(d);
    
}

---
---
public void testBug2849731_3_catena_2() {
    XYIntervalSeriesCollection d = new XYIntervalSeriesCollection();
    XYIntervalSeries s = new XYIntervalSeries("S1");
    s.add(1.0, Double.NaN, Double.NaN, 1.5, Double.NaN, Double.NaN);
    d.addSeries(s);
    Range r = DatasetUtilities.iterateRangeBounds(d);
    s.add(1.0, 1.5, Double.NaN, Double.NaN, Double.NaN, 2.5);
    r = DatasetUtilities.iterateRangeBounds(d);
    assertEquals(1.5, r.getLowerBound(), EPSILON);
    s.add(1.0, Double.NaN, 0.5, Double.NaN, 3.5, Double.NaN);
    r = DatasetUtilities.iterateRangeBounds(d);
    
}

---
---
public void testBug2849731_3_catena_3() {
    XYIntervalSeriesCollection d = new XYIntervalSeriesCollection();
    XYIntervalSeries s = new XYIntervalSeries("S1");
    s.add(1.0, Double.NaN, Double.NaN, 1.5, Double.NaN, Double.NaN);
    d.addSeries(s);
    Range r = DatasetUtilities.iterateRangeBounds(d);
    s.add(1.0, 1.5, Double.NaN, Double.NaN, Double.NaN, 2.5);
    r = DatasetUtilities.iterateRangeBounds(d);
    assertEquals(2.5, r.getUpperBound(), EPSILON);
    s.add(1.0, Double.NaN, 0.5, Double.NaN, 3.5, Double.NaN);
    r = DatasetUtilities.iterateRangeBounds(d);
    
}

---
---
public void testBug2849731_3_catena_4() {
    XYIntervalSeriesCollection d = new XYIntervalSeriesCollection();
    XYIntervalSeries s = new XYIntervalSeries("S1");
    s.add(1.0, Double.NaN, Double.NaN, 1.5, Double.NaN, Double.NaN);
    d.addSeries(s);
    Range r = DatasetUtilities.iterateRangeBounds(d);
    s.add(1.0, 1.5, Double.NaN, Double.NaN, Double.NaN, 2.5);
    r = DatasetUtilities.iterateRangeBounds(d);
    s.add(1.0, Double.NaN, 0.5, Double.NaN, 3.5, Double.NaN);
    r = DatasetUtilities.iterateRangeBounds(d);
    assertEquals(1.5, r.getLowerBound(), EPSILON);
    
}

---
---
public void testBug2849731_3_catena_5() {
    XYIntervalSeriesCollection d = new XYIntervalSeriesCollection();
    XYIntervalSeries s = new XYIntervalSeries("S1");
    s.add(1.0, Double.NaN, Double.NaN, 1.5, Double.NaN, Double.NaN);
    d.addSeries(s);
    Range r = DatasetUtilities.iterateRangeBounds(d);
    s.add(1.0, 1.5, Double.NaN, Double.NaN, Double.NaN, 2.5);
    r = DatasetUtilities.iterateRangeBounds(d);
    s.add(1.0, Double.NaN, 0.5, Double.NaN, 3.5, Double.NaN);
    r = DatasetUtilities.iterateRangeBounds(d);
    assertEquals(3.5, r.getUpperBound(), EPSILON);
    
}

---
--------------------
Run: Lang_37
@@@
Split test: org.apache.commons.lang3.ArrayUtilsAddTest::testJira567
file: /root/workbench/exportInfo/d4j_buggy/Lang_37/src/test//org/apache/commons/lang3/ArrayUtilsAddTest.java
Begin: Pos(32, 12)
End: Pos(44, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_37/src/test//org/apache/commons/lang3/ArrayUtilsAddTest.java
Name: testJira567
Childs: [StatementAssertion<Begin: Pos(36, 9), End: Pos(36, 33)>,
StatementAssertion<Begin: Pos(37, 9), End: Pos(37, 67)>,
StatementAssertion<Begin: Pos(41, 16), End: Pos(41, 70)>,
]
---
public void testJira567_catena_0() {
    Number[]n;
    n = ArrayUtils.addAll(new Number[] {
        Integer.valueOf(1)
    }, new Long[] {
        Long.valueOf(2)
    });
    assertEquals(2, n.length);
    try {
        n = ArrayUtils.addAll(new Integer[] {
            Integer.valueOf(1)
        }, new Long[] {
            Long.valueOf(2)
        });
        
    }
    catch(IllegalArgumentException expected) {
        
    }
}

---
---
public void testJira567_catena_1() {
    Number[]n;
    n = ArrayUtils.addAll(new Number[] {
        Integer.valueOf(1)
    }, new Long[] {
        Long.valueOf(2)
    });
    assertEquals(Number.class, n.getClass().getComponentType());
    try {
        n = ArrayUtils.addAll(new Integer[] {
            Integer.valueOf(1)
        }, new Long[] {
            Long.valueOf(2)
        });
        
    }
    catch(IllegalArgumentException expected) {
        
    }
}

---
---
public void testJira567_catena_2() {
    Number[]n;
    n = ArrayUtils.addAll(new Number[] {
        Integer.valueOf(1)
    }, new Long[] {
        Long.valueOf(2)
    });
    try {
        n = ArrayUtils.addAll(new Integer[] {
            Integer.valueOf(1)
        }, new Long[] {
            Long.valueOf(2)
        });
        fail("Should have generated IllegalArgumentException");
        
    }
    catch(IllegalArgumentException expected) {
        
    }
}

---
--------------------
Run: Lang_30
@@@
Split test: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsNone_CharArrayWithSupplementaryChars
file: /root/workbench/exportInfo/d4j_buggy/Lang_30/src/test/java//org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java
Begin: Pos(318, 12)
End: Pos(329, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_30/src/test/java//org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java
Name: testContainsNone_CharArrayWithSupplementaryChars
Childs: [StatementAssertion<Begin: Pos(319, 9), End: Pos(319, 105)>,
StatementAssertion<Begin: Pos(320, 9), End: Pos(320, 105)>,
StatementAssertion<Begin: Pos(321, 9), End: Pos(321, 92)>,
StatementAssertion<Begin: Pos(323, 9), End: Pos(323, 57)>,
StatementAssertion<Begin: Pos(324, 9), End: Pos(324, 66)>,
StatementAssertion<Begin: Pos(325, 9), End: Pos(325, 67)>,
StatementAssertion<Begin: Pos(327, 9), End: Pos(327, 91)>,
StatementAssertion<Begin: Pos(328, 9), End: Pos(328, 91)>,
]
---
public void testContainsNone_CharArrayWithSupplementaryChars_catena_0() {
    assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20000.toCharArray()));
    
}

---
---
public void testContainsNone_CharArrayWithSupplementaryChars_catena_1() {
    assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20001.toCharArray()));
    
}

---
---
public void testContainsNone_CharArrayWithSupplementaryChars_catena_2() {
    assertEquals(false, StringUtils.containsNone(CharU20000, CharU20000.toCharArray()));
    
}

---
---
public void testContainsNone_CharArrayWithSupplementaryChars_catena_3() {
    assertEquals( - 1, CharU20000.indexOf(CharU20001));
    
}

---
---
public void testContainsNone_CharArrayWithSupplementaryChars_catena_4() {
    assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));
    
}

---
---
public void testContainsNone_CharArrayWithSupplementaryChars_catena_5() {
    assertEquals( - 1, CharU20000.indexOf(CharU20001.charAt(1)));
    
}

---
---
public void testContainsNone_CharArrayWithSupplementaryChars_catena_6() {
    assertEquals(true, StringUtils.containsNone(CharU20000, CharU20001.toCharArray()));
    
}

---
---
public void testContainsNone_CharArrayWithSupplementaryChars_catena_7() {
    assertEquals(true, StringUtils.containsNone(CharU20001, CharU20000.toCharArray()));
    
}

---
@@@
Split test: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsNone_StringWithSupplementaryChars
file: /root/workbench/exportInfo/d4j_buggy/Lang_30/src/test/java//org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java
Begin: Pos(372, 12)
End: Pos(383, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_30/src/test/java//org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java
Name: testContainsNone_StringWithSupplementaryChars
Childs: [StatementAssertion<Begin: Pos(373, 9), End: Pos(373, 91)>,
StatementAssertion<Begin: Pos(374, 9), End: Pos(374, 91)>,
StatementAssertion<Begin: Pos(375, 9), End: Pos(375, 78)>,
StatementAssertion<Begin: Pos(377, 9), End: Pos(377, 57)>,
StatementAssertion<Begin: Pos(378, 9), End: Pos(378, 66)>,
StatementAssertion<Begin: Pos(379, 9), End: Pos(379, 67)>,
StatementAssertion<Begin: Pos(381, 9), End: Pos(381, 77)>,
StatementAssertion<Begin: Pos(382, 9), End: Pos(382, 77)>,
]
---
public void testContainsNone_StringWithSupplementaryChars_catena_0() {
    assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20000));
    
}

---
---
public void testContainsNone_StringWithSupplementaryChars_catena_1() {
    assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20001));
    
}

---
---
public void testContainsNone_StringWithSupplementaryChars_catena_2() {
    assertEquals(false, StringUtils.containsNone(CharU20000, CharU20000));
    
}

---
---
public void testContainsNone_StringWithSupplementaryChars_catena_3() {
    assertEquals( - 1, CharU20000.indexOf(CharU20001));
    
}

---
---
public void testContainsNone_StringWithSupplementaryChars_catena_4() {
    assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));
    
}

---
---
public void testContainsNone_StringWithSupplementaryChars_catena_5() {
    assertEquals( - 1, CharU20000.indexOf(CharU20001.charAt(1)));
    
}

---
---
public void testContainsNone_StringWithSupplementaryChars_catena_6() {
    assertEquals(true, StringUtils.containsNone(CharU20000, CharU20001));
    
}

---
---
public void testContainsNone_StringWithSupplementaryChars_catena_7() {
    assertEquals(true, StringUtils.containsNone(CharU20001, CharU20000));
    
}

---
@@@
Split test: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAny_StringCharArrayWithBadSupplementaryChars
file: /root/workbench/exportInfo/d4j_buggy/Lang_30/src/test/java//org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java
Begin: Pos(133, 12)
End: Pos(142, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_30/src/test/java//org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java
Name: testContainsAny_StringCharArrayWithBadSupplementaryChars
Childs: [StatementAssertion<Begin: Pos(135, 9), End: Pos(135, 98)>,
StatementAssertion<Begin: Pos(136, 9), End: Pos(136, 114)>,
StatementAssertion<Begin: Pos(137, 9), End: Pos(137, 63)>,
StatementAssertion<Begin: Pos(138, 9), End: Pos(138, 97)>,
StatementAssertion<Begin: Pos(139, 9), End: Pos(139, 98)>,
StatementAssertion<Begin: Pos(140, 9), End: Pos(140, 62)>,
StatementAssertion<Begin: Pos(141, 9), End: Pos(141, 96)>,
]
---
public void testContainsAny_StringCharArrayWithBadSupplementaryChars_catena_0() {
    assertEquals(false, StringUtils.containsAny(CharUSuppCharHigh, CharU20001.toCharArray()));
    
}

---
---
public void testContainsAny_StringCharArrayWithBadSupplementaryChars_catena_1() {
    assertEquals(false, StringUtils.containsAny("abc" + CharUSuppCharHigh + "xyz", CharU20001.toCharArray()));
    
}

---
---
public void testContainsAny_StringCharArrayWithBadSupplementaryChars_catena_2() {
    assertEquals( - 1, CharUSuppCharLow.indexOf(CharU20001));
    
}

---
---
public void testContainsAny_StringCharArrayWithBadSupplementaryChars_catena_3() {
    assertEquals(false, StringUtils.containsAny(CharUSuppCharLow, CharU20001.toCharArray()));
    
}

---
---
public void testContainsAny_StringCharArrayWithBadSupplementaryChars_catena_4() {
    assertEquals(false, StringUtils.containsAny(CharU20001, CharUSuppCharHigh.toCharArray()));
    
}

---
---
public void testContainsAny_StringCharArrayWithBadSupplementaryChars_catena_5() {
    assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));
    
}

---
---
public void testContainsAny_StringCharArrayWithBadSupplementaryChars_catena_6() {
    assertEquals(true, StringUtils.containsAny(CharU20001, CharUSuppCharLow.toCharArray()));
    
}

---
@@@
Split test: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testIndexOfAnyBut_StringStringWithSupplementaryChars
file: /root/workbench/exportInfo/d4j_buggy/Lang_30/src/test/java//org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java
Begin: Pos(615, 12)
End: Pos(620, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_30/src/test/java//org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java
Name: testIndexOfAnyBut_StringStringWithSupplementaryChars
Childs: [StatementAssertion<Begin: Pos(616, 9), End: Pos(616, 88)>,
StatementAssertion<Begin: Pos(617, 9), End: Pos(617, 88)>,
StatementAssertion<Begin: Pos(618, 9), End: Pos(618, 76)>,
StatementAssertion<Begin: Pos(619, 9), End: Pos(619, 75)>,
]
---
public void testIndexOfAnyBut_StringStringWithSupplementaryChars_catena_0() {
    assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000));
    
}

---
---
public void testIndexOfAnyBut_StringStringWithSupplementaryChars_catena_1() {
    assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001));
    
}

---
---
public void testIndexOfAnyBut_StringStringWithSupplementaryChars_catena_2() {
    assertEquals( - 1, StringUtils.indexOfAnyBut(CharU20000, CharU20000));
    
}

---
---
public void testIndexOfAnyBut_StringStringWithSupplementaryChars_catena_3() {
    assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001));
    
}

---
@@@
Split test: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAny_StringWithBadSupplementaryChars
file: /root/workbench/exportInfo/d4j_buggy/Lang_30/src/test/java//org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java
Begin: Pos(182, 12)
End: Pos(190, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_30/src/test/java//org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java
Name: testContainsAny_StringWithBadSupplementaryChars
Childs: [StatementAssertion<Begin: Pos(184, 9), End: Pos(184, 84)>,
StatementAssertion<Begin: Pos(185, 9), End: Pos(185, 63)>,
StatementAssertion<Begin: Pos(186, 9), End: Pos(186, 83)>,
StatementAssertion<Begin: Pos(187, 9), End: Pos(187, 84)>,
StatementAssertion<Begin: Pos(188, 9), End: Pos(188, 62)>,
StatementAssertion<Begin: Pos(189, 9), End: Pos(189, 82)>,
]
---
public void testContainsAny_StringWithBadSupplementaryChars_catena_0() {
    assertEquals(false, StringUtils.containsAny(CharUSuppCharHigh, CharU20001));
    
}

---
---
public void testContainsAny_StringWithBadSupplementaryChars_catena_1() {
    assertEquals( - 1, CharUSuppCharLow.indexOf(CharU20001));
    
}

---
---
public void testContainsAny_StringWithBadSupplementaryChars_catena_2() {
    assertEquals(false, StringUtils.containsAny(CharUSuppCharLow, CharU20001));
    
}

---
---
public void testContainsAny_StringWithBadSupplementaryChars_catena_3() {
    assertEquals(false, StringUtils.containsAny(CharU20001, CharUSuppCharHigh));
    
}

---
---
public void testContainsAny_StringWithBadSupplementaryChars_catena_4() {
    assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));
    
}

---
---
public void testContainsAny_StringWithBadSupplementaryChars_catena_5() {
    assertEquals(true, StringUtils.containsAny(CharU20001, CharUSuppCharLow));
    
}

---
@@@
Split test: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testIndexOfAny_StringCharArrayWithSupplementaryChars
file: /root/workbench/exportInfo/d4j_buggy/Lang_30/src/test/java//org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java
Begin: Pos(526, 12)
End: Pos(531, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_30/src/test/java//org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java
Name: testIndexOfAny_StringCharArrayWithSupplementaryChars
Childs: [StatementAssertion<Begin: Pos(527, 9), End: Pos(527, 99)>,
StatementAssertion<Begin: Pos(528, 9), End: Pos(528, 99)>,
StatementAssertion<Begin: Pos(529, 9), End: Pos(529, 86)>,
StatementAssertion<Begin: Pos(530, 9), End: Pos(530, 87)>,
]
---
public void testIndexOfAny_StringCharArrayWithSupplementaryChars_catena_0() {
    assertEquals(0, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20000.toCharArray()));
    
}

---
---
public void testIndexOfAny_StringCharArrayWithSupplementaryChars_catena_1() {
    assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001.toCharArray()));
    
}

---
---
public void testIndexOfAny_StringCharArrayWithSupplementaryChars_catena_2() {
    assertEquals(0, StringUtils.indexOfAny(CharU20000, CharU20000.toCharArray()));
    
}

---
---
public void testIndexOfAny_StringCharArrayWithSupplementaryChars_catena_3() {
    assertEquals( - 1, StringUtils.indexOfAny(CharU20000, CharU20001.toCharArray()));
    
}

---
@@@
Split test: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testIndexOfAnyBut_StringCharArrayWithSupplementaryChars
file: /root/workbench/exportInfo/d4j_buggy/Lang_30/src/test/java//org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java
Begin: Pos(592, 12)
End: Pos(597, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_30/src/test/java//org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java
Name: testIndexOfAnyBut_StringCharArrayWithSupplementaryChars
Childs: [StatementAssertion<Begin: Pos(593, 9), End: Pos(593, 102)>,
StatementAssertion<Begin: Pos(594, 9), End: Pos(594, 102)>,
StatementAssertion<Begin: Pos(595, 9), End: Pos(595, 90)>,
StatementAssertion<Begin: Pos(596, 9), End: Pos(596, 89)>,
]
---
public void testIndexOfAnyBut_StringCharArrayWithSupplementaryChars_catena_0() {
    assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000.toCharArray()));
    
}

---
---
public void testIndexOfAnyBut_StringCharArrayWithSupplementaryChars_catena_1() {
    assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001.toCharArray()));
    
}

---
---
public void testIndexOfAnyBut_StringCharArrayWithSupplementaryChars_catena_2() {
    assertEquals( - 1, StringUtils.indexOfAnyBut(CharU20000, CharU20000.toCharArray()));
    
}

---
---
public void testIndexOfAnyBut_StringCharArrayWithSupplementaryChars_catena_3() {
    assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001.toCharArray()));
    
}

---
@@@
Split test: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsNone_StringWithBadSupplementaryChars
file: /root/workbench/exportInfo/d4j_buggy/Lang_30/src/test/java//org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java
Begin: Pos(358, 12)
End: Pos(367, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_30/src/test/java//org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java
Name: testContainsNone_StringWithBadSupplementaryChars
Childs: [StatementAssertion<Begin: Pos(360, 9), End: Pos(360, 84)>,
StatementAssertion<Begin: Pos(361, 9), End: Pos(361, 63)>,
StatementAssertion<Begin: Pos(362, 9), End: Pos(362, 83)>,
StatementAssertion<Begin: Pos(363, 9), End: Pos(363, 64)>,
StatementAssertion<Begin: Pos(364, 9), End: Pos(364, 84)>,
StatementAssertion<Begin: Pos(365, 9), End: Pos(365, 62)>,
StatementAssertion<Begin: Pos(366, 9), End: Pos(366, 84)>,
]
---
public void testContainsNone_StringWithBadSupplementaryChars_catena_0() {
    assertEquals(true, StringUtils.containsNone(CharUSuppCharHigh, CharU20001));
    
}

---
---
public void testContainsNone_StringWithBadSupplementaryChars_catena_1() {
    assertEquals( - 1, CharUSuppCharLow.indexOf(CharU20001));
    
}

---
---
public void testContainsNone_StringWithBadSupplementaryChars_catena_2() {
    assertEquals(true, StringUtils.containsNone(CharUSuppCharLow, CharU20001));
    
}

---
---
public void testContainsNone_StringWithBadSupplementaryChars_catena_3() {
    assertEquals( - 1, CharU20001.indexOf(CharUSuppCharHigh));
    
}

---
---
public void testContainsNone_StringWithBadSupplementaryChars_catena_4() {
    assertEquals(true, StringUtils.containsNone(CharU20001, CharUSuppCharHigh));
    
}

---
---
public void testContainsNone_StringWithBadSupplementaryChars_catena_5() {
    assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));
    
}

---
---
public void testContainsNone_StringWithBadSupplementaryChars_catena_6() {
    assertEquals(false, StringUtils.containsNone(CharU20001, CharUSuppCharLow));
    
}

---
@@@
Split test: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testIndexOfAny_StringStringWithSupplementaryChars
file: /root/workbench/exportInfo/d4j_buggy/Lang_30/src/test/java//org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java
Begin: Pos(569, 12)
End: Pos(574, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_30/src/test/java//org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java
Name: testIndexOfAny_StringStringWithSupplementaryChars
Childs: [StatementAssertion<Begin: Pos(570, 9), End: Pos(570, 85)>,
StatementAssertion<Begin: Pos(571, 9), End: Pos(571, 85)>,
StatementAssertion<Begin: Pos(572, 9), End: Pos(572, 72)>,
StatementAssertion<Begin: Pos(573, 9), End: Pos(573, 73)>,
]
---
public void testIndexOfAny_StringStringWithSupplementaryChars_catena_0() {
    assertEquals(0, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20000));
    
}

---
---
public void testIndexOfAny_StringStringWithSupplementaryChars_catena_1() {
    assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001));
    
}

---
---
public void testIndexOfAny_StringStringWithSupplementaryChars_catena_2() {
    assertEquals(0, StringUtils.indexOfAny(CharU20000, CharU20000));
    
}

---
---
public void testIndexOfAny_StringStringWithSupplementaryChars_catena_3() {
    assertEquals( - 1, StringUtils.indexOfAny(CharU20000, CharU20001));
    
}

---
@@@
Split test: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsNone_CharArrayWithBadSupplementaryChars
file: /root/workbench/exportInfo/d4j_buggy/Lang_30/src/test/java//org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java
Begin: Pos(304, 12)
End: Pos(313, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_30/src/test/java//org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java
Name: testContainsNone_CharArrayWithBadSupplementaryChars
Childs: [StatementAssertion<Begin: Pos(306, 9), End: Pos(306, 98)>,
StatementAssertion<Begin: Pos(307, 9), End: Pos(307, 63)>,
StatementAssertion<Begin: Pos(308, 9), End: Pos(308, 97)>,
StatementAssertion<Begin: Pos(309, 9), End: Pos(309, 64)>,
StatementAssertion<Begin: Pos(310, 9), End: Pos(310, 98)>,
StatementAssertion<Begin: Pos(311, 9), End: Pos(311, 62)>,
StatementAssertion<Begin: Pos(312, 9), End: Pos(312, 98)>,
]
---
public void testContainsNone_CharArrayWithBadSupplementaryChars_catena_0() {
    assertEquals(true, StringUtils.containsNone(CharUSuppCharHigh, CharU20001.toCharArray()));
    
}

---
---
public void testContainsNone_CharArrayWithBadSupplementaryChars_catena_1() {
    assertEquals( - 1, CharUSuppCharLow.indexOf(CharU20001));
    
}

---
---
public void testContainsNone_CharArrayWithBadSupplementaryChars_catena_2() {
    assertEquals(true, StringUtils.containsNone(CharUSuppCharLow, CharU20001.toCharArray()));
    
}

---
---
public void testContainsNone_CharArrayWithBadSupplementaryChars_catena_3() {
    assertEquals( - 1, CharU20001.indexOf(CharUSuppCharHigh));
    
}

---
---
public void testContainsNone_CharArrayWithBadSupplementaryChars_catena_4() {
    assertEquals(true, StringUtils.containsNone(CharU20001, CharUSuppCharHigh.toCharArray()));
    
}

---
---
public void testContainsNone_CharArrayWithBadSupplementaryChars_catena_5() {
    assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));
    
}

---
---
public void testContainsNone_CharArrayWithBadSupplementaryChars_catena_6() {
    assertEquals(false, StringUtils.containsNone(CharU20001, CharUSuppCharLow.toCharArray()));
    
}

---
--------------------
Run: Lang_32
@@@
Split test: org.apache.commons.lang3.builder.HashCodeBuilderTest::testReflectionObjectCycle
file: /root/workbench/exportInfo/d4j_buggy/Lang_32/src/test/java//org/apache/commons/lang3/builder/HashCodeBuilderTest.java
Begin: Pos(500, 12)
End: Pos(527, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_32/src/test/java//org/apache/commons/lang3/builder/HashCodeBuilderTest.java
Name: testReflectionObjectCycle
Childs: [StatementAssertion<Begin: Pos(524, 9), End: Pos(524, 50)>,
StatementAssertion<Begin: Pos(526, 9), End: Pos(526, 50)>,
]
---
public void testReflectionObjectCycle_catena_0() {
    ReflectionTestCycleA a = new ReflectionTestCycleA();
    ReflectionTestCycleB b = new ReflectionTestCycleB();
    a.b = b;
    b.a = a;
    a.hashCode();
    assertNull(HashCodeBuilder.getRegistry());
    b.hashCode();
    
}

---
---
public void testReflectionObjectCycle_catena_1() {
    ReflectionTestCycleA a = new ReflectionTestCycleA();
    ReflectionTestCycleB b = new ReflectionTestCycleB();
    a.b = b;
    b.a = a;
    a.hashCode();
    b.hashCode();
    assertNull(HashCodeBuilder.getRegistry());
    
}

---
--------------------
Run: Lang_36
@@@
Split test: org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber
file: /root/workbench/exportInfo/d4j_buggy/Lang_36/src/test//org/apache/commons/lang3/math/NumberUtilsTest.java
Begin: Pos(176, 12)
End: Pos(214, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_36/src/test//org/apache/commons/lang3/math/NumberUtilsTest.java
Name: testCreateNumber
Childs: [StatementAssertion<Begin: Pos(178, 9), End: Pos(178, 111)>,
StatementAssertion<Begin: Pos(179, 9), End: Pos(179, 111)>,
StatementAssertion<Begin: Pos(180, 9), End: Pos(180, 113)>,
StatementAssertion<Begin: Pos(181, 9), End: Pos(181, 113)>,
StatementAssertion<Begin: Pos(182, 9), End: Pos(182, 112)>,
StatementAssertion<Begin: Pos(183, 9), End: Pos(183, 112)>,
StatementAssertion<Begin: Pos(184, 9), End: Pos(185, 41)>,
StatementAssertion<Begin: Pos(186, 9), End: Pos(186, 107)>,
StatementAssertion<Begin: Pos(187, 9), End: Pos(187, 107)>,
StatementAssertion<Begin: Pos(188, 9), End: Pos(188, 113)>,
StatementAssertion<Begin: Pos(189, 9), End: Pos(189, 113)>,
StatementAssertion<Begin: Pos(190, 9), End: Pos(190, 109)>,
StatementAssertion<Begin: Pos(191, 9), End: Pos(191, 112)>,
StatementAssertion<Begin: Pos(192, 9), End: Pos(192, 115)>,
StatementAssertion<Begin: Pos(193, 9), End: Pos(193, 112)>,
StatementAssertion<Begin: Pos(194, 9), End: Pos(194, 117)>,
StatementAssertion<Begin: Pos(195, 9), End: Pos(195, 117)>,
StatementAssertion<Begin: Pos(196, 9), End: Pos(196, 88)>,
StatementAssertion<Begin: Pos(197, 9), End: Pos(198, 56)>,
StatementAssertion<Begin: Pos(202, 13), End: Pos(203, 48)>,
StatementAssertion<Begin: Pos(205, 9), End: Pos(206, 63)>,
StatementAssertion<Begin: Pos(207, 9), End: Pos(208, 57)>,
StatementAssertion<Begin: Pos(209, 9), End: Pos(210, 54)>,
StatementAssertion<Begin: Pos(213, 9), End: Pos(213, 110)>,
]
---
public void testCreateNumber_catena_0() {
    assertEquals("createNumber(String) 1 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5"));
    if(SystemUtils.isJavaVersionAtLeast(1.3f)) {
        
    }
}

---
---
public void testCreateNumber_catena_1() {
    assertEquals("createNumber(String) 2 failed", new Integer("12345"), NumberUtils.createNumber("12345"));
    if(SystemUtils.isJavaVersionAtLeast(1.3f)) {
        
    }
}

---
---
public void testCreateNumber_catena_2() {
    assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5D"));
    if(SystemUtils.isJavaVersionAtLeast(1.3f)) {
        
    }
}

---
---
public void testCreateNumber_catena_3() {
    assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5d"));
    if(SystemUtils.isJavaVersionAtLeast(1.3f)) {
        
    }
}

---
---
public void testCreateNumber_catena_4() {
    assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5F"));
    if(SystemUtils.isJavaVersionAtLeast(1.3f)) {
        
    }
}

---
---
public void testCreateNumber_catena_5() {
    assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5f"));
    if(SystemUtils.isJavaVersionAtLeast(1.3f)) {
        
    }
}

---
---
public void testCreateNumber_catena_6() {
    assertEquals("createNumber(String) 5 failed", new Long(Integer.MAX_VALUE + 1L), NumberUtils.createNumber("" + (Integer.MAX_VALUE + 1L)));
    if(SystemUtils.isJavaVersionAtLeast(1.3f)) {
        
    }
}

---
---
public void testCreateNumber_catena_7() {
    assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345L"));
    if(SystemUtils.isJavaVersionAtLeast(1.3f)) {
        
    }
}

---
---
public void testCreateNumber_catena_8() {
    assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345l"));
    if(SystemUtils.isJavaVersionAtLeast(1.3f)) {
        
    }
}

---
---
public void testCreateNumber_catena_9() {
    assertEquals("createNumber(String) 7 failed", new Float("-1234.5"), NumberUtils.createNumber("-1234.5"));
    if(SystemUtils.isJavaVersionAtLeast(1.3f)) {
        
    }
}

---
---
public void testCreateNumber_catena_10() {
    assertEquals("createNumber(String) 8 failed", new Integer("-12345"), NumberUtils.createNumber("-12345"));
    if(SystemUtils.isJavaVersionAtLeast(1.3f)) {
        
    }
}

---
---
public void testCreateNumber_catena_11() {
    assertTrue("createNumber(String) 9 failed", 0xFADE == NumberUtils.createNumber("0xFADE").intValue());
    if(SystemUtils.isJavaVersionAtLeast(1.3f)) {
        
    }
}

---
---
public void testCreateNumber_catena_12() {
    assertTrue("createNumber(String) 10 failed",  - 0xFADE == NumberUtils.createNumber("-0xFADE").intValue());
    if(SystemUtils.isJavaVersionAtLeast(1.3f)) {
        
    }
}

---
---
public void testCreateNumber_catena_13() {
    assertEquals("createNumber(String) 11 failed", new Double("1.1E200"), NumberUtils.createNumber("1.1E200"));
    if(SystemUtils.isJavaVersionAtLeast(1.3f)) {
        
    }
}

---
---
public void testCreateNumber_catena_14() {
    assertEquals("createNumber(String) 12 failed", new Float("1.1E20"), NumberUtils.createNumber("1.1E20"));
    if(SystemUtils.isJavaVersionAtLeast(1.3f)) {
        
    }
}

---
---
public void testCreateNumber_catena_15() {
    assertEquals("createNumber(String) 13 failed", new Double("-1.1E200"), NumberUtils.createNumber("-1.1E200"));
    if(SystemUtils.isJavaVersionAtLeast(1.3f)) {
        
    }
}

---
---
public void testCreateNumber_catena_16() {
    assertEquals("createNumber(String) 14 failed", new Double("1.1E-200"), NumberUtils.createNumber("1.1E-200"));
    if(SystemUtils.isJavaVersionAtLeast(1.3f)) {
        
    }
}

---
---
public void testCreateNumber_catena_17() {
    assertEquals("createNumber(null) failed", null, NumberUtils.createNumber(null));
    if(SystemUtils.isJavaVersionAtLeast(1.3f)) {
        
    }
}

---
---
public void testCreateNumber_catena_18() {
    assertEquals("createNumber(String) failed", new BigInteger("12345678901234567890"), NumberUtils.createNumber("12345678901234567890L"));
    if(SystemUtils.isJavaVersionAtLeast(1.3f)) {
        
    }
}

---
---
public void testCreateNumber_catena_19() {
    if(SystemUtils.isJavaVersionAtLeast(1.3f)) {
        assertEquals("createNumber(String) 15 failed", new BigDecimal("1.1E-700"), NumberUtils.createNumber("1.1E-700F"));
        
    }
}

---
---
public void testCreateNumber_catena_20() {
    if(SystemUtils.isJavaVersionAtLeast(1.3f)) {
        
    }
    assertEquals("createNumber(String) 16 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils.createNumber("10" + Integer.MAX_VALUE + "L"));
    
}

---
---
public void testCreateNumber_catena_21() {
    if(SystemUtils.isJavaVersionAtLeast(1.3f)) {
        
    }
    assertEquals("createNumber(String) 17 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils.createNumber("10" + Integer.MAX_VALUE));
    
}

---
---
public void testCreateNumber_catena_22() {
    if(SystemUtils.isJavaVersionAtLeast(1.3f)) {
        
    }
    assertEquals("createNumber(String) 18 failed", new BigInteger("10" + Long.MAX_VALUE), NumberUtils.createNumber("10" + Long.MAX_VALUE));
    
}

---
---
public void testCreateNumber_catena_23() {
    if(SystemUtils.isJavaVersionAtLeast(1.3f)) {
        
    }
    assertEquals("createNumber(String) LANG-521 failed", new Float("2."), NumberUtils.createNumber("2."));
    
}

---
@@@
Split test: org.apache.commons.lang3.math.NumberUtilsTest::testIsNumber
file: /root/workbench/exportInfo/d4j_buggy/Lang_36/src/test//org/apache/commons/lang3/math/NumberUtilsTest.java
Begin: Pos(1002, 12)
End: Pos(1139, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_36/src/test//org/apache/commons/lang3/math/NumberUtilsTest.java
Name: testIsNumber
Childs: [StatementAssertion<Begin: Pos(1004, 9), End: Pos(1004, 75)>,
StatementAssertion<Begin: Pos(1005, 9), End: Pos(1005, 93)>,
StatementAssertion<Begin: Pos(1007, 9), End: Pos(1007, 75)>,
StatementAssertion<Begin: Pos(1008, 9), End: Pos(1008, 93)>,
StatementAssertion<Begin: Pos(1010, 9), End: Pos(1010, 75)>,
StatementAssertion<Begin: Pos(1011, 9), End: Pos(1011, 93)>,
StatementAssertion<Begin: Pos(1013, 9), End: Pos(1013, 75)>,
StatementAssertion<Begin: Pos(1014, 9), End: Pos(1014, 93)>,
StatementAssertion<Begin: Pos(1016, 9), End: Pos(1016, 75)>,
StatementAssertion<Begin: Pos(1017, 9), End: Pos(1017, 93)>,
StatementAssertion<Begin: Pos(1019, 9), End: Pos(1019, 75)>,
StatementAssertion<Begin: Pos(1020, 9), End: Pos(1020, 93)>,
StatementAssertion<Begin: Pos(1022, 9), End: Pos(1022, 75)>,
StatementAssertion<Begin: Pos(1023, 9), End: Pos(1023, 93)>,
StatementAssertion<Begin: Pos(1025, 9), End: Pos(1025, 75)>,
StatementAssertion<Begin: Pos(1026, 9), End: Pos(1026, 93)>,
StatementAssertion<Begin: Pos(1028, 9), End: Pos(1028, 75)>,
StatementAssertion<Begin: Pos(1029, 9), End: Pos(1029, 93)>,
StatementAssertion<Begin: Pos(1031, 9), End: Pos(1031, 76)>,
StatementAssertion<Begin: Pos(1032, 9), End: Pos(1032, 94)>,
StatementAssertion<Begin: Pos(1034, 9), End: Pos(1034, 76)>,
StatementAssertion<Begin: Pos(1035, 9), End: Pos(1035, 94)>,
StatementAssertion<Begin: Pos(1037, 9), End: Pos(1037, 76)>,
StatementAssertion<Begin: Pos(1038, 9), End: Pos(1038, 94)>,
StatementAssertion<Begin: Pos(1040, 9), End: Pos(1040, 76)>,
StatementAssertion<Begin: Pos(1041, 9), End: Pos(1041, 94)>,
StatementAssertion<Begin: Pos(1043, 9), End: Pos(1043, 76)>,
StatementAssertion<Begin: Pos(1044, 9), End: Pos(1044, 94)>,
StatementAssertion<Begin: Pos(1046, 9), End: Pos(1046, 76)>,
StatementAssertion<Begin: Pos(1047, 9), End: Pos(1047, 94)>,
StatementAssertion<Begin: Pos(1049, 9), End: Pos(1049, 76)>,
StatementAssertion<Begin: Pos(1050, 9), End: Pos(1050, 94)>,
StatementAssertion<Begin: Pos(1052, 9), End: Pos(1052, 76)>,
StatementAssertion<Begin: Pos(1053, 9), End: Pos(1053, 94)>,
StatementAssertion<Begin: Pos(1055, 9), End: Pos(1055, 76)>,
StatementAssertion<Begin: Pos(1056, 9), End: Pos(1056, 94)>,
StatementAssertion<Begin: Pos(1058, 9), End: Pos(1058, 76)>,
StatementAssertion<Begin: Pos(1059, 9), End: Pos(1059, 94)>,
StatementAssertion<Begin: Pos(1061, 9), End: Pos(1061, 76)>,
StatementAssertion<Begin: Pos(1062, 9), End: Pos(1062, 94)>,
StatementAssertion<Begin: Pos(1064, 9), End: Pos(1064, 80)>,
StatementAssertion<Begin: Pos(1065, 9), End: Pos(1065, 98)>,
StatementAssertion<Begin: Pos(1067, 9), End: Pos(1067, 80)>,
StatementAssertion<Begin: Pos(1068, 9), End: Pos(1068, 98)>,
StatementAssertion<Begin: Pos(1070, 9), End: Pos(1070, 80)>,
StatementAssertion<Begin: Pos(1071, 9), End: Pos(1071, 98)>,
StatementAssertion<Begin: Pos(1073, 9), End: Pos(1073, 80)>,
StatementAssertion<Begin: Pos(1074, 9), End: Pos(1074, 98)>,
StatementAssertion<Begin: Pos(1076, 9), End: Pos(1076, 80)>,
StatementAssertion<Begin: Pos(1077, 9), End: Pos(1077, 98)>,
StatementAssertion<Begin: Pos(1079, 9), End: Pos(1079, 80)>,
StatementAssertion<Begin: Pos(1080, 9), End: Pos(1080, 98)>,
StatementAssertion<Begin: Pos(1082, 9), End: Pos(1082, 80)>,
StatementAssertion<Begin: Pos(1083, 9), End: Pos(1083, 98)>,
StatementAssertion<Begin: Pos(1085, 9), End: Pos(1085, 80)>,
StatementAssertion<Begin: Pos(1086, 9), End: Pos(1086, 98)>,
StatementAssertion<Begin: Pos(1088, 9), End: Pos(1088, 80)>,
StatementAssertion<Begin: Pos(1089, 9), End: Pos(1089, 98)>,
StatementAssertion<Begin: Pos(1091, 9), End: Pos(1091, 81)>,
StatementAssertion<Begin: Pos(1092, 9), End: Pos(1092, 99)>,
StatementAssertion<Begin: Pos(1094, 9), End: Pos(1094, 81)>,
StatementAssertion<Begin: Pos(1095, 9), End: Pos(1095, 99)>,
StatementAssertion<Begin: Pos(1097, 9), End: Pos(1097, 81)>,
StatementAssertion<Begin: Pos(1098, 9), End: Pos(1098, 99)>,
StatementAssertion<Begin: Pos(1100, 9), End: Pos(1100, 81)>,
StatementAssertion<Begin: Pos(1101, 9), End: Pos(1101, 99)>,
StatementAssertion<Begin: Pos(1103, 9), End: Pos(1103, 81)>,
StatementAssertion<Begin: Pos(1104, 9), End: Pos(1104, 99)>,
StatementAssertion<Begin: Pos(1106, 9), End: Pos(1106, 81)>,
StatementAssertion<Begin: Pos(1107, 9), End: Pos(1107, 99)>,
StatementAssertion<Begin: Pos(1109, 9), End: Pos(1109, 81)>,
StatementAssertion<Begin: Pos(1110, 9), End: Pos(1110, 99)>,
StatementAssertion<Begin: Pos(1112, 9), End: Pos(1112, 81)>,
StatementAssertion<Begin: Pos(1113, 9), End: Pos(1113, 99)>,
StatementAssertion<Begin: Pos(1115, 9), End: Pos(1115, 81)>,
StatementAssertion<Begin: Pos(1116, 9), End: Pos(1116, 99)>,
StatementAssertion<Begin: Pos(1118, 9), End: Pos(1118, 81)>,
StatementAssertion<Begin: Pos(1119, 9), End: Pos(1119, 99)>,
StatementAssertion<Begin: Pos(1121, 9), End: Pos(1121, 81)>,
StatementAssertion<Begin: Pos(1122, 9), End: Pos(1122, 99)>,
StatementAssertion<Begin: Pos(1124, 9), End: Pos(1124, 81)>,
StatementAssertion<Begin: Pos(1125, 9), End: Pos(1125, 99)>,
StatementAssertion<Begin: Pos(1127, 9), End: Pos(1127, 81)>,
StatementAssertion<Begin: Pos(1128, 9), End: Pos(1128, 99)>,
StatementAssertion<Begin: Pos(1130, 9), End: Pos(1130, 81)>,
StatementAssertion<Begin: Pos(1131, 9), End: Pos(1131, 99)>,
StatementAssertion<Begin: Pos(1133, 9), End: Pos(1133, 81)>,
StatementAssertion<Begin: Pos(1134, 9), End: Pos(1134, 99)>,
StatementAssertion<Begin: Pos(1138, 9), End: Pos(1138, 82)>,
]
---
public void testIsNumber_catena_0() {
    String val = "12345";
    assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_1() {
    String val = "12345";
    assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_2() {
    String val = "12345";
    val = "1234.5";
    assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_3() {
    String val = "12345";
    val = "1234.5";
    assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_4() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_5() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_6() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_7() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_8() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_9() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_10() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_11() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_12() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_13() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_14() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_15() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_16() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_17() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_18() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_19() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_20() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_21() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_22() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_23() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_24() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_25() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_26() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_27() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_28() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_29() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_30() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_31() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_32() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_33() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_34() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_35() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_36() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_37() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_38() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_39() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_40() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    assertTrue("isNumber(String) 1 Neg failed",  ! NumberUtils.isNumber(val));
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_41() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    assertTrue("isNumber(String)/createNumber(String) 1 Neg failed",  ! checkCreateNumber(val));
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_42() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    assertTrue("isNumber(String) 2 Neg failed",  ! NumberUtils.isNumber(val));
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_43() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    assertTrue("isNumber(String)/createNumber(String) 2 Neg failed",  ! checkCreateNumber(val));
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_44() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    assertTrue("isNumber(String) 3 Neg failed",  ! NumberUtils.isNumber(val));
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_45() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    assertTrue("isNumber(String)/createNumber(String) 3 Neg failed",  ! checkCreateNumber(val));
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_46() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    assertTrue("isNumber(String) 4 Neg failed",  ! NumberUtils.isNumber(val));
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_47() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    assertTrue("isNumber(String)/createNumber(String) 4 Neg failed",  ! checkCreateNumber(val));
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_48() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    assertTrue("isNumber(String) 5 Neg failed",  ! NumberUtils.isNumber(val));
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_49() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    assertTrue("isNumber(String)/createNumber(String) 5 Neg failed",  ! checkCreateNumber(val));
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_50() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    assertTrue("isNumber(String) 6 Neg failed",  ! NumberUtils.isNumber(val));
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_51() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    assertTrue("isNumber(String)/createNumber(String) 6 Neg failed",  ! checkCreateNumber(val));
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_52() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    assertTrue("isNumber(String) 7 Neg failed",  ! NumberUtils.isNumber(val));
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_53() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    assertTrue("isNumber(String)/createNumber(String) 7 Neg failed",  ! checkCreateNumber(val));
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_54() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    assertTrue("isNumber(String) 8 Neg failed",  ! NumberUtils.isNumber(val));
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_55() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    assertTrue("isNumber(String)/createNumber(String) 8 Neg failed",  ! checkCreateNumber(val));
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_56() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    assertTrue("isNumber(String) 9 Neg failed",  ! NumberUtils.isNumber(val));
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_57() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    assertTrue("isNumber(String)/createNumber(String) 9 Neg failed",  ! checkCreateNumber(val));
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_58() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    assertTrue("isNumber(String) 10 Neg failed",  ! NumberUtils.isNumber(val));
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_59() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    assertTrue("isNumber(String)/createNumber(String) 10 Neg failed",  ! checkCreateNumber(val));
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_60() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    assertTrue("isNumber(String) 11 Neg failed",  ! NumberUtils.isNumber(val));
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_61() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    assertTrue("isNumber(String)/createNumber(String) 11 Neg failed",  ! checkCreateNumber(val));
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_62() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    assertTrue("isNumber(String) 12 Neg failed",  ! NumberUtils.isNumber(val));
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_63() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    assertTrue("isNumber(String)/createNumber(String) 12 Neg failed",  ! checkCreateNumber(val));
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_64() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    assertTrue("isNumber(String) 13 Neg failed",  ! NumberUtils.isNumber(val));
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_65() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    assertTrue("isNumber(String)/createNumber(String) 13 Neg failed",  ! checkCreateNumber(val));
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_66() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    assertTrue("isNumber(String) 14 Neg failed",  ! NumberUtils.isNumber(val));
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_67() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    assertTrue("isNumber(String)/createNumber(String) 14 Neg failed",  ! checkCreateNumber(val));
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_68() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    assertTrue("isNumber(String) 15 Neg failed",  ! NumberUtils.isNumber(val));
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_69() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    assertTrue("isNumber(String)/createNumber(String) 15 Neg failed",  ! checkCreateNumber(val));
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_70() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    assertTrue("isNumber(String) 16 Neg failed",  ! NumberUtils.isNumber(val));
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_71() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    assertTrue("isNumber(String)/createNumber(String) 16 Neg failed",  ! checkCreateNumber(val));
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_72() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    assertTrue("isNumber(String) 17 Neg failed",  ! NumberUtils.isNumber(val));
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_73() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    assertTrue("isNumber(String)/createNumber(String) 17 Neg failed",  ! checkCreateNumber(val));
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_74() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    assertTrue("isNumber(String) 18 Neg failed",  ! NumberUtils.isNumber(val));
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_75() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    assertTrue("isNumber(String)/createNumber(String) 18 Neg failed",  ! checkCreateNumber(val));
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_76() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    assertTrue("isNumber(String) 19 Neg failed",  ! NumberUtils.isNumber(val));
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_77() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    assertTrue("isNumber(String)/createNumber(String) 19 Neg failed",  ! checkCreateNumber(val));
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_78() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    assertTrue("isNumber(String) 20 Neg failed",  ! NumberUtils.isNumber(val));
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_79() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    assertTrue("isNumber(String)/createNumber(String) 20 Neg failed",  ! checkCreateNumber(val));
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_80() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    assertTrue("isNumber(String) 21 Neg failed",  ! NumberUtils.isNumber(val));
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_81() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    assertTrue("isNumber(String)/createNumber(String) 21 Neg failed",  ! checkCreateNumber(val));
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_82() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    assertTrue("isNumber(String) 22 Neg failed",  ! NumberUtils.isNumber(val));
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_83() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    assertTrue("isNumber(String)/createNumber(String) 22 Neg failed",  ! checkCreateNumber(val));
    val = " 1111";
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_84() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    assertTrue("isNumber(String) 23 Neg failed",  ! NumberUtils.isNumber(val));
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_85() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    assertTrue("isNumber(String)/createNumber(String) 23 Neg failed",  ! checkCreateNumber(val));
    val = "1111 ";
    val = "2.";
    
}

---
---
public void testIsNumber_catena_86() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    assertTrue("isNumber(String) 24 Neg failed",  ! NumberUtils.isNumber(val));
    val = "2.";
    
}

---
---
public void testIsNumber_catena_87() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    assertTrue("isNumber(String)/createNumber(String) 24 Neg failed",  ! checkCreateNumber(val));
    val = "2.";
    
}

---
---
public void testIsNumber_catena_88() {
    String val = "12345";
    val = "1234.5";
    val = ".12345";
    val = "1234E5";
    val = "1234E+5";
    val = "1234E-5";
    val = "123.4E5";
    val = "-1234";
    val = "-1234.5";
    val = "-.12345";
    val = "-1234E5";
    val = "0";
    val = "-0";
    val = "01234";
    val = "-01234";
    val = "0xABC123";
    val = "0x0";
    val = "123.4E21D";
    val = "-221.23F";
    val = "22338L";
    val = null;
    val = "";
    val = "--2.3";
    val = ".12.3";
    val = "-123E";
    val = "-123E+-212";
    val = "-123E2.12";
    val = "0xGF";
    val = "0xFAE-1";
    val = ".";
    val = "-0ABC123";
    val = "123.4E-D";
    val = "123.4ED";
    val = "1234E5l";
    val = "11a";
    val = "1a";
    val = "a";
    val = "11g";
    val = "11z";
    val = "11def";
    val = "11d11";
    val = "11 11";
    val = " 1111";
    val = "1111 ";
    val = "2.";
    assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));
    
}

---
--------------------
Run: Lang_56
@@@
Split test: org.apache.commons.lang.time.FastDateFormatTest::testLang303
file: /root/workbench/exportInfo/d4j_buggy/Lang_56/src/test//org/apache/commons/lang/time/FastDateFormatTest.java
Begin: Pos(286, 12)
End: Pos(289, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_56/src/test//org/apache/commons/lang/time/FastDateFormatTest.java
Name: testLang303
Childs: []
--------------------
Run: Lang_28
@@@
Split test: org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest::testSupplementaryUnescaping
file: /root/workbench/exportInfo/d4j_buggy/Lang_28/src/test/java//org/apache/commons/lang3/text/translate/NumericEntityUnescaperTest.java
Begin: Pos(27, 12)
End: Pos(34, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_28/src/test/java//org/apache/commons/lang3/text/translate/NumericEntityUnescaperTest.java
Name: testSupplementaryUnescaping
Childs: [StatementAssertion<Begin: Pos(33, 9), End: Pos(33, 103)>,
]
--------------------
Run: Lang_50
@@@
Split test: org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateInstance
file: /root/workbench/exportInfo/d4j_buggy/Lang_50/src/test//org/apache/commons/lang/time/FastDateFormatTest.java
Begin: Pos(135, 12)
End: Pos(153, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_50/src/test//org/apache/commons/lang/time/FastDateFormatTest.java
Name: test_changeDefault_Locale_DateInstance
Childs: [StatementAssertion<Begin: Pos(144, 13), End: Pos(144, 60)>,
StatementAssertion<Begin: Pos(145, 13), End: Pos(145, 55)>,
StatementAssertion<Begin: Pos(146, 13), End: Pos(146, 60)>,
StatementAssertion<Begin: Pos(147, 13), End: Pos(147, 43)>,
StatementAssertion<Begin: Pos(148, 13), End: Pos(148, 43)>,
]
---
public void test_changeDefault_Locale_DateInstance_catena_0() {
    Locale realDefaultLocale = Locale.getDefault();
    try {
        Locale.setDefault(Locale.US);
        FastDateFormat format1 = FastDateFormat.getDateInstance(FastDateFormat.FULL, Locale.GERMANY);
        FastDateFormat format2 = FastDateFormat.getDateInstance(FastDateFormat.FULL);
        Locale.setDefault(Locale.GERMANY);
        FastDateFormat format3 = FastDateFormat.getDateInstance(FastDateFormat.FULL);
        assertSame(Locale.GERMANY, format1.getLocale());
        
    }
    finally {
        Locale.setDefault(realDefaultLocale);
        
    }
}

---
---
public void test_changeDefault_Locale_DateInstance_catena_1() {
    Locale realDefaultLocale = Locale.getDefault();
    try {
        Locale.setDefault(Locale.US);
        FastDateFormat format1 = FastDateFormat.getDateInstance(FastDateFormat.FULL, Locale.GERMANY);
        FastDateFormat format2 = FastDateFormat.getDateInstance(FastDateFormat.FULL);
        Locale.setDefault(Locale.GERMANY);
        FastDateFormat format3 = FastDateFormat.getDateInstance(FastDateFormat.FULL);
        assertSame(Locale.US, format2.getLocale());
        
    }
    finally {
        Locale.setDefault(realDefaultLocale);
        
    }
}

---
---
public void test_changeDefault_Locale_DateInstance_catena_2() {
    Locale realDefaultLocale = Locale.getDefault();
    try {
        Locale.setDefault(Locale.US);
        FastDateFormat format1 = FastDateFormat.getDateInstance(FastDateFormat.FULL, Locale.GERMANY);
        FastDateFormat format2 = FastDateFormat.getDateInstance(FastDateFormat.FULL);
        Locale.setDefault(Locale.GERMANY);
        FastDateFormat format3 = FastDateFormat.getDateInstance(FastDateFormat.FULL);
        assertSame(Locale.GERMANY, format3.getLocale());
        
    }
    finally {
        Locale.setDefault(realDefaultLocale);
        
    }
}

---
---
public void test_changeDefault_Locale_DateInstance_catena_3() {
    Locale realDefaultLocale = Locale.getDefault();
    try {
        Locale.setDefault(Locale.US);
        FastDateFormat format1 = FastDateFormat.getDateInstance(FastDateFormat.FULL, Locale.GERMANY);
        FastDateFormat format2 = FastDateFormat.getDateInstance(FastDateFormat.FULL);
        Locale.setDefault(Locale.GERMANY);
        FastDateFormat format3 = FastDateFormat.getDateInstance(FastDateFormat.FULL);
        assertTrue(format1 != format2);
        
    }
    finally {
        Locale.setDefault(realDefaultLocale);
        
    }
}

---
---
public void test_changeDefault_Locale_DateInstance_catena_4() {
    Locale realDefaultLocale = Locale.getDefault();
    try {
        Locale.setDefault(Locale.US);
        FastDateFormat format1 = FastDateFormat.getDateInstance(FastDateFormat.FULL, Locale.GERMANY);
        FastDateFormat format2 = FastDateFormat.getDateInstance(FastDateFormat.FULL);
        Locale.setDefault(Locale.GERMANY);
        FastDateFormat format3 = FastDateFormat.getDateInstance(FastDateFormat.FULL);
        assertTrue(format2 != format3);
        
    }
    finally {
        Locale.setDefault(realDefaultLocale);
        
    }
}

---
@@@
Split test: org.apache.commons.lang.time.FastDateFormatTest::test_changeDefault_Locale_DateTimeInstance
file: /root/workbench/exportInfo/d4j_buggy/Lang_50/src/test//org/apache/commons/lang/time/FastDateFormatTest.java
Begin: Pos(155, 12)
End: Pos(173, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_50/src/test//org/apache/commons/lang/time/FastDateFormatTest.java
Name: test_changeDefault_Locale_DateTimeInstance
Childs: [StatementAssertion<Begin: Pos(164, 13), End: Pos(164, 60)>,
StatementAssertion<Begin: Pos(165, 13), End: Pos(165, 55)>,
StatementAssertion<Begin: Pos(166, 13), End: Pos(166, 60)>,
StatementAssertion<Begin: Pos(167, 13), End: Pos(167, 43)>,
StatementAssertion<Begin: Pos(168, 13), End: Pos(168, 43)>,
]
---
public void test_changeDefault_Locale_DateTimeInstance_catena_0() {
    Locale realDefaultLocale = Locale.getDefault();
    try {
        Locale.setDefault(Locale.US);
        FastDateFormat format1 = FastDateFormat.getDateTimeInstance(FastDateFormat.FULL, FastDateFormat.FULL, Locale.GERMANY);
        FastDateFormat format2 = FastDateFormat.getDateTimeInstance(FastDateFormat.FULL, FastDateFormat.FULL);
        Locale.setDefault(Locale.GERMANY);
        FastDateFormat format3 = FastDateFormat.getDateTimeInstance(FastDateFormat.FULL, FastDateFormat.FULL);
        assertSame(Locale.GERMANY, format1.getLocale());
        
    }
    finally {
        Locale.setDefault(realDefaultLocale);
        
    }
}

---
---
public void test_changeDefault_Locale_DateTimeInstance_catena_1() {
    Locale realDefaultLocale = Locale.getDefault();
    try {
        Locale.setDefault(Locale.US);
        FastDateFormat format1 = FastDateFormat.getDateTimeInstance(FastDateFormat.FULL, FastDateFormat.FULL, Locale.GERMANY);
        FastDateFormat format2 = FastDateFormat.getDateTimeInstance(FastDateFormat.FULL, FastDateFormat.FULL);
        Locale.setDefault(Locale.GERMANY);
        FastDateFormat format3 = FastDateFormat.getDateTimeInstance(FastDateFormat.FULL, FastDateFormat.FULL);
        assertSame(Locale.US, format2.getLocale());
        
    }
    finally {
        Locale.setDefault(realDefaultLocale);
        
    }
}

---
---
public void test_changeDefault_Locale_DateTimeInstance_catena_2() {
    Locale realDefaultLocale = Locale.getDefault();
    try {
        Locale.setDefault(Locale.US);
        FastDateFormat format1 = FastDateFormat.getDateTimeInstance(FastDateFormat.FULL, FastDateFormat.FULL, Locale.GERMANY);
        FastDateFormat format2 = FastDateFormat.getDateTimeInstance(FastDateFormat.FULL, FastDateFormat.FULL);
        Locale.setDefault(Locale.GERMANY);
        FastDateFormat format3 = FastDateFormat.getDateTimeInstance(FastDateFormat.FULL, FastDateFormat.FULL);
        assertSame(Locale.GERMANY, format3.getLocale());
        
    }
    finally {
        Locale.setDefault(realDefaultLocale);
        
    }
}

---
---
public void test_changeDefault_Locale_DateTimeInstance_catena_3() {
    Locale realDefaultLocale = Locale.getDefault();
    try {
        Locale.setDefault(Locale.US);
        FastDateFormat format1 = FastDateFormat.getDateTimeInstance(FastDateFormat.FULL, FastDateFormat.FULL, Locale.GERMANY);
        FastDateFormat format2 = FastDateFormat.getDateTimeInstance(FastDateFormat.FULL, FastDateFormat.FULL);
        Locale.setDefault(Locale.GERMANY);
        FastDateFormat format3 = FastDateFormat.getDateTimeInstance(FastDateFormat.FULL, FastDateFormat.FULL);
        assertTrue(format1 != format2);
        
    }
    finally {
        Locale.setDefault(realDefaultLocale);
        
    }
}

---
---
public void test_changeDefault_Locale_DateTimeInstance_catena_4() {
    Locale realDefaultLocale = Locale.getDefault();
    try {
        Locale.setDefault(Locale.US);
        FastDateFormat format1 = FastDateFormat.getDateTimeInstance(FastDateFormat.FULL, FastDateFormat.FULL, Locale.GERMANY);
        FastDateFormat format2 = FastDateFormat.getDateTimeInstance(FastDateFormat.FULL, FastDateFormat.FULL);
        Locale.setDefault(Locale.GERMANY);
        FastDateFormat format3 = FastDateFormat.getDateTimeInstance(FastDateFormat.FULL, FastDateFormat.FULL);
        assertTrue(format2 != format3);
        
    }
    finally {
        Locale.setDefault(realDefaultLocale);
        
    }
}

---
--------------------
Run: Lang_10
@@@
Split test: org.apache.commons.lang3.time.FastDateFormat_ParserTest::testLANG_831
file: /root/workbench/exportInfo/d4j_buggy/Lang_10/src/test/java//org/apache/commons/lang3/time/FastDateFormat_ParserTest.java
# Exception:
Traceback (most recent call last):
  File "run.py", line 39, in run
    fti, check = spliter.process_test_node_v2(path2file, test[1])
  File "/root/workbench/splitTests/spliter.py", line 259, in process_test_node_v2
    node = get_only_node(name, _globals)
  File "/root/workbench/splitTests/util.py", line 39, in get_only_node
    raise ParseError('Cannot find method <{}> in AST'.format(name))
util.ParseError: Cannot find method <testLANG_831> in AST

---
@@@
Split test: org.apache.commons.lang3.time.FastDateParserTest::testLANG_831
file: /root/workbench/exportInfo/d4j_buggy/Lang_10/src/test/java//org/apache/commons/lang3/time/FastDateParserTest.java
Begin: Pos(346, 5)
End: Pos(349, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_10/src/test/java//org/apache/commons/lang3/time/FastDateParserTest.java
Name: testLANG_831
Childs: [StatementAssertion<Begin: Pos(348, 9), End: Pos(348, 44)>,
]
--------------------
Run: Lang_47
@@@
Split test: org.apache.commons.lang.text.StrBuilderTest::testLang412Left
file: /root/workbench/exportInfo/d4j_buggy/Lang_47/src/test//org/apache/commons/lang/text/StrBuilderTest.java
Begin: Pos(1759, 12)
End: Pos(1763, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_47/src/test//org/apache/commons/lang/text/StrBuilderTest.java
Name: testLang412Left
Childs: [StatementAssertion<Begin: Pos(1762, 9), End: Pos(1762, 105)>,
]
@@@
Split test: org.apache.commons.lang.text.StrBuilderTest::testLang412Right
file: /root/workbench/exportInfo/d4j_buggy/Lang_47/src/test//org/apache/commons/lang/text/StrBuilderTest.java
Begin: Pos(1753, 12)
End: Pos(1757, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_47/src/test//org/apache/commons/lang/text/StrBuilderTest.java
Name: testLang412Right
Childs: [StatementAssertion<Begin: Pos(1756, 9), End: Pos(1756, 106)>,
]
--------------------
Run: Lang_53
@@@
Split test: org.apache.commons.lang.time.DateUtilsTest::testRoundLang346
file: /root/workbench/exportInfo/d4j_buggy/Lang_53/src/test//org/apache/commons/lang/time/DateUtilsTest.java
Begin: Pos(705, 12)
End: Pos(762, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_53/src/test//org/apache/commons/lang/time/DateUtilsTest.java
Name: testRoundLang346
Childs: [StatementAssertion<Begin: Pos(712, 9), End: Pos(714, 61)>,
StatementAssertion<Begin: Pos(718, 9), End: Pos(720, 61)>,
StatementAssertion<Begin: Pos(726, 9), End: Pos(728, 61)>,
StatementAssertion<Begin: Pos(733, 9), End: Pos(735, 61)>,
StatementAssertion<Begin: Pos(740, 9), End: Pos(742, 61)>,
StatementAssertion<Begin: Pos(747, 9), End: Pos(749, 61)>,
StatementAssertion<Begin: Pos(753, 9), End: Pos(755, 59)>,
StatementAssertion<Begin: Pos(759, 9), End: Pos(761, 59)>,
]
---
public void testRoundLang346_catena_0()throws Exception {
    TimeZone.setDefault(defaultZone);
    dateTimeParser.setTimeZone(defaultZone);
    Calendar testCalendar = Calendar.getInstance();
    testCalendar.set(2007, 6, 2, 8, 8, 50);
    Date date = testCalendar.getTime();
    assertEquals("Minute Round Up Failed", dateTimeParser.parse("July 2, 2007 08:09:00.000"), DateUtils.round(date, Calendar.MINUTE));
    testCalendar.set(2007, 6, 2, 8, 8, 20);
    date = testCalendar.getTime();
    testCalendar.set(2007, 6, 2, 8, 8, 50);
    testCalendar.set(Calendar.MILLISECOND, 600);
    date = testCalendar.getTime();
    testCalendar.set(2007, 6, 2, 8, 8, 50);
    testCalendar.set(Calendar.MILLISECOND, 200);
    date = testCalendar.getTime();
    testCalendar.set(2007, 6, 2, 8, 8, 20);
    testCalendar.set(Calendar.MILLISECOND, 600);
    date = testCalendar.getTime();
    testCalendar.set(2007, 6, 2, 8, 8, 20);
    testCalendar.set(Calendar.MILLISECOND, 200);
    date = testCalendar.getTime();
    testCalendar.set(2007, 6, 2, 8, 8, 50);
    date = testCalendar.getTime();
    testCalendar.set(2007, 6, 2, 8, 31, 50);
    date = testCalendar.getTime();
    
}

---
---
public void testRoundLang346_catena_1()throws Exception {
    TimeZone.setDefault(defaultZone);
    dateTimeParser.setTimeZone(defaultZone);
    Calendar testCalendar = Calendar.getInstance();
    testCalendar.set(2007, 6, 2, 8, 8, 50);
    Date date = testCalendar.getTime();
    testCalendar.set(2007, 6, 2, 8, 8, 20);
    date = testCalendar.getTime();
    assertEquals("Minute No Round Failed", dateTimeParser.parse("July 2, 2007 08:08:00.000"), DateUtils.round(date, Calendar.MINUTE));
    testCalendar.set(2007, 6, 2, 8, 8, 50);
    testCalendar.set(Calendar.MILLISECOND, 600);
    date = testCalendar.getTime();
    testCalendar.set(2007, 6, 2, 8, 8, 50);
    testCalendar.set(Calendar.MILLISECOND, 200);
    date = testCalendar.getTime();
    testCalendar.set(2007, 6, 2, 8, 8, 20);
    testCalendar.set(Calendar.MILLISECOND, 600);
    date = testCalendar.getTime();
    testCalendar.set(2007, 6, 2, 8, 8, 20);
    testCalendar.set(Calendar.MILLISECOND, 200);
    date = testCalendar.getTime();
    testCalendar.set(2007, 6, 2, 8, 8, 50);
    date = testCalendar.getTime();
    testCalendar.set(2007, 6, 2, 8, 31, 50);
    date = testCalendar.getTime();
    
}

---
---
public void testRoundLang346_catena_2()throws Exception {
    TimeZone.setDefault(defaultZone);
    dateTimeParser.setTimeZone(defaultZone);
    Calendar testCalendar = Calendar.getInstance();
    testCalendar.set(2007, 6, 2, 8, 8, 50);
    Date date = testCalendar.getTime();
    testCalendar.set(2007, 6, 2, 8, 8, 20);
    date = testCalendar.getTime();
    testCalendar.set(2007, 6, 2, 8, 8, 50);
    testCalendar.set(Calendar.MILLISECOND, 600);
    date = testCalendar.getTime();
    assertEquals("Second Round Up with 600 Milli Seconds Failed", dateTimeParser.parse("July 2, 2007 08:08:51.000"), DateUtils.round(date, Calendar.SECOND));
    testCalendar.set(2007, 6, 2, 8, 8, 50);
    testCalendar.set(Calendar.MILLISECOND, 200);
    date = testCalendar.getTime();
    testCalendar.set(2007, 6, 2, 8, 8, 20);
    testCalendar.set(Calendar.MILLISECOND, 600);
    date = testCalendar.getTime();
    testCalendar.set(2007, 6, 2, 8, 8, 20);
    testCalendar.set(Calendar.MILLISECOND, 200);
    date = testCalendar.getTime();
    testCalendar.set(2007, 6, 2, 8, 8, 50);
    date = testCalendar.getTime();
    testCalendar.set(2007, 6, 2, 8, 31, 50);
    date = testCalendar.getTime();
    
}

---
---
public void testRoundLang346_catena_3()throws Exception {
    TimeZone.setDefault(defaultZone);
    dateTimeParser.setTimeZone(defaultZone);
    Calendar testCalendar = Calendar.getInstance();
    testCalendar.set(2007, 6, 2, 8, 8, 50);
    Date date = testCalendar.getTime();
    testCalendar.set(2007, 6, 2, 8, 8, 20);
    date = testCalendar.getTime();
    testCalendar.set(2007, 6, 2, 8, 8, 50);
    testCalendar.set(Calendar.MILLISECOND, 600);
    date = testCalendar.getTime();
    testCalendar.set(2007, 6, 2, 8, 8, 50);
    testCalendar.set(Calendar.MILLISECOND, 200);
    date = testCalendar.getTime();
    assertEquals("Second Round Down with 200 Milli Seconds Failed", dateTimeParser.parse("July 2, 2007 08:08:50.000"), DateUtils.round(date, Calendar.SECOND));
    testCalendar.set(2007, 6, 2, 8, 8, 20);
    testCalendar.set(Calendar.MILLISECOND, 600);
    date = testCalendar.getTime();
    testCalendar.set(2007, 6, 2, 8, 8, 20);
    testCalendar.set(Calendar.MILLISECOND, 200);
    date = testCalendar.getTime();
    testCalendar.set(2007, 6, 2, 8, 8, 50);
    date = testCalendar.getTime();
    testCalendar.set(2007, 6, 2, 8, 31, 50);
    date = testCalendar.getTime();
    
}

---
---
public void testRoundLang346_catena_4()throws Exception {
    TimeZone.setDefault(defaultZone);
    dateTimeParser.setTimeZone(defaultZone);
    Calendar testCalendar = Calendar.getInstance();
    testCalendar.set(2007, 6, 2, 8, 8, 50);
    Date date = testCalendar.getTime();
    testCalendar.set(2007, 6, 2, 8, 8, 20);
    date = testCalendar.getTime();
    testCalendar.set(2007, 6, 2, 8, 8, 50);
    testCalendar.set(Calendar.MILLISECOND, 600);
    date = testCalendar.getTime();
    testCalendar.set(2007, 6, 2, 8, 8, 50);
    testCalendar.set(Calendar.MILLISECOND, 200);
    date = testCalendar.getTime();
    testCalendar.set(2007, 6, 2, 8, 8, 20);
    testCalendar.set(Calendar.MILLISECOND, 600);
    date = testCalendar.getTime();
    assertEquals("Second Round Up with 200 Milli Seconds Failed", dateTimeParser.parse("July 2, 2007 08:08:21.000"), DateUtils.round(date, Calendar.SECOND));
    testCalendar.set(2007, 6, 2, 8, 8, 20);
    testCalendar.set(Calendar.MILLISECOND, 200);
    date = testCalendar.getTime();
    testCalendar.set(2007, 6, 2, 8, 8, 50);
    date = testCalendar.getTime();
    testCalendar.set(2007, 6, 2, 8, 31, 50);
    date = testCalendar.getTime();
    
}

---
---
public void testRoundLang346_catena_5()throws Exception {
    TimeZone.setDefault(defaultZone);
    dateTimeParser.setTimeZone(defaultZone);
    Calendar testCalendar = Calendar.getInstance();
    testCalendar.set(2007, 6, 2, 8, 8, 50);
    Date date = testCalendar.getTime();
    testCalendar.set(2007, 6, 2, 8, 8, 20);
    date = testCalendar.getTime();
    testCalendar.set(2007, 6, 2, 8, 8, 50);
    testCalendar.set(Calendar.MILLISECOND, 600);
    date = testCalendar.getTime();
    testCalendar.set(2007, 6, 2, 8, 8, 50);
    testCalendar.set(Calendar.MILLISECOND, 200);
    date = testCalendar.getTime();
    testCalendar.set(2007, 6, 2, 8, 8, 20);
    testCalendar.set(Calendar.MILLISECOND, 600);
    date = testCalendar.getTime();
    testCalendar.set(2007, 6, 2, 8, 8, 20);
    testCalendar.set(Calendar.MILLISECOND, 200);
    date = testCalendar.getTime();
    assertEquals("Second Round Down with 200 Milli Seconds Failed", dateTimeParser.parse("July 2, 2007 08:08:20.000"), DateUtils.round(date, Calendar.SECOND));
    testCalendar.set(2007, 6, 2, 8, 8, 50);
    date = testCalendar.getTime();
    testCalendar.set(2007, 6, 2, 8, 31, 50);
    date = testCalendar.getTime();
    
}

---
---
public void testRoundLang346_catena_6()throws Exception {
    TimeZone.setDefault(defaultZone);
    dateTimeParser.setTimeZone(defaultZone);
    Calendar testCalendar = Calendar.getInstance();
    testCalendar.set(2007, 6, 2, 8, 8, 50);
    Date date = testCalendar.getTime();
    testCalendar.set(2007, 6, 2, 8, 8, 20);
    date = testCalendar.getTime();
    testCalendar.set(2007, 6, 2, 8, 8, 50);
    testCalendar.set(Calendar.MILLISECOND, 600);
    date = testCalendar.getTime();
    testCalendar.set(2007, 6, 2, 8, 8, 50);
    testCalendar.set(Calendar.MILLISECOND, 200);
    date = testCalendar.getTime();
    testCalendar.set(2007, 6, 2, 8, 8, 20);
    testCalendar.set(Calendar.MILLISECOND, 600);
    date = testCalendar.getTime();
    testCalendar.set(2007, 6, 2, 8, 8, 20);
    testCalendar.set(Calendar.MILLISECOND, 200);
    date = testCalendar.getTime();
    testCalendar.set(2007, 6, 2, 8, 8, 50);
    date = testCalendar.getTime();
    assertEquals("Hour Round Down Failed", dateTimeParser.parse("July 2, 2007 08:00:00.000"), DateUtils.round(date, Calendar.HOUR));
    testCalendar.set(2007, 6, 2, 8, 31, 50);
    date = testCalendar.getTime();
    
}

---
---
public void testRoundLang346_catena_7()throws Exception {
    TimeZone.setDefault(defaultZone);
    dateTimeParser.setTimeZone(defaultZone);
    Calendar testCalendar = Calendar.getInstance();
    testCalendar.set(2007, 6, 2, 8, 8, 50);
    Date date = testCalendar.getTime();
    testCalendar.set(2007, 6, 2, 8, 8, 20);
    date = testCalendar.getTime();
    testCalendar.set(2007, 6, 2, 8, 8, 50);
    testCalendar.set(Calendar.MILLISECOND, 600);
    date = testCalendar.getTime();
    testCalendar.set(2007, 6, 2, 8, 8, 50);
    testCalendar.set(Calendar.MILLISECOND, 200);
    date = testCalendar.getTime();
    testCalendar.set(2007, 6, 2, 8, 8, 20);
    testCalendar.set(Calendar.MILLISECOND, 600);
    date = testCalendar.getTime();
    testCalendar.set(2007, 6, 2, 8, 8, 20);
    testCalendar.set(Calendar.MILLISECOND, 200);
    date = testCalendar.getTime();
    testCalendar.set(2007, 6, 2, 8, 8, 50);
    date = testCalendar.getTime();
    testCalendar.set(2007, 6, 2, 8, 31, 50);
    date = testCalendar.getTime();
    assertEquals("Hour Round Up Failed", dateTimeParser.parse("July 2, 2007 09:00:00.000"), DateUtils.round(date, Calendar.HOUR));
    
}

---
--------------------
Run: Lang_1
@@@
Split test: org.apache.commons.lang3.math.NumberUtilsTest::TestLang747
file: /root/workbench/exportInfo/d4j_buggy/Lang_1/src/test/java//org/apache/commons/lang3/math/NumberUtilsTest.java
Begin: Pos(249, 5)
End: Pos(284, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_1/src/test/java//org/apache/commons/lang3/math/NumberUtilsTest.java
Name: TestLang747
Childs: [StatementAssertion<Begin: Pos(251, 9), End: Pos(251, 87)>,
StatementAssertion<Begin: Pos(252, 9), End: Pos(252, 88)>,
StatementAssertion<Begin: Pos(253, 9), End: Pos(253, 89)>,
StatementAssertion<Begin: Pos(254, 9), End: Pos(254, 90)>,
StatementAssertion<Begin: Pos(255, 9), End: Pos(255, 91)>,
StatementAssertion<Begin: Pos(256, 9), End: Pos(256, 91)>,
StatementAssertion<Begin: Pos(257, 9), End: Pos(257, 91)>,
StatementAssertion<Begin: Pos(260, 9), End: Pos(260, 91)>,
StatementAssertion<Begin: Pos(261, 9), End: Pos(261, 93)>,
StatementAssertion<Begin: Pos(262, 9), End: Pos(262, 92)>,
StatementAssertion<Begin: Pos(263, 9), End: Pos(263, 93)>,
StatementAssertion<Begin: Pos(265, 9), End: Pos(265, 97)>,
StatementAssertion<Begin: Pos(266, 9), End: Pos(266, 98)>,
StatementAssertion<Begin: Pos(267, 9), End: Pos(267, 99)>,
StatementAssertion<Begin: Pos(268, 9), End: Pos(268, 100)>,
StatementAssertion<Begin: Pos(269, 9), End: Pos(269, 101)>,
StatementAssertion<Begin: Pos(270, 9), End: Pos(270, 102)>,
StatementAssertion<Begin: Pos(271, 9), End: Pos(271, 103)>,
StatementAssertion<Begin: Pos(272, 9), End: Pos(272, 104)>,
StatementAssertion<Begin: Pos(274, 9), End: Pos(274, 109)>,
StatementAssertion<Begin: Pos(275, 9), End: Pos(275, 109)>,
StatementAssertion<Begin: Pos(278, 9), End: Pos(278, 105)>,
StatementAssertion<Begin: Pos(279, 9), End: Pos(279, 104)>,
StatementAssertion<Begin: Pos(280, 9), End: Pos(280, 105)>,
StatementAssertion<Begin: Pos(282, 9), End: Pos(282, 113)>,
StatementAssertion<Begin: Pos(283, 9), End: Pos(283, 110)>,
]
---
@Test public void TestLang747_catena_0() {
    assertEquals(Integer.valueOf(0x8000), NumberUtils.createNumber("0x8000"));
    
}

---
---
@Test public void TestLang747_catena_1() {
    assertEquals(Integer.valueOf(0x80000), NumberUtils.createNumber("0x80000"));
    
}

---
---
@Test public void TestLang747_catena_2() {
    assertEquals(Integer.valueOf(0x800000), NumberUtils.createNumber("0x800000"));
    
}

---
---
@Test public void TestLang747_catena_3() {
    assertEquals(Integer.valueOf(0x8000000), NumberUtils.createNumber("0x8000000"));
    
}

---
---
@Test public void TestLang747_catena_4() {
    assertEquals(Integer.valueOf(0x7FFFFFFF), NumberUtils.createNumber("0x7FFFFFFF"));
    
}

---
---
@Test public void TestLang747_catena_5() {
    assertEquals(Long.valueOf(0x80000000L), NumberUtils.createNumber("0x80000000"));
    
}

---
---
@Test public void TestLang747_catena_6() {
    assertEquals(Long.valueOf(0xFFFFFFFFL), NumberUtils.createNumber("0xFFFFFFFF"));
    
}

---
---
@Test public void TestLang747_catena_7() {
    assertEquals(Integer.valueOf(0x8000000), NumberUtils.createNumber("0x08000000"));
    
}

---
---
@Test public void TestLang747_catena_8() {
    assertEquals(Integer.valueOf(0x7FFFFFFF), NumberUtils.createNumber("0x007FFFFFFF"));
    
}

---
---
@Test public void TestLang747_catena_9() {
    assertEquals(Long.valueOf(0x80000000L), NumberUtils.createNumber("0x080000000"));
    
}

---
---
@Test public void TestLang747_catena_10() {
    assertEquals(Long.valueOf(0xFFFFFFFFL), NumberUtils.createNumber("0x00FFFFFFFF"));
    
}

---
---
@Test public void TestLang747_catena_11() {
    assertEquals(Long.valueOf(0x800000000L), NumberUtils.createNumber("0x800000000"));
    
}

---
---
@Test public void TestLang747_catena_12() {
    assertEquals(Long.valueOf(0x8000000000L), NumberUtils.createNumber("0x8000000000"));
    
}

---
---
@Test public void TestLang747_catena_13() {
    assertEquals(Long.valueOf(0x80000000000L), NumberUtils.createNumber("0x80000000000"));
    
}

---
---
@Test public void TestLang747_catena_14() {
    assertEquals(Long.valueOf(0x800000000000L), NumberUtils.createNumber("0x800000000000"));
    
}

---
---
@Test public void TestLang747_catena_15() {
    assertEquals(Long.valueOf(0x8000000000000L), NumberUtils.createNumber("0x8000000000000"));
    
}

---
---
@Test public void TestLang747_catena_16() {
    assertEquals(Long.valueOf(0x80000000000000L), NumberUtils.createNumber("0x80000000000000"));
    
}

---
---
@Test public void TestLang747_catena_17() {
    assertEquals(Long.valueOf(0x800000000000000L), NumberUtils.createNumber("0x800000000000000"));
    
}

---
---
@Test public void TestLang747_catena_18() {
    assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber("0x7FFFFFFFFFFFFFFF"));
    
}

---
---
@Test public void TestLang747_catena_19() {
    assertEquals(new BigInteger("8000000000000000", 16), NumberUtils.createNumber("0x8000000000000000"));
    
}

---
---
@Test public void TestLang747_catena_20() {
    assertEquals(new BigInteger("FFFFFFFFFFFFFFFF", 16), NumberUtils.createNumber("0xFFFFFFFFFFFFFFFF"));
    
}

---
---
@Test public void TestLang747_catena_21() {
    assertEquals(Long.valueOf(0x80000000000000L), NumberUtils.createNumber("0x00080000000000000"));
    
}

---
---
@Test public void TestLang747_catena_22() {
    assertEquals(Long.valueOf(0x800000000000000L), NumberUtils.createNumber("0x0800000000000000"));
    
}

---
---
@Test public void TestLang747_catena_23() {
    assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber("0x07FFFFFFFFFFFFFFF"));
    
}

---
---
@Test public void TestLang747_catena_24() {
    assertEquals(new BigInteger("8000000000000000", 16), NumberUtils.createNumber("0x00008000000000000000"));
    
}

---
---
@Test public void TestLang747_catena_25() {
    assertEquals(new BigInteger("FFFFFFFFFFFFFFFF", 16), NumberUtils.createNumber("0x0FFFFFFFFFFFFFFFF"));
    
}

---
--------------------
Run: Lang_22
@@@
Split test: org.apache.commons.lang3.math.FractionTest::testReducedFactory_int_int
file: /root/workbench/exportInfo/d4j_buggy/Lang_22/src/test/java//org/apache/commons/lang3/math/FractionTest.java
Begin: Pos(250, 12)
End: Pos(338, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_22/src/test/java//org/apache/commons/lang3/math/FractionTest.java
Name: testReducedFactory_int_int
Childs: [StatementAssertion<Begin: Pos(255, 9), End: Pos(255, 42)>,
StatementAssertion<Begin: Pos(256, 9), End: Pos(256, 44)>,
StatementAssertion<Begin: Pos(260, 9), End: Pos(260, 42)>,
StatementAssertion<Begin: Pos(261, 9), End: Pos(261, 44)>,
StatementAssertion<Begin: Pos(264, 9), End: Pos(264, 42)>,
StatementAssertion<Begin: Pos(265, 9), End: Pos(265, 44)>,
StatementAssertion<Begin: Pos(269, 9), End: Pos(269, 43)>,
StatementAssertion<Begin: Pos(270, 9), End: Pos(270, 44)>,
StatementAssertion<Begin: Pos(274, 9), End: Pos(274, 43)>,
StatementAssertion<Begin: Pos(275, 9), End: Pos(275, 44)>,
StatementAssertion<Begin: Pos(278, 9), End: Pos(278, 43)>,
StatementAssertion<Begin: Pos(279, 9), End: Pos(279, 44)>,
StatementAssertion<Begin: Pos(282, 9), End: Pos(282, 42)>,
StatementAssertion<Begin: Pos(283, 9), End: Pos(283, 44)>,
StatementAssertion<Begin: Pos(288, 13), End: Pos(288, 50)>,
StatementAssertion<Begin: Pos(293, 13), End: Pos(293, 50)>,
StatementAssertion<Begin: Pos(298, 13), End: Pos(298, 50)>,
StatementAssertion<Begin: Pos(303, 9), End: Pos(303, 42)>,
StatementAssertion<Begin: Pos(304, 9), End: Pos(304, 44)>,
StatementAssertion<Begin: Pos(307, 9), End: Pos(307, 42)>,
StatementAssertion<Begin: Pos(308, 9), End: Pos(308, 44)>,
StatementAssertion<Begin: Pos(311, 9), End: Pos(311, 42)>,
StatementAssertion<Begin: Pos(312, 9), End: Pos(312, 44)>,
StatementAssertion<Begin: Pos(315, 9), End: Pos(315, 42)>,
StatementAssertion<Begin: Pos(316, 9), End: Pos(316, 44)>,
StatementAssertion<Begin: Pos(319, 9), End: Pos(319, 43)>,
StatementAssertion<Begin: Pos(320, 9), End: Pos(320, 44)>,
StatementAssertion<Begin: Pos(325, 9), End: Pos(325, 42)>,
StatementAssertion<Begin: Pos(326, 9), End: Pos(326, 67)>,
StatementAssertion<Begin: Pos(331, 13), End: Pos(331, 50)>,
StatementAssertion<Begin: Pos(336, 9), End: Pos(336, 62)>,
StatementAssertion<Begin: Pos(337, 9), End: Pos(337, 44)>,
]
---
public void testReducedFactory_int_int_catena_0() {
    Fraction f = null;
    f = Fraction.getReducedFraction(0, 1);
    assertEquals(0, f.getNumerator());
    f = Fraction.getReducedFraction(1, 1);
    f = Fraction.getReducedFraction(2, 1);
    f = Fraction.getReducedFraction(22, 7);
    f = Fraction.getReducedFraction( - 6, 10);
    f = Fraction.getReducedFraction(6,  - 10);
    f = Fraction.getReducedFraction( - 6,  - 10);
    try {
        f = Fraction.getReducedFraction(1, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        f = Fraction.getReducedFraction(2, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        f = Fraction.getReducedFraction( - 3, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    f = Fraction.getReducedFraction(0, 2);
    f = Fraction.getReducedFraction(2, 2);
    f = Fraction.getReducedFraction(2, 4);
    f = Fraction.getReducedFraction(15, 10);
    f = Fraction.getReducedFraction(121, 22);
    f = Fraction.getReducedFraction( - 2, Integer.MIN_VALUE);
    try {
        f = Fraction.getReducedFraction( - 7, Integer.MIN_VALUE);
        
    }
    catch(ArithmeticException ex) {
        
    }
    f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);
    
}

---
---
public void testReducedFactory_int_int_catena_1() {
    Fraction f = null;
    f = Fraction.getReducedFraction(0, 1);
    assertEquals(1, f.getDenominator());
    f = Fraction.getReducedFraction(1, 1);
    f = Fraction.getReducedFraction(2, 1);
    f = Fraction.getReducedFraction(22, 7);
    f = Fraction.getReducedFraction( - 6, 10);
    f = Fraction.getReducedFraction(6,  - 10);
    f = Fraction.getReducedFraction( - 6,  - 10);
    try {
        f = Fraction.getReducedFraction(1, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        f = Fraction.getReducedFraction(2, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        f = Fraction.getReducedFraction( - 3, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    f = Fraction.getReducedFraction(0, 2);
    f = Fraction.getReducedFraction(2, 2);
    f = Fraction.getReducedFraction(2, 4);
    f = Fraction.getReducedFraction(15, 10);
    f = Fraction.getReducedFraction(121, 22);
    f = Fraction.getReducedFraction( - 2, Integer.MIN_VALUE);
    try {
        f = Fraction.getReducedFraction( - 7, Integer.MIN_VALUE);
        
    }
    catch(ArithmeticException ex) {
        
    }
    f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);
    
}

---
---
public void testReducedFactory_int_int_catena_2() {
    Fraction f = null;
    f = Fraction.getReducedFraction(0, 1);
    f = Fraction.getReducedFraction(1, 1);
    assertEquals(1, f.getNumerator());
    f = Fraction.getReducedFraction(2, 1);
    f = Fraction.getReducedFraction(22, 7);
    f = Fraction.getReducedFraction( - 6, 10);
    f = Fraction.getReducedFraction(6,  - 10);
    f = Fraction.getReducedFraction( - 6,  - 10);
    try {
        f = Fraction.getReducedFraction(1, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        f = Fraction.getReducedFraction(2, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        f = Fraction.getReducedFraction( - 3, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    f = Fraction.getReducedFraction(0, 2);
    f = Fraction.getReducedFraction(2, 2);
    f = Fraction.getReducedFraction(2, 4);
    f = Fraction.getReducedFraction(15, 10);
    f = Fraction.getReducedFraction(121, 22);
    f = Fraction.getReducedFraction( - 2, Integer.MIN_VALUE);
    try {
        f = Fraction.getReducedFraction( - 7, Integer.MIN_VALUE);
        
    }
    catch(ArithmeticException ex) {
        
    }
    f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);
    
}

---
---
public void testReducedFactory_int_int_catena_3() {
    Fraction f = null;
    f = Fraction.getReducedFraction(0, 1);
    f = Fraction.getReducedFraction(1, 1);
    assertEquals(1, f.getDenominator());
    f = Fraction.getReducedFraction(2, 1);
    f = Fraction.getReducedFraction(22, 7);
    f = Fraction.getReducedFraction( - 6, 10);
    f = Fraction.getReducedFraction(6,  - 10);
    f = Fraction.getReducedFraction( - 6,  - 10);
    try {
        f = Fraction.getReducedFraction(1, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        f = Fraction.getReducedFraction(2, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        f = Fraction.getReducedFraction( - 3, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    f = Fraction.getReducedFraction(0, 2);
    f = Fraction.getReducedFraction(2, 2);
    f = Fraction.getReducedFraction(2, 4);
    f = Fraction.getReducedFraction(15, 10);
    f = Fraction.getReducedFraction(121, 22);
    f = Fraction.getReducedFraction( - 2, Integer.MIN_VALUE);
    try {
        f = Fraction.getReducedFraction( - 7, Integer.MIN_VALUE);
        
    }
    catch(ArithmeticException ex) {
        
    }
    f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);
    
}

---
---
public void testReducedFactory_int_int_catena_4() {
    Fraction f = null;
    f = Fraction.getReducedFraction(0, 1);
    f = Fraction.getReducedFraction(1, 1);
    f = Fraction.getReducedFraction(2, 1);
    assertEquals(2, f.getNumerator());
    f = Fraction.getReducedFraction(22, 7);
    f = Fraction.getReducedFraction( - 6, 10);
    f = Fraction.getReducedFraction(6,  - 10);
    f = Fraction.getReducedFraction( - 6,  - 10);
    try {
        f = Fraction.getReducedFraction(1, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        f = Fraction.getReducedFraction(2, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        f = Fraction.getReducedFraction( - 3, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    f = Fraction.getReducedFraction(0, 2);
    f = Fraction.getReducedFraction(2, 2);
    f = Fraction.getReducedFraction(2, 4);
    f = Fraction.getReducedFraction(15, 10);
    f = Fraction.getReducedFraction(121, 22);
    f = Fraction.getReducedFraction( - 2, Integer.MIN_VALUE);
    try {
        f = Fraction.getReducedFraction( - 7, Integer.MIN_VALUE);
        
    }
    catch(ArithmeticException ex) {
        
    }
    f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);
    
}

---
---
public void testReducedFactory_int_int_catena_5() {
    Fraction f = null;
    f = Fraction.getReducedFraction(0, 1);
    f = Fraction.getReducedFraction(1, 1);
    f = Fraction.getReducedFraction(2, 1);
    assertEquals(1, f.getDenominator());
    f = Fraction.getReducedFraction(22, 7);
    f = Fraction.getReducedFraction( - 6, 10);
    f = Fraction.getReducedFraction(6,  - 10);
    f = Fraction.getReducedFraction( - 6,  - 10);
    try {
        f = Fraction.getReducedFraction(1, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        f = Fraction.getReducedFraction(2, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        f = Fraction.getReducedFraction( - 3, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    f = Fraction.getReducedFraction(0, 2);
    f = Fraction.getReducedFraction(2, 2);
    f = Fraction.getReducedFraction(2, 4);
    f = Fraction.getReducedFraction(15, 10);
    f = Fraction.getReducedFraction(121, 22);
    f = Fraction.getReducedFraction( - 2, Integer.MIN_VALUE);
    try {
        f = Fraction.getReducedFraction( - 7, Integer.MIN_VALUE);
        
    }
    catch(ArithmeticException ex) {
        
    }
    f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);
    
}

---
---
public void testReducedFactory_int_int_catena_6() {
    Fraction f = null;
    f = Fraction.getReducedFraction(0, 1);
    f = Fraction.getReducedFraction(1, 1);
    f = Fraction.getReducedFraction(2, 1);
    f = Fraction.getReducedFraction(22, 7);
    assertEquals(22, f.getNumerator());
    f = Fraction.getReducedFraction( - 6, 10);
    f = Fraction.getReducedFraction(6,  - 10);
    f = Fraction.getReducedFraction( - 6,  - 10);
    try {
        f = Fraction.getReducedFraction(1, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        f = Fraction.getReducedFraction(2, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        f = Fraction.getReducedFraction( - 3, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    f = Fraction.getReducedFraction(0, 2);
    f = Fraction.getReducedFraction(2, 2);
    f = Fraction.getReducedFraction(2, 4);
    f = Fraction.getReducedFraction(15, 10);
    f = Fraction.getReducedFraction(121, 22);
    f = Fraction.getReducedFraction( - 2, Integer.MIN_VALUE);
    try {
        f = Fraction.getReducedFraction( - 7, Integer.MIN_VALUE);
        
    }
    catch(ArithmeticException ex) {
        
    }
    f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);
    
}

---
---
public void testReducedFactory_int_int_catena_7() {
    Fraction f = null;
    f = Fraction.getReducedFraction(0, 1);
    f = Fraction.getReducedFraction(1, 1);
    f = Fraction.getReducedFraction(2, 1);
    f = Fraction.getReducedFraction(22, 7);
    assertEquals(7, f.getDenominator());
    f = Fraction.getReducedFraction( - 6, 10);
    f = Fraction.getReducedFraction(6,  - 10);
    f = Fraction.getReducedFraction( - 6,  - 10);
    try {
        f = Fraction.getReducedFraction(1, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        f = Fraction.getReducedFraction(2, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        f = Fraction.getReducedFraction( - 3, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    f = Fraction.getReducedFraction(0, 2);
    f = Fraction.getReducedFraction(2, 2);
    f = Fraction.getReducedFraction(2, 4);
    f = Fraction.getReducedFraction(15, 10);
    f = Fraction.getReducedFraction(121, 22);
    f = Fraction.getReducedFraction( - 2, Integer.MIN_VALUE);
    try {
        f = Fraction.getReducedFraction( - 7, Integer.MIN_VALUE);
        
    }
    catch(ArithmeticException ex) {
        
    }
    f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);
    
}

---
---
public void testReducedFactory_int_int_catena_8() {
    Fraction f = null;
    f = Fraction.getReducedFraction(0, 1);
    f = Fraction.getReducedFraction(1, 1);
    f = Fraction.getReducedFraction(2, 1);
    f = Fraction.getReducedFraction(22, 7);
    f = Fraction.getReducedFraction( - 6, 10);
    assertEquals( - 3, f.getNumerator());
    f = Fraction.getReducedFraction(6,  - 10);
    f = Fraction.getReducedFraction( - 6,  - 10);
    try {
        f = Fraction.getReducedFraction(1, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        f = Fraction.getReducedFraction(2, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        f = Fraction.getReducedFraction( - 3, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    f = Fraction.getReducedFraction(0, 2);
    f = Fraction.getReducedFraction(2, 2);
    f = Fraction.getReducedFraction(2, 4);
    f = Fraction.getReducedFraction(15, 10);
    f = Fraction.getReducedFraction(121, 22);
    f = Fraction.getReducedFraction( - 2, Integer.MIN_VALUE);
    try {
        f = Fraction.getReducedFraction( - 7, Integer.MIN_VALUE);
        
    }
    catch(ArithmeticException ex) {
        
    }
    f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);
    
}

---
---
public void testReducedFactory_int_int_catena_9() {
    Fraction f = null;
    f = Fraction.getReducedFraction(0, 1);
    f = Fraction.getReducedFraction(1, 1);
    f = Fraction.getReducedFraction(2, 1);
    f = Fraction.getReducedFraction(22, 7);
    f = Fraction.getReducedFraction( - 6, 10);
    assertEquals(5, f.getDenominator());
    f = Fraction.getReducedFraction(6,  - 10);
    f = Fraction.getReducedFraction( - 6,  - 10);
    try {
        f = Fraction.getReducedFraction(1, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        f = Fraction.getReducedFraction(2, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        f = Fraction.getReducedFraction( - 3, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    f = Fraction.getReducedFraction(0, 2);
    f = Fraction.getReducedFraction(2, 2);
    f = Fraction.getReducedFraction(2, 4);
    f = Fraction.getReducedFraction(15, 10);
    f = Fraction.getReducedFraction(121, 22);
    f = Fraction.getReducedFraction( - 2, Integer.MIN_VALUE);
    try {
        f = Fraction.getReducedFraction( - 7, Integer.MIN_VALUE);
        
    }
    catch(ArithmeticException ex) {
        
    }
    f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);
    
}

---
---
public void testReducedFactory_int_int_catena_10() {
    Fraction f = null;
    f = Fraction.getReducedFraction(0, 1);
    f = Fraction.getReducedFraction(1, 1);
    f = Fraction.getReducedFraction(2, 1);
    f = Fraction.getReducedFraction(22, 7);
    f = Fraction.getReducedFraction( - 6, 10);
    f = Fraction.getReducedFraction(6,  - 10);
    assertEquals( - 3, f.getNumerator());
    f = Fraction.getReducedFraction( - 6,  - 10);
    try {
        f = Fraction.getReducedFraction(1, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        f = Fraction.getReducedFraction(2, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        f = Fraction.getReducedFraction( - 3, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    f = Fraction.getReducedFraction(0, 2);
    f = Fraction.getReducedFraction(2, 2);
    f = Fraction.getReducedFraction(2, 4);
    f = Fraction.getReducedFraction(15, 10);
    f = Fraction.getReducedFraction(121, 22);
    f = Fraction.getReducedFraction( - 2, Integer.MIN_VALUE);
    try {
        f = Fraction.getReducedFraction( - 7, Integer.MIN_VALUE);
        
    }
    catch(ArithmeticException ex) {
        
    }
    f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);
    
}

---
---
public void testReducedFactory_int_int_catena_11() {
    Fraction f = null;
    f = Fraction.getReducedFraction(0, 1);
    f = Fraction.getReducedFraction(1, 1);
    f = Fraction.getReducedFraction(2, 1);
    f = Fraction.getReducedFraction(22, 7);
    f = Fraction.getReducedFraction( - 6, 10);
    f = Fraction.getReducedFraction(6,  - 10);
    assertEquals(5, f.getDenominator());
    f = Fraction.getReducedFraction( - 6,  - 10);
    try {
        f = Fraction.getReducedFraction(1, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        f = Fraction.getReducedFraction(2, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        f = Fraction.getReducedFraction( - 3, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    f = Fraction.getReducedFraction(0, 2);
    f = Fraction.getReducedFraction(2, 2);
    f = Fraction.getReducedFraction(2, 4);
    f = Fraction.getReducedFraction(15, 10);
    f = Fraction.getReducedFraction(121, 22);
    f = Fraction.getReducedFraction( - 2, Integer.MIN_VALUE);
    try {
        f = Fraction.getReducedFraction( - 7, Integer.MIN_VALUE);
        
    }
    catch(ArithmeticException ex) {
        
    }
    f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);
    
}

---
---
public void testReducedFactory_int_int_catena_12() {
    Fraction f = null;
    f = Fraction.getReducedFraction(0, 1);
    f = Fraction.getReducedFraction(1, 1);
    f = Fraction.getReducedFraction(2, 1);
    f = Fraction.getReducedFraction(22, 7);
    f = Fraction.getReducedFraction( - 6, 10);
    f = Fraction.getReducedFraction(6,  - 10);
    f = Fraction.getReducedFraction( - 6,  - 10);
    assertEquals(3, f.getNumerator());
    try {
        f = Fraction.getReducedFraction(1, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        f = Fraction.getReducedFraction(2, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        f = Fraction.getReducedFraction( - 3, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    f = Fraction.getReducedFraction(0, 2);
    f = Fraction.getReducedFraction(2, 2);
    f = Fraction.getReducedFraction(2, 4);
    f = Fraction.getReducedFraction(15, 10);
    f = Fraction.getReducedFraction(121, 22);
    f = Fraction.getReducedFraction( - 2, Integer.MIN_VALUE);
    try {
        f = Fraction.getReducedFraction( - 7, Integer.MIN_VALUE);
        
    }
    catch(ArithmeticException ex) {
        
    }
    f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);
    
}

---
---
public void testReducedFactory_int_int_catena_13() {
    Fraction f = null;
    f = Fraction.getReducedFraction(0, 1);
    f = Fraction.getReducedFraction(1, 1);
    f = Fraction.getReducedFraction(2, 1);
    f = Fraction.getReducedFraction(22, 7);
    f = Fraction.getReducedFraction( - 6, 10);
    f = Fraction.getReducedFraction(6,  - 10);
    f = Fraction.getReducedFraction( - 6,  - 10);
    assertEquals(5, f.getDenominator());
    try {
        f = Fraction.getReducedFraction(1, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        f = Fraction.getReducedFraction(2, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        f = Fraction.getReducedFraction( - 3, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    f = Fraction.getReducedFraction(0, 2);
    f = Fraction.getReducedFraction(2, 2);
    f = Fraction.getReducedFraction(2, 4);
    f = Fraction.getReducedFraction(15, 10);
    f = Fraction.getReducedFraction(121, 22);
    f = Fraction.getReducedFraction( - 2, Integer.MIN_VALUE);
    try {
        f = Fraction.getReducedFraction( - 7, Integer.MIN_VALUE);
        
    }
    catch(ArithmeticException ex) {
        
    }
    f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);
    
}

---
---
public void testReducedFactory_int_int_catena_14() {
    Fraction f = null;
    f = Fraction.getReducedFraction(0, 1);
    f = Fraction.getReducedFraction(1, 1);
    f = Fraction.getReducedFraction(2, 1);
    f = Fraction.getReducedFraction(22, 7);
    f = Fraction.getReducedFraction( - 6, 10);
    f = Fraction.getReducedFraction(6,  - 10);
    f = Fraction.getReducedFraction( - 6,  - 10);
    try {
        f = Fraction.getReducedFraction(1, 0);
        fail("expecting ArithmeticException");
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        f = Fraction.getReducedFraction(2, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        f = Fraction.getReducedFraction( - 3, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    f = Fraction.getReducedFraction(0, 2);
    f = Fraction.getReducedFraction(2, 2);
    f = Fraction.getReducedFraction(2, 4);
    f = Fraction.getReducedFraction(15, 10);
    f = Fraction.getReducedFraction(121, 22);
    f = Fraction.getReducedFraction( - 2, Integer.MIN_VALUE);
    try {
        f = Fraction.getReducedFraction( - 7, Integer.MIN_VALUE);
        
    }
    catch(ArithmeticException ex) {
        
    }
    f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);
    
}

---
---
public void testReducedFactory_int_int_catena_15() {
    Fraction f = null;
    f = Fraction.getReducedFraction(0, 1);
    f = Fraction.getReducedFraction(1, 1);
    f = Fraction.getReducedFraction(2, 1);
    f = Fraction.getReducedFraction(22, 7);
    f = Fraction.getReducedFraction( - 6, 10);
    f = Fraction.getReducedFraction(6,  - 10);
    f = Fraction.getReducedFraction( - 6,  - 10);
    try {
        f = Fraction.getReducedFraction(1, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        f = Fraction.getReducedFraction(2, 0);
        fail("expecting ArithmeticException");
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        f = Fraction.getReducedFraction( - 3, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    f = Fraction.getReducedFraction(0, 2);
    f = Fraction.getReducedFraction(2, 2);
    f = Fraction.getReducedFraction(2, 4);
    f = Fraction.getReducedFraction(15, 10);
    f = Fraction.getReducedFraction(121, 22);
    f = Fraction.getReducedFraction( - 2, Integer.MIN_VALUE);
    try {
        f = Fraction.getReducedFraction( - 7, Integer.MIN_VALUE);
        
    }
    catch(ArithmeticException ex) {
        
    }
    f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);
    
}

---
---
public void testReducedFactory_int_int_catena_16() {
    Fraction f = null;
    f = Fraction.getReducedFraction(0, 1);
    f = Fraction.getReducedFraction(1, 1);
    f = Fraction.getReducedFraction(2, 1);
    f = Fraction.getReducedFraction(22, 7);
    f = Fraction.getReducedFraction( - 6, 10);
    f = Fraction.getReducedFraction(6,  - 10);
    f = Fraction.getReducedFraction( - 6,  - 10);
    try {
        f = Fraction.getReducedFraction(1, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        f = Fraction.getReducedFraction(2, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        f = Fraction.getReducedFraction( - 3, 0);
        fail("expecting ArithmeticException");
        
    }
    catch(ArithmeticException ex) {
        
    }
    f = Fraction.getReducedFraction(0, 2);
    f = Fraction.getReducedFraction(2, 2);
    f = Fraction.getReducedFraction(2, 4);
    f = Fraction.getReducedFraction(15, 10);
    f = Fraction.getReducedFraction(121, 22);
    f = Fraction.getReducedFraction( - 2, Integer.MIN_VALUE);
    try {
        f = Fraction.getReducedFraction( - 7, Integer.MIN_VALUE);
        
    }
    catch(ArithmeticException ex) {
        
    }
    f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);
    
}

---
---
public void testReducedFactory_int_int_catena_17() {
    Fraction f = null;
    f = Fraction.getReducedFraction(0, 1);
    f = Fraction.getReducedFraction(1, 1);
    f = Fraction.getReducedFraction(2, 1);
    f = Fraction.getReducedFraction(22, 7);
    f = Fraction.getReducedFraction( - 6, 10);
    f = Fraction.getReducedFraction(6,  - 10);
    f = Fraction.getReducedFraction( - 6,  - 10);
    try {
        f = Fraction.getReducedFraction(1, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        f = Fraction.getReducedFraction(2, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        f = Fraction.getReducedFraction( - 3, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    f = Fraction.getReducedFraction(0, 2);
    assertEquals(0, f.getNumerator());
    f = Fraction.getReducedFraction(2, 2);
    f = Fraction.getReducedFraction(2, 4);
    f = Fraction.getReducedFraction(15, 10);
    f = Fraction.getReducedFraction(121, 22);
    f = Fraction.getReducedFraction( - 2, Integer.MIN_VALUE);
    try {
        f = Fraction.getReducedFraction( - 7, Integer.MIN_VALUE);
        
    }
    catch(ArithmeticException ex) {
        
    }
    f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);
    
}

---
---
public void testReducedFactory_int_int_catena_18() {
    Fraction f = null;
    f = Fraction.getReducedFraction(0, 1);
    f = Fraction.getReducedFraction(1, 1);
    f = Fraction.getReducedFraction(2, 1);
    f = Fraction.getReducedFraction(22, 7);
    f = Fraction.getReducedFraction( - 6, 10);
    f = Fraction.getReducedFraction(6,  - 10);
    f = Fraction.getReducedFraction( - 6,  - 10);
    try {
        f = Fraction.getReducedFraction(1, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        f = Fraction.getReducedFraction(2, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        f = Fraction.getReducedFraction( - 3, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    f = Fraction.getReducedFraction(0, 2);
    assertEquals(1, f.getDenominator());
    f = Fraction.getReducedFraction(2, 2);
    f = Fraction.getReducedFraction(2, 4);
    f = Fraction.getReducedFraction(15, 10);
    f = Fraction.getReducedFraction(121, 22);
    f = Fraction.getReducedFraction( - 2, Integer.MIN_VALUE);
    try {
        f = Fraction.getReducedFraction( - 7, Integer.MIN_VALUE);
        
    }
    catch(ArithmeticException ex) {
        
    }
    f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);
    
}

---
---
public void testReducedFactory_int_int_catena_19() {
    Fraction f = null;
    f = Fraction.getReducedFraction(0, 1);
    f = Fraction.getReducedFraction(1, 1);
    f = Fraction.getReducedFraction(2, 1);
    f = Fraction.getReducedFraction(22, 7);
    f = Fraction.getReducedFraction( - 6, 10);
    f = Fraction.getReducedFraction(6,  - 10);
    f = Fraction.getReducedFraction( - 6,  - 10);
    try {
        f = Fraction.getReducedFraction(1, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        f = Fraction.getReducedFraction(2, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        f = Fraction.getReducedFraction( - 3, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    f = Fraction.getReducedFraction(0, 2);
    f = Fraction.getReducedFraction(2, 2);
    assertEquals(1, f.getNumerator());
    f = Fraction.getReducedFraction(2, 4);
    f = Fraction.getReducedFraction(15, 10);
    f = Fraction.getReducedFraction(121, 22);
    f = Fraction.getReducedFraction( - 2, Integer.MIN_VALUE);
    try {
        f = Fraction.getReducedFraction( - 7, Integer.MIN_VALUE);
        
    }
    catch(ArithmeticException ex) {
        
    }
    f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);
    
}

---
---
public void testReducedFactory_int_int_catena_20() {
    Fraction f = null;
    f = Fraction.getReducedFraction(0, 1);
    f = Fraction.getReducedFraction(1, 1);
    f = Fraction.getReducedFraction(2, 1);
    f = Fraction.getReducedFraction(22, 7);
    f = Fraction.getReducedFraction( - 6, 10);
    f = Fraction.getReducedFraction(6,  - 10);
    f = Fraction.getReducedFraction( - 6,  - 10);
    try {
        f = Fraction.getReducedFraction(1, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        f = Fraction.getReducedFraction(2, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        f = Fraction.getReducedFraction( - 3, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    f = Fraction.getReducedFraction(0, 2);
    f = Fraction.getReducedFraction(2, 2);
    assertEquals(1, f.getDenominator());
    f = Fraction.getReducedFraction(2, 4);
    f = Fraction.getReducedFraction(15, 10);
    f = Fraction.getReducedFraction(121, 22);
    f = Fraction.getReducedFraction( - 2, Integer.MIN_VALUE);
    try {
        f = Fraction.getReducedFraction( - 7, Integer.MIN_VALUE);
        
    }
    catch(ArithmeticException ex) {
        
    }
    f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);
    
}

---
---
public void testReducedFactory_int_int_catena_21() {
    Fraction f = null;
    f = Fraction.getReducedFraction(0, 1);
    f = Fraction.getReducedFraction(1, 1);
    f = Fraction.getReducedFraction(2, 1);
    f = Fraction.getReducedFraction(22, 7);
    f = Fraction.getReducedFraction( - 6, 10);
    f = Fraction.getReducedFraction(6,  - 10);
    f = Fraction.getReducedFraction( - 6,  - 10);
    try {
        f = Fraction.getReducedFraction(1, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        f = Fraction.getReducedFraction(2, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        f = Fraction.getReducedFraction( - 3, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    f = Fraction.getReducedFraction(0, 2);
    f = Fraction.getReducedFraction(2, 2);
    f = Fraction.getReducedFraction(2, 4);
    assertEquals(1, f.getNumerator());
    f = Fraction.getReducedFraction(15, 10);
    f = Fraction.getReducedFraction(121, 22);
    f = Fraction.getReducedFraction( - 2, Integer.MIN_VALUE);
    try {
        f = Fraction.getReducedFraction( - 7, Integer.MIN_VALUE);
        
    }
    catch(ArithmeticException ex) {
        
    }
    f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);
    
}

---
---
public void testReducedFactory_int_int_catena_22() {
    Fraction f = null;
    f = Fraction.getReducedFraction(0, 1);
    f = Fraction.getReducedFraction(1, 1);
    f = Fraction.getReducedFraction(2, 1);
    f = Fraction.getReducedFraction(22, 7);
    f = Fraction.getReducedFraction( - 6, 10);
    f = Fraction.getReducedFraction(6,  - 10);
    f = Fraction.getReducedFraction( - 6,  - 10);
    try {
        f = Fraction.getReducedFraction(1, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        f = Fraction.getReducedFraction(2, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        f = Fraction.getReducedFraction( - 3, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    f = Fraction.getReducedFraction(0, 2);
    f = Fraction.getReducedFraction(2, 2);
    f = Fraction.getReducedFraction(2, 4);
    assertEquals(2, f.getDenominator());
    f = Fraction.getReducedFraction(15, 10);
    f = Fraction.getReducedFraction(121, 22);
    f = Fraction.getReducedFraction( - 2, Integer.MIN_VALUE);
    try {
        f = Fraction.getReducedFraction( - 7, Integer.MIN_VALUE);
        
    }
    catch(ArithmeticException ex) {
        
    }
    f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);
    
}

---
---
public void testReducedFactory_int_int_catena_23() {
    Fraction f = null;
    f = Fraction.getReducedFraction(0, 1);
    f = Fraction.getReducedFraction(1, 1);
    f = Fraction.getReducedFraction(2, 1);
    f = Fraction.getReducedFraction(22, 7);
    f = Fraction.getReducedFraction( - 6, 10);
    f = Fraction.getReducedFraction(6,  - 10);
    f = Fraction.getReducedFraction( - 6,  - 10);
    try {
        f = Fraction.getReducedFraction(1, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        f = Fraction.getReducedFraction(2, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        f = Fraction.getReducedFraction( - 3, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    f = Fraction.getReducedFraction(0, 2);
    f = Fraction.getReducedFraction(2, 2);
    f = Fraction.getReducedFraction(2, 4);
    f = Fraction.getReducedFraction(15, 10);
    assertEquals(3, f.getNumerator());
    f = Fraction.getReducedFraction(121, 22);
    f = Fraction.getReducedFraction( - 2, Integer.MIN_VALUE);
    try {
        f = Fraction.getReducedFraction( - 7, Integer.MIN_VALUE);
        
    }
    catch(ArithmeticException ex) {
        
    }
    f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);
    
}

---
---
public void testReducedFactory_int_int_catena_24() {
    Fraction f = null;
    f = Fraction.getReducedFraction(0, 1);
    f = Fraction.getReducedFraction(1, 1);
    f = Fraction.getReducedFraction(2, 1);
    f = Fraction.getReducedFraction(22, 7);
    f = Fraction.getReducedFraction( - 6, 10);
    f = Fraction.getReducedFraction(6,  - 10);
    f = Fraction.getReducedFraction( - 6,  - 10);
    try {
        f = Fraction.getReducedFraction(1, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        f = Fraction.getReducedFraction(2, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        f = Fraction.getReducedFraction( - 3, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    f = Fraction.getReducedFraction(0, 2);
    f = Fraction.getReducedFraction(2, 2);
    f = Fraction.getReducedFraction(2, 4);
    f = Fraction.getReducedFraction(15, 10);
    assertEquals(2, f.getDenominator());
    f = Fraction.getReducedFraction(121, 22);
    f = Fraction.getReducedFraction( - 2, Integer.MIN_VALUE);
    try {
        f = Fraction.getReducedFraction( - 7, Integer.MIN_VALUE);
        
    }
    catch(ArithmeticException ex) {
        
    }
    f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);
    
}

---
---
public void testReducedFactory_int_int_catena_25() {
    Fraction f = null;
    f = Fraction.getReducedFraction(0, 1);
    f = Fraction.getReducedFraction(1, 1);
    f = Fraction.getReducedFraction(2, 1);
    f = Fraction.getReducedFraction(22, 7);
    f = Fraction.getReducedFraction( - 6, 10);
    f = Fraction.getReducedFraction(6,  - 10);
    f = Fraction.getReducedFraction( - 6,  - 10);
    try {
        f = Fraction.getReducedFraction(1, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        f = Fraction.getReducedFraction(2, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        f = Fraction.getReducedFraction( - 3, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    f = Fraction.getReducedFraction(0, 2);
    f = Fraction.getReducedFraction(2, 2);
    f = Fraction.getReducedFraction(2, 4);
    f = Fraction.getReducedFraction(15, 10);
    f = Fraction.getReducedFraction(121, 22);
    assertEquals(11, f.getNumerator());
    f = Fraction.getReducedFraction( - 2, Integer.MIN_VALUE);
    try {
        f = Fraction.getReducedFraction( - 7, Integer.MIN_VALUE);
        
    }
    catch(ArithmeticException ex) {
        
    }
    f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);
    
}

---
---
public void testReducedFactory_int_int_catena_26() {
    Fraction f = null;
    f = Fraction.getReducedFraction(0, 1);
    f = Fraction.getReducedFraction(1, 1);
    f = Fraction.getReducedFraction(2, 1);
    f = Fraction.getReducedFraction(22, 7);
    f = Fraction.getReducedFraction( - 6, 10);
    f = Fraction.getReducedFraction(6,  - 10);
    f = Fraction.getReducedFraction( - 6,  - 10);
    try {
        f = Fraction.getReducedFraction(1, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        f = Fraction.getReducedFraction(2, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        f = Fraction.getReducedFraction( - 3, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    f = Fraction.getReducedFraction(0, 2);
    f = Fraction.getReducedFraction(2, 2);
    f = Fraction.getReducedFraction(2, 4);
    f = Fraction.getReducedFraction(15, 10);
    f = Fraction.getReducedFraction(121, 22);
    assertEquals(2, f.getDenominator());
    f = Fraction.getReducedFraction( - 2, Integer.MIN_VALUE);
    try {
        f = Fraction.getReducedFraction( - 7, Integer.MIN_VALUE);
        
    }
    catch(ArithmeticException ex) {
        
    }
    f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);
    
}

---
---
public void testReducedFactory_int_int_catena_27() {
    Fraction f = null;
    f = Fraction.getReducedFraction(0, 1);
    f = Fraction.getReducedFraction(1, 1);
    f = Fraction.getReducedFraction(2, 1);
    f = Fraction.getReducedFraction(22, 7);
    f = Fraction.getReducedFraction( - 6, 10);
    f = Fraction.getReducedFraction(6,  - 10);
    f = Fraction.getReducedFraction( - 6,  - 10);
    try {
        f = Fraction.getReducedFraction(1, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        f = Fraction.getReducedFraction(2, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        f = Fraction.getReducedFraction( - 3, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    f = Fraction.getReducedFraction(0, 2);
    f = Fraction.getReducedFraction(2, 2);
    f = Fraction.getReducedFraction(2, 4);
    f = Fraction.getReducedFraction(15, 10);
    f = Fraction.getReducedFraction(121, 22);
    f = Fraction.getReducedFraction( - 2, Integer.MIN_VALUE);
    assertEquals(1, f.getNumerator());
    try {
        f = Fraction.getReducedFraction( - 7, Integer.MIN_VALUE);
        
    }
    catch(ArithmeticException ex) {
        
    }
    f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);
    
}

---
---
public void testReducedFactory_int_int_catena_28() {
    Fraction f = null;
    f = Fraction.getReducedFraction(0, 1);
    f = Fraction.getReducedFraction(1, 1);
    f = Fraction.getReducedFraction(2, 1);
    f = Fraction.getReducedFraction(22, 7);
    f = Fraction.getReducedFraction( - 6, 10);
    f = Fraction.getReducedFraction(6,  - 10);
    f = Fraction.getReducedFraction( - 6,  - 10);
    try {
        f = Fraction.getReducedFraction(1, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        f = Fraction.getReducedFraction(2, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        f = Fraction.getReducedFraction( - 3, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    f = Fraction.getReducedFraction(0, 2);
    f = Fraction.getReducedFraction(2, 2);
    f = Fraction.getReducedFraction(2, 4);
    f = Fraction.getReducedFraction(15, 10);
    f = Fraction.getReducedFraction(121, 22);
    f = Fraction.getReducedFraction( - 2, Integer.MIN_VALUE);
    assertEquals( - (Integer.MIN_VALUE / 2), f.getDenominator());
    try {
        f = Fraction.getReducedFraction( - 7, Integer.MIN_VALUE);
        
    }
    catch(ArithmeticException ex) {
        
    }
    f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);
    
}

---
---
public void testReducedFactory_int_int_catena_29() {
    Fraction f = null;
    f = Fraction.getReducedFraction(0, 1);
    f = Fraction.getReducedFraction(1, 1);
    f = Fraction.getReducedFraction(2, 1);
    f = Fraction.getReducedFraction(22, 7);
    f = Fraction.getReducedFraction( - 6, 10);
    f = Fraction.getReducedFraction(6,  - 10);
    f = Fraction.getReducedFraction( - 6,  - 10);
    try {
        f = Fraction.getReducedFraction(1, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        f = Fraction.getReducedFraction(2, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        f = Fraction.getReducedFraction( - 3, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    f = Fraction.getReducedFraction(0, 2);
    f = Fraction.getReducedFraction(2, 2);
    f = Fraction.getReducedFraction(2, 4);
    f = Fraction.getReducedFraction(15, 10);
    f = Fraction.getReducedFraction(121, 22);
    f = Fraction.getReducedFraction( - 2, Integer.MIN_VALUE);
    try {
        f = Fraction.getReducedFraction( - 7, Integer.MIN_VALUE);
        fail("Expecting ArithmeticException");
        
    }
    catch(ArithmeticException ex) {
        
    }
    f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);
    
}

---
---
public void testReducedFactory_int_int_catena_30() {
    Fraction f = null;
    f = Fraction.getReducedFraction(0, 1);
    f = Fraction.getReducedFraction(1, 1);
    f = Fraction.getReducedFraction(2, 1);
    f = Fraction.getReducedFraction(22, 7);
    f = Fraction.getReducedFraction( - 6, 10);
    f = Fraction.getReducedFraction(6,  - 10);
    f = Fraction.getReducedFraction( - 6,  - 10);
    try {
        f = Fraction.getReducedFraction(1, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        f = Fraction.getReducedFraction(2, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        f = Fraction.getReducedFraction( - 3, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    f = Fraction.getReducedFraction(0, 2);
    f = Fraction.getReducedFraction(2, 2);
    f = Fraction.getReducedFraction(2, 4);
    f = Fraction.getReducedFraction(15, 10);
    f = Fraction.getReducedFraction(121, 22);
    f = Fraction.getReducedFraction( - 2, Integer.MIN_VALUE);
    try {
        f = Fraction.getReducedFraction( - 7, Integer.MIN_VALUE);
        
    }
    catch(ArithmeticException ex) {
        
    }
    f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);
    assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());
    
}

---
---
public void testReducedFactory_int_int_catena_31() {
    Fraction f = null;
    f = Fraction.getReducedFraction(0, 1);
    f = Fraction.getReducedFraction(1, 1);
    f = Fraction.getReducedFraction(2, 1);
    f = Fraction.getReducedFraction(22, 7);
    f = Fraction.getReducedFraction( - 6, 10);
    f = Fraction.getReducedFraction(6,  - 10);
    f = Fraction.getReducedFraction( - 6,  - 10);
    try {
        f = Fraction.getReducedFraction(1, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        f = Fraction.getReducedFraction(2, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        f = Fraction.getReducedFraction( - 3, 0);
        
    }
    catch(ArithmeticException ex) {
        
    }
    f = Fraction.getReducedFraction(0, 2);
    f = Fraction.getReducedFraction(2, 2);
    f = Fraction.getReducedFraction(2, 4);
    f = Fraction.getReducedFraction(15, 10);
    f = Fraction.getReducedFraction(121, 22);
    f = Fraction.getReducedFraction( - 2, Integer.MIN_VALUE);
    try {
        f = Fraction.getReducedFraction( - 7, Integer.MIN_VALUE);
        
    }
    catch(ArithmeticException ex) {
        
    }
    f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);
    assertEquals(1, f.getDenominator());
    
}

---
@@@
Split test: org.apache.commons.lang3.math.FractionTest::testReduce
file: /root/workbench/exportInfo/d4j_buggy/Lang_22/src/test/java//org/apache/commons/lang3/math/FractionTest.java
Begin: Pos(610, 12)
End: Pos(656, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_22/src/test/java//org/apache/commons/lang3/math/FractionTest.java
Name: testReduce
Childs: [StatementAssertion<Begin: Pos(615, 9), End: Pos(615, 47)>,
StatementAssertion<Begin: Pos(616, 9), End: Pos(616, 49)>,
StatementAssertion<Begin: Pos(620, 9), End: Pos(620, 47)>,
StatementAssertion<Begin: Pos(621, 9), End: Pos(621, 49)>,
StatementAssertion<Begin: Pos(625, 9), End: Pos(625, 48)>,
StatementAssertion<Begin: Pos(626, 9), End: Pos(626, 49)>,
StatementAssertion<Begin: Pos(630, 9), End: Pos(630, 48)>,
StatementAssertion<Begin: Pos(631, 9), End: Pos(631, 49)>,
StatementAssertion<Begin: Pos(632, 9), End: Pos(632, 30)>,
StatementAssertion<Begin: Pos(636, 9), End: Pos(636, 47)>,
StatementAssertion<Begin: Pos(637, 9), End: Pos(637, 49)>,
StatementAssertion<Begin: Pos(638, 9), End: Pos(638, 30)>,
StatementAssertion<Begin: Pos(642, 9), End: Pos(642, 47)>,
StatementAssertion<Begin: Pos(643, 9), End: Pos(643, 49)>,
StatementAssertion<Begin: Pos(644, 9), End: Pos(644, 30)>,
StatementAssertion<Begin: Pos(648, 9), End: Pos(648, 47)>,
StatementAssertion<Begin: Pos(649, 9), End: Pos(649, 49)>,
StatementAssertion<Begin: Pos(650, 9), End: Pos(650, 42)>,
StatementAssertion<Begin: Pos(654, 9), End: Pos(654, 67)>,
StatementAssertion<Begin: Pos(655, 9), End: Pos(655, 49)>,
]
---
public void testReduce_catena_0() {
    Fraction f = null;
    f = Fraction.getFraction(50, 75);
    Fraction result = f.reduce();
    assertEquals(2, result.getNumerator());
    f = Fraction.getFraction( - 2,  - 3);
    result = f.reduce();
    f = Fraction.getFraction(2,  - 3);
    result = f.reduce();
    f = Fraction.getFraction( - 2, 3);
    result = f.reduce();
    f = Fraction.getFraction(2, 3);
    result = f.reduce();
    f = Fraction.getFraction(0, 1);
    result = f.reduce();
    f = Fraction.getFraction(0, 100);
    result = f.reduce();
    f = Fraction.getFraction(Integer.MIN_VALUE, 2);
    result = f.reduce();
    
}

---
---
public void testReduce_catena_1() {
    Fraction f = null;
    f = Fraction.getFraction(50, 75);
    Fraction result = f.reduce();
    assertEquals(3, result.getDenominator());
    f = Fraction.getFraction( - 2,  - 3);
    result = f.reduce();
    f = Fraction.getFraction(2,  - 3);
    result = f.reduce();
    f = Fraction.getFraction( - 2, 3);
    result = f.reduce();
    f = Fraction.getFraction(2, 3);
    result = f.reduce();
    f = Fraction.getFraction(0, 1);
    result = f.reduce();
    f = Fraction.getFraction(0, 100);
    result = f.reduce();
    f = Fraction.getFraction(Integer.MIN_VALUE, 2);
    result = f.reduce();
    
}

---
---
public void testReduce_catena_2() {
    Fraction f = null;
    f = Fraction.getFraction(50, 75);
    Fraction result = f.reduce();
    f = Fraction.getFraction( - 2,  - 3);
    result = f.reduce();
    assertEquals(2, result.getNumerator());
    f = Fraction.getFraction(2,  - 3);
    result = f.reduce();
    f = Fraction.getFraction( - 2, 3);
    result = f.reduce();
    f = Fraction.getFraction(2, 3);
    result = f.reduce();
    f = Fraction.getFraction(0, 1);
    result = f.reduce();
    f = Fraction.getFraction(0, 100);
    result = f.reduce();
    f = Fraction.getFraction(Integer.MIN_VALUE, 2);
    result = f.reduce();
    
}

---
---
public void testReduce_catena_3() {
    Fraction f = null;
    f = Fraction.getFraction(50, 75);
    Fraction result = f.reduce();
    f = Fraction.getFraction( - 2,  - 3);
    result = f.reduce();
    assertEquals(3, result.getDenominator());
    f = Fraction.getFraction(2,  - 3);
    result = f.reduce();
    f = Fraction.getFraction( - 2, 3);
    result = f.reduce();
    f = Fraction.getFraction(2, 3);
    result = f.reduce();
    f = Fraction.getFraction(0, 1);
    result = f.reduce();
    f = Fraction.getFraction(0, 100);
    result = f.reduce();
    f = Fraction.getFraction(Integer.MIN_VALUE, 2);
    result = f.reduce();
    
}

---
---
public void testReduce_catena_4() {
    Fraction f = null;
    f = Fraction.getFraction(50, 75);
    Fraction result = f.reduce();
    f = Fraction.getFraction( - 2,  - 3);
    result = f.reduce();
    f = Fraction.getFraction(2,  - 3);
    result = f.reduce();
    assertEquals( - 2, result.getNumerator());
    f = Fraction.getFraction( - 2, 3);
    result = f.reduce();
    f = Fraction.getFraction(2, 3);
    result = f.reduce();
    f = Fraction.getFraction(0, 1);
    result = f.reduce();
    f = Fraction.getFraction(0, 100);
    result = f.reduce();
    f = Fraction.getFraction(Integer.MIN_VALUE, 2);
    result = f.reduce();
    
}

---
---
public void testReduce_catena_5() {
    Fraction f = null;
    f = Fraction.getFraction(50, 75);
    Fraction result = f.reduce();
    f = Fraction.getFraction( - 2,  - 3);
    result = f.reduce();
    f = Fraction.getFraction(2,  - 3);
    result = f.reduce();
    assertEquals(3, result.getDenominator());
    f = Fraction.getFraction( - 2, 3);
    result = f.reduce();
    f = Fraction.getFraction(2, 3);
    result = f.reduce();
    f = Fraction.getFraction(0, 1);
    result = f.reduce();
    f = Fraction.getFraction(0, 100);
    result = f.reduce();
    f = Fraction.getFraction(Integer.MIN_VALUE, 2);
    result = f.reduce();
    
}

---
---
public void testReduce_catena_6() {
    Fraction f = null;
    f = Fraction.getFraction(50, 75);
    Fraction result = f.reduce();
    f = Fraction.getFraction( - 2,  - 3);
    result = f.reduce();
    f = Fraction.getFraction(2,  - 3);
    result = f.reduce();
    f = Fraction.getFraction( - 2, 3);
    result = f.reduce();
    assertEquals( - 2, result.getNumerator());
    f = Fraction.getFraction(2, 3);
    result = f.reduce();
    f = Fraction.getFraction(0, 1);
    result = f.reduce();
    f = Fraction.getFraction(0, 100);
    result = f.reduce();
    f = Fraction.getFraction(Integer.MIN_VALUE, 2);
    result = f.reduce();
    
}

---
---
public void testReduce_catena_7() {
    Fraction f = null;
    f = Fraction.getFraction(50, 75);
    Fraction result = f.reduce();
    f = Fraction.getFraction( - 2,  - 3);
    result = f.reduce();
    f = Fraction.getFraction(2,  - 3);
    result = f.reduce();
    f = Fraction.getFraction( - 2, 3);
    result = f.reduce();
    assertEquals(3, result.getDenominator());
    f = Fraction.getFraction(2, 3);
    result = f.reduce();
    f = Fraction.getFraction(0, 1);
    result = f.reduce();
    f = Fraction.getFraction(0, 100);
    result = f.reduce();
    f = Fraction.getFraction(Integer.MIN_VALUE, 2);
    result = f.reduce();
    
}

---
---
public void testReduce_catena_8() {
    Fraction f = null;
    f = Fraction.getFraction(50, 75);
    Fraction result = f.reduce();
    f = Fraction.getFraction( - 2,  - 3);
    result = f.reduce();
    f = Fraction.getFraction(2,  - 3);
    result = f.reduce();
    f = Fraction.getFraction( - 2, 3);
    result = f.reduce();
    assertSame(f, result);
    f = Fraction.getFraction(2, 3);
    result = f.reduce();
    f = Fraction.getFraction(0, 1);
    result = f.reduce();
    f = Fraction.getFraction(0, 100);
    result = f.reduce();
    f = Fraction.getFraction(Integer.MIN_VALUE, 2);
    result = f.reduce();
    
}

---
---
public void testReduce_catena_9() {
    Fraction f = null;
    f = Fraction.getFraction(50, 75);
    Fraction result = f.reduce();
    f = Fraction.getFraction( - 2,  - 3);
    result = f.reduce();
    f = Fraction.getFraction(2,  - 3);
    result = f.reduce();
    f = Fraction.getFraction( - 2, 3);
    result = f.reduce();
    f = Fraction.getFraction(2, 3);
    result = f.reduce();
    assertEquals(2, result.getNumerator());
    f = Fraction.getFraction(0, 1);
    result = f.reduce();
    f = Fraction.getFraction(0, 100);
    result = f.reduce();
    f = Fraction.getFraction(Integer.MIN_VALUE, 2);
    result = f.reduce();
    
}

---
---
public void testReduce_catena_10() {
    Fraction f = null;
    f = Fraction.getFraction(50, 75);
    Fraction result = f.reduce();
    f = Fraction.getFraction( - 2,  - 3);
    result = f.reduce();
    f = Fraction.getFraction(2,  - 3);
    result = f.reduce();
    f = Fraction.getFraction( - 2, 3);
    result = f.reduce();
    f = Fraction.getFraction(2, 3);
    result = f.reduce();
    assertEquals(3, result.getDenominator());
    f = Fraction.getFraction(0, 1);
    result = f.reduce();
    f = Fraction.getFraction(0, 100);
    result = f.reduce();
    f = Fraction.getFraction(Integer.MIN_VALUE, 2);
    result = f.reduce();
    
}

---
---
public void testReduce_catena_11() {
    Fraction f = null;
    f = Fraction.getFraction(50, 75);
    Fraction result = f.reduce();
    f = Fraction.getFraction( - 2,  - 3);
    result = f.reduce();
    f = Fraction.getFraction(2,  - 3);
    result = f.reduce();
    f = Fraction.getFraction( - 2, 3);
    result = f.reduce();
    f = Fraction.getFraction(2, 3);
    result = f.reduce();
    assertSame(f, result);
    f = Fraction.getFraction(0, 1);
    result = f.reduce();
    f = Fraction.getFraction(0, 100);
    result = f.reduce();
    f = Fraction.getFraction(Integer.MIN_VALUE, 2);
    result = f.reduce();
    
}

---
---
public void testReduce_catena_12() {
    Fraction f = null;
    f = Fraction.getFraction(50, 75);
    Fraction result = f.reduce();
    f = Fraction.getFraction( - 2,  - 3);
    result = f.reduce();
    f = Fraction.getFraction(2,  - 3);
    result = f.reduce();
    f = Fraction.getFraction( - 2, 3);
    result = f.reduce();
    f = Fraction.getFraction(2, 3);
    result = f.reduce();
    f = Fraction.getFraction(0, 1);
    result = f.reduce();
    assertEquals(0, result.getNumerator());
    f = Fraction.getFraction(0, 100);
    result = f.reduce();
    f = Fraction.getFraction(Integer.MIN_VALUE, 2);
    result = f.reduce();
    
}

---
---
public void testReduce_catena_13() {
    Fraction f = null;
    f = Fraction.getFraction(50, 75);
    Fraction result = f.reduce();
    f = Fraction.getFraction( - 2,  - 3);
    result = f.reduce();
    f = Fraction.getFraction(2,  - 3);
    result = f.reduce();
    f = Fraction.getFraction( - 2, 3);
    result = f.reduce();
    f = Fraction.getFraction(2, 3);
    result = f.reduce();
    f = Fraction.getFraction(0, 1);
    result = f.reduce();
    assertEquals(1, result.getDenominator());
    f = Fraction.getFraction(0, 100);
    result = f.reduce();
    f = Fraction.getFraction(Integer.MIN_VALUE, 2);
    result = f.reduce();
    
}

---
---
public void testReduce_catena_14() {
    Fraction f = null;
    f = Fraction.getFraction(50, 75);
    Fraction result = f.reduce();
    f = Fraction.getFraction( - 2,  - 3);
    result = f.reduce();
    f = Fraction.getFraction(2,  - 3);
    result = f.reduce();
    f = Fraction.getFraction( - 2, 3);
    result = f.reduce();
    f = Fraction.getFraction(2, 3);
    result = f.reduce();
    f = Fraction.getFraction(0, 1);
    result = f.reduce();
    assertSame(f, result);
    f = Fraction.getFraction(0, 100);
    result = f.reduce();
    f = Fraction.getFraction(Integer.MIN_VALUE, 2);
    result = f.reduce();
    
}

---
---
public void testReduce_catena_15() {
    Fraction f = null;
    f = Fraction.getFraction(50, 75);
    Fraction result = f.reduce();
    f = Fraction.getFraction( - 2,  - 3);
    result = f.reduce();
    f = Fraction.getFraction(2,  - 3);
    result = f.reduce();
    f = Fraction.getFraction( - 2, 3);
    result = f.reduce();
    f = Fraction.getFraction(2, 3);
    result = f.reduce();
    f = Fraction.getFraction(0, 1);
    result = f.reduce();
    f = Fraction.getFraction(0, 100);
    result = f.reduce();
    assertEquals(0, result.getNumerator());
    f = Fraction.getFraction(Integer.MIN_VALUE, 2);
    result = f.reduce();
    
}

---
---
public void testReduce_catena_16() {
    Fraction f = null;
    f = Fraction.getFraction(50, 75);
    Fraction result = f.reduce();
    f = Fraction.getFraction( - 2,  - 3);
    result = f.reduce();
    f = Fraction.getFraction(2,  - 3);
    result = f.reduce();
    f = Fraction.getFraction( - 2, 3);
    result = f.reduce();
    f = Fraction.getFraction(2, 3);
    result = f.reduce();
    f = Fraction.getFraction(0, 1);
    result = f.reduce();
    f = Fraction.getFraction(0, 100);
    result = f.reduce();
    assertEquals(1, result.getDenominator());
    f = Fraction.getFraction(Integer.MIN_VALUE, 2);
    result = f.reduce();
    
}

---
---
public void testReduce_catena_17() {
    Fraction f = null;
    f = Fraction.getFraction(50, 75);
    Fraction result = f.reduce();
    f = Fraction.getFraction( - 2,  - 3);
    result = f.reduce();
    f = Fraction.getFraction(2,  - 3);
    result = f.reduce();
    f = Fraction.getFraction( - 2, 3);
    result = f.reduce();
    f = Fraction.getFraction(2, 3);
    result = f.reduce();
    f = Fraction.getFraction(0, 1);
    result = f.reduce();
    f = Fraction.getFraction(0, 100);
    result = f.reduce();
    assertSame(result, Fraction.ZERO);
    f = Fraction.getFraction(Integer.MIN_VALUE, 2);
    result = f.reduce();
    
}

---
---
public void testReduce_catena_18() {
    Fraction f = null;
    f = Fraction.getFraction(50, 75);
    Fraction result = f.reduce();
    f = Fraction.getFraction( - 2,  - 3);
    result = f.reduce();
    f = Fraction.getFraction(2,  - 3);
    result = f.reduce();
    f = Fraction.getFraction( - 2, 3);
    result = f.reduce();
    f = Fraction.getFraction(2, 3);
    result = f.reduce();
    f = Fraction.getFraction(0, 1);
    result = f.reduce();
    f = Fraction.getFraction(0, 100);
    result = f.reduce();
    f = Fraction.getFraction(Integer.MIN_VALUE, 2);
    result = f.reduce();
    assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());
    
}

---
---
public void testReduce_catena_19() {
    Fraction f = null;
    f = Fraction.getFraction(50, 75);
    Fraction result = f.reduce();
    f = Fraction.getFraction( - 2,  - 3);
    result = f.reduce();
    f = Fraction.getFraction(2,  - 3);
    result = f.reduce();
    f = Fraction.getFraction( - 2, 3);
    result = f.reduce();
    f = Fraction.getFraction(2, 3);
    result = f.reduce();
    f = Fraction.getFraction(0, 1);
    result = f.reduce();
    f = Fraction.getFraction(0, 100);
    result = f.reduce();
    f = Fraction.getFraction(Integer.MIN_VALUE, 2);
    result = f.reduce();
    assertEquals(1, result.getDenominator());
    
}

---
--------------------
Run: Lang_48
@@@
Split test: org.apache.commons.lang.builder.EqualsBuilderTest::testBigDecimal
file: /root/workbench/exportInfo/d4j_buggy/Lang_48/src/test//org/apache/commons/lang/builder/EqualsBuilderTest.java
Begin: Pos(381, 12)
End: Pos(386, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_48/src/test//org/apache/commons/lang/builder/EqualsBuilderTest.java
Name: testBigDecimal
Childs: [StatementAssertion<Begin: Pos(384, 9), End: Pos(384, 66)>,
StatementAssertion<Begin: Pos(385, 9), End: Pos(385, 66)>,
]
---
public void testBigDecimal_catena_0() {
    BigDecimal o1 = new BigDecimal("2.0");
    BigDecimal o2 = new BigDecimal("2.00");
    assertTrue(new EqualsBuilder().append(o1, o1).isEquals());
    
}

---
---
public void testBigDecimal_catena_1() {
    BigDecimal o1 = new BigDecimal("2.0");
    BigDecimal o2 = new BigDecimal("2.00");
    assertTrue(new EqualsBuilder().append(o1, o2).isEquals());
    
}

---
--------------------
Run: Lang_17
@@@
Split test: org.apache.commons.lang3.StringEscapeUtilsTest::testLang720
file: /root/workbench/exportInfo/d4j_buggy/Lang_17/src/test/java//org/apache/commons/lang3/StringEscapeUtilsTest.java
Begin: Pos(428, 12)
End: Pos(432, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_17/src/test/java//org/apache/commons/lang3/StringEscapeUtilsTest.java
Name: testLang720
Childs: [StatementAssertion<Begin: Pos(431, 9), End: Pos(431, 37)>,
]
--------------------
Run: Lang_62
@@@
Split test: org.apache.commons.lang.EntitiesTest::testNumberOverflow
file: /root/workbench/exportInfo/d4j_buggy/Lang_62/src/test//org/apache/commons/lang/EntitiesTest.java
Begin: Pos(200, 12)
End: Pos(205, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_62/src/test//org/apache/commons/lang/EntitiesTest.java
Name: testNumberOverflow
Childs: [StatementAssertion<Begin: Pos(201, 9), End: Pos(201, 59)>,
StatementAssertion<Begin: Pos(202, 9), End: Pos(202, 63)>,
StatementAssertion<Begin: Pos(203, 9), End: Pos(203, 61)>,
StatementAssertion<Begin: Pos(204, 9), End: Pos(204, 65)>,
]
---
public void testNumberOverflow_catena_0()throws Exception {
    doTestUnescapeEntity("&#12345678;", "&#12345678;");
    
}

---
---
public void testNumberOverflow_catena_1()throws Exception {
    doTestUnescapeEntity("x&#12345678;y", "x&#12345678;y");
    
}

---
---
public void testNumberOverflow_catena_2()throws Exception {
    doTestUnescapeEntity("&#x12345678;", "&#x12345678;");
    
}

---
---
public void testNumberOverflow_catena_3()throws Exception {
    doTestUnescapeEntity("x&#x12345678;y", "x&#x12345678;y");
    
}

---
--------------------
Run: Lang_4
@@@
Split test: org.apache.commons.lang3.text.translate.LookupTranslatorTest::testLang882
file: /root/workbench/exportInfo/d4j_buggy/Lang_4/src/test/java//org/apache/commons/lang3/text/translate/LookupTranslatorTest.java
Begin: Pos(43, 5)
End: Pos(50, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_4/src/test/java//org/apache/commons/lang3/text/translate/LookupTranslatorTest.java
Name: testLang882
Childs: [StatementAssertion<Begin: Pos(48, 9), End: Pos(48, 67)>,
StatementAssertion<Begin: Pos(49, 9), End: Pos(49, 63)>,
]
---
@Test public void testLang882_catena_0()throws IOException {
    final LookupTranslator lt = new LookupTranslator(new CharSequence[][] {
         {
            new StringBuffer("one"), new StringBuffer("two")
        }
    });
    final StringWriter out = new StringWriter();
    final int result = lt.translate(new StringBuffer("one"), 0, out);
    assertEquals("Incorrect codepoint consumption", 3, result);
    
}

---
---
@Test public void testLang882_catena_1()throws IOException {
    final LookupTranslator lt = new LookupTranslator(new CharSequence[][] {
         {
            new StringBuffer("one"), new StringBuffer("two")
        }
    });
    final StringWriter out = new StringWriter();
    final int result = lt.translate(new StringBuffer("one"), 0, out);
    assertEquals("Incorrect value", "two", out.toString());
    
}

---
--------------------
Run: Lang_12
@@@
Split test: org.apache.commons.lang3.RandomStringUtilsTest::testExceptions
file: /root/workbench/exportInfo/d4j_buggy/Lang_12/src/test/java//org/apache/commons/lang3/RandomStringUtilsTest.java
Begin: Pos(133, 12)
End: Pos(171, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_12/src/test/java//org/apache/commons/lang3/RandomStringUtilsTest.java
Name: testExceptions
Childs: [StatementAssertion<Begin: Pos(137, 13), End: Pos(137, 19)>,
StatementAssertion<Begin: Pos(141, 13), End: Pos(141, 19)>,
StatementAssertion<Begin: Pos(145, 13), End: Pos(145, 19)>,
StatementAssertion<Begin: Pos(149, 13), End: Pos(149, 19)>,
StatementAssertion<Begin: Pos(153, 13), End: Pos(153, 19)>,
StatementAssertion<Begin: Pos(157, 13), End: Pos(157, 19)>,
StatementAssertion<Begin: Pos(161, 13), End: Pos(161, 19)>,
StatementAssertion<Begin: Pos(165, 13), End: Pos(165, 19)>,
StatementAssertion<Begin: Pos(169, 13), End: Pos(169, 19)>,
]
---
public void testExceptions_catena_0() {
    final char[]DUMMY = new char[] {
        'a'
    };
    try {
        RandomStringUtils.random( - 1);
        fail();
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        RandomStringUtils.random( - 1, true, true);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        RandomStringUtils.random( - 1, DUMMY);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        RandomStringUtils.random(1, new char[0]);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        RandomStringUtils.random( - 1, "");
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        RandomStringUtils.random( - 1, (String)null);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        RandomStringUtils.random( - 1, 'a', 'z', false, false);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        RandomStringUtils.random( - 1, 'a', 'z', false, false, DUMMY);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        RandomStringUtils.random( - 1, 'a', 'z', false, false, DUMMY, new Random());
        
    }
    catch(IllegalArgumentException ex) {
        
    }
}

---
---
public void testExceptions_catena_1() {
    final char[]DUMMY = new char[] {
        'a'
    };
    try {
        RandomStringUtils.random( - 1);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        RandomStringUtils.random( - 1, true, true);
        fail();
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        RandomStringUtils.random( - 1, DUMMY);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        RandomStringUtils.random(1, new char[0]);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        RandomStringUtils.random( - 1, "");
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        RandomStringUtils.random( - 1, (String)null);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        RandomStringUtils.random( - 1, 'a', 'z', false, false);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        RandomStringUtils.random( - 1, 'a', 'z', false, false, DUMMY);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        RandomStringUtils.random( - 1, 'a', 'z', false, false, DUMMY, new Random());
        
    }
    catch(IllegalArgumentException ex) {
        
    }
}

---
---
public void testExceptions_catena_2() {
    final char[]DUMMY = new char[] {
        'a'
    };
    try {
        RandomStringUtils.random( - 1);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        RandomStringUtils.random( - 1, true, true);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        RandomStringUtils.random( - 1, DUMMY);
        fail();
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        RandomStringUtils.random(1, new char[0]);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        RandomStringUtils.random( - 1, "");
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        RandomStringUtils.random( - 1, (String)null);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        RandomStringUtils.random( - 1, 'a', 'z', false, false);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        RandomStringUtils.random( - 1, 'a', 'z', false, false, DUMMY);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        RandomStringUtils.random( - 1, 'a', 'z', false, false, DUMMY, new Random());
        
    }
    catch(IllegalArgumentException ex) {
        
    }
}

---
---
public void testExceptions_catena_3() {
    final char[]DUMMY = new char[] {
        'a'
    };
    try {
        RandomStringUtils.random( - 1);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        RandomStringUtils.random( - 1, true, true);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        RandomStringUtils.random( - 1, DUMMY);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        RandomStringUtils.random(1, new char[0]);
        fail();
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        RandomStringUtils.random( - 1, "");
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        RandomStringUtils.random( - 1, (String)null);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        RandomStringUtils.random( - 1, 'a', 'z', false, false);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        RandomStringUtils.random( - 1, 'a', 'z', false, false, DUMMY);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        RandomStringUtils.random( - 1, 'a', 'z', false, false, DUMMY, new Random());
        
    }
    catch(IllegalArgumentException ex) {
        
    }
}

---
---
public void testExceptions_catena_4() {
    final char[]DUMMY = new char[] {
        'a'
    };
    try {
        RandomStringUtils.random( - 1);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        RandomStringUtils.random( - 1, true, true);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        RandomStringUtils.random( - 1, DUMMY);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        RandomStringUtils.random(1, new char[0]);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        RandomStringUtils.random( - 1, "");
        fail();
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        RandomStringUtils.random( - 1, (String)null);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        RandomStringUtils.random( - 1, 'a', 'z', false, false);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        RandomStringUtils.random( - 1, 'a', 'z', false, false, DUMMY);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        RandomStringUtils.random( - 1, 'a', 'z', false, false, DUMMY, new Random());
        
    }
    catch(IllegalArgumentException ex) {
        
    }
}

---
---
public void testExceptions_catena_5() {
    final char[]DUMMY = new char[] {
        'a'
    };
    try {
        RandomStringUtils.random( - 1);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        RandomStringUtils.random( - 1, true, true);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        RandomStringUtils.random( - 1, DUMMY);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        RandomStringUtils.random(1, new char[0]);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        RandomStringUtils.random( - 1, "");
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        RandomStringUtils.random( - 1, (String)null);
        fail();
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        RandomStringUtils.random( - 1, 'a', 'z', false, false);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        RandomStringUtils.random( - 1, 'a', 'z', false, false, DUMMY);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        RandomStringUtils.random( - 1, 'a', 'z', false, false, DUMMY, new Random());
        
    }
    catch(IllegalArgumentException ex) {
        
    }
}

---
---
public void testExceptions_catena_6() {
    final char[]DUMMY = new char[] {
        'a'
    };
    try {
        RandomStringUtils.random( - 1);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        RandomStringUtils.random( - 1, true, true);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        RandomStringUtils.random( - 1, DUMMY);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        RandomStringUtils.random(1, new char[0]);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        RandomStringUtils.random( - 1, "");
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        RandomStringUtils.random( - 1, (String)null);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        RandomStringUtils.random( - 1, 'a', 'z', false, false);
        fail();
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        RandomStringUtils.random( - 1, 'a', 'z', false, false, DUMMY);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        RandomStringUtils.random( - 1, 'a', 'z', false, false, DUMMY, new Random());
        
    }
    catch(IllegalArgumentException ex) {
        
    }
}

---
---
public void testExceptions_catena_7() {
    final char[]DUMMY = new char[] {
        'a'
    };
    try {
        RandomStringUtils.random( - 1);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        RandomStringUtils.random( - 1, true, true);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        RandomStringUtils.random( - 1, DUMMY);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        RandomStringUtils.random(1, new char[0]);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        RandomStringUtils.random( - 1, "");
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        RandomStringUtils.random( - 1, (String)null);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        RandomStringUtils.random( - 1, 'a', 'z', false, false);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        RandomStringUtils.random( - 1, 'a', 'z', false, false, DUMMY);
        fail();
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        RandomStringUtils.random( - 1, 'a', 'z', false, false, DUMMY, new Random());
        
    }
    catch(IllegalArgumentException ex) {
        
    }
}

---
---
public void testExceptions_catena_8() {
    final char[]DUMMY = new char[] {
        'a'
    };
    try {
        RandomStringUtils.random( - 1);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        RandomStringUtils.random( - 1, true, true);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        RandomStringUtils.random( - 1, DUMMY);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        RandomStringUtils.random(1, new char[0]);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        RandomStringUtils.random( - 1, "");
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        RandomStringUtils.random( - 1, (String)null);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        RandomStringUtils.random( - 1, 'a', 'z', false, false);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        RandomStringUtils.random( - 1, 'a', 'z', false, false, DUMMY);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        RandomStringUtils.random( - 1, 'a', 'z', false, false, DUMMY, new Random());
        fail();
        
    }
    catch(IllegalArgumentException ex) {
        
    }
}

---
@@@
Split test: org.apache.commons.lang3.RandomStringUtilsTest::testLANG805
file: /root/workbench/exportInfo/d4j_buggy/Lang_12/src/test/java//org/apache/commons/lang3/RandomStringUtilsTest.java
Begin: Pos(128, 12)
End: Pos(131, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_12/src/test/java//org/apache/commons/lang3/RandomStringUtilsTest.java
Name: testLANG805
Childs: [StatementAssertion<Begin: Pos(130, 9), End: Pos(130, 106)>,
]
--------------------
Run: Lang_3
@@@
Split test: org.apache.commons.lang3.math.NumberUtilsTest::testStringCreateNumberEnsureNoPrecisionLoss
file: /root/workbench/exportInfo/d4j_buggy/Lang_3/src/test/java//org/apache/commons/lang3/math/NumberUtilsTest.java
Begin: Pos(122, 5)
End: Pos(131, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_3/src/test/java//org/apache/commons/lang3/math/NumberUtilsTest.java
Name: testStringCreateNumberEnsureNoPrecisionLoss
Childs: [StatementAssertion<Begin: Pos(128, 9), End: Pos(128, 77)>,
StatementAssertion<Begin: Pos(129, 9), End: Pos(129, 79)>,
StatementAssertion<Begin: Pos(130, 9), End: Pos(130, 87)>,
]
---
@Test public void testStringCreateNumberEnsureNoPrecisionLoss_catena_0() {
    String shouldBeFloat = "1.23";
    String shouldBeDouble = "3.40282354e+38";
    String shouldBeBigDecimal = "1.797693134862315759e+308";
    assertTrue(NumberUtils.createNumber(shouldBeFloat)instanceof Float);
    
}

---
---
@Test public void testStringCreateNumberEnsureNoPrecisionLoss_catena_1() {
    String shouldBeFloat = "1.23";
    String shouldBeDouble = "3.40282354e+38";
    String shouldBeBigDecimal = "1.797693134862315759e+308";
    assertTrue(NumberUtils.createNumber(shouldBeDouble)instanceof Double);
    
}

---
---
@Test public void testStringCreateNumberEnsureNoPrecisionLoss_catena_2() {
    String shouldBeFloat = "1.23";
    String shouldBeDouble = "3.40282354e+38";
    String shouldBeBigDecimal = "1.797693134862315759e+308";
    assertTrue(NumberUtils.createNumber(shouldBeBigDecimal)instanceof BigDecimal);
    
}

---
--------------------
Run: Lang_27
@@@
Split test: org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber
file: /root/workbench/exportInfo/d4j_buggy/Lang_27/src/test/java//org/apache/commons/lang3/math/NumberUtilsTest.java
Begin: Pos(176, 12)
End: Pos(217, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_27/src/test/java//org/apache/commons/lang3/math/NumberUtilsTest.java
Name: testCreateNumber
Childs: [StatementAssertion<Begin: Pos(178, 9), End: Pos(178, 111)>,
StatementAssertion<Begin: Pos(179, 9), End: Pos(179, 111)>,
StatementAssertion<Begin: Pos(180, 9), End: Pos(180, 113)>,
StatementAssertion<Begin: Pos(181, 9), End: Pos(181, 113)>,
StatementAssertion<Begin: Pos(182, 9), End: Pos(182, 112)>,
StatementAssertion<Begin: Pos(183, 9), End: Pos(183, 112)>,
StatementAssertion<Begin: Pos(184, 9), End: Pos(185, 41)>,
StatementAssertion<Begin: Pos(186, 9), End: Pos(186, 107)>,
StatementAssertion<Begin: Pos(187, 9), End: Pos(187, 107)>,
StatementAssertion<Begin: Pos(188, 9), End: Pos(188, 113)>,
StatementAssertion<Begin: Pos(189, 9), End: Pos(189, 113)>,
StatementAssertion<Begin: Pos(190, 9), End: Pos(190, 109)>,
StatementAssertion<Begin: Pos(191, 9), End: Pos(191, 112)>,
StatementAssertion<Begin: Pos(192, 9), End: Pos(192, 115)>,
StatementAssertion<Begin: Pos(193, 9), End: Pos(193, 112)>,
StatementAssertion<Begin: Pos(194, 9), End: Pos(194, 117)>,
StatementAssertion<Begin: Pos(195, 9), End: Pos(195, 117)>,
StatementAssertion<Begin: Pos(196, 9), End: Pos(196, 88)>,
StatementAssertion<Begin: Pos(197, 9), End: Pos(198, 56)>,
StatementAssertion<Begin: Pos(202, 13), End: Pos(203, 48)>,
StatementAssertion<Begin: Pos(205, 9), End: Pos(206, 63)>,
StatementAssertion<Begin: Pos(207, 9), End: Pos(208, 57)>,
StatementAssertion<Begin: Pos(209, 9), End: Pos(210, 54)>,
StatementAssertion<Begin: Pos(213, 9), End: Pos(213, 110)>,
StatementAssertion<Begin: Pos(216, 9), End: Pos(216, 80)>,
]
---
public void testCreateNumber_catena_0() {
    assertEquals("createNumber(String) 1 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5"));
    if(SystemUtils.isJavaVersionAtLeast(1.3f)) {
        
    }
}

---
---
public void testCreateNumber_catena_1() {
    assertEquals("createNumber(String) 2 failed", new Integer("12345"), NumberUtils.createNumber("12345"));
    if(SystemUtils.isJavaVersionAtLeast(1.3f)) {
        
    }
}

---
---
public void testCreateNumber_catena_2() {
    assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5D"));
    if(SystemUtils.isJavaVersionAtLeast(1.3f)) {
        
    }
}

---
---
public void testCreateNumber_catena_3() {
    assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5d"));
    if(SystemUtils.isJavaVersionAtLeast(1.3f)) {
        
    }
}

---
---
public void testCreateNumber_catena_4() {
    assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5F"));
    if(SystemUtils.isJavaVersionAtLeast(1.3f)) {
        
    }
}

---
---
public void testCreateNumber_catena_5() {
    assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5f"));
    if(SystemUtils.isJavaVersionAtLeast(1.3f)) {
        
    }
}

---
---
public void testCreateNumber_catena_6() {
    assertEquals("createNumber(String) 5 failed", new Long(Integer.MAX_VALUE + 1L), NumberUtils.createNumber("" + (Integer.MAX_VALUE + 1L)));
    if(SystemUtils.isJavaVersionAtLeast(1.3f)) {
        
    }
}

---
---
public void testCreateNumber_catena_7() {
    assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345L"));
    if(SystemUtils.isJavaVersionAtLeast(1.3f)) {
        
    }
}

---
---
public void testCreateNumber_catena_8() {
    assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345l"));
    if(SystemUtils.isJavaVersionAtLeast(1.3f)) {
        
    }
}

---
---
public void testCreateNumber_catena_9() {
    assertEquals("createNumber(String) 7 failed", new Float("-1234.5"), NumberUtils.createNumber("-1234.5"));
    if(SystemUtils.isJavaVersionAtLeast(1.3f)) {
        
    }
}

---
---
public void testCreateNumber_catena_10() {
    assertEquals("createNumber(String) 8 failed", new Integer("-12345"), NumberUtils.createNumber("-12345"));
    if(SystemUtils.isJavaVersionAtLeast(1.3f)) {
        
    }
}

---
---
public void testCreateNumber_catena_11() {
    assertTrue("createNumber(String) 9 failed", 0xFADE == NumberUtils.createNumber("0xFADE").intValue());
    if(SystemUtils.isJavaVersionAtLeast(1.3f)) {
        
    }
}

---
---
public void testCreateNumber_catena_12() {
    assertTrue("createNumber(String) 10 failed",  - 0xFADE == NumberUtils.createNumber("-0xFADE").intValue());
    if(SystemUtils.isJavaVersionAtLeast(1.3f)) {
        
    }
}

---
---
public void testCreateNumber_catena_13() {
    assertEquals("createNumber(String) 11 failed", new Double("1.1E200"), NumberUtils.createNumber("1.1E200"));
    if(SystemUtils.isJavaVersionAtLeast(1.3f)) {
        
    }
}

---
---
public void testCreateNumber_catena_14() {
    assertEquals("createNumber(String) 12 failed", new Float("1.1E20"), NumberUtils.createNumber("1.1E20"));
    if(SystemUtils.isJavaVersionAtLeast(1.3f)) {
        
    }
}

---
---
public void testCreateNumber_catena_15() {
    assertEquals("createNumber(String) 13 failed", new Double("-1.1E200"), NumberUtils.createNumber("-1.1E200"));
    if(SystemUtils.isJavaVersionAtLeast(1.3f)) {
        
    }
}

---
---
public void testCreateNumber_catena_16() {
    assertEquals("createNumber(String) 14 failed", new Double("1.1E-200"), NumberUtils.createNumber("1.1E-200"));
    if(SystemUtils.isJavaVersionAtLeast(1.3f)) {
        
    }
}

---
---
public void testCreateNumber_catena_17() {
    assertEquals("createNumber(null) failed", null, NumberUtils.createNumber(null));
    if(SystemUtils.isJavaVersionAtLeast(1.3f)) {
        
    }
}

---
---
public void testCreateNumber_catena_18() {
    assertEquals("createNumber(String) failed", new BigInteger("12345678901234567890"), NumberUtils.createNumber("12345678901234567890L"));
    if(SystemUtils.isJavaVersionAtLeast(1.3f)) {
        
    }
}

---
---
public void testCreateNumber_catena_19() {
    if(SystemUtils.isJavaVersionAtLeast(1.3f)) {
        assertEquals("createNumber(String) 15 failed", new BigDecimal("1.1E-700"), NumberUtils.createNumber("1.1E-700F"));
        
    }
}

---
---
public void testCreateNumber_catena_20() {
    if(SystemUtils.isJavaVersionAtLeast(1.3f)) {
        
    }
    assertEquals("createNumber(String) 16 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils.createNumber("10" + Integer.MAX_VALUE + "L"));
    
}

---
---
public void testCreateNumber_catena_21() {
    if(SystemUtils.isJavaVersionAtLeast(1.3f)) {
        
    }
    assertEquals("createNumber(String) 17 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils.createNumber("10" + Integer.MAX_VALUE));
    
}

---
---
public void testCreateNumber_catena_22() {
    if(SystemUtils.isJavaVersionAtLeast(1.3f)) {
        
    }
    assertEquals("createNumber(String) 18 failed", new BigInteger("10" + Long.MAX_VALUE), NumberUtils.createNumber("10" + Long.MAX_VALUE));
    
}

---
---
public void testCreateNumber_catena_23() {
    if(SystemUtils.isJavaVersionAtLeast(1.3f)) {
        
    }
    assertEquals("createNumber(String) LANG-521 failed", new Float("2."), NumberUtils.createNumber("2."));
    
}

---
---
public void testCreateNumber_catena_24() {
    if(SystemUtils.isJavaVersionAtLeast(1.3f)) {
        
    }
    assertFalse("createNumber(String) succeeded", checkCreateNumber("1eE"));
    
}

---
--------------------
Run: Lang_31
@@@
Split test: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyCharArrayWithSupplementaryChars
file: /root/workbench/exportInfo/d4j_buggy/Lang_31/src/test/java//org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java
Begin: Pos(687, 9)
End: Pos(698, 2)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_31/src/test/java//org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java
Name: testContainsAnyCharArrayWithSupplementaryChars
Childs: [StatementAssertion<Begin: Pos(688, 3), End: Pos(688, 97)>,
StatementAssertion<Begin: Pos(689, 3), End: Pos(689, 97)>,
StatementAssertion<Begin: Pos(690, 3), End: Pos(690, 84)>,
StatementAssertion<Begin: Pos(692, 3), End: Pos(692, 51)>,
StatementAssertion<Begin: Pos(693, 3), End: Pos(693, 60)>,
StatementAssertion<Begin: Pos(694, 3), End: Pos(694, 61)>,
StatementAssertion<Begin: Pos(696, 3), End: Pos(696, 85)>,
StatementAssertion<Begin: Pos(697, 3), End: Pos(697, 85)>,
]
---
public void testContainsAnyCharArrayWithSupplementaryChars_catena_0() {
    assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20000.toCharArray()));
    
}

---
---
public void testContainsAnyCharArrayWithSupplementaryChars_catena_1() {
    assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20001.toCharArray()));
    
}

---
---
public void testContainsAnyCharArrayWithSupplementaryChars_catena_2() {
    assertEquals(true, StringUtils.containsAny(CharU20000, CharU20000.toCharArray()));
    
}

---
---
public void testContainsAnyCharArrayWithSupplementaryChars_catena_3() {
    assertEquals( - 1, CharU20000.indexOf(CharU20001));
    
}

---
---
public void testContainsAnyCharArrayWithSupplementaryChars_catena_4() {
    assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));
    
}

---
---
public void testContainsAnyCharArrayWithSupplementaryChars_catena_5() {
    assertEquals( - 1, CharU20000.indexOf(CharU20001.charAt(1)));
    
}

---
---
public void testContainsAnyCharArrayWithSupplementaryChars_catena_6() {
    assertEquals(false, StringUtils.containsAny(CharU20000, CharU20001.toCharArray()));
    
}

---
---
public void testContainsAnyCharArrayWithSupplementaryChars_catena_7() {
    assertEquals(false, StringUtils.containsAny(CharU20001, CharU20000.toCharArray()));
    
}

---
@@@
Split test: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyStringWithSupplementaryChars
file: /root/workbench/exportInfo/d4j_buggy/Lang_31/src/test/java//org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java
Begin: Pos(671, 9)
End: Pos(682, 2)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_31/src/test/java//org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java
Name: testContainsAnyStringWithSupplementaryChars
Childs: [StatementAssertion<Begin: Pos(672, 3), End: Pos(672, 83)>,
StatementAssertion<Begin: Pos(673, 3), End: Pos(673, 83)>,
StatementAssertion<Begin: Pos(674, 3), End: Pos(674, 70)>,
StatementAssertion<Begin: Pos(676, 3), End: Pos(676, 51)>,
StatementAssertion<Begin: Pos(677, 3), End: Pos(677, 60)>,
StatementAssertion<Begin: Pos(678, 3), End: Pos(678, 61)>,
StatementAssertion<Begin: Pos(680, 3), End: Pos(680, 71)>,
StatementAssertion<Begin: Pos(681, 3), End: Pos(681, 71)>,
]
---
public void testContainsAnyStringWithSupplementaryChars_catena_0() {
    assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20000));
    
}

---
---
public void testContainsAnyStringWithSupplementaryChars_catena_1() {
    assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20001));
    
}

---
---
public void testContainsAnyStringWithSupplementaryChars_catena_2() {
    assertEquals(true, StringUtils.containsAny(CharU20000, CharU20000));
    
}

---
---
public void testContainsAnyStringWithSupplementaryChars_catena_3() {
    assertEquals( - 1, CharU20000.indexOf(CharU20001));
    
}

---
---
public void testContainsAnyStringWithSupplementaryChars_catena_4() {
    assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));
    
}

---
---
public void testContainsAnyStringWithSupplementaryChars_catena_5() {
    assertEquals( - 1, CharU20000.indexOf(CharU20001.charAt(1)));
    
}

---
---
public void testContainsAnyStringWithSupplementaryChars_catena_6() {
    assertEquals(false, StringUtils.containsAny(CharU20000, CharU20001));
    
}

---
---
public void testContainsAnyStringWithSupplementaryChars_catena_7() {
    assertEquals(false, StringUtils.containsAny(CharU20001, CharU20000));
    
}

---
--------------------
Run: Lang_14
@@@
Split test: org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testEquals
file: /root/workbench/exportInfo/d4j_buggy/Lang_14/src/test/java//org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java
Begin: Pos(486, 12)
End: Pos(500, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_14/src/test/java//org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java
Name: testEquals
Childs: [StatementAssertion<Begin: Pos(488, 9), End: Pos(488, 51)>,
StatementAssertion<Begin: Pos(489, 9), End: Pos(489, 53)>,
StatementAssertion<Begin: Pos(490, 9), End: Pos(490, 85)>,
StatementAssertion<Begin: Pos(491, 9), End: Pos(491, 103)>,
StatementAssertion<Begin: Pos(492, 9), End: Pos(492, 90)>,
StatementAssertion<Begin: Pos(493, 9), End: Pos(493, 90)>,
StatementAssertion<Begin: Pos(494, 9), End: Pos(494, 104)>,
StatementAssertion<Begin: Pos(495, 9), End: Pos(495, 54)>,
StatementAssertion<Begin: Pos(496, 9), End: Pos(496, 53)>,
StatementAssertion<Begin: Pos(497, 9), End: Pos(497, 53)>,
StatementAssertion<Begin: Pos(498, 9), End: Pos(498, 57)>,
StatementAssertion<Begin: Pos(499, 9), End: Pos(499, 57)>,
]
---
public void testEquals_catena_0() {
    final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR;
    assertTrue(StringUtils.equals(null, null));
    
}

---
---
public void testEquals_catena_1() {
    final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR;
    assertTrue(StringUtils.equals(fooCs, fooCs));
    
}

---
---
public void testEquals_catena_2() {
    final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR;
    assertTrue(StringUtils.equals(fooCs, (CharSequence)new StringBuilder(FOO)));
    
}

---
---
public void testEquals_catena_3() {
    final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR;
    assertTrue(StringUtils.equals(fooCs, (CharSequence)new String(new char[] {
        'f', 'o', 'o'
    })));
    
}

---
---
public void testEquals_catena_4() {
    final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR;
    assertTrue(StringUtils.equals(fooCs, (CharSequence)new CustomCharSequence(FOO)));
    
}

---
---
public void testEquals_catena_5() {
    final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR;
    assertTrue(StringUtils.equals((CharSequence)new CustomCharSequence(FOO), fooCs));
    
}

---
---
public void testEquals_catena_6() {
    final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR;
    assertFalse(StringUtils.equals(fooCs, (CharSequence)new String(new char[] {
        'f', 'O', 'O'
    })));
    
}

---
---
public void testEquals_catena_7() {
    final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR;
    assertFalse(StringUtils.equals(fooCs, barCs));
    
}

---
---
public void testEquals_catena_8() {
    final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR;
    assertFalse(StringUtils.equals(fooCs, null));
    
}

---
---
public void testEquals_catena_9() {
    final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR;
    assertFalse(StringUtils.equals(null, fooCs));
    
}

---
---
public void testEquals_catena_10() {
    final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR;
    assertFalse(StringUtils.equals(fooCs, foobarCs));
    
}

---
---
public void testEquals_catena_11() {
    final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR;
    assertFalse(StringUtils.equals(foobarCs, fooCs));
    
}

---
--------------------
Run: Lang_8
@@@
Split test: org.apache.commons.lang3.time.FastDateFormat_PrinterTest::testCalendarTimezoneRespected
file: /root/workbench/exportInfo/d4j_buggy/Lang_8/src/test/java//org/apache/commons/lang3/time/FastDateFormat_PrinterTest.java
# Exception:
Traceback (most recent call last):
  File "run.py", line 39, in run
    fti, check = spliter.process_test_node_v2(path2file, test[1])
  File "/root/workbench/splitTests/spliter.py", line 259, in process_test_node_v2
    node = get_only_node(name, _globals)
  File "/root/workbench/splitTests/util.py", line 39, in get_only_node
    raise ParseError('Cannot find method <{}> in AST'.format(name))
util.ParseError: Cannot find method <testCalendarTimezoneRespected> in AST

---
@@@
Split test: org.apache.commons.lang3.time.FastDatePrinterTest::testCalendarTimezoneRespected
file: /root/workbench/exportInfo/d4j_buggy/Lang_8/src/test/java//org/apache/commons/lang3/time/FastDatePrinterTest.java
Begin: Pos(265, 5)
End: Pos(287, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_8/src/test/java//org/apache/commons/lang3/time/FastDatePrinterTest.java
Name: testCalendarTimezoneRespected
Childs: [StatementAssertion<Begin: Pos(277, 9), End: Pos(277, 67)>,
StatementAssertion<Begin: Pos(286, 9), End: Pos(286, 49)>,
]
---
@Test public void testCalendarTimezoneRespected_catena_0() {
    String[]availableZones = TimeZone.getAvailableIDs();
    TimeZone currentZone = TimeZone.getDefault();
    TimeZone anotherZone = null;
    for(String zone : availableZones) {
        if( ! zone.equals(currentZone.getID())) {
            anotherZone = TimeZone.getTimeZone(zone);
            
        }
    }
    assertNotNull("Cannot find another timezone", anotherZone);
    final String pattern = "h:mma z";
    final Calendar cal = Calendar.getInstance(anotherZone);
    SimpleDateFormat sdf = new SimpleDateFormat(pattern);
    sdf.setTimeZone(anotherZone);
    String expectedValue = sdf.format(cal.getTime());
    String actualValue = FastDateFormat.getInstance(pattern).format(cal);
    
}

---
---
@Test public void testCalendarTimezoneRespected_catena_1() {
    String[]availableZones = TimeZone.getAvailableIDs();
    TimeZone currentZone = TimeZone.getDefault();
    TimeZone anotherZone = null;
    for(String zone : availableZones) {
        if( ! zone.equals(currentZone.getID())) {
            anotherZone = TimeZone.getTimeZone(zone);
            
        }
    }
    final String pattern = "h:mma z";
    final Calendar cal = Calendar.getInstance(anotherZone);
    SimpleDateFormat sdf = new SimpleDateFormat(pattern);
    sdf.setTimeZone(anotherZone);
    String expectedValue = sdf.format(cal.getTime());
    String actualValue = FastDateFormat.getInstance(pattern).format(cal);
    assertEquals(expectedValue, actualValue);
    
}

---
--------------------
Run: Lang_13
@@@
Split test: org.apache.commons.lang3.SerializationUtilsTest::testPrimitiveTypeClassSerialization
file: /root/workbench/exportInfo/d4j_buggy/Lang_13/src/test/java//org/apache/commons/lang3/SerializationUtilsTest.java
Begin: Pos(368, 12)
End: Pos(376, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_13/src/test/java//org/apache/commons/lang3/SerializationUtilsTest.java
Name: testPrimitiveTypeClassSerialization
Childs: [StatementAssertion<Begin: Pos(374, 13), End: Pos(374, 47)>,
]
--------------------
Run: Lang_35
@@@
Split test: org.apache.commons.lang3.ArrayUtilsAddTest::testLANG571
file: /root/workbench/exportInfo/d4j_buggy/Lang_35/src/test/java//org/apache/commons/lang3/ArrayUtilsAddTest.java
Begin: Pos(227, 12)
End: Pos(244, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_35/src/test/java//org/apache/commons/lang3/ArrayUtilsAddTest.java
Name: testLANG571
Childs: [StatementAssertion<Begin: Pos(233, 13), End: Pos(233, 64)>,
StatementAssertion<Begin: Pos(240, 13), End: Pos(240, 64)>,
]
---
public void testLANG571_catena_0() {
    String[]stringArray = null;
    String aString = null;
    try {
        @SuppressWarnings("unused")String[]sa = ArrayUtils.add(stringArray, aString);
        fail("Should have caused IllegalArgumentException");
        
    }
    catch(IllegalArgumentException iae) {
        
    }
    try {
        @SuppressWarnings("unused")String[]sa = ArrayUtils.add(stringArray, 0, aString);
        
    }
    catch(IllegalArgumentException iae) {
        
    }
}

---
---
public void testLANG571_catena_1() {
    String[]stringArray = null;
    String aString = null;
    try {
        @SuppressWarnings("unused")String[]sa = ArrayUtils.add(stringArray, aString);
        
    }
    catch(IllegalArgumentException iae) {
        
    }
    try {
        @SuppressWarnings("unused")String[]sa = ArrayUtils.add(stringArray, 0, aString);
        fail("Should have caused IllegalArgumentException");
        
    }
    catch(IllegalArgumentException iae) {
        
    }
}

---
--------------------
Run: Lang_34
@@@
Split test: org.apache.commons.lang3.builder.ToStringBuilderTest::testObjectCycle
file: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java
Begin: Pos(829, 12)
End: Pos(838, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java
Name: testObjectCycle
Childs: [StatementAssertion<Begin: Pos(836, 9), End: Pos(836, 45)>,
StatementAssertion<Begin: Pos(837, 9), End: Pos(837, 44)>,
]
---
public void testObjectCycle_catena_0() {
    ObjectCycle a = new ObjectCycle();
    ObjectCycle b = new ObjectCycle();
    a.obj = b;
    b.obj = a;
    String expected = toBaseString(a) + "[" + toBaseString(b) + "[" + toBaseString(a) + "]]";
    assertEquals(expected, a.toString());
    
}

---
---
public void testObjectCycle_catena_1() {
    ObjectCycle a = new ObjectCycle();
    ObjectCycle b = new ObjectCycle();
    a.obj = b;
    b.obj = a;
    String expected = toBaseString(a) + "[" + toBaseString(b) + "[" + toBaseString(a) + "]]";
    validateNullToStringStyleRegistry();
    
}

---
@@@
Split test: org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionHierarchy
file: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java
# check: Selector contains assertion
Begin: Pos(313, 12)
End: Pos(336, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java
Name: testReflectionHierarchy
Childs: [StatementAssertion<Begin: Pos(316, 9), End: Pos(316, 83)>,
StatementAssertion<Begin: Pos(317, 9), End: Pos(317, 89)>,
StatementAssertion<Begin: Pos(318, 9), End: Pos(318, 96)>,
StatementAssertion<Begin: Pos(319, 9), End: Pos(319, 108)>,
StatementAssertion<Begin: Pos(320, 9), End: Pos(320, 102)>,
StatementAssertion<Begin: Pos(321, 9), End: Pos(321, 110)>,
StatementAssertion<Begin: Pos(322, 9), End: Pos(322, 126)>,
StatementAssertion<Begin: Pos(326, 9), End: Pos(326, 87)>,
StatementAssertion<Begin: Pos(327, 9), End: Pos(327, 87)>,
StatementAssertion<Begin: Pos(328, 9), End: Pos(328, 93)>,
StatementAssertion<Begin: Pos(329, 9), End: Pos(329, 100)>,
StatementAssertion<Begin: Pos(330, 9), End: Pos(330, 125)>,
StatementAssertion<Begin: Pos(331, 9), End: Pos(331, 106)>,
StatementAssertion<Begin: Pos(332, 9), End: Pos(332, 114)>,
StatementAssertion<Begin: Pos(333, 9), End: Pos(333, 130)>,
StatementAssertion<Begin: Pos(334, 9), End: Pos(334, 126)>,
StatementAssertion<Begin: Pos(335, 9), End: Pos(335, 49)>,
]
---
public void testReflectionHierarchy_catena_0() {
    ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();
    String baseStr = this.toBaseString(baseA);
    assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA));
    ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();
    baseStr = this.toBaseString(baseB);
    
}

---
---
public void testReflectionHierarchy_catena_1() {
    ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();
    String baseStr = this.toBaseString(baseA);
    assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null));
    ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();
    baseStr = this.toBaseString(baseB);
    
}

---
---
public void testReflectionHierarchy_catena_2() {
    ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();
    String baseStr = this.toBaseString(baseA);
    assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false));
    ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();
    baseStr = this.toBaseString(baseB);
    
}

---
---
public void testReflectionHierarchy_catena_3() {
    ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();
    String baseStr = this.toBaseString(baseA);
    assertEquals(baseStr + "[a=a,transientA=t]", ToStringBuilder.reflectionToString(baseA, null, true));
    ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();
    baseStr = this.toBaseString(baseB);
    
}

---
---
public void testReflectionHierarchy_catena_4() {
    ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();
    String baseStr = this.toBaseString(baseA);
    assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, null));
    ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();
    baseStr = this.toBaseString(baseB);
    
}

---
---
public void testReflectionHierarchy_catena_5() {
    ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();
    String baseStr = this.toBaseString(baseA);
    assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));
    ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();
    baseStr = this.toBaseString(baseB);
    
}

---
---
public void testReflectionHierarchy_catena_6() {
    ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();
    String baseStr = this.toBaseString(baseA);
    assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));
    ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();
    baseStr = this.toBaseString(baseB);
    
}

---
---
public void testReflectionHierarchy_catena_7() {
    ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();
    String baseStr = this.toBaseString(baseA);
    ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();
    baseStr = this.toBaseString(baseB);
    assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB));
    
}

---
---
public void testReflectionHierarchy_catena_8() {
    ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();
    String baseStr = this.toBaseString(baseA);
    ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();
    baseStr = this.toBaseString(baseB);
    assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB));
    
}

---
---
public void testReflectionHierarchy_catena_9() {
    ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();
    String baseStr = this.toBaseString(baseA);
    ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();
    baseStr = this.toBaseString(baseB);
    assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null));
    
}

---
---
public void testReflectionHierarchy_catena_10() {
    ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();
    String baseStr = this.toBaseString(baseA);
    ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();
    baseStr = this.toBaseString(baseB);
    assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false));
    
}

---
---
public void testReflectionHierarchy_catena_11() {
    ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();
    String baseStr = this.toBaseString(baseA);
    ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();
    baseStr = this.toBaseString(baseB);
    assertEquals(baseStr + "[b=b,transientB=t,a=a,transientA=t]", ToStringBuilder.reflectionToString(baseB, null, true));
    
}

---
---
public void testReflectionHierarchy_catena_12() {
    ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();
    String baseStr = this.toBaseString(baseA);
    ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();
    baseStr = this.toBaseString(baseB);
    assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, null));
    
}

---
---
public void testReflectionHierarchy_catena_13() {
    ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();
    String baseStr = this.toBaseString(baseA);
    ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();
    baseStr = this.toBaseString(baseB);
    assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));
    
}

---
---
public void testReflectionHierarchy_catena_14() {
    ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();
    String baseStr = this.toBaseString(baseA);
    ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();
    baseStr = this.toBaseString(baseB);
    assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));
    
}

---
---
public void testReflectionHierarchy_catena_15() {
    ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();
    String baseStr = this.toBaseString(baseA);
    ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();
    baseStr = this.toBaseString(baseB);
    assertEquals(baseStr + "[b=b]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));
    
}

---
---
public void testReflectionHierarchy_catena_16() {
    ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();
    String baseStr = this.toBaseString(baseA);
    ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();
    baseStr = this.toBaseString(baseB);
    this.validateNullToStringStyleRegistry();
    
}

---
@@@
Split test: org.apache.commons.lang3.builder.ToStringBuilderTest::testSelfInstanceTwoVarsReflectionObjectCycle
file: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java
# check: Selector contains assertion
Begin: Pos(530, 12)
End: Pos(534, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java
Name: testSelfInstanceTwoVarsReflectionObjectCycle
Childs: [StatementAssertion<Begin: Pos(532, 9), End: Pos(532, 161)>,
StatementAssertion<Begin: Pos(533, 9), End: Pos(533, 49)>,
]
---
public void testSelfInstanceTwoVarsReflectionObjectCycle_catena_0()throws Exception {
    SelfInstanceTwoVarsReflectionTestFixture test = new SelfInstanceTwoVarsReflectionTestFixture();
    assertEquals(this.toBaseString(test) + "[typeIsSelf=" + this.toBaseString(test) + ",otherType=" + test.getOtherType().toString() + "]", test.toString());
    
}

---
---
public void testSelfInstanceTwoVarsReflectionObjectCycle_catena_1()throws Exception {
    SelfInstanceTwoVarsReflectionTestFixture test = new SelfInstanceTwoVarsReflectionTestFixture();
    this.validateNullToStringStyleRegistry();
    
}

---
@@@
Split test: org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionArrayCycle
file: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java
# check: Selector contains assertion
Begin: Pos(376, 12)
End: Pos(383, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java
Name: testReflectionArrayCycle
Childs: [StatementAssertion<Begin: Pos(379, 9), End: Pos(381, 57)>,
StatementAssertion<Begin: Pos(382, 9), End: Pos(382, 49)>,
]
---
public void testReflectionArrayCycle_catena_0()throws Exception {
    Object[]objects = new Object[1];
    objects[0] = objects;
    assertEquals(this.toBaseString(objects) + "[{" + this.toBaseString(objects) + "}]", ToStringBuilder.reflectionToString(objects));
    
}

---
---
public void testReflectionArrayCycle_catena_1()throws Exception {
    Object[]objects = new Object[1];
    objects[0] = objects;
    this.validateNullToStringStyleRegistry();
    
}

---
@@@
Split test: org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionLongArrayArray
file: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java
# check: Selector contains assertion
Begin: Pos(237, 12)
End: Pos(244, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java
Name: testReflectionLongArrayArray
Childs: [StatementAssertion<Begin: Pos(240, 9), End: Pos(240, 98)>,
StatementAssertion<Begin: Pos(242, 9), End: Pos(242, 47)>,
StatementAssertion<Begin: Pos(243, 9), End: Pos(243, 49)>,
]
---
public void testReflectionLongArrayArray_catena_0() {
    long[][]array = new long[][] {
         {
            1, 2
        }, null,  {
            5
        }
    };
    String baseStr = this.toBaseString(array);
    assertEquals(baseStr + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array));
    array = null;
    
}

---
---
public void testReflectionLongArrayArray_catena_1() {
    long[][]array = new long[][] {
         {
            1, 2
        }, null,  {
            5
        }
    };
    String baseStr = this.toBaseString(array);
    array = null;
    assertReflectionArray("<null>", array);
    
}

---
---
public void testReflectionLongArrayArray_catena_2() {
    long[][]array = new long[][] {
         {
            1, 2
        }, null,  {
            5
        }
    };
    String baseStr = this.toBaseString(array);
    array = null;
    this.validateNullToStringStyleRegistry();
    
}

---
@@@
Split test: org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionArrayArrayCycle
file: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java
# check: Selector contains assertion
Begin: Pos(402, 12)
End: Pos(422, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java
Name: testReflectionArrayArrayCycle
Childs: [StatementAssertion<Begin: Pos(409, 9), End: Pos(420, 57)>,
StatementAssertion<Begin: Pos(421, 9), End: Pos(421, 49)>,
]
---
public void testReflectionArrayArrayCycle_catena_0()throws Exception {
    Object[][]objects = new Object[2][2];
    objects[0][0] = objects;
    objects[0][1] = objects;
    objects[1][0] = objects;
    objects[1][1] = objects;
    String basicToString = this.toBaseString(objects);
    assertEquals(basicToString + "[{{" + basicToString + "," + basicToString + "},{" + basicToString + "," + basicToString + "}}]", ToStringBuilder.reflectionToString(objects));
    
}

---
---
public void testReflectionArrayArrayCycle_catena_1()throws Exception {
    Object[][]objects = new Object[2][2];
    objects[0][0] = objects;
    objects[0][1] = objects;
    objects[1][0] = objects;
    objects[1][1] = objects;
    String basicToString = this.toBaseString(objects);
    this.validateNullToStringStyleRegistry();
    
}

---
@@@
Split test: org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionFloatArray
file: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java
# check: Selector contains assertion
Begin: Pos(207, 12)
End: Pos(214, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java
Name: testReflectionFloatArray
Childs: [StatementAssertion<Begin: Pos(210, 9), End: Pos(210, 105)>,
StatementAssertion<Begin: Pos(212, 9), End: Pos(212, 47)>,
StatementAssertion<Begin: Pos(213, 9), End: Pos(213, 49)>,
]
---
public void testReflectionFloatArray_catena_0() {
    float[]array = new float[] {
        1.0f, 2.9876f,  - 3.00001f, 4.3f
    };
    String baseStr = this.toBaseString(array);
    assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", ToStringBuilder.reflectionToString(array));
    array = null;
    
}

---
---
public void testReflectionFloatArray_catena_1() {
    float[]array = new float[] {
        1.0f, 2.9876f,  - 3.00001f, 4.3f
    };
    String baseStr = this.toBaseString(array);
    array = null;
    assertReflectionArray("<null>", array);
    
}

---
---
public void testReflectionFloatArray_catena_2() {
    float[]array = new float[] {
        1.0f, 2.9876f,  - 3.00001f, 4.3f
    };
    String baseStr = this.toBaseString(array);
    array = null;
    this.validateNullToStringStyleRegistry();
    
}

---
@@@
Split test: org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionDoubleArrayArray
file: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java
# check: Selector contains assertion
Begin: Pos(282, 12)
End: Pos(289, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java
Name: testReflectionDoubleArrayArray
Childs: [StatementAssertion<Begin: Pos(285, 9), End: Pos(285, 108)>,
StatementAssertion<Begin: Pos(287, 9), End: Pos(287, 47)>,
StatementAssertion<Begin: Pos(288, 9), End: Pos(288, 49)>,
]
---
public void testReflectionDoubleArrayArray_catena_0() {
    double[][]array = new double[][] {
         {
            1.0, 2.29686
        }, null,  {
            Double.NaN
        }
    };
    String baseStr = this.toBaseString(array);
    assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", ToStringBuilder.reflectionToString(array));
    array = null;
    
}

---
---
public void testReflectionDoubleArrayArray_catena_1() {
    double[][]array = new double[][] {
         {
            1.0, 2.29686
        }, null,  {
            Double.NaN
        }
    };
    String baseStr = this.toBaseString(array);
    array = null;
    assertReflectionArray("<null>", array);
    
}

---
---
public void testReflectionDoubleArrayArray_catena_2() {
    double[][]array = new double[][] {
         {
            1.0, 2.29686
        }, null,  {
            Double.NaN
        }
    };
    String baseStr = this.toBaseString(array);
    array = null;
    this.validateNullToStringStyleRegistry();
    
}

---
@@@
Split test: org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionBooleanArray
file: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java
# check: Selector contains assertion
Begin: Pos(216, 12)
End: Pos(223, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java
Name: testReflectionBooleanArray
Childs: [StatementAssertion<Begin: Pos(219, 9), End: Pos(219, 98)>,
StatementAssertion<Begin: Pos(221, 9), End: Pos(221, 47)>,
StatementAssertion<Begin: Pos(222, 9), End: Pos(222, 49)>,
]
---
public void testReflectionBooleanArray_catena_0() {
    boolean[]array = new boolean[] {
        true, false, false
    };
    String baseStr = this.toBaseString(array);
    assertEquals(baseStr + "[{true,false,false}]", ToStringBuilder.reflectionToString(array));
    array = null;
    
}

---
---
public void testReflectionBooleanArray_catena_1() {
    boolean[]array = new boolean[] {
        true, false, false
    };
    String baseStr = this.toBaseString(array);
    array = null;
    assertReflectionArray("<null>", array);
    
}

---
---
public void testReflectionBooleanArray_catena_2() {
    boolean[]array = new boolean[] {
        true, false, false
    };
    String baseStr = this.toBaseString(array);
    array = null;
    this.validateNullToStringStyleRegistry();
    
}

---
@@@
Split test: org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionyteArray
file: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java
# check: Selector contains assertion
Begin: Pos(180, 12)
End: Pos(187, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java
Name: testReflectionyteArray
Childs: [StatementAssertion<Begin: Pos(183, 9), End: Pos(183, 90)>,
StatementAssertion<Begin: Pos(185, 9), End: Pos(185, 47)>,
StatementAssertion<Begin: Pos(186, 9), End: Pos(186, 49)>,
]
---
public void testReflectionyteArray_catena_0() {
    byte[]array = new byte[] {
        1, 2,  - 3, 4
    };
    String baseStr = this.toBaseString(array);
    assertEquals(baseStr + "[{1,2,-3,4}]", ToStringBuilder.reflectionToString(array));
    array = null;
    
}

---
---
public void testReflectionyteArray_catena_1() {
    byte[]array = new byte[] {
        1, 2,  - 3, 4
    };
    String baseStr = this.toBaseString(array);
    array = null;
    assertReflectionArray("<null>", array);
    
}

---
---
public void testReflectionyteArray_catena_2() {
    byte[]array = new byte[] {
        1, 2,  - 3, 4
    };
    String baseStr = this.toBaseString(array);
    array = null;
    this.validateNullToStringStyleRegistry();
    
}

---
@@@
Split test: org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionDoubleArray
file: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java
# check: Selector contains assertion
Begin: Pos(198, 12)
End: Pos(205, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java
Name: testReflectionDoubleArray
Childs: [StatementAssertion<Begin: Pos(201, 9), End: Pos(201, 105)>,
StatementAssertion<Begin: Pos(203, 9), End: Pos(203, 47)>,
StatementAssertion<Begin: Pos(204, 9), End: Pos(204, 49)>,
]
---
public void testReflectionDoubleArray_catena_0() {
    double[]array = new double[] {
        1.0, 2.9876,  - 3.00001, 4.3
    };
    String baseStr = this.toBaseString(array);
    assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", ToStringBuilder.reflectionToString(array));
    array = null;
    
}

---
---
public void testReflectionDoubleArray_catena_1() {
    double[]array = new double[] {
        1.0, 2.9876,  - 3.00001, 4.3
    };
    String baseStr = this.toBaseString(array);
    array = null;
    assertReflectionArray("<null>", array);
    
}

---
---
public void testReflectionDoubleArray_catena_2() {
    double[]array = new double[] {
        1.0, 2.9876,  - 3.00001, 4.3
    };
    String baseStr = this.toBaseString(array);
    array = null;
    this.validateNullToStringStyleRegistry();
    
}

---
@@@
Split test: org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionIntArrayArray
file: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java
# check: Selector contains assertion
Begin: Pos(246, 12)
End: Pos(253, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java
Name: testReflectionIntArrayArray
Childs: [StatementAssertion<Begin: Pos(249, 9), End: Pos(249, 98)>,
StatementAssertion<Begin: Pos(251, 9), End: Pos(251, 47)>,
StatementAssertion<Begin: Pos(252, 9), End: Pos(252, 49)>,
]
---
public void testReflectionIntArrayArray_catena_0() {
    int[][]array = new int[][] {
         {
            1, 2
        }, null,  {
            5
        }
    };
    String baseStr = this.toBaseString(array);
    assertEquals(baseStr + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array));
    array = null;
    
}

---
---
public void testReflectionIntArrayArray_catena_1() {
    int[][]array = new int[][] {
         {
            1, 2
        }, null,  {
            5
        }
    };
    String baseStr = this.toBaseString(array);
    array = null;
    assertReflectionArray("<null>", array);
    
}

---
---
public void testReflectionIntArrayArray_catena_2() {
    int[][]array = new int[][] {
         {
            1, 2
        }, null,  {
            5
        }
    };
    String baseStr = this.toBaseString(array);
    array = null;
    this.validateNullToStringStyleRegistry();
    
}

---
@@@
Split test: org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionLongArray
file: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java
# check: Selector contains assertion
Begin: Pos(153, 12)
End: Pos(160, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java
Name: testReflectionLongArray
Childs: [StatementAssertion<Begin: Pos(156, 9), End: Pos(156, 90)>,
StatementAssertion<Begin: Pos(158, 9), End: Pos(158, 47)>,
StatementAssertion<Begin: Pos(159, 9), End: Pos(159, 49)>,
]
---
public void testReflectionLongArray_catena_0() {
    long[]array = new long[] {
        1, 2,  - 3, 4
    };
    String baseStr = this.toBaseString(array);
    assertEquals(baseStr + "[{1,2,-3,4}]", ToStringBuilder.reflectionToString(array));
    array = null;
    
}

---
---
public void testReflectionLongArray_catena_1() {
    long[]array = new long[] {
        1, 2,  - 3, 4
    };
    String baseStr = this.toBaseString(array);
    array = null;
    assertReflectionArray("<null>", array);
    
}

---
---
public void testReflectionLongArray_catena_2() {
    long[]array = new long[] {
        1, 2,  - 3, 4
    };
    String baseStr = this.toBaseString(array);
    array = null;
    this.validateNullToStringStyleRegistry();
    
}

---
@@@
Split test: org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionhortArrayArray
file: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java
# check: Selector contains assertion
Begin: Pos(255, 12)
End: Pos(262, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java
Name: testReflectionhortArrayArray
Childs: [StatementAssertion<Begin: Pos(258, 9), End: Pos(258, 98)>,
StatementAssertion<Begin: Pos(260, 9), End: Pos(260, 47)>,
StatementAssertion<Begin: Pos(261, 9), End: Pos(261, 49)>,
]
---
public void testReflectionhortArrayArray_catena_0() {
    short[][]array = new short[][] {
         {
            1, 2
        }, null,  {
            5
        }
    };
    String baseStr = this.toBaseString(array);
    assertEquals(baseStr + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array));
    array = null;
    
}

---
---
public void testReflectionhortArrayArray_catena_1() {
    short[][]array = new short[][] {
         {
            1, 2
        }, null,  {
            5
        }
    };
    String baseStr = this.toBaseString(array);
    array = null;
    assertReflectionArray("<null>", array);
    
}

---
---
public void testReflectionhortArrayArray_catena_2() {
    short[][]array = new short[][] {
         {
            1, 2
        }, null,  {
            5
        }
    };
    String baseStr = this.toBaseString(array);
    array = null;
    this.validateNullToStringStyleRegistry();
    
}

---
@@@
Split test: org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionObjectArray
file: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java
# check: Selector contains assertion
Begin: Pos(144, 12)
End: Pos(151, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java
Name: testReflectionObjectArray
Childs: [StatementAssertion<Begin: Pos(147, 9), End: Pos(147, 96)>,
StatementAssertion<Begin: Pos(149, 9), End: Pos(149, 47)>,
StatementAssertion<Begin: Pos(150, 9), End: Pos(150, 49)>,
]
---
public void testReflectionObjectArray_catena_0() {
    Object[]array = new Object[] {
        null, base, new int[] {
            3, 6
        }
    };
    String baseStr = this.toBaseString(array);
    assertEquals(baseStr + "[{<null>,5,{3,6}}]", ToStringBuilder.reflectionToString(array));
    array = null;
    
}

---
---
public void testReflectionObjectArray_catena_1() {
    Object[]array = new Object[] {
        null, base, new int[] {
            3, 6
        }
    };
    String baseStr = this.toBaseString(array);
    array = null;
    assertReflectionArray("<null>", array);
    
}

---
---
public void testReflectionObjectArray_catena_2() {
    Object[]array = new Object[] {
        null, base, new int[] {
            3, 6
        }
    };
    String baseStr = this.toBaseString(array);
    array = null;
    this.validateNullToStringStyleRegistry();
    
}

---
@@@
Split test: org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionObjectCycle
file: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java
# check: Selector contains assertion
Begin: Pos(542, 12)
End: Pos(551, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java
Name: testReflectionObjectCycle
Childs: [StatementAssertion<Begin: Pos(547, 9), End: Pos(549, 26)>,
StatementAssertion<Begin: Pos(550, 9), End: Pos(550, 49)>,
]
---
public void testReflectionObjectCycle_catena_0()throws Exception {
    ReflectionTestCycleA a = new ReflectionTestCycleA();
    ReflectionTestCycleB b = new ReflectionTestCycleB();
    a.b = b;
    b.a = a;
    assertEquals(this.toBaseString(a) + "[b=" + this.toBaseString(b) + "[a=" + this.toBaseString(a) + "]]", a.toString());
    
}

---
---
public void testReflectionObjectCycle_catena_1()throws Exception {
    ReflectionTestCycleA a = new ReflectionTestCycleA();
    ReflectionTestCycleB b = new ReflectionTestCycleB();
    a.b = b;
    b.a = a;
    this.validateNullToStringStyleRegistry();
    
}

---
@@@
Split test: org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionBooleanArrayArray
file: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java
# check: Selector contains assertion
Begin: Pos(291, 12)
End: Pos(299, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java
Name: testReflectionBooleanArrayArray
Childs: [StatementAssertion<Begin: Pos(294, 9), End: Pos(294, 109)>,
StatementAssertion<Begin: Pos(295, 9), End: Pos(295, 109)>,
StatementAssertion<Begin: Pos(297, 9), End: Pos(297, 47)>,
StatementAssertion<Begin: Pos(298, 9), End: Pos(298, 49)>,
]
---
public void testReflectionBooleanArrayArray_catena_0() {
    boolean[][]array = new boolean[][] {
         {
            true, false
        }, null,  {
            false
        }
    };
    String baseStr = this.toBaseString(array);
    assertEquals(baseStr + "[{{true,false},<null>,{false}}]", ToStringBuilder.reflectionToString(array));
    array = null;
    
}

---
---
public void testReflectionBooleanArrayArray_catena_1() {
    boolean[][]array = new boolean[][] {
         {
            true, false
        }, null,  {
            false
        }
    };
    String baseStr = this.toBaseString(array);
    assertEquals(baseStr + "[{{true,false},<null>,{false}}]", ToStringBuilder.reflectionToString(array));
    array = null;
    
}

---
---
public void testReflectionBooleanArrayArray_catena_2() {
    boolean[][]array = new boolean[][] {
         {
            true, false
        }, null,  {
            false
        }
    };
    String baseStr = this.toBaseString(array);
    array = null;
    assertReflectionArray("<null>", array);
    
}

---
---
public void testReflectionBooleanArrayArray_catena_3() {
    boolean[][]array = new boolean[][] {
         {
            true, false
        }, null,  {
            false
        }
    };
    String baseStr = this.toBaseString(array);
    array = null;
    this.validateNullToStringStyleRegistry();
    
}

---
@@@
Split test: org.apache.commons.lang3.builder.ToStringBuilderTest::testSimpleReflectionObjectCycle
file: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java
# check: Selector contains assertion
Begin: Pos(506, 12)
End: Pos(511, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java
Name: testSimpleReflectionObjectCycle
Childs: [StatementAssertion<Begin: Pos(509, 9), End: Pos(509, 109)>,
StatementAssertion<Begin: Pos(510, 9), End: Pos(510, 49)>,
]
---
public void testSimpleReflectionObjectCycle_catena_0()throws Exception {
    SimpleReflectionTestFixture simple = new SimpleReflectionTestFixture();
    simple.o = simple;
    assertEquals(this.toBaseString(simple) + "[o=" + this.toBaseString(simple) + "]", simple.toString());
    
}

---
---
public void testSimpleReflectionObjectCycle_catena_1()throws Exception {
    SimpleReflectionTestFixture simple = new SimpleReflectionTestFixture();
    simple.o = simple;
    this.validateNullToStringStyleRegistry();
    
}

---
@@@
Split test: org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionByteArrayArray
file: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java
# check: Selector contains assertion
Begin: Pos(264, 12)
End: Pos(271, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java
Name: testReflectionByteArrayArray
Childs: [StatementAssertion<Begin: Pos(267, 9), End: Pos(267, 98)>,
StatementAssertion<Begin: Pos(269, 9), End: Pos(269, 47)>,
StatementAssertion<Begin: Pos(270, 9), End: Pos(270, 49)>,
]
---
public void testReflectionByteArrayArray_catena_0() {
    byte[][]array = new byte[][] {
         {
            1, 2
        }, null,  {
            5
        }
    };
    String baseStr = this.toBaseString(array);
    assertEquals(baseStr + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array));
    array = null;
    
}

---
---
public void testReflectionByteArrayArray_catena_1() {
    byte[][]array = new byte[][] {
         {
            1, 2
        }, null,  {
            5
        }
    };
    String baseStr = this.toBaseString(array);
    array = null;
    assertReflectionArray("<null>", array);
    
}

---
---
public void testReflectionByteArrayArray_catena_2() {
    byte[][]array = new byte[][] {
         {
            1, 2
        }, null,  {
            5
        }
    };
    String baseStr = this.toBaseString(array);
    array = null;
    this.validateNullToStringStyleRegistry();
    
}

---
@@@
Split test: org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionArrayCycleLevel2
file: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java
# check: Selector contains assertion
Begin: Pos(388, 12)
End: Pos(400, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java
Name: testReflectionArrayCycleLevel2
Childs: [StatementAssertion<Begin: Pos(393, 9), End: Pos(395, 57)>,
StatementAssertion<Begin: Pos(396, 9), End: Pos(398, 63)>,
StatementAssertion<Begin: Pos(399, 9), End: Pos(399, 49)>,
]
---
public void testReflectionArrayCycleLevel2_catena_0()throws Exception {
    Object[]objects = new Object[1];
    Object[]objectsLevel2 = new Object[1];
    objects[0] = objectsLevel2;
    objectsLevel2[0] = objects;
    assertEquals(this.toBaseString(objects) + "[{{" + this.toBaseString(objects) + "}}]", ToStringBuilder.reflectionToString(objects));
    
}

---
---
public void testReflectionArrayCycleLevel2_catena_1()throws Exception {
    Object[]objects = new Object[1];
    Object[]objectsLevel2 = new Object[1];
    objects[0] = objectsLevel2;
    objectsLevel2[0] = objects;
    assertEquals(this.toBaseString(objectsLevel2) + "[{{" + this.toBaseString(objectsLevel2) + "}}]", ToStringBuilder.reflectionToString(objectsLevel2));
    
}

---
---
public void testReflectionArrayCycleLevel2_catena_2()throws Exception {
    Object[]objects = new Object[1];
    Object[]objectsLevel2 = new Object[1];
    objects[0] = objectsLevel2;
    objectsLevel2[0] = objects;
    this.validateNullToStringStyleRegistry();
    
}

---
@@@
Split test: org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionArrayAndObjectCycle
file: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java
# check: Selector contains assertion
Begin: Pos(559, 12)
End: Pos(579, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java
Name: testReflectionArrayAndObjectCycle
Childs: [StatementAssertion<Begin: Pos(563, 9), End: Pos(571, 57)>,
StatementAssertion<Begin: Pos(572, 9), End: Pos(577, 56)>,
StatementAssertion<Begin: Pos(578, 9), End: Pos(578, 49)>,
]
---
public void testReflectionArrayAndObjectCycle_catena_0()throws Exception {
    Object[]objects = new Object[1];
    SimpleReflectionTestFixture simple = new SimpleReflectionTestFixture(objects);
    objects[0] = simple;
    assertEquals(this.toBaseString(objects) + "[{" + this.toBaseString(simple) + "[o=" + this.toBaseString(objects) + "]" + "}]", ToStringBuilder.reflectionToString(objects));
    
}

---
---
public void testReflectionArrayAndObjectCycle_catena_1()throws Exception {
    Object[]objects = new Object[1];
    SimpleReflectionTestFixture simple = new SimpleReflectionTestFixture(objects);
    objects[0] = simple;
    assertEquals(this.toBaseString(simple) + "[o={" + this.toBaseString(simple) + "}]", ToStringBuilder.reflectionToString(simple));
    
}

---
---
public void testReflectionArrayAndObjectCycle_catena_2()throws Exception {
    Object[]objects = new Object[1];
    SimpleReflectionTestFixture simple = new SimpleReflectionTestFixture(objects);
    objects[0] = simple;
    this.validateNullToStringStyleRegistry();
    
}

---
@@@
Split test: org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionCharArrayArray
file: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java
# check: Selector contains assertion
Begin: Pos(273, 12)
End: Pos(280, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java
Name: testReflectionCharArrayArray
Childs: [StatementAssertion<Begin: Pos(276, 9), End: Pos(276, 98)>,
StatementAssertion<Begin: Pos(278, 9), End: Pos(278, 47)>,
StatementAssertion<Begin: Pos(279, 9), End: Pos(279, 49)>,
]
---
public void testReflectionCharArrayArray_catena_0() {
    char[][]array = new char[][] {
         {
            'A', 'B'
        }, null,  {
            'p'
        }
    };
    String baseStr = this.toBaseString(array);
    assertEquals(baseStr + "[{{A,B},<null>,{p}}]", ToStringBuilder.reflectionToString(array));
    array = null;
    
}

---
---
public void testReflectionCharArrayArray_catena_1() {
    char[][]array = new char[][] {
         {
            'A', 'B'
        }, null,  {
            'p'
        }
    };
    String baseStr = this.toBaseString(array);
    array = null;
    assertReflectionArray("<null>", array);
    
}

---
---
public void testReflectionCharArrayArray_catena_2() {
    char[][]array = new char[][] {
         {
            'A', 'B'
        }, null,  {
            'p'
        }
    };
    String baseStr = this.toBaseString(array);
    array = null;
    this.validateNullToStringStyleRegistry();
    
}

---
@@@
Split test: org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionShortArray
file: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java
# check: Selector contains assertion
Begin: Pos(171, 12)
End: Pos(178, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java
Name: testReflectionShortArray
Childs: [StatementAssertion<Begin: Pos(174, 9), End: Pos(174, 90)>,
StatementAssertion<Begin: Pos(176, 9), End: Pos(176, 47)>,
StatementAssertion<Begin: Pos(177, 9), End: Pos(177, 49)>,
]
---
public void testReflectionShortArray_catena_0() {
    short[]array = new short[] {
        1, 2,  - 3, 4
    };
    String baseStr = this.toBaseString(array);
    assertEquals(baseStr + "[{1,2,-3,4}]", ToStringBuilder.reflectionToString(array));
    array = null;
    
}

---
---
public void testReflectionShortArray_catena_1() {
    short[]array = new short[] {
        1, 2,  - 3, 4
    };
    String baseStr = this.toBaseString(array);
    array = null;
    assertReflectionArray("<null>", array);
    
}

---
---
public void testReflectionShortArray_catena_2() {
    short[]array = new short[] {
        1, 2,  - 3, 4
    };
    String baseStr = this.toBaseString(array);
    array = null;
    this.validateNullToStringStyleRegistry();
    
}

---
@@@
Split test: org.apache.commons.lang3.builder.ToStringBuilderTest::testSelfInstanceVarReflectionObjectCycle
file: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java
# check: Selector contains assertion
Begin: Pos(518, 12)
End: Pos(522, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java
Name: testSelfInstanceVarReflectionObjectCycle
Childs: [StatementAssertion<Begin: Pos(520, 9), End: Pos(520, 112)>,
StatementAssertion<Begin: Pos(521, 9), End: Pos(521, 49)>,
]
---
public void testSelfInstanceVarReflectionObjectCycle_catena_0()throws Exception {
    SelfInstanceVarReflectionTestFixture test = new SelfInstanceVarReflectionTestFixture();
    assertEquals(this.toBaseString(test) + "[typeIsSelf=" + this.toBaseString(test) + "]", test.toString());
    
}

---
---
public void testSelfInstanceVarReflectionObjectCycle_catena_1()throws Exception {
    SelfInstanceVarReflectionTestFixture test = new SelfInstanceVarReflectionTestFixture();
    this.validateNullToStringStyleRegistry();
    
}

---
@@@
Split test: org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionIntArray
file: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java
# check: Selector contains assertion
Begin: Pos(162, 12)
End: Pos(169, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java
Name: testReflectionIntArray
Childs: [StatementAssertion<Begin: Pos(165, 9), End: Pos(165, 90)>,
StatementAssertion<Begin: Pos(167, 9), End: Pos(167, 47)>,
StatementAssertion<Begin: Pos(168, 9), End: Pos(168, 49)>,
]
---
public void testReflectionIntArray_catena_0() {
    int[]array = new int[] {
        1, 2,  - 3, 4
    };
    String baseStr = this.toBaseString(array);
    assertEquals(baseStr + "[{1,2,-3,4}]", ToStringBuilder.reflectionToString(array));
    array = null;
    
}

---
---
public void testReflectionIntArray_catena_1() {
    int[]array = new int[] {
        1, 2,  - 3, 4
    };
    String baseStr = this.toBaseString(array);
    array = null;
    assertReflectionArray("<null>", array);
    
}

---
---
public void testReflectionIntArray_catena_2() {
    int[]array = new int[] {
        1, 2,  - 3, 4
    };
    String baseStr = this.toBaseString(array);
    array = null;
    this.validateNullToStringStyleRegistry();
    
}

---
@@@
Split test: org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionCharArray
file: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java
# check: Selector contains assertion
Begin: Pos(189, 12)
End: Pos(196, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java
Name: testReflectionCharArray
Childs: [StatementAssertion<Begin: Pos(192, 9), End: Pos(192, 89)>,
StatementAssertion<Begin: Pos(194, 9), End: Pos(194, 47)>,
StatementAssertion<Begin: Pos(195, 9), End: Pos(195, 49)>,
]
---
public void testReflectionCharArray_catena_0() {
    char[]array = new char[] {
        'A', '2', '_', 'D'
    };
    String baseStr = this.toBaseString(array);
    assertEquals(baseStr + "[{A,2,_,D}]", ToStringBuilder.reflectionToString(array));
    array = null;
    
}

---
---
public void testReflectionCharArray_catena_1() {
    char[]array = new char[] {
        'A', '2', '_', 'D'
    };
    String baseStr = this.toBaseString(array);
    array = null;
    assertReflectionArray("<null>", array);
    
}

---
---
public void testReflectionCharArray_catena_2() {
    char[]array = new char[] {
        'A', '2', '_', 'D'
    };
    String baseStr = this.toBaseString(array);
    array = null;
    this.validateNullToStringStyleRegistry();
    
}

---
@@@
Split test: org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionFloatArrayArray
file: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java
# check: Selector contains assertion
Begin: Pos(227, 12)
End: Pos(234, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java
Name: testReflectionFloatArrayArray
Childs: [StatementAssertion<Begin: Pos(230, 9), End: Pos(230, 108)>,
StatementAssertion<Begin: Pos(232, 9), End: Pos(232, 47)>,
StatementAssertion<Begin: Pos(233, 9), End: Pos(233, 49)>,
]
---
public void testReflectionFloatArrayArray_catena_0() {
    float[][]array = new float[][] {
         {
            1.0f, 2.29686f
        }, null,  {
            Float.NaN
        }
    };
    String baseStr = this.toBaseString(array);
    assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", ToStringBuilder.reflectionToString(array));
    array = null;
    
}

---
---
public void testReflectionFloatArrayArray_catena_1() {
    float[][]array = new float[][] {
         {
            1.0f, 2.29686f
        }, null,  {
            Float.NaN
        }
    };
    String baseStr = this.toBaseString(array);
    array = null;
    assertReflectionArray("<null>", array);
    
}

---
---
public void testReflectionFloatArrayArray_catena_2() {
    float[][]array = new float[][] {
         {
            1.0f, 2.29686f
        }, null,  {
            Float.NaN
        }
    };
    String baseStr = this.toBaseString(array);
    array = null;
    this.validateNullToStringStyleRegistry();
    
}

---
--------------------
Run: Lang_65
@@@
Split test: org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59
file: /root/workbench/exportInfo/d4j_buggy/Lang_65/src/test//org/apache/commons/lang/time/DateUtilsTest.java
Begin: Pos(896, 12)
End: Pos(964, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_65/src/test//org/apache/commons/lang/time/DateUtilsTest.java
Name: testTruncateLang59
Childs: [StatementAssertion<Begin: Pos(911, 9), End: Pos(911, 99)>,
StatementAssertion<Begin: Pos(912, 9), End: Pos(912, 102)>,
StatementAssertion<Begin: Pos(913, 9), End: Pos(913, 105)>,
StatementAssertion<Begin: Pos(914, 9), End: Pos(914, 108)>,
StatementAssertion<Begin: Pos(915, 9), End: Pos(915, 111)>,
StatementAssertion<Begin: Pos(921, 9), End: Pos(921, 104)>,
StatementAssertion<Begin: Pos(924, 9), End: Pos(925, 102)>,
StatementAssertion<Begin: Pos(927, 9), End: Pos(928, 97)>,
StatementAssertion<Begin: Pos(930, 9), End: Pos(931, 97)>,
StatementAssertion<Begin: Pos(933, 9), End: Pos(934, 102)>,
StatementAssertion<Begin: Pos(936, 9), End: Pos(937, 95)>,
StatementAssertion<Begin: Pos(939, 9), End: Pos(940, 95)>,
StatementAssertion<Begin: Pos(944, 9), End: Pos(945, 99)>,
StatementAssertion<Begin: Pos(947, 9), End: Pos(948, 94)>,
StatementAssertion<Begin: Pos(950, 9), End: Pos(951, 94)>,
StatementAssertion<Begin: Pos(953, 9), End: Pos(954, 99)>,
StatementAssertion<Begin: Pos(956, 9), End: Pos(957, 92)>,
StatementAssertion<Begin: Pos(959, 9), End: Pos(960, 92)>,
]
---
public void testTruncateLang59_catena_0()throws Exception {
    TimeZone MST_MDT = TimeZone.getTimeZone("MST7MDT");
    TimeZone.setDefault(MST_MDT);
    DateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS z");
    format.setTimeZone(MST_MDT);
    Date oct31_01MDT = new Date(1099206000000L);
    Date oct31MDT = new Date(oct31_01MDT.getTime() - 3600000L);
    Date oct31_01_02MDT = new Date(oct31_01MDT.getTime() + 120000L);
    Date oct31_01_02_03MDT = new Date(oct31_01_02MDT.getTime() + 3000L);
    Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);
    assertEquals("Check 00:00:00.000", "2004-10-31 00:00:00.000 MDT", format.format(oct31MDT));
    Calendar gval = Calendar.getInstance();
    gval.setTime(new Date(oct31_01MDT.getTime()));
    gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE));
    TimeZone.setDefault(defaultZone);
    
}

---
---
public void testTruncateLang59_catena_1()throws Exception {
    TimeZone MST_MDT = TimeZone.getTimeZone("MST7MDT");
    TimeZone.setDefault(MST_MDT);
    DateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS z");
    format.setTimeZone(MST_MDT);
    Date oct31_01MDT = new Date(1099206000000L);
    Date oct31MDT = new Date(oct31_01MDT.getTime() - 3600000L);
    Date oct31_01_02MDT = new Date(oct31_01MDT.getTime() + 120000L);
    Date oct31_01_02_03MDT = new Date(oct31_01_02MDT.getTime() + 3000L);
    Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);
    assertEquals("Check 01:00:00.000", "2004-10-31 01:00:00.000 MDT", format.format(oct31_01MDT));
    Calendar gval = Calendar.getInstance();
    gval.setTime(new Date(oct31_01MDT.getTime()));
    gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE));
    TimeZone.setDefault(defaultZone);
    
}

---
---
public void testTruncateLang59_catena_2()throws Exception {
    TimeZone MST_MDT = TimeZone.getTimeZone("MST7MDT");
    TimeZone.setDefault(MST_MDT);
    DateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS z");
    format.setTimeZone(MST_MDT);
    Date oct31_01MDT = new Date(1099206000000L);
    Date oct31MDT = new Date(oct31_01MDT.getTime() - 3600000L);
    Date oct31_01_02MDT = new Date(oct31_01MDT.getTime() + 120000L);
    Date oct31_01_02_03MDT = new Date(oct31_01_02MDT.getTime() + 3000L);
    Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);
    assertEquals("Check 01:02:00.000", "2004-10-31 01:02:00.000 MDT", format.format(oct31_01_02MDT));
    Calendar gval = Calendar.getInstance();
    gval.setTime(new Date(oct31_01MDT.getTime()));
    gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE));
    TimeZone.setDefault(defaultZone);
    
}

---
---
public void testTruncateLang59_catena_3()throws Exception {
    TimeZone MST_MDT = TimeZone.getTimeZone("MST7MDT");
    TimeZone.setDefault(MST_MDT);
    DateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS z");
    format.setTimeZone(MST_MDT);
    Date oct31_01MDT = new Date(1099206000000L);
    Date oct31MDT = new Date(oct31_01MDT.getTime() - 3600000L);
    Date oct31_01_02MDT = new Date(oct31_01MDT.getTime() + 120000L);
    Date oct31_01_02_03MDT = new Date(oct31_01_02MDT.getTime() + 3000L);
    Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);
    assertEquals("Check 01:02:03.000", "2004-10-31 01:02:03.000 MDT", format.format(oct31_01_02_03MDT));
    Calendar gval = Calendar.getInstance();
    gval.setTime(new Date(oct31_01MDT.getTime()));
    gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE));
    TimeZone.setDefault(defaultZone);
    
}

---
---
public void testTruncateLang59_catena_4()throws Exception {
    TimeZone MST_MDT = TimeZone.getTimeZone("MST7MDT");
    TimeZone.setDefault(MST_MDT);
    DateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS z");
    format.setTimeZone(MST_MDT);
    Date oct31_01MDT = new Date(1099206000000L);
    Date oct31MDT = new Date(oct31_01MDT.getTime() - 3600000L);
    Date oct31_01_02MDT = new Date(oct31_01MDT.getTime() + 120000L);
    Date oct31_01_02_03MDT = new Date(oct31_01_02MDT.getTime() + 3000L);
    Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);
    assertEquals("Check 01:02:03.004", "2004-10-31 01:02:03.004 MDT", format.format(oct31_01_02_03_04MDT));
    Calendar gval = Calendar.getInstance();
    gval.setTime(new Date(oct31_01MDT.getTime()));
    gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE));
    TimeZone.setDefault(defaultZone);
    
}

---
---
public void testTruncateLang59_catena_5()throws Exception {
    TimeZone MST_MDT = TimeZone.getTimeZone("MST7MDT");
    TimeZone.setDefault(MST_MDT);
    DateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS z");
    format.setTimeZone(MST_MDT);
    Date oct31_01MDT = new Date(1099206000000L);
    Date oct31MDT = new Date(oct31_01MDT.getTime() - 3600000L);
    Date oct31_01_02MDT = new Date(oct31_01MDT.getTime() + 120000L);
    Date oct31_01_02_03MDT = new Date(oct31_01_02MDT.getTime() + 3000L);
    Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);
    Calendar gval = Calendar.getInstance();
    gval.setTime(new Date(oct31_01MDT.getTime()));
    gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE));
    assertEquals("Demonstrate Problem", gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L);
    TimeZone.setDefault(defaultZone);
    
}

---
---
public void testTruncateLang59_catena_6()throws Exception {
    TimeZone MST_MDT = TimeZone.getTimeZone("MST7MDT");
    TimeZone.setDefault(MST_MDT);
    DateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS z");
    format.setTimeZone(MST_MDT);
    Date oct31_01MDT = new Date(1099206000000L);
    Date oct31MDT = new Date(oct31_01MDT.getTime() - 3600000L);
    Date oct31_01_02MDT = new Date(oct31_01MDT.getTime() + 120000L);
    Date oct31_01_02_03MDT = new Date(oct31_01_02MDT.getTime() + 3000L);
    Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);
    Calendar gval = Calendar.getInstance();
    gval.setTime(new Date(oct31_01MDT.getTime()));
    gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE));
    assertEquals("Truncate Calendar.MILLISECOND", oct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MILLISECOND));
    TimeZone.setDefault(defaultZone);
    
}

---
---
public void testTruncateLang59_catena_7()throws Exception {
    TimeZone MST_MDT = TimeZone.getTimeZone("MST7MDT");
    TimeZone.setDefault(MST_MDT);
    DateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS z");
    format.setTimeZone(MST_MDT);
    Date oct31_01MDT = new Date(1099206000000L);
    Date oct31MDT = new Date(oct31_01MDT.getTime() - 3600000L);
    Date oct31_01_02MDT = new Date(oct31_01MDT.getTime() + 120000L);
    Date oct31_01_02_03MDT = new Date(oct31_01_02MDT.getTime() + 3000L);
    Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);
    Calendar gval = Calendar.getInstance();
    gval.setTime(new Date(oct31_01MDT.getTime()));
    gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE));
    assertEquals("Truncate Calendar.SECOND", oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND));
    TimeZone.setDefault(defaultZone);
    
}

---
---
public void testTruncateLang59_catena_8()throws Exception {
    TimeZone MST_MDT = TimeZone.getTimeZone("MST7MDT");
    TimeZone.setDefault(MST_MDT);
    DateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS z");
    format.setTimeZone(MST_MDT);
    Date oct31_01MDT = new Date(1099206000000L);
    Date oct31MDT = new Date(oct31_01MDT.getTime() - 3600000L);
    Date oct31_01_02MDT = new Date(oct31_01MDT.getTime() + 120000L);
    Date oct31_01_02_03MDT = new Date(oct31_01_02MDT.getTime() + 3000L);
    Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);
    Calendar gval = Calendar.getInstance();
    gval.setTime(new Date(oct31_01MDT.getTime()));
    gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE));
    assertEquals("Truncate Calendar.MINUTE", oct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MINUTE));
    TimeZone.setDefault(defaultZone);
    
}

---
---
public void testTruncateLang59_catena_9()throws Exception {
    TimeZone MST_MDT = TimeZone.getTimeZone("MST7MDT");
    TimeZone.setDefault(MST_MDT);
    DateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS z");
    format.setTimeZone(MST_MDT);
    Date oct31_01MDT = new Date(1099206000000L);
    Date oct31MDT = new Date(oct31_01MDT.getTime() - 3600000L);
    Date oct31_01_02MDT = new Date(oct31_01MDT.getTime() + 120000L);
    Date oct31_01_02_03MDT = new Date(oct31_01_02MDT.getTime() + 3000L);
    Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);
    Calendar gval = Calendar.getInstance();
    gval.setTime(new Date(oct31_01MDT.getTime()));
    gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE));
    assertEquals("Truncate Calendar.HOUR_OF_DAY", oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));
    TimeZone.setDefault(defaultZone);
    
}

---
---
public void testTruncateLang59_catena_10()throws Exception {
    TimeZone MST_MDT = TimeZone.getTimeZone("MST7MDT");
    TimeZone.setDefault(MST_MDT);
    DateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS z");
    format.setTimeZone(MST_MDT);
    Date oct31_01MDT = new Date(1099206000000L);
    Date oct31MDT = new Date(oct31_01MDT.getTime() - 3600000L);
    Date oct31_01_02MDT = new Date(oct31_01MDT.getTime() + 120000L);
    Date oct31_01_02_03MDT = new Date(oct31_01_02MDT.getTime() + 3000L);
    Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);
    Calendar gval = Calendar.getInstance();
    gval.setTime(new Date(oct31_01MDT.getTime()));
    gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE));
    assertEquals("Truncate Calendar.HOUR", oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR));
    TimeZone.setDefault(defaultZone);
    
}

---
---
public void testTruncateLang59_catena_11()throws Exception {
    TimeZone MST_MDT = TimeZone.getTimeZone("MST7MDT");
    TimeZone.setDefault(MST_MDT);
    DateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS z");
    format.setTimeZone(MST_MDT);
    Date oct31_01MDT = new Date(1099206000000L);
    Date oct31MDT = new Date(oct31_01MDT.getTime() - 3600000L);
    Date oct31_01_02MDT = new Date(oct31_01MDT.getTime() + 120000L);
    Date oct31_01_02_03MDT = new Date(oct31_01_02MDT.getTime() + 3000L);
    Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);
    Calendar gval = Calendar.getInstance();
    gval.setTime(new Date(oct31_01MDT.getTime()));
    gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE));
    assertEquals("Truncate Calendar.DATE", oct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.DATE));
    TimeZone.setDefault(defaultZone);
    
}

---
---
public void testTruncateLang59_catena_12()throws Exception {
    TimeZone MST_MDT = TimeZone.getTimeZone("MST7MDT");
    TimeZone.setDefault(MST_MDT);
    DateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS z");
    format.setTimeZone(MST_MDT);
    Date oct31_01MDT = new Date(1099206000000L);
    Date oct31MDT = new Date(oct31_01MDT.getTime() - 3600000L);
    Date oct31_01_02MDT = new Date(oct31_01MDT.getTime() + 120000L);
    Date oct31_01_02_03MDT = new Date(oct31_01_02MDT.getTime() + 3000L);
    Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);
    Calendar gval = Calendar.getInstance();
    gval.setTime(new Date(oct31_01MDT.getTime()));
    gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE));
    assertEquals("Round Calendar.MILLISECOND", oct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MILLISECOND));
    TimeZone.setDefault(defaultZone);
    
}

---
---
public void testTruncateLang59_catena_13()throws Exception {
    TimeZone MST_MDT = TimeZone.getTimeZone("MST7MDT");
    TimeZone.setDefault(MST_MDT);
    DateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS z");
    format.setTimeZone(MST_MDT);
    Date oct31_01MDT = new Date(1099206000000L);
    Date oct31MDT = new Date(oct31_01MDT.getTime() - 3600000L);
    Date oct31_01_02MDT = new Date(oct31_01MDT.getTime() + 120000L);
    Date oct31_01_02_03MDT = new Date(oct31_01_02MDT.getTime() + 3000L);
    Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);
    Calendar gval = Calendar.getInstance();
    gval.setTime(new Date(oct31_01MDT.getTime()));
    gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE));
    assertEquals("Round Calendar.SECOND", oct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.SECOND));
    TimeZone.setDefault(defaultZone);
    
}

---
---
public void testTruncateLang59_catena_14()throws Exception {
    TimeZone MST_MDT = TimeZone.getTimeZone("MST7MDT");
    TimeZone.setDefault(MST_MDT);
    DateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS z");
    format.setTimeZone(MST_MDT);
    Date oct31_01MDT = new Date(1099206000000L);
    Date oct31MDT = new Date(oct31_01MDT.getTime() - 3600000L);
    Date oct31_01_02MDT = new Date(oct31_01MDT.getTime() + 120000L);
    Date oct31_01_02_03MDT = new Date(oct31_01_02MDT.getTime() + 3000L);
    Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);
    Calendar gval = Calendar.getInstance();
    gval.setTime(new Date(oct31_01MDT.getTime()));
    gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE));
    assertEquals("Round Calendar.MINUTE", oct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MINUTE));
    TimeZone.setDefault(defaultZone);
    
}

---
---
public void testTruncateLang59_catena_15()throws Exception {
    TimeZone MST_MDT = TimeZone.getTimeZone("MST7MDT");
    TimeZone.setDefault(MST_MDT);
    DateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS z");
    format.setTimeZone(MST_MDT);
    Date oct31_01MDT = new Date(1099206000000L);
    Date oct31MDT = new Date(oct31_01MDT.getTime() - 3600000L);
    Date oct31_01_02MDT = new Date(oct31_01MDT.getTime() + 120000L);
    Date oct31_01_02_03MDT = new Date(oct31_01_02MDT.getTime() + 3000L);
    Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);
    Calendar gval = Calendar.getInstance();
    gval.setTime(new Date(oct31_01MDT.getTime()));
    gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE));
    assertEquals("Round Calendar.HOUR_OF_DAY", oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));
    TimeZone.setDefault(defaultZone);
    
}

---
---
public void testTruncateLang59_catena_16()throws Exception {
    TimeZone MST_MDT = TimeZone.getTimeZone("MST7MDT");
    TimeZone.setDefault(MST_MDT);
    DateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS z");
    format.setTimeZone(MST_MDT);
    Date oct31_01MDT = new Date(1099206000000L);
    Date oct31MDT = new Date(oct31_01MDT.getTime() - 3600000L);
    Date oct31_01_02MDT = new Date(oct31_01MDT.getTime() + 120000L);
    Date oct31_01_02_03MDT = new Date(oct31_01_02MDT.getTime() + 3000L);
    Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);
    Calendar gval = Calendar.getInstance();
    gval.setTime(new Date(oct31_01MDT.getTime()));
    gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE));
    assertEquals("Round Calendar.HOUR", oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR));
    TimeZone.setDefault(defaultZone);
    
}

---
---
public void testTruncateLang59_catena_17()throws Exception {
    TimeZone MST_MDT = TimeZone.getTimeZone("MST7MDT");
    TimeZone.setDefault(MST_MDT);
    DateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS z");
    format.setTimeZone(MST_MDT);
    Date oct31_01MDT = new Date(1099206000000L);
    Date oct31MDT = new Date(oct31_01MDT.getTime() - 3600000L);
    Date oct31_01_02MDT = new Date(oct31_01MDT.getTime() + 120000L);
    Date oct31_01_02_03MDT = new Date(oct31_01_02MDT.getTime() + 3000L);
    Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);
    Calendar gval = Calendar.getInstance();
    gval.setTime(new Date(oct31_01MDT.getTime()));
    gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE));
    assertEquals("Round Calendar.DATE", oct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE));
    TimeZone.setDefault(defaultZone);
    
}

---
--------------------
Run: Lang_46
@@@
Split test: org.apache.commons.lang.StringEscapeUtilsTest::testEscapeJavaWithSlash
file: /root/workbench/exportInfo/d4j_buggy/Lang_46/src/test//org/apache/commons/lang/StringEscapeUtilsTest.java
Begin: Pos(103, 12)
End: Pos(114, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_46/src/test//org/apache/commons/lang/StringEscapeUtilsTest.java
Name: testEscapeJavaWithSlash
Childs: [StatementAssertion<Begin: Pos(113, 9), End: Pos(113, 39)>,
]
--------------------
Run: Lang_18
@@@
Split test: org.apache.commons.lang3.time.FastDateFormatTest::testFormat
file: /root/workbench/exportInfo/d4j_buggy/Lang_18/src/test/java//org/apache/commons/lang3/time/FastDateFormatTest.java
Begin: Pos(173, 12)
End: Pos(226, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_18/src/test/java//org/apache/commons/lang3/time/FastDateFormatTest.java
Name: testFormat
Childs: [StatementAssertion<Begin: Pos(189, 13), End: Pos(189, 63)>,
StatementAssertion<Begin: Pos(190, 13), End: Pos(190, 67)>,
StatementAssertion<Begin: Pos(191, 13), End: Pos(191, 66)>,
StatementAssertion<Begin: Pos(192, 13), End: Pos(192, 69)>,
StatementAssertion<Begin: Pos(193, 13), End: Pos(193, 67)>,
StatementAssertion<Begin: Pos(194, 13), End: Pos(194, 66)>,
StatementAssertion<Begin: Pos(195, 13), End: Pos(195, 69)>,
StatementAssertion<Begin: Pos(198, 13), End: Pos(198, 53)>,
StatementAssertion<Begin: Pos(199, 13), End: Pos(199, 52)>,
StatementAssertion<Begin: Pos(200, 13), End: Pos(200, 55)>,
StatementAssertion<Begin: Pos(202, 13), End: Pos(202, 53)>,
StatementAssertion<Begin: Pos(203, 13), End: Pos(203, 52)>,
StatementAssertion<Begin: Pos(204, 13), End: Pos(204, 55)>,
StatementAssertion<Begin: Pos(207, 13), End: Pos(207, 54)>,
StatementAssertion<Begin: Pos(208, 13), End: Pos(208, 53)>,
StatementAssertion<Begin: Pos(209, 13), End: Pos(209, 56)>,
StatementAssertion<Begin: Pos(211, 13), End: Pos(211, 54)>,
StatementAssertion<Begin: Pos(212, 13), End: Pos(212, 53)>,
StatementAssertion<Begin: Pos(213, 13), End: Pos(213, 56)>,
StatementAssertion<Begin: Pos(220, 13), End: Pos(220, 112)>,
StatementAssertion<Begin: Pos(221, 13), End: Pos(221, 112)>,
]
---
public void testFormat_catena_0() {
    Locale realDefaultLocale = Locale.getDefault();
    TimeZone realDefaultZone = TimeZone.getDefault();
    try {
        Locale.setDefault(Locale.US);
        TimeZone.setDefault(TimeZone.getTimeZone("America/New_York"));
        GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);
        GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);
        Date date1 = cal1.getTime();
        Date date2 = cal2.getTime();
        long millis1 = date1.getTime();
        long millis2 = date2.getTime();
        FastDateFormat fdf = FastDateFormat.getInstance("yyyy-MM-dd'T'HH:mm:ss");
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
        assertEquals(sdf.format(date1), fdf.format(date1));
        fdf = FastDateFormat.getInstance("Z");
        fdf = FastDateFormat.getInstance("ZZ");
        String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" + " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z";
        fdf = FastDateFormat.getInstance(pattern);
        sdf = new SimpleDateFormat(pattern);
        
    }
    finally {
        Locale.setDefault(realDefaultLocale);
        TimeZone.setDefault(realDefaultZone);
        
    }
}

---
---
public void testFormat_catena_1() {
    Locale realDefaultLocale = Locale.getDefault();
    TimeZone realDefaultZone = TimeZone.getDefault();
    try {
        Locale.setDefault(Locale.US);
        TimeZone.setDefault(TimeZone.getTimeZone("America/New_York"));
        GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);
        GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);
        Date date1 = cal1.getTime();
        Date date2 = cal2.getTime();
        long millis1 = date1.getTime();
        long millis2 = date2.getTime();
        FastDateFormat fdf = FastDateFormat.getInstance("yyyy-MM-dd'T'HH:mm:ss");
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
        assertEquals("2003-01-10T15:33:20", fdf.format(date1));
        fdf = FastDateFormat.getInstance("Z");
        fdf = FastDateFormat.getInstance("ZZ");
        String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" + " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z";
        fdf = FastDateFormat.getInstance(pattern);
        sdf = new SimpleDateFormat(pattern);
        
    }
    finally {
        Locale.setDefault(realDefaultLocale);
        TimeZone.setDefault(realDefaultZone);
        
    }
}

---
---
public void testFormat_catena_2() {
    Locale realDefaultLocale = Locale.getDefault();
    TimeZone realDefaultZone = TimeZone.getDefault();
    try {
        Locale.setDefault(Locale.US);
        TimeZone.setDefault(TimeZone.getTimeZone("America/New_York"));
        GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);
        GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);
        Date date1 = cal1.getTime();
        Date date2 = cal2.getTime();
        long millis1 = date1.getTime();
        long millis2 = date2.getTime();
        FastDateFormat fdf = FastDateFormat.getInstance("yyyy-MM-dd'T'HH:mm:ss");
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
        assertEquals("2003-01-10T15:33:20", fdf.format(cal1));
        fdf = FastDateFormat.getInstance("Z");
        fdf = FastDateFormat.getInstance("ZZ");
        String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" + " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z";
        fdf = FastDateFormat.getInstance(pattern);
        sdf = new SimpleDateFormat(pattern);
        
    }
    finally {
        Locale.setDefault(realDefaultLocale);
        TimeZone.setDefault(realDefaultZone);
        
    }
}

---
---
public void testFormat_catena_3() {
    Locale realDefaultLocale = Locale.getDefault();
    TimeZone realDefaultZone = TimeZone.getDefault();
    try {
        Locale.setDefault(Locale.US);
        TimeZone.setDefault(TimeZone.getTimeZone("America/New_York"));
        GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);
        GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);
        Date date1 = cal1.getTime();
        Date date2 = cal2.getTime();
        long millis1 = date1.getTime();
        long millis2 = date2.getTime();
        FastDateFormat fdf = FastDateFormat.getInstance("yyyy-MM-dd'T'HH:mm:ss");
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
        assertEquals("2003-01-10T15:33:20", fdf.format(millis1));
        fdf = FastDateFormat.getInstance("Z");
        fdf = FastDateFormat.getInstance("ZZ");
        String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" + " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z";
        fdf = FastDateFormat.getInstance(pattern);
        sdf = new SimpleDateFormat(pattern);
        
    }
    finally {
        Locale.setDefault(realDefaultLocale);
        TimeZone.setDefault(realDefaultZone);
        
    }
}

---
---
public void testFormat_catena_4() {
    Locale realDefaultLocale = Locale.getDefault();
    TimeZone realDefaultZone = TimeZone.getDefault();
    try {
        Locale.setDefault(Locale.US);
        TimeZone.setDefault(TimeZone.getTimeZone("America/New_York"));
        GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);
        GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);
        Date date1 = cal1.getTime();
        Date date2 = cal2.getTime();
        long millis1 = date1.getTime();
        long millis2 = date2.getTime();
        FastDateFormat fdf = FastDateFormat.getInstance("yyyy-MM-dd'T'HH:mm:ss");
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
        assertEquals("2003-07-10T09:00:00", fdf.format(date2));
        fdf = FastDateFormat.getInstance("Z");
        fdf = FastDateFormat.getInstance("ZZ");
        String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" + " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z";
        fdf = FastDateFormat.getInstance(pattern);
        sdf = new SimpleDateFormat(pattern);
        
    }
    finally {
        Locale.setDefault(realDefaultLocale);
        TimeZone.setDefault(realDefaultZone);
        
    }
}

---
---
public void testFormat_catena_5() {
    Locale realDefaultLocale = Locale.getDefault();
    TimeZone realDefaultZone = TimeZone.getDefault();
    try {
        Locale.setDefault(Locale.US);
        TimeZone.setDefault(TimeZone.getTimeZone("America/New_York"));
        GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);
        GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);
        Date date1 = cal1.getTime();
        Date date2 = cal2.getTime();
        long millis1 = date1.getTime();
        long millis2 = date2.getTime();
        FastDateFormat fdf = FastDateFormat.getInstance("yyyy-MM-dd'T'HH:mm:ss");
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
        assertEquals("2003-07-10T09:00:00", fdf.format(cal2));
        fdf = FastDateFormat.getInstance("Z");
        fdf = FastDateFormat.getInstance("ZZ");
        String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" + " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z";
        fdf = FastDateFormat.getInstance(pattern);
        sdf = new SimpleDateFormat(pattern);
        
    }
    finally {
        Locale.setDefault(realDefaultLocale);
        TimeZone.setDefault(realDefaultZone);
        
    }
}

---
---
public void testFormat_catena_6() {
    Locale realDefaultLocale = Locale.getDefault();
    TimeZone realDefaultZone = TimeZone.getDefault();
    try {
        Locale.setDefault(Locale.US);
        TimeZone.setDefault(TimeZone.getTimeZone("America/New_York"));
        GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);
        GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);
        Date date1 = cal1.getTime();
        Date date2 = cal2.getTime();
        long millis1 = date1.getTime();
        long millis2 = date2.getTime();
        FastDateFormat fdf = FastDateFormat.getInstance("yyyy-MM-dd'T'HH:mm:ss");
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
        assertEquals("2003-07-10T09:00:00", fdf.format(millis2));
        fdf = FastDateFormat.getInstance("Z");
        fdf = FastDateFormat.getInstance("ZZ");
        String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" + " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z";
        fdf = FastDateFormat.getInstance(pattern);
        sdf = new SimpleDateFormat(pattern);
        
    }
    finally {
        Locale.setDefault(realDefaultLocale);
        TimeZone.setDefault(realDefaultZone);
        
    }
}

---
---
public void testFormat_catena_7() {
    Locale realDefaultLocale = Locale.getDefault();
    TimeZone realDefaultZone = TimeZone.getDefault();
    try {
        Locale.setDefault(Locale.US);
        TimeZone.setDefault(TimeZone.getTimeZone("America/New_York"));
        GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);
        GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);
        Date date1 = cal1.getTime();
        Date date2 = cal2.getTime();
        long millis1 = date1.getTime();
        long millis2 = date2.getTime();
        FastDateFormat fdf = FastDateFormat.getInstance("yyyy-MM-dd'T'HH:mm:ss");
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
        fdf = FastDateFormat.getInstance("Z");
        assertEquals("-0500", fdf.format(date1));
        fdf = FastDateFormat.getInstance("ZZ");
        String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" + " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z";
        fdf = FastDateFormat.getInstance(pattern);
        sdf = new SimpleDateFormat(pattern);
        
    }
    finally {
        Locale.setDefault(realDefaultLocale);
        TimeZone.setDefault(realDefaultZone);
        
    }
}

---
---
public void testFormat_catena_8() {
    Locale realDefaultLocale = Locale.getDefault();
    TimeZone realDefaultZone = TimeZone.getDefault();
    try {
        Locale.setDefault(Locale.US);
        TimeZone.setDefault(TimeZone.getTimeZone("America/New_York"));
        GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);
        GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);
        Date date1 = cal1.getTime();
        Date date2 = cal2.getTime();
        long millis1 = date1.getTime();
        long millis2 = date2.getTime();
        FastDateFormat fdf = FastDateFormat.getInstance("yyyy-MM-dd'T'HH:mm:ss");
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
        fdf = FastDateFormat.getInstance("Z");
        assertEquals("-0500", fdf.format(cal1));
        fdf = FastDateFormat.getInstance("ZZ");
        String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" + " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z";
        fdf = FastDateFormat.getInstance(pattern);
        sdf = new SimpleDateFormat(pattern);
        
    }
    finally {
        Locale.setDefault(realDefaultLocale);
        TimeZone.setDefault(realDefaultZone);
        
    }
}

---
---
public void testFormat_catena_9() {
    Locale realDefaultLocale = Locale.getDefault();
    TimeZone realDefaultZone = TimeZone.getDefault();
    try {
        Locale.setDefault(Locale.US);
        TimeZone.setDefault(TimeZone.getTimeZone("America/New_York"));
        GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);
        GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);
        Date date1 = cal1.getTime();
        Date date2 = cal2.getTime();
        long millis1 = date1.getTime();
        long millis2 = date2.getTime();
        FastDateFormat fdf = FastDateFormat.getInstance("yyyy-MM-dd'T'HH:mm:ss");
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
        fdf = FastDateFormat.getInstance("Z");
        assertEquals("-0500", fdf.format(millis1));
        fdf = FastDateFormat.getInstance("ZZ");
        String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" + " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z";
        fdf = FastDateFormat.getInstance(pattern);
        sdf = new SimpleDateFormat(pattern);
        
    }
    finally {
        Locale.setDefault(realDefaultLocale);
        TimeZone.setDefault(realDefaultZone);
        
    }
}

---
---
public void testFormat_catena_10() {
    Locale realDefaultLocale = Locale.getDefault();
    TimeZone realDefaultZone = TimeZone.getDefault();
    try {
        Locale.setDefault(Locale.US);
        TimeZone.setDefault(TimeZone.getTimeZone("America/New_York"));
        GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);
        GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);
        Date date1 = cal1.getTime();
        Date date2 = cal2.getTime();
        long millis1 = date1.getTime();
        long millis2 = date2.getTime();
        FastDateFormat fdf = FastDateFormat.getInstance("yyyy-MM-dd'T'HH:mm:ss");
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
        fdf = FastDateFormat.getInstance("Z");
        assertEquals("-0400", fdf.format(date2));
        fdf = FastDateFormat.getInstance("ZZ");
        String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" + " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z";
        fdf = FastDateFormat.getInstance(pattern);
        sdf = new SimpleDateFormat(pattern);
        
    }
    finally {
        Locale.setDefault(realDefaultLocale);
        TimeZone.setDefault(realDefaultZone);
        
    }
}

---
---
public void testFormat_catena_11() {
    Locale realDefaultLocale = Locale.getDefault();
    TimeZone realDefaultZone = TimeZone.getDefault();
    try {
        Locale.setDefault(Locale.US);
        TimeZone.setDefault(TimeZone.getTimeZone("America/New_York"));
        GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);
        GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);
        Date date1 = cal1.getTime();
        Date date2 = cal2.getTime();
        long millis1 = date1.getTime();
        long millis2 = date2.getTime();
        FastDateFormat fdf = FastDateFormat.getInstance("yyyy-MM-dd'T'HH:mm:ss");
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
        fdf = FastDateFormat.getInstance("Z");
        assertEquals("-0400", fdf.format(cal2));
        fdf = FastDateFormat.getInstance("ZZ");
        String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" + " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z";
        fdf = FastDateFormat.getInstance(pattern);
        sdf = new SimpleDateFormat(pattern);
        
    }
    finally {
        Locale.setDefault(realDefaultLocale);
        TimeZone.setDefault(realDefaultZone);
        
    }
}

---
---
public void testFormat_catena_12() {
    Locale realDefaultLocale = Locale.getDefault();
    TimeZone realDefaultZone = TimeZone.getDefault();
    try {
        Locale.setDefault(Locale.US);
        TimeZone.setDefault(TimeZone.getTimeZone("America/New_York"));
        GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);
        GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);
        Date date1 = cal1.getTime();
        Date date2 = cal2.getTime();
        long millis1 = date1.getTime();
        long millis2 = date2.getTime();
        FastDateFormat fdf = FastDateFormat.getInstance("yyyy-MM-dd'T'HH:mm:ss");
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
        fdf = FastDateFormat.getInstance("Z");
        assertEquals("-0400", fdf.format(millis2));
        fdf = FastDateFormat.getInstance("ZZ");
        String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" + " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z";
        fdf = FastDateFormat.getInstance(pattern);
        sdf = new SimpleDateFormat(pattern);
        
    }
    finally {
        Locale.setDefault(realDefaultLocale);
        TimeZone.setDefault(realDefaultZone);
        
    }
}

---
---
public void testFormat_catena_13() {
    Locale realDefaultLocale = Locale.getDefault();
    TimeZone realDefaultZone = TimeZone.getDefault();
    try {
        Locale.setDefault(Locale.US);
        TimeZone.setDefault(TimeZone.getTimeZone("America/New_York"));
        GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);
        GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);
        Date date1 = cal1.getTime();
        Date date2 = cal2.getTime();
        long millis1 = date1.getTime();
        long millis2 = date2.getTime();
        FastDateFormat fdf = FastDateFormat.getInstance("yyyy-MM-dd'T'HH:mm:ss");
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
        fdf = FastDateFormat.getInstance("Z");
        fdf = FastDateFormat.getInstance("ZZ");
        assertEquals("-05:00", fdf.format(date1));
        String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" + " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z";
        fdf = FastDateFormat.getInstance(pattern);
        sdf = new SimpleDateFormat(pattern);
        
    }
    finally {
        Locale.setDefault(realDefaultLocale);
        TimeZone.setDefault(realDefaultZone);
        
    }
}

---
---
public void testFormat_catena_14() {
    Locale realDefaultLocale = Locale.getDefault();
    TimeZone realDefaultZone = TimeZone.getDefault();
    try {
        Locale.setDefault(Locale.US);
        TimeZone.setDefault(TimeZone.getTimeZone("America/New_York"));
        GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);
        GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);
        Date date1 = cal1.getTime();
        Date date2 = cal2.getTime();
        long millis1 = date1.getTime();
        long millis2 = date2.getTime();
        FastDateFormat fdf = FastDateFormat.getInstance("yyyy-MM-dd'T'HH:mm:ss");
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
        fdf = FastDateFormat.getInstance("Z");
        fdf = FastDateFormat.getInstance("ZZ");
        assertEquals("-05:00", fdf.format(cal1));
        String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" + " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z";
        fdf = FastDateFormat.getInstance(pattern);
        sdf = new SimpleDateFormat(pattern);
        
    }
    finally {
        Locale.setDefault(realDefaultLocale);
        TimeZone.setDefault(realDefaultZone);
        
    }
}

---
---
public void testFormat_catena_15() {
    Locale realDefaultLocale = Locale.getDefault();
    TimeZone realDefaultZone = TimeZone.getDefault();
    try {
        Locale.setDefault(Locale.US);
        TimeZone.setDefault(TimeZone.getTimeZone("America/New_York"));
        GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);
        GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);
        Date date1 = cal1.getTime();
        Date date2 = cal2.getTime();
        long millis1 = date1.getTime();
        long millis2 = date2.getTime();
        FastDateFormat fdf = FastDateFormat.getInstance("yyyy-MM-dd'T'HH:mm:ss");
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
        fdf = FastDateFormat.getInstance("Z");
        fdf = FastDateFormat.getInstance("ZZ");
        assertEquals("-05:00", fdf.format(millis1));
        String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" + " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z";
        fdf = FastDateFormat.getInstance(pattern);
        sdf = new SimpleDateFormat(pattern);
        
    }
    finally {
        Locale.setDefault(realDefaultLocale);
        TimeZone.setDefault(realDefaultZone);
        
    }
}

---
---
public void testFormat_catena_16() {
    Locale realDefaultLocale = Locale.getDefault();
    TimeZone realDefaultZone = TimeZone.getDefault();
    try {
        Locale.setDefault(Locale.US);
        TimeZone.setDefault(TimeZone.getTimeZone("America/New_York"));
        GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);
        GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);
        Date date1 = cal1.getTime();
        Date date2 = cal2.getTime();
        long millis1 = date1.getTime();
        long millis2 = date2.getTime();
        FastDateFormat fdf = FastDateFormat.getInstance("yyyy-MM-dd'T'HH:mm:ss");
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
        fdf = FastDateFormat.getInstance("Z");
        fdf = FastDateFormat.getInstance("ZZ");
        assertEquals("-04:00", fdf.format(date2));
        String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" + " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z";
        fdf = FastDateFormat.getInstance(pattern);
        sdf = new SimpleDateFormat(pattern);
        
    }
    finally {
        Locale.setDefault(realDefaultLocale);
        TimeZone.setDefault(realDefaultZone);
        
    }
}

---
---
public void testFormat_catena_17() {
    Locale realDefaultLocale = Locale.getDefault();
    TimeZone realDefaultZone = TimeZone.getDefault();
    try {
        Locale.setDefault(Locale.US);
        TimeZone.setDefault(TimeZone.getTimeZone("America/New_York"));
        GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);
        GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);
        Date date1 = cal1.getTime();
        Date date2 = cal2.getTime();
        long millis1 = date1.getTime();
        long millis2 = date2.getTime();
        FastDateFormat fdf = FastDateFormat.getInstance("yyyy-MM-dd'T'HH:mm:ss");
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
        fdf = FastDateFormat.getInstance("Z");
        fdf = FastDateFormat.getInstance("ZZ");
        assertEquals("-04:00", fdf.format(cal2));
        String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" + " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z";
        fdf = FastDateFormat.getInstance(pattern);
        sdf = new SimpleDateFormat(pattern);
        
    }
    finally {
        Locale.setDefault(realDefaultLocale);
        TimeZone.setDefault(realDefaultZone);
        
    }
}

---
---
public void testFormat_catena_18() {
    Locale realDefaultLocale = Locale.getDefault();
    TimeZone realDefaultZone = TimeZone.getDefault();
    try {
        Locale.setDefault(Locale.US);
        TimeZone.setDefault(TimeZone.getTimeZone("America/New_York"));
        GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);
        GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);
        Date date1 = cal1.getTime();
        Date date2 = cal2.getTime();
        long millis1 = date1.getTime();
        long millis2 = date2.getTime();
        FastDateFormat fdf = FastDateFormat.getInstance("yyyy-MM-dd'T'HH:mm:ss");
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
        fdf = FastDateFormat.getInstance("Z");
        fdf = FastDateFormat.getInstance("ZZ");
        assertEquals("-04:00", fdf.format(millis2));
        String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" + " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z";
        fdf = FastDateFormat.getInstance(pattern);
        sdf = new SimpleDateFormat(pattern);
        
    }
    finally {
        Locale.setDefault(realDefaultLocale);
        TimeZone.setDefault(realDefaultZone);
        
    }
}

---
---
public void testFormat_catena_19() {
    Locale realDefaultLocale = Locale.getDefault();
    TimeZone realDefaultZone = TimeZone.getDefault();
    try {
        Locale.setDefault(Locale.US);
        TimeZone.setDefault(TimeZone.getTimeZone("America/New_York"));
        GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);
        GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);
        Date date1 = cal1.getTime();
        Date date2 = cal2.getTime();
        long millis1 = date1.getTime();
        long millis2 = date2.getTime();
        FastDateFormat fdf = FastDateFormat.getInstance("yyyy-MM-dd'T'HH:mm:ss");
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
        fdf = FastDateFormat.getInstance("Z");
        fdf = FastDateFormat.getInstance("ZZ");
        String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" + " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z";
        fdf = FastDateFormat.getInstance(pattern);
        sdf = new SimpleDateFormat(pattern);
        assertEquals(sdf.format(date1).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date1));
        
    }
    finally {
        Locale.setDefault(realDefaultLocale);
        TimeZone.setDefault(realDefaultZone);
        
    }
}

---
---
public void testFormat_catena_20() {
    Locale realDefaultLocale = Locale.getDefault();
    TimeZone realDefaultZone = TimeZone.getDefault();
    try {
        Locale.setDefault(Locale.US);
        TimeZone.setDefault(TimeZone.getTimeZone("America/New_York"));
        GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);
        GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);
        Date date1 = cal1.getTime();
        Date date2 = cal2.getTime();
        long millis1 = date1.getTime();
        long millis2 = date2.getTime();
        FastDateFormat fdf = FastDateFormat.getInstance("yyyy-MM-dd'T'HH:mm:ss");
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
        fdf = FastDateFormat.getInstance("Z");
        fdf = FastDateFormat.getInstance("ZZ");
        String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" + " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z";
        fdf = FastDateFormat.getInstance(pattern);
        sdf = new SimpleDateFormat(pattern);
        assertEquals(sdf.format(date2).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date2));
        
    }
    finally {
        Locale.setDefault(realDefaultLocale);
        TimeZone.setDefault(realDefaultZone);
        
    }
}

---
--------------------
Run: Lang_19
@@@
Split test: org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest::testUnfinishedEntity
file: /root/workbench/exportInfo/d4j_buggy/Lang_19/src/test/java//org/apache/commons/lang3/text/translate/NumericEntityUnescaperTest.java
Begin: Pos(46, 12)
End: Pos(53, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_19/src/test/java//org/apache/commons/lang3/text/translate/NumericEntityUnescaperTest.java
Name: testUnfinishedEntity
Childs: [StatementAssertion<Begin: Pos(52, 9), End: Pos(52, 105)>,
]
@@@
Split test: org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest::testOutOfBounds
file: /root/workbench/exportInfo/d4j_buggy/Lang_19/src/test/java//org/apache/commons/lang3/text/translate/NumericEntityUnescaperTest.java
Begin: Pos(37, 12)
End: Pos(44, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_19/src/test/java//org/apache/commons/lang3/text/translate/NumericEntityUnescaperTest.java
Name: testOutOfBounds
Childs: [StatementAssertion<Begin: Pos(40, 9), End: Pos(40, 101)>,
StatementAssertion<Begin: Pos(41, 9), End: Pos(41, 103)>,
StatementAssertion<Begin: Pos(42, 9), End: Pos(42, 105)>,
StatementAssertion<Begin: Pos(43, 9), End: Pos(43, 105)>,
]
---
public void testOutOfBounds_catena_0() {
    NumericEntityUnescaper neu = new NumericEntityUnescaper();
    assertEquals("Failed to ignore when last character is &", "Test &", neu.translate("Test &"));
    
}

---
---
public void testOutOfBounds_catena_1() {
    NumericEntityUnescaper neu = new NumericEntityUnescaper();
    assertEquals("Failed to ignore when last character is &", "Test &#", neu.translate("Test &#"));
    
}

---
---
public void testOutOfBounds_catena_2() {
    NumericEntityUnescaper neu = new NumericEntityUnescaper();
    assertEquals("Failed to ignore when last character is &", "Test &#x", neu.translate("Test &#x"));
    
}

---
---
public void testOutOfBounds_catena_3() {
    NumericEntityUnescaper neu = new NumericEntityUnescaper();
    assertEquals("Failed to ignore when last character is &", "Test &#X", neu.translate("Test &#X"));
    
}

---
--------------------
Run: Lang_7
@@@
Split test: org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber
file: /root/workbench/exportInfo/d4j_buggy/Lang_7/src/test/java//org/apache/commons/lang3/math/NumberUtilsTest.java
Begin: Pos(184, 5)
End: Pos(246, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_7/src/test/java//org/apache/commons/lang3/math/NumberUtilsTest.java
Name: testCreateNumber
Childs: [StatementAssertion<Begin: Pos(187, 9), End: Pos(187, 115)>,
StatementAssertion<Begin: Pos(188, 9), End: Pos(188, 115)>,
StatementAssertion<Begin: Pos(189, 9), End: Pos(189, 117)>,
StatementAssertion<Begin: Pos(190, 9), End: Pos(190, 117)>,
StatementAssertion<Begin: Pos(191, 9), End: Pos(191, 116)>,
StatementAssertion<Begin: Pos(192, 9), End: Pos(192, 116)>,
StatementAssertion<Begin: Pos(193, 9), End: Pos(194, 41)>,
StatementAssertion<Begin: Pos(195, 9), End: Pos(195, 111)>,
StatementAssertion<Begin: Pos(196, 9), End: Pos(196, 111)>,
StatementAssertion<Begin: Pos(197, 9), End: Pos(197, 117)>,
StatementAssertion<Begin: Pos(198, 9), End: Pos(198, 117)>,
StatementAssertion<Begin: Pos(199, 9), End: Pos(199, 110)>,
StatementAssertion<Begin: Pos(200, 9), End: Pos(200, 110)>,
StatementAssertion<Begin: Pos(201, 9), End: Pos(201, 113)>,
StatementAssertion<Begin: Pos(202, 9), End: Pos(202, 113)>,
StatementAssertion<Begin: Pos(203, 9), End: Pos(203, 119)>,
StatementAssertion<Begin: Pos(204, 9), End: Pos(204, 116)>,
StatementAssertion<Begin: Pos(205, 9), End: Pos(205, 121)>,
StatementAssertion<Begin: Pos(206, 9), End: Pos(206, 121)>,
StatementAssertion<Begin: Pos(207, 9), End: Pos(207, 88)>,
StatementAssertion<Begin: Pos(208, 9), End: Pos(209, 56)>,
StatementAssertion<Begin: Pos(213, 13), End: Pos(214, 48)>,
StatementAssertion<Begin: Pos(216, 9), End: Pos(217, 63)>,
StatementAssertion<Begin: Pos(218, 9), End: Pos(219, 57)>,
StatementAssertion<Begin: Pos(220, 9), End: Pos(221, 54)>,
StatementAssertion<Begin: Pos(224, 9), End: Pos(224, 114)>,
StatementAssertion<Begin: Pos(227, 9), End: Pos(227, 80)>,
StatementAssertion<Begin: Pos(230, 9), End: Pos(231, 58)>,
StatementAssertion<Begin: Pos(236, 9), End: Pos(236, 57)>,
StatementAssertion<Begin: Pos(237, 9), End: Pos(237, 30)>,
StatementAssertion<Begin: Pos(242, 13), End: Pos(242, 51)>,
]
---
@Test public void testCreateNumber_catena_0() {
    assertEquals("createNumber(String) 1 failed", Float.valueOf("1234.5"), NumberUtils.createNumber("1234.5"));
    if(SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {
        
    }
    final Number bigNum = NumberUtils.createNumber("-1.1E-700F");
    try {
        NumberUtils.createNumber("--1.1E-700F");
        
    }
    catch(NumberFormatException nfe) {
        
    }
}

---
---
@Test public void testCreateNumber_catena_1() {
    assertEquals("createNumber(String) 2 failed", Integer.valueOf("12345"), NumberUtils.createNumber("12345"));
    if(SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {
        
    }
    final Number bigNum = NumberUtils.createNumber("-1.1E-700F");
    try {
        NumberUtils.createNumber("--1.1E-700F");
        
    }
    catch(NumberFormatException nfe) {
        
    }
}

---
---
@Test public void testCreateNumber_catena_2() {
    assertEquals("createNumber(String) 3 failed", Double.valueOf("1234.5"), NumberUtils.createNumber("1234.5D"));
    if(SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {
        
    }
    final Number bigNum = NumberUtils.createNumber("-1.1E-700F");
    try {
        NumberUtils.createNumber("--1.1E-700F");
        
    }
    catch(NumberFormatException nfe) {
        
    }
}

---
---
@Test public void testCreateNumber_catena_3() {
    assertEquals("createNumber(String) 3 failed", Double.valueOf("1234.5"), NumberUtils.createNumber("1234.5d"));
    if(SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {
        
    }
    final Number bigNum = NumberUtils.createNumber("-1.1E-700F");
    try {
        NumberUtils.createNumber("--1.1E-700F");
        
    }
    catch(NumberFormatException nfe) {
        
    }
}

---
---
@Test public void testCreateNumber_catena_4() {
    assertEquals("createNumber(String) 4 failed", Float.valueOf("1234.5"), NumberUtils.createNumber("1234.5F"));
    if(SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {
        
    }
    final Number bigNum = NumberUtils.createNumber("-1.1E-700F");
    try {
        NumberUtils.createNumber("--1.1E-700F");
        
    }
    catch(NumberFormatException nfe) {
        
    }
}

---
---
@Test public void testCreateNumber_catena_5() {
    assertEquals("createNumber(String) 4 failed", Float.valueOf("1234.5"), NumberUtils.createNumber("1234.5f"));
    if(SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {
        
    }
    final Number bigNum = NumberUtils.createNumber("-1.1E-700F");
    try {
        NumberUtils.createNumber("--1.1E-700F");
        
    }
    catch(NumberFormatException nfe) {
        
    }
}

---
---
@Test public void testCreateNumber_catena_6() {
    assertEquals("createNumber(String) 5 failed", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber("" + (Integer.MAX_VALUE + 1L)));
    if(SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {
        
    }
    final Number bigNum = NumberUtils.createNumber("-1.1E-700F");
    try {
        NumberUtils.createNumber("--1.1E-700F");
        
    }
    catch(NumberFormatException nfe) {
        
    }
}

---
---
@Test public void testCreateNumber_catena_7() {
    assertEquals("createNumber(String) 6 failed", Long.valueOf(12345), NumberUtils.createNumber("12345L"));
    if(SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {
        
    }
    final Number bigNum = NumberUtils.createNumber("-1.1E-700F");
    try {
        NumberUtils.createNumber("--1.1E-700F");
        
    }
    catch(NumberFormatException nfe) {
        
    }
}

---
---
@Test public void testCreateNumber_catena_8() {
    assertEquals("createNumber(String) 6 failed", Long.valueOf(12345), NumberUtils.createNumber("12345l"));
    if(SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {
        
    }
    final Number bigNum = NumberUtils.createNumber("-1.1E-700F");
    try {
        NumberUtils.createNumber("--1.1E-700F");
        
    }
    catch(NumberFormatException nfe) {
        
    }
}

---
---
@Test public void testCreateNumber_catena_9() {
    assertEquals("createNumber(String) 7 failed", Float.valueOf("-1234.5"), NumberUtils.createNumber("-1234.5"));
    if(SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {
        
    }
    final Number bigNum = NumberUtils.createNumber("-1.1E-700F");
    try {
        NumberUtils.createNumber("--1.1E-700F");
        
    }
    catch(NumberFormatException nfe) {
        
    }
}

---
---
@Test public void testCreateNumber_catena_10() {
    assertEquals("createNumber(String) 8 failed", Integer.valueOf("-12345"), NumberUtils.createNumber("-12345"));
    if(SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {
        
    }
    final Number bigNum = NumberUtils.createNumber("-1.1E-700F");
    try {
        NumberUtils.createNumber("--1.1E-700F");
        
    }
    catch(NumberFormatException nfe) {
        
    }
}

---
---
@Test public void testCreateNumber_catena_11() {
    assertTrue("createNumber(String) 9a failed", 0xFADE == NumberUtils.createNumber("0xFADE").intValue());
    if(SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {
        
    }
    final Number bigNum = NumberUtils.createNumber("-1.1E-700F");
    try {
        NumberUtils.createNumber("--1.1E-700F");
        
    }
    catch(NumberFormatException nfe) {
        
    }
}

---
---
@Test public void testCreateNumber_catena_12() {
    assertTrue("createNumber(String) 9b failed", 0xFADE == NumberUtils.createNumber("0Xfade").intValue());
    if(SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {
        
    }
    final Number bigNum = NumberUtils.createNumber("-1.1E-700F");
    try {
        NumberUtils.createNumber("--1.1E-700F");
        
    }
    catch(NumberFormatException nfe) {
        
    }
}

---
---
@Test public void testCreateNumber_catena_13() {
    assertTrue("createNumber(String) 10a failed",  - 0xFADE == NumberUtils.createNumber("-0xFADE").intValue());
    if(SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {
        
    }
    final Number bigNum = NumberUtils.createNumber("-1.1E-700F");
    try {
        NumberUtils.createNumber("--1.1E-700F");
        
    }
    catch(NumberFormatException nfe) {
        
    }
}

---
---
@Test public void testCreateNumber_catena_14() {
    assertTrue("createNumber(String) 10b failed",  - 0xFADE == NumberUtils.createNumber("-0Xfade").intValue());
    if(SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {
        
    }
    final Number bigNum = NumberUtils.createNumber("-1.1E-700F");
    try {
        NumberUtils.createNumber("--1.1E-700F");
        
    }
    catch(NumberFormatException nfe) {
        
    }
}

---
---
@Test public void testCreateNumber_catena_15() {
    assertEquals("createNumber(String) 11 failed", Double.valueOf("1.1E200"), NumberUtils.createNumber("1.1E200"));
    if(SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {
        
    }
    final Number bigNum = NumberUtils.createNumber("-1.1E-700F");
    try {
        NumberUtils.createNumber("--1.1E-700F");
        
    }
    catch(NumberFormatException nfe) {
        
    }
}

---
---
@Test public void testCreateNumber_catena_16() {
    assertEquals("createNumber(String) 12 failed", Float.valueOf("1.1E20"), NumberUtils.createNumber("1.1E20"));
    if(SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {
        
    }
    final Number bigNum = NumberUtils.createNumber("-1.1E-700F");
    try {
        NumberUtils.createNumber("--1.1E-700F");
        
    }
    catch(NumberFormatException nfe) {
        
    }
}

---
---
@Test public void testCreateNumber_catena_17() {
    assertEquals("createNumber(String) 13 failed", Double.valueOf("-1.1E200"), NumberUtils.createNumber("-1.1E200"));
    if(SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {
        
    }
    final Number bigNum = NumberUtils.createNumber("-1.1E-700F");
    try {
        NumberUtils.createNumber("--1.1E-700F");
        
    }
    catch(NumberFormatException nfe) {
        
    }
}

---
---
@Test public void testCreateNumber_catena_18() {
    assertEquals("createNumber(String) 14 failed", Double.valueOf("1.1E-200"), NumberUtils.createNumber("1.1E-200"));
    if(SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {
        
    }
    final Number bigNum = NumberUtils.createNumber("-1.1E-700F");
    try {
        NumberUtils.createNumber("--1.1E-700F");
        
    }
    catch(NumberFormatException nfe) {
        
    }
}

---
---
@Test public void testCreateNumber_catena_19() {
    assertEquals("createNumber(null) failed", null, NumberUtils.createNumber(null));
    if(SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {
        
    }
    final Number bigNum = NumberUtils.createNumber("-1.1E-700F");
    try {
        NumberUtils.createNumber("--1.1E-700F");
        
    }
    catch(NumberFormatException nfe) {
        
    }
}

---
---
@Test public void testCreateNumber_catena_20() {
    assertEquals("createNumber(String) failed", new BigInteger("12345678901234567890"), NumberUtils.createNumber("12345678901234567890L"));
    if(SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {
        
    }
    final Number bigNum = NumberUtils.createNumber("-1.1E-700F");
    try {
        NumberUtils.createNumber("--1.1E-700F");
        
    }
    catch(NumberFormatException nfe) {
        
    }
}

---
---
@Test public void testCreateNumber_catena_21() {
    if(SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {
        assertEquals("createNumber(String) 15 failed", new BigDecimal("1.1E-700"), NumberUtils.createNumber("1.1E-700F"));
        
    }
    final Number bigNum = NumberUtils.createNumber("-1.1E-700F");
    try {
        NumberUtils.createNumber("--1.1E-700F");
        
    }
    catch(NumberFormatException nfe) {
        
    }
}

---
---
@Test public void testCreateNumber_catena_22() {
    if(SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {
        
    }
    assertEquals("createNumber(String) 16 failed", Long.valueOf("10" + Integer.MAX_VALUE), NumberUtils.createNumber("10" + Integer.MAX_VALUE + "L"));
    final Number bigNum = NumberUtils.createNumber("-1.1E-700F");
    try {
        NumberUtils.createNumber("--1.1E-700F");
        
    }
    catch(NumberFormatException nfe) {
        
    }
}

---
---
@Test public void testCreateNumber_catena_23() {
    if(SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {
        
    }
    assertEquals("createNumber(String) 17 failed", Long.valueOf("10" + Integer.MAX_VALUE), NumberUtils.createNumber("10" + Integer.MAX_VALUE));
    final Number bigNum = NumberUtils.createNumber("-1.1E-700F");
    try {
        NumberUtils.createNumber("--1.1E-700F");
        
    }
    catch(NumberFormatException nfe) {
        
    }
}

---
---
@Test public void testCreateNumber_catena_24() {
    if(SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {
        
    }
    assertEquals("createNumber(String) 18 failed", new BigInteger("10" + Long.MAX_VALUE), NumberUtils.createNumber("10" + Long.MAX_VALUE));
    final Number bigNum = NumberUtils.createNumber("-1.1E-700F");
    try {
        NumberUtils.createNumber("--1.1E-700F");
        
    }
    catch(NumberFormatException nfe) {
        
    }
}

---
---
@Test public void testCreateNumber_catena_25() {
    if(SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {
        
    }
    assertEquals("createNumber(String) LANG-521 failed", Float.valueOf("2."), NumberUtils.createNumber("2."));
    final Number bigNum = NumberUtils.createNumber("-1.1E-700F");
    try {
        NumberUtils.createNumber("--1.1E-700F");
        
    }
    catch(NumberFormatException nfe) {
        
    }
}

---
---
@Test public void testCreateNumber_catena_26() {
    if(SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {
        
    }
    assertFalse("createNumber(String) succeeded", checkCreateNumber("1eE"));
    final Number bigNum = NumberUtils.createNumber("-1.1E-700F");
    try {
        NumberUtils.createNumber("--1.1E-700F");
        
    }
    catch(NumberFormatException nfe) {
        
    }
}

---
---
@Test public void testCreateNumber_catena_27() {
    if(SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {
        
    }
    assertEquals("createNumber(String) LANG-693 failed", Double.valueOf(Double.MAX_VALUE), NumberUtils.createNumber("" + Double.MAX_VALUE));
    final Number bigNum = NumberUtils.createNumber("-1.1E-700F");
    try {
        NumberUtils.createNumber("--1.1E-700F");
        
    }
    catch(NumberFormatException nfe) {
        
    }
}

---
---
@Test public void testCreateNumber_catena_28() {
    if(SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {
        
    }
    final Number bigNum = NumberUtils.createNumber("-1.1E-700F");
    assertEquals(BigDecimal.class, bigNum.getClass());
    try {
        NumberUtils.createNumber("--1.1E-700F");
        
    }
    catch(NumberFormatException nfe) {
        
    }
}

---
---
@Test public void testCreateNumber_catena_29() {
    if(SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {
        
    }
    final Number bigNum = NumberUtils.createNumber("-1.1E-700F");
    assertNotNull(bigNum);
    try {
        NumberUtils.createNumber("--1.1E-700F");
        
    }
    catch(NumberFormatException nfe) {
        
    }
}

---
---
@Test public void testCreateNumber_catena_30() {
    if(SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {
        
    }
    final Number bigNum = NumberUtils.createNumber("-1.1E-700F");
    try {
        NumberUtils.createNumber("--1.1E-700F");
        fail("Expected NumberFormatException");
        
    }
    catch(NumberFormatException nfe) {
        
    }
}

---
--------------------
Run: Lang_55
@@@
Split test: org.apache.commons.lang.time.StopWatchTest::testLang315
file: /root/workbench/exportInfo/d4j_buggy/Lang_55/src/test//org/apache/commons/lang/time/StopWatchTest.java
Begin: Pos(111, 12)
End: Pos(121, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_55/src/test//org/apache/commons/lang/time/StopWatchTest.java
Name: testLang315
Childs: [StatementAssertion<Begin: Pos(120, 9), End: Pos(120, 47)>,
]
--------------------
Run: Lang_20
@@@
Split test: org.apache.commons.lang3.StringUtilsTest::testJoin_ArrayChar
file: /root/workbench/exportInfo/d4j_buggy/Lang_20/src/test/java//org/apache/commons/lang3/StringUtilsTest.java
Begin: Pos(200, 12)
End: Pos(213, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_20/src/test/java//org/apache/commons/lang3/StringUtilsTest.java
Name: testJoin_ArrayChar
Childs: [StatementAssertion<Begin: Pos(201, 9), End: Pos(201, 67)>,
StatementAssertion<Begin: Pos(202, 9), End: Pos(202, 83)>,
StatementAssertion<Begin: Pos(203, 9), End: Pos(203, 77)>,
StatementAssertion<Begin: Pos(204, 9), End: Pos(204, 82)>,
StatementAssertion<Begin: Pos(205, 9), End: Pos(205, 81)>,
StatementAssertion<Begin: Pos(207, 9), End: Pos(207, 97)>,
StatementAssertion<Begin: Pos(208, 9), End: Pos(208, 74)>,
StatementAssertion<Begin: Pos(209, 9), End: Pos(209, 78)>,
StatementAssertion<Begin: Pos(210, 9), End: Pos(210, 76)>,
StatementAssertion<Begin: Pos(211, 9), End: Pos(211, 72)>,
StatementAssertion<Begin: Pos(212, 9), End: Pos(212, 71)>,
]
---
public void testJoin_ArrayChar_catena_0() {
    assertEquals(null, StringUtils.join((Object[])null, ','));
    
}

---
---
public void testJoin_ArrayChar_catena_1() {
    assertEquals(TEXT_LIST_CHAR, StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR));
    
}

---
---
public void testJoin_ArrayChar_catena_2() {
    assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR));
    
}

---
---
public void testJoin_ArrayChar_catena_3() {
    assertEquals(";;foo", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR_CHAR));
    
}

---
---
public void testJoin_ArrayChar_catena_4() {
    assertEquals("foo;2", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR_CHAR));
    
}

---
---
public void testJoin_ArrayChar_catena_5() {
    assertEquals("/", StringUtils.join(MIXED_ARRAY_LIST, '/', 0, MIXED_ARRAY_LIST.length - 1));
    
}

---
---
public void testJoin_ArrayChar_catena_6() {
    assertEquals("foo", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 1));
    
}

---
---
public void testJoin_ArrayChar_catena_7() {
    assertEquals("null", StringUtils.join(NULL_TO_STRING_LIST, '/', 0, 1));
    
}

---
---
public void testJoin_ArrayChar_catena_8() {
    assertEquals("foo/2", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 2));
    
}

---
---
public void testJoin_ArrayChar_catena_9() {
    assertEquals("2", StringUtils.join(MIXED_TYPE_LIST, '/', 1, 2));
    
}

---
---
public void testJoin_ArrayChar_catena_10() {
    assertEquals("", StringUtils.join(MIXED_TYPE_LIST, '/', 2, 1));
    
}

---
@@@
Split test: org.apache.commons.lang3.StringUtilsTest::testJoin_Objectarray
file: /root/workbench/exportInfo/d4j_buggy/Lang_20/src/test/java//org/apache/commons/lang3/StringUtilsTest.java
Begin: Pos(184, 12)
End: Pos(198, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_20/src/test/java//org/apache/commons/lang3/StringUtilsTest.java
Name: testJoin_Objectarray
Childs: [StatementAssertion<Begin: Pos(186, 9), End: Pos(186, 62)>,
StatementAssertion<Begin: Pos(188, 9), End: Pos(188, 45)>,
StatementAssertion<Begin: Pos(189, 9), End: Pos(189, 58)>,
StatementAssertion<Begin: Pos(191, 9), End: Pos(191, 61)>,
StatementAssertion<Begin: Pos(192, 9), End: Pos(192, 60)>,
StatementAssertion<Begin: Pos(193, 9), End: Pos(193, 68)>,
StatementAssertion<Begin: Pos(194, 9), End: Pos(194, 76)>,
StatementAssertion<Begin: Pos(195, 9), End: Pos(195, 74)>,
StatementAssertion<Begin: Pos(196, 9), End: Pos(196, 64)>,
StatementAssertion<Begin: Pos(197, 9), End: Pos(197, 64)>,
]
---
public void testJoin_Objectarray_catena_0() {
    assertEquals(null, StringUtils.join((Object[])null));
    
}

---
---
public void testJoin_Objectarray_catena_1() {
    assertEquals("", StringUtils.join());
    
}

---
---
public void testJoin_Objectarray_catena_2() {
    assertEquals("", StringUtils.join((Object)null));
    
}

---
---
public void testJoin_Objectarray_catena_3() {
    assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST));
    
}

---
---
public void testJoin_Objectarray_catena_4() {
    assertEquals("", StringUtils.join(NULL_ARRAY_LIST));
    
}

---
---
public void testJoin_Objectarray_catena_5() {
    assertEquals("null", StringUtils.join(NULL_TO_STRING_LIST));
    
}

---
---
public void testJoin_Objectarray_catena_6() {
    assertEquals("abc", StringUtils.join(new String[] {
        "a", "b", "c"
    }));
    
}

---
---
public void testJoin_Objectarray_catena_7() {
    assertEquals("a", StringUtils.join(new String[] {
        null, "a", ""
    }));
    
}

---
---
public void testJoin_Objectarray_catena_8() {
    assertEquals("foo", StringUtils.join(MIXED_ARRAY_LIST));
    
}

---
---
public void testJoin_Objectarray_catena_9() {
    assertEquals("foo2", StringUtils.join(MIXED_TYPE_LIST));
    
}

---
--------------------
Run: Lang_5
@@@
Split test: org.apache.commons.lang3.LocaleUtilsTest::testLang865
file: /root/workbench/exportInfo/d4j_buggy/Lang_5/src/test/java//org/apache/commons/lang3/LocaleUtilsTest.java
# check: Use pattern matching: .assertValidToLocale
Use pattern matching: .assertValidToLocale
Use pattern matching: .assertValidToLocale
Begin: Pos(503, 5)
End: Pos(543, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_5/src/test/java//org/apache/commons/lang3/LocaleUtilsTest.java
Name: testLang865
Childs: [StatementAssertion<Begin: Pos(505, 9), End: Pos(505, 49)>,
StatementAssertion<Begin: Pos(506, 9), End: Pos(506, 52)>,
StatementAssertion<Begin: Pos(507, 9), End: Pos(507, 60)>,
StatementAssertion<Begin: Pos(510, 13), End: Pos(510, 71)>,
StatementAssertion<Begin: Pos(515, 13), End: Pos(515, 64)>,
StatementAssertion<Begin: Pos(520, 13), End: Pos(520, 64)>,
StatementAssertion<Begin: Pos(525, 13), End: Pos(525, 61)>,
StatementAssertion<Begin: Pos(530, 13), End: Pos(530, 61)>,
StatementAssertion<Begin: Pos(535, 13), End: Pos(535, 71)>,
StatementAssertion<Begin: Pos(540, 13), End: Pos(540, 109)>,
]
---
@Test public void testLang865_catena_0() {
    assertValidToLocale("_GB", "", "GB", "");
    try {
        LocaleUtils.toLocale("_G");
        
    }
    catch(final IllegalArgumentException iae) {
        
    }
    try {
        LocaleUtils.toLocale("_Gb");
        
    }
    catch(final IllegalArgumentException iae) {
        
    }
    try {
        LocaleUtils.toLocale("_gB");
        
    }
    catch(final IllegalArgumentException iae) {
        
    }
    try {
        LocaleUtils.toLocale("_1B");
        
    }
    catch(final IllegalArgumentException iae) {
        
    }
    try {
        LocaleUtils.toLocale("_G1");
        
    }
    catch(final IllegalArgumentException iae) {
        
    }
    try {
        LocaleUtils.toLocale("_GB_");
        
    }
    catch(final IllegalArgumentException iae) {
        
    }
    try {
        LocaleUtils.toLocale("_GBAP");
        
    }
    catch(final IllegalArgumentException iae) {
        
    }
}

---
---
@Test public void testLang865_catena_1() {
    assertValidToLocale("_GB_P", "", "GB", "P");
    try {
        LocaleUtils.toLocale("_G");
        
    }
    catch(final IllegalArgumentException iae) {
        
    }
    try {
        LocaleUtils.toLocale("_Gb");
        
    }
    catch(final IllegalArgumentException iae) {
        
    }
    try {
        LocaleUtils.toLocale("_gB");
        
    }
    catch(final IllegalArgumentException iae) {
        
    }
    try {
        LocaleUtils.toLocale("_1B");
        
    }
    catch(final IllegalArgumentException iae) {
        
    }
    try {
        LocaleUtils.toLocale("_G1");
        
    }
    catch(final IllegalArgumentException iae) {
        
    }
    try {
        LocaleUtils.toLocale("_GB_");
        
    }
    catch(final IllegalArgumentException iae) {
        
    }
    try {
        LocaleUtils.toLocale("_GBAP");
        
    }
    catch(final IllegalArgumentException iae) {
        
    }
}

---
---
@Test public void testLang865_catena_2() {
    assertValidToLocale("_GB_POSIX", "", "GB", "POSIX");
    try {
        LocaleUtils.toLocale("_G");
        
    }
    catch(final IllegalArgumentException iae) {
        
    }
    try {
        LocaleUtils.toLocale("_Gb");
        
    }
    catch(final IllegalArgumentException iae) {
        
    }
    try {
        LocaleUtils.toLocale("_gB");
        
    }
    catch(final IllegalArgumentException iae) {
        
    }
    try {
        LocaleUtils.toLocale("_1B");
        
    }
    catch(final IllegalArgumentException iae) {
        
    }
    try {
        LocaleUtils.toLocale("_G1");
        
    }
    catch(final IllegalArgumentException iae) {
        
    }
    try {
        LocaleUtils.toLocale("_GB_");
        
    }
    catch(final IllegalArgumentException iae) {
        
    }
    try {
        LocaleUtils.toLocale("_GBAP");
        
    }
    catch(final IllegalArgumentException iae) {
        
    }
}

---
---
@Test public void testLang865_catena_3() {
    try {
        LocaleUtils.toLocale("_G");
        fail("Must be at least 3 chars if starts with underscore");
        
    }
    catch(final IllegalArgumentException iae) {
        
    }
    try {
        LocaleUtils.toLocale("_Gb");
        
    }
    catch(final IllegalArgumentException iae) {
        
    }
    try {
        LocaleUtils.toLocale("_gB");
        
    }
    catch(final IllegalArgumentException iae) {
        
    }
    try {
        LocaleUtils.toLocale("_1B");
        
    }
    catch(final IllegalArgumentException iae) {
        
    }
    try {
        LocaleUtils.toLocale("_G1");
        
    }
    catch(final IllegalArgumentException iae) {
        
    }
    try {
        LocaleUtils.toLocale("_GB_");
        
    }
    catch(final IllegalArgumentException iae) {
        
    }
    try {
        LocaleUtils.toLocale("_GBAP");
        
    }
    catch(final IllegalArgumentException iae) {
        
    }
}

---
---
@Test public void testLang865_catena_4() {
    try {
        LocaleUtils.toLocale("_G");
        
    }
    catch(final IllegalArgumentException iae) {
        
    }
    try {
        LocaleUtils.toLocale("_Gb");
        fail("Must be uppercase if starts with underscore");
        
    }
    catch(final IllegalArgumentException iae) {
        
    }
    try {
        LocaleUtils.toLocale("_gB");
        
    }
    catch(final IllegalArgumentException iae) {
        
    }
    try {
        LocaleUtils.toLocale("_1B");
        
    }
    catch(final IllegalArgumentException iae) {
        
    }
    try {
        LocaleUtils.toLocale("_G1");
        
    }
    catch(final IllegalArgumentException iae) {
        
    }
    try {
        LocaleUtils.toLocale("_GB_");
        
    }
    catch(final IllegalArgumentException iae) {
        
    }
    try {
        LocaleUtils.toLocale("_GBAP");
        
    }
    catch(final IllegalArgumentException iae) {
        
    }
}

---
---
@Test public void testLang865_catena_5() {
    try {
        LocaleUtils.toLocale("_G");
        
    }
    catch(final IllegalArgumentException iae) {
        
    }
    try {
        LocaleUtils.toLocale("_Gb");
        
    }
    catch(final IllegalArgumentException iae) {
        
    }
    try {
        LocaleUtils.toLocale("_gB");
        fail("Must be uppercase if starts with underscore");
        
    }
    catch(final IllegalArgumentException iae) {
        
    }
    try {
        LocaleUtils.toLocale("_1B");
        
    }
    catch(final IllegalArgumentException iae) {
        
    }
    try {
        LocaleUtils.toLocale("_G1");
        
    }
    catch(final IllegalArgumentException iae) {
        
    }
    try {
        LocaleUtils.toLocale("_GB_");
        
    }
    catch(final IllegalArgumentException iae) {
        
    }
    try {
        LocaleUtils.toLocale("_GBAP");
        
    }
    catch(final IllegalArgumentException iae) {
        
    }
}

---
---
@Test public void testLang865_catena_6() {
    try {
        LocaleUtils.toLocale("_G");
        
    }
    catch(final IllegalArgumentException iae) {
        
    }
    try {
        LocaleUtils.toLocale("_Gb");
        
    }
    catch(final IllegalArgumentException iae) {
        
    }
    try {
        LocaleUtils.toLocale("_gB");
        
    }
    catch(final IllegalArgumentException iae) {
        
    }
    try {
        LocaleUtils.toLocale("_1B");
        fail("Must be letter if starts with underscore");
        
    }
    catch(final IllegalArgumentException iae) {
        
    }
    try {
        LocaleUtils.toLocale("_G1");
        
    }
    catch(final IllegalArgumentException iae) {
        
    }
    try {
        LocaleUtils.toLocale("_GB_");
        
    }
    catch(final IllegalArgumentException iae) {
        
    }
    try {
        LocaleUtils.toLocale("_GBAP");
        
    }
    catch(final IllegalArgumentException iae) {
        
    }
}

---
---
@Test public void testLang865_catena_7() {
    try {
        LocaleUtils.toLocale("_G");
        
    }
    catch(final IllegalArgumentException iae) {
        
    }
    try {
        LocaleUtils.toLocale("_Gb");
        
    }
    catch(final IllegalArgumentException iae) {
        
    }
    try {
        LocaleUtils.toLocale("_gB");
        
    }
    catch(final IllegalArgumentException iae) {
        
    }
    try {
        LocaleUtils.toLocale("_1B");
        
    }
    catch(final IllegalArgumentException iae) {
        
    }
    try {
        LocaleUtils.toLocale("_G1");
        fail("Must be letter if starts with underscore");
        
    }
    catch(final IllegalArgumentException iae) {
        
    }
    try {
        LocaleUtils.toLocale("_GB_");
        
    }
    catch(final IllegalArgumentException iae) {
        
    }
    try {
        LocaleUtils.toLocale("_GBAP");
        
    }
    catch(final IllegalArgumentException iae) {
        
    }
}

---
---
@Test public void testLang865_catena_8() {
    try {
        LocaleUtils.toLocale("_G");
        
    }
    catch(final IllegalArgumentException iae) {
        
    }
    try {
        LocaleUtils.toLocale("_Gb");
        
    }
    catch(final IllegalArgumentException iae) {
        
    }
    try {
        LocaleUtils.toLocale("_gB");
        
    }
    catch(final IllegalArgumentException iae) {
        
    }
    try {
        LocaleUtils.toLocale("_1B");
        
    }
    catch(final IllegalArgumentException iae) {
        
    }
    try {
        LocaleUtils.toLocale("_G1");
        
    }
    catch(final IllegalArgumentException iae) {
        
    }
    try {
        LocaleUtils.toLocale("_GB_");
        fail("Must be at least 5 chars if starts with underscore");
        
    }
    catch(final IllegalArgumentException iae) {
        
    }
    try {
        LocaleUtils.toLocale("_GBAP");
        
    }
    catch(final IllegalArgumentException iae) {
        
    }
}

---
---
@Test public void testLang865_catena_9() {
    try {
        LocaleUtils.toLocale("_G");
        
    }
    catch(final IllegalArgumentException iae) {
        
    }
    try {
        LocaleUtils.toLocale("_Gb");
        
    }
    catch(final IllegalArgumentException iae) {
        
    }
    try {
        LocaleUtils.toLocale("_gB");
        
    }
    catch(final IllegalArgumentException iae) {
        
    }
    try {
        LocaleUtils.toLocale("_1B");
        
    }
    catch(final IllegalArgumentException iae) {
        
    }
    try {
        LocaleUtils.toLocale("_G1");
        
    }
    catch(final IllegalArgumentException iae) {
        
    }
    try {
        LocaleUtils.toLocale("_GB_");
        
    }
    catch(final IllegalArgumentException iae) {
        
    }
    try {
        LocaleUtils.toLocale("_GBAP");
        fail("Must have underscore after the country if starts with underscore and is at least 5 chars");
        
    }
    catch(final IllegalArgumentException iae) {
        
    }
}

---
--------------------
Run: Lang_42
@@@
Split test: org.apache.commons.lang.StringEscapeUtilsTest::testEscapeHtmlHighUnicode
file: /root/workbench/exportInfo/d4j_buggy/Lang_42/src/test//org/apache/commons/lang/StringEscapeUtilsTest.java
Begin: Pos(420, 12)
End: Pos(431, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_42/src/test//org/apache/commons/lang/StringEscapeUtilsTest.java
Name: testEscapeHtmlHighUnicode
Childs: [StatementAssertion<Begin: Pos(430, 9), End: Pos(430, 86)>,
]
--------------------
Run: Lang_64
@@@
Split test: org.apache.commons.lang.enums.ValuedEnumTest::testCompareTo_otherEnumType
file: /root/workbench/exportInfo/d4j_buggy/Lang_64/src/test//org/apache/commons/lang/enums/ValuedEnumTest.java
Begin: Pos(105, 12)
End: Pos(112, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_64/src/test//org/apache/commons/lang/enums/ValuedEnumTest.java
Name: testCompareTo_otherEnumType
Childs: [StatementAssertion<Begin: Pos(108, 13), End: Pos(108, 19)>,
]
--------------------
Run: Lang_23
@@@
Split test: org.apache.commons.lang3.text.ExtendedMessageFormatTest::testEqualsHashcode
file: /root/workbench/exportInfo/d4j_buggy/Lang_23/src/test/java//org/apache/commons/lang3/text/ExtendedMessageFormatTest.java
Begin: Pos(270, 12)
End: Pos(307, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_23/src/test/java//org/apache/commons/lang3/text/ExtendedMessageFormatTest.java
Name: testEqualsHashcode
Childs: [StatementAssertion<Begin: Pos(280, 9), End: Pos(280, 56)>,
StatementAssertion<Begin: Pos(281, 9), End: Pos(281, 73)>,
StatementAssertion<Begin: Pos(285, 9), End: Pos(285, 59)>,
StatementAssertion<Begin: Pos(286, 9), End: Pos(286, 76)>,
StatementAssertion<Begin: Pos(290, 9), End: Pos(290, 59)>,
StatementAssertion<Begin: Pos(291, 9), End: Pos(291, 76)>,
StatementAssertion<Begin: Pos(295, 9), End: Pos(295, 62)>,
StatementAssertion<Begin: Pos(296, 9), End: Pos(296, 79)>,
StatementAssertion<Begin: Pos(300, 9), End: Pos(300, 63)>,
StatementAssertion<Begin: Pos(301, 9), End: Pos(301, 80)>,
StatementAssertion<Begin: Pos(305, 9), End: Pos(305, 60)>,
StatementAssertion<Begin: Pos(306, 9), End: Pos(306, 77)>,
]
---
public void testEqualsHashcode_catena_0() {
    Map < String,  ? extends FormatFactory > registry = Collections.singletonMap("testfmt", new LowerCaseFormatFactory());
    Map < String,  ? extends FormatFactory > otherRegitry = Collections.singletonMap("testfmt", new UpperCaseFormatFactory());
    String pattern = "Pattern: {0,testfmt}";
    ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, Locale.US, registry);
    ExtendedMessageFormat other = null;
    assertTrue("same, equals()", emf.equals(emf));
    other = new ExtendedMessageFormat(pattern, Locale.US, registry);
    other = new OtherExtendedMessageFormat(pattern, Locale.US, registry);
    other = new ExtendedMessageFormat("X" + pattern, Locale.US, registry);
    other = new ExtendedMessageFormat(pattern, Locale.US, otherRegitry);
    other = new ExtendedMessageFormat(pattern, Locale.FRANCE, registry);
    
}

---
---
public void testEqualsHashcode_catena_1() {
    Map < String,  ? extends FormatFactory > registry = Collections.singletonMap("testfmt", new LowerCaseFormatFactory());
    Map < String,  ? extends FormatFactory > otherRegitry = Collections.singletonMap("testfmt", new UpperCaseFormatFactory());
    String pattern = "Pattern: {0,testfmt}";
    ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, Locale.US, registry);
    ExtendedMessageFormat other = null;
    assertTrue("same, hashcode()", emf.hashCode() == emf.hashCode());
    other = new ExtendedMessageFormat(pattern, Locale.US, registry);
    other = new OtherExtendedMessageFormat(pattern, Locale.US, registry);
    other = new ExtendedMessageFormat("X" + pattern, Locale.US, registry);
    other = new ExtendedMessageFormat(pattern, Locale.US, otherRegitry);
    other = new ExtendedMessageFormat(pattern, Locale.FRANCE, registry);
    
}

---
---
public void testEqualsHashcode_catena_2() {
    Map < String,  ? extends FormatFactory > registry = Collections.singletonMap("testfmt", new LowerCaseFormatFactory());
    Map < String,  ? extends FormatFactory > otherRegitry = Collections.singletonMap("testfmt", new UpperCaseFormatFactory());
    String pattern = "Pattern: {0,testfmt}";
    ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, Locale.US, registry);
    ExtendedMessageFormat other = null;
    other = new ExtendedMessageFormat(pattern, Locale.US, registry);
    assertTrue("equal, equals()", emf.equals(other));
    other = new OtherExtendedMessageFormat(pattern, Locale.US, registry);
    other = new ExtendedMessageFormat("X" + pattern, Locale.US, registry);
    other = new ExtendedMessageFormat(pattern, Locale.US, otherRegitry);
    other = new ExtendedMessageFormat(pattern, Locale.FRANCE, registry);
    
}

---
---
public void testEqualsHashcode_catena_3() {
    Map < String,  ? extends FormatFactory > registry = Collections.singletonMap("testfmt", new LowerCaseFormatFactory());
    Map < String,  ? extends FormatFactory > otherRegitry = Collections.singletonMap("testfmt", new UpperCaseFormatFactory());
    String pattern = "Pattern: {0,testfmt}";
    ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, Locale.US, registry);
    ExtendedMessageFormat other = null;
    other = new ExtendedMessageFormat(pattern, Locale.US, registry);
    assertTrue("equal, hashcode()", emf.hashCode() == other.hashCode());
    other = new OtherExtendedMessageFormat(pattern, Locale.US, registry);
    other = new ExtendedMessageFormat("X" + pattern, Locale.US, registry);
    other = new ExtendedMessageFormat(pattern, Locale.US, otherRegitry);
    other = new ExtendedMessageFormat(pattern, Locale.FRANCE, registry);
    
}

---
---
public void testEqualsHashcode_catena_4() {
    Map < String,  ? extends FormatFactory > registry = Collections.singletonMap("testfmt", new LowerCaseFormatFactory());
    Map < String,  ? extends FormatFactory > otherRegitry = Collections.singletonMap("testfmt", new UpperCaseFormatFactory());
    String pattern = "Pattern: {0,testfmt}";
    ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, Locale.US, registry);
    ExtendedMessageFormat other = null;
    other = new ExtendedMessageFormat(pattern, Locale.US, registry);
    other = new OtherExtendedMessageFormat(pattern, Locale.US, registry);
    assertFalse("class, equals()", emf.equals(other));
    other = new ExtendedMessageFormat("X" + pattern, Locale.US, registry);
    other = new ExtendedMessageFormat(pattern, Locale.US, otherRegitry);
    other = new ExtendedMessageFormat(pattern, Locale.FRANCE, registry);
    
}

---
---
public void testEqualsHashcode_catena_5() {
    Map < String,  ? extends FormatFactory > registry = Collections.singletonMap("testfmt", new LowerCaseFormatFactory());
    Map < String,  ? extends FormatFactory > otherRegitry = Collections.singletonMap("testfmt", new UpperCaseFormatFactory());
    String pattern = "Pattern: {0,testfmt}";
    ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, Locale.US, registry);
    ExtendedMessageFormat other = null;
    other = new ExtendedMessageFormat(pattern, Locale.US, registry);
    other = new OtherExtendedMessageFormat(pattern, Locale.US, registry);
    assertTrue("class, hashcode()", emf.hashCode() == other.hashCode());
    other = new ExtendedMessageFormat("X" + pattern, Locale.US, registry);
    other = new ExtendedMessageFormat(pattern, Locale.US, otherRegitry);
    other = new ExtendedMessageFormat(pattern, Locale.FRANCE, registry);
    
}

---
---
public void testEqualsHashcode_catena_6() {
    Map < String,  ? extends FormatFactory > registry = Collections.singletonMap("testfmt", new LowerCaseFormatFactory());
    Map < String,  ? extends FormatFactory > otherRegitry = Collections.singletonMap("testfmt", new UpperCaseFormatFactory());
    String pattern = "Pattern: {0,testfmt}";
    ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, Locale.US, registry);
    ExtendedMessageFormat other = null;
    other = new ExtendedMessageFormat(pattern, Locale.US, registry);
    other = new OtherExtendedMessageFormat(pattern, Locale.US, registry);
    other = new ExtendedMessageFormat("X" + pattern, Locale.US, registry);
    assertFalse("pattern, equals()", emf.equals(other));
    other = new ExtendedMessageFormat(pattern, Locale.US, otherRegitry);
    other = new ExtendedMessageFormat(pattern, Locale.FRANCE, registry);
    
}

---
---
public void testEqualsHashcode_catena_7() {
    Map < String,  ? extends FormatFactory > registry = Collections.singletonMap("testfmt", new LowerCaseFormatFactory());
    Map < String,  ? extends FormatFactory > otherRegitry = Collections.singletonMap("testfmt", new UpperCaseFormatFactory());
    String pattern = "Pattern: {0,testfmt}";
    ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, Locale.US, registry);
    ExtendedMessageFormat other = null;
    other = new ExtendedMessageFormat(pattern, Locale.US, registry);
    other = new OtherExtendedMessageFormat(pattern, Locale.US, registry);
    other = new ExtendedMessageFormat("X" + pattern, Locale.US, registry);
    assertFalse("pattern, hashcode()", emf.hashCode() == other.hashCode());
    other = new ExtendedMessageFormat(pattern, Locale.US, otherRegitry);
    other = new ExtendedMessageFormat(pattern, Locale.FRANCE, registry);
    
}

---
---
public void testEqualsHashcode_catena_8() {
    Map < String,  ? extends FormatFactory > registry = Collections.singletonMap("testfmt", new LowerCaseFormatFactory());
    Map < String,  ? extends FormatFactory > otherRegitry = Collections.singletonMap("testfmt", new UpperCaseFormatFactory());
    String pattern = "Pattern: {0,testfmt}";
    ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, Locale.US, registry);
    ExtendedMessageFormat other = null;
    other = new ExtendedMessageFormat(pattern, Locale.US, registry);
    other = new OtherExtendedMessageFormat(pattern, Locale.US, registry);
    other = new ExtendedMessageFormat("X" + pattern, Locale.US, registry);
    other = new ExtendedMessageFormat(pattern, Locale.US, otherRegitry);
    assertFalse("registry, equals()", emf.equals(other));
    other = new ExtendedMessageFormat(pattern, Locale.FRANCE, registry);
    
}

---
---
public void testEqualsHashcode_catena_9() {
    Map < String,  ? extends FormatFactory > registry = Collections.singletonMap("testfmt", new LowerCaseFormatFactory());
    Map < String,  ? extends FormatFactory > otherRegitry = Collections.singletonMap("testfmt", new UpperCaseFormatFactory());
    String pattern = "Pattern: {0,testfmt}";
    ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, Locale.US, registry);
    ExtendedMessageFormat other = null;
    other = new ExtendedMessageFormat(pattern, Locale.US, registry);
    other = new OtherExtendedMessageFormat(pattern, Locale.US, registry);
    other = new ExtendedMessageFormat("X" + pattern, Locale.US, registry);
    other = new ExtendedMessageFormat(pattern, Locale.US, otherRegitry);
    assertFalse("registry, hashcode()", emf.hashCode() == other.hashCode());
    other = new ExtendedMessageFormat(pattern, Locale.FRANCE, registry);
    
}

---
---
public void testEqualsHashcode_catena_10() {
    Map < String,  ? extends FormatFactory > registry = Collections.singletonMap("testfmt", new LowerCaseFormatFactory());
    Map < String,  ? extends FormatFactory > otherRegitry = Collections.singletonMap("testfmt", new UpperCaseFormatFactory());
    String pattern = "Pattern: {0,testfmt}";
    ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, Locale.US, registry);
    ExtendedMessageFormat other = null;
    other = new ExtendedMessageFormat(pattern, Locale.US, registry);
    other = new OtherExtendedMessageFormat(pattern, Locale.US, registry);
    other = new ExtendedMessageFormat("X" + pattern, Locale.US, registry);
    other = new ExtendedMessageFormat(pattern, Locale.US, otherRegitry);
    other = new ExtendedMessageFormat(pattern, Locale.FRANCE, registry);
    assertFalse("locale, equals()", emf.equals(other));
    
}

---
---
public void testEqualsHashcode_catena_11() {
    Map < String,  ? extends FormatFactory > registry = Collections.singletonMap("testfmt", new LowerCaseFormatFactory());
    Map < String,  ? extends FormatFactory > otherRegitry = Collections.singletonMap("testfmt", new UpperCaseFormatFactory());
    String pattern = "Pattern: {0,testfmt}";
    ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, Locale.US, registry);
    ExtendedMessageFormat other = null;
    other = new ExtendedMessageFormat(pattern, Locale.US, registry);
    other = new OtherExtendedMessageFormat(pattern, Locale.US, registry);
    other = new ExtendedMessageFormat("X" + pattern, Locale.US, registry);
    other = new ExtendedMessageFormat(pattern, Locale.US, otherRegitry);
    other = new ExtendedMessageFormat(pattern, Locale.FRANCE, registry);
    assertTrue("locale, hashcode()", emf.hashCode() == other.hashCode());
    
}

---
--------------------
Run: Lang_60
@@@
Split test: org.apache.commons.lang.text.StrBuilderTest::testLang295
file: /root/workbench/exportInfo/d4j_buggy/Lang_60/src/test//org/apache/commons/lang/text/StrBuilderTest.java
Begin: Pos(1745, 12)
End: Pos(1750, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_60/src/test//org/apache/commons/lang/text/StrBuilderTest.java
Name: testLang295
Childs: [StatementAssertion<Begin: Pos(1748, 9), End: Pos(1748, 108)>,
StatementAssertion<Begin: Pos(1749, 9), End: Pos(1749, 111)>,
]
---
public void testLang295_catena_0() {
    StrBuilder sb = new StrBuilder("onetwothree");
    sb.deleteFirst("three");
    assertFalse("The contains(char) method is looking beyond the end of the string", sb.contains('h'));
    
}

---
---
public void testLang295_catena_1() {
    StrBuilder sb = new StrBuilder("onetwothree");
    sb.deleteFirst("three");
    assertEquals("The indexOf(char) method is looking beyond the end of the string",  - 1, sb.indexOf('h'));
    
}

---
--------------------
Run: Lang_15
@@@
Split test: org.apache.commons.lang3.reflect.TypeUtilsTest::testGetTypeArguments
file: /root/workbench/exportInfo/d4j_buggy/Lang_15/src/test/java//org/apache/commons/lang3/reflect/TypeUtilsTest.java
Begin: Pos(471, 5)
End: Pos(508, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_15/src/test/java//org/apache/commons/lang3/reflect/TypeUtilsTest.java
Name: testGetTypeArguments
Childs: [StatementAssertion<Begin: Pos(479, 9), End: Pos(480, 60)>,
StatementAssertion<Begin: Pos(482, 9), End: Pos(483, 52)>,
StatementAssertion<Begin: Pos(487, 9), End: Pos(488, 60)>,
StatementAssertion<Begin: Pos(490, 9), End: Pos(491, 52)>,
StatementAssertion<Begin: Pos(496, 9), End: Pos(497, 60)>,
StatementAssertion<Begin: Pos(500, 9), End: Pos(500, 54)>,
StatementAssertion<Begin: Pos(501, 9), End: Pos(501, 100)>,
StatementAssertion<Begin: Pos(502, 9), End: Pos(502, 108)>,
StatementAssertion<Begin: Pos(505, 9), End: Pos(505, 54)>,
StatementAssertion<Begin: Pos(506, 9), End: Pos(506, 97)>,
StatementAssertion<Begin: Pos(507, 9), End: Pos(507, 119)>,
]
---
@Test public void testGetTypeArguments_catena_0() {
    Map < TypeVariable <  ?  > , Type > typeVarAssigns;
    TypeVariable <  ?  > treeSetTypeVar;
    Type typeArg;
    typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class);
    treeSetTypeVar = Comparable.class.getTypeParameters()[0];
    Assert.assertTrue("Type var assigns for Comparable from Integer: " + typeVarAssigns, typeVarAssigns.containsKey(treeSetTypeVar));
    typeArg = typeVarAssigns.get(treeSetTypeVar);
    typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class);
    treeSetTypeVar = Comparable.class.getTypeParameters()[0];
    typeArg = typeVarAssigns.get(treeSetTypeVar);
    Collection < Integer > col = Arrays.asList(new Integer[0]);
    typeVarAssigns = TypeUtils.getTypeArguments(List.class, Collection.class);
    treeSetTypeVar = Comparable.class.getTypeParameters()[0];
    typeVarAssigns = TypeUtils.getTypeArguments(AAAClass.BBBClass.class, AAClass.BBClass.class);
    typeVarAssigns = TypeUtils.getTypeArguments(Other.class, This.class);
    
}

---
---
@Test public void testGetTypeArguments_catena_1() {
    Map < TypeVariable <  ?  > , Type > typeVarAssigns;
    TypeVariable <  ?  > treeSetTypeVar;
    Type typeArg;
    typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class);
    treeSetTypeVar = Comparable.class.getTypeParameters()[0];
    typeArg = typeVarAssigns.get(treeSetTypeVar);
    Assert.assertEquals("Type argument of Comparable from Integer: " + typeArg, Integer.class, typeVarAssigns.get(treeSetTypeVar));
    typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class);
    treeSetTypeVar = Comparable.class.getTypeParameters()[0];
    typeArg = typeVarAssigns.get(treeSetTypeVar);
    Collection < Integer > col = Arrays.asList(new Integer[0]);
    typeVarAssigns = TypeUtils.getTypeArguments(List.class, Collection.class);
    treeSetTypeVar = Comparable.class.getTypeParameters()[0];
    typeVarAssigns = TypeUtils.getTypeArguments(AAAClass.BBBClass.class, AAClass.BBClass.class);
    typeVarAssigns = TypeUtils.getTypeArguments(Other.class, This.class);
    
}

---
---
@Test public void testGetTypeArguments_catena_2() {
    Map < TypeVariable <  ?  > , Type > typeVarAssigns;
    TypeVariable <  ?  > treeSetTypeVar;
    Type typeArg;
    typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class);
    treeSetTypeVar = Comparable.class.getTypeParameters()[0];
    typeArg = typeVarAssigns.get(treeSetTypeVar);
    typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class);
    treeSetTypeVar = Comparable.class.getTypeParameters()[0];
    Assert.assertTrue("Type var assigns for Comparable from int: " + typeVarAssigns, typeVarAssigns.containsKey(treeSetTypeVar));
    typeArg = typeVarAssigns.get(treeSetTypeVar);
    Collection < Integer > col = Arrays.asList(new Integer[0]);
    typeVarAssigns = TypeUtils.getTypeArguments(List.class, Collection.class);
    treeSetTypeVar = Comparable.class.getTypeParameters()[0];
    typeVarAssigns = TypeUtils.getTypeArguments(AAAClass.BBBClass.class, AAClass.BBClass.class);
    typeVarAssigns = TypeUtils.getTypeArguments(Other.class, This.class);
    
}

---
---
@Test public void testGetTypeArguments_catena_3() {
    Map < TypeVariable <  ?  > , Type > typeVarAssigns;
    TypeVariable <  ?  > treeSetTypeVar;
    Type typeArg;
    typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class);
    treeSetTypeVar = Comparable.class.getTypeParameters()[0];
    typeArg = typeVarAssigns.get(treeSetTypeVar);
    typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class);
    treeSetTypeVar = Comparable.class.getTypeParameters()[0];
    typeArg = typeVarAssigns.get(treeSetTypeVar);
    Assert.assertEquals("Type argument of Comparable from int: " + typeArg, Integer.class, typeVarAssigns.get(treeSetTypeVar));
    Collection < Integer > col = Arrays.asList(new Integer[0]);
    typeVarAssigns = TypeUtils.getTypeArguments(List.class, Collection.class);
    treeSetTypeVar = Comparable.class.getTypeParameters()[0];
    typeVarAssigns = TypeUtils.getTypeArguments(AAAClass.BBBClass.class, AAClass.BBClass.class);
    typeVarAssigns = TypeUtils.getTypeArguments(Other.class, This.class);
    
}

---
---
@Test public void testGetTypeArguments_catena_4() {
    Map < TypeVariable <  ?  > , Type > typeVarAssigns;
    TypeVariable <  ?  > treeSetTypeVar;
    Type typeArg;
    typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class);
    treeSetTypeVar = Comparable.class.getTypeParameters()[0];
    typeArg = typeVarAssigns.get(treeSetTypeVar);
    typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class);
    treeSetTypeVar = Comparable.class.getTypeParameters()[0];
    typeArg = typeVarAssigns.get(treeSetTypeVar);
    Collection < Integer > col = Arrays.asList(new Integer[0]);
    typeVarAssigns = TypeUtils.getTypeArguments(List.class, Collection.class);
    treeSetTypeVar = Comparable.class.getTypeParameters()[0];
    Assert.assertFalse("Type var assigns for Collection from List: " + typeVarAssigns, typeVarAssigns.containsKey(treeSetTypeVar));
    typeVarAssigns = TypeUtils.getTypeArguments(AAAClass.BBBClass.class, AAClass.BBClass.class);
    typeVarAssigns = TypeUtils.getTypeArguments(Other.class, This.class);
    
}

---
---
@Test public void testGetTypeArguments_catena_5() {
    Map < TypeVariable <  ?  > , Type > typeVarAssigns;
    TypeVariable <  ?  > treeSetTypeVar;
    Type typeArg;
    typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class);
    treeSetTypeVar = Comparable.class.getTypeParameters()[0];
    typeArg = typeVarAssigns.get(treeSetTypeVar);
    typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class);
    treeSetTypeVar = Comparable.class.getTypeParameters()[0];
    typeArg = typeVarAssigns.get(treeSetTypeVar);
    Collection < Integer > col = Arrays.asList(new Integer[0]);
    typeVarAssigns = TypeUtils.getTypeArguments(List.class, Collection.class);
    treeSetTypeVar = Comparable.class.getTypeParameters()[0];
    typeVarAssigns = TypeUtils.getTypeArguments(AAAClass.BBBClass.class, AAClass.BBClass.class);
    Assert.assertTrue(typeVarAssigns.size() == 2);
    typeVarAssigns = TypeUtils.getTypeArguments(Other.class, This.class);
    
}

---
---
@Test public void testGetTypeArguments_catena_6() {
    Map < TypeVariable <  ?  > , Type > typeVarAssigns;
    TypeVariable <  ?  > treeSetTypeVar;
    Type typeArg;
    typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class);
    treeSetTypeVar = Comparable.class.getTypeParameters()[0];
    typeArg = typeVarAssigns.get(treeSetTypeVar);
    typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class);
    treeSetTypeVar = Comparable.class.getTypeParameters()[0];
    typeArg = typeVarAssigns.get(treeSetTypeVar);
    Collection < Integer > col = Arrays.asList(new Integer[0]);
    typeVarAssigns = TypeUtils.getTypeArguments(List.class, Collection.class);
    treeSetTypeVar = Comparable.class.getTypeParameters()[0];
    typeVarAssigns = TypeUtils.getTypeArguments(AAAClass.BBBClass.class, AAClass.BBClass.class);
    Assert.assertEquals(String.class, typeVarAssigns.get(AAClass.class.getTypeParameters()[0]));
    typeVarAssigns = TypeUtils.getTypeArguments(Other.class, This.class);
    
}

---
---
@Test public void testGetTypeArguments_catena_7() {
    Map < TypeVariable <  ?  > , Type > typeVarAssigns;
    TypeVariable <  ?  > treeSetTypeVar;
    Type typeArg;
    typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class);
    treeSetTypeVar = Comparable.class.getTypeParameters()[0];
    typeArg = typeVarAssigns.get(treeSetTypeVar);
    typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class);
    treeSetTypeVar = Comparable.class.getTypeParameters()[0];
    typeArg = typeVarAssigns.get(treeSetTypeVar);
    Collection < Integer > col = Arrays.asList(new Integer[0]);
    typeVarAssigns = TypeUtils.getTypeArguments(List.class, Collection.class);
    treeSetTypeVar = Comparable.class.getTypeParameters()[0];
    typeVarAssigns = TypeUtils.getTypeArguments(AAAClass.BBBClass.class, AAClass.BBClass.class);
    Assert.assertEquals(String.class, typeVarAssigns.get(AAClass.BBClass.class.getTypeParameters()[0]));
    typeVarAssigns = TypeUtils.getTypeArguments(Other.class, This.class);
    
}

---
---
@Test public void testGetTypeArguments_catena_8() {
    Map < TypeVariable <  ?  > , Type > typeVarAssigns;
    TypeVariable <  ?  > treeSetTypeVar;
    Type typeArg;
    typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class);
    treeSetTypeVar = Comparable.class.getTypeParameters()[0];
    typeArg = typeVarAssigns.get(treeSetTypeVar);
    typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class);
    treeSetTypeVar = Comparable.class.getTypeParameters()[0];
    typeArg = typeVarAssigns.get(treeSetTypeVar);
    Collection < Integer > col = Arrays.asList(new Integer[0]);
    typeVarAssigns = TypeUtils.getTypeArguments(List.class, Collection.class);
    treeSetTypeVar = Comparable.class.getTypeParameters()[0];
    typeVarAssigns = TypeUtils.getTypeArguments(AAAClass.BBBClass.class, AAClass.BBClass.class);
    typeVarAssigns = TypeUtils.getTypeArguments(Other.class, This.class);
    Assert.assertEquals(2, typeVarAssigns.size());
    
}

---
---
@Test public void testGetTypeArguments_catena_9() {
    Map < TypeVariable <  ?  > , Type > typeVarAssigns;
    TypeVariable <  ?  > treeSetTypeVar;
    Type typeArg;
    typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class);
    treeSetTypeVar = Comparable.class.getTypeParameters()[0];
    typeArg = typeVarAssigns.get(treeSetTypeVar);
    typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class);
    treeSetTypeVar = Comparable.class.getTypeParameters()[0];
    typeArg = typeVarAssigns.get(treeSetTypeVar);
    Collection < Integer > col = Arrays.asList(new Integer[0]);
    typeVarAssigns = TypeUtils.getTypeArguments(List.class, Collection.class);
    treeSetTypeVar = Comparable.class.getTypeParameters()[0];
    typeVarAssigns = TypeUtils.getTypeArguments(AAAClass.BBBClass.class, AAClass.BBClass.class);
    typeVarAssigns = TypeUtils.getTypeArguments(Other.class, This.class);
    Assert.assertEquals(String.class, typeVarAssigns.get(This.class.getTypeParameters()[0]));
    
}

---
---
@Test public void testGetTypeArguments_catena_10() {
    Map < TypeVariable <  ?  > , Type > typeVarAssigns;
    TypeVariable <  ?  > treeSetTypeVar;
    Type typeArg;
    typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class);
    treeSetTypeVar = Comparable.class.getTypeParameters()[0];
    typeArg = typeVarAssigns.get(treeSetTypeVar);
    typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class);
    treeSetTypeVar = Comparable.class.getTypeParameters()[0];
    typeArg = typeVarAssigns.get(treeSetTypeVar);
    Collection < Integer > col = Arrays.asList(new Integer[0]);
    typeVarAssigns = TypeUtils.getTypeArguments(List.class, Collection.class);
    treeSetTypeVar = Comparable.class.getTypeParameters()[0];
    typeVarAssigns = TypeUtils.getTypeArguments(AAAClass.BBBClass.class, AAClass.BBClass.class);
    typeVarAssigns = TypeUtils.getTypeArguments(Other.class, This.class);
    Assert.assertEquals(Other.class.getTypeParameters()[0], typeVarAssigns.get(This.class.getTypeParameters()[1]));
    
}

---
@@@
Split test: org.apache.commons.lang3.reflect.TypeUtilsTest::testIsAssignable
file: /root/workbench/exportInfo/d4j_buggy/Lang_15/src/test/java//org/apache/commons/lang3/reflect/TypeUtilsTest.java
Begin: Pos(106, 5)
End: Pos(442, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_15/src/test/java//org/apache/commons/lang3/reflect/TypeUtilsTest.java
Name: testIsAssignable
Childs: [StatementAssertion<Begin: Pos(130, 9), End: Pos(130, 52)>,
StatementAssertion<Begin: Pos(132, 9), End: Pos(132, 52)>,
StatementAssertion<Begin: Pos(134, 9), End: Pos(134, 52)>,
StatementAssertion<Begin: Pos(136, 9), End: Pos(136, 52)>,
StatementAssertion<Begin: Pos(138, 9), End: Pos(138, 52)>,
StatementAssertion<Begin: Pos(140, 9), End: Pos(140, 52)>,
StatementAssertion<Begin: Pos(142, 9), End: Pos(142, 52)>,
StatementAssertion<Begin: Pos(144, 9), End: Pos(144, 52)>,
StatementAssertion<Begin: Pos(146, 9), End: Pos(146, 52)>,
StatementAssertion<Begin: Pos(148, 9), End: Pos(148, 52)>,
StatementAssertion<Begin: Pos(150, 9), End: Pos(150, 52)>,
StatementAssertion<Begin: Pos(152, 9), End: Pos(152, 52)>,
StatementAssertion<Begin: Pos(154, 9), End: Pos(154, 52)>,
StatementAssertion<Begin: Pos(156, 9), End: Pos(156, 52)>,
StatementAssertion<Begin: Pos(158, 9), End: Pos(158, 52)>,
StatementAssertion<Begin: Pos(160, 9), End: Pos(160, 53)>,
StatementAssertion<Begin: Pos(162, 9), End: Pos(162, 52)>,
StatementAssertion<Begin: Pos(164, 9), End: Pos(164, 53)>,
StatementAssertion<Begin: Pos(166, 9), End: Pos(166, 53)>,
StatementAssertion<Begin: Pos(168, 9), End: Pos(168, 53)>,
StatementAssertion<Begin: Pos(170, 9), End: Pos(170, 53)>,
StatementAssertion<Begin: Pos(172, 9), End: Pos(172, 53)>,
StatementAssertion<Begin: Pos(174, 9), End: Pos(174, 52)>,
StatementAssertion<Begin: Pos(176, 9), End: Pos(176, 53)>,
StatementAssertion<Begin: Pos(178, 9), End: Pos(178, 52)>,
StatementAssertion<Begin: Pos(180, 9), End: Pos(180, 53)>,
StatementAssertion<Begin: Pos(182, 9), End: Pos(182, 52)>,
StatementAssertion<Begin: Pos(184, 9), End: Pos(184, 53)>,
StatementAssertion<Begin: Pos(186, 9), End: Pos(186, 52)>,
StatementAssertion<Begin: Pos(188, 9), End: Pos(188, 53)>,
StatementAssertion<Begin: Pos(190, 9), End: Pos(190, 52)>,
StatementAssertion<Begin: Pos(192, 9), End: Pos(192, 53)>,
StatementAssertion<Begin: Pos(194, 9), End: Pos(194, 52)>,
StatementAssertion<Begin: Pos(196, 9), End: Pos(196, 52)>,
StatementAssertion<Begin: Pos(198, 9), End: Pos(198, 53)>,
StatementAssertion<Begin: Pos(200, 9), End: Pos(200, 53)>,
StatementAssertion<Begin: Pos(202, 9), End: Pos(202, 53)>,
StatementAssertion<Begin: Pos(204, 9), End: Pos(204, 53)>,
StatementAssertion<Begin: Pos(206, 9), End: Pos(206, 52)>,
StatementAssertion<Begin: Pos(208, 9), End: Pos(208, 53)>,
StatementAssertion<Begin: Pos(210, 9), End: Pos(210, 52)>,
StatementAssertion<Begin: Pos(212, 9), End: Pos(212, 52)>,
StatementAssertion<Begin: Pos(214, 9), End: Pos(214, 53)>,
StatementAssertion<Begin: Pos(216, 9), End: Pos(216, 52)>,
StatementAssertion<Begin: Pos(218, 9), End: Pos(218, 53)>,
StatementAssertion<Begin: Pos(220, 9), End: Pos(220, 52)>,
StatementAssertion<Begin: Pos(222, 9), End: Pos(222, 53)>,
StatementAssertion<Begin: Pos(224, 9), End: Pos(224, 53)>,
StatementAssertion<Begin: Pos(226, 9), End: Pos(226, 52)>,
StatementAssertion<Begin: Pos(229, 9), End: Pos(229, 52)>,
StatementAssertion<Begin: Pos(231, 9), End: Pos(231, 52)>,
StatementAssertion<Begin: Pos(233, 9), End: Pos(233, 52)>,
StatementAssertion<Begin: Pos(235, 9), End: Pos(235, 52)>,
StatementAssertion<Begin: Pos(237, 9), End: Pos(237, 52)>,
StatementAssertion<Begin: Pos(239, 9), End: Pos(239, 53)>,
StatementAssertion<Begin: Pos(241, 9), End: Pos(241, 53)>,
StatementAssertion<Begin: Pos(243, 9), End: Pos(243, 53)>,
StatementAssertion<Begin: Pos(245, 9), End: Pos(245, 53)>,
StatementAssertion<Begin: Pos(247, 9), End: Pos(247, 53)>,
StatementAssertion<Begin: Pos(249, 9), End: Pos(249, 53)>,
StatementAssertion<Begin: Pos(251, 9), End: Pos(251, 53)>,
StatementAssertion<Begin: Pos(253, 9), End: Pos(253, 53)>,
StatementAssertion<Begin: Pos(255, 9), End: Pos(255, 52)>,
StatementAssertion<Begin: Pos(257, 9), End: Pos(257, 52)>,
StatementAssertion<Begin: Pos(259, 9), End: Pos(259, 53)>,
StatementAssertion<Begin: Pos(261, 9), End: Pos(261, 53)>,
StatementAssertion<Begin: Pos(263, 9), End: Pos(263, 54)>,
StatementAssertion<Begin: Pos(265, 9), End: Pos(265, 54)>,
StatementAssertion<Begin: Pos(267, 9), End: Pos(267, 54)>,
StatementAssertion<Begin: Pos(269, 9), End: Pos(269, 54)>,
StatementAssertion<Begin: Pos(271, 9), End: Pos(271, 54)>,
StatementAssertion<Begin: Pos(273, 9), End: Pos(273, 53)>,
StatementAssertion<Begin: Pos(275, 9), End: Pos(275, 54)>,
StatementAssertion<Begin: Pos(277, 9), End: Pos(277, 52)>,
StatementAssertion<Begin: Pos(279, 9), End: Pos(279, 54)>,
StatementAssertion<Begin: Pos(281, 9), End: Pos(281, 53)>,
StatementAssertion<Begin: Pos(283, 9), End: Pos(283, 54)>,
StatementAssertion<Begin: Pos(285, 9), End: Pos(285, 53)>,
StatementAssertion<Begin: Pos(287, 9), End: Pos(287, 54)>,
StatementAssertion<Begin: Pos(289, 9), End: Pos(289, 53)>,
StatementAssertion<Begin: Pos(291, 9), End: Pos(291, 54)>,
StatementAssertion<Begin: Pos(293, 9), End: Pos(293, 53)>,
StatementAssertion<Begin: Pos(295, 9), End: Pos(295, 54)>,
StatementAssertion<Begin: Pos(297, 9), End: Pos(297, 55)>,
StatementAssertion<Begin: Pos(299, 9), End: Pos(299, 55)>,
StatementAssertion<Begin: Pos(301, 9), End: Pos(301, 55)>,
StatementAssertion<Begin: Pos(303, 9), End: Pos(303, 55)>,
StatementAssertion<Begin: Pos(305, 9), End: Pos(305, 54)>,
StatementAssertion<Begin: Pos(307, 9), End: Pos(307, 55)>,
StatementAssertion<Begin: Pos(309, 9), End: Pos(309, 54)>,
StatementAssertion<Begin: Pos(311, 9), End: Pos(311, 54)>,
StatementAssertion<Begin: Pos(313, 9), End: Pos(313, 55)>,
StatementAssertion<Begin: Pos(315, 9), End: Pos(315, 54)>,
StatementAssertion<Begin: Pos(317, 9), End: Pos(317, 55)>,
StatementAssertion<Begin: Pos(319, 9), End: Pos(319, 54)>,
StatementAssertion<Begin: Pos(321, 9), End: Pos(321, 55)>,
StatementAssertion<Begin: Pos(323, 9), End: Pos(323, 55)>,
StatementAssertion<Begin: Pos(325, 9), End: Pos(325, 54)>,
StatementAssertion<Begin: Pos(338, 9), End: Pos(338, 68)>,
StatementAssertion<Begin: Pos(340, 9), End: Pos(340, 68)>,
StatementAssertion<Begin: Pos(342, 9), End: Pos(342, 70)>,
StatementAssertion<Begin: Pos(344, 9), End: Pos(345, 59)>,
StatementAssertion<Begin: Pos(347, 9), End: Pos(347, 71)>,
StatementAssertion<Begin: Pos(349, 9), End: Pos(349, 73)>,
StatementAssertion<Begin: Pos(351, 9), End: Pos(351, 70)>,
StatementAssertion<Begin: Pos(353, 9), End: Pos(353, 70)>,
StatementAssertion<Begin: Pos(355, 9), End: Pos(355, 70)>,
StatementAssertion<Begin: Pos(365, 9), End: Pos(365, 76)>,
StatementAssertion<Begin: Pos(367, 9), End: Pos(367, 76)>,
StatementAssertion<Begin: Pos(369, 9), End: Pos(369, 77)>,
StatementAssertion<Begin: Pos(371, 9), End: Pos(371, 75)>,
StatementAssertion<Begin: Pos(373, 9), End: Pos(373, 76)>,
StatementAssertion<Begin: Pos(375, 9), End: Pos(375, 77)>,
StatementAssertion<Begin: Pos(377, 9), End: Pos(377, 73)>,
StatementAssertion<Begin: Pos(379, 9), End: Pos(379, 77)>,
StatementAssertion<Begin: Pos(381, 9), End: Pos(381, 74)>,
StatementAssertion<Begin: Pos(383, 9), End: Pos(383, 78)>,
StatementAssertion<Begin: Pos(385, 9), End: Pos(385, 76)>,
StatementAssertion<Begin: Pos(387, 9), End: Pos(387, 76)>,
StatementAssertion<Begin: Pos(388, 9), End: Pos(388, 75)>,
StatementAssertion<Begin: Pos(389, 9), End: Pos(389, 75)>,
StatementAssertion<Begin: Pos(392, 9), End: Pos(392, 80)>,
StatementAssertion<Begin: Pos(393, 9), End: Pos(393, 79)>,
StatementAssertion<Begin: Pos(395, 9), End: Pos(395, 81)>,
StatementAssertion<Begin: Pos(398, 9), End: Pos(398, 82)>,
StatementAssertion<Begin: Pos(400, 9), End: Pos(400, 86)>,
StatementAssertion<Begin: Pos(403, 9), End: Pos(403, 78)>,
StatementAssertion<Begin: Pos(407, 9), End: Pos(407, 75)>,
StatementAssertion<Begin: Pos(409, 9), End: Pos(409, 81)>,
StatementAssertion<Begin: Pos(413, 9), End: Pos(413, 80)>,
StatementAssertion<Begin: Pos(415, 9), End: Pos(415, 83)>,
StatementAssertion<Begin: Pos(423, 9), End: Pos(423, 74)>,
StatementAssertion<Begin: Pos(425, 9), End: Pos(425, 74)>,
StatementAssertion<Begin: Pos(427, 9), End: Pos(427, 74)>,
StatementAssertion<Begin: Pos(429, 9), End: Pos(429, 74)>,
StatementAssertion<Begin: Pos(431, 9), End: Pos(431, 74)>,
StatementAssertion<Begin: Pos(433, 9), End: Pos(433, 74)>,
StatementAssertion<Begin: Pos(435, 9), End: Pos(435, 74)>,
StatementAssertion<Begin: Pos(437, 9), End: Pos(437, 74)>,
StatementAssertion<Begin: Pos(439, 9), End: Pos(439, 74)>,
StatementAssertion<Begin: Pos(441, 9), End: Pos(441, 74)>,
]
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_0()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    delegateBooleanAssertion(types, 0, 0, true);
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_1()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    delegateBooleanAssertion(types, 0, 1, true);
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_2()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    delegateBooleanAssertion(types, 1, 0, true);
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_3()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    delegateBooleanAssertion(types, 0, 2, true);
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_4()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    delegateBooleanAssertion(types, 2, 0, true);
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_5()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    delegateBooleanAssertion(types, 0, 3, true);
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_6()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    delegateBooleanAssertion(types, 3, 0, true);
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_7()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    delegateBooleanAssertion(types, 0, 4, true);
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_8()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    delegateBooleanAssertion(types, 4, 0, true);
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_9()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    delegateBooleanAssertion(types, 0, 5, true);
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_10()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    delegateBooleanAssertion(types, 5, 0, true);
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_11()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    delegateBooleanAssertion(types, 0, 6, true);
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_12()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    delegateBooleanAssertion(types, 6, 0, true);
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_13()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    delegateBooleanAssertion(types, 1, 1, true);
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_14()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    delegateBooleanAssertion(types, 1, 2, true);
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_15()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    delegateBooleanAssertion(types, 2, 1, false);
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_16()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    delegateBooleanAssertion(types, 1, 3, true);
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_17()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    delegateBooleanAssertion(types, 3, 1, false);
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_18()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    delegateBooleanAssertion(types, 1, 4, false);
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_19()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    delegateBooleanAssertion(types, 4, 1, false);
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_20()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    delegateBooleanAssertion(types, 1, 5, false);
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_21()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    delegateBooleanAssertion(types, 5, 1, false);
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_22()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    delegateBooleanAssertion(types, 1, 6, true);
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_23()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    delegateBooleanAssertion(types, 6, 1, false);
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_24()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    delegateBooleanAssertion(types, 2, 2, true);
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_25()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    delegateBooleanAssertion(types, 2, 3, false);
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_26()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    delegateBooleanAssertion(types, 3, 2, true);
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_27()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    delegateBooleanAssertion(types, 2, 4, false);
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_28()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    delegateBooleanAssertion(types, 4, 2, true);
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_29()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    delegateBooleanAssertion(types, 2, 5, false);
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_30()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    delegateBooleanAssertion(types, 5, 2, true);
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_31()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    delegateBooleanAssertion(types, 2, 6, false);
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_32()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    delegateBooleanAssertion(types, 6, 2, true);
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_33()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    delegateBooleanAssertion(types, 3, 3, true);
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_34()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    delegateBooleanAssertion(types, 3, 4, false);
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_35()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    delegateBooleanAssertion(types, 4, 3, false);
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_36()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    delegateBooleanAssertion(types, 3, 5, false);
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_37()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    delegateBooleanAssertion(types, 5, 3, false);
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_38()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    delegateBooleanAssertion(types, 3, 6, true);
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_39()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    delegateBooleanAssertion(types, 6, 3, false);
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_40()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    delegateBooleanAssertion(types, 4, 4, true);
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_41()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    delegateBooleanAssertion(types, 4, 5, true);
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_42()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    delegateBooleanAssertion(types, 5, 4, false);
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_43()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    delegateBooleanAssertion(types, 4, 6, true);
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_44()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    delegateBooleanAssertion(types, 6, 4, false);
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_45()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    delegateBooleanAssertion(types, 5, 5, true);
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_46()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    delegateBooleanAssertion(types, 5, 6, false);
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_47()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    delegateBooleanAssertion(types, 6, 5, false);
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_48()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    delegateBooleanAssertion(types, 6, 6, true);
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_49()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    delegateBooleanAssertion(types, 7, 7, true);
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_50()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    delegateBooleanAssertion(types, 7, 8, true);
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_51()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    delegateBooleanAssertion(types, 8, 7, true);
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_52()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    delegateBooleanAssertion(types, 7, 9, true);
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_53()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    delegateBooleanAssertion(types, 9, 7, true);
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_54()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    delegateBooleanAssertion(types, 7, 10, true);
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_55()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    delegateBooleanAssertion(types, 10, 7, true);
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_56()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    delegateBooleanAssertion(types, 7, 11, true);
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_57()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    delegateBooleanAssertion(types, 11, 7, true);
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_58()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    delegateBooleanAssertion(types, 7, 12, true);
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_59()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    delegateBooleanAssertion(types, 12, 7, true);
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_60()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    delegateBooleanAssertion(types, 7, 13, true);
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_61()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    delegateBooleanAssertion(types, 13, 7, true);
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_62()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    delegateBooleanAssertion(types, 8, 8, true);
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_63()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    delegateBooleanAssertion(types, 8, 9, true);
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_64()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    delegateBooleanAssertion(types, 9, 8, false);
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_65()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    delegateBooleanAssertion(types, 8, 10, true);
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_66()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    delegateBooleanAssertion(types, 10, 8, false);
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_67()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    delegateBooleanAssertion(types, 8, 11, false);
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_68()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    delegateBooleanAssertion(types, 11, 8, false);
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_69()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    delegateBooleanAssertion(types, 8, 12, false);
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_70()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    delegateBooleanAssertion(types, 12, 8, false);
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_71()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    delegateBooleanAssertion(types, 8, 13, true);
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_72()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    delegateBooleanAssertion(types, 13, 8, false);
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_73()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    delegateBooleanAssertion(types, 9, 9, true);
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_74()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    delegateBooleanAssertion(types, 9, 10, false);
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_75()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    delegateBooleanAssertion(types, 10, 9, true);
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_76()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    delegateBooleanAssertion(types, 9, 11, false);
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_77()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    delegateBooleanAssertion(types, 11, 9, true);
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_78()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    delegateBooleanAssertion(types, 9, 12, false);
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_79()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    delegateBooleanAssertion(types, 12, 9, true);
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_80()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    delegateBooleanAssertion(types, 9, 13, false);
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_81()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    delegateBooleanAssertion(types, 13, 9, true);
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_82()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    delegateBooleanAssertion(types, 10, 10, true);
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_83()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    delegateBooleanAssertion(types, 10, 11, false);
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_84()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    delegateBooleanAssertion(types, 11, 10, false);
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_85()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    delegateBooleanAssertion(types, 10, 12, false);
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_86()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    delegateBooleanAssertion(types, 12, 10, false);
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_87()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    delegateBooleanAssertion(types, 10, 13, true);
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_88()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    delegateBooleanAssertion(types, 13, 10, false);
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_89()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    delegateBooleanAssertion(types, 11, 11, true);
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_90()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    delegateBooleanAssertion(types, 11, 12, true);
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_91()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    delegateBooleanAssertion(types, 12, 11, false);
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_92()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    delegateBooleanAssertion(types, 11, 13, true);
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_93()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    delegateBooleanAssertion(types, 13, 11, false);
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_94()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    delegateBooleanAssertion(types, 12, 12, true);
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_95()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    delegateBooleanAssertion(types, 12, 13, false);
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_96()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    delegateBooleanAssertion(types, 13, 12, false);
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_97()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    delegateBooleanAssertion(types, 13, 13, true);
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_98()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    Assert.assertTrue(TypeUtils.isAssignable(datType, disType));
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_99()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    Assert.assertFalse(TypeUtils.isAssignable(daType, disType));
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_100()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_101()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType), TypeUtils.isAssignable(dingType, disType));
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_102()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_103()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_104()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_105()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_106()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_107()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_108()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_109()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_110()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_111()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_112()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_113()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_114()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_115()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_116()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_117()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_118()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_119()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_120()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_121()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_122()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_123()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_124()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_125()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_126()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_127()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_128()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_129()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_130()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_131()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_132()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_133()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_134()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_135()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_136()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_137()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_138()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_139()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));
    aClass.eClass = aClass.fClass;
    
}

---
---
@SuppressWarnings("boxing")@Test public void testIsAssignable_catena_140()throws SecurityException, NoSuchMethodException, NoSuchFieldException {
    List list0 = null;
    List < Object > list1 = null;
    List <  ?  > list2 = null;
    List <  ? super Object > list3 = null;
    List < String > list4 = null;
    List <  ? extends String > list5 = null;
    List <  ? super String > list6 = null;
    List[]list7 = null;
    List < Object > []list8 = null;
    List <  ?  > []list9 = null;
    List <  ? super Object > []list10 = null;
    List < String > []list11 = null;
    List <  ? extends String > []list12 = null;
    List <  ? super String > []list13;
    Class <  ?  > clazz = getClass();
    Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, List.class, List.class, List.class, List.class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class, List[].class);
    Type[]types = method.getGenericParameterTypes();
    list1 = list0;
    list0 = list1;
    list2 = list0;
    list0 = list2;
    list3 = list0;
    list0 = list3;
    list4 = list0;
    list0 = list4;
    list5 = list0;
    list0 = list5;
    list6 = list0;
    list0 = list6;
    list2 = list1;
    list1 = (List < Object > )list2;
    list3 = list1;
    list1 = (List < Object > )list3;
    list6 = list1;
    list1 = (List < Object > )list6;
    list2 = list3;
    list2 = list4;
    list3 = (List <  ? super Object > )list2;
    list2 = list5;
    list4 = (List < String > )list2;
    list2 = list6;
    list5 = (List <  ? extends String > )list2;
    list6 = (List <  ? super String > )list2;
    list6 = list3;
    list3 = (List <  ? super Object > )list6;
    list5 = list4;
    list4 = (List < String > )list5;
    list6 = list4;
    list4 = (List < String > )list6;
    list6 = (List <  ? super String > )list5;
    list5 = (List <  ? extends String > )list6;
    list8 = list7;
    list7 = list8;
    list9 = list7;
    list7 = list9;
    list10 = list7;
    list7 = list10;
    list11 = list7;
    list7 = list11;
    list12 = list7;
    list7 = list12;
    list13 = list7;
    list7 = list13;
    list9 = list8;
    list8 = (List < Object > [])list9;
    list10 = list8;
    list8 = (List < Object > [])list10;
    list13 = list8;
    list8 = (List < Object > [])list13;
    list10 = (List <  ? super Object > [])list9;
    list9 = list10;
    list11 = (List < String > [])list9;
    list9 = list11;
    list12 = (List <  ? extends String > [])list9;
    list9 = list12;
    list13 = (List <  ? super String > [])list9;
    list9 = list13;
    list13 = list10;
    list10 = (List <  ? super Object > [])list13;
    list12 = list11;
    list11 = (List < String > [])list12;
    list13 = list11;
    list11 = (List < String > [])list13;
    list13 = (List <  ? super String > [])list12;
    list12 = (List <  ? extends String > [])list13;
    Type disType = getClass().getField("dis").getGenericType();
    Type datType = getClass().getField("dat").getGenericType();
    Type daType = getClass().getField("da").getGenericType();
    Type uhderType = getClass().getField("uhder").getGenericType();
    Type dingType = getClass().getField("ding").getGenericType();
    Type testerType = getClass().getField("tester").getGenericType();
    Type tester2Type = getClass().getField("tester2").getGenericType();
    Type dat2Type = getClass().getField("dat2").getGenericType();
    Type dat3Type = getClass().getField("dat3").getGenericType();
    dis = dat;
    dis = uhder;
    dis = ding;
    dis = tester;
    char ch = 0;
    boolean bo = false;
    byte by = 0;
    short sh = 0;
    int in = 0;
    long lo = 0;
    float fl = 0;
    double du = 0;
    du = ch;
    du = by;
    du = sh;
    du = in;
    du = lo;
    du = fl;
    lo = in;
    lo = Integer.valueOf(0);
    in = Integer.valueOf(0);
    Integer inte = in;
    Type intComparableType = getClass().getField("intComparable").getGenericType();
    intComparable = 1;
    Serializable ser = 1;
    Type longComparableType = getClass().getField("longComparable").getGenericType();
    Integer[]ia = null;
    Type caType = getClass().getField("intWildcardComparable").getGenericType();
    intWildcardComparable = ia;
    int[]ina = null;
    Object[]oa;
    oa = new Integer[0];
    Type bClassType = AClass.class.getField("bClass").getGenericType();
    Type cClassType = AClass.class.getField("cClass").getGenericType();
    Type dClassType = AClass.class.getField("dClass").getGenericType();
    Type eClassType = AClass.class.getField("eClass").getGenericType();
    Type fClassType = AClass.class.getField("fClass").getGenericType();
    AClass aClass = new AClass(new AAClass < String > ());
    aClass.bClass = aClass.cClass;
    aClass.bClass = aClass.dClass;
    aClass.bClass = aClass.eClass;
    aClass.bClass = aClass.fClass;
    aClass.cClass = aClass.dClass;
    aClass.cClass = aClass.eClass;
    aClass.cClass = aClass.fClass;
    aClass.dClass = aClass.eClass;
    aClass.dClass = aClass.fClass;
    aClass.eClass = aClass.fClass;
    Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));
    
}

---
--------------------
Run: Lang_41
@@@
Split test: org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class
file: /root/workbench/exportInfo/d4j_buggy/Lang_41/src/test//org/apache/commons/lang/ClassUtilsTest.java
Begin: Pos(91, 12)
End: Pos(124, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_41/src/test//org/apache/commons/lang/ClassUtilsTest.java
Name: test_getShortClassName_Class
Childs: [StatementAssertion<Begin: Pos(92, 9), End: Pos(92, 83)>,
StatementAssertion<Begin: Pos(93, 9), End: Pos(93, 81)>,
StatementAssertion<Begin: Pos(94, 9), End: Pos(94, 69)>,
StatementAssertion<Begin: Pos(97, 9), End: Pos(97, 79)>,
StatementAssertion<Begin: Pos(98, 9), End: Pos(98, 85)>,
StatementAssertion<Begin: Pos(101, 9), End: Pos(101, 77)>,
StatementAssertion<Begin: Pos(102, 9), End: Pos(102, 71)>,
StatementAssertion<Begin: Pos(103, 9), End: Pos(103, 71)>,
StatementAssertion<Begin: Pos(104, 9), End: Pos(104, 73)>,
StatementAssertion<Begin: Pos(105, 9), End: Pos(105, 69)>,
StatementAssertion<Begin: Pos(106, 9), End: Pos(106, 71)>,
StatementAssertion<Begin: Pos(107, 9), End: Pos(107, 73)>,
StatementAssertion<Begin: Pos(108, 9), End: Pos(108, 75)>,
StatementAssertion<Begin: Pos(111, 9), End: Pos(111, 81)>,
StatementAssertion<Begin: Pos(112, 9), End: Pos(112, 75)>,
StatementAssertion<Begin: Pos(113, 9), End: Pos(113, 75)>,
StatementAssertion<Begin: Pos(114, 9), End: Pos(114, 77)>,
StatementAssertion<Begin: Pos(115, 9), End: Pos(115, 73)>,
StatementAssertion<Begin: Pos(116, 9), End: Pos(116, 75)>,
StatementAssertion<Begin: Pos(117, 9), End: Pos(117, 77)>,
StatementAssertion<Begin: Pos(118, 9), End: Pos(118, 79)>,
StatementAssertion<Begin: Pos(121, 9), End: Pos(121, 83)>,
StatementAssertion<Begin: Pos(122, 9), End: Pos(122, 87)>,
StatementAssertion<Begin: Pos(123, 9), End: Pos(123, 91)>,
]
---
public void test_getShortClassName_Class_catena_0() {
    assertEquals("ClassUtils", ClassUtils.getShortClassName(ClassUtils.class));
    
}

---
---
public void test_getShortClassName_Class_catena_1() {
    assertEquals("Map.Entry", ClassUtils.getShortClassName(Map.Entry.class));
    
}

---
---
public void test_getShortClassName_Class_catena_2() {
    assertEquals("", ClassUtils.getShortClassName((Class)null));
    
}

---
---
public void test_getShortClassName_Class_catena_3() {
    assertEquals("String[]", ClassUtils.getShortClassName(String[].class));
    
}

---
---
public void test_getShortClassName_Class_catena_4() {
    assertEquals("Map.Entry[]", ClassUtils.getShortClassName(Map.Entry[].class));
    
}

---
---
public void test_getShortClassName_Class_catena_5() {
    assertEquals("boolean", ClassUtils.getShortClassName(boolean.class));
    
}

---
---
public void test_getShortClassName_Class_catena_6() {
    assertEquals("byte", ClassUtils.getShortClassName(byte.class));
    
}

---
---
public void test_getShortClassName_Class_catena_7() {
    assertEquals("char", ClassUtils.getShortClassName(char.class));
    
}

---
---
public void test_getShortClassName_Class_catena_8() {
    assertEquals("short", ClassUtils.getShortClassName(short.class));
    
}

---
---
public void test_getShortClassName_Class_catena_9() {
    assertEquals("int", ClassUtils.getShortClassName(int.class));
    
}

---
---
public void test_getShortClassName_Class_catena_10() {
    assertEquals("long", ClassUtils.getShortClassName(long.class));
    
}

---
---
public void test_getShortClassName_Class_catena_11() {
    assertEquals("float", ClassUtils.getShortClassName(float.class));
    
}

---
---
public void test_getShortClassName_Class_catena_12() {
    assertEquals("double", ClassUtils.getShortClassName(double.class));
    
}

---
---
public void test_getShortClassName_Class_catena_13() {
    assertEquals("boolean[]", ClassUtils.getShortClassName(boolean[].class));
    
}

---
---
public void test_getShortClassName_Class_catena_14() {
    assertEquals("byte[]", ClassUtils.getShortClassName(byte[].class));
    
}

---
---
public void test_getShortClassName_Class_catena_15() {
    assertEquals("char[]", ClassUtils.getShortClassName(char[].class));
    
}

---
---
public void test_getShortClassName_Class_catena_16() {
    assertEquals("short[]", ClassUtils.getShortClassName(short[].class));
    
}

---
---
public void test_getShortClassName_Class_catena_17() {
    assertEquals("int[]", ClassUtils.getShortClassName(int[].class));
    
}

---
---
public void test_getShortClassName_Class_catena_18() {
    assertEquals("long[]", ClassUtils.getShortClassName(long[].class));
    
}

---
---
public void test_getShortClassName_Class_catena_19() {
    assertEquals("float[]", ClassUtils.getShortClassName(float[].class));
    
}

---
---
public void test_getShortClassName_Class_catena_20() {
    assertEquals("double[]", ClassUtils.getShortClassName(double[].class));
    
}

---
---
public void test_getShortClassName_Class_catena_21() {
    assertEquals("String[][]", ClassUtils.getShortClassName(String[][].class));
    
}

---
---
public void test_getShortClassName_Class_catena_22() {
    assertEquals("String[][][]", ClassUtils.getShortClassName(String[][][].class));
    
}

---
---
public void test_getShortClassName_Class_catena_23() {
    assertEquals("String[][][][]", ClassUtils.getShortClassName(String[][][][].class));
    
}

---
@@@
Split test: org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class
file: /root/workbench/exportInfo/d4j_buggy/Lang_41/src/test//org/apache/commons/lang/ClassUtilsTest.java
Begin: Pos(140, 12)
End: Pos(162, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_41/src/test//org/apache/commons/lang/ClassUtilsTest.java
Name: test_getPackageName_Class
Childs: [StatementAssertion<Begin: Pos(141, 9), End: Pos(141, 75)>,
StatementAssertion<Begin: Pos(142, 9), End: Pos(142, 78)>,
StatementAssertion<Begin: Pos(143, 9), End: Pos(143, 65)>,
StatementAssertion<Begin: Pos(146, 9), End: Pos(146, 77)>,
StatementAssertion<Begin: Pos(149, 9), End: Pos(149, 69)>,
StatementAssertion<Begin: Pos(150, 9), End: Pos(150, 66)>,
StatementAssertion<Begin: Pos(151, 9), End: Pos(151, 66)>,
StatementAssertion<Begin: Pos(152, 9), End: Pos(152, 67)>,
StatementAssertion<Begin: Pos(153, 9), End: Pos(153, 65)>,
StatementAssertion<Begin: Pos(154, 9), End: Pos(154, 66)>,
StatementAssertion<Begin: Pos(155, 9), End: Pos(155, 67)>,
StatementAssertion<Begin: Pos(156, 9), End: Pos(156, 68)>,
StatementAssertion<Begin: Pos(159, 9), End: Pos(159, 79)>,
StatementAssertion<Begin: Pos(160, 9), End: Pos(160, 81)>,
StatementAssertion<Begin: Pos(161, 9), End: Pos(161, 83)>,
]
---
public void test_getPackageName_Class_catena_0() {
    assertEquals("java.lang", ClassUtils.getPackageName(String.class));
    
}

---
---
public void test_getPackageName_Class_catena_1() {
    assertEquals("java.util", ClassUtils.getPackageName(Map.Entry.class));
    
}

---
---
public void test_getPackageName_Class_catena_2() {
    assertEquals("", ClassUtils.getPackageName((Class)null));
    
}

---
---
public void test_getPackageName_Class_catena_3() {
    assertEquals("java.lang", ClassUtils.getPackageName(String[].class));
    
}

---
---
public void test_getPackageName_Class_catena_4() {
    assertEquals("", ClassUtils.getPackageName(boolean[].class));
    
}

---
---
public void test_getPackageName_Class_catena_5() {
    assertEquals("", ClassUtils.getPackageName(byte[].class));
    
}

---
---
public void test_getPackageName_Class_catena_6() {
    assertEquals("", ClassUtils.getPackageName(char[].class));
    
}

---
---
public void test_getPackageName_Class_catena_7() {
    assertEquals("", ClassUtils.getPackageName(short[].class));
    
}

---
---
public void test_getPackageName_Class_catena_8() {
    assertEquals("", ClassUtils.getPackageName(int[].class));
    
}

---
---
public void test_getPackageName_Class_catena_9() {
    assertEquals("", ClassUtils.getPackageName(long[].class));
    
}

---
---
public void test_getPackageName_Class_catena_10() {
    assertEquals("", ClassUtils.getPackageName(float[].class));
    
}

---
---
public void test_getPackageName_Class_catena_11() {
    assertEquals("", ClassUtils.getPackageName(double[].class));
    
}

---
---
public void test_getPackageName_Class_catena_12() {
    assertEquals("java.lang", ClassUtils.getPackageName(String[][].class));
    
}

---
---
public void test_getPackageName_Class_catena_13() {
    assertEquals("java.lang", ClassUtils.getPackageName(String[][][].class));
    
}

---
---
public void test_getPackageName_Class_catena_14() {
    assertEquals("java.lang", ClassUtils.getPackageName(String[][][][].class));
    
}

---
--------------------
Run: Lang_63
@@@
Split test: org.apache.commons.lang.time.DurationFormatUtilsTest::testJiraLang281
file: /root/workbench/exportInfo/d4j_buggy/Lang_63/src/test//org/apache/commons/lang/time/DurationFormatUtilsTest.java
Begin: Pos(417, 12)
End: Pos(437, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Lang_63/src/test//org/apache/commons/lang/time/DurationFormatUtilsTest.java
Name: testJiraLang281
Childs: [StatementAssertion<Begin: Pos(436, 9), End: Pos(436, 35)>,
]
--------------------
Run: Math_25
@@@
Split test: org.apache.commons.math3.optimization.fitting.HarmonicFitterTest::testMath844
file: /root/workbench/exportInfo/d4j_buggy/Math_25/src/test/java//org/apache/commons/math3/optimization/fitting/HarmonicFitterTest.java
Begin: Pos(181, 5)
End: Pos(203, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_25/src/test/java//org/apache/commons/math3/optimization/fitting/HarmonicFitterTest.java
Name: testMath844
Childs: []
--------------------
Run: Math_89
@@@
Split test: org.apache.commons.math.stat.FrequencyTest::testAddNonComparable
file: /root/workbench/exportInfo/d4j_buggy/Math_89/src/test//org/apache/commons/math/stat/FrequencyTest.java
Begin: Pos(193, 12)
End: Pos(206, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_89/src/test//org/apache/commons/math/stat/FrequencyTest.java
Name: testAddNonComparable
Childs: [StatementAssertion<Begin: Pos(196, 13), End: Pos(196, 54)>,
StatementAssertion<Begin: Pos(203, 13), End: Pos(203, 54)>,
]
---
public void testAddNonComparable_catena_0() {
    try {
        f.addValue(new Object());
        fail("Expected IllegalArgumentException");
        
    }
    catch(IllegalArgumentException expected) {
        
    }
    f.clear();
    f.addValue(1);
    try {
        f.addValue(new Object());
        
    }
    catch(IllegalArgumentException expected) {
        
    }
}

---
---
public void testAddNonComparable_catena_1() {
    try {
        f.addValue(new Object());
        
    }
    catch(IllegalArgumentException expected) {
        
    }
    f.clear();
    f.addValue(1);
    try {
        f.addValue(new Object());
        fail("Expected IllegalArgumentException");
        
    }
    catch(IllegalArgumentException expected) {
        
    }
}

---
--------------------
Run: Math_103
@@@
Split test: org.apache.commons.math.distribution.NormalDistributionTest::testExtremeValues
file: /root/workbench/exportInfo/d4j_buggy/Math_103/src/test//org/apache/commons/math/distribution/NormalDistributionTest.java
Begin: Pos(128, 12)
End: Pos(144, 4)
Source: /root/workbench/exportInfo/d4j_buggy/Math_103/src/test//org/apache/commons/math/distribution/NormalDistributionTest.java
Name: testExtremeValues
Childs: [StatementAssertion<Begin: Pos(136, 17), End: Pos(136, 45)>,
StatementAssertion<Begin: Pos(137, 17), End: Pos(137, 45)>,
StatementAssertion<Begin: Pos(140, 17), End: Pos(140, 48)>,
StatementAssertion<Begin: Pos(141, 17), End: Pos(141, 48)>,
]
---
public void testExtremeValues_catena_0()throws Exception {
    NormalDistribution distribution = (NormalDistribution)getDistribution();
    distribution.setMean(0);
    distribution.setStandardDeviation(1);
    for(int i = 0;
    i < 100;
    i += 5) {
        double lowerTail = distribution.cumulativeProbability((double) - i);
        double upperTail = distribution.cumulativeProbability((double)i);
        if(i < 10) {
            assertTrue(lowerTail > 0.0d);
            
        }
        else {
            
        }
    }
}

---
---
public void testExtremeValues_catena_1()throws Exception {
    NormalDistribution distribution = (NormalDistribution)getDistribution();
    distribution.setMean(0);
    distribution.setStandardDeviation(1);
    for(int i = 0;
    i < 100;
    i += 5) {
        double lowerTail = distribution.cumulativeProbability((double) - i);
        double upperTail = distribution.cumulativeProbability((double)i);
        if(i < 10) {
            assertTrue(upperTail < 1.0d);
            
        }
        else {
            
        }
    }
}

---
---
public void testExtremeValues_catena_2()throws Exception {
    NormalDistribution distribution = (NormalDistribution)getDistribution();
    distribution.setMean(0);
    distribution.setStandardDeviation(1);
    for(int i = 0;
    i < 100;
    i += 5) {
        double lowerTail = distribution.cumulativeProbability((double) - i);
        double upperTail = distribution.cumulativeProbability((double)i);
        if(i < 10) {
            
        }
        else {
            assertTrue(lowerTail < 0.00001);
            
        }
    }
}

---
---
public void testExtremeValues_catena_3()throws Exception {
    NormalDistribution distribution = (NormalDistribution)getDistribution();
    distribution.setMean(0);
    distribution.setStandardDeviation(1);
    for(int i = 0;
    i < 100;
    i += 5) {
        double lowerTail = distribution.cumulativeProbability((double) - i);
        double upperTail = distribution.cumulativeProbability((double)i);
        if(i < 10) {
            
        }
        else {
            assertTrue(upperTail > 0.99999);
            
        }
    }
}

---
--------------------
Run: Math_37
@@@
Split test: org.apache.commons.math.complex.ComplexTest::testTanhInf
file: /root/workbench/exportInfo/d4j_buggy/Math_37/src/test/java//org/apache/commons/math/complex/ComplexTest.java
Begin: Pos(1050, 5)
End: Pos(1060, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_37/src/test/java//org/apache/commons/math/complex/ComplexTest.java
Name: testTanhInf
Childs: [StatementAssertion<Begin: Pos(1052, 9), End: Pos(1052, 57)>,
StatementAssertion<Begin: Pos(1053, 9), End: Pos(1053, 60)>,
StatementAssertion<Begin: Pos(1054, 9), End: Pos(1054, 71)>,
StatementAssertion<Begin: Pos(1055, 9), End: Pos(1055, 75)>,
StatementAssertion<Begin: Pos(1056, 9), End: Pos(1056, 57)>,
StatementAssertion<Begin: Pos(1057, 9), End: Pos(1057, 60)>,
StatementAssertion<Begin: Pos(1058, 9), End: Pos(1058, 60)>,
StatementAssertion<Begin: Pos(1059, 9), End: Pos(1059, 63)>,
]
---
@Test public void testTanhInf_catena_0() {
    TestUtils.assertSame(Complex.NaN, oneInf.tanh());
    
}

---
---
@Test public void testTanhInf_catena_1() {
    TestUtils.assertSame(Complex.NaN, oneNegInf.tanh());
    
}

---
---
@Test public void testTanhInf_catena_2() {
    TestUtils.assertSame(Complex.valueOf(1.0, 0.0), infOne.tanh());
    
}

---
---
@Test public void testTanhInf_catena_3() {
    TestUtils.assertSame(Complex.valueOf( - 1.0, 0.0), negInfOne.tanh());
    
}

---
---
@Test public void testTanhInf_catena_4() {
    TestUtils.assertSame(Complex.NaN, infInf.tanh());
    
}

---
---
@Test public void testTanhInf_catena_5() {
    TestUtils.assertSame(Complex.NaN, infNegInf.tanh());
    
}

---
---
@Test public void testTanhInf_catena_6() {
    TestUtils.assertSame(Complex.NaN, negInfInf.tanh());
    
}

---
---
@Test public void testTanhInf_catena_7() {
    TestUtils.assertSame(Complex.NaN, negInfNegInf.tanh());
    
}

---
@@@
Split test: org.apache.commons.math.complex.ComplexTest::testTan
file: /root/workbench/exportInfo/d4j_buggy/Math_37/src/test/java//org/apache/commons/math/complex/ComplexTest.java
Begin: Pos(994, 5)
End: Pos(1006, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_37/src/test/java//org/apache/commons/math/complex/ComplexTest.java
Name: testTan
Childs: [StatementAssertion<Begin: Pos(998, 9), End: Pos(998, 58)>,
StatementAssertion<Begin: Pos(1002, 9), End: Pos(1002, 57)>,
StatementAssertion<Begin: Pos(1005, 9), End: Pos(1005, 57)>,
]
---
@Test public void testTan_catena_0() {
    Complex z = new Complex(3, 4);
    Complex expected = new Complex( - 0.000187346, 0.999356);
    TestUtils.assertEquals(expected, z.tan(), 1.0e-5);
    Complex actual = new Complex(3.0, 1E10).tan();
    expected = new Complex(0, 1);
    actual = new Complex(3.0,  - 1E10).tan();
    expected = new Complex(0,  - 1);
    
}

---
---
@Test public void testTan_catena_1() {
    Complex z = new Complex(3, 4);
    Complex expected = new Complex( - 0.000187346, 0.999356);
    Complex actual = new Complex(3.0, 1E10).tan();
    expected = new Complex(0, 1);
    TestUtils.assertEquals(expected, actual, 1.0e-5);
    actual = new Complex(3.0,  - 1E10).tan();
    expected = new Complex(0,  - 1);
    
}

---
---
@Test public void testTan_catena_2() {
    Complex z = new Complex(3, 4);
    Complex expected = new Complex( - 0.000187346, 0.999356);
    Complex actual = new Complex(3.0, 1E10).tan();
    expected = new Complex(0, 1);
    actual = new Complex(3.0,  - 1E10).tan();
    expected = new Complex(0,  - 1);
    TestUtils.assertEquals(expected, actual, 1.0e-5);
    
}

---
@@@
Split test: org.apache.commons.math.complex.ComplexTest::testTanh
file: /root/workbench/exportInfo/d4j_buggy/Math_37/src/test/java//org/apache/commons/math/complex/ComplexTest.java
Begin: Pos(1031, 5)
End: Pos(1043, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_37/src/test/java//org/apache/commons/math/complex/ComplexTest.java
Name: testTanh
Childs: [StatementAssertion<Begin: Pos(1035, 9), End: Pos(1035, 59)>,
StatementAssertion<Begin: Pos(1039, 9), End: Pos(1039, 57)>,
StatementAssertion<Begin: Pos(1042, 9), End: Pos(1042, 57)>,
]
---
@Test public void testTanh_catena_0() {
    Complex z = new Complex(3, 4);
    Complex expected = new Complex(1.00071, 0.00490826);
    TestUtils.assertEquals(expected, z.tanh(), 1.0e-5);
    Complex actual = new Complex(1E10, 3.0).tanh();
    expected = new Complex(1, 0);
    actual = new Complex( - 1E10, 3.0).tanh();
    expected = new Complex( - 1, 0);
    
}

---
---
@Test public void testTanh_catena_1() {
    Complex z = new Complex(3, 4);
    Complex expected = new Complex(1.00071, 0.00490826);
    Complex actual = new Complex(1E10, 3.0).tanh();
    expected = new Complex(1, 0);
    TestUtils.assertEquals(expected, actual, 1.0e-5);
    actual = new Complex( - 1E10, 3.0).tanh();
    expected = new Complex( - 1, 0);
    
}

---
---
@Test public void testTanh_catena_2() {
    Complex z = new Complex(3, 4);
    Complex expected = new Complex(1.00071, 0.00490826);
    Complex actual = new Complex(1E10, 3.0).tanh();
    expected = new Complex(1, 0);
    actual = new Complex( - 1E10, 3.0).tanh();
    expected = new Complex( - 1, 0);
    TestUtils.assertEquals(expected, actual, 1.0e-5);
    
}

---
@@@
Split test: org.apache.commons.math.complex.ComplexTest::testTanInf
file: /root/workbench/exportInfo/d4j_buggy/Math_37/src/test/java//org/apache/commons/math/complex/ComplexTest.java
Begin: Pos(1013, 5)
End: Pos(1023, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_37/src/test/java//org/apache/commons/math/complex/ComplexTest.java
Name: testTanInf
Childs: [StatementAssertion<Begin: Pos(1015, 9), End: Pos(1015, 70)>,
StatementAssertion<Begin: Pos(1016, 9), End: Pos(1016, 74)>,
StatementAssertion<Begin: Pos(1017, 9), End: Pos(1017, 56)>,
StatementAssertion<Begin: Pos(1018, 9), End: Pos(1018, 59)>,
StatementAssertion<Begin: Pos(1019, 9), End: Pos(1019, 56)>,
StatementAssertion<Begin: Pos(1020, 9), End: Pos(1020, 59)>,
StatementAssertion<Begin: Pos(1021, 9), End: Pos(1021, 59)>,
StatementAssertion<Begin: Pos(1022, 9), End: Pos(1022, 62)>,
]
---
@Test public void testTanInf_catena_0() {
    TestUtils.assertSame(Complex.valueOf(0.0, 1.0), oneInf.tan());
    
}

---
---
@Test public void testTanInf_catena_1() {
    TestUtils.assertSame(Complex.valueOf(0.0,  - 1.0), oneNegInf.tan());
    
}

---
---
@Test public void testTanInf_catena_2() {
    TestUtils.assertSame(Complex.NaN, infOne.tan());
    
}

---
---
@Test public void testTanInf_catena_3() {
    TestUtils.assertSame(Complex.NaN, negInfOne.tan());
    
}

---
---
@Test public void testTanInf_catena_4() {
    TestUtils.assertSame(Complex.NaN, infInf.tan());
    
}

---
---
@Test public void testTanInf_catena_5() {
    TestUtils.assertSame(Complex.NaN, infNegInf.tan());
    
}

---
---
@Test public void testTanInf_catena_6() {
    TestUtils.assertSame(Complex.NaN, negInfInf.tan());
    
}

---
---
@Test public void testTanInf_catena_7() {
    TestUtils.assertSame(Complex.NaN, negInfNegInf.tan());
    
}

---
--------------------
Run: Math_93
@@@
Split test: org.apache.commons.math.util.MathUtilsTest::testFactorial
file: /root/workbench/exportInfo/d4j_buggy/Math_93/src/test//org/apache/commons/math/util/MathUtilsTest.java
Begin: Pos(234, 12)
End: Pos(244, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_93/src/test//org/apache/commons/math/util/MathUtilsTest.java
Name: testFactorial
Childs: [StatementAssertion<Begin: Pos(236, 13), End: Pos(236, 73)>,
StatementAssertion<Begin: Pos(237, 13), End: Pos(237, 105)>,
StatementAssertion<Begin: Pos(238, 13), End: Pos(238, 102)>,
StatementAssertion<Begin: Pos(241, 9), End: Pos(241, 53)>,
StatementAssertion<Begin: Pos(242, 9), End: Pos(242, 69)>,
StatementAssertion<Begin: Pos(243, 9), End: Pos(243, 66)>,
]
---
public void testFactorial_catena_0() {
    for(int i = 1;
    i < 21;
    i ++ ) {
        assertEquals(i + "! ", factorial(i), MathUtils.factorial(i));
        
    }
}

---
---
public void testFactorial_catena_1() {
    for(int i = 1;
    i < 21;
    i ++ ) {
        assertEquals(i + "! ", (double)factorial(i), MathUtils.factorialDouble(i), Double.MIN_VALUE);
        
    }
}

---
---
public void testFactorial_catena_2() {
    for(int i = 1;
    i < 21;
    i ++ ) {
        assertEquals(i + "! ", Math.log((double)factorial(i)), MathUtils.factorialLog(i), 10E-12);
        
    }
}

---
---
public void testFactorial_catena_3() {
    for(int i = 1;
    i < 21;
    i ++ ) {
        
    }
    assertEquals("0", 1, MathUtils.factorial(0));
    
}

---
---
public void testFactorial_catena_4() {
    for(int i = 1;
    i < 21;
    i ++ ) {
        
    }
    assertEquals("0", 1.0d, MathUtils.factorialDouble(0), 1E-14);
    
}

---
---
public void testFactorial_catena_5() {
    for(int i = 1;
    i < 21;
    i ++ ) {
        
    }
    assertEquals("0", 0.0d, MathUtils.factorialLog(0), 1E-14);
    
}

---
--------------------
Run: Math_66
@@@
Split test: org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest::testQuinticMin
file: /root/workbench/exportInfo/d4j_buggy/Math_66/src/test/java//org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java
Begin: Pos(55, 5)
End: Pos(100, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_66/src/test/java//org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java
Name: testQuinticMin
Childs: [StatementAssertion<Begin: Pos(71, 13), End: Pos(71, 57)>,
StatementAssertion<Begin: Pos(75, 13), End: Pos(75, 43)>,
StatementAssertion<Begin: Pos(79, 13), End: Pos(79, 57)>,
StatementAssertion<Begin: Pos(83, 13), End: Pos(83, 43)>,
StatementAssertion<Begin: Pos(87, 9), End: Pos(87, 59)>,
StatementAssertion<Begin: Pos(88, 9), End: Pos(88, 74)>,
StatementAssertion<Begin: Pos(89, 9), End: Pos(89, 82)>,
StatementAssertion<Begin: Pos(94, 13), End: Pos(94, 71)>,
StatementAssertion<Begin: Pos(96, 9), End: Pos(96, 57)>,
StatementAssertion<Begin: Pos(97, 9), End: Pos(97, 57)>,
StatementAssertion<Begin: Pos(98, 9), End: Pos(98, 57)>,
StatementAssertion<Begin: Pos(99, 9), End: Pos(99, 57)>,
]
---
@Test public void testQuinticMin_catena_0()throws MathException {
    UnivariateRealFunction f = new QuinticFunction();
    UnivariateRealOptimizer underlying = new BrentOptimizer();
    underlying.setRelativeAccuracy(1e-15);
    JDKRandomGenerator g = new JDKRandomGenerator();
    g.setSeed(4312000053L);
    MultiStartUnivariateRealOptimizer minimizer = new MultiStartUnivariateRealOptimizer(underlying, 5, g);
    minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());
    minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());
    try {
        minimizer.getOptima();
        fail("an exception should have been thrown");
        
    }
    catch(IllegalStateException ise) {
        
    }
    catch(Exception e) {
        
    }
    try {
        minimizer.getOptimaValues();
        
    }
    catch(IllegalStateException ise) {
        
    }
    catch(Exception e) {
        
    }
    double result = minimizer.optimize(f, GoalType.MINIMIZE,  - 0.3,  - 0.2);
    double[]optima = minimizer.getOptima();
    double[]optimaValues = minimizer.getOptimaValues();
    for(int i = 0;
    i < optima.length;
     ++ i) {
        
    }
}

---
---
@Test public void testQuinticMin_catena_1()throws MathException {
    UnivariateRealFunction f = new QuinticFunction();
    UnivariateRealOptimizer underlying = new BrentOptimizer();
    underlying.setRelativeAccuracy(1e-15);
    JDKRandomGenerator g = new JDKRandomGenerator();
    g.setSeed(4312000053L);
    MultiStartUnivariateRealOptimizer minimizer = new MultiStartUnivariateRealOptimizer(underlying, 5, g);
    minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());
    minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());
    try {
        minimizer.getOptima();
        
    }
    catch(IllegalStateException ise) {
        
    }
    catch(Exception e) {
        fail("wrong exception caught");
        
    }
    try {
        minimizer.getOptimaValues();
        
    }
    catch(IllegalStateException ise) {
        
    }
    catch(Exception e) {
        
    }
    double result = minimizer.optimize(f, GoalType.MINIMIZE,  - 0.3,  - 0.2);
    double[]optima = minimizer.getOptima();
    double[]optimaValues = minimizer.getOptimaValues();
    for(int i = 0;
    i < optima.length;
     ++ i) {
        
    }
}

---
---
@Test public void testQuinticMin_catena_2()throws MathException {
    UnivariateRealFunction f = new QuinticFunction();
    UnivariateRealOptimizer underlying = new BrentOptimizer();
    underlying.setRelativeAccuracy(1e-15);
    JDKRandomGenerator g = new JDKRandomGenerator();
    g.setSeed(4312000053L);
    MultiStartUnivariateRealOptimizer minimizer = new MultiStartUnivariateRealOptimizer(underlying, 5, g);
    minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());
    minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());
    try {
        minimizer.getOptima();
        
    }
    catch(IllegalStateException ise) {
        
    }
    catch(Exception e) {
        
    }
    try {
        minimizer.getOptimaValues();
        fail("an exception should have been thrown");
        
    }
    catch(IllegalStateException ise) {
        
    }
    catch(Exception e) {
        
    }
    double result = minimizer.optimize(f, GoalType.MINIMIZE,  - 0.3,  - 0.2);
    double[]optima = minimizer.getOptima();
    double[]optimaValues = minimizer.getOptimaValues();
    for(int i = 0;
    i < optima.length;
     ++ i) {
        
    }
}

---
---
@Test public void testQuinticMin_catena_3()throws MathException {
    UnivariateRealFunction f = new QuinticFunction();
    UnivariateRealOptimizer underlying = new BrentOptimizer();
    underlying.setRelativeAccuracy(1e-15);
    JDKRandomGenerator g = new JDKRandomGenerator();
    g.setSeed(4312000053L);
    MultiStartUnivariateRealOptimizer minimizer = new MultiStartUnivariateRealOptimizer(underlying, 5, g);
    minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());
    minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());
    try {
        minimizer.getOptima();
        
    }
    catch(IllegalStateException ise) {
        
    }
    catch(Exception e) {
        
    }
    try {
        minimizer.getOptimaValues();
        
    }
    catch(IllegalStateException ise) {
        
    }
    catch(Exception e) {
        fail("wrong exception caught");
        
    }
    double result = minimizer.optimize(f, GoalType.MINIMIZE,  - 0.3,  - 0.2);
    double[]optima = minimizer.getOptima();
    double[]optimaValues = minimizer.getOptimaValues();
    for(int i = 0;
    i < optima.length;
     ++ i) {
        
    }
}

---
---
@Test public void testQuinticMin_catena_4()throws MathException {
    UnivariateRealFunction f = new QuinticFunction();
    UnivariateRealOptimizer underlying = new BrentOptimizer();
    underlying.setRelativeAccuracy(1e-15);
    JDKRandomGenerator g = new JDKRandomGenerator();
    g.setSeed(4312000053L);
    MultiStartUnivariateRealOptimizer minimizer = new MultiStartUnivariateRealOptimizer(underlying, 5, g);
    minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());
    minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());
    try {
        minimizer.getOptima();
        
    }
    catch(IllegalStateException ise) {
        
    }
    catch(Exception e) {
        
    }
    try {
        minimizer.getOptimaValues();
        
    }
    catch(IllegalStateException ise) {
        
    }
    catch(Exception e) {
        
    }
    double result = minimizer.optimize(f, GoalType.MINIMIZE,  - 0.3,  - 0.2);
    assertEquals( - 0.2719561270319131, result, 1.0e-13);
    double[]optima = minimizer.getOptima();
    double[]optimaValues = minimizer.getOptimaValues();
    for(int i = 0;
    i < optima.length;
     ++ i) {
        
    }
}

---
---
@Test public void testQuinticMin_catena_5()throws MathException {
    UnivariateRealFunction f = new QuinticFunction();
    UnivariateRealOptimizer underlying = new BrentOptimizer();
    underlying.setRelativeAccuracy(1e-15);
    JDKRandomGenerator g = new JDKRandomGenerator();
    g.setSeed(4312000053L);
    MultiStartUnivariateRealOptimizer minimizer = new MultiStartUnivariateRealOptimizer(underlying, 5, g);
    minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());
    minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());
    try {
        minimizer.getOptima();
        
    }
    catch(IllegalStateException ise) {
        
    }
    catch(Exception e) {
        
    }
    try {
        minimizer.getOptimaValues();
        
    }
    catch(IllegalStateException ise) {
        
    }
    catch(Exception e) {
        
    }
    double result = minimizer.optimize(f, GoalType.MINIMIZE,  - 0.3,  - 0.2);
    assertEquals( - 0.2719561270319131, minimizer.getResult(), 1.0e-13);
    double[]optima = minimizer.getOptima();
    double[]optimaValues = minimizer.getOptimaValues();
    for(int i = 0;
    i < optima.length;
     ++ i) {
        
    }
}

---
---
@Test public void testQuinticMin_catena_6()throws MathException {
    UnivariateRealFunction f = new QuinticFunction();
    UnivariateRealOptimizer underlying = new BrentOptimizer();
    underlying.setRelativeAccuracy(1e-15);
    JDKRandomGenerator g = new JDKRandomGenerator();
    g.setSeed(4312000053L);
    MultiStartUnivariateRealOptimizer minimizer = new MultiStartUnivariateRealOptimizer(underlying, 5, g);
    minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());
    minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());
    try {
        minimizer.getOptima();
        
    }
    catch(IllegalStateException ise) {
        
    }
    catch(Exception e) {
        
    }
    try {
        minimizer.getOptimaValues();
        
    }
    catch(IllegalStateException ise) {
        
    }
    catch(Exception e) {
        
    }
    double result = minimizer.optimize(f, GoalType.MINIMIZE,  - 0.3,  - 0.2);
    assertEquals( - 0.04433426954946637, minimizer.getFunctionValue(), 1.0e-13);
    double[]optima = minimizer.getOptima();
    double[]optimaValues = minimizer.getOptimaValues();
    for(int i = 0;
    i < optima.length;
     ++ i) {
        
    }
}

---
---
@Test public void testQuinticMin_catena_7()throws MathException {
    UnivariateRealFunction f = new QuinticFunction();
    UnivariateRealOptimizer underlying = new BrentOptimizer();
    underlying.setRelativeAccuracy(1e-15);
    JDKRandomGenerator g = new JDKRandomGenerator();
    g.setSeed(4312000053L);
    MultiStartUnivariateRealOptimizer minimizer = new MultiStartUnivariateRealOptimizer(underlying, 5, g);
    minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());
    minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());
    try {
        minimizer.getOptima();
        
    }
    catch(IllegalStateException ise) {
        
    }
    catch(Exception e) {
        
    }
    try {
        minimizer.getOptimaValues();
        
    }
    catch(IllegalStateException ise) {
        
    }
    catch(Exception e) {
        
    }
    double result = minimizer.optimize(f, GoalType.MINIMIZE,  - 0.3,  - 0.2);
    double[]optima = minimizer.getOptima();
    double[]optimaValues = minimizer.getOptimaValues();
    for(int i = 0;
    i < optima.length;
     ++ i) {
        assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);
        
    }
}

---
---
@Test public void testQuinticMin_catena_8()throws MathException {
    UnivariateRealFunction f = new QuinticFunction();
    UnivariateRealOptimizer underlying = new BrentOptimizer();
    underlying.setRelativeAccuracy(1e-15);
    JDKRandomGenerator g = new JDKRandomGenerator();
    g.setSeed(4312000053L);
    MultiStartUnivariateRealOptimizer minimizer = new MultiStartUnivariateRealOptimizer(underlying, 5, g);
    minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());
    minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());
    try {
        minimizer.getOptima();
        
    }
    catch(IllegalStateException ise) {
        
    }
    catch(Exception e) {
        
    }
    try {
        minimizer.getOptimaValues();
        
    }
    catch(IllegalStateException ise) {
        
    }
    catch(Exception e) {
        
    }
    double result = minimizer.optimize(f, GoalType.MINIMIZE,  - 0.3,  - 0.2);
    double[]optima = minimizer.getOptima();
    double[]optimaValues = minimizer.getOptimaValues();
    for(int i = 0;
    i < optima.length;
     ++ i) {
        
    }
    assertTrue(minimizer.getEvaluations() >= 120);
    
}

---
---
@Test public void testQuinticMin_catena_9()throws MathException {
    UnivariateRealFunction f = new QuinticFunction();
    UnivariateRealOptimizer underlying = new BrentOptimizer();
    underlying.setRelativeAccuracy(1e-15);
    JDKRandomGenerator g = new JDKRandomGenerator();
    g.setSeed(4312000053L);
    MultiStartUnivariateRealOptimizer minimizer = new MultiStartUnivariateRealOptimizer(underlying, 5, g);
    minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());
    minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());
    try {
        minimizer.getOptima();
        
    }
    catch(IllegalStateException ise) {
        
    }
    catch(Exception e) {
        
    }
    try {
        minimizer.getOptimaValues();
        
    }
    catch(IllegalStateException ise) {
        
    }
    catch(Exception e) {
        
    }
    double result = minimizer.optimize(f, GoalType.MINIMIZE,  - 0.3,  - 0.2);
    double[]optima = minimizer.getOptima();
    double[]optimaValues = minimizer.getOptimaValues();
    for(int i = 0;
    i < optima.length;
     ++ i) {
        
    }
    assertTrue(minimizer.getEvaluations() <= 170);
    
}

---
---
@Test public void testQuinticMin_catena_10()throws MathException {
    UnivariateRealFunction f = new QuinticFunction();
    UnivariateRealOptimizer underlying = new BrentOptimizer();
    underlying.setRelativeAccuracy(1e-15);
    JDKRandomGenerator g = new JDKRandomGenerator();
    g.setSeed(4312000053L);
    MultiStartUnivariateRealOptimizer minimizer = new MultiStartUnivariateRealOptimizer(underlying, 5, g);
    minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());
    minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());
    try {
        minimizer.getOptima();
        
    }
    catch(IllegalStateException ise) {
        
    }
    catch(Exception e) {
        
    }
    try {
        minimizer.getOptimaValues();
        
    }
    catch(IllegalStateException ise) {
        
    }
    catch(Exception e) {
        
    }
    double result = minimizer.optimize(f, GoalType.MINIMIZE,  - 0.3,  - 0.2);
    double[]optima = minimizer.getOptima();
    double[]optimaValues = minimizer.getOptimaValues();
    for(int i = 0;
    i < optima.length;
     ++ i) {
        
    }
    assertTrue(minimizer.getIterationCount() >= 120);
    
}

---
---
@Test public void testQuinticMin_catena_11()throws MathException {
    UnivariateRealFunction f = new QuinticFunction();
    UnivariateRealOptimizer underlying = new BrentOptimizer();
    underlying.setRelativeAccuracy(1e-15);
    JDKRandomGenerator g = new JDKRandomGenerator();
    g.setSeed(4312000053L);
    MultiStartUnivariateRealOptimizer minimizer = new MultiStartUnivariateRealOptimizer(underlying, 5, g);
    minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());
    minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());
    try {
        minimizer.getOptima();
        
    }
    catch(IllegalStateException ise) {
        
    }
    catch(Exception e) {
        
    }
    try {
        minimizer.getOptimaValues();
        
    }
    catch(IllegalStateException ise) {
        
    }
    catch(Exception e) {
        
    }
    double result = minimizer.optimize(f, GoalType.MINIMIZE,  - 0.3,  - 0.2);
    double[]optima = minimizer.getOptima();
    double[]optimaValues = minimizer.getOptimaValues();
    for(int i = 0;
    i < optima.length;
     ++ i) {
        
    }
    assertTrue(minimizer.getIterationCount() <= 170);
    
}

---
@@@
Split test: org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest::testSinMin
file: /root/workbench/exportInfo/d4j_buggy/Math_66/src/test/java//org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java
Begin: Pos(34, 5)
End: Pos(53, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_66/src/test/java//org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java
Name: testSinMin
Childs: [StatementAssertion<Begin: Pos(47, 13), End: Pos(47, 61)>,
StatementAssertion<Begin: Pos(48, 13), End: Pos(48, 60)>,
StatementAssertion<Begin: Pos(49, 13), End: Pos(49, 71)>,
StatementAssertion<Begin: Pos(51, 9), End: Pos(51, 53)>,
StatementAssertion<Begin: Pos(52, 9), End: Pos(52, 53)>,
]
---
@Test public void testSinMin_catena_0()throws MathException {
    UnivariateRealFunction f = new SinFunction();
    UnivariateRealOptimizer underlying = new BrentOptimizer();
    JDKRandomGenerator g = new JDKRandomGenerator();
    g.setSeed(44428400075l);
    MultiStartUnivariateRealOptimizer minimizer = new MultiStartUnivariateRealOptimizer(underlying, 10, g);
    minimizer.optimize(f, GoalType.MINIMIZE,  - 100.0, 100.0);
    double[]optima = minimizer.getOptima();
    double[]optimaValues = minimizer.getOptimaValues();
    for(int i = 1;
    i < optima.length;
     ++ i) {
        double d = (optima[i] - optima[i - 1]) / (2 * Math.PI);
        assertTrue(Math.abs(d - Math.rint(d)) < 1.0e-8);
        
    }
}

---
---
@Test public void testSinMin_catena_1()throws MathException {
    UnivariateRealFunction f = new SinFunction();
    UnivariateRealOptimizer underlying = new BrentOptimizer();
    JDKRandomGenerator g = new JDKRandomGenerator();
    g.setSeed(44428400075l);
    MultiStartUnivariateRealOptimizer minimizer = new MultiStartUnivariateRealOptimizer(underlying, 10, g);
    minimizer.optimize(f, GoalType.MINIMIZE,  - 100.0, 100.0);
    double[]optima = minimizer.getOptima();
    double[]optimaValues = minimizer.getOptimaValues();
    for(int i = 1;
    i < optima.length;
     ++ i) {
        double d = (optima[i] - optima[i - 1]) / (2 * Math.PI);
        assertEquals( - 1.0, f.value(optima[i]), 1.0e-10);
        
    }
}

---
---
@Test public void testSinMin_catena_2()throws MathException {
    UnivariateRealFunction f = new SinFunction();
    UnivariateRealOptimizer underlying = new BrentOptimizer();
    JDKRandomGenerator g = new JDKRandomGenerator();
    g.setSeed(44428400075l);
    MultiStartUnivariateRealOptimizer minimizer = new MultiStartUnivariateRealOptimizer(underlying, 10, g);
    minimizer.optimize(f, GoalType.MINIMIZE,  - 100.0, 100.0);
    double[]optima = minimizer.getOptima();
    double[]optimaValues = minimizer.getOptimaValues();
    for(int i = 1;
    i < optima.length;
     ++ i) {
        double d = (optima[i] - optima[i - 1]) / (2 * Math.PI);
        assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);
        
    }
}

---
---
@Test public void testSinMin_catena_3()throws MathException {
    UnivariateRealFunction f = new SinFunction();
    UnivariateRealOptimizer underlying = new BrentOptimizer();
    JDKRandomGenerator g = new JDKRandomGenerator();
    g.setSeed(44428400075l);
    MultiStartUnivariateRealOptimizer minimizer = new MultiStartUnivariateRealOptimizer(underlying, 10, g);
    minimizer.optimize(f, GoalType.MINIMIZE,  - 100.0, 100.0);
    double[]optima = minimizer.getOptima();
    double[]optimaValues = minimizer.getOptimaValues();
    for(int i = 1;
    i < optima.length;
     ++ i) {
        double d = (optima[i] - optima[i - 1]) / (2 * Math.PI);
        
    }
    assertTrue(minimizer.getEvaluations() > 150);
    
}

---
---
@Test public void testSinMin_catena_4()throws MathException {
    UnivariateRealFunction f = new SinFunction();
    UnivariateRealOptimizer underlying = new BrentOptimizer();
    JDKRandomGenerator g = new JDKRandomGenerator();
    g.setSeed(44428400075l);
    MultiStartUnivariateRealOptimizer minimizer = new MultiStartUnivariateRealOptimizer(underlying, 10, g);
    minimizer.optimize(f, GoalType.MINIMIZE,  - 100.0, 100.0);
    double[]optima = minimizer.getOptima();
    double[]optimaValues = minimizer.getOptimaValues();
    for(int i = 1;
    i < optima.length;
     ++ i) {
        double d = (optima[i] - optima[i - 1]) / (2 * Math.PI);
        
    }
    assertTrue(minimizer.getEvaluations() < 250);
    
}

---
@@@
Split test: org.apache.commons.math.optimization.univariate.BrentOptimizerTest::testQuinticMinStatistics
file: /root/workbench/exportInfo/d4j_buggy/Math_66/src/test/java//org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java
Begin: Pos(85, 5)
End: Pos(115, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_66/src/test/java//org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java
Name: testQuinticMinStatistics
Childs: [StatementAssertion<Begin: Pos(112, 9), End: Pos(112, 83)>,
StatementAssertion<Begin: Pos(113, 9), End: Pos(113, 51)>,
StatementAssertion<Begin: Pos(114, 9), End: Pos(114, 51)>,
]
---
@Test public void testQuinticMinStatistics_catena_0()throws MathException {
    UnivariateRealFunction f = new QuinticFunction();
    UnivariateRealOptimizer minimizer = new BrentOptimizer();
    minimizer.setRelativeAccuracy(1e-10);
    minimizer.setAbsoluteAccuracy(1e-11);
    final DescriptiveStatistics[]stat = new DescriptiveStatistics[3];
    for(int i = 0;
    i < stat.length;
    i ++ ) {
        stat[i] = new DescriptiveStatistics();
        
    }
    final double min =  - 0.75;
    final double max = 0.25;
    final int nSamples = 200;
    final double delta = (max - min) / nSamples;
    for(int i = 0;
    i < nSamples;
    i ++ ) {
        final double start = min + i * delta;
        stat[0].addValue(minimizer.optimize(f, GoalType.MINIMIZE, min, max, start));
        stat[1].addValue(minimizer.getIterationCount());
        stat[2].addValue(minimizer.getEvaluations());
        
    }
    final double meanOptValue = stat[0].getMean();
    final double medianIter = stat[1].getPercentile(50);
    final double medianEval = stat[2].getPercentile(50);
    assertTrue(meanOptValue >  - 0.27195612812 && meanOptValue <  - 0.27195612811);
    
}

---
---
@Test public void testQuinticMinStatistics_catena_1()throws MathException {
    UnivariateRealFunction f = new QuinticFunction();
    UnivariateRealOptimizer minimizer = new BrentOptimizer();
    minimizer.setRelativeAccuracy(1e-10);
    minimizer.setAbsoluteAccuracy(1e-11);
    final DescriptiveStatistics[]stat = new DescriptiveStatistics[3];
    for(int i = 0;
    i < stat.length;
    i ++ ) {
        stat[i] = new DescriptiveStatistics();
        
    }
    final double min =  - 0.75;
    final double max = 0.25;
    final int nSamples = 200;
    final double delta = (max - min) / nSamples;
    for(int i = 0;
    i < nSamples;
    i ++ ) {
        final double start = min + i * delta;
        stat[0].addValue(minimizer.optimize(f, GoalType.MINIMIZE, min, max, start));
        stat[1].addValue(minimizer.getIterationCount());
        stat[2].addValue(minimizer.getEvaluations());
        
    }
    final double meanOptValue = stat[0].getMean();
    final double medianIter = stat[1].getPercentile(50);
    final double medianEval = stat[2].getPercentile(50);
    assertEquals(medianIter, 17, Math.ulp(1d));
    
}

---
---
@Test public void testQuinticMinStatistics_catena_2()throws MathException {
    UnivariateRealFunction f = new QuinticFunction();
    UnivariateRealOptimizer minimizer = new BrentOptimizer();
    minimizer.setRelativeAccuracy(1e-10);
    minimizer.setAbsoluteAccuracy(1e-11);
    final DescriptiveStatistics[]stat = new DescriptiveStatistics[3];
    for(int i = 0;
    i < stat.length;
    i ++ ) {
        stat[i] = new DescriptiveStatistics();
        
    }
    final double min =  - 0.75;
    final double max = 0.25;
    final int nSamples = 200;
    final double delta = (max - min) / nSamples;
    for(int i = 0;
    i < nSamples;
    i ++ ) {
        final double start = min + i * delta;
        stat[0].addValue(minimizer.optimize(f, GoalType.MINIMIZE, min, max, start));
        stat[1].addValue(minimizer.getIterationCount());
        stat[2].addValue(minimizer.getEvaluations());
        
    }
    final double meanOptValue = stat[0].getMean();
    final double medianIter = stat[1].getPercentile(50);
    final double medianEval = stat[2].getPercentile(50);
    assertEquals(medianEval, 18, Math.ulp(1d));
    
}

---
@@@
Split test: org.apache.commons.math.optimization.univariate.BrentOptimizerTest::testSinMin
file: /root/workbench/exportInfo/d4j_buggy/Math_66/src/test/java//org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java
Begin: Pos(40, 5)
End: Pos(69, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_66/src/test/java//org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java
Name: testSinMin
Childs: [StatementAssertion<Begin: Pos(45, 9), End: Pos(45, 57)>,
StatementAssertion<Begin: Pos(48, 13), End: Pos(48, 57)>,
StatementAssertion<Begin: Pos(52, 13), End: Pos(52, 43)>,
StatementAssertion<Begin: Pos(54, 9), End: Pos(54, 124)>,
StatementAssertion<Begin: Pos(55, 9), End: Pos(55, 56)>,
StatementAssertion<Begin: Pos(56, 9), End: Pos(56, 124)>,
StatementAssertion<Begin: Pos(57, 9), End: Pos(57, 56)>,
StatementAssertion<Begin: Pos(58, 9), End: Pos(58, 57)>,
StatementAssertion<Begin: Pos(59, 9), End: Pos(59, 57)>,
StatementAssertion<Begin: Pos(63, 13), End: Pos(63, 57)>,
StatementAssertion<Begin: Pos(67, 13), End: Pos(67, 43)>,
]
---
@Test public void testSinMin_catena_0()throws MathException {
    UnivariateRealFunction f = new SinFunction();
    UnivariateRealOptimizer minimizer = new BrentOptimizer();
    minimizer.setMaxEvaluations(200);
    assertEquals(200, minimizer.getMaxEvaluations());
    try {
        minimizer.getResult();
        
    }
    catch(NoDataException ise) {
        
    }
    catch(Exception e) {
        
    }
    minimizer.setMaxEvaluations(10);
    try {
        minimizer.optimize(f, GoalType.MINIMIZE, 4, 5);
        
    }
    catch(FunctionEvaluationException fee) {
        
    }
    catch(Exception e) {
        
    }
}

---
---
@Test public void testSinMin_catena_1()throws MathException {
    UnivariateRealFunction f = new SinFunction();
    UnivariateRealOptimizer minimizer = new BrentOptimizer();
    minimizer.setMaxEvaluations(200);
    try {
        minimizer.getResult();
        fail("an exception should have been thrown");
        
    }
    catch(NoDataException ise) {
        
    }
    catch(Exception e) {
        
    }
    minimizer.setMaxEvaluations(10);
    try {
        minimizer.optimize(f, GoalType.MINIMIZE, 4, 5);
        
    }
    catch(FunctionEvaluationException fee) {
        
    }
    catch(Exception e) {
        
    }
}

---
---
@Test public void testSinMin_catena_2()throws MathException {
    UnivariateRealFunction f = new SinFunction();
    UnivariateRealOptimizer minimizer = new BrentOptimizer();
    minimizer.setMaxEvaluations(200);
    try {
        minimizer.getResult();
        
    }
    catch(NoDataException ise) {
        
    }
    catch(Exception e) {
        fail("wrong exception caught");
        
    }
    minimizer.setMaxEvaluations(10);
    try {
        minimizer.optimize(f, GoalType.MINIMIZE, 4, 5);
        
    }
    catch(FunctionEvaluationException fee) {
        
    }
    catch(Exception e) {
        
    }
}

---
---
@Test public void testSinMin_catena_3()throws MathException {
    UnivariateRealFunction f = new SinFunction();
    UnivariateRealOptimizer minimizer = new BrentOptimizer();
    minimizer.setMaxEvaluations(200);
    try {
        minimizer.getResult();
        
    }
    catch(NoDataException ise) {
        
    }
    catch(Exception e) {
        
    }
    assertEquals(3 * Math.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 4, 5), 10 * minimizer.getRelativeAccuracy());
    minimizer.setMaxEvaluations(10);
    try {
        minimizer.optimize(f, GoalType.MINIMIZE, 4, 5);
        
    }
    catch(FunctionEvaluationException fee) {
        
    }
    catch(Exception e) {
        
    }
}

---
---
@Test public void testSinMin_catena_4()throws MathException {
    UnivariateRealFunction f = new SinFunction();
    UnivariateRealOptimizer minimizer = new BrentOptimizer();
    minimizer.setMaxEvaluations(200);
    try {
        minimizer.getResult();
        
    }
    catch(NoDataException ise) {
        
    }
    catch(Exception e) {
        
    }
    assertTrue(minimizer.getIterationCount() <= 50);
    minimizer.setMaxEvaluations(10);
    try {
        minimizer.optimize(f, GoalType.MINIMIZE, 4, 5);
        
    }
    catch(FunctionEvaluationException fee) {
        
    }
    catch(Exception e) {
        
    }
}

---
---
@Test public void testSinMin_catena_5()throws MathException {
    UnivariateRealFunction f = new SinFunction();
    UnivariateRealOptimizer minimizer = new BrentOptimizer();
    minimizer.setMaxEvaluations(200);
    try {
        minimizer.getResult();
        
    }
    catch(NoDataException ise) {
        
    }
    catch(Exception e) {
        
    }
    assertEquals(3 * Math.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 1, 5), 10 * minimizer.getRelativeAccuracy());
    minimizer.setMaxEvaluations(10);
    try {
        minimizer.optimize(f, GoalType.MINIMIZE, 4, 5);
        
    }
    catch(FunctionEvaluationException fee) {
        
    }
    catch(Exception e) {
        
    }
}

---
---
@Test public void testSinMin_catena_6()throws MathException {
    UnivariateRealFunction f = new SinFunction();
    UnivariateRealOptimizer minimizer = new BrentOptimizer();
    minimizer.setMaxEvaluations(200);
    try {
        minimizer.getResult();
        
    }
    catch(NoDataException ise) {
        
    }
    catch(Exception e) {
        
    }
    assertTrue(minimizer.getIterationCount() <= 50);
    minimizer.setMaxEvaluations(10);
    try {
        minimizer.optimize(f, GoalType.MINIMIZE, 4, 5);
        
    }
    catch(FunctionEvaluationException fee) {
        
    }
    catch(Exception e) {
        
    }
}

---
---
@Test public void testSinMin_catena_7()throws MathException {
    UnivariateRealFunction f = new SinFunction();
    UnivariateRealOptimizer minimizer = new BrentOptimizer();
    minimizer.setMaxEvaluations(200);
    try {
        minimizer.getResult();
        
    }
    catch(NoDataException ise) {
        
    }
    catch(Exception e) {
        
    }
    assertTrue(minimizer.getEvaluations() <= 100);
    minimizer.setMaxEvaluations(10);
    try {
        minimizer.optimize(f, GoalType.MINIMIZE, 4, 5);
        
    }
    catch(FunctionEvaluationException fee) {
        
    }
    catch(Exception e) {
        
    }
}

---
---
@Test public void testSinMin_catena_8()throws MathException {
    UnivariateRealFunction f = new SinFunction();
    UnivariateRealOptimizer minimizer = new BrentOptimizer();
    minimizer.setMaxEvaluations(200);
    try {
        minimizer.getResult();
        
    }
    catch(NoDataException ise) {
        
    }
    catch(Exception e) {
        
    }
    assertTrue(minimizer.getEvaluations() >= 15);
    minimizer.setMaxEvaluations(10);
    try {
        minimizer.optimize(f, GoalType.MINIMIZE, 4, 5);
        
    }
    catch(FunctionEvaluationException fee) {
        
    }
    catch(Exception e) {
        
    }
}

---
---
@Test public void testSinMin_catena_9()throws MathException {
    UnivariateRealFunction f = new SinFunction();
    UnivariateRealOptimizer minimizer = new BrentOptimizer();
    minimizer.setMaxEvaluations(200);
    try {
        minimizer.getResult();
        
    }
    catch(NoDataException ise) {
        
    }
    catch(Exception e) {
        
    }
    minimizer.setMaxEvaluations(10);
    try {
        minimizer.optimize(f, GoalType.MINIMIZE, 4, 5);
        fail("an exception should have been thrown");
        
    }
    catch(FunctionEvaluationException fee) {
        
    }
    catch(Exception e) {
        
    }
}

---
---
@Test public void testSinMin_catena_10()throws MathException {
    UnivariateRealFunction f = new SinFunction();
    UnivariateRealOptimizer minimizer = new BrentOptimizer();
    minimizer.setMaxEvaluations(200);
    try {
        minimizer.getResult();
        
    }
    catch(NoDataException ise) {
        
    }
    catch(Exception e) {
        
    }
    minimizer.setMaxEvaluations(10);
    try {
        minimizer.optimize(f, GoalType.MINIMIZE, 4, 5);
        
    }
    catch(FunctionEvaluationException fee) {
        
    }
    catch(Exception e) {
        fail("wrong exception caught");
        
    }
}

---
--------------------
Run: Math_36
@@@
Split test: org.apache.commons.math.fraction.BigFractionTest::testFloatValueForLargeNumeratorAndDenominator
file: /root/workbench/exportInfo/d4j_buggy/Math_36/src/test/java//org/apache/commons/math/fraction/BigFractionTest.java
Begin: Pos(214, 5)
End: Pos(223, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_36/src/test/java//org/apache/commons/math/fraction/BigFractionTest.java
Name: testFloatValueForLargeNumeratorAndDenominator
Childs: [StatementAssertion<Begin: Pos(222, 9), End: Pos(222, 58)>,
]
@@@
Split test: org.apache.commons.math.fraction.BigFractionTest::testDoubleValueForLargeNumeratorAndDenominator
file: /root/workbench/exportInfo/d4j_buggy/Math_36/src/test/java//org/apache/commons/math/fraction/BigFractionTest.java
Begin: Pos(202, 5)
End: Pos(211, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_36/src/test/java//org/apache/commons/math/fraction/BigFractionTest.java
Name: testDoubleValueForLargeNumeratorAndDenominator
Childs: [StatementAssertion<Begin: Pos(210, 9), End: Pos(210, 59)>,
]
--------------------
Run: Math_24
@@@
Split test: org.apache.commons.math3.optimization.univariate.BrentOptimizerTest::testMath855
file: /root/workbench/exportInfo/d4j_buggy/Math_24/src/test/java//org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java
Begin: Pos(192, 5)
End: Pos(214, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_24/src/test/java//org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java
Name: testMath855
Childs: [StatementAssertion<Begin: Pos(213, 9), End: Pos(213, 88)>,
]
--------------------
Run: Math_28
@@@
Split test: org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath828Cycle
file: /root/workbench/exportInfo/d4j_buggy/Math_28/src/test/java//org/apache/commons/math3/optimization/linear/SimplexSolverTest.java
Begin: Pos(54, 5)
End: Pos(73, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_28/src/test/java//org/apache/commons/math3/optimization/linear/SimplexSolverTest.java
Name: testMath828Cycle
Childs: [StatementAssertion<Begin: Pos(71, 9), End: Pos(71, 64)>,
StatementAssertion<Begin: Pos(72, 9), End: Pos(72, 73)>,
]
---
@Test public void testMath828Cycle_catena_0() {
    LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] {
        1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0
    }, 0.0);
    ArrayList < LinearConstraint > constraints = new ArrayList < LinearConstraint > ();
    constraints.add(new LinearConstraint(new double[] {
        0.0, 16.0, 14.0, 69.0, 1.0, 85.0, 52.0, 43.0, 64.0, 97.0, 14.0, 74.0, 89.0, 28.0, 94.0, 58.0, 13.0, 22.0, 21.0, 17.0, 30.0, 25.0, 1.0, 59.0, 91.0, 78.0, 12.0, 74.0, 56.0, 3.0, 88.0, 
    }, Relationship.GEQ, 91.0));
    constraints.add(new LinearConstraint(new double[] {
        0.0, 60.0, 40.0, 81.0, 71.0, 72.0, 46.0, 45.0, 38.0, 48.0, 40.0, 17.0, 33.0, 85.0, 64.0, 32.0, 84.0, 3.0, 54.0, 44.0, 71.0, 67.0, 90.0, 95.0, 54.0, 99.0, 99.0, 29.0, 52.0, 98.0, 9.0, 
    }, Relationship.GEQ, 54.0));
    constraints.add(new LinearConstraint(new double[] {
        0.0, 41.0, 12.0, 86.0, 90.0, 61.0, 31.0, 41.0, 23.0, 89.0, 17.0, 74.0, 44.0, 27.0, 16.0, 47.0, 80.0, 32.0, 11.0, 56.0, 68.0, 82.0, 11.0, 62.0, 62.0, 53.0, 39.0, 16.0, 48.0, 1.0, 63.0, 
    }, Relationship.GEQ, 62.0));
    constraints.add(new LinearConstraint(new double[] {
        83.0,  - 76.0,  - 94.0,  - 19.0,  - 15.0,  - 70.0,  - 72.0,  - 57.0,  - 63.0,  - 65.0,  - 22.0,  - 94.0,  - 22.0,  - 88.0,  - 86.0,  - 89.0,  - 72.0,  - 16.0,  - 80.0,  - 49.0,  - 70.0,  - 93.0,  - 95.0,  - 17.0,  - 83.0,  - 97.0,  - 31.0,  - 47.0,  - 31.0,  - 13.0,  - 23.0, 
    }, Relationship.GEQ, 0.0));
    constraints.add(new LinearConstraint(new double[] {
        41.0,  - 96.0,  - 41.0,  - 48.0,  - 70.0,  - 43.0,  - 43.0,  - 43.0,  - 97.0,  - 37.0,  - 85.0,  - 70.0,  - 45.0,  - 67.0,  - 87.0,  - 69.0,  - 94.0,  - 54.0,  - 54.0,  - 92.0,  - 79.0,  - 10.0,  - 35.0,  - 20.0,  - 41.0,  - 41.0,  - 65.0,  - 25.0,  - 12.0,  - 8.0,  - 46.0, 
    }, Relationship.GEQ, 0.0));
    constraints.add(new LinearConstraint(new double[] {
        27.0,  - 42.0,  - 65.0,  - 49.0,  - 53.0,  - 42.0,  - 17.0,  - 2.0,  - 61.0,  - 31.0,  - 76.0,  - 47.0,  - 8.0,  - 93.0,  - 86.0,  - 62.0,  - 65.0,  - 63.0,  - 22.0,  - 43.0,  - 27.0,  - 23.0,  - 32.0,  - 74.0,  - 27.0,  - 63.0,  - 47.0,  - 78.0,  - 29.0,  - 95.0,  - 73.0, 
    }, Relationship.GEQ, 0.0));
    constraints.add(new LinearConstraint(new double[] {
        15.0,  - 46.0,  - 41.0,  - 83.0,  - 98.0,  - 99.0,  - 21.0,  - 35.0,  - 7.0,  - 14.0,  - 80.0,  - 63.0,  - 18.0,  - 42.0,  - 5.0,  - 34.0,  - 56.0,  - 70.0,  - 16.0,  - 18.0,  - 74.0,  - 61.0,  - 47.0,  - 41.0,  - 15.0,  - 79.0,  - 18.0,  - 47.0,  - 88.0,  - 68.0,  - 55.0, 
    }, Relationship.GEQ, 0.0));
    double epsilon = 1e-6;
    PointValuePair solution = new SimplexSolver().optimize(f, constraints, GoalType.MINIMIZE, true);
    Assert.assertEquals(1.0d, solution.getValue(), epsilon);
    
}

---
---
@Test public void testMath828Cycle_catena_1() {
    LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] {
        1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0
    }, 0.0);
    ArrayList < LinearConstraint > constraints = new ArrayList < LinearConstraint > ();
    constraints.add(new LinearConstraint(new double[] {
        0.0, 16.0, 14.0, 69.0, 1.0, 85.0, 52.0, 43.0, 64.0, 97.0, 14.0, 74.0, 89.0, 28.0, 94.0, 58.0, 13.0, 22.0, 21.0, 17.0, 30.0, 25.0, 1.0, 59.0, 91.0, 78.0, 12.0, 74.0, 56.0, 3.0, 88.0, 
    }, Relationship.GEQ, 91.0));
    constraints.add(new LinearConstraint(new double[] {
        0.0, 60.0, 40.0, 81.0, 71.0, 72.0, 46.0, 45.0, 38.0, 48.0, 40.0, 17.0, 33.0, 85.0, 64.0, 32.0, 84.0, 3.0, 54.0, 44.0, 71.0, 67.0, 90.0, 95.0, 54.0, 99.0, 99.0, 29.0, 52.0, 98.0, 9.0, 
    }, Relationship.GEQ, 54.0));
    constraints.add(new LinearConstraint(new double[] {
        0.0, 41.0, 12.0, 86.0, 90.0, 61.0, 31.0, 41.0, 23.0, 89.0, 17.0, 74.0, 44.0, 27.0, 16.0, 47.0, 80.0, 32.0, 11.0, 56.0, 68.0, 82.0, 11.0, 62.0, 62.0, 53.0, 39.0, 16.0, 48.0, 1.0, 63.0, 
    }, Relationship.GEQ, 62.0));
    constraints.add(new LinearConstraint(new double[] {
        83.0,  - 76.0,  - 94.0,  - 19.0,  - 15.0,  - 70.0,  - 72.0,  - 57.0,  - 63.0,  - 65.0,  - 22.0,  - 94.0,  - 22.0,  - 88.0,  - 86.0,  - 89.0,  - 72.0,  - 16.0,  - 80.0,  - 49.0,  - 70.0,  - 93.0,  - 95.0,  - 17.0,  - 83.0,  - 97.0,  - 31.0,  - 47.0,  - 31.0,  - 13.0,  - 23.0, 
    }, Relationship.GEQ, 0.0));
    constraints.add(new LinearConstraint(new double[] {
        41.0,  - 96.0,  - 41.0,  - 48.0,  - 70.0,  - 43.0,  - 43.0,  - 43.0,  - 97.0,  - 37.0,  - 85.0,  - 70.0,  - 45.0,  - 67.0,  - 87.0,  - 69.0,  - 94.0,  - 54.0,  - 54.0,  - 92.0,  - 79.0,  - 10.0,  - 35.0,  - 20.0,  - 41.0,  - 41.0,  - 65.0,  - 25.0,  - 12.0,  - 8.0,  - 46.0, 
    }, Relationship.GEQ, 0.0));
    constraints.add(new LinearConstraint(new double[] {
        27.0,  - 42.0,  - 65.0,  - 49.0,  - 53.0,  - 42.0,  - 17.0,  - 2.0,  - 61.0,  - 31.0,  - 76.0,  - 47.0,  - 8.0,  - 93.0,  - 86.0,  - 62.0,  - 65.0,  - 63.0,  - 22.0,  - 43.0,  - 27.0,  - 23.0,  - 32.0,  - 74.0,  - 27.0,  - 63.0,  - 47.0,  - 78.0,  - 29.0,  - 95.0,  - 73.0, 
    }, Relationship.GEQ, 0.0));
    constraints.add(new LinearConstraint(new double[] {
        15.0,  - 46.0,  - 41.0,  - 83.0,  - 98.0,  - 99.0,  - 21.0,  - 35.0,  - 7.0,  - 14.0,  - 80.0,  - 63.0,  - 18.0,  - 42.0,  - 5.0,  - 34.0,  - 56.0,  - 70.0,  - 16.0,  - 18.0,  - 74.0,  - 61.0,  - 47.0,  - 41.0,  - 15.0,  - 79.0,  - 18.0,  - 47.0,  - 88.0,  - 68.0,  - 55.0, 
    }, Relationship.GEQ, 0.0));
    double epsilon = 1e-6;
    PointValuePair solution = new SimplexSolver().optimize(f, constraints, GoalType.MINIMIZE, true);
    Assert.assertTrue(validSolution(solution, constraints, epsilon));
    
}

---
--------------------
Run: Math_52
@@@
Split test: org.apache.commons.math.geometry.euclidean.threed.RotationTest::testIssue639
file: /root/workbench/exportInfo/d4j_buggy/Math_52/src/test/java//org/apache/commons/math/geometry/euclidean/threed/RotationTest.java
Begin: Pos(479, 3)
End: Pos(492, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Math_52/src/test/java//org/apache/commons/math/geometry/euclidean/threed/RotationTest.java
Name: testIssue639
Childs: [StatementAssertion<Begin: Pos(488, 7), End: Pos(488, 78)>,
StatementAssertion<Begin: Pos(489, 7), End: Pos(489, 78)>,
StatementAssertion<Begin: Pos(490, 7), End: Pos(490, 78)>,
StatementAssertion<Begin: Pos(491, 7), End: Pos(491, 78)>,
]
---
@Test public void testIssue639_catena_0() {
    Vector3D u1 = new Vector3D( - 1321008684645961.0 / 268435456.0,  - 5774608829631843.0 / 268435456.0,  - 3822921525525679.0 / 4294967296.0);
    Vector3D u2 = new Vector3D( - 5712344449280879.0 / 2097152.0,  - 2275058564560979.0 / 1048576.0, 4423475992255071.0 / 65536.0);
    Rotation rot = new Rotation(u1, u2, Vector3D.PLUS_I, Vector3D.PLUS_K);
    Assert.assertEquals(0.6228370359608200639829222, rot.getQ0(), 1.0e-15);
    
}

---
---
@Test public void testIssue639_catena_1() {
    Vector3D u1 = new Vector3D( - 1321008684645961.0 / 268435456.0,  - 5774608829631843.0 / 268435456.0,  - 3822921525525679.0 / 4294967296.0);
    Vector3D u2 = new Vector3D( - 5712344449280879.0 / 2097152.0,  - 2275058564560979.0 / 1048576.0, 4423475992255071.0 / 65536.0);
    Rotation rot = new Rotation(u1, u2, Vector3D.PLUS_I, Vector3D.PLUS_K);
    Assert.assertEquals(0.0257707621456498790029987, rot.getQ1(), 1.0e-15);
    
}

---
---
@Test public void testIssue639_catena_2() {
    Vector3D u1 = new Vector3D( - 1321008684645961.0 / 268435456.0,  - 5774608829631843.0 / 268435456.0,  - 3822921525525679.0 / 4294967296.0);
    Vector3D u2 = new Vector3D( - 5712344449280879.0 / 2097152.0,  - 2275058564560979.0 / 1048576.0, 4423475992255071.0 / 65536.0);
    Rotation rot = new Rotation(u1, u2, Vector3D.PLUS_I, Vector3D.PLUS_K);
    Assert.assertEquals( - 0.0000000002503012255839931, rot.getQ2(), 1.0e-15);
    
}

---
---
@Test public void testIssue639_catena_3() {
    Vector3D u1 = new Vector3D( - 1321008684645961.0 / 268435456.0,  - 5774608829631843.0 / 268435456.0,  - 3822921525525679.0 / 4294967296.0);
    Vector3D u2 = new Vector3D( - 5712344449280879.0 / 2097152.0,  - 2275058564560979.0 / 1048576.0, 4423475992255071.0 / 65536.0);
    Rotation rot = new Rotation(u1, u2, Vector3D.PLUS_I, Vector3D.PLUS_K);
    Assert.assertEquals( - 0.7819270390861109450724902, rot.getQ3(), 1.0e-15);
    
}

---
--------------------
Run: Math_47
@@@
Split test: org.apache.commons.math.complex.ComplexTest::testAtanI
file: /root/workbench/exportInfo/d4j_buggy/Math_47/src/test/java//org/apache/commons/math/complex/ComplexTest.java
Begin: Pos(574, 5)
End: Pos(580, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_47/src/test/java//org/apache/commons/math/complex/ComplexTest.java
Name: testAtanI
Childs: [StatementAssertion<Begin: Pos(579, 9), End: Pos(579, 57)>,
]
@@@
Split test: org.apache.commons.math.complex.ComplexTest::testDivideZero
file: /root/workbench/exportInfo/d4j_buggy/Math_47/src/test/java//org/apache/commons/math/complex/ComplexTest.java
Begin: Pos(228, 5)
End: Pos(233, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_47/src/test/java//org/apache/commons/math/complex/ComplexTest.java
Name: testDivideZero
Childs: [StatementAssertion<Begin: Pos(232, 9), End: Pos(232, 44)>,
]
--------------------
Run: Math_43
@@@
Split test: org.apache.commons.math.stat.descriptive.SummaryStatisticsTest::testOverrideMeanWithMathClass
file: /root/workbench/exportInfo/d4j_buggy/Math_43/src/test/java//org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java
Begin: Pos(327, 5)
End: Pos(336, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_43/src/test/java//org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java
Name: testOverrideMeanWithMathClass
Childs: [StatementAssertion<Begin: Pos(335, 9), End: Pos(335, 78)>,
]
@@@
Split test: org.apache.commons.math.stat.descriptive.SummaryStatisticsTest::testOverrideGeoMeanWithMathClass
file: /root/workbench/exportInfo/d4j_buggy/Math_43/src/test/java//org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java
Begin: Pos(338, 5)
End: Pos(347, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_43/src/test/java//org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java
Name: testOverrideGeoMeanWithMathClass
Childs: [StatementAssertion<Begin: Pos(346, 9), End: Pos(346, 96)>,
]
@@@
Split test: org.apache.commons.math.stat.descriptive.SummaryStatisticsTest::testOverrideVarianceWithMathClass
file: /root/workbench/exportInfo/d4j_buggy/Math_43/src/test/java//org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java
Begin: Pos(316, 5)
End: Pos(325, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_43/src/test/java//org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java
Name: testOverrideVarianceWithMathClass
Childs: [StatementAssertion<Begin: Pos(324, 9), End: Pos(324, 91)>,
]
@@@
Split test: org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest::testOverrideMeanWithMathClass
file: /root/workbench/exportInfo/d4j_buggy/Math_43/src/test/java//org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatisticsTest.java
# Exception:
Traceback (most recent call last):
  File "run.py", line 39, in run
    fti, check = spliter.process_test_node_v2(path2file, test[1])
  File "/root/workbench/splitTests/spliter.py", line 259, in process_test_node_v2
    node = get_only_node(name, _globals)
  File "/root/workbench/splitTests/util.py", line 39, in get_only_node
    raise ParseError('Cannot find method <{}> in AST'.format(name))
util.ParseError: Cannot find method <testOverrideMeanWithMathClass> in AST

---
@@@
Split test: org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest::testOverrideGeoMeanWithMathClass
file: /root/workbench/exportInfo/d4j_buggy/Math_43/src/test/java//org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatisticsTest.java
# Exception:
Traceback (most recent call last):
  File "run.py", line 39, in run
    fti, check = spliter.process_test_node_v2(path2file, test[1])
  File "/root/workbench/splitTests/spliter.py", line 259, in process_test_node_v2
    node = get_only_node(name, _globals)
  File "/root/workbench/splitTests/util.py", line 39, in get_only_node
    raise ParseError('Cannot find method <{}> in AST'.format(name))
util.ParseError: Cannot find method <testOverrideGeoMeanWithMathClass> in AST

---
@@@
Split test: org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest::testOverrideVarianceWithMathClass
file: /root/workbench/exportInfo/d4j_buggy/Math_43/src/test/java//org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatisticsTest.java
# Exception:
Traceback (most recent call last):
  File "run.py", line 39, in run
    fti, check = spliter.process_test_node_v2(path2file, test[1])
  File "/root/workbench/splitTests/spliter.py", line 259, in process_test_node_v2
    node = get_only_node(name, _globals)
  File "/root/workbench/splitTests/util.py", line 39, in get_only_node
    raise ParseError('Cannot find method <{}> in AST'.format(name))
util.ParseError: Cannot find method <testOverrideVarianceWithMathClass> in AST

---
--------------------
Run: Math_38
@@@
Split test: org.apache.commons.math.optimization.direct.BOBYQAOptimizerTest::testConstrainedRosenWithMoreInterpolationPoints
file: /root/workbench/exportInfo/d4j_buggy/Math_38/src/test/java//org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java
Begin: Pos(241, 5)
End: Pos(262, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_38/src/test/java//org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java
Name: testConstrainedRosenWithMoreInterpolationPoints
Childs: [StatementAssertion<Begin: Pos(255, 13), End: Pos(260, 33)>,
]
--------------------
Run: Math_88
@@@
Split test: org.apache.commons.math.optimization.linear.SimplexSolverTest::testMath272
file: /root/workbench/exportInfo/d4j_buggy/Math_88/src/test//org/apache/commons/math/optimization/linear/SimplexSolverTest.java
Begin: Pos(34, 5)
End: Pos(49, 7)
Source: /root/workbench/exportInfo/d4j_buggy/Math_88/src/test//org/apache/commons/math/optimization/linear/SimplexSolverTest.java
Name: testMath272
Childs: [StatementAssertion<Begin: Pos(45, 9), End: Pos(45, 60)>,
StatementAssertion<Begin: Pos(46, 9), End: Pos(46, 60)>,
StatementAssertion<Begin: Pos(47, 9), End: Pos(47, 60)>,
StatementAssertion<Begin: Pos(48, 9), End: Pos(48, 57)>,
]
---
@Test public void testMath272_catena_0()throws OptimizationException {
    LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] {
        2, 2, 1
    }, 0);
    Collection < LinearConstraint > constraints = new ArrayList < LinearConstraint > ();
    constraints.add(new LinearConstraint(new double[] {
        1, 1, 0
    }, Relationship.GEQ, 1));
    constraints.add(new LinearConstraint(new double[] {
        1, 0, 1
    }, Relationship.GEQ, 1));
    constraints.add(new LinearConstraint(new double[] {
        0, 1, 0
    }, Relationship.GEQ, 1));
    SimplexSolver solver = new SimplexSolver();
    RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MINIMIZE, true);
    assertEquals(0.0, solution.getPoint()[0], .0000001);
    
}

---
---
@Test public void testMath272_catena_1()throws OptimizationException {
    LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] {
        2, 2, 1
    }, 0);
    Collection < LinearConstraint > constraints = new ArrayList < LinearConstraint > ();
    constraints.add(new LinearConstraint(new double[] {
        1, 1, 0
    }, Relationship.GEQ, 1));
    constraints.add(new LinearConstraint(new double[] {
        1, 0, 1
    }, Relationship.GEQ, 1));
    constraints.add(new LinearConstraint(new double[] {
        0, 1, 0
    }, Relationship.GEQ, 1));
    SimplexSolver solver = new SimplexSolver();
    RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MINIMIZE, true);
    assertEquals(1.0, solution.getPoint()[1], .0000001);
    
}

---
---
@Test public void testMath272_catena_2()throws OptimizationException {
    LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] {
        2, 2, 1
    }, 0);
    Collection < LinearConstraint > constraints = new ArrayList < LinearConstraint > ();
    constraints.add(new LinearConstraint(new double[] {
        1, 1, 0
    }, Relationship.GEQ, 1));
    constraints.add(new LinearConstraint(new double[] {
        1, 0, 1
    }, Relationship.GEQ, 1));
    constraints.add(new LinearConstraint(new double[] {
        0, 1, 0
    }, Relationship.GEQ, 1));
    SimplexSolver solver = new SimplexSolver();
    RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MINIMIZE, true);
    assertEquals(1.0, solution.getPoint()[2], .0000001);
    
}

---
---
@Test public void testMath272_catena_3()throws OptimizationException {
    LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] {
        2, 2, 1
    }, 0);
    Collection < LinearConstraint > constraints = new ArrayList < LinearConstraint > ();
    constraints.add(new LinearConstraint(new double[] {
        1, 1, 0
    }, Relationship.GEQ, 1));
    constraints.add(new LinearConstraint(new double[] {
        1, 0, 1
    }, Relationship.GEQ, 1));
    constraints.add(new LinearConstraint(new double[] {
        0, 1, 0
    }, Relationship.GEQ, 1));
    SimplexSolver solver = new SimplexSolver();
    RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MINIMIZE, true);
    assertEquals(3.0, solution.getValue(), .0000001);
    
}

---
--------------------
Run: Math_74
@@@
Split test: org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest::polynomial
file: /root/workbench/exportInfo/d4j_buggy/Math_74/src/test/java//org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java
Begin: Pos(135, 5)
End: Pos(154, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_74/src/test/java//org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java
Name: polynomial
Childs: [StatementAssertion<Begin: Pos(145, 13), End: Pos(146, 78)>,
StatementAssertion<Begin: Pos(148, 17), End: Pos(148, 57)>,
StatementAssertion<Begin: Pos(150, 17), End: Pos(150, 56)>,
]
---
@Test public void polynomial_catena_0()throws DerivativeException, IntegratorException {
    TestProblem6 pb = new TestProblem6();
    double range = Math.abs(pb.getFinalTime() - pb.getInitialTime());
    for(int nSteps = 1;
    nSteps < 7;
     ++ nSteps) {
        AdamsMoultonIntegrator integ = new AdamsMoultonIntegrator(nSteps, 1.0e-6 * range, 0.1 * range, 1.0e-9, 1.0e-9);
        TestProblemHandler handler = new TestProblemHandler(pb, integ);
        integ.addStepHandler(handler);
        integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(), pb.getFinalTime(), new double[pb.getDimension()]);
        if(nSteps < 4) {
            
        }
        else {
            
        }
    }
}

---
---
@Test public void polynomial_catena_1()throws DerivativeException, IntegratorException {
    TestProblem6 pb = new TestProblem6();
    double range = Math.abs(pb.getFinalTime() - pb.getInitialTime());
    for(int nSteps = 1;
    nSteps < 7;
     ++ nSteps) {
        AdamsMoultonIntegrator integ = new AdamsMoultonIntegrator(nSteps, 1.0e-6 * range, 0.1 * range, 1.0e-9, 1.0e-9);
        TestProblemHandler handler = new TestProblemHandler(pb, integ);
        integ.addStepHandler(handler);
        if(nSteps < 4) {
            assertTrue(integ.getEvaluations() > 140);
            
        }
        else {
            
        }
    }
}

---
---
@Test public void polynomial_catena_2()throws DerivativeException, IntegratorException {
    TestProblem6 pb = new TestProblem6();
    double range = Math.abs(pb.getFinalTime() - pb.getInitialTime());
    for(int nSteps = 1;
    nSteps < 7;
     ++ nSteps) {
        AdamsMoultonIntegrator integ = new AdamsMoultonIntegrator(nSteps, 1.0e-6 * range, 0.1 * range, 1.0e-9, 1.0e-9);
        TestProblemHandler handler = new TestProblemHandler(pb, integ);
        integ.addStepHandler(handler);
        if(nSteps < 4) {
            
        }
        else {
            assertTrue(integ.getEvaluations() < 90);
            
        }
    }
}

---
--------------------
Run: Math_90
@@@
Split test: org.apache.commons.math.stat.FrequencyTest::testAddNonComparable
file: /root/workbench/exportInfo/d4j_buggy/Math_90/src/test//org/apache/commons/math/stat/FrequencyTest.java
Begin: Pos(193, 12)
End: Pos(206, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_90/src/test//org/apache/commons/math/stat/FrequencyTest.java
Name: testAddNonComparable
Childs: [StatementAssertion<Begin: Pos(196, 13), End: Pos(196, 48)>,
StatementAssertion<Begin: Pos(203, 13), End: Pos(203, 48)>,
]
---
public void testAddNonComparable_catena_0() {
    try {
        f.addValue(new Object());
        fail("Expected ClassCastException");
        
    }
    catch(ClassCastException expected) {
        
    }
    f.clear();
    f.addValue(1);
    try {
        f.addValue(new Object());
        
    }
    catch(ClassCastException expected) {
        
    }
}

---
---
public void testAddNonComparable_catena_1() {
    try {
        f.addValue(new Object());
        
    }
    catch(ClassCastException expected) {
        
    }
    f.clear();
    f.addValue(1);
    try {
        f.addValue(new Object());
        fail("Expected ClassCastException");
        
    }
    catch(ClassCastException expected) {
        
    }
}

---
--------------------
Run: Math_106
@@@
Split test: org.apache.commons.math.fraction.FractionFormatTest::testParseProperInvalidMinus
file: /root/workbench/exportInfo/d4j_buggy/Math_106/src/test//org/apache/commons/math/fraction/FractionFormatTest.java
Begin: Pos(232, 12)
End: Pos(247, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_106/src/test//org/apache/commons/math/fraction/FractionFormatTest.java
Name: testParseProperInvalidMinus
Childs: [StatementAssertion<Begin: Pos(236, 13), End: Pos(236, 56)>,
StatementAssertion<Begin: Pos(243, 13), End: Pos(243, 56)>,
]
---
public void testParseProperInvalidMinus_catena_0() {
    String source = "2 -2 / 3";
    try {
        Fraction c = properFormat.parse(source);
        fail("invalid minus in improper fraction.");
        
    }
    catch(ParseException ex) {
        
    }
    source = "2 2 / -3";
    try {
        Fraction c = properFormat.parse(source);
        
    }
    catch(ParseException ex) {
        
    }
}

---
---
public void testParseProperInvalidMinus_catena_1() {
    String source = "2 -2 / 3";
    try {
        Fraction c = properFormat.parse(source);
        
    }
    catch(ParseException ex) {
        
    }
    source = "2 2 / -3";
    try {
        Fraction c = properFormat.parse(source);
        fail("invalid minus in improper fraction.");
        
    }
    catch(ParseException ex) {
        
    }
}

---
--------------------
Run: Math_1
@@@
Split test: org.apache.commons.math3.fraction.BigFractionTest::testDigitLimitConstructor
file: /root/workbench/exportInfo/d4j_buggy/Math_1/src/test/java//org/apache/commons/math3/fraction/BigFractionTest.java
Begin: Pos(147, 5)
End: Pos(160, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_1/src/test/java//org/apache/commons/math3/fraction/BigFractionTest.java
Name: testDigitLimitConstructor
Childs: [StatementAssertion<Begin: Pos(149, 9), End: Pos(149, 54)>,
StatementAssertion<Begin: Pos(150, 9), End: Pos(150, 55)>,
StatementAssertion<Begin: Pos(151, 9), End: Pos(151, 56)>,
StatementAssertion<Begin: Pos(153, 9), End: Pos(153, 57)>,
StatementAssertion<Begin: Pos(154, 9), End: Pos(154, 59)>,
StatementAssertion<Begin: Pos(155, 9), End: Pos(155, 63)>,
StatementAssertion<Begin: Pos(156, 9), End: Pos(156, 65)>,
StatementAssertion<Begin: Pos(159, 9), End: Pos(159, 64)>,
]
---
@Test public void testDigitLimitConstructor_catena_0()throws ConvergenceException {
    assertFraction(2, 5, new BigFraction(0.4, 9));
    
}

---
---
@Test public void testDigitLimitConstructor_catena_1()throws ConvergenceException {
    assertFraction(2, 5, new BigFraction(0.4, 99));
    
}

---
---
@Test public void testDigitLimitConstructor_catena_2()throws ConvergenceException {
    assertFraction(2, 5, new BigFraction(0.4, 999));
    
}

---
---
@Test public void testDigitLimitConstructor_catena_3()throws ConvergenceException {
    assertFraction(3, 5, new BigFraction(0.6152, 9));
    
}

---
---
@Test public void testDigitLimitConstructor_catena_4()throws ConvergenceException {
    assertFraction(8, 13, new BigFraction(0.6152, 99));
    
}

---
---
@Test public void testDigitLimitConstructor_catena_5()throws ConvergenceException {
    assertFraction(510, 829, new BigFraction(0.6152, 999));
    
}

---
---
@Test public void testDigitLimitConstructor_catena_6()throws ConvergenceException {
    assertFraction(769, 1250, new BigFraction(0.6152, 9999));
    
}

---
---
@Test public void testDigitLimitConstructor_catena_7()throws ConvergenceException {
    assertFraction(1, 2, new BigFraction(0.5000000001, 10));
    
}

---
@@@
Split test: org.apache.commons.math3.fraction.FractionTest::testDigitLimitConstructor
file: /root/workbench/exportInfo/d4j_buggy/Math_1/src/test/java//org/apache/commons/math3/fraction/FractionTest.java
Begin: Pos(122, 5)
End: Pos(135, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_1/src/test/java//org/apache/commons/math3/fraction/FractionTest.java
Name: testDigitLimitConstructor
Childs: [StatementAssertion<Begin: Pos(124, 9), End: Pos(124, 53)>,
StatementAssertion<Begin: Pos(125, 9), End: Pos(125, 53)>,
StatementAssertion<Begin: Pos(126, 9), End: Pos(126, 53)>,
StatementAssertion<Begin: Pos(128, 9), End: Pos(128, 62)>,
StatementAssertion<Begin: Pos(129, 9), End: Pos(129, 62)>,
StatementAssertion<Begin: Pos(130, 9), End: Pos(130, 62)>,
StatementAssertion<Begin: Pos(131, 9), End: Pos(131, 62)>,
StatementAssertion<Begin: Pos(134, 9), End: Pos(134, 61)>,
]
---
@Test public void testDigitLimitConstructor_catena_0()throws ConvergenceException {
    assertFraction(2, 5, new Fraction(0.4, 9));
    
}

---
---
@Test public void testDigitLimitConstructor_catena_1()throws ConvergenceException {
    assertFraction(2, 5, new Fraction(0.4, 99));
    
}

---
---
@Test public void testDigitLimitConstructor_catena_2()throws ConvergenceException {
    assertFraction(2, 5, new Fraction(0.4, 999));
    
}

---
---
@Test public void testDigitLimitConstructor_catena_3()throws ConvergenceException {
    assertFraction(3, 5, new Fraction(0.6152, 9));
    
}

---
---
@Test public void testDigitLimitConstructor_catena_4()throws ConvergenceException {
    assertFraction(8, 13, new Fraction(0.6152, 99));
    
}

---
---
@Test public void testDigitLimitConstructor_catena_5()throws ConvergenceException {
    assertFraction(510, 829, new Fraction(0.6152, 999));
    
}

---
---
@Test public void testDigitLimitConstructor_catena_6()throws ConvergenceException {
    assertFraction(769, 1250, new Fraction(0.6152, 9999));
    
}

---
---
@Test public void testDigitLimitConstructor_catena_7()throws ConvergenceException {
    assertFraction(1, 2, new Fraction(0.5000000001, 10));
    
}

---
--------------------
Run: Math_22
@@@
Split test: org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive
file: /root/workbench/exportInfo/d4j_buggy/Math_22/src/test/java//org/apache/commons/math3/distribution/FDistributionTest.java
# Exception:
Traceback (most recent call last):
  File "run.py", line 39, in run
    fti, check = spliter.process_test_node_v2(path2file, test[1])
  File "/root/workbench/splitTests/spliter.py", line 259, in process_test_node_v2
    node = get_only_node(name, _globals)
  File "/root/workbench/splitTests/util.py", line 39, in get_only_node
    raise ParseError('Cannot find method <{}> in AST'.format(name))
util.ParseError: Cannot find method <testIsSupportLowerBoundInclusive> in AST

---
@@@
Split test: org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive
file: /root/workbench/exportInfo/d4j_buggy/Math_22/src/test/java//org/apache/commons/math3/distribution/UniformRealDistributionTest.java
# Exception:
Traceback (most recent call last):
  File "run.py", line 39, in run
    fti, check = spliter.process_test_node_v2(path2file, test[1])
  File "/root/workbench/splitTests/spliter.py", line 259, in process_test_node_v2
    node = get_only_node(name, _globals)
  File "/root/workbench/splitTests/util.py", line 39, in get_only_node
    raise ParseError('Cannot find method <{}> in AST'.format(name))
util.ParseError: Cannot find method <testIsSupportUpperBoundInclusive> in AST

---
--------------------
Run: Math_97
@@@
Split test: org.apache.commons.math.analysis.BrentSolverTest::testRootEndpoints
file: /root/workbench/exportInfo/d4j_buggy/Math_97/src/test//org/apache/commons/math/analysis/BrentSolverTest.java
Begin: Pos(271, 12)
End: Pos(281, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_97/src/test//org/apache/commons/math/analysis/BrentSolverTest.java
Name: testRootEndpoints
Childs: [StatementAssertion<Begin: Pos(277, 9), End: Pos(277, 68)>,
StatementAssertion<Begin: Pos(280, 9), End: Pos(280, 68)>,
]
---
public void testRootEndpoints_catena_0()throws Exception {
    UnivariateRealFunction f = new SinFunction();
    UnivariateRealSolver solver = new BrentSolver(f);
    double result = solver.solve(Math.PI, 4);
    assertEquals(result, Math.PI, solver.getAbsoluteAccuracy());
    result = solver.solve(3, Math.PI);
    
}

---
---
public void testRootEndpoints_catena_1()throws Exception {
    UnivariateRealFunction f = new SinFunction();
    UnivariateRealSolver solver = new BrentSolver(f);
    double result = solver.solve(Math.PI, 4);
    result = solver.solve(3, Math.PI);
    assertEquals(result, Math.PI, solver.getAbsoluteAccuracy());
    
}

---
--------------------
Run: Math_77
@@@
Split test: org.apache.commons.math.linear.ArrayRealVectorTest::testBasicFunctions
file: /root/workbench/exportInfo/d4j_buggy/Math_77/src/test/java//org/apache/commons/math/linear/ArrayRealVectorTest.java
Begin: Pos(1080, 12)
End: Pos(1232, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_77/src/test/java//org/apache/commons/math/linear/ArrayRealVectorTest.java
Name: testBasicFunctions
Childs: [StatementAssertion<Begin: Pos(1090, 9), End: Pos(1090, 75)>,
StatementAssertion<Begin: Pos(1094, 9), End: Pos(1094, 60)>,
StatementAssertion<Begin: Pos(1098, 9), End: Pos(1098, 61)>,
StatementAssertion<Begin: Pos(1103, 9), End: Pos(1103, 74)>,
StatementAssertion<Begin: Pos(1107, 9), End: Pos(1107, 76)>,
StatementAssertion<Begin: Pos(1111, 9), End: Pos(1111, 76)>,
StatementAssertion<Begin: Pos(1115, 9), End: Pos(1115, 62)>,
StatementAssertion<Begin: Pos(1118, 9), End: Pos(1118, 64)>,
StatementAssertion<Begin: Pos(1121, 9), End: Pos(1121, 64)>,
StatementAssertion<Begin: Pos(1125, 9), End: Pos(1125, 64)>,
StatementAssertion<Begin: Pos(1128, 9), End: Pos(1128, 66)>,
StatementAssertion<Begin: Pos(1131, 9), End: Pos(1131, 66)>,
StatementAssertion<Begin: Pos(1136, 9), End: Pos(1136, 78)>,
StatementAssertion<Begin: Pos(1141, 9), End: Pos(1141, 82)>,
StatementAssertion<Begin: Pos(1146, 9), End: Pos(1146, 88)>,
StatementAssertion<Begin: Pos(1150, 9), End: Pos(1150, 92)>,
StatementAssertion<Begin: Pos(1155, 9), End: Pos(1155, 94)>,
StatementAssertion<Begin: Pos(1159, 9), End: Pos(1159, 98)>,
StatementAssertion<Begin: Pos(1163, 9), End: Pos(1163, 98)>,
StatementAssertion<Begin: Pos(1168, 9), End: Pos(1168, 90)>,
StatementAssertion<Begin: Pos(1172, 9), End: Pos(1172, 94)>,
StatementAssertion<Begin: Pos(1176, 9), End: Pos(1176, 94)>,
StatementAssertion<Begin: Pos(1180, 9), End: Pos(1180, 46)>,
StatementAssertion<Begin: Pos(1184, 9), End: Pos(1184, 48)>,
StatementAssertion<Begin: Pos(1187, 9), End: Pos(1187, 70)>,
StatementAssertion<Begin: Pos(1190, 9), End: Pos(1190, 72)>,
StatementAssertion<Begin: Pos(1193, 9), End: Pos(1193, 72)>,
StatementAssertion<Begin: Pos(1197, 9), End: Pos(1197, 99)>,
StatementAssertion<Begin: Pos(1201, 13), End: Pos(1201, 50)>,
StatementAssertion<Begin: Pos(1205, 13), End: Pos(1205, 43)>,
StatementAssertion<Begin: Pos(1210, 9), End: Pos(1210, 96)>,
StatementAssertion<Begin: Pos(1213, 13), End: Pos(1213, 50)>,
StatementAssertion<Begin: Pos(1217, 13), End: Pos(1217, 43)>,
StatementAssertion<Begin: Pos(1222, 9), End: Pos(1222, 94)>,
StatementAssertion<Begin: Pos(1226, 9), End: Pos(1226, 98)>,
StatementAssertion<Begin: Pos(1230, 9), End: Pos(1230, 98)>,
]
---
public void testBasicFunctions_catena_0() {
    ArrayRealVector v1 = new ArrayRealVector(vec1);
    ArrayRealVector v2 = new ArrayRealVector(vec2);
    ArrayRealVector v5 = new ArrayRealVector(vec5);
    ArrayRealVector v_null = new ArrayRealVector(vec_null);
    RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);
    double d_getNorm = v5.getNorm();
    assertEquals("compare values  ", 8.4261497731763586307, d_getNorm);
    double d_getL1Norm = v5.getL1Norm();
    double d_getLInfNorm = v5.getLInfNorm();
    double dist = v1.getDistance(v2);
    double dist_2 = v1.getDistance(v2_t);
    double dist_3 = v1.getDistance((RealVector)v2);
    double d_getL1Distance = v1.getL1Distance(v2);
    double d_getL1Distance_2 = v1.getL1Distance(v2_t);
    double d_getL1Distance_3 = v1.getL1Distance((RealVector)v2);
    double d_getLInfDistance = v1.getLInfDistance(v2);
    double d_getLInfDistance_2 = v1.getLInfDistance(v2_t);
    double d_getLInfDistance_3 = v1.getLInfDistance((RealVector)v2);
    ArrayRealVector v_add = v1.add(v2);
    double[]result_add =  {
        5d, 7d, 9d
    };
    RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
    RealVector v_add_i = v1.add(vt2);
    double[]result_add_i =  {
        5d, 7d, 9d
    };
    ArrayRealVector v_subtract = v1.subtract(v2);
    double[]result_subtract =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_subtract_i = v1.subtract(vt2);
    double[]result_subtract_i =  {
         - 3d,  - 3d,  - 3d
    };
    ArrayRealVector v_ebeMultiply = v1.ebeMultiply(v2);
    double[]result_ebeMultiply =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
    double[]result_ebeMultiply_2 =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_3 = v1.ebeMultiply((RealVector)v2);
    double[]result_ebeMultiply_3 =  {
        4d, 10d, 18d
    };
    ArrayRealVector v_ebeDivide = v1.ebeDivide(v2);
    double[]result_ebeDivide =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_2 = v1.ebeDivide(v2_t);
    double[]result_ebeDivide_2 =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_3 = v1.ebeDivide((RealVector)v2);
    double[]result_ebeDivide_3 =  {
        0.25d, 0.4d, 0.5d
    };
    double dot = v1.dotProduct(v2);
    double dot_2 = v1.dotProduct(v2_t);
    RealMatrix m_outerProduct = v1.outerProduct(v2);
    RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
    RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector)v2);
    RealVector v_unitVector = v1.unitVector();
    RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
    try {
        v_null.unitVector();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();
    v_unitize.unitize();
    try {
        v_null.unitize();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    ArrayRealVector v_projection = v1.projection(v2);
    double[]result_projection =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_2 = v1.projection(v2_t);
    double[]result_projection_2 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_3 = v1.projection(v2.getData());
    double[]result_projection_3 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    
}

---
---
public void testBasicFunctions_catena_1() {
    ArrayRealVector v1 = new ArrayRealVector(vec1);
    ArrayRealVector v2 = new ArrayRealVector(vec2);
    ArrayRealVector v5 = new ArrayRealVector(vec5);
    ArrayRealVector v_null = new ArrayRealVector(vec_null);
    RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);
    double d_getNorm = v5.getNorm();
    double d_getL1Norm = v5.getL1Norm();
    assertEquals("compare values  ", 17.0, d_getL1Norm);
    double d_getLInfNorm = v5.getLInfNorm();
    double dist = v1.getDistance(v2);
    double dist_2 = v1.getDistance(v2_t);
    double dist_3 = v1.getDistance((RealVector)v2);
    double d_getL1Distance = v1.getL1Distance(v2);
    double d_getL1Distance_2 = v1.getL1Distance(v2_t);
    double d_getL1Distance_3 = v1.getL1Distance((RealVector)v2);
    double d_getLInfDistance = v1.getLInfDistance(v2);
    double d_getLInfDistance_2 = v1.getLInfDistance(v2_t);
    double d_getLInfDistance_3 = v1.getLInfDistance((RealVector)v2);
    ArrayRealVector v_add = v1.add(v2);
    double[]result_add =  {
        5d, 7d, 9d
    };
    RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
    RealVector v_add_i = v1.add(vt2);
    double[]result_add_i =  {
        5d, 7d, 9d
    };
    ArrayRealVector v_subtract = v1.subtract(v2);
    double[]result_subtract =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_subtract_i = v1.subtract(vt2);
    double[]result_subtract_i =  {
         - 3d,  - 3d,  - 3d
    };
    ArrayRealVector v_ebeMultiply = v1.ebeMultiply(v2);
    double[]result_ebeMultiply =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
    double[]result_ebeMultiply_2 =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_3 = v1.ebeMultiply((RealVector)v2);
    double[]result_ebeMultiply_3 =  {
        4d, 10d, 18d
    };
    ArrayRealVector v_ebeDivide = v1.ebeDivide(v2);
    double[]result_ebeDivide =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_2 = v1.ebeDivide(v2_t);
    double[]result_ebeDivide_2 =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_3 = v1.ebeDivide((RealVector)v2);
    double[]result_ebeDivide_3 =  {
        0.25d, 0.4d, 0.5d
    };
    double dot = v1.dotProduct(v2);
    double dot_2 = v1.dotProduct(v2_t);
    RealMatrix m_outerProduct = v1.outerProduct(v2);
    RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
    RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector)v2);
    RealVector v_unitVector = v1.unitVector();
    RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
    try {
        v_null.unitVector();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();
    v_unitize.unitize();
    try {
        v_null.unitize();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    ArrayRealVector v_projection = v1.projection(v2);
    double[]result_projection =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_2 = v1.projection(v2_t);
    double[]result_projection_2 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_3 = v1.projection(v2.getData());
    double[]result_projection_3 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    
}

---
---
public void testBasicFunctions_catena_2() {
    ArrayRealVector v1 = new ArrayRealVector(vec1);
    ArrayRealVector v2 = new ArrayRealVector(vec2);
    ArrayRealVector v5 = new ArrayRealVector(vec5);
    ArrayRealVector v_null = new ArrayRealVector(vec_null);
    RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);
    double d_getNorm = v5.getNorm();
    double d_getL1Norm = v5.getL1Norm();
    double d_getLInfNorm = v5.getLInfNorm();
    assertEquals("compare values  ", 6.0, d_getLInfNorm);
    double dist = v1.getDistance(v2);
    double dist_2 = v1.getDistance(v2_t);
    double dist_3 = v1.getDistance((RealVector)v2);
    double d_getL1Distance = v1.getL1Distance(v2);
    double d_getL1Distance_2 = v1.getL1Distance(v2_t);
    double d_getL1Distance_3 = v1.getL1Distance((RealVector)v2);
    double d_getLInfDistance = v1.getLInfDistance(v2);
    double d_getLInfDistance_2 = v1.getLInfDistance(v2_t);
    double d_getLInfDistance_3 = v1.getLInfDistance((RealVector)v2);
    ArrayRealVector v_add = v1.add(v2);
    double[]result_add =  {
        5d, 7d, 9d
    };
    RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
    RealVector v_add_i = v1.add(vt2);
    double[]result_add_i =  {
        5d, 7d, 9d
    };
    ArrayRealVector v_subtract = v1.subtract(v2);
    double[]result_subtract =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_subtract_i = v1.subtract(vt2);
    double[]result_subtract_i =  {
         - 3d,  - 3d,  - 3d
    };
    ArrayRealVector v_ebeMultiply = v1.ebeMultiply(v2);
    double[]result_ebeMultiply =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
    double[]result_ebeMultiply_2 =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_3 = v1.ebeMultiply((RealVector)v2);
    double[]result_ebeMultiply_3 =  {
        4d, 10d, 18d
    };
    ArrayRealVector v_ebeDivide = v1.ebeDivide(v2);
    double[]result_ebeDivide =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_2 = v1.ebeDivide(v2_t);
    double[]result_ebeDivide_2 =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_3 = v1.ebeDivide((RealVector)v2);
    double[]result_ebeDivide_3 =  {
        0.25d, 0.4d, 0.5d
    };
    double dot = v1.dotProduct(v2);
    double dot_2 = v1.dotProduct(v2_t);
    RealMatrix m_outerProduct = v1.outerProduct(v2);
    RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
    RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector)v2);
    RealVector v_unitVector = v1.unitVector();
    RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
    try {
        v_null.unitVector();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();
    v_unitize.unitize();
    try {
        v_null.unitize();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    ArrayRealVector v_projection = v1.projection(v2);
    double[]result_projection =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_2 = v1.projection(v2_t);
    double[]result_projection_2 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_3 = v1.projection(v2.getData());
    double[]result_projection_3 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    
}

---
---
public void testBasicFunctions_catena_3() {
    ArrayRealVector v1 = new ArrayRealVector(vec1);
    ArrayRealVector v2 = new ArrayRealVector(vec2);
    ArrayRealVector v5 = new ArrayRealVector(vec5);
    ArrayRealVector v_null = new ArrayRealVector(vec_null);
    RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);
    double d_getNorm = v5.getNorm();
    double d_getL1Norm = v5.getL1Norm();
    double d_getLInfNorm = v5.getLInfNorm();
    double dist = v1.getDistance(v2);
    assertEquals("compare values  ", v1.subtract(v2).getNorm(), dist);
    double dist_2 = v1.getDistance(v2_t);
    double dist_3 = v1.getDistance((RealVector)v2);
    double d_getL1Distance = v1.getL1Distance(v2);
    double d_getL1Distance_2 = v1.getL1Distance(v2_t);
    double d_getL1Distance_3 = v1.getL1Distance((RealVector)v2);
    double d_getLInfDistance = v1.getLInfDistance(v2);
    double d_getLInfDistance_2 = v1.getLInfDistance(v2_t);
    double d_getLInfDistance_3 = v1.getLInfDistance((RealVector)v2);
    ArrayRealVector v_add = v1.add(v2);
    double[]result_add =  {
        5d, 7d, 9d
    };
    RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
    RealVector v_add_i = v1.add(vt2);
    double[]result_add_i =  {
        5d, 7d, 9d
    };
    ArrayRealVector v_subtract = v1.subtract(v2);
    double[]result_subtract =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_subtract_i = v1.subtract(vt2);
    double[]result_subtract_i =  {
         - 3d,  - 3d,  - 3d
    };
    ArrayRealVector v_ebeMultiply = v1.ebeMultiply(v2);
    double[]result_ebeMultiply =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
    double[]result_ebeMultiply_2 =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_3 = v1.ebeMultiply((RealVector)v2);
    double[]result_ebeMultiply_3 =  {
        4d, 10d, 18d
    };
    ArrayRealVector v_ebeDivide = v1.ebeDivide(v2);
    double[]result_ebeDivide =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_2 = v1.ebeDivide(v2_t);
    double[]result_ebeDivide_2 =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_3 = v1.ebeDivide((RealVector)v2);
    double[]result_ebeDivide_3 =  {
        0.25d, 0.4d, 0.5d
    };
    double dot = v1.dotProduct(v2);
    double dot_2 = v1.dotProduct(v2_t);
    RealMatrix m_outerProduct = v1.outerProduct(v2);
    RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
    RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector)v2);
    RealVector v_unitVector = v1.unitVector();
    RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
    try {
        v_null.unitVector();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();
    v_unitize.unitize();
    try {
        v_null.unitize();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    ArrayRealVector v_projection = v1.projection(v2);
    double[]result_projection =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_2 = v1.projection(v2_t);
    double[]result_projection_2 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_3 = v1.projection(v2.getData());
    double[]result_projection_3 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    
}

---
---
public void testBasicFunctions_catena_4() {
    ArrayRealVector v1 = new ArrayRealVector(vec1);
    ArrayRealVector v2 = new ArrayRealVector(vec2);
    ArrayRealVector v5 = new ArrayRealVector(vec5);
    ArrayRealVector v_null = new ArrayRealVector(vec_null);
    RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);
    double d_getNorm = v5.getNorm();
    double d_getL1Norm = v5.getL1Norm();
    double d_getLInfNorm = v5.getLInfNorm();
    double dist = v1.getDistance(v2);
    double dist_2 = v1.getDistance(v2_t);
    assertEquals("compare values  ", v1.subtract(v2).getNorm(), dist_2);
    double dist_3 = v1.getDistance((RealVector)v2);
    double d_getL1Distance = v1.getL1Distance(v2);
    double d_getL1Distance_2 = v1.getL1Distance(v2_t);
    double d_getL1Distance_3 = v1.getL1Distance((RealVector)v2);
    double d_getLInfDistance = v1.getLInfDistance(v2);
    double d_getLInfDistance_2 = v1.getLInfDistance(v2_t);
    double d_getLInfDistance_3 = v1.getLInfDistance((RealVector)v2);
    ArrayRealVector v_add = v1.add(v2);
    double[]result_add =  {
        5d, 7d, 9d
    };
    RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
    RealVector v_add_i = v1.add(vt2);
    double[]result_add_i =  {
        5d, 7d, 9d
    };
    ArrayRealVector v_subtract = v1.subtract(v2);
    double[]result_subtract =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_subtract_i = v1.subtract(vt2);
    double[]result_subtract_i =  {
         - 3d,  - 3d,  - 3d
    };
    ArrayRealVector v_ebeMultiply = v1.ebeMultiply(v2);
    double[]result_ebeMultiply =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
    double[]result_ebeMultiply_2 =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_3 = v1.ebeMultiply((RealVector)v2);
    double[]result_ebeMultiply_3 =  {
        4d, 10d, 18d
    };
    ArrayRealVector v_ebeDivide = v1.ebeDivide(v2);
    double[]result_ebeDivide =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_2 = v1.ebeDivide(v2_t);
    double[]result_ebeDivide_2 =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_3 = v1.ebeDivide((RealVector)v2);
    double[]result_ebeDivide_3 =  {
        0.25d, 0.4d, 0.5d
    };
    double dot = v1.dotProduct(v2);
    double dot_2 = v1.dotProduct(v2_t);
    RealMatrix m_outerProduct = v1.outerProduct(v2);
    RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
    RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector)v2);
    RealVector v_unitVector = v1.unitVector();
    RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
    try {
        v_null.unitVector();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();
    v_unitize.unitize();
    try {
        v_null.unitize();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    ArrayRealVector v_projection = v1.projection(v2);
    double[]result_projection =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_2 = v1.projection(v2_t);
    double[]result_projection_2 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_3 = v1.projection(v2.getData());
    double[]result_projection_3 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    
}

---
---
public void testBasicFunctions_catena_5() {
    ArrayRealVector v1 = new ArrayRealVector(vec1);
    ArrayRealVector v2 = new ArrayRealVector(vec2);
    ArrayRealVector v5 = new ArrayRealVector(vec5);
    ArrayRealVector v_null = new ArrayRealVector(vec_null);
    RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);
    double d_getNorm = v5.getNorm();
    double d_getL1Norm = v5.getL1Norm();
    double d_getLInfNorm = v5.getLInfNorm();
    double dist = v1.getDistance(v2);
    double dist_2 = v1.getDistance(v2_t);
    double dist_3 = v1.getDistance((RealVector)v2);
    assertEquals("compare values  ", v1.subtract(v2).getNorm(), dist_3);
    double d_getL1Distance = v1.getL1Distance(v2);
    double d_getL1Distance_2 = v1.getL1Distance(v2_t);
    double d_getL1Distance_3 = v1.getL1Distance((RealVector)v2);
    double d_getLInfDistance = v1.getLInfDistance(v2);
    double d_getLInfDistance_2 = v1.getLInfDistance(v2_t);
    double d_getLInfDistance_3 = v1.getLInfDistance((RealVector)v2);
    ArrayRealVector v_add = v1.add(v2);
    double[]result_add =  {
        5d, 7d, 9d
    };
    RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
    RealVector v_add_i = v1.add(vt2);
    double[]result_add_i =  {
        5d, 7d, 9d
    };
    ArrayRealVector v_subtract = v1.subtract(v2);
    double[]result_subtract =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_subtract_i = v1.subtract(vt2);
    double[]result_subtract_i =  {
         - 3d,  - 3d,  - 3d
    };
    ArrayRealVector v_ebeMultiply = v1.ebeMultiply(v2);
    double[]result_ebeMultiply =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
    double[]result_ebeMultiply_2 =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_3 = v1.ebeMultiply((RealVector)v2);
    double[]result_ebeMultiply_3 =  {
        4d, 10d, 18d
    };
    ArrayRealVector v_ebeDivide = v1.ebeDivide(v2);
    double[]result_ebeDivide =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_2 = v1.ebeDivide(v2_t);
    double[]result_ebeDivide_2 =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_3 = v1.ebeDivide((RealVector)v2);
    double[]result_ebeDivide_3 =  {
        0.25d, 0.4d, 0.5d
    };
    double dot = v1.dotProduct(v2);
    double dot_2 = v1.dotProduct(v2_t);
    RealMatrix m_outerProduct = v1.outerProduct(v2);
    RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
    RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector)v2);
    RealVector v_unitVector = v1.unitVector();
    RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
    try {
        v_null.unitVector();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();
    v_unitize.unitize();
    try {
        v_null.unitize();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    ArrayRealVector v_projection = v1.projection(v2);
    double[]result_projection =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_2 = v1.projection(v2_t);
    double[]result_projection_2 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_3 = v1.projection(v2.getData());
    double[]result_projection_3 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    
}

---
---
public void testBasicFunctions_catena_6() {
    ArrayRealVector v1 = new ArrayRealVector(vec1);
    ArrayRealVector v2 = new ArrayRealVector(vec2);
    ArrayRealVector v5 = new ArrayRealVector(vec5);
    ArrayRealVector v_null = new ArrayRealVector(vec_null);
    RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);
    double d_getNorm = v5.getNorm();
    double d_getL1Norm = v5.getL1Norm();
    double d_getLInfNorm = v5.getLInfNorm();
    double dist = v1.getDistance(v2);
    double dist_2 = v1.getDistance(v2_t);
    double dist_3 = v1.getDistance((RealVector)v2);
    double d_getL1Distance = v1.getL1Distance(v2);
    assertEquals("compare values  ", 9d, d_getL1Distance);
    double d_getL1Distance_2 = v1.getL1Distance(v2_t);
    double d_getL1Distance_3 = v1.getL1Distance((RealVector)v2);
    double d_getLInfDistance = v1.getLInfDistance(v2);
    double d_getLInfDistance_2 = v1.getLInfDistance(v2_t);
    double d_getLInfDistance_3 = v1.getLInfDistance((RealVector)v2);
    ArrayRealVector v_add = v1.add(v2);
    double[]result_add =  {
        5d, 7d, 9d
    };
    RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
    RealVector v_add_i = v1.add(vt2);
    double[]result_add_i =  {
        5d, 7d, 9d
    };
    ArrayRealVector v_subtract = v1.subtract(v2);
    double[]result_subtract =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_subtract_i = v1.subtract(vt2);
    double[]result_subtract_i =  {
         - 3d,  - 3d,  - 3d
    };
    ArrayRealVector v_ebeMultiply = v1.ebeMultiply(v2);
    double[]result_ebeMultiply =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
    double[]result_ebeMultiply_2 =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_3 = v1.ebeMultiply((RealVector)v2);
    double[]result_ebeMultiply_3 =  {
        4d, 10d, 18d
    };
    ArrayRealVector v_ebeDivide = v1.ebeDivide(v2);
    double[]result_ebeDivide =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_2 = v1.ebeDivide(v2_t);
    double[]result_ebeDivide_2 =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_3 = v1.ebeDivide((RealVector)v2);
    double[]result_ebeDivide_3 =  {
        0.25d, 0.4d, 0.5d
    };
    double dot = v1.dotProduct(v2);
    double dot_2 = v1.dotProduct(v2_t);
    RealMatrix m_outerProduct = v1.outerProduct(v2);
    RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
    RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector)v2);
    RealVector v_unitVector = v1.unitVector();
    RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
    try {
        v_null.unitVector();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();
    v_unitize.unitize();
    try {
        v_null.unitize();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    ArrayRealVector v_projection = v1.projection(v2);
    double[]result_projection =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_2 = v1.projection(v2_t);
    double[]result_projection_2 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_3 = v1.projection(v2.getData());
    double[]result_projection_3 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    
}

---
---
public void testBasicFunctions_catena_7() {
    ArrayRealVector v1 = new ArrayRealVector(vec1);
    ArrayRealVector v2 = new ArrayRealVector(vec2);
    ArrayRealVector v5 = new ArrayRealVector(vec5);
    ArrayRealVector v_null = new ArrayRealVector(vec_null);
    RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);
    double d_getNorm = v5.getNorm();
    double d_getL1Norm = v5.getL1Norm();
    double d_getLInfNorm = v5.getLInfNorm();
    double dist = v1.getDistance(v2);
    double dist_2 = v1.getDistance(v2_t);
    double dist_3 = v1.getDistance((RealVector)v2);
    double d_getL1Distance = v1.getL1Distance(v2);
    double d_getL1Distance_2 = v1.getL1Distance(v2_t);
    assertEquals("compare values  ", 9d, d_getL1Distance_2);
    double d_getL1Distance_3 = v1.getL1Distance((RealVector)v2);
    double d_getLInfDistance = v1.getLInfDistance(v2);
    double d_getLInfDistance_2 = v1.getLInfDistance(v2_t);
    double d_getLInfDistance_3 = v1.getLInfDistance((RealVector)v2);
    ArrayRealVector v_add = v1.add(v2);
    double[]result_add =  {
        5d, 7d, 9d
    };
    RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
    RealVector v_add_i = v1.add(vt2);
    double[]result_add_i =  {
        5d, 7d, 9d
    };
    ArrayRealVector v_subtract = v1.subtract(v2);
    double[]result_subtract =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_subtract_i = v1.subtract(vt2);
    double[]result_subtract_i =  {
         - 3d,  - 3d,  - 3d
    };
    ArrayRealVector v_ebeMultiply = v1.ebeMultiply(v2);
    double[]result_ebeMultiply =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
    double[]result_ebeMultiply_2 =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_3 = v1.ebeMultiply((RealVector)v2);
    double[]result_ebeMultiply_3 =  {
        4d, 10d, 18d
    };
    ArrayRealVector v_ebeDivide = v1.ebeDivide(v2);
    double[]result_ebeDivide =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_2 = v1.ebeDivide(v2_t);
    double[]result_ebeDivide_2 =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_3 = v1.ebeDivide((RealVector)v2);
    double[]result_ebeDivide_3 =  {
        0.25d, 0.4d, 0.5d
    };
    double dot = v1.dotProduct(v2);
    double dot_2 = v1.dotProduct(v2_t);
    RealMatrix m_outerProduct = v1.outerProduct(v2);
    RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
    RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector)v2);
    RealVector v_unitVector = v1.unitVector();
    RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
    try {
        v_null.unitVector();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();
    v_unitize.unitize();
    try {
        v_null.unitize();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    ArrayRealVector v_projection = v1.projection(v2);
    double[]result_projection =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_2 = v1.projection(v2_t);
    double[]result_projection_2 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_3 = v1.projection(v2.getData());
    double[]result_projection_3 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    
}

---
---
public void testBasicFunctions_catena_8() {
    ArrayRealVector v1 = new ArrayRealVector(vec1);
    ArrayRealVector v2 = new ArrayRealVector(vec2);
    ArrayRealVector v5 = new ArrayRealVector(vec5);
    ArrayRealVector v_null = new ArrayRealVector(vec_null);
    RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);
    double d_getNorm = v5.getNorm();
    double d_getL1Norm = v5.getL1Norm();
    double d_getLInfNorm = v5.getLInfNorm();
    double dist = v1.getDistance(v2);
    double dist_2 = v1.getDistance(v2_t);
    double dist_3 = v1.getDistance((RealVector)v2);
    double d_getL1Distance = v1.getL1Distance(v2);
    double d_getL1Distance_2 = v1.getL1Distance(v2_t);
    double d_getL1Distance_3 = v1.getL1Distance((RealVector)v2);
    assertEquals("compare values  ", 9d, d_getL1Distance_3);
    double d_getLInfDistance = v1.getLInfDistance(v2);
    double d_getLInfDistance_2 = v1.getLInfDistance(v2_t);
    double d_getLInfDistance_3 = v1.getLInfDistance((RealVector)v2);
    ArrayRealVector v_add = v1.add(v2);
    double[]result_add =  {
        5d, 7d, 9d
    };
    RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
    RealVector v_add_i = v1.add(vt2);
    double[]result_add_i =  {
        5d, 7d, 9d
    };
    ArrayRealVector v_subtract = v1.subtract(v2);
    double[]result_subtract =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_subtract_i = v1.subtract(vt2);
    double[]result_subtract_i =  {
         - 3d,  - 3d,  - 3d
    };
    ArrayRealVector v_ebeMultiply = v1.ebeMultiply(v2);
    double[]result_ebeMultiply =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
    double[]result_ebeMultiply_2 =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_3 = v1.ebeMultiply((RealVector)v2);
    double[]result_ebeMultiply_3 =  {
        4d, 10d, 18d
    };
    ArrayRealVector v_ebeDivide = v1.ebeDivide(v2);
    double[]result_ebeDivide =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_2 = v1.ebeDivide(v2_t);
    double[]result_ebeDivide_2 =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_3 = v1.ebeDivide((RealVector)v2);
    double[]result_ebeDivide_3 =  {
        0.25d, 0.4d, 0.5d
    };
    double dot = v1.dotProduct(v2);
    double dot_2 = v1.dotProduct(v2_t);
    RealMatrix m_outerProduct = v1.outerProduct(v2);
    RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
    RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector)v2);
    RealVector v_unitVector = v1.unitVector();
    RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
    try {
        v_null.unitVector();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();
    v_unitize.unitize();
    try {
        v_null.unitize();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    ArrayRealVector v_projection = v1.projection(v2);
    double[]result_projection =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_2 = v1.projection(v2_t);
    double[]result_projection_2 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_3 = v1.projection(v2.getData());
    double[]result_projection_3 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    
}

---
---
public void testBasicFunctions_catena_9() {
    ArrayRealVector v1 = new ArrayRealVector(vec1);
    ArrayRealVector v2 = new ArrayRealVector(vec2);
    ArrayRealVector v5 = new ArrayRealVector(vec5);
    ArrayRealVector v_null = new ArrayRealVector(vec_null);
    RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);
    double d_getNorm = v5.getNorm();
    double d_getL1Norm = v5.getL1Norm();
    double d_getLInfNorm = v5.getLInfNorm();
    double dist = v1.getDistance(v2);
    double dist_2 = v1.getDistance(v2_t);
    double dist_3 = v1.getDistance((RealVector)v2);
    double d_getL1Distance = v1.getL1Distance(v2);
    double d_getL1Distance_2 = v1.getL1Distance(v2_t);
    double d_getL1Distance_3 = v1.getL1Distance((RealVector)v2);
    double d_getLInfDistance = v1.getLInfDistance(v2);
    assertEquals("compare values  ", 3d, d_getLInfDistance);
    double d_getLInfDistance_2 = v1.getLInfDistance(v2_t);
    double d_getLInfDistance_3 = v1.getLInfDistance((RealVector)v2);
    ArrayRealVector v_add = v1.add(v2);
    double[]result_add =  {
        5d, 7d, 9d
    };
    RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
    RealVector v_add_i = v1.add(vt2);
    double[]result_add_i =  {
        5d, 7d, 9d
    };
    ArrayRealVector v_subtract = v1.subtract(v2);
    double[]result_subtract =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_subtract_i = v1.subtract(vt2);
    double[]result_subtract_i =  {
         - 3d,  - 3d,  - 3d
    };
    ArrayRealVector v_ebeMultiply = v1.ebeMultiply(v2);
    double[]result_ebeMultiply =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
    double[]result_ebeMultiply_2 =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_3 = v1.ebeMultiply((RealVector)v2);
    double[]result_ebeMultiply_3 =  {
        4d, 10d, 18d
    };
    ArrayRealVector v_ebeDivide = v1.ebeDivide(v2);
    double[]result_ebeDivide =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_2 = v1.ebeDivide(v2_t);
    double[]result_ebeDivide_2 =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_3 = v1.ebeDivide((RealVector)v2);
    double[]result_ebeDivide_3 =  {
        0.25d, 0.4d, 0.5d
    };
    double dot = v1.dotProduct(v2);
    double dot_2 = v1.dotProduct(v2_t);
    RealMatrix m_outerProduct = v1.outerProduct(v2);
    RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
    RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector)v2);
    RealVector v_unitVector = v1.unitVector();
    RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
    try {
        v_null.unitVector();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();
    v_unitize.unitize();
    try {
        v_null.unitize();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    ArrayRealVector v_projection = v1.projection(v2);
    double[]result_projection =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_2 = v1.projection(v2_t);
    double[]result_projection_2 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_3 = v1.projection(v2.getData());
    double[]result_projection_3 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    
}

---
---
public void testBasicFunctions_catena_10() {
    ArrayRealVector v1 = new ArrayRealVector(vec1);
    ArrayRealVector v2 = new ArrayRealVector(vec2);
    ArrayRealVector v5 = new ArrayRealVector(vec5);
    ArrayRealVector v_null = new ArrayRealVector(vec_null);
    RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);
    double d_getNorm = v5.getNorm();
    double d_getL1Norm = v5.getL1Norm();
    double d_getLInfNorm = v5.getLInfNorm();
    double dist = v1.getDistance(v2);
    double dist_2 = v1.getDistance(v2_t);
    double dist_3 = v1.getDistance((RealVector)v2);
    double d_getL1Distance = v1.getL1Distance(v2);
    double d_getL1Distance_2 = v1.getL1Distance(v2_t);
    double d_getL1Distance_3 = v1.getL1Distance((RealVector)v2);
    double d_getLInfDistance = v1.getLInfDistance(v2);
    double d_getLInfDistance_2 = v1.getLInfDistance(v2_t);
    assertEquals("compare values  ", 3d, d_getLInfDistance_2);
    double d_getLInfDistance_3 = v1.getLInfDistance((RealVector)v2);
    ArrayRealVector v_add = v1.add(v2);
    double[]result_add =  {
        5d, 7d, 9d
    };
    RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
    RealVector v_add_i = v1.add(vt2);
    double[]result_add_i =  {
        5d, 7d, 9d
    };
    ArrayRealVector v_subtract = v1.subtract(v2);
    double[]result_subtract =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_subtract_i = v1.subtract(vt2);
    double[]result_subtract_i =  {
         - 3d,  - 3d,  - 3d
    };
    ArrayRealVector v_ebeMultiply = v1.ebeMultiply(v2);
    double[]result_ebeMultiply =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
    double[]result_ebeMultiply_2 =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_3 = v1.ebeMultiply((RealVector)v2);
    double[]result_ebeMultiply_3 =  {
        4d, 10d, 18d
    };
    ArrayRealVector v_ebeDivide = v1.ebeDivide(v2);
    double[]result_ebeDivide =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_2 = v1.ebeDivide(v2_t);
    double[]result_ebeDivide_2 =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_3 = v1.ebeDivide((RealVector)v2);
    double[]result_ebeDivide_3 =  {
        0.25d, 0.4d, 0.5d
    };
    double dot = v1.dotProduct(v2);
    double dot_2 = v1.dotProduct(v2_t);
    RealMatrix m_outerProduct = v1.outerProduct(v2);
    RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
    RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector)v2);
    RealVector v_unitVector = v1.unitVector();
    RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
    try {
        v_null.unitVector();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();
    v_unitize.unitize();
    try {
        v_null.unitize();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    ArrayRealVector v_projection = v1.projection(v2);
    double[]result_projection =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_2 = v1.projection(v2_t);
    double[]result_projection_2 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_3 = v1.projection(v2.getData());
    double[]result_projection_3 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    
}

---
---
public void testBasicFunctions_catena_11() {
    ArrayRealVector v1 = new ArrayRealVector(vec1);
    ArrayRealVector v2 = new ArrayRealVector(vec2);
    ArrayRealVector v5 = new ArrayRealVector(vec5);
    ArrayRealVector v_null = new ArrayRealVector(vec_null);
    RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);
    double d_getNorm = v5.getNorm();
    double d_getL1Norm = v5.getL1Norm();
    double d_getLInfNorm = v5.getLInfNorm();
    double dist = v1.getDistance(v2);
    double dist_2 = v1.getDistance(v2_t);
    double dist_3 = v1.getDistance((RealVector)v2);
    double d_getL1Distance = v1.getL1Distance(v2);
    double d_getL1Distance_2 = v1.getL1Distance(v2_t);
    double d_getL1Distance_3 = v1.getL1Distance((RealVector)v2);
    double d_getLInfDistance = v1.getLInfDistance(v2);
    double d_getLInfDistance_2 = v1.getLInfDistance(v2_t);
    double d_getLInfDistance_3 = v1.getLInfDistance((RealVector)v2);
    assertEquals("compare values  ", 3d, d_getLInfDistance_3);
    ArrayRealVector v_add = v1.add(v2);
    double[]result_add =  {
        5d, 7d, 9d
    };
    RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
    RealVector v_add_i = v1.add(vt2);
    double[]result_add_i =  {
        5d, 7d, 9d
    };
    ArrayRealVector v_subtract = v1.subtract(v2);
    double[]result_subtract =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_subtract_i = v1.subtract(vt2);
    double[]result_subtract_i =  {
         - 3d,  - 3d,  - 3d
    };
    ArrayRealVector v_ebeMultiply = v1.ebeMultiply(v2);
    double[]result_ebeMultiply =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
    double[]result_ebeMultiply_2 =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_3 = v1.ebeMultiply((RealVector)v2);
    double[]result_ebeMultiply_3 =  {
        4d, 10d, 18d
    };
    ArrayRealVector v_ebeDivide = v1.ebeDivide(v2);
    double[]result_ebeDivide =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_2 = v1.ebeDivide(v2_t);
    double[]result_ebeDivide_2 =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_3 = v1.ebeDivide((RealVector)v2);
    double[]result_ebeDivide_3 =  {
        0.25d, 0.4d, 0.5d
    };
    double dot = v1.dotProduct(v2);
    double dot_2 = v1.dotProduct(v2_t);
    RealMatrix m_outerProduct = v1.outerProduct(v2);
    RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
    RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector)v2);
    RealVector v_unitVector = v1.unitVector();
    RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
    try {
        v_null.unitVector();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();
    v_unitize.unitize();
    try {
        v_null.unitize();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    ArrayRealVector v_projection = v1.projection(v2);
    double[]result_projection =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_2 = v1.projection(v2_t);
    double[]result_projection_2 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_3 = v1.projection(v2.getData());
    double[]result_projection_3 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    
}

---
---
public void testBasicFunctions_catena_12() {
    ArrayRealVector v1 = new ArrayRealVector(vec1);
    ArrayRealVector v2 = new ArrayRealVector(vec2);
    ArrayRealVector v5 = new ArrayRealVector(vec5);
    ArrayRealVector v_null = new ArrayRealVector(vec_null);
    RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);
    double d_getNorm = v5.getNorm();
    double d_getL1Norm = v5.getL1Norm();
    double d_getLInfNorm = v5.getLInfNorm();
    double dist = v1.getDistance(v2);
    double dist_2 = v1.getDistance(v2_t);
    double dist_3 = v1.getDistance((RealVector)v2);
    double d_getL1Distance = v1.getL1Distance(v2);
    double d_getL1Distance_2 = v1.getL1Distance(v2_t);
    double d_getL1Distance_3 = v1.getL1Distance((RealVector)v2);
    double d_getLInfDistance = v1.getLInfDistance(v2);
    double d_getLInfDistance_2 = v1.getLInfDistance(v2_t);
    double d_getLInfDistance_3 = v1.getLInfDistance((RealVector)v2);
    ArrayRealVector v_add = v1.add(v2);
    double[]result_add =  {
        5d, 7d, 9d
    };
    assertClose("compare vect", v_add.getData(), result_add, normTolerance);
    RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
    RealVector v_add_i = v1.add(vt2);
    double[]result_add_i =  {
        5d, 7d, 9d
    };
    ArrayRealVector v_subtract = v1.subtract(v2);
    double[]result_subtract =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_subtract_i = v1.subtract(vt2);
    double[]result_subtract_i =  {
         - 3d,  - 3d,  - 3d
    };
    ArrayRealVector v_ebeMultiply = v1.ebeMultiply(v2);
    double[]result_ebeMultiply =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
    double[]result_ebeMultiply_2 =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_3 = v1.ebeMultiply((RealVector)v2);
    double[]result_ebeMultiply_3 =  {
        4d, 10d, 18d
    };
    ArrayRealVector v_ebeDivide = v1.ebeDivide(v2);
    double[]result_ebeDivide =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_2 = v1.ebeDivide(v2_t);
    double[]result_ebeDivide_2 =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_3 = v1.ebeDivide((RealVector)v2);
    double[]result_ebeDivide_3 =  {
        0.25d, 0.4d, 0.5d
    };
    double dot = v1.dotProduct(v2);
    double dot_2 = v1.dotProduct(v2_t);
    RealMatrix m_outerProduct = v1.outerProduct(v2);
    RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
    RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector)v2);
    RealVector v_unitVector = v1.unitVector();
    RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
    try {
        v_null.unitVector();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();
    v_unitize.unitize();
    try {
        v_null.unitize();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    ArrayRealVector v_projection = v1.projection(v2);
    double[]result_projection =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_2 = v1.projection(v2_t);
    double[]result_projection_2 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_3 = v1.projection(v2.getData());
    double[]result_projection_3 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    
}

---
---
public void testBasicFunctions_catena_13() {
    ArrayRealVector v1 = new ArrayRealVector(vec1);
    ArrayRealVector v2 = new ArrayRealVector(vec2);
    ArrayRealVector v5 = new ArrayRealVector(vec5);
    ArrayRealVector v_null = new ArrayRealVector(vec_null);
    RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);
    double d_getNorm = v5.getNorm();
    double d_getL1Norm = v5.getL1Norm();
    double d_getLInfNorm = v5.getLInfNorm();
    double dist = v1.getDistance(v2);
    double dist_2 = v1.getDistance(v2_t);
    double dist_3 = v1.getDistance((RealVector)v2);
    double d_getL1Distance = v1.getL1Distance(v2);
    double d_getL1Distance_2 = v1.getL1Distance(v2_t);
    double d_getL1Distance_3 = v1.getL1Distance((RealVector)v2);
    double d_getLInfDistance = v1.getLInfDistance(v2);
    double d_getLInfDistance_2 = v1.getLInfDistance(v2_t);
    double d_getLInfDistance_3 = v1.getLInfDistance((RealVector)v2);
    ArrayRealVector v_add = v1.add(v2);
    double[]result_add =  {
        5d, 7d, 9d
    };
    RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
    RealVector v_add_i = v1.add(vt2);
    double[]result_add_i =  {
        5d, 7d, 9d
    };
    assertClose("compare vect", v_add_i.getData(), result_add_i, normTolerance);
    ArrayRealVector v_subtract = v1.subtract(v2);
    double[]result_subtract =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_subtract_i = v1.subtract(vt2);
    double[]result_subtract_i =  {
         - 3d,  - 3d,  - 3d
    };
    ArrayRealVector v_ebeMultiply = v1.ebeMultiply(v2);
    double[]result_ebeMultiply =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
    double[]result_ebeMultiply_2 =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_3 = v1.ebeMultiply((RealVector)v2);
    double[]result_ebeMultiply_3 =  {
        4d, 10d, 18d
    };
    ArrayRealVector v_ebeDivide = v1.ebeDivide(v2);
    double[]result_ebeDivide =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_2 = v1.ebeDivide(v2_t);
    double[]result_ebeDivide_2 =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_3 = v1.ebeDivide((RealVector)v2);
    double[]result_ebeDivide_3 =  {
        0.25d, 0.4d, 0.5d
    };
    double dot = v1.dotProduct(v2);
    double dot_2 = v1.dotProduct(v2_t);
    RealMatrix m_outerProduct = v1.outerProduct(v2);
    RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
    RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector)v2);
    RealVector v_unitVector = v1.unitVector();
    RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
    try {
        v_null.unitVector();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();
    v_unitize.unitize();
    try {
        v_null.unitize();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    ArrayRealVector v_projection = v1.projection(v2);
    double[]result_projection =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_2 = v1.projection(v2_t);
    double[]result_projection_2 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_3 = v1.projection(v2.getData());
    double[]result_projection_3 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    
}

---
---
public void testBasicFunctions_catena_14() {
    ArrayRealVector v1 = new ArrayRealVector(vec1);
    ArrayRealVector v2 = new ArrayRealVector(vec2);
    ArrayRealVector v5 = new ArrayRealVector(vec5);
    ArrayRealVector v_null = new ArrayRealVector(vec_null);
    RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);
    double d_getNorm = v5.getNorm();
    double d_getL1Norm = v5.getL1Norm();
    double d_getLInfNorm = v5.getLInfNorm();
    double dist = v1.getDistance(v2);
    double dist_2 = v1.getDistance(v2_t);
    double dist_3 = v1.getDistance((RealVector)v2);
    double d_getL1Distance = v1.getL1Distance(v2);
    double d_getL1Distance_2 = v1.getL1Distance(v2_t);
    double d_getL1Distance_3 = v1.getL1Distance((RealVector)v2);
    double d_getLInfDistance = v1.getLInfDistance(v2);
    double d_getLInfDistance_2 = v1.getLInfDistance(v2_t);
    double d_getLInfDistance_3 = v1.getLInfDistance((RealVector)v2);
    ArrayRealVector v_add = v1.add(v2);
    double[]result_add =  {
        5d, 7d, 9d
    };
    RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
    RealVector v_add_i = v1.add(vt2);
    double[]result_add_i =  {
        5d, 7d, 9d
    };
    ArrayRealVector v_subtract = v1.subtract(v2);
    double[]result_subtract =  {
         - 3d,  - 3d,  - 3d
    };
    assertClose("compare vect", v_subtract.getData(), result_subtract, normTolerance);
    RealVector v_subtract_i = v1.subtract(vt2);
    double[]result_subtract_i =  {
         - 3d,  - 3d,  - 3d
    };
    ArrayRealVector v_ebeMultiply = v1.ebeMultiply(v2);
    double[]result_ebeMultiply =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
    double[]result_ebeMultiply_2 =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_3 = v1.ebeMultiply((RealVector)v2);
    double[]result_ebeMultiply_3 =  {
        4d, 10d, 18d
    };
    ArrayRealVector v_ebeDivide = v1.ebeDivide(v2);
    double[]result_ebeDivide =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_2 = v1.ebeDivide(v2_t);
    double[]result_ebeDivide_2 =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_3 = v1.ebeDivide((RealVector)v2);
    double[]result_ebeDivide_3 =  {
        0.25d, 0.4d, 0.5d
    };
    double dot = v1.dotProduct(v2);
    double dot_2 = v1.dotProduct(v2_t);
    RealMatrix m_outerProduct = v1.outerProduct(v2);
    RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
    RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector)v2);
    RealVector v_unitVector = v1.unitVector();
    RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
    try {
        v_null.unitVector();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();
    v_unitize.unitize();
    try {
        v_null.unitize();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    ArrayRealVector v_projection = v1.projection(v2);
    double[]result_projection =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_2 = v1.projection(v2_t);
    double[]result_projection_2 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_3 = v1.projection(v2.getData());
    double[]result_projection_3 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    
}

---
---
public void testBasicFunctions_catena_15() {
    ArrayRealVector v1 = new ArrayRealVector(vec1);
    ArrayRealVector v2 = new ArrayRealVector(vec2);
    ArrayRealVector v5 = new ArrayRealVector(vec5);
    ArrayRealVector v_null = new ArrayRealVector(vec_null);
    RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);
    double d_getNorm = v5.getNorm();
    double d_getL1Norm = v5.getL1Norm();
    double d_getLInfNorm = v5.getLInfNorm();
    double dist = v1.getDistance(v2);
    double dist_2 = v1.getDistance(v2_t);
    double dist_3 = v1.getDistance((RealVector)v2);
    double d_getL1Distance = v1.getL1Distance(v2);
    double d_getL1Distance_2 = v1.getL1Distance(v2_t);
    double d_getL1Distance_3 = v1.getL1Distance((RealVector)v2);
    double d_getLInfDistance = v1.getLInfDistance(v2);
    double d_getLInfDistance_2 = v1.getLInfDistance(v2_t);
    double d_getLInfDistance_3 = v1.getLInfDistance((RealVector)v2);
    ArrayRealVector v_add = v1.add(v2);
    double[]result_add =  {
        5d, 7d, 9d
    };
    RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
    RealVector v_add_i = v1.add(vt2);
    double[]result_add_i =  {
        5d, 7d, 9d
    };
    ArrayRealVector v_subtract = v1.subtract(v2);
    double[]result_subtract =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_subtract_i = v1.subtract(vt2);
    double[]result_subtract_i =  {
         - 3d,  - 3d,  - 3d
    };
    assertClose("compare vect", v_subtract_i.getData(), result_subtract_i, normTolerance);
    ArrayRealVector v_ebeMultiply = v1.ebeMultiply(v2);
    double[]result_ebeMultiply =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
    double[]result_ebeMultiply_2 =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_3 = v1.ebeMultiply((RealVector)v2);
    double[]result_ebeMultiply_3 =  {
        4d, 10d, 18d
    };
    ArrayRealVector v_ebeDivide = v1.ebeDivide(v2);
    double[]result_ebeDivide =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_2 = v1.ebeDivide(v2_t);
    double[]result_ebeDivide_2 =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_3 = v1.ebeDivide((RealVector)v2);
    double[]result_ebeDivide_3 =  {
        0.25d, 0.4d, 0.5d
    };
    double dot = v1.dotProduct(v2);
    double dot_2 = v1.dotProduct(v2_t);
    RealMatrix m_outerProduct = v1.outerProduct(v2);
    RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
    RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector)v2);
    RealVector v_unitVector = v1.unitVector();
    RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
    try {
        v_null.unitVector();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();
    v_unitize.unitize();
    try {
        v_null.unitize();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    ArrayRealVector v_projection = v1.projection(v2);
    double[]result_projection =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_2 = v1.projection(v2_t);
    double[]result_projection_2 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_3 = v1.projection(v2.getData());
    double[]result_projection_3 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    
}

---
---
public void testBasicFunctions_catena_16() {
    ArrayRealVector v1 = new ArrayRealVector(vec1);
    ArrayRealVector v2 = new ArrayRealVector(vec2);
    ArrayRealVector v5 = new ArrayRealVector(vec5);
    ArrayRealVector v_null = new ArrayRealVector(vec_null);
    RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);
    double d_getNorm = v5.getNorm();
    double d_getL1Norm = v5.getL1Norm();
    double d_getLInfNorm = v5.getLInfNorm();
    double dist = v1.getDistance(v2);
    double dist_2 = v1.getDistance(v2_t);
    double dist_3 = v1.getDistance((RealVector)v2);
    double d_getL1Distance = v1.getL1Distance(v2);
    double d_getL1Distance_2 = v1.getL1Distance(v2_t);
    double d_getL1Distance_3 = v1.getL1Distance((RealVector)v2);
    double d_getLInfDistance = v1.getLInfDistance(v2);
    double d_getLInfDistance_2 = v1.getLInfDistance(v2_t);
    double d_getLInfDistance_3 = v1.getLInfDistance((RealVector)v2);
    ArrayRealVector v_add = v1.add(v2);
    double[]result_add =  {
        5d, 7d, 9d
    };
    RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
    RealVector v_add_i = v1.add(vt2);
    double[]result_add_i =  {
        5d, 7d, 9d
    };
    ArrayRealVector v_subtract = v1.subtract(v2);
    double[]result_subtract =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_subtract_i = v1.subtract(vt2);
    double[]result_subtract_i =  {
         - 3d,  - 3d,  - 3d
    };
    ArrayRealVector v_ebeMultiply = v1.ebeMultiply(v2);
    double[]result_ebeMultiply =  {
        4d, 10d, 18d
    };
    assertClose("compare vect", v_ebeMultiply.getData(), result_ebeMultiply, normTolerance);
    RealVector v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
    double[]result_ebeMultiply_2 =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_3 = v1.ebeMultiply((RealVector)v2);
    double[]result_ebeMultiply_3 =  {
        4d, 10d, 18d
    };
    ArrayRealVector v_ebeDivide = v1.ebeDivide(v2);
    double[]result_ebeDivide =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_2 = v1.ebeDivide(v2_t);
    double[]result_ebeDivide_2 =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_3 = v1.ebeDivide((RealVector)v2);
    double[]result_ebeDivide_3 =  {
        0.25d, 0.4d, 0.5d
    };
    double dot = v1.dotProduct(v2);
    double dot_2 = v1.dotProduct(v2_t);
    RealMatrix m_outerProduct = v1.outerProduct(v2);
    RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
    RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector)v2);
    RealVector v_unitVector = v1.unitVector();
    RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
    try {
        v_null.unitVector();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();
    v_unitize.unitize();
    try {
        v_null.unitize();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    ArrayRealVector v_projection = v1.projection(v2);
    double[]result_projection =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_2 = v1.projection(v2_t);
    double[]result_projection_2 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_3 = v1.projection(v2.getData());
    double[]result_projection_3 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    
}

---
---
public void testBasicFunctions_catena_17() {
    ArrayRealVector v1 = new ArrayRealVector(vec1);
    ArrayRealVector v2 = new ArrayRealVector(vec2);
    ArrayRealVector v5 = new ArrayRealVector(vec5);
    ArrayRealVector v_null = new ArrayRealVector(vec_null);
    RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);
    double d_getNorm = v5.getNorm();
    double d_getL1Norm = v5.getL1Norm();
    double d_getLInfNorm = v5.getLInfNorm();
    double dist = v1.getDistance(v2);
    double dist_2 = v1.getDistance(v2_t);
    double dist_3 = v1.getDistance((RealVector)v2);
    double d_getL1Distance = v1.getL1Distance(v2);
    double d_getL1Distance_2 = v1.getL1Distance(v2_t);
    double d_getL1Distance_3 = v1.getL1Distance((RealVector)v2);
    double d_getLInfDistance = v1.getLInfDistance(v2);
    double d_getLInfDistance_2 = v1.getLInfDistance(v2_t);
    double d_getLInfDistance_3 = v1.getLInfDistance((RealVector)v2);
    ArrayRealVector v_add = v1.add(v2);
    double[]result_add =  {
        5d, 7d, 9d
    };
    RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
    RealVector v_add_i = v1.add(vt2);
    double[]result_add_i =  {
        5d, 7d, 9d
    };
    ArrayRealVector v_subtract = v1.subtract(v2);
    double[]result_subtract =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_subtract_i = v1.subtract(vt2);
    double[]result_subtract_i =  {
         - 3d,  - 3d,  - 3d
    };
    ArrayRealVector v_ebeMultiply = v1.ebeMultiply(v2);
    double[]result_ebeMultiply =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
    double[]result_ebeMultiply_2 =  {
        4d, 10d, 18d
    };
    assertClose("compare vect", v_ebeMultiply_2.getData(), result_ebeMultiply_2, normTolerance);
    RealVector v_ebeMultiply_3 = v1.ebeMultiply((RealVector)v2);
    double[]result_ebeMultiply_3 =  {
        4d, 10d, 18d
    };
    ArrayRealVector v_ebeDivide = v1.ebeDivide(v2);
    double[]result_ebeDivide =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_2 = v1.ebeDivide(v2_t);
    double[]result_ebeDivide_2 =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_3 = v1.ebeDivide((RealVector)v2);
    double[]result_ebeDivide_3 =  {
        0.25d, 0.4d, 0.5d
    };
    double dot = v1.dotProduct(v2);
    double dot_2 = v1.dotProduct(v2_t);
    RealMatrix m_outerProduct = v1.outerProduct(v2);
    RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
    RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector)v2);
    RealVector v_unitVector = v1.unitVector();
    RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
    try {
        v_null.unitVector();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();
    v_unitize.unitize();
    try {
        v_null.unitize();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    ArrayRealVector v_projection = v1.projection(v2);
    double[]result_projection =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_2 = v1.projection(v2_t);
    double[]result_projection_2 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_3 = v1.projection(v2.getData());
    double[]result_projection_3 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    
}

---
---
public void testBasicFunctions_catena_18() {
    ArrayRealVector v1 = new ArrayRealVector(vec1);
    ArrayRealVector v2 = new ArrayRealVector(vec2);
    ArrayRealVector v5 = new ArrayRealVector(vec5);
    ArrayRealVector v_null = new ArrayRealVector(vec_null);
    RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);
    double d_getNorm = v5.getNorm();
    double d_getL1Norm = v5.getL1Norm();
    double d_getLInfNorm = v5.getLInfNorm();
    double dist = v1.getDistance(v2);
    double dist_2 = v1.getDistance(v2_t);
    double dist_3 = v1.getDistance((RealVector)v2);
    double d_getL1Distance = v1.getL1Distance(v2);
    double d_getL1Distance_2 = v1.getL1Distance(v2_t);
    double d_getL1Distance_3 = v1.getL1Distance((RealVector)v2);
    double d_getLInfDistance = v1.getLInfDistance(v2);
    double d_getLInfDistance_2 = v1.getLInfDistance(v2_t);
    double d_getLInfDistance_3 = v1.getLInfDistance((RealVector)v2);
    ArrayRealVector v_add = v1.add(v2);
    double[]result_add =  {
        5d, 7d, 9d
    };
    RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
    RealVector v_add_i = v1.add(vt2);
    double[]result_add_i =  {
        5d, 7d, 9d
    };
    ArrayRealVector v_subtract = v1.subtract(v2);
    double[]result_subtract =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_subtract_i = v1.subtract(vt2);
    double[]result_subtract_i =  {
         - 3d,  - 3d,  - 3d
    };
    ArrayRealVector v_ebeMultiply = v1.ebeMultiply(v2);
    double[]result_ebeMultiply =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
    double[]result_ebeMultiply_2 =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_3 = v1.ebeMultiply((RealVector)v2);
    double[]result_ebeMultiply_3 =  {
        4d, 10d, 18d
    };
    assertClose("compare vect", v_ebeMultiply_3.getData(), result_ebeMultiply_3, normTolerance);
    ArrayRealVector v_ebeDivide = v1.ebeDivide(v2);
    double[]result_ebeDivide =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_2 = v1.ebeDivide(v2_t);
    double[]result_ebeDivide_2 =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_3 = v1.ebeDivide((RealVector)v2);
    double[]result_ebeDivide_3 =  {
        0.25d, 0.4d, 0.5d
    };
    double dot = v1.dotProduct(v2);
    double dot_2 = v1.dotProduct(v2_t);
    RealMatrix m_outerProduct = v1.outerProduct(v2);
    RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
    RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector)v2);
    RealVector v_unitVector = v1.unitVector();
    RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
    try {
        v_null.unitVector();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();
    v_unitize.unitize();
    try {
        v_null.unitize();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    ArrayRealVector v_projection = v1.projection(v2);
    double[]result_projection =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_2 = v1.projection(v2_t);
    double[]result_projection_2 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_3 = v1.projection(v2.getData());
    double[]result_projection_3 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    
}

---
---
public void testBasicFunctions_catena_19() {
    ArrayRealVector v1 = new ArrayRealVector(vec1);
    ArrayRealVector v2 = new ArrayRealVector(vec2);
    ArrayRealVector v5 = new ArrayRealVector(vec5);
    ArrayRealVector v_null = new ArrayRealVector(vec_null);
    RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);
    double d_getNorm = v5.getNorm();
    double d_getL1Norm = v5.getL1Norm();
    double d_getLInfNorm = v5.getLInfNorm();
    double dist = v1.getDistance(v2);
    double dist_2 = v1.getDistance(v2_t);
    double dist_3 = v1.getDistance((RealVector)v2);
    double d_getL1Distance = v1.getL1Distance(v2);
    double d_getL1Distance_2 = v1.getL1Distance(v2_t);
    double d_getL1Distance_3 = v1.getL1Distance((RealVector)v2);
    double d_getLInfDistance = v1.getLInfDistance(v2);
    double d_getLInfDistance_2 = v1.getLInfDistance(v2_t);
    double d_getLInfDistance_3 = v1.getLInfDistance((RealVector)v2);
    ArrayRealVector v_add = v1.add(v2);
    double[]result_add =  {
        5d, 7d, 9d
    };
    RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
    RealVector v_add_i = v1.add(vt2);
    double[]result_add_i =  {
        5d, 7d, 9d
    };
    ArrayRealVector v_subtract = v1.subtract(v2);
    double[]result_subtract =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_subtract_i = v1.subtract(vt2);
    double[]result_subtract_i =  {
         - 3d,  - 3d,  - 3d
    };
    ArrayRealVector v_ebeMultiply = v1.ebeMultiply(v2);
    double[]result_ebeMultiply =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
    double[]result_ebeMultiply_2 =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_3 = v1.ebeMultiply((RealVector)v2);
    double[]result_ebeMultiply_3 =  {
        4d, 10d, 18d
    };
    ArrayRealVector v_ebeDivide = v1.ebeDivide(v2);
    double[]result_ebeDivide =  {
        0.25d, 0.4d, 0.5d
    };
    assertClose("compare vect", v_ebeDivide.getData(), result_ebeDivide, normTolerance);
    RealVector v_ebeDivide_2 = v1.ebeDivide(v2_t);
    double[]result_ebeDivide_2 =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_3 = v1.ebeDivide((RealVector)v2);
    double[]result_ebeDivide_3 =  {
        0.25d, 0.4d, 0.5d
    };
    double dot = v1.dotProduct(v2);
    double dot_2 = v1.dotProduct(v2_t);
    RealMatrix m_outerProduct = v1.outerProduct(v2);
    RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
    RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector)v2);
    RealVector v_unitVector = v1.unitVector();
    RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
    try {
        v_null.unitVector();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();
    v_unitize.unitize();
    try {
        v_null.unitize();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    ArrayRealVector v_projection = v1.projection(v2);
    double[]result_projection =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_2 = v1.projection(v2_t);
    double[]result_projection_2 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_3 = v1.projection(v2.getData());
    double[]result_projection_3 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    
}

---
---
public void testBasicFunctions_catena_20() {
    ArrayRealVector v1 = new ArrayRealVector(vec1);
    ArrayRealVector v2 = new ArrayRealVector(vec2);
    ArrayRealVector v5 = new ArrayRealVector(vec5);
    ArrayRealVector v_null = new ArrayRealVector(vec_null);
    RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);
    double d_getNorm = v5.getNorm();
    double d_getL1Norm = v5.getL1Norm();
    double d_getLInfNorm = v5.getLInfNorm();
    double dist = v1.getDistance(v2);
    double dist_2 = v1.getDistance(v2_t);
    double dist_3 = v1.getDistance((RealVector)v2);
    double d_getL1Distance = v1.getL1Distance(v2);
    double d_getL1Distance_2 = v1.getL1Distance(v2_t);
    double d_getL1Distance_3 = v1.getL1Distance((RealVector)v2);
    double d_getLInfDistance = v1.getLInfDistance(v2);
    double d_getLInfDistance_2 = v1.getLInfDistance(v2_t);
    double d_getLInfDistance_3 = v1.getLInfDistance((RealVector)v2);
    ArrayRealVector v_add = v1.add(v2);
    double[]result_add =  {
        5d, 7d, 9d
    };
    RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
    RealVector v_add_i = v1.add(vt2);
    double[]result_add_i =  {
        5d, 7d, 9d
    };
    ArrayRealVector v_subtract = v1.subtract(v2);
    double[]result_subtract =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_subtract_i = v1.subtract(vt2);
    double[]result_subtract_i =  {
         - 3d,  - 3d,  - 3d
    };
    ArrayRealVector v_ebeMultiply = v1.ebeMultiply(v2);
    double[]result_ebeMultiply =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
    double[]result_ebeMultiply_2 =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_3 = v1.ebeMultiply((RealVector)v2);
    double[]result_ebeMultiply_3 =  {
        4d, 10d, 18d
    };
    ArrayRealVector v_ebeDivide = v1.ebeDivide(v2);
    double[]result_ebeDivide =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_2 = v1.ebeDivide(v2_t);
    double[]result_ebeDivide_2 =  {
        0.25d, 0.4d, 0.5d
    };
    assertClose("compare vect", v_ebeDivide_2.getData(), result_ebeDivide_2, normTolerance);
    RealVector v_ebeDivide_3 = v1.ebeDivide((RealVector)v2);
    double[]result_ebeDivide_3 =  {
        0.25d, 0.4d, 0.5d
    };
    double dot = v1.dotProduct(v2);
    double dot_2 = v1.dotProduct(v2_t);
    RealMatrix m_outerProduct = v1.outerProduct(v2);
    RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
    RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector)v2);
    RealVector v_unitVector = v1.unitVector();
    RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
    try {
        v_null.unitVector();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();
    v_unitize.unitize();
    try {
        v_null.unitize();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    ArrayRealVector v_projection = v1.projection(v2);
    double[]result_projection =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_2 = v1.projection(v2_t);
    double[]result_projection_2 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_3 = v1.projection(v2.getData());
    double[]result_projection_3 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    
}

---
---
public void testBasicFunctions_catena_21() {
    ArrayRealVector v1 = new ArrayRealVector(vec1);
    ArrayRealVector v2 = new ArrayRealVector(vec2);
    ArrayRealVector v5 = new ArrayRealVector(vec5);
    ArrayRealVector v_null = new ArrayRealVector(vec_null);
    RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);
    double d_getNorm = v5.getNorm();
    double d_getL1Norm = v5.getL1Norm();
    double d_getLInfNorm = v5.getLInfNorm();
    double dist = v1.getDistance(v2);
    double dist_2 = v1.getDistance(v2_t);
    double dist_3 = v1.getDistance((RealVector)v2);
    double d_getL1Distance = v1.getL1Distance(v2);
    double d_getL1Distance_2 = v1.getL1Distance(v2_t);
    double d_getL1Distance_3 = v1.getL1Distance((RealVector)v2);
    double d_getLInfDistance = v1.getLInfDistance(v2);
    double d_getLInfDistance_2 = v1.getLInfDistance(v2_t);
    double d_getLInfDistance_3 = v1.getLInfDistance((RealVector)v2);
    ArrayRealVector v_add = v1.add(v2);
    double[]result_add =  {
        5d, 7d, 9d
    };
    RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
    RealVector v_add_i = v1.add(vt2);
    double[]result_add_i =  {
        5d, 7d, 9d
    };
    ArrayRealVector v_subtract = v1.subtract(v2);
    double[]result_subtract =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_subtract_i = v1.subtract(vt2);
    double[]result_subtract_i =  {
         - 3d,  - 3d,  - 3d
    };
    ArrayRealVector v_ebeMultiply = v1.ebeMultiply(v2);
    double[]result_ebeMultiply =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
    double[]result_ebeMultiply_2 =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_3 = v1.ebeMultiply((RealVector)v2);
    double[]result_ebeMultiply_3 =  {
        4d, 10d, 18d
    };
    ArrayRealVector v_ebeDivide = v1.ebeDivide(v2);
    double[]result_ebeDivide =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_2 = v1.ebeDivide(v2_t);
    double[]result_ebeDivide_2 =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_3 = v1.ebeDivide((RealVector)v2);
    double[]result_ebeDivide_3 =  {
        0.25d, 0.4d, 0.5d
    };
    assertClose("compare vect", v_ebeDivide_3.getData(), result_ebeDivide_3, normTolerance);
    double dot = v1.dotProduct(v2);
    double dot_2 = v1.dotProduct(v2_t);
    RealMatrix m_outerProduct = v1.outerProduct(v2);
    RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
    RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector)v2);
    RealVector v_unitVector = v1.unitVector();
    RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
    try {
        v_null.unitVector();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();
    v_unitize.unitize();
    try {
        v_null.unitize();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    ArrayRealVector v_projection = v1.projection(v2);
    double[]result_projection =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_2 = v1.projection(v2_t);
    double[]result_projection_2 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_3 = v1.projection(v2.getData());
    double[]result_projection_3 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    
}

---
---
public void testBasicFunctions_catena_22() {
    ArrayRealVector v1 = new ArrayRealVector(vec1);
    ArrayRealVector v2 = new ArrayRealVector(vec2);
    ArrayRealVector v5 = new ArrayRealVector(vec5);
    ArrayRealVector v_null = new ArrayRealVector(vec_null);
    RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);
    double d_getNorm = v5.getNorm();
    double d_getL1Norm = v5.getL1Norm();
    double d_getLInfNorm = v5.getLInfNorm();
    double dist = v1.getDistance(v2);
    double dist_2 = v1.getDistance(v2_t);
    double dist_3 = v1.getDistance((RealVector)v2);
    double d_getL1Distance = v1.getL1Distance(v2);
    double d_getL1Distance_2 = v1.getL1Distance(v2_t);
    double d_getL1Distance_3 = v1.getL1Distance((RealVector)v2);
    double d_getLInfDistance = v1.getLInfDistance(v2);
    double d_getLInfDistance_2 = v1.getLInfDistance(v2_t);
    double d_getLInfDistance_3 = v1.getLInfDistance((RealVector)v2);
    ArrayRealVector v_add = v1.add(v2);
    double[]result_add =  {
        5d, 7d, 9d
    };
    RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
    RealVector v_add_i = v1.add(vt2);
    double[]result_add_i =  {
        5d, 7d, 9d
    };
    ArrayRealVector v_subtract = v1.subtract(v2);
    double[]result_subtract =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_subtract_i = v1.subtract(vt2);
    double[]result_subtract_i =  {
         - 3d,  - 3d,  - 3d
    };
    ArrayRealVector v_ebeMultiply = v1.ebeMultiply(v2);
    double[]result_ebeMultiply =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
    double[]result_ebeMultiply_2 =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_3 = v1.ebeMultiply((RealVector)v2);
    double[]result_ebeMultiply_3 =  {
        4d, 10d, 18d
    };
    ArrayRealVector v_ebeDivide = v1.ebeDivide(v2);
    double[]result_ebeDivide =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_2 = v1.ebeDivide(v2_t);
    double[]result_ebeDivide_2 =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_3 = v1.ebeDivide((RealVector)v2);
    double[]result_ebeDivide_3 =  {
        0.25d, 0.4d, 0.5d
    };
    double dot = v1.dotProduct(v2);
    assertEquals("compare val ", 32d, dot);
    double dot_2 = v1.dotProduct(v2_t);
    RealMatrix m_outerProduct = v1.outerProduct(v2);
    RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
    RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector)v2);
    RealVector v_unitVector = v1.unitVector();
    RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
    try {
        v_null.unitVector();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();
    v_unitize.unitize();
    try {
        v_null.unitize();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    ArrayRealVector v_projection = v1.projection(v2);
    double[]result_projection =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_2 = v1.projection(v2_t);
    double[]result_projection_2 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_3 = v1.projection(v2.getData());
    double[]result_projection_3 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    
}

---
---
public void testBasicFunctions_catena_23() {
    ArrayRealVector v1 = new ArrayRealVector(vec1);
    ArrayRealVector v2 = new ArrayRealVector(vec2);
    ArrayRealVector v5 = new ArrayRealVector(vec5);
    ArrayRealVector v_null = new ArrayRealVector(vec_null);
    RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);
    double d_getNorm = v5.getNorm();
    double d_getL1Norm = v5.getL1Norm();
    double d_getLInfNorm = v5.getLInfNorm();
    double dist = v1.getDistance(v2);
    double dist_2 = v1.getDistance(v2_t);
    double dist_3 = v1.getDistance((RealVector)v2);
    double d_getL1Distance = v1.getL1Distance(v2);
    double d_getL1Distance_2 = v1.getL1Distance(v2_t);
    double d_getL1Distance_3 = v1.getL1Distance((RealVector)v2);
    double d_getLInfDistance = v1.getLInfDistance(v2);
    double d_getLInfDistance_2 = v1.getLInfDistance(v2_t);
    double d_getLInfDistance_3 = v1.getLInfDistance((RealVector)v2);
    ArrayRealVector v_add = v1.add(v2);
    double[]result_add =  {
        5d, 7d, 9d
    };
    RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
    RealVector v_add_i = v1.add(vt2);
    double[]result_add_i =  {
        5d, 7d, 9d
    };
    ArrayRealVector v_subtract = v1.subtract(v2);
    double[]result_subtract =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_subtract_i = v1.subtract(vt2);
    double[]result_subtract_i =  {
         - 3d,  - 3d,  - 3d
    };
    ArrayRealVector v_ebeMultiply = v1.ebeMultiply(v2);
    double[]result_ebeMultiply =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
    double[]result_ebeMultiply_2 =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_3 = v1.ebeMultiply((RealVector)v2);
    double[]result_ebeMultiply_3 =  {
        4d, 10d, 18d
    };
    ArrayRealVector v_ebeDivide = v1.ebeDivide(v2);
    double[]result_ebeDivide =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_2 = v1.ebeDivide(v2_t);
    double[]result_ebeDivide_2 =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_3 = v1.ebeDivide((RealVector)v2);
    double[]result_ebeDivide_3 =  {
        0.25d, 0.4d, 0.5d
    };
    double dot = v1.dotProduct(v2);
    double dot_2 = v1.dotProduct(v2_t);
    assertEquals("compare val ", 32d, dot_2);
    RealMatrix m_outerProduct = v1.outerProduct(v2);
    RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
    RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector)v2);
    RealVector v_unitVector = v1.unitVector();
    RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
    try {
        v_null.unitVector();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();
    v_unitize.unitize();
    try {
        v_null.unitize();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    ArrayRealVector v_projection = v1.projection(v2);
    double[]result_projection =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_2 = v1.projection(v2_t);
    double[]result_projection_2 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_3 = v1.projection(v2.getData());
    double[]result_projection_3 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    
}

---
---
public void testBasicFunctions_catena_24() {
    ArrayRealVector v1 = new ArrayRealVector(vec1);
    ArrayRealVector v2 = new ArrayRealVector(vec2);
    ArrayRealVector v5 = new ArrayRealVector(vec5);
    ArrayRealVector v_null = new ArrayRealVector(vec_null);
    RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);
    double d_getNorm = v5.getNorm();
    double d_getL1Norm = v5.getL1Norm();
    double d_getLInfNorm = v5.getLInfNorm();
    double dist = v1.getDistance(v2);
    double dist_2 = v1.getDistance(v2_t);
    double dist_3 = v1.getDistance((RealVector)v2);
    double d_getL1Distance = v1.getL1Distance(v2);
    double d_getL1Distance_2 = v1.getL1Distance(v2_t);
    double d_getL1Distance_3 = v1.getL1Distance((RealVector)v2);
    double d_getLInfDistance = v1.getLInfDistance(v2);
    double d_getLInfDistance_2 = v1.getLInfDistance(v2_t);
    double d_getLInfDistance_3 = v1.getLInfDistance((RealVector)v2);
    ArrayRealVector v_add = v1.add(v2);
    double[]result_add =  {
        5d, 7d, 9d
    };
    RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
    RealVector v_add_i = v1.add(vt2);
    double[]result_add_i =  {
        5d, 7d, 9d
    };
    ArrayRealVector v_subtract = v1.subtract(v2);
    double[]result_subtract =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_subtract_i = v1.subtract(vt2);
    double[]result_subtract_i =  {
         - 3d,  - 3d,  - 3d
    };
    ArrayRealVector v_ebeMultiply = v1.ebeMultiply(v2);
    double[]result_ebeMultiply =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
    double[]result_ebeMultiply_2 =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_3 = v1.ebeMultiply((RealVector)v2);
    double[]result_ebeMultiply_3 =  {
        4d, 10d, 18d
    };
    ArrayRealVector v_ebeDivide = v1.ebeDivide(v2);
    double[]result_ebeDivide =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_2 = v1.ebeDivide(v2_t);
    double[]result_ebeDivide_2 =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_3 = v1.ebeDivide((RealVector)v2);
    double[]result_ebeDivide_3 =  {
        0.25d, 0.4d, 0.5d
    };
    double dot = v1.dotProduct(v2);
    double dot_2 = v1.dotProduct(v2_t);
    RealMatrix m_outerProduct = v1.outerProduct(v2);
    assertEquals("compare val ", 4d, m_outerProduct.getEntry(0, 0));
    RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
    RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector)v2);
    RealVector v_unitVector = v1.unitVector();
    RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
    try {
        v_null.unitVector();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();
    v_unitize.unitize();
    try {
        v_null.unitize();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    ArrayRealVector v_projection = v1.projection(v2);
    double[]result_projection =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_2 = v1.projection(v2_t);
    double[]result_projection_2 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_3 = v1.projection(v2.getData());
    double[]result_projection_3 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    
}

---
---
public void testBasicFunctions_catena_25() {
    ArrayRealVector v1 = new ArrayRealVector(vec1);
    ArrayRealVector v2 = new ArrayRealVector(vec2);
    ArrayRealVector v5 = new ArrayRealVector(vec5);
    ArrayRealVector v_null = new ArrayRealVector(vec_null);
    RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);
    double d_getNorm = v5.getNorm();
    double d_getL1Norm = v5.getL1Norm();
    double d_getLInfNorm = v5.getLInfNorm();
    double dist = v1.getDistance(v2);
    double dist_2 = v1.getDistance(v2_t);
    double dist_3 = v1.getDistance((RealVector)v2);
    double d_getL1Distance = v1.getL1Distance(v2);
    double d_getL1Distance_2 = v1.getL1Distance(v2_t);
    double d_getL1Distance_3 = v1.getL1Distance((RealVector)v2);
    double d_getLInfDistance = v1.getLInfDistance(v2);
    double d_getLInfDistance_2 = v1.getLInfDistance(v2_t);
    double d_getLInfDistance_3 = v1.getLInfDistance((RealVector)v2);
    ArrayRealVector v_add = v1.add(v2);
    double[]result_add =  {
        5d, 7d, 9d
    };
    RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
    RealVector v_add_i = v1.add(vt2);
    double[]result_add_i =  {
        5d, 7d, 9d
    };
    ArrayRealVector v_subtract = v1.subtract(v2);
    double[]result_subtract =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_subtract_i = v1.subtract(vt2);
    double[]result_subtract_i =  {
         - 3d,  - 3d,  - 3d
    };
    ArrayRealVector v_ebeMultiply = v1.ebeMultiply(v2);
    double[]result_ebeMultiply =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
    double[]result_ebeMultiply_2 =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_3 = v1.ebeMultiply((RealVector)v2);
    double[]result_ebeMultiply_3 =  {
        4d, 10d, 18d
    };
    ArrayRealVector v_ebeDivide = v1.ebeDivide(v2);
    double[]result_ebeDivide =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_2 = v1.ebeDivide(v2_t);
    double[]result_ebeDivide_2 =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_3 = v1.ebeDivide((RealVector)v2);
    double[]result_ebeDivide_3 =  {
        0.25d, 0.4d, 0.5d
    };
    double dot = v1.dotProduct(v2);
    double dot_2 = v1.dotProduct(v2_t);
    RealMatrix m_outerProduct = v1.outerProduct(v2);
    RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
    assertEquals("compare val ", 4d, m_outerProduct_2.getEntry(0, 0));
    RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector)v2);
    RealVector v_unitVector = v1.unitVector();
    RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
    try {
        v_null.unitVector();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();
    v_unitize.unitize();
    try {
        v_null.unitize();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    ArrayRealVector v_projection = v1.projection(v2);
    double[]result_projection =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_2 = v1.projection(v2_t);
    double[]result_projection_2 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_3 = v1.projection(v2.getData());
    double[]result_projection_3 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    
}

---
---
public void testBasicFunctions_catena_26() {
    ArrayRealVector v1 = new ArrayRealVector(vec1);
    ArrayRealVector v2 = new ArrayRealVector(vec2);
    ArrayRealVector v5 = new ArrayRealVector(vec5);
    ArrayRealVector v_null = new ArrayRealVector(vec_null);
    RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);
    double d_getNorm = v5.getNorm();
    double d_getL1Norm = v5.getL1Norm();
    double d_getLInfNorm = v5.getLInfNorm();
    double dist = v1.getDistance(v2);
    double dist_2 = v1.getDistance(v2_t);
    double dist_3 = v1.getDistance((RealVector)v2);
    double d_getL1Distance = v1.getL1Distance(v2);
    double d_getL1Distance_2 = v1.getL1Distance(v2_t);
    double d_getL1Distance_3 = v1.getL1Distance((RealVector)v2);
    double d_getLInfDistance = v1.getLInfDistance(v2);
    double d_getLInfDistance_2 = v1.getLInfDistance(v2_t);
    double d_getLInfDistance_3 = v1.getLInfDistance((RealVector)v2);
    ArrayRealVector v_add = v1.add(v2);
    double[]result_add =  {
        5d, 7d, 9d
    };
    RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
    RealVector v_add_i = v1.add(vt2);
    double[]result_add_i =  {
        5d, 7d, 9d
    };
    ArrayRealVector v_subtract = v1.subtract(v2);
    double[]result_subtract =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_subtract_i = v1.subtract(vt2);
    double[]result_subtract_i =  {
         - 3d,  - 3d,  - 3d
    };
    ArrayRealVector v_ebeMultiply = v1.ebeMultiply(v2);
    double[]result_ebeMultiply =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
    double[]result_ebeMultiply_2 =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_3 = v1.ebeMultiply((RealVector)v2);
    double[]result_ebeMultiply_3 =  {
        4d, 10d, 18d
    };
    ArrayRealVector v_ebeDivide = v1.ebeDivide(v2);
    double[]result_ebeDivide =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_2 = v1.ebeDivide(v2_t);
    double[]result_ebeDivide_2 =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_3 = v1.ebeDivide((RealVector)v2);
    double[]result_ebeDivide_3 =  {
        0.25d, 0.4d, 0.5d
    };
    double dot = v1.dotProduct(v2);
    double dot_2 = v1.dotProduct(v2_t);
    RealMatrix m_outerProduct = v1.outerProduct(v2);
    RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
    RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector)v2);
    assertEquals("compare val ", 4d, m_outerProduct_3.getEntry(0, 0));
    RealVector v_unitVector = v1.unitVector();
    RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
    try {
        v_null.unitVector();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();
    v_unitize.unitize();
    try {
        v_null.unitize();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    ArrayRealVector v_projection = v1.projection(v2);
    double[]result_projection =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_2 = v1.projection(v2_t);
    double[]result_projection_2 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_3 = v1.projection(v2.getData());
    double[]result_projection_3 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    
}

---
---
public void testBasicFunctions_catena_27() {
    ArrayRealVector v1 = new ArrayRealVector(vec1);
    ArrayRealVector v2 = new ArrayRealVector(vec2);
    ArrayRealVector v5 = new ArrayRealVector(vec5);
    ArrayRealVector v_null = new ArrayRealVector(vec_null);
    RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);
    double d_getNorm = v5.getNorm();
    double d_getL1Norm = v5.getL1Norm();
    double d_getLInfNorm = v5.getLInfNorm();
    double dist = v1.getDistance(v2);
    double dist_2 = v1.getDistance(v2_t);
    double dist_3 = v1.getDistance((RealVector)v2);
    double d_getL1Distance = v1.getL1Distance(v2);
    double d_getL1Distance_2 = v1.getL1Distance(v2_t);
    double d_getL1Distance_3 = v1.getL1Distance((RealVector)v2);
    double d_getLInfDistance = v1.getLInfDistance(v2);
    double d_getLInfDistance_2 = v1.getLInfDistance(v2_t);
    double d_getLInfDistance_3 = v1.getLInfDistance((RealVector)v2);
    ArrayRealVector v_add = v1.add(v2);
    double[]result_add =  {
        5d, 7d, 9d
    };
    RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
    RealVector v_add_i = v1.add(vt2);
    double[]result_add_i =  {
        5d, 7d, 9d
    };
    ArrayRealVector v_subtract = v1.subtract(v2);
    double[]result_subtract =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_subtract_i = v1.subtract(vt2);
    double[]result_subtract_i =  {
         - 3d,  - 3d,  - 3d
    };
    ArrayRealVector v_ebeMultiply = v1.ebeMultiply(v2);
    double[]result_ebeMultiply =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
    double[]result_ebeMultiply_2 =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_3 = v1.ebeMultiply((RealVector)v2);
    double[]result_ebeMultiply_3 =  {
        4d, 10d, 18d
    };
    ArrayRealVector v_ebeDivide = v1.ebeDivide(v2);
    double[]result_ebeDivide =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_2 = v1.ebeDivide(v2_t);
    double[]result_ebeDivide_2 =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_3 = v1.ebeDivide((RealVector)v2);
    double[]result_ebeDivide_3 =  {
        0.25d, 0.4d, 0.5d
    };
    double dot = v1.dotProduct(v2);
    double dot_2 = v1.dotProduct(v2_t);
    RealMatrix m_outerProduct = v1.outerProduct(v2);
    RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
    RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector)v2);
    RealVector v_unitVector = v1.unitVector();
    RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
    assertClose("compare vect", v_unitVector.getData(), v_unitVector_2.getData(), normTolerance);
    try {
        v_null.unitVector();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();
    v_unitize.unitize();
    try {
        v_null.unitize();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    ArrayRealVector v_projection = v1.projection(v2);
    double[]result_projection =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_2 = v1.projection(v2_t);
    double[]result_projection_2 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_3 = v1.projection(v2.getData());
    double[]result_projection_3 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    
}

---
---
public void testBasicFunctions_catena_28() {
    ArrayRealVector v1 = new ArrayRealVector(vec1);
    ArrayRealVector v2 = new ArrayRealVector(vec2);
    ArrayRealVector v5 = new ArrayRealVector(vec5);
    ArrayRealVector v_null = new ArrayRealVector(vec_null);
    RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);
    double d_getNorm = v5.getNorm();
    double d_getL1Norm = v5.getL1Norm();
    double d_getLInfNorm = v5.getLInfNorm();
    double dist = v1.getDistance(v2);
    double dist_2 = v1.getDistance(v2_t);
    double dist_3 = v1.getDistance((RealVector)v2);
    double d_getL1Distance = v1.getL1Distance(v2);
    double d_getL1Distance_2 = v1.getL1Distance(v2_t);
    double d_getL1Distance_3 = v1.getL1Distance((RealVector)v2);
    double d_getLInfDistance = v1.getLInfDistance(v2);
    double d_getLInfDistance_2 = v1.getLInfDistance(v2_t);
    double d_getLInfDistance_3 = v1.getLInfDistance((RealVector)v2);
    ArrayRealVector v_add = v1.add(v2);
    double[]result_add =  {
        5d, 7d, 9d
    };
    RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
    RealVector v_add_i = v1.add(vt2);
    double[]result_add_i =  {
        5d, 7d, 9d
    };
    ArrayRealVector v_subtract = v1.subtract(v2);
    double[]result_subtract =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_subtract_i = v1.subtract(vt2);
    double[]result_subtract_i =  {
         - 3d,  - 3d,  - 3d
    };
    ArrayRealVector v_ebeMultiply = v1.ebeMultiply(v2);
    double[]result_ebeMultiply =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
    double[]result_ebeMultiply_2 =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_3 = v1.ebeMultiply((RealVector)v2);
    double[]result_ebeMultiply_3 =  {
        4d, 10d, 18d
    };
    ArrayRealVector v_ebeDivide = v1.ebeDivide(v2);
    double[]result_ebeDivide =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_2 = v1.ebeDivide(v2_t);
    double[]result_ebeDivide_2 =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_3 = v1.ebeDivide((RealVector)v2);
    double[]result_ebeDivide_3 =  {
        0.25d, 0.4d, 0.5d
    };
    double dot = v1.dotProduct(v2);
    double dot_2 = v1.dotProduct(v2_t);
    RealMatrix m_outerProduct = v1.outerProduct(v2);
    RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
    RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector)v2);
    RealVector v_unitVector = v1.unitVector();
    RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
    try {
        v_null.unitVector();
        fail("Expecting ArithmeticException");
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();
    v_unitize.unitize();
    try {
        v_null.unitize();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    ArrayRealVector v_projection = v1.projection(v2);
    double[]result_projection =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_2 = v1.projection(v2_t);
    double[]result_projection_2 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_3 = v1.projection(v2.getData());
    double[]result_projection_3 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    
}

---
---
public void testBasicFunctions_catena_29() {
    ArrayRealVector v1 = new ArrayRealVector(vec1);
    ArrayRealVector v2 = new ArrayRealVector(vec2);
    ArrayRealVector v5 = new ArrayRealVector(vec5);
    ArrayRealVector v_null = new ArrayRealVector(vec_null);
    RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);
    double d_getNorm = v5.getNorm();
    double d_getL1Norm = v5.getL1Norm();
    double d_getLInfNorm = v5.getLInfNorm();
    double dist = v1.getDistance(v2);
    double dist_2 = v1.getDistance(v2_t);
    double dist_3 = v1.getDistance((RealVector)v2);
    double d_getL1Distance = v1.getL1Distance(v2);
    double d_getL1Distance_2 = v1.getL1Distance(v2_t);
    double d_getL1Distance_3 = v1.getL1Distance((RealVector)v2);
    double d_getLInfDistance = v1.getLInfDistance(v2);
    double d_getLInfDistance_2 = v1.getLInfDistance(v2_t);
    double d_getLInfDistance_3 = v1.getLInfDistance((RealVector)v2);
    ArrayRealVector v_add = v1.add(v2);
    double[]result_add =  {
        5d, 7d, 9d
    };
    RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
    RealVector v_add_i = v1.add(vt2);
    double[]result_add_i =  {
        5d, 7d, 9d
    };
    ArrayRealVector v_subtract = v1.subtract(v2);
    double[]result_subtract =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_subtract_i = v1.subtract(vt2);
    double[]result_subtract_i =  {
         - 3d,  - 3d,  - 3d
    };
    ArrayRealVector v_ebeMultiply = v1.ebeMultiply(v2);
    double[]result_ebeMultiply =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
    double[]result_ebeMultiply_2 =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_3 = v1.ebeMultiply((RealVector)v2);
    double[]result_ebeMultiply_3 =  {
        4d, 10d, 18d
    };
    ArrayRealVector v_ebeDivide = v1.ebeDivide(v2);
    double[]result_ebeDivide =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_2 = v1.ebeDivide(v2_t);
    double[]result_ebeDivide_2 =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_3 = v1.ebeDivide((RealVector)v2);
    double[]result_ebeDivide_3 =  {
        0.25d, 0.4d, 0.5d
    };
    double dot = v1.dotProduct(v2);
    double dot_2 = v1.dotProduct(v2_t);
    RealMatrix m_outerProduct = v1.outerProduct(v2);
    RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
    RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector)v2);
    RealVector v_unitVector = v1.unitVector();
    RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
    try {
        v_null.unitVector();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        fail("wrong exception caught");
        
    }
    ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();
    v_unitize.unitize();
    try {
        v_null.unitize();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    ArrayRealVector v_projection = v1.projection(v2);
    double[]result_projection =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_2 = v1.projection(v2_t);
    double[]result_projection_2 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_3 = v1.projection(v2.getData());
    double[]result_projection_3 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    
}

---
---
public void testBasicFunctions_catena_30() {
    ArrayRealVector v1 = new ArrayRealVector(vec1);
    ArrayRealVector v2 = new ArrayRealVector(vec2);
    ArrayRealVector v5 = new ArrayRealVector(vec5);
    ArrayRealVector v_null = new ArrayRealVector(vec_null);
    RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);
    double d_getNorm = v5.getNorm();
    double d_getL1Norm = v5.getL1Norm();
    double d_getLInfNorm = v5.getLInfNorm();
    double dist = v1.getDistance(v2);
    double dist_2 = v1.getDistance(v2_t);
    double dist_3 = v1.getDistance((RealVector)v2);
    double d_getL1Distance = v1.getL1Distance(v2);
    double d_getL1Distance_2 = v1.getL1Distance(v2_t);
    double d_getL1Distance_3 = v1.getL1Distance((RealVector)v2);
    double d_getLInfDistance = v1.getLInfDistance(v2);
    double d_getLInfDistance_2 = v1.getLInfDistance(v2_t);
    double d_getLInfDistance_3 = v1.getLInfDistance((RealVector)v2);
    ArrayRealVector v_add = v1.add(v2);
    double[]result_add =  {
        5d, 7d, 9d
    };
    RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
    RealVector v_add_i = v1.add(vt2);
    double[]result_add_i =  {
        5d, 7d, 9d
    };
    ArrayRealVector v_subtract = v1.subtract(v2);
    double[]result_subtract =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_subtract_i = v1.subtract(vt2);
    double[]result_subtract_i =  {
         - 3d,  - 3d,  - 3d
    };
    ArrayRealVector v_ebeMultiply = v1.ebeMultiply(v2);
    double[]result_ebeMultiply =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
    double[]result_ebeMultiply_2 =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_3 = v1.ebeMultiply((RealVector)v2);
    double[]result_ebeMultiply_3 =  {
        4d, 10d, 18d
    };
    ArrayRealVector v_ebeDivide = v1.ebeDivide(v2);
    double[]result_ebeDivide =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_2 = v1.ebeDivide(v2_t);
    double[]result_ebeDivide_2 =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_3 = v1.ebeDivide((RealVector)v2);
    double[]result_ebeDivide_3 =  {
        0.25d, 0.4d, 0.5d
    };
    double dot = v1.dotProduct(v2);
    double dot_2 = v1.dotProduct(v2_t);
    RealMatrix m_outerProduct = v1.outerProduct(v2);
    RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
    RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector)v2);
    RealVector v_unitVector = v1.unitVector();
    RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
    try {
        v_null.unitVector();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();
    v_unitize.unitize();
    assertClose("compare vect", v_unitVector_2.getData(), v_unitize.getData(), normTolerance);
    try {
        v_null.unitize();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    ArrayRealVector v_projection = v1.projection(v2);
    double[]result_projection =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_2 = v1.projection(v2_t);
    double[]result_projection_2 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_3 = v1.projection(v2.getData());
    double[]result_projection_3 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    
}

---
---
public void testBasicFunctions_catena_31() {
    ArrayRealVector v1 = new ArrayRealVector(vec1);
    ArrayRealVector v2 = new ArrayRealVector(vec2);
    ArrayRealVector v5 = new ArrayRealVector(vec5);
    ArrayRealVector v_null = new ArrayRealVector(vec_null);
    RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);
    double d_getNorm = v5.getNorm();
    double d_getL1Norm = v5.getL1Norm();
    double d_getLInfNorm = v5.getLInfNorm();
    double dist = v1.getDistance(v2);
    double dist_2 = v1.getDistance(v2_t);
    double dist_3 = v1.getDistance((RealVector)v2);
    double d_getL1Distance = v1.getL1Distance(v2);
    double d_getL1Distance_2 = v1.getL1Distance(v2_t);
    double d_getL1Distance_3 = v1.getL1Distance((RealVector)v2);
    double d_getLInfDistance = v1.getLInfDistance(v2);
    double d_getLInfDistance_2 = v1.getLInfDistance(v2_t);
    double d_getLInfDistance_3 = v1.getLInfDistance((RealVector)v2);
    ArrayRealVector v_add = v1.add(v2);
    double[]result_add =  {
        5d, 7d, 9d
    };
    RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
    RealVector v_add_i = v1.add(vt2);
    double[]result_add_i =  {
        5d, 7d, 9d
    };
    ArrayRealVector v_subtract = v1.subtract(v2);
    double[]result_subtract =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_subtract_i = v1.subtract(vt2);
    double[]result_subtract_i =  {
         - 3d,  - 3d,  - 3d
    };
    ArrayRealVector v_ebeMultiply = v1.ebeMultiply(v2);
    double[]result_ebeMultiply =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
    double[]result_ebeMultiply_2 =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_3 = v1.ebeMultiply((RealVector)v2);
    double[]result_ebeMultiply_3 =  {
        4d, 10d, 18d
    };
    ArrayRealVector v_ebeDivide = v1.ebeDivide(v2);
    double[]result_ebeDivide =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_2 = v1.ebeDivide(v2_t);
    double[]result_ebeDivide_2 =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_3 = v1.ebeDivide((RealVector)v2);
    double[]result_ebeDivide_3 =  {
        0.25d, 0.4d, 0.5d
    };
    double dot = v1.dotProduct(v2);
    double dot_2 = v1.dotProduct(v2_t);
    RealMatrix m_outerProduct = v1.outerProduct(v2);
    RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
    RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector)v2);
    RealVector v_unitVector = v1.unitVector();
    RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
    try {
        v_null.unitVector();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();
    v_unitize.unitize();
    try {
        v_null.unitize();
        fail("Expecting ArithmeticException");
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    ArrayRealVector v_projection = v1.projection(v2);
    double[]result_projection =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_2 = v1.projection(v2_t);
    double[]result_projection_2 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_3 = v1.projection(v2.getData());
    double[]result_projection_3 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    
}

---
---
public void testBasicFunctions_catena_32() {
    ArrayRealVector v1 = new ArrayRealVector(vec1);
    ArrayRealVector v2 = new ArrayRealVector(vec2);
    ArrayRealVector v5 = new ArrayRealVector(vec5);
    ArrayRealVector v_null = new ArrayRealVector(vec_null);
    RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);
    double d_getNorm = v5.getNorm();
    double d_getL1Norm = v5.getL1Norm();
    double d_getLInfNorm = v5.getLInfNorm();
    double dist = v1.getDistance(v2);
    double dist_2 = v1.getDistance(v2_t);
    double dist_3 = v1.getDistance((RealVector)v2);
    double d_getL1Distance = v1.getL1Distance(v2);
    double d_getL1Distance_2 = v1.getL1Distance(v2_t);
    double d_getL1Distance_3 = v1.getL1Distance((RealVector)v2);
    double d_getLInfDistance = v1.getLInfDistance(v2);
    double d_getLInfDistance_2 = v1.getLInfDistance(v2_t);
    double d_getLInfDistance_3 = v1.getLInfDistance((RealVector)v2);
    ArrayRealVector v_add = v1.add(v2);
    double[]result_add =  {
        5d, 7d, 9d
    };
    RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
    RealVector v_add_i = v1.add(vt2);
    double[]result_add_i =  {
        5d, 7d, 9d
    };
    ArrayRealVector v_subtract = v1.subtract(v2);
    double[]result_subtract =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_subtract_i = v1.subtract(vt2);
    double[]result_subtract_i =  {
         - 3d,  - 3d,  - 3d
    };
    ArrayRealVector v_ebeMultiply = v1.ebeMultiply(v2);
    double[]result_ebeMultiply =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
    double[]result_ebeMultiply_2 =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_3 = v1.ebeMultiply((RealVector)v2);
    double[]result_ebeMultiply_3 =  {
        4d, 10d, 18d
    };
    ArrayRealVector v_ebeDivide = v1.ebeDivide(v2);
    double[]result_ebeDivide =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_2 = v1.ebeDivide(v2_t);
    double[]result_ebeDivide_2 =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_3 = v1.ebeDivide((RealVector)v2);
    double[]result_ebeDivide_3 =  {
        0.25d, 0.4d, 0.5d
    };
    double dot = v1.dotProduct(v2);
    double dot_2 = v1.dotProduct(v2_t);
    RealMatrix m_outerProduct = v1.outerProduct(v2);
    RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
    RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector)v2);
    RealVector v_unitVector = v1.unitVector();
    RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
    try {
        v_null.unitVector();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();
    v_unitize.unitize();
    try {
        v_null.unitize();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        fail("wrong exception caught");
        
    }
    ArrayRealVector v_projection = v1.projection(v2);
    double[]result_projection =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_2 = v1.projection(v2_t);
    double[]result_projection_2 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_3 = v1.projection(v2.getData());
    double[]result_projection_3 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    
}

---
---
public void testBasicFunctions_catena_33() {
    ArrayRealVector v1 = new ArrayRealVector(vec1);
    ArrayRealVector v2 = new ArrayRealVector(vec2);
    ArrayRealVector v5 = new ArrayRealVector(vec5);
    ArrayRealVector v_null = new ArrayRealVector(vec_null);
    RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);
    double d_getNorm = v5.getNorm();
    double d_getL1Norm = v5.getL1Norm();
    double d_getLInfNorm = v5.getLInfNorm();
    double dist = v1.getDistance(v2);
    double dist_2 = v1.getDistance(v2_t);
    double dist_3 = v1.getDistance((RealVector)v2);
    double d_getL1Distance = v1.getL1Distance(v2);
    double d_getL1Distance_2 = v1.getL1Distance(v2_t);
    double d_getL1Distance_3 = v1.getL1Distance((RealVector)v2);
    double d_getLInfDistance = v1.getLInfDistance(v2);
    double d_getLInfDistance_2 = v1.getLInfDistance(v2_t);
    double d_getLInfDistance_3 = v1.getLInfDistance((RealVector)v2);
    ArrayRealVector v_add = v1.add(v2);
    double[]result_add =  {
        5d, 7d, 9d
    };
    RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
    RealVector v_add_i = v1.add(vt2);
    double[]result_add_i =  {
        5d, 7d, 9d
    };
    ArrayRealVector v_subtract = v1.subtract(v2);
    double[]result_subtract =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_subtract_i = v1.subtract(vt2);
    double[]result_subtract_i =  {
         - 3d,  - 3d,  - 3d
    };
    ArrayRealVector v_ebeMultiply = v1.ebeMultiply(v2);
    double[]result_ebeMultiply =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
    double[]result_ebeMultiply_2 =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_3 = v1.ebeMultiply((RealVector)v2);
    double[]result_ebeMultiply_3 =  {
        4d, 10d, 18d
    };
    ArrayRealVector v_ebeDivide = v1.ebeDivide(v2);
    double[]result_ebeDivide =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_2 = v1.ebeDivide(v2_t);
    double[]result_ebeDivide_2 =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_3 = v1.ebeDivide((RealVector)v2);
    double[]result_ebeDivide_3 =  {
        0.25d, 0.4d, 0.5d
    };
    double dot = v1.dotProduct(v2);
    double dot_2 = v1.dotProduct(v2_t);
    RealMatrix m_outerProduct = v1.outerProduct(v2);
    RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
    RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector)v2);
    RealVector v_unitVector = v1.unitVector();
    RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
    try {
        v_null.unitVector();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();
    v_unitize.unitize();
    try {
        v_null.unitize();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    ArrayRealVector v_projection = v1.projection(v2);
    double[]result_projection =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    assertClose("compare vect", v_projection.getData(), result_projection, normTolerance);
    RealVector v_projection_2 = v1.projection(v2_t);
    double[]result_projection_2 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_3 = v1.projection(v2.getData());
    double[]result_projection_3 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    
}

---
---
public void testBasicFunctions_catena_34() {
    ArrayRealVector v1 = new ArrayRealVector(vec1);
    ArrayRealVector v2 = new ArrayRealVector(vec2);
    ArrayRealVector v5 = new ArrayRealVector(vec5);
    ArrayRealVector v_null = new ArrayRealVector(vec_null);
    RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);
    double d_getNorm = v5.getNorm();
    double d_getL1Norm = v5.getL1Norm();
    double d_getLInfNorm = v5.getLInfNorm();
    double dist = v1.getDistance(v2);
    double dist_2 = v1.getDistance(v2_t);
    double dist_3 = v1.getDistance((RealVector)v2);
    double d_getL1Distance = v1.getL1Distance(v2);
    double d_getL1Distance_2 = v1.getL1Distance(v2_t);
    double d_getL1Distance_3 = v1.getL1Distance((RealVector)v2);
    double d_getLInfDistance = v1.getLInfDistance(v2);
    double d_getLInfDistance_2 = v1.getLInfDistance(v2_t);
    double d_getLInfDistance_3 = v1.getLInfDistance((RealVector)v2);
    ArrayRealVector v_add = v1.add(v2);
    double[]result_add =  {
        5d, 7d, 9d
    };
    RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
    RealVector v_add_i = v1.add(vt2);
    double[]result_add_i =  {
        5d, 7d, 9d
    };
    ArrayRealVector v_subtract = v1.subtract(v2);
    double[]result_subtract =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_subtract_i = v1.subtract(vt2);
    double[]result_subtract_i =  {
         - 3d,  - 3d,  - 3d
    };
    ArrayRealVector v_ebeMultiply = v1.ebeMultiply(v2);
    double[]result_ebeMultiply =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
    double[]result_ebeMultiply_2 =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_3 = v1.ebeMultiply((RealVector)v2);
    double[]result_ebeMultiply_3 =  {
        4d, 10d, 18d
    };
    ArrayRealVector v_ebeDivide = v1.ebeDivide(v2);
    double[]result_ebeDivide =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_2 = v1.ebeDivide(v2_t);
    double[]result_ebeDivide_2 =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_3 = v1.ebeDivide((RealVector)v2);
    double[]result_ebeDivide_3 =  {
        0.25d, 0.4d, 0.5d
    };
    double dot = v1.dotProduct(v2);
    double dot_2 = v1.dotProduct(v2_t);
    RealMatrix m_outerProduct = v1.outerProduct(v2);
    RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
    RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector)v2);
    RealVector v_unitVector = v1.unitVector();
    RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
    try {
        v_null.unitVector();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();
    v_unitize.unitize();
    try {
        v_null.unitize();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    ArrayRealVector v_projection = v1.projection(v2);
    double[]result_projection =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_2 = v1.projection(v2_t);
    double[]result_projection_2 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    assertClose("compare vect", v_projection_2.getData(), result_projection_2, normTolerance);
    RealVector v_projection_3 = v1.projection(v2.getData());
    double[]result_projection_3 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    
}

---
---
public void testBasicFunctions_catena_35() {
    ArrayRealVector v1 = new ArrayRealVector(vec1);
    ArrayRealVector v2 = new ArrayRealVector(vec2);
    ArrayRealVector v5 = new ArrayRealVector(vec5);
    ArrayRealVector v_null = new ArrayRealVector(vec_null);
    RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);
    double d_getNorm = v5.getNorm();
    double d_getL1Norm = v5.getL1Norm();
    double d_getLInfNorm = v5.getLInfNorm();
    double dist = v1.getDistance(v2);
    double dist_2 = v1.getDistance(v2_t);
    double dist_3 = v1.getDistance((RealVector)v2);
    double d_getL1Distance = v1.getL1Distance(v2);
    double d_getL1Distance_2 = v1.getL1Distance(v2_t);
    double d_getL1Distance_3 = v1.getL1Distance((RealVector)v2);
    double d_getLInfDistance = v1.getLInfDistance(v2);
    double d_getLInfDistance_2 = v1.getLInfDistance(v2_t);
    double d_getLInfDistance_3 = v1.getLInfDistance((RealVector)v2);
    ArrayRealVector v_add = v1.add(v2);
    double[]result_add =  {
        5d, 7d, 9d
    };
    RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
    RealVector v_add_i = v1.add(vt2);
    double[]result_add_i =  {
        5d, 7d, 9d
    };
    ArrayRealVector v_subtract = v1.subtract(v2);
    double[]result_subtract =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_subtract_i = v1.subtract(vt2);
    double[]result_subtract_i =  {
         - 3d,  - 3d,  - 3d
    };
    ArrayRealVector v_ebeMultiply = v1.ebeMultiply(v2);
    double[]result_ebeMultiply =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
    double[]result_ebeMultiply_2 =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_3 = v1.ebeMultiply((RealVector)v2);
    double[]result_ebeMultiply_3 =  {
        4d, 10d, 18d
    };
    ArrayRealVector v_ebeDivide = v1.ebeDivide(v2);
    double[]result_ebeDivide =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_2 = v1.ebeDivide(v2_t);
    double[]result_ebeDivide_2 =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_3 = v1.ebeDivide((RealVector)v2);
    double[]result_ebeDivide_3 =  {
        0.25d, 0.4d, 0.5d
    };
    double dot = v1.dotProduct(v2);
    double dot_2 = v1.dotProduct(v2_t);
    RealMatrix m_outerProduct = v1.outerProduct(v2);
    RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
    RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector)v2);
    RealVector v_unitVector = v1.unitVector();
    RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
    try {
        v_null.unitVector();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();
    v_unitize.unitize();
    try {
        v_null.unitize();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    ArrayRealVector v_projection = v1.projection(v2);
    double[]result_projection =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_2 = v1.projection(v2_t);
    double[]result_projection_2 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_3 = v1.projection(v2.getData());
    double[]result_projection_3 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    assertClose("compare vect", v_projection_3.getData(), result_projection_3, normTolerance);
    
}

---
@@@
Split test: org.apache.commons.math.linear.SparseRealVectorTest::testBasicFunctions
file: /root/workbench/exportInfo/d4j_buggy/Math_77/src/test/java//org/apache/commons/math/linear/SparseRealVectorTest.java
Begin: Pos(950, 12)
End: Pos(1076, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_77/src/test/java//org/apache/commons/math/linear/SparseRealVectorTest.java
Name: testBasicFunctions
Childs: [StatementAssertion<Begin: Pos(960, 9), End: Pos(960, 75)>,
StatementAssertion<Begin: Pos(964, 9), End: Pos(964, 60)>,
StatementAssertion<Begin: Pos(968, 9), End: Pos(968, 61)>,
StatementAssertion<Begin: Pos(972, 9), End: Pos(972, 74)>,
StatementAssertion<Begin: Pos(976, 9), End: Pos(976, 76)>,
StatementAssertion<Begin: Pos(980, 9), End: Pos(980, 62)>,
StatementAssertion<Begin: Pos(983, 9), End: Pos(983, 64)>,
StatementAssertion<Begin: Pos(987, 9), End: Pos(987, 64)>,
StatementAssertion<Begin: Pos(990, 9), End: Pos(990, 66)>,
StatementAssertion<Begin: Pos(995, 9), End: Pos(995, 78)>,
StatementAssertion<Begin: Pos(1000, 9), End: Pos(1000, 82)>,
StatementAssertion<Begin: Pos(1005, 9), End: Pos(1005, 88)>,
StatementAssertion<Begin: Pos(1009, 9), End: Pos(1009, 92)>,
StatementAssertion<Begin: Pos(1014, 9), End: Pos(1014, 94)>,
StatementAssertion<Begin: Pos(1018, 9), End: Pos(1018, 98)>,
StatementAssertion<Begin: Pos(1023, 9), End: Pos(1023, 90)>,
StatementAssertion<Begin: Pos(1027, 9), End: Pos(1027, 94)>,
StatementAssertion<Begin: Pos(1031, 9), End: Pos(1031, 46)>,
StatementAssertion<Begin: Pos(1035, 9), End: Pos(1035, 48)>,
StatementAssertion<Begin: Pos(1038, 9), End: Pos(1038, 70)>,
StatementAssertion<Begin: Pos(1041, 9), End: Pos(1041, 72)>,
StatementAssertion<Begin: Pos(1045, 9), End: Pos(1045, 99)>,
StatementAssertion<Begin: Pos(1049, 13), End: Pos(1049, 50)>,
StatementAssertion<Begin: Pos(1053, 13), End: Pos(1053, 43)>,
StatementAssertion<Begin: Pos(1058, 9), End: Pos(1058, 96)>,
StatementAssertion<Begin: Pos(1061, 13), End: Pos(1061, 50)>,
StatementAssertion<Begin: Pos(1065, 13), End: Pos(1065, 43)>,
StatementAssertion<Begin: Pos(1070, 9), End: Pos(1070, 94)>,
StatementAssertion<Begin: Pos(1074, 9), End: Pos(1074, 98)>,
]
---
public void testBasicFunctions_catena_0() {
    OpenMapRealVector v1 = new OpenMapRealVector(vec1);
    OpenMapRealVector v2 = new OpenMapRealVector(vec2);
    OpenMapRealVector v5 = new OpenMapRealVector(vec5);
    OpenMapRealVector v_null = new OpenMapRealVector(vec_null);
    SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);
    double d_getNorm = v5.getNorm();
    assertEquals("compare values  ", 8.4261497731763586307, d_getNorm);
    double d_getL1Norm = v5.getL1Norm();
    double d_getLInfNorm = v5.getLInfNorm();
    double dist = v1.getDistance(v2);
    double dist_2 = v1.getDistance(v2_t);
    double d_getL1Distance = v1.getL1Distance(v2);
    double d_getL1Distance_2 = v1.getL1Distance(v2_t);
    double d_getLInfDistance = v1.getLInfDistance(v2);
    double d_getLInfDistance_2 = v1.getLInfDistance(v2_t);
    OpenMapRealVector v_add = v1.add(v2);
    double[]result_add =  {
        5d, 7d, 9d
    };
    SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);
    RealVector v_add_i = v1.add(vt2);
    double[]result_add_i =  {
        5d, 7d, 9d
    };
    OpenMapRealVector v_subtract = v1.subtract(v2);
    double[]result_subtract =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_subtract_i = v1.subtract(vt2);
    double[]result_subtract_i =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_ebeMultiply = v1.ebeMultiply(v2);
    double[]result_ebeMultiply =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
    double[]result_ebeMultiply_2 =  {
        4d, 10d, 18d
    };
    RealVector v_ebeDivide = v1.ebeDivide(v2);
    double[]result_ebeDivide =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_2 = v1.ebeDivide(v2_t);
    double[]result_ebeDivide_2 =  {
        0.25d, 0.4d, 0.5d
    };
    double dot = v1.dotProduct(v2);
    double dot_2 = v1.dotProduct(v2_t);
    RealMatrix m_outerProduct = v1.outerProduct(v2);
    RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
    RealVector v_unitVector = v1.unitVector();
    RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
    try {
        v_null.unitVector();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    OpenMapRealVector v_unitize = v1.copy();
    v_unitize.unitize();
    try {
        v_null.unitize();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    RealVector v_projection = v1.projection(v2);
    double[]result_projection =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_2 = v1.projection(v2_t);
    double[]result_projection_2 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    
}

---
---
public void testBasicFunctions_catena_1() {
    OpenMapRealVector v1 = new OpenMapRealVector(vec1);
    OpenMapRealVector v2 = new OpenMapRealVector(vec2);
    OpenMapRealVector v5 = new OpenMapRealVector(vec5);
    OpenMapRealVector v_null = new OpenMapRealVector(vec_null);
    SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);
    double d_getNorm = v5.getNorm();
    double d_getL1Norm = v5.getL1Norm();
    assertEquals("compare values  ", 17.0, d_getL1Norm);
    double d_getLInfNorm = v5.getLInfNorm();
    double dist = v1.getDistance(v2);
    double dist_2 = v1.getDistance(v2_t);
    double d_getL1Distance = v1.getL1Distance(v2);
    double d_getL1Distance_2 = v1.getL1Distance(v2_t);
    double d_getLInfDistance = v1.getLInfDistance(v2);
    double d_getLInfDistance_2 = v1.getLInfDistance(v2_t);
    OpenMapRealVector v_add = v1.add(v2);
    double[]result_add =  {
        5d, 7d, 9d
    };
    SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);
    RealVector v_add_i = v1.add(vt2);
    double[]result_add_i =  {
        5d, 7d, 9d
    };
    OpenMapRealVector v_subtract = v1.subtract(v2);
    double[]result_subtract =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_subtract_i = v1.subtract(vt2);
    double[]result_subtract_i =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_ebeMultiply = v1.ebeMultiply(v2);
    double[]result_ebeMultiply =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
    double[]result_ebeMultiply_2 =  {
        4d, 10d, 18d
    };
    RealVector v_ebeDivide = v1.ebeDivide(v2);
    double[]result_ebeDivide =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_2 = v1.ebeDivide(v2_t);
    double[]result_ebeDivide_2 =  {
        0.25d, 0.4d, 0.5d
    };
    double dot = v1.dotProduct(v2);
    double dot_2 = v1.dotProduct(v2_t);
    RealMatrix m_outerProduct = v1.outerProduct(v2);
    RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
    RealVector v_unitVector = v1.unitVector();
    RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
    try {
        v_null.unitVector();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    OpenMapRealVector v_unitize = v1.copy();
    v_unitize.unitize();
    try {
        v_null.unitize();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    RealVector v_projection = v1.projection(v2);
    double[]result_projection =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_2 = v1.projection(v2_t);
    double[]result_projection_2 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    
}

---
---
public void testBasicFunctions_catena_2() {
    OpenMapRealVector v1 = new OpenMapRealVector(vec1);
    OpenMapRealVector v2 = new OpenMapRealVector(vec2);
    OpenMapRealVector v5 = new OpenMapRealVector(vec5);
    OpenMapRealVector v_null = new OpenMapRealVector(vec_null);
    SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);
    double d_getNorm = v5.getNorm();
    double d_getL1Norm = v5.getL1Norm();
    double d_getLInfNorm = v5.getLInfNorm();
    assertEquals("compare values  ", 6.0, d_getLInfNorm);
    double dist = v1.getDistance(v2);
    double dist_2 = v1.getDistance(v2_t);
    double d_getL1Distance = v1.getL1Distance(v2);
    double d_getL1Distance_2 = v1.getL1Distance(v2_t);
    double d_getLInfDistance = v1.getLInfDistance(v2);
    double d_getLInfDistance_2 = v1.getLInfDistance(v2_t);
    OpenMapRealVector v_add = v1.add(v2);
    double[]result_add =  {
        5d, 7d, 9d
    };
    SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);
    RealVector v_add_i = v1.add(vt2);
    double[]result_add_i =  {
        5d, 7d, 9d
    };
    OpenMapRealVector v_subtract = v1.subtract(v2);
    double[]result_subtract =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_subtract_i = v1.subtract(vt2);
    double[]result_subtract_i =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_ebeMultiply = v1.ebeMultiply(v2);
    double[]result_ebeMultiply =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
    double[]result_ebeMultiply_2 =  {
        4d, 10d, 18d
    };
    RealVector v_ebeDivide = v1.ebeDivide(v2);
    double[]result_ebeDivide =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_2 = v1.ebeDivide(v2_t);
    double[]result_ebeDivide_2 =  {
        0.25d, 0.4d, 0.5d
    };
    double dot = v1.dotProduct(v2);
    double dot_2 = v1.dotProduct(v2_t);
    RealMatrix m_outerProduct = v1.outerProduct(v2);
    RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
    RealVector v_unitVector = v1.unitVector();
    RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
    try {
        v_null.unitVector();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    OpenMapRealVector v_unitize = v1.copy();
    v_unitize.unitize();
    try {
        v_null.unitize();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    RealVector v_projection = v1.projection(v2);
    double[]result_projection =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_2 = v1.projection(v2_t);
    double[]result_projection_2 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    
}

---
---
public void testBasicFunctions_catena_3() {
    OpenMapRealVector v1 = new OpenMapRealVector(vec1);
    OpenMapRealVector v2 = new OpenMapRealVector(vec2);
    OpenMapRealVector v5 = new OpenMapRealVector(vec5);
    OpenMapRealVector v_null = new OpenMapRealVector(vec_null);
    SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);
    double d_getNorm = v5.getNorm();
    double d_getL1Norm = v5.getL1Norm();
    double d_getLInfNorm = v5.getLInfNorm();
    double dist = v1.getDistance(v2);
    assertEquals("compare values  ", v1.subtract(v2).getNorm(), dist);
    double dist_2 = v1.getDistance(v2_t);
    double d_getL1Distance = v1.getL1Distance(v2);
    double d_getL1Distance_2 = v1.getL1Distance(v2_t);
    double d_getLInfDistance = v1.getLInfDistance(v2);
    double d_getLInfDistance_2 = v1.getLInfDistance(v2_t);
    OpenMapRealVector v_add = v1.add(v2);
    double[]result_add =  {
        5d, 7d, 9d
    };
    SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);
    RealVector v_add_i = v1.add(vt2);
    double[]result_add_i =  {
        5d, 7d, 9d
    };
    OpenMapRealVector v_subtract = v1.subtract(v2);
    double[]result_subtract =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_subtract_i = v1.subtract(vt2);
    double[]result_subtract_i =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_ebeMultiply = v1.ebeMultiply(v2);
    double[]result_ebeMultiply =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
    double[]result_ebeMultiply_2 =  {
        4d, 10d, 18d
    };
    RealVector v_ebeDivide = v1.ebeDivide(v2);
    double[]result_ebeDivide =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_2 = v1.ebeDivide(v2_t);
    double[]result_ebeDivide_2 =  {
        0.25d, 0.4d, 0.5d
    };
    double dot = v1.dotProduct(v2);
    double dot_2 = v1.dotProduct(v2_t);
    RealMatrix m_outerProduct = v1.outerProduct(v2);
    RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
    RealVector v_unitVector = v1.unitVector();
    RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
    try {
        v_null.unitVector();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    OpenMapRealVector v_unitize = v1.copy();
    v_unitize.unitize();
    try {
        v_null.unitize();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    RealVector v_projection = v1.projection(v2);
    double[]result_projection =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_2 = v1.projection(v2_t);
    double[]result_projection_2 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    
}

---
---
public void testBasicFunctions_catena_4() {
    OpenMapRealVector v1 = new OpenMapRealVector(vec1);
    OpenMapRealVector v2 = new OpenMapRealVector(vec2);
    OpenMapRealVector v5 = new OpenMapRealVector(vec5);
    OpenMapRealVector v_null = new OpenMapRealVector(vec_null);
    SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);
    double d_getNorm = v5.getNorm();
    double d_getL1Norm = v5.getL1Norm();
    double d_getLInfNorm = v5.getLInfNorm();
    double dist = v1.getDistance(v2);
    double dist_2 = v1.getDistance(v2_t);
    assertEquals("compare values  ", v1.subtract(v2).getNorm(), dist_2);
    double d_getL1Distance = v1.getL1Distance(v2);
    double d_getL1Distance_2 = v1.getL1Distance(v2_t);
    double d_getLInfDistance = v1.getLInfDistance(v2);
    double d_getLInfDistance_2 = v1.getLInfDistance(v2_t);
    OpenMapRealVector v_add = v1.add(v2);
    double[]result_add =  {
        5d, 7d, 9d
    };
    SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);
    RealVector v_add_i = v1.add(vt2);
    double[]result_add_i =  {
        5d, 7d, 9d
    };
    OpenMapRealVector v_subtract = v1.subtract(v2);
    double[]result_subtract =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_subtract_i = v1.subtract(vt2);
    double[]result_subtract_i =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_ebeMultiply = v1.ebeMultiply(v2);
    double[]result_ebeMultiply =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
    double[]result_ebeMultiply_2 =  {
        4d, 10d, 18d
    };
    RealVector v_ebeDivide = v1.ebeDivide(v2);
    double[]result_ebeDivide =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_2 = v1.ebeDivide(v2_t);
    double[]result_ebeDivide_2 =  {
        0.25d, 0.4d, 0.5d
    };
    double dot = v1.dotProduct(v2);
    double dot_2 = v1.dotProduct(v2_t);
    RealMatrix m_outerProduct = v1.outerProduct(v2);
    RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
    RealVector v_unitVector = v1.unitVector();
    RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
    try {
        v_null.unitVector();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    OpenMapRealVector v_unitize = v1.copy();
    v_unitize.unitize();
    try {
        v_null.unitize();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    RealVector v_projection = v1.projection(v2);
    double[]result_projection =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_2 = v1.projection(v2_t);
    double[]result_projection_2 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    
}

---
---
public void testBasicFunctions_catena_5() {
    OpenMapRealVector v1 = new OpenMapRealVector(vec1);
    OpenMapRealVector v2 = new OpenMapRealVector(vec2);
    OpenMapRealVector v5 = new OpenMapRealVector(vec5);
    OpenMapRealVector v_null = new OpenMapRealVector(vec_null);
    SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);
    double d_getNorm = v5.getNorm();
    double d_getL1Norm = v5.getL1Norm();
    double d_getLInfNorm = v5.getLInfNorm();
    double dist = v1.getDistance(v2);
    double dist_2 = v1.getDistance(v2_t);
    double d_getL1Distance = v1.getL1Distance(v2);
    assertEquals("compare values  ", 9d, d_getL1Distance);
    double d_getL1Distance_2 = v1.getL1Distance(v2_t);
    double d_getLInfDistance = v1.getLInfDistance(v2);
    double d_getLInfDistance_2 = v1.getLInfDistance(v2_t);
    OpenMapRealVector v_add = v1.add(v2);
    double[]result_add =  {
        5d, 7d, 9d
    };
    SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);
    RealVector v_add_i = v1.add(vt2);
    double[]result_add_i =  {
        5d, 7d, 9d
    };
    OpenMapRealVector v_subtract = v1.subtract(v2);
    double[]result_subtract =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_subtract_i = v1.subtract(vt2);
    double[]result_subtract_i =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_ebeMultiply = v1.ebeMultiply(v2);
    double[]result_ebeMultiply =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
    double[]result_ebeMultiply_2 =  {
        4d, 10d, 18d
    };
    RealVector v_ebeDivide = v1.ebeDivide(v2);
    double[]result_ebeDivide =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_2 = v1.ebeDivide(v2_t);
    double[]result_ebeDivide_2 =  {
        0.25d, 0.4d, 0.5d
    };
    double dot = v1.dotProduct(v2);
    double dot_2 = v1.dotProduct(v2_t);
    RealMatrix m_outerProduct = v1.outerProduct(v2);
    RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
    RealVector v_unitVector = v1.unitVector();
    RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
    try {
        v_null.unitVector();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    OpenMapRealVector v_unitize = v1.copy();
    v_unitize.unitize();
    try {
        v_null.unitize();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    RealVector v_projection = v1.projection(v2);
    double[]result_projection =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_2 = v1.projection(v2_t);
    double[]result_projection_2 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    
}

---
---
public void testBasicFunctions_catena_6() {
    OpenMapRealVector v1 = new OpenMapRealVector(vec1);
    OpenMapRealVector v2 = new OpenMapRealVector(vec2);
    OpenMapRealVector v5 = new OpenMapRealVector(vec5);
    OpenMapRealVector v_null = new OpenMapRealVector(vec_null);
    SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);
    double d_getNorm = v5.getNorm();
    double d_getL1Norm = v5.getL1Norm();
    double d_getLInfNorm = v5.getLInfNorm();
    double dist = v1.getDistance(v2);
    double dist_2 = v1.getDistance(v2_t);
    double d_getL1Distance = v1.getL1Distance(v2);
    double d_getL1Distance_2 = v1.getL1Distance(v2_t);
    assertEquals("compare values  ", 9d, d_getL1Distance_2);
    double d_getLInfDistance = v1.getLInfDistance(v2);
    double d_getLInfDistance_2 = v1.getLInfDistance(v2_t);
    OpenMapRealVector v_add = v1.add(v2);
    double[]result_add =  {
        5d, 7d, 9d
    };
    SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);
    RealVector v_add_i = v1.add(vt2);
    double[]result_add_i =  {
        5d, 7d, 9d
    };
    OpenMapRealVector v_subtract = v1.subtract(v2);
    double[]result_subtract =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_subtract_i = v1.subtract(vt2);
    double[]result_subtract_i =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_ebeMultiply = v1.ebeMultiply(v2);
    double[]result_ebeMultiply =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
    double[]result_ebeMultiply_2 =  {
        4d, 10d, 18d
    };
    RealVector v_ebeDivide = v1.ebeDivide(v2);
    double[]result_ebeDivide =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_2 = v1.ebeDivide(v2_t);
    double[]result_ebeDivide_2 =  {
        0.25d, 0.4d, 0.5d
    };
    double dot = v1.dotProduct(v2);
    double dot_2 = v1.dotProduct(v2_t);
    RealMatrix m_outerProduct = v1.outerProduct(v2);
    RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
    RealVector v_unitVector = v1.unitVector();
    RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
    try {
        v_null.unitVector();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    OpenMapRealVector v_unitize = v1.copy();
    v_unitize.unitize();
    try {
        v_null.unitize();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    RealVector v_projection = v1.projection(v2);
    double[]result_projection =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_2 = v1.projection(v2_t);
    double[]result_projection_2 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    
}

---
---
public void testBasicFunctions_catena_7() {
    OpenMapRealVector v1 = new OpenMapRealVector(vec1);
    OpenMapRealVector v2 = new OpenMapRealVector(vec2);
    OpenMapRealVector v5 = new OpenMapRealVector(vec5);
    OpenMapRealVector v_null = new OpenMapRealVector(vec_null);
    SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);
    double d_getNorm = v5.getNorm();
    double d_getL1Norm = v5.getL1Norm();
    double d_getLInfNorm = v5.getLInfNorm();
    double dist = v1.getDistance(v2);
    double dist_2 = v1.getDistance(v2_t);
    double d_getL1Distance = v1.getL1Distance(v2);
    double d_getL1Distance_2 = v1.getL1Distance(v2_t);
    double d_getLInfDistance = v1.getLInfDistance(v2);
    assertEquals("compare values  ", 3d, d_getLInfDistance);
    double d_getLInfDistance_2 = v1.getLInfDistance(v2_t);
    OpenMapRealVector v_add = v1.add(v2);
    double[]result_add =  {
        5d, 7d, 9d
    };
    SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);
    RealVector v_add_i = v1.add(vt2);
    double[]result_add_i =  {
        5d, 7d, 9d
    };
    OpenMapRealVector v_subtract = v1.subtract(v2);
    double[]result_subtract =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_subtract_i = v1.subtract(vt2);
    double[]result_subtract_i =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_ebeMultiply = v1.ebeMultiply(v2);
    double[]result_ebeMultiply =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
    double[]result_ebeMultiply_2 =  {
        4d, 10d, 18d
    };
    RealVector v_ebeDivide = v1.ebeDivide(v2);
    double[]result_ebeDivide =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_2 = v1.ebeDivide(v2_t);
    double[]result_ebeDivide_2 =  {
        0.25d, 0.4d, 0.5d
    };
    double dot = v1.dotProduct(v2);
    double dot_2 = v1.dotProduct(v2_t);
    RealMatrix m_outerProduct = v1.outerProduct(v2);
    RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
    RealVector v_unitVector = v1.unitVector();
    RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
    try {
        v_null.unitVector();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    OpenMapRealVector v_unitize = v1.copy();
    v_unitize.unitize();
    try {
        v_null.unitize();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    RealVector v_projection = v1.projection(v2);
    double[]result_projection =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_2 = v1.projection(v2_t);
    double[]result_projection_2 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    
}

---
---
public void testBasicFunctions_catena_8() {
    OpenMapRealVector v1 = new OpenMapRealVector(vec1);
    OpenMapRealVector v2 = new OpenMapRealVector(vec2);
    OpenMapRealVector v5 = new OpenMapRealVector(vec5);
    OpenMapRealVector v_null = new OpenMapRealVector(vec_null);
    SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);
    double d_getNorm = v5.getNorm();
    double d_getL1Norm = v5.getL1Norm();
    double d_getLInfNorm = v5.getLInfNorm();
    double dist = v1.getDistance(v2);
    double dist_2 = v1.getDistance(v2_t);
    double d_getL1Distance = v1.getL1Distance(v2);
    double d_getL1Distance_2 = v1.getL1Distance(v2_t);
    double d_getLInfDistance = v1.getLInfDistance(v2);
    double d_getLInfDistance_2 = v1.getLInfDistance(v2_t);
    assertEquals("compare values  ", 3d, d_getLInfDistance_2);
    OpenMapRealVector v_add = v1.add(v2);
    double[]result_add =  {
        5d, 7d, 9d
    };
    SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);
    RealVector v_add_i = v1.add(vt2);
    double[]result_add_i =  {
        5d, 7d, 9d
    };
    OpenMapRealVector v_subtract = v1.subtract(v2);
    double[]result_subtract =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_subtract_i = v1.subtract(vt2);
    double[]result_subtract_i =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_ebeMultiply = v1.ebeMultiply(v2);
    double[]result_ebeMultiply =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
    double[]result_ebeMultiply_2 =  {
        4d, 10d, 18d
    };
    RealVector v_ebeDivide = v1.ebeDivide(v2);
    double[]result_ebeDivide =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_2 = v1.ebeDivide(v2_t);
    double[]result_ebeDivide_2 =  {
        0.25d, 0.4d, 0.5d
    };
    double dot = v1.dotProduct(v2);
    double dot_2 = v1.dotProduct(v2_t);
    RealMatrix m_outerProduct = v1.outerProduct(v2);
    RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
    RealVector v_unitVector = v1.unitVector();
    RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
    try {
        v_null.unitVector();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    OpenMapRealVector v_unitize = v1.copy();
    v_unitize.unitize();
    try {
        v_null.unitize();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    RealVector v_projection = v1.projection(v2);
    double[]result_projection =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_2 = v1.projection(v2_t);
    double[]result_projection_2 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    
}

---
---
public void testBasicFunctions_catena_9() {
    OpenMapRealVector v1 = new OpenMapRealVector(vec1);
    OpenMapRealVector v2 = new OpenMapRealVector(vec2);
    OpenMapRealVector v5 = new OpenMapRealVector(vec5);
    OpenMapRealVector v_null = new OpenMapRealVector(vec_null);
    SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);
    double d_getNorm = v5.getNorm();
    double d_getL1Norm = v5.getL1Norm();
    double d_getLInfNorm = v5.getLInfNorm();
    double dist = v1.getDistance(v2);
    double dist_2 = v1.getDistance(v2_t);
    double d_getL1Distance = v1.getL1Distance(v2);
    double d_getL1Distance_2 = v1.getL1Distance(v2_t);
    double d_getLInfDistance = v1.getLInfDistance(v2);
    double d_getLInfDistance_2 = v1.getLInfDistance(v2_t);
    OpenMapRealVector v_add = v1.add(v2);
    double[]result_add =  {
        5d, 7d, 9d
    };
    assertClose("compare vect", v_add.getData(), result_add, normTolerance);
    SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);
    RealVector v_add_i = v1.add(vt2);
    double[]result_add_i =  {
        5d, 7d, 9d
    };
    OpenMapRealVector v_subtract = v1.subtract(v2);
    double[]result_subtract =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_subtract_i = v1.subtract(vt2);
    double[]result_subtract_i =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_ebeMultiply = v1.ebeMultiply(v2);
    double[]result_ebeMultiply =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
    double[]result_ebeMultiply_2 =  {
        4d, 10d, 18d
    };
    RealVector v_ebeDivide = v1.ebeDivide(v2);
    double[]result_ebeDivide =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_2 = v1.ebeDivide(v2_t);
    double[]result_ebeDivide_2 =  {
        0.25d, 0.4d, 0.5d
    };
    double dot = v1.dotProduct(v2);
    double dot_2 = v1.dotProduct(v2_t);
    RealMatrix m_outerProduct = v1.outerProduct(v2);
    RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
    RealVector v_unitVector = v1.unitVector();
    RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
    try {
        v_null.unitVector();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    OpenMapRealVector v_unitize = v1.copy();
    v_unitize.unitize();
    try {
        v_null.unitize();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    RealVector v_projection = v1.projection(v2);
    double[]result_projection =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_2 = v1.projection(v2_t);
    double[]result_projection_2 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    
}

---
---
public void testBasicFunctions_catena_10() {
    OpenMapRealVector v1 = new OpenMapRealVector(vec1);
    OpenMapRealVector v2 = new OpenMapRealVector(vec2);
    OpenMapRealVector v5 = new OpenMapRealVector(vec5);
    OpenMapRealVector v_null = new OpenMapRealVector(vec_null);
    SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);
    double d_getNorm = v5.getNorm();
    double d_getL1Norm = v5.getL1Norm();
    double d_getLInfNorm = v5.getLInfNorm();
    double dist = v1.getDistance(v2);
    double dist_2 = v1.getDistance(v2_t);
    double d_getL1Distance = v1.getL1Distance(v2);
    double d_getL1Distance_2 = v1.getL1Distance(v2_t);
    double d_getLInfDistance = v1.getLInfDistance(v2);
    double d_getLInfDistance_2 = v1.getLInfDistance(v2_t);
    OpenMapRealVector v_add = v1.add(v2);
    double[]result_add =  {
        5d, 7d, 9d
    };
    SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);
    RealVector v_add_i = v1.add(vt2);
    double[]result_add_i =  {
        5d, 7d, 9d
    };
    assertClose("compare vect", v_add_i.getData(), result_add_i, normTolerance);
    OpenMapRealVector v_subtract = v1.subtract(v2);
    double[]result_subtract =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_subtract_i = v1.subtract(vt2);
    double[]result_subtract_i =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_ebeMultiply = v1.ebeMultiply(v2);
    double[]result_ebeMultiply =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
    double[]result_ebeMultiply_2 =  {
        4d, 10d, 18d
    };
    RealVector v_ebeDivide = v1.ebeDivide(v2);
    double[]result_ebeDivide =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_2 = v1.ebeDivide(v2_t);
    double[]result_ebeDivide_2 =  {
        0.25d, 0.4d, 0.5d
    };
    double dot = v1.dotProduct(v2);
    double dot_2 = v1.dotProduct(v2_t);
    RealMatrix m_outerProduct = v1.outerProduct(v2);
    RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
    RealVector v_unitVector = v1.unitVector();
    RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
    try {
        v_null.unitVector();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    OpenMapRealVector v_unitize = v1.copy();
    v_unitize.unitize();
    try {
        v_null.unitize();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    RealVector v_projection = v1.projection(v2);
    double[]result_projection =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_2 = v1.projection(v2_t);
    double[]result_projection_2 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    
}

---
---
public void testBasicFunctions_catena_11() {
    OpenMapRealVector v1 = new OpenMapRealVector(vec1);
    OpenMapRealVector v2 = new OpenMapRealVector(vec2);
    OpenMapRealVector v5 = new OpenMapRealVector(vec5);
    OpenMapRealVector v_null = new OpenMapRealVector(vec_null);
    SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);
    double d_getNorm = v5.getNorm();
    double d_getL1Norm = v5.getL1Norm();
    double d_getLInfNorm = v5.getLInfNorm();
    double dist = v1.getDistance(v2);
    double dist_2 = v1.getDistance(v2_t);
    double d_getL1Distance = v1.getL1Distance(v2);
    double d_getL1Distance_2 = v1.getL1Distance(v2_t);
    double d_getLInfDistance = v1.getLInfDistance(v2);
    double d_getLInfDistance_2 = v1.getLInfDistance(v2_t);
    OpenMapRealVector v_add = v1.add(v2);
    double[]result_add =  {
        5d, 7d, 9d
    };
    SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);
    RealVector v_add_i = v1.add(vt2);
    double[]result_add_i =  {
        5d, 7d, 9d
    };
    OpenMapRealVector v_subtract = v1.subtract(v2);
    double[]result_subtract =  {
         - 3d,  - 3d,  - 3d
    };
    assertClose("compare vect", v_subtract.getData(), result_subtract, normTolerance);
    RealVector v_subtract_i = v1.subtract(vt2);
    double[]result_subtract_i =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_ebeMultiply = v1.ebeMultiply(v2);
    double[]result_ebeMultiply =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
    double[]result_ebeMultiply_2 =  {
        4d, 10d, 18d
    };
    RealVector v_ebeDivide = v1.ebeDivide(v2);
    double[]result_ebeDivide =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_2 = v1.ebeDivide(v2_t);
    double[]result_ebeDivide_2 =  {
        0.25d, 0.4d, 0.5d
    };
    double dot = v1.dotProduct(v2);
    double dot_2 = v1.dotProduct(v2_t);
    RealMatrix m_outerProduct = v1.outerProduct(v2);
    RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
    RealVector v_unitVector = v1.unitVector();
    RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
    try {
        v_null.unitVector();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    OpenMapRealVector v_unitize = v1.copy();
    v_unitize.unitize();
    try {
        v_null.unitize();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    RealVector v_projection = v1.projection(v2);
    double[]result_projection =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_2 = v1.projection(v2_t);
    double[]result_projection_2 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    
}

---
---
public void testBasicFunctions_catena_12() {
    OpenMapRealVector v1 = new OpenMapRealVector(vec1);
    OpenMapRealVector v2 = new OpenMapRealVector(vec2);
    OpenMapRealVector v5 = new OpenMapRealVector(vec5);
    OpenMapRealVector v_null = new OpenMapRealVector(vec_null);
    SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);
    double d_getNorm = v5.getNorm();
    double d_getL1Norm = v5.getL1Norm();
    double d_getLInfNorm = v5.getLInfNorm();
    double dist = v1.getDistance(v2);
    double dist_2 = v1.getDistance(v2_t);
    double d_getL1Distance = v1.getL1Distance(v2);
    double d_getL1Distance_2 = v1.getL1Distance(v2_t);
    double d_getLInfDistance = v1.getLInfDistance(v2);
    double d_getLInfDistance_2 = v1.getLInfDistance(v2_t);
    OpenMapRealVector v_add = v1.add(v2);
    double[]result_add =  {
        5d, 7d, 9d
    };
    SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);
    RealVector v_add_i = v1.add(vt2);
    double[]result_add_i =  {
        5d, 7d, 9d
    };
    OpenMapRealVector v_subtract = v1.subtract(v2);
    double[]result_subtract =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_subtract_i = v1.subtract(vt2);
    double[]result_subtract_i =  {
         - 3d,  - 3d,  - 3d
    };
    assertClose("compare vect", v_subtract_i.getData(), result_subtract_i, normTolerance);
    RealVector v_ebeMultiply = v1.ebeMultiply(v2);
    double[]result_ebeMultiply =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
    double[]result_ebeMultiply_2 =  {
        4d, 10d, 18d
    };
    RealVector v_ebeDivide = v1.ebeDivide(v2);
    double[]result_ebeDivide =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_2 = v1.ebeDivide(v2_t);
    double[]result_ebeDivide_2 =  {
        0.25d, 0.4d, 0.5d
    };
    double dot = v1.dotProduct(v2);
    double dot_2 = v1.dotProduct(v2_t);
    RealMatrix m_outerProduct = v1.outerProduct(v2);
    RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
    RealVector v_unitVector = v1.unitVector();
    RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
    try {
        v_null.unitVector();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    OpenMapRealVector v_unitize = v1.copy();
    v_unitize.unitize();
    try {
        v_null.unitize();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    RealVector v_projection = v1.projection(v2);
    double[]result_projection =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_2 = v1.projection(v2_t);
    double[]result_projection_2 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    
}

---
---
public void testBasicFunctions_catena_13() {
    OpenMapRealVector v1 = new OpenMapRealVector(vec1);
    OpenMapRealVector v2 = new OpenMapRealVector(vec2);
    OpenMapRealVector v5 = new OpenMapRealVector(vec5);
    OpenMapRealVector v_null = new OpenMapRealVector(vec_null);
    SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);
    double d_getNorm = v5.getNorm();
    double d_getL1Norm = v5.getL1Norm();
    double d_getLInfNorm = v5.getLInfNorm();
    double dist = v1.getDistance(v2);
    double dist_2 = v1.getDistance(v2_t);
    double d_getL1Distance = v1.getL1Distance(v2);
    double d_getL1Distance_2 = v1.getL1Distance(v2_t);
    double d_getLInfDistance = v1.getLInfDistance(v2);
    double d_getLInfDistance_2 = v1.getLInfDistance(v2_t);
    OpenMapRealVector v_add = v1.add(v2);
    double[]result_add =  {
        5d, 7d, 9d
    };
    SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);
    RealVector v_add_i = v1.add(vt2);
    double[]result_add_i =  {
        5d, 7d, 9d
    };
    OpenMapRealVector v_subtract = v1.subtract(v2);
    double[]result_subtract =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_subtract_i = v1.subtract(vt2);
    double[]result_subtract_i =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_ebeMultiply = v1.ebeMultiply(v2);
    double[]result_ebeMultiply =  {
        4d, 10d, 18d
    };
    assertClose("compare vect", v_ebeMultiply.getData(), result_ebeMultiply, normTolerance);
    RealVector v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
    double[]result_ebeMultiply_2 =  {
        4d, 10d, 18d
    };
    RealVector v_ebeDivide = v1.ebeDivide(v2);
    double[]result_ebeDivide =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_2 = v1.ebeDivide(v2_t);
    double[]result_ebeDivide_2 =  {
        0.25d, 0.4d, 0.5d
    };
    double dot = v1.dotProduct(v2);
    double dot_2 = v1.dotProduct(v2_t);
    RealMatrix m_outerProduct = v1.outerProduct(v2);
    RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
    RealVector v_unitVector = v1.unitVector();
    RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
    try {
        v_null.unitVector();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    OpenMapRealVector v_unitize = v1.copy();
    v_unitize.unitize();
    try {
        v_null.unitize();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    RealVector v_projection = v1.projection(v2);
    double[]result_projection =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_2 = v1.projection(v2_t);
    double[]result_projection_2 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    
}

---
---
public void testBasicFunctions_catena_14() {
    OpenMapRealVector v1 = new OpenMapRealVector(vec1);
    OpenMapRealVector v2 = new OpenMapRealVector(vec2);
    OpenMapRealVector v5 = new OpenMapRealVector(vec5);
    OpenMapRealVector v_null = new OpenMapRealVector(vec_null);
    SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);
    double d_getNorm = v5.getNorm();
    double d_getL1Norm = v5.getL1Norm();
    double d_getLInfNorm = v5.getLInfNorm();
    double dist = v1.getDistance(v2);
    double dist_2 = v1.getDistance(v2_t);
    double d_getL1Distance = v1.getL1Distance(v2);
    double d_getL1Distance_2 = v1.getL1Distance(v2_t);
    double d_getLInfDistance = v1.getLInfDistance(v2);
    double d_getLInfDistance_2 = v1.getLInfDistance(v2_t);
    OpenMapRealVector v_add = v1.add(v2);
    double[]result_add =  {
        5d, 7d, 9d
    };
    SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);
    RealVector v_add_i = v1.add(vt2);
    double[]result_add_i =  {
        5d, 7d, 9d
    };
    OpenMapRealVector v_subtract = v1.subtract(v2);
    double[]result_subtract =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_subtract_i = v1.subtract(vt2);
    double[]result_subtract_i =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_ebeMultiply = v1.ebeMultiply(v2);
    double[]result_ebeMultiply =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
    double[]result_ebeMultiply_2 =  {
        4d, 10d, 18d
    };
    assertClose("compare vect", v_ebeMultiply_2.getData(), result_ebeMultiply_2, normTolerance);
    RealVector v_ebeDivide = v1.ebeDivide(v2);
    double[]result_ebeDivide =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_2 = v1.ebeDivide(v2_t);
    double[]result_ebeDivide_2 =  {
        0.25d, 0.4d, 0.5d
    };
    double dot = v1.dotProduct(v2);
    double dot_2 = v1.dotProduct(v2_t);
    RealMatrix m_outerProduct = v1.outerProduct(v2);
    RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
    RealVector v_unitVector = v1.unitVector();
    RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
    try {
        v_null.unitVector();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    OpenMapRealVector v_unitize = v1.copy();
    v_unitize.unitize();
    try {
        v_null.unitize();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    RealVector v_projection = v1.projection(v2);
    double[]result_projection =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_2 = v1.projection(v2_t);
    double[]result_projection_2 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    
}

---
---
public void testBasicFunctions_catena_15() {
    OpenMapRealVector v1 = new OpenMapRealVector(vec1);
    OpenMapRealVector v2 = new OpenMapRealVector(vec2);
    OpenMapRealVector v5 = new OpenMapRealVector(vec5);
    OpenMapRealVector v_null = new OpenMapRealVector(vec_null);
    SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);
    double d_getNorm = v5.getNorm();
    double d_getL1Norm = v5.getL1Norm();
    double d_getLInfNorm = v5.getLInfNorm();
    double dist = v1.getDistance(v2);
    double dist_2 = v1.getDistance(v2_t);
    double d_getL1Distance = v1.getL1Distance(v2);
    double d_getL1Distance_2 = v1.getL1Distance(v2_t);
    double d_getLInfDistance = v1.getLInfDistance(v2);
    double d_getLInfDistance_2 = v1.getLInfDistance(v2_t);
    OpenMapRealVector v_add = v1.add(v2);
    double[]result_add =  {
        5d, 7d, 9d
    };
    SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);
    RealVector v_add_i = v1.add(vt2);
    double[]result_add_i =  {
        5d, 7d, 9d
    };
    OpenMapRealVector v_subtract = v1.subtract(v2);
    double[]result_subtract =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_subtract_i = v1.subtract(vt2);
    double[]result_subtract_i =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_ebeMultiply = v1.ebeMultiply(v2);
    double[]result_ebeMultiply =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
    double[]result_ebeMultiply_2 =  {
        4d, 10d, 18d
    };
    RealVector v_ebeDivide = v1.ebeDivide(v2);
    double[]result_ebeDivide =  {
        0.25d, 0.4d, 0.5d
    };
    assertClose("compare vect", v_ebeDivide.getData(), result_ebeDivide, normTolerance);
    RealVector v_ebeDivide_2 = v1.ebeDivide(v2_t);
    double[]result_ebeDivide_2 =  {
        0.25d, 0.4d, 0.5d
    };
    double dot = v1.dotProduct(v2);
    double dot_2 = v1.dotProduct(v2_t);
    RealMatrix m_outerProduct = v1.outerProduct(v2);
    RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
    RealVector v_unitVector = v1.unitVector();
    RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
    try {
        v_null.unitVector();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    OpenMapRealVector v_unitize = v1.copy();
    v_unitize.unitize();
    try {
        v_null.unitize();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    RealVector v_projection = v1.projection(v2);
    double[]result_projection =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_2 = v1.projection(v2_t);
    double[]result_projection_2 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    
}

---
---
public void testBasicFunctions_catena_16() {
    OpenMapRealVector v1 = new OpenMapRealVector(vec1);
    OpenMapRealVector v2 = new OpenMapRealVector(vec2);
    OpenMapRealVector v5 = new OpenMapRealVector(vec5);
    OpenMapRealVector v_null = new OpenMapRealVector(vec_null);
    SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);
    double d_getNorm = v5.getNorm();
    double d_getL1Norm = v5.getL1Norm();
    double d_getLInfNorm = v5.getLInfNorm();
    double dist = v1.getDistance(v2);
    double dist_2 = v1.getDistance(v2_t);
    double d_getL1Distance = v1.getL1Distance(v2);
    double d_getL1Distance_2 = v1.getL1Distance(v2_t);
    double d_getLInfDistance = v1.getLInfDistance(v2);
    double d_getLInfDistance_2 = v1.getLInfDistance(v2_t);
    OpenMapRealVector v_add = v1.add(v2);
    double[]result_add =  {
        5d, 7d, 9d
    };
    SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);
    RealVector v_add_i = v1.add(vt2);
    double[]result_add_i =  {
        5d, 7d, 9d
    };
    OpenMapRealVector v_subtract = v1.subtract(v2);
    double[]result_subtract =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_subtract_i = v1.subtract(vt2);
    double[]result_subtract_i =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_ebeMultiply = v1.ebeMultiply(v2);
    double[]result_ebeMultiply =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
    double[]result_ebeMultiply_2 =  {
        4d, 10d, 18d
    };
    RealVector v_ebeDivide = v1.ebeDivide(v2);
    double[]result_ebeDivide =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_2 = v1.ebeDivide(v2_t);
    double[]result_ebeDivide_2 =  {
        0.25d, 0.4d, 0.5d
    };
    assertClose("compare vect", v_ebeDivide_2.getData(), result_ebeDivide_2, normTolerance);
    double dot = v1.dotProduct(v2);
    double dot_2 = v1.dotProduct(v2_t);
    RealMatrix m_outerProduct = v1.outerProduct(v2);
    RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
    RealVector v_unitVector = v1.unitVector();
    RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
    try {
        v_null.unitVector();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    OpenMapRealVector v_unitize = v1.copy();
    v_unitize.unitize();
    try {
        v_null.unitize();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    RealVector v_projection = v1.projection(v2);
    double[]result_projection =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_2 = v1.projection(v2_t);
    double[]result_projection_2 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    
}

---
---
public void testBasicFunctions_catena_17() {
    OpenMapRealVector v1 = new OpenMapRealVector(vec1);
    OpenMapRealVector v2 = new OpenMapRealVector(vec2);
    OpenMapRealVector v5 = new OpenMapRealVector(vec5);
    OpenMapRealVector v_null = new OpenMapRealVector(vec_null);
    SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);
    double d_getNorm = v5.getNorm();
    double d_getL1Norm = v5.getL1Norm();
    double d_getLInfNorm = v5.getLInfNorm();
    double dist = v1.getDistance(v2);
    double dist_2 = v1.getDistance(v2_t);
    double d_getL1Distance = v1.getL1Distance(v2);
    double d_getL1Distance_2 = v1.getL1Distance(v2_t);
    double d_getLInfDistance = v1.getLInfDistance(v2);
    double d_getLInfDistance_2 = v1.getLInfDistance(v2_t);
    OpenMapRealVector v_add = v1.add(v2);
    double[]result_add =  {
        5d, 7d, 9d
    };
    SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);
    RealVector v_add_i = v1.add(vt2);
    double[]result_add_i =  {
        5d, 7d, 9d
    };
    OpenMapRealVector v_subtract = v1.subtract(v2);
    double[]result_subtract =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_subtract_i = v1.subtract(vt2);
    double[]result_subtract_i =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_ebeMultiply = v1.ebeMultiply(v2);
    double[]result_ebeMultiply =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
    double[]result_ebeMultiply_2 =  {
        4d, 10d, 18d
    };
    RealVector v_ebeDivide = v1.ebeDivide(v2);
    double[]result_ebeDivide =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_2 = v1.ebeDivide(v2_t);
    double[]result_ebeDivide_2 =  {
        0.25d, 0.4d, 0.5d
    };
    double dot = v1.dotProduct(v2);
    assertEquals("compare val ", 32d, dot);
    double dot_2 = v1.dotProduct(v2_t);
    RealMatrix m_outerProduct = v1.outerProduct(v2);
    RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
    RealVector v_unitVector = v1.unitVector();
    RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
    try {
        v_null.unitVector();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    OpenMapRealVector v_unitize = v1.copy();
    v_unitize.unitize();
    try {
        v_null.unitize();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    RealVector v_projection = v1.projection(v2);
    double[]result_projection =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_2 = v1.projection(v2_t);
    double[]result_projection_2 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    
}

---
---
public void testBasicFunctions_catena_18() {
    OpenMapRealVector v1 = new OpenMapRealVector(vec1);
    OpenMapRealVector v2 = new OpenMapRealVector(vec2);
    OpenMapRealVector v5 = new OpenMapRealVector(vec5);
    OpenMapRealVector v_null = new OpenMapRealVector(vec_null);
    SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);
    double d_getNorm = v5.getNorm();
    double d_getL1Norm = v5.getL1Norm();
    double d_getLInfNorm = v5.getLInfNorm();
    double dist = v1.getDistance(v2);
    double dist_2 = v1.getDistance(v2_t);
    double d_getL1Distance = v1.getL1Distance(v2);
    double d_getL1Distance_2 = v1.getL1Distance(v2_t);
    double d_getLInfDistance = v1.getLInfDistance(v2);
    double d_getLInfDistance_2 = v1.getLInfDistance(v2_t);
    OpenMapRealVector v_add = v1.add(v2);
    double[]result_add =  {
        5d, 7d, 9d
    };
    SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);
    RealVector v_add_i = v1.add(vt2);
    double[]result_add_i =  {
        5d, 7d, 9d
    };
    OpenMapRealVector v_subtract = v1.subtract(v2);
    double[]result_subtract =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_subtract_i = v1.subtract(vt2);
    double[]result_subtract_i =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_ebeMultiply = v1.ebeMultiply(v2);
    double[]result_ebeMultiply =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
    double[]result_ebeMultiply_2 =  {
        4d, 10d, 18d
    };
    RealVector v_ebeDivide = v1.ebeDivide(v2);
    double[]result_ebeDivide =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_2 = v1.ebeDivide(v2_t);
    double[]result_ebeDivide_2 =  {
        0.25d, 0.4d, 0.5d
    };
    double dot = v1.dotProduct(v2);
    double dot_2 = v1.dotProduct(v2_t);
    assertEquals("compare val ", 32d, dot_2);
    RealMatrix m_outerProduct = v1.outerProduct(v2);
    RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
    RealVector v_unitVector = v1.unitVector();
    RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
    try {
        v_null.unitVector();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    OpenMapRealVector v_unitize = v1.copy();
    v_unitize.unitize();
    try {
        v_null.unitize();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    RealVector v_projection = v1.projection(v2);
    double[]result_projection =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_2 = v1.projection(v2_t);
    double[]result_projection_2 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    
}

---
---
public void testBasicFunctions_catena_19() {
    OpenMapRealVector v1 = new OpenMapRealVector(vec1);
    OpenMapRealVector v2 = new OpenMapRealVector(vec2);
    OpenMapRealVector v5 = new OpenMapRealVector(vec5);
    OpenMapRealVector v_null = new OpenMapRealVector(vec_null);
    SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);
    double d_getNorm = v5.getNorm();
    double d_getL1Norm = v5.getL1Norm();
    double d_getLInfNorm = v5.getLInfNorm();
    double dist = v1.getDistance(v2);
    double dist_2 = v1.getDistance(v2_t);
    double d_getL1Distance = v1.getL1Distance(v2);
    double d_getL1Distance_2 = v1.getL1Distance(v2_t);
    double d_getLInfDistance = v1.getLInfDistance(v2);
    double d_getLInfDistance_2 = v1.getLInfDistance(v2_t);
    OpenMapRealVector v_add = v1.add(v2);
    double[]result_add =  {
        5d, 7d, 9d
    };
    SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);
    RealVector v_add_i = v1.add(vt2);
    double[]result_add_i =  {
        5d, 7d, 9d
    };
    OpenMapRealVector v_subtract = v1.subtract(v2);
    double[]result_subtract =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_subtract_i = v1.subtract(vt2);
    double[]result_subtract_i =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_ebeMultiply = v1.ebeMultiply(v2);
    double[]result_ebeMultiply =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
    double[]result_ebeMultiply_2 =  {
        4d, 10d, 18d
    };
    RealVector v_ebeDivide = v1.ebeDivide(v2);
    double[]result_ebeDivide =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_2 = v1.ebeDivide(v2_t);
    double[]result_ebeDivide_2 =  {
        0.25d, 0.4d, 0.5d
    };
    double dot = v1.dotProduct(v2);
    double dot_2 = v1.dotProduct(v2_t);
    RealMatrix m_outerProduct = v1.outerProduct(v2);
    assertEquals("compare val ", 4d, m_outerProduct.getEntry(0, 0));
    RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
    RealVector v_unitVector = v1.unitVector();
    RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
    try {
        v_null.unitVector();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    OpenMapRealVector v_unitize = v1.copy();
    v_unitize.unitize();
    try {
        v_null.unitize();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    RealVector v_projection = v1.projection(v2);
    double[]result_projection =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_2 = v1.projection(v2_t);
    double[]result_projection_2 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    
}

---
---
public void testBasicFunctions_catena_20() {
    OpenMapRealVector v1 = new OpenMapRealVector(vec1);
    OpenMapRealVector v2 = new OpenMapRealVector(vec2);
    OpenMapRealVector v5 = new OpenMapRealVector(vec5);
    OpenMapRealVector v_null = new OpenMapRealVector(vec_null);
    SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);
    double d_getNorm = v5.getNorm();
    double d_getL1Norm = v5.getL1Norm();
    double d_getLInfNorm = v5.getLInfNorm();
    double dist = v1.getDistance(v2);
    double dist_2 = v1.getDistance(v2_t);
    double d_getL1Distance = v1.getL1Distance(v2);
    double d_getL1Distance_2 = v1.getL1Distance(v2_t);
    double d_getLInfDistance = v1.getLInfDistance(v2);
    double d_getLInfDistance_2 = v1.getLInfDistance(v2_t);
    OpenMapRealVector v_add = v1.add(v2);
    double[]result_add =  {
        5d, 7d, 9d
    };
    SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);
    RealVector v_add_i = v1.add(vt2);
    double[]result_add_i =  {
        5d, 7d, 9d
    };
    OpenMapRealVector v_subtract = v1.subtract(v2);
    double[]result_subtract =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_subtract_i = v1.subtract(vt2);
    double[]result_subtract_i =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_ebeMultiply = v1.ebeMultiply(v2);
    double[]result_ebeMultiply =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
    double[]result_ebeMultiply_2 =  {
        4d, 10d, 18d
    };
    RealVector v_ebeDivide = v1.ebeDivide(v2);
    double[]result_ebeDivide =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_2 = v1.ebeDivide(v2_t);
    double[]result_ebeDivide_2 =  {
        0.25d, 0.4d, 0.5d
    };
    double dot = v1.dotProduct(v2);
    double dot_2 = v1.dotProduct(v2_t);
    RealMatrix m_outerProduct = v1.outerProduct(v2);
    RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
    assertEquals("compare val ", 4d, m_outerProduct_2.getEntry(0, 0));
    RealVector v_unitVector = v1.unitVector();
    RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
    try {
        v_null.unitVector();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    OpenMapRealVector v_unitize = v1.copy();
    v_unitize.unitize();
    try {
        v_null.unitize();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    RealVector v_projection = v1.projection(v2);
    double[]result_projection =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_2 = v1.projection(v2_t);
    double[]result_projection_2 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    
}

---
---
public void testBasicFunctions_catena_21() {
    OpenMapRealVector v1 = new OpenMapRealVector(vec1);
    OpenMapRealVector v2 = new OpenMapRealVector(vec2);
    OpenMapRealVector v5 = new OpenMapRealVector(vec5);
    OpenMapRealVector v_null = new OpenMapRealVector(vec_null);
    SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);
    double d_getNorm = v5.getNorm();
    double d_getL1Norm = v5.getL1Norm();
    double d_getLInfNorm = v5.getLInfNorm();
    double dist = v1.getDistance(v2);
    double dist_2 = v1.getDistance(v2_t);
    double d_getL1Distance = v1.getL1Distance(v2);
    double d_getL1Distance_2 = v1.getL1Distance(v2_t);
    double d_getLInfDistance = v1.getLInfDistance(v2);
    double d_getLInfDistance_2 = v1.getLInfDistance(v2_t);
    OpenMapRealVector v_add = v1.add(v2);
    double[]result_add =  {
        5d, 7d, 9d
    };
    SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);
    RealVector v_add_i = v1.add(vt2);
    double[]result_add_i =  {
        5d, 7d, 9d
    };
    OpenMapRealVector v_subtract = v1.subtract(v2);
    double[]result_subtract =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_subtract_i = v1.subtract(vt2);
    double[]result_subtract_i =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_ebeMultiply = v1.ebeMultiply(v2);
    double[]result_ebeMultiply =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
    double[]result_ebeMultiply_2 =  {
        4d, 10d, 18d
    };
    RealVector v_ebeDivide = v1.ebeDivide(v2);
    double[]result_ebeDivide =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_2 = v1.ebeDivide(v2_t);
    double[]result_ebeDivide_2 =  {
        0.25d, 0.4d, 0.5d
    };
    double dot = v1.dotProduct(v2);
    double dot_2 = v1.dotProduct(v2_t);
    RealMatrix m_outerProduct = v1.outerProduct(v2);
    RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
    RealVector v_unitVector = v1.unitVector();
    RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
    assertClose("compare vect", v_unitVector.getData(), v_unitVector_2.getData(), normTolerance);
    try {
        v_null.unitVector();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    OpenMapRealVector v_unitize = v1.copy();
    v_unitize.unitize();
    try {
        v_null.unitize();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    RealVector v_projection = v1.projection(v2);
    double[]result_projection =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_2 = v1.projection(v2_t);
    double[]result_projection_2 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    
}

---
---
public void testBasicFunctions_catena_22() {
    OpenMapRealVector v1 = new OpenMapRealVector(vec1);
    OpenMapRealVector v2 = new OpenMapRealVector(vec2);
    OpenMapRealVector v5 = new OpenMapRealVector(vec5);
    OpenMapRealVector v_null = new OpenMapRealVector(vec_null);
    SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);
    double d_getNorm = v5.getNorm();
    double d_getL1Norm = v5.getL1Norm();
    double d_getLInfNorm = v5.getLInfNorm();
    double dist = v1.getDistance(v2);
    double dist_2 = v1.getDistance(v2_t);
    double d_getL1Distance = v1.getL1Distance(v2);
    double d_getL1Distance_2 = v1.getL1Distance(v2_t);
    double d_getLInfDistance = v1.getLInfDistance(v2);
    double d_getLInfDistance_2 = v1.getLInfDistance(v2_t);
    OpenMapRealVector v_add = v1.add(v2);
    double[]result_add =  {
        5d, 7d, 9d
    };
    SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);
    RealVector v_add_i = v1.add(vt2);
    double[]result_add_i =  {
        5d, 7d, 9d
    };
    OpenMapRealVector v_subtract = v1.subtract(v2);
    double[]result_subtract =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_subtract_i = v1.subtract(vt2);
    double[]result_subtract_i =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_ebeMultiply = v1.ebeMultiply(v2);
    double[]result_ebeMultiply =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
    double[]result_ebeMultiply_2 =  {
        4d, 10d, 18d
    };
    RealVector v_ebeDivide = v1.ebeDivide(v2);
    double[]result_ebeDivide =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_2 = v1.ebeDivide(v2_t);
    double[]result_ebeDivide_2 =  {
        0.25d, 0.4d, 0.5d
    };
    double dot = v1.dotProduct(v2);
    double dot_2 = v1.dotProduct(v2_t);
    RealMatrix m_outerProduct = v1.outerProduct(v2);
    RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
    RealVector v_unitVector = v1.unitVector();
    RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
    try {
        v_null.unitVector();
        fail("Expecting ArithmeticException");
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    OpenMapRealVector v_unitize = v1.copy();
    v_unitize.unitize();
    try {
        v_null.unitize();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    RealVector v_projection = v1.projection(v2);
    double[]result_projection =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_2 = v1.projection(v2_t);
    double[]result_projection_2 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    
}

---
---
public void testBasicFunctions_catena_23() {
    OpenMapRealVector v1 = new OpenMapRealVector(vec1);
    OpenMapRealVector v2 = new OpenMapRealVector(vec2);
    OpenMapRealVector v5 = new OpenMapRealVector(vec5);
    OpenMapRealVector v_null = new OpenMapRealVector(vec_null);
    SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);
    double d_getNorm = v5.getNorm();
    double d_getL1Norm = v5.getL1Norm();
    double d_getLInfNorm = v5.getLInfNorm();
    double dist = v1.getDistance(v2);
    double dist_2 = v1.getDistance(v2_t);
    double d_getL1Distance = v1.getL1Distance(v2);
    double d_getL1Distance_2 = v1.getL1Distance(v2_t);
    double d_getLInfDistance = v1.getLInfDistance(v2);
    double d_getLInfDistance_2 = v1.getLInfDistance(v2_t);
    OpenMapRealVector v_add = v1.add(v2);
    double[]result_add =  {
        5d, 7d, 9d
    };
    SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);
    RealVector v_add_i = v1.add(vt2);
    double[]result_add_i =  {
        5d, 7d, 9d
    };
    OpenMapRealVector v_subtract = v1.subtract(v2);
    double[]result_subtract =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_subtract_i = v1.subtract(vt2);
    double[]result_subtract_i =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_ebeMultiply = v1.ebeMultiply(v2);
    double[]result_ebeMultiply =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
    double[]result_ebeMultiply_2 =  {
        4d, 10d, 18d
    };
    RealVector v_ebeDivide = v1.ebeDivide(v2);
    double[]result_ebeDivide =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_2 = v1.ebeDivide(v2_t);
    double[]result_ebeDivide_2 =  {
        0.25d, 0.4d, 0.5d
    };
    double dot = v1.dotProduct(v2);
    double dot_2 = v1.dotProduct(v2_t);
    RealMatrix m_outerProduct = v1.outerProduct(v2);
    RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
    RealVector v_unitVector = v1.unitVector();
    RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
    try {
        v_null.unitVector();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        fail("wrong exception caught");
        
    }
    OpenMapRealVector v_unitize = v1.copy();
    v_unitize.unitize();
    try {
        v_null.unitize();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    RealVector v_projection = v1.projection(v2);
    double[]result_projection =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_2 = v1.projection(v2_t);
    double[]result_projection_2 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    
}

---
---
public void testBasicFunctions_catena_24() {
    OpenMapRealVector v1 = new OpenMapRealVector(vec1);
    OpenMapRealVector v2 = new OpenMapRealVector(vec2);
    OpenMapRealVector v5 = new OpenMapRealVector(vec5);
    OpenMapRealVector v_null = new OpenMapRealVector(vec_null);
    SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);
    double d_getNorm = v5.getNorm();
    double d_getL1Norm = v5.getL1Norm();
    double d_getLInfNorm = v5.getLInfNorm();
    double dist = v1.getDistance(v2);
    double dist_2 = v1.getDistance(v2_t);
    double d_getL1Distance = v1.getL1Distance(v2);
    double d_getL1Distance_2 = v1.getL1Distance(v2_t);
    double d_getLInfDistance = v1.getLInfDistance(v2);
    double d_getLInfDistance_2 = v1.getLInfDistance(v2_t);
    OpenMapRealVector v_add = v1.add(v2);
    double[]result_add =  {
        5d, 7d, 9d
    };
    SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);
    RealVector v_add_i = v1.add(vt2);
    double[]result_add_i =  {
        5d, 7d, 9d
    };
    OpenMapRealVector v_subtract = v1.subtract(v2);
    double[]result_subtract =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_subtract_i = v1.subtract(vt2);
    double[]result_subtract_i =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_ebeMultiply = v1.ebeMultiply(v2);
    double[]result_ebeMultiply =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
    double[]result_ebeMultiply_2 =  {
        4d, 10d, 18d
    };
    RealVector v_ebeDivide = v1.ebeDivide(v2);
    double[]result_ebeDivide =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_2 = v1.ebeDivide(v2_t);
    double[]result_ebeDivide_2 =  {
        0.25d, 0.4d, 0.5d
    };
    double dot = v1.dotProduct(v2);
    double dot_2 = v1.dotProduct(v2_t);
    RealMatrix m_outerProduct = v1.outerProduct(v2);
    RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
    RealVector v_unitVector = v1.unitVector();
    RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
    try {
        v_null.unitVector();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    OpenMapRealVector v_unitize = v1.copy();
    v_unitize.unitize();
    assertClose("compare vect", v_unitVector_2.getData(), v_unitize.getData(), normTolerance);
    try {
        v_null.unitize();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    RealVector v_projection = v1.projection(v2);
    double[]result_projection =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_2 = v1.projection(v2_t);
    double[]result_projection_2 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    
}

---
---
public void testBasicFunctions_catena_25() {
    OpenMapRealVector v1 = new OpenMapRealVector(vec1);
    OpenMapRealVector v2 = new OpenMapRealVector(vec2);
    OpenMapRealVector v5 = new OpenMapRealVector(vec5);
    OpenMapRealVector v_null = new OpenMapRealVector(vec_null);
    SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);
    double d_getNorm = v5.getNorm();
    double d_getL1Norm = v5.getL1Norm();
    double d_getLInfNorm = v5.getLInfNorm();
    double dist = v1.getDistance(v2);
    double dist_2 = v1.getDistance(v2_t);
    double d_getL1Distance = v1.getL1Distance(v2);
    double d_getL1Distance_2 = v1.getL1Distance(v2_t);
    double d_getLInfDistance = v1.getLInfDistance(v2);
    double d_getLInfDistance_2 = v1.getLInfDistance(v2_t);
    OpenMapRealVector v_add = v1.add(v2);
    double[]result_add =  {
        5d, 7d, 9d
    };
    SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);
    RealVector v_add_i = v1.add(vt2);
    double[]result_add_i =  {
        5d, 7d, 9d
    };
    OpenMapRealVector v_subtract = v1.subtract(v2);
    double[]result_subtract =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_subtract_i = v1.subtract(vt2);
    double[]result_subtract_i =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_ebeMultiply = v1.ebeMultiply(v2);
    double[]result_ebeMultiply =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
    double[]result_ebeMultiply_2 =  {
        4d, 10d, 18d
    };
    RealVector v_ebeDivide = v1.ebeDivide(v2);
    double[]result_ebeDivide =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_2 = v1.ebeDivide(v2_t);
    double[]result_ebeDivide_2 =  {
        0.25d, 0.4d, 0.5d
    };
    double dot = v1.dotProduct(v2);
    double dot_2 = v1.dotProduct(v2_t);
    RealMatrix m_outerProduct = v1.outerProduct(v2);
    RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
    RealVector v_unitVector = v1.unitVector();
    RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
    try {
        v_null.unitVector();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    OpenMapRealVector v_unitize = v1.copy();
    v_unitize.unitize();
    try {
        v_null.unitize();
        fail("Expecting ArithmeticException");
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    RealVector v_projection = v1.projection(v2);
    double[]result_projection =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_2 = v1.projection(v2_t);
    double[]result_projection_2 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    
}

---
---
public void testBasicFunctions_catena_26() {
    OpenMapRealVector v1 = new OpenMapRealVector(vec1);
    OpenMapRealVector v2 = new OpenMapRealVector(vec2);
    OpenMapRealVector v5 = new OpenMapRealVector(vec5);
    OpenMapRealVector v_null = new OpenMapRealVector(vec_null);
    SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);
    double d_getNorm = v5.getNorm();
    double d_getL1Norm = v5.getL1Norm();
    double d_getLInfNorm = v5.getLInfNorm();
    double dist = v1.getDistance(v2);
    double dist_2 = v1.getDistance(v2_t);
    double d_getL1Distance = v1.getL1Distance(v2);
    double d_getL1Distance_2 = v1.getL1Distance(v2_t);
    double d_getLInfDistance = v1.getLInfDistance(v2);
    double d_getLInfDistance_2 = v1.getLInfDistance(v2_t);
    OpenMapRealVector v_add = v1.add(v2);
    double[]result_add =  {
        5d, 7d, 9d
    };
    SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);
    RealVector v_add_i = v1.add(vt2);
    double[]result_add_i =  {
        5d, 7d, 9d
    };
    OpenMapRealVector v_subtract = v1.subtract(v2);
    double[]result_subtract =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_subtract_i = v1.subtract(vt2);
    double[]result_subtract_i =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_ebeMultiply = v1.ebeMultiply(v2);
    double[]result_ebeMultiply =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
    double[]result_ebeMultiply_2 =  {
        4d, 10d, 18d
    };
    RealVector v_ebeDivide = v1.ebeDivide(v2);
    double[]result_ebeDivide =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_2 = v1.ebeDivide(v2_t);
    double[]result_ebeDivide_2 =  {
        0.25d, 0.4d, 0.5d
    };
    double dot = v1.dotProduct(v2);
    double dot_2 = v1.dotProduct(v2_t);
    RealMatrix m_outerProduct = v1.outerProduct(v2);
    RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
    RealVector v_unitVector = v1.unitVector();
    RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
    try {
        v_null.unitVector();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    OpenMapRealVector v_unitize = v1.copy();
    v_unitize.unitize();
    try {
        v_null.unitize();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        fail("wrong exception caught");
        
    }
    RealVector v_projection = v1.projection(v2);
    double[]result_projection =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_2 = v1.projection(v2_t);
    double[]result_projection_2 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    
}

---
---
public void testBasicFunctions_catena_27() {
    OpenMapRealVector v1 = new OpenMapRealVector(vec1);
    OpenMapRealVector v2 = new OpenMapRealVector(vec2);
    OpenMapRealVector v5 = new OpenMapRealVector(vec5);
    OpenMapRealVector v_null = new OpenMapRealVector(vec_null);
    SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);
    double d_getNorm = v5.getNorm();
    double d_getL1Norm = v5.getL1Norm();
    double d_getLInfNorm = v5.getLInfNorm();
    double dist = v1.getDistance(v2);
    double dist_2 = v1.getDistance(v2_t);
    double d_getL1Distance = v1.getL1Distance(v2);
    double d_getL1Distance_2 = v1.getL1Distance(v2_t);
    double d_getLInfDistance = v1.getLInfDistance(v2);
    double d_getLInfDistance_2 = v1.getLInfDistance(v2_t);
    OpenMapRealVector v_add = v1.add(v2);
    double[]result_add =  {
        5d, 7d, 9d
    };
    SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);
    RealVector v_add_i = v1.add(vt2);
    double[]result_add_i =  {
        5d, 7d, 9d
    };
    OpenMapRealVector v_subtract = v1.subtract(v2);
    double[]result_subtract =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_subtract_i = v1.subtract(vt2);
    double[]result_subtract_i =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_ebeMultiply = v1.ebeMultiply(v2);
    double[]result_ebeMultiply =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
    double[]result_ebeMultiply_2 =  {
        4d, 10d, 18d
    };
    RealVector v_ebeDivide = v1.ebeDivide(v2);
    double[]result_ebeDivide =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_2 = v1.ebeDivide(v2_t);
    double[]result_ebeDivide_2 =  {
        0.25d, 0.4d, 0.5d
    };
    double dot = v1.dotProduct(v2);
    double dot_2 = v1.dotProduct(v2_t);
    RealMatrix m_outerProduct = v1.outerProduct(v2);
    RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
    RealVector v_unitVector = v1.unitVector();
    RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
    try {
        v_null.unitVector();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    OpenMapRealVector v_unitize = v1.copy();
    v_unitize.unitize();
    try {
        v_null.unitize();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    RealVector v_projection = v1.projection(v2);
    double[]result_projection =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    assertClose("compare vect", v_projection.getData(), result_projection, normTolerance);
    RealVector v_projection_2 = v1.projection(v2_t);
    double[]result_projection_2 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    
}

---
---
public void testBasicFunctions_catena_28() {
    OpenMapRealVector v1 = new OpenMapRealVector(vec1);
    OpenMapRealVector v2 = new OpenMapRealVector(vec2);
    OpenMapRealVector v5 = new OpenMapRealVector(vec5);
    OpenMapRealVector v_null = new OpenMapRealVector(vec_null);
    SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);
    double d_getNorm = v5.getNorm();
    double d_getL1Norm = v5.getL1Norm();
    double d_getLInfNorm = v5.getLInfNorm();
    double dist = v1.getDistance(v2);
    double dist_2 = v1.getDistance(v2_t);
    double d_getL1Distance = v1.getL1Distance(v2);
    double d_getL1Distance_2 = v1.getL1Distance(v2_t);
    double d_getLInfDistance = v1.getLInfDistance(v2);
    double d_getLInfDistance_2 = v1.getLInfDistance(v2_t);
    OpenMapRealVector v_add = v1.add(v2);
    double[]result_add =  {
        5d, 7d, 9d
    };
    SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);
    RealVector v_add_i = v1.add(vt2);
    double[]result_add_i =  {
        5d, 7d, 9d
    };
    OpenMapRealVector v_subtract = v1.subtract(v2);
    double[]result_subtract =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_subtract_i = v1.subtract(vt2);
    double[]result_subtract_i =  {
         - 3d,  - 3d,  - 3d
    };
    RealVector v_ebeMultiply = v1.ebeMultiply(v2);
    double[]result_ebeMultiply =  {
        4d, 10d, 18d
    };
    RealVector v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
    double[]result_ebeMultiply_2 =  {
        4d, 10d, 18d
    };
    RealVector v_ebeDivide = v1.ebeDivide(v2);
    double[]result_ebeDivide =  {
        0.25d, 0.4d, 0.5d
    };
    RealVector v_ebeDivide_2 = v1.ebeDivide(v2_t);
    double[]result_ebeDivide_2 =  {
        0.25d, 0.4d, 0.5d
    };
    double dot = v1.dotProduct(v2);
    double dot_2 = v1.dotProduct(v2_t);
    RealMatrix m_outerProduct = v1.outerProduct(v2);
    RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
    RealVector v_unitVector = v1.unitVector();
    RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
    try {
        v_null.unitVector();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    OpenMapRealVector v_unitize = v1.copy();
    v_unitize.unitize();
    try {
        v_null.unitize();
        
    }
    catch(ArithmeticException ex) {
        
    }
    catch(Exception e) {
        
    }
    RealVector v_projection = v1.projection(v2);
    double[]result_projection =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    RealVector v_projection_2 = v1.projection(v2_t);
    double[]result_projection_2 =  {
        1.662337662337662, 2.0779220779220777, 2.493506493506493
    };
    assertClose("compare vect", v_projection_2.getData(), result_projection_2, normTolerance);
    
}

---
--------------------
Run: Math_17
@@@
Split test: org.apache.commons.math3.dfp.DfpTest::testMultiply
file: /root/workbench/exportInfo/d4j_buggy/Math_17/src/test/java//org/apache/commons/math3/dfp/DfpTest.java
Begin: Pos(755, 5)
End: Pos(920, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_17/src/test/java//org/apache/commons/math3/dfp/DfpTest.java
Name: testMultiply
Childs: [StatementAssertion<Begin: Pos(758, 9), End: Pos(760, 31)>,
StatementAssertion<Begin: Pos(762, 9), End: Pos(764, 31)>,
StatementAssertion<Begin: Pos(766, 9), End: Pos(768, 31)>,
StatementAssertion<Begin: Pos(770, 9), End: Pos(772, 31)>,
StatementAssertion<Begin: Pos(775, 9), End: Pos(777, 31)>,
StatementAssertion<Begin: Pos(779, 9), End: Pos(781, 31)>,
StatementAssertion<Begin: Pos(783, 9), End: Pos(785, 31)>,
StatementAssertion<Begin: Pos(787, 9), End: Pos(789, 31)>,
StatementAssertion<Begin: Pos(791, 9), End: Pos(793, 31)>,
StatementAssertion<Begin: Pos(795, 9), End: Pos(797, 32)>,
StatementAssertion<Begin: Pos(801, 9), End: Pos(803, 32)>,
StatementAssertion<Begin: Pos(805, 9), End: Pos(807, 32)>,
StatementAssertion<Begin: Pos(809, 9), End: Pos(811, 32)>,
StatementAssertion<Begin: Pos(813, 9), End: Pos(815, 32)>,
StatementAssertion<Begin: Pos(817, 9), End: Pos(819, 32)>,
StatementAssertion<Begin: Pos(821, 9), End: Pos(823, 32)>,
StatementAssertion<Begin: Pos(825, 9), End: Pos(827, 32)>,
StatementAssertion<Begin: Pos(829, 9), End: Pos(831, 32)>,
StatementAssertion<Begin: Pos(833, 9), End: Pos(835, 34)>,
StatementAssertion<Begin: Pos(837, 9), End: Pos(839, 53)>,
StatementAssertion<Begin: Pos(841, 9), End: Pos(843, 32)>,
StatementAssertion<Begin: Pos(845, 9), End: Pos(847, 53)>,
StatementAssertion<Begin: Pos(849, 9), End: Pos(851, 32)>,
StatementAssertion<Begin: Pos(853, 9), End: Pos(855, 54)>,
StatementAssertion<Begin: Pos(857, 9), End: Pos(859, 32)>,
StatementAssertion<Begin: Pos(861, 9), End: Pos(863, 32)>,
StatementAssertion<Begin: Pos(865, 9), End: Pos(867, 32)>,
StatementAssertion<Begin: Pos(869, 9), End: Pos(871, 32)>,
StatementAssertion<Begin: Pos(873, 9), End: Pos(875, 52)>,
StatementAssertion<Begin: Pos(877, 9), End: Pos(879, 52)>,
StatementAssertion<Begin: Pos(881, 9), End: Pos(883, 32)>,
StatementAssertion<Begin: Pos(885, 9), End: Pos(887, 32)>,
StatementAssertion<Begin: Pos(889, 9), End: Pos(891, 32)>,
StatementAssertion<Begin: Pos(893, 9), End: Pos(895, 32)>,
StatementAssertion<Begin: Pos(897, 9), End: Pos(899, 32)>,
StatementAssertion<Begin: Pos(901, 9), End: Pos(903, 52)>,
StatementAssertion<Begin: Pos(905, 9), End: Pos(907, 32)>,
StatementAssertion<Begin: Pos(909, 9), End: Pos(911, 32)>,
StatementAssertion<Begin: Pos(913, 9), End: Pos(915, 32)>,
StatementAssertion<Begin: Pos(917, 9), End: Pos(919, 32)>,
]
---
@Test public void testMultiply_catena_0() {
    test(field.newDfp("1").multiply(field.newDfp("1")), field.newDfp("1"), 0, "Multiply #1");
    
}

---
---
@Test public void testMultiply_catena_1() {
    test(field.newDfp("1").multiply(1), field.newDfp("1"), 0, "Multiply #2");
    
}

---
---
@Test public void testMultiply_catena_2() {
    test(field.newDfp("-1").multiply(field.newDfp("1")), field.newDfp("-1"), 0, "Multiply #3");
    
}

---
---
@Test public void testMultiply_catena_3() {
    test(field.newDfp("-1").multiply(1), field.newDfp("-1"), 0, "Multiply #4");
    
}

---
---
@Test public void testMultiply_catena_4() {
    test(field.newDfp("2").multiply(field.newDfp("3")), field.newDfp("6"), 0, "Multiply #5");
    
}

---
---
@Test public void testMultiply_catena_5() {
    test(field.newDfp("2").multiply(3), field.newDfp("6"), 0, "Multiply #6");
    
}

---
---
@Test public void testMultiply_catena_6() {
    test(field.newDfp("-2").multiply(field.newDfp("3")), field.newDfp("-6"), 0, "Multiply #7");
    
}

---
---
@Test public void testMultiply_catena_7() {
    test(field.newDfp("-2").multiply(3), field.newDfp("-6"), 0, "Multiply #8");
    
}

---
---
@Test public void testMultiply_catena_8() {
    test(field.newDfp("2").multiply(field.newDfp("-3")), field.newDfp("-6"), 0, "Multiply #9");
    
}

---
---
@Test public void testMultiply_catena_9() {
    test(field.newDfp("-2").multiply(field.newDfp("-3")), field.newDfp("6"), 0, "Multiply #10");
    
}

---
---
@Test public void testMultiply_catena_10() {
    test(field.newDfp("-2").multiply(field.newDfp("0")), field.newDfp("-0"), 0, "Multiply #11");
    
}

---
---
@Test public void testMultiply_catena_11() {
    test(field.newDfp("-2").multiply(0), field.newDfp("-0"), 0, "Multiply #12");
    
}

---
---
@Test public void testMultiply_catena_12() {
    test(field.newDfp("2").multiply(field.newDfp("0")), field.newDfp("0"), 0, "Multiply #13");
    
}

---
---
@Test public void testMultiply_catena_13() {
    test(field.newDfp("2").multiply(0), field.newDfp("0"), 0, "Multiply #14");
    
}

---
---
@Test public void testMultiply_catena_14() {
    test(field.newDfp("2").multiply(pinf), pinf, 0, "Multiply #15");
    
}

---
---
@Test public void testMultiply_catena_15() {
    test(field.newDfp("2").multiply(ninf), ninf, 0, "Multiply #16");
    
}

---
---
@Test public void testMultiply_catena_16() {
    test(field.newDfp("-2").multiply(pinf), ninf, 0, "Multiply #17");
    
}

---
---
@Test public void testMultiply_catena_17() {
    test(field.newDfp("-2").multiply(ninf), pinf, 0, "Multiply #18");
    
}

---
---
@Test public void testMultiply_catena_18() {
    test(ninf.multiply(field.newDfp("-2")), pinf, 0, "Multiply #18.1");
    
}

---
---
@Test public void testMultiply_catena_19() {
    test(field.newDfp("5e131071").multiply(2), pinf, DfpField.FLAG_OVERFLOW, "Multiply #19");
    
}

---
---
@Test public void testMultiply_catena_20() {
    test(field.newDfp("5e131071").multiply(field.newDfp("1.999999999999999")), field.newDfp("9.9999999999999950000e131071"), 0, "Multiply #20");
    
}

---
---
@Test public void testMultiply_catena_21() {
    test(field.newDfp("-5e131071").multiply(2), ninf, DfpField.FLAG_OVERFLOW, "Multiply #22");
    
}

---
---
@Test public void testMultiply_catena_22() {
    test(field.newDfp("-5e131071").multiply(field.newDfp("1.999999999999999")), field.newDfp("-9.9999999999999950000e131071"), 0, "Multiply #23");
    
}

---
---
@Test public void testMultiply_catena_23() {
    test(field.newDfp("1e-65539").multiply(field.newDfp("1e-65539")), field.newDfp("1e-131078"), DfpField.FLAG_UNDERFLOW, "Multiply #24");
    
}

---
---
@Test public void testMultiply_catena_24() {
    test(field.newDfp("1").multiply(nan), nan, 0, "Multiply #25");
    
}

---
---
@Test public void testMultiply_catena_25() {
    test(nan.multiply(field.newDfp("1")), nan, 0, "Multiply #26");
    
}

---
---
@Test public void testMultiply_catena_26() {
    test(nan.multiply(pinf), nan, 0, "Multiply #27");
    
}

---
---
@Test public void testMultiply_catena_27() {
    test(pinf.multiply(nan), nan, 0, "Multiply #27");
    
}

---
---
@Test public void testMultiply_catena_28() {
    test(pinf.multiply(field.newDfp("0")), nan, DfpField.FLAG_INVALID, "Multiply #28");
    
}

---
---
@Test public void testMultiply_catena_29() {
    test(field.newDfp("0").multiply(pinf), nan, DfpField.FLAG_INVALID, "Multiply #29");
    
}

---
---
@Test public void testMultiply_catena_30() {
    test(pinf.multiply(pinf), pinf, 0, "Multiply #30");
    
}

---
---
@Test public void testMultiply_catena_31() {
    test(ninf.multiply(pinf), ninf, 0, "Multiply #31");
    
}

---
---
@Test public void testMultiply_catena_32() {
    test(pinf.multiply(ninf), ninf, 0, "Multiply #32");
    
}

---
---
@Test public void testMultiply_catena_33() {
    test(ninf.multiply(ninf), pinf, 0, "Multiply #33");
    
}

---
---
@Test public void testMultiply_catena_34() {
    test(pinf.multiply(1), pinf, 0, "Multiply #34");
    
}

---
---
@Test public void testMultiply_catena_35() {
    test(pinf.multiply(0), nan, DfpField.FLAG_INVALID, "Multiply #35");
    
}

---
---
@Test public void testMultiply_catena_36() {
    test(nan.multiply(1), nan, 0, "Multiply #36");
    
}

---
---
@Test public void testMultiply_catena_37() {
    test(field.newDfp("1").multiply(10000), field.newDfp("10000"), 0, "Multiply #37");
    
}

---
---
@Test public void testMultiply_catena_38() {
    test(field.newDfp("2").multiply(1000000), field.newDfp("2000000"), 0, "Multiply #38");
    
}

---
---
@Test public void testMultiply_catena_39() {
    test(field.newDfp("1").multiply( - 1), field.newDfp("-1"), 0, "Multiply #39");
    
}

---
--------------------
Run: Math_79
@@@
Split test: org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testPerformClusterAnalysisDegenerate
file: /root/workbench/exportInfo/d4j_buggy/Math_79/src/test/java//org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java
Begin: Pos(102, 5)
End: Pos(117, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_79/src/test/java//org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java
Name: testPerformClusterAnalysisDegenerate
Childs: [StatementAssertion<Begin: Pos(110, 9), End: Pos(110, 41)>,
StatementAssertion<Begin: Pos(111, 9), End: Pos(111, 62)>,
StatementAssertion<Begin: Pos(114, 9), End: Pos(114, 62)>,
StatementAssertion<Begin: Pos(115, 9), End: Pos(115, 62)>,
]
---
@Test public void testPerformClusterAnalysisDegenerate_catena_0() {
    KMeansPlusPlusClusterer < EuclideanIntegerPoint > transformer = new KMeansPlusPlusClusterer < EuclideanIntegerPoint > (new Random(1746432956321l));
    EuclideanIntegerPoint[]points = new EuclideanIntegerPoint[] {
        new EuclideanIntegerPoint(new int[] {
            1959, 325100
        }), new EuclideanIntegerPoint(new int[] {
            1960, 373200
        }), 
    };
    List < Cluster < EuclideanIntegerPoint >  > clusters = transformer.cluster(Arrays.asList(points), 1, 1);
    assertEquals(1, clusters.size());
    EuclideanIntegerPoint pt1 = new EuclideanIntegerPoint(new int[] {
        1959, 325100
    });
    EuclideanIntegerPoint pt2 = new EuclideanIntegerPoint(new int[] {
        1960, 373200
    });
    
}

---
---
@Test public void testPerformClusterAnalysisDegenerate_catena_1() {
    KMeansPlusPlusClusterer < EuclideanIntegerPoint > transformer = new KMeansPlusPlusClusterer < EuclideanIntegerPoint > (new Random(1746432956321l));
    EuclideanIntegerPoint[]points = new EuclideanIntegerPoint[] {
        new EuclideanIntegerPoint(new int[] {
            1959, 325100
        }), new EuclideanIntegerPoint(new int[] {
            1960, 373200
        }), 
    };
    List < Cluster < EuclideanIntegerPoint >  > clusters = transformer.cluster(Arrays.asList(points), 1, 1);
    assertEquals(2, (clusters.get(0).getPoints().size()));
    EuclideanIntegerPoint pt1 = new EuclideanIntegerPoint(new int[] {
        1959, 325100
    });
    EuclideanIntegerPoint pt2 = new EuclideanIntegerPoint(new int[] {
        1960, 373200
    });
    
}

---
---
@Test public void testPerformClusterAnalysisDegenerate_catena_2() {
    KMeansPlusPlusClusterer < EuclideanIntegerPoint > transformer = new KMeansPlusPlusClusterer < EuclideanIntegerPoint > (new Random(1746432956321l));
    EuclideanIntegerPoint[]points = new EuclideanIntegerPoint[] {
        new EuclideanIntegerPoint(new int[] {
            1959, 325100
        }), new EuclideanIntegerPoint(new int[] {
            1960, 373200
        }), 
    };
    List < Cluster < EuclideanIntegerPoint >  > clusters = transformer.cluster(Arrays.asList(points), 1, 1);
    EuclideanIntegerPoint pt1 = new EuclideanIntegerPoint(new int[] {
        1959, 325100
    });
    EuclideanIntegerPoint pt2 = new EuclideanIntegerPoint(new int[] {
        1960, 373200
    });
    assertTrue(clusters.get(0).getPoints().contains(pt1));
    
}

---
---
@Test public void testPerformClusterAnalysisDegenerate_catena_3() {
    KMeansPlusPlusClusterer < EuclideanIntegerPoint > transformer = new KMeansPlusPlusClusterer < EuclideanIntegerPoint > (new Random(1746432956321l));
    EuclideanIntegerPoint[]points = new EuclideanIntegerPoint[] {
        new EuclideanIntegerPoint(new int[] {
            1959, 325100
        }), new EuclideanIntegerPoint(new int[] {
            1960, 373200
        }), 
    };
    List < Cluster < EuclideanIntegerPoint >  > clusters = transformer.cluster(Arrays.asList(points), 1, 1);
    EuclideanIntegerPoint pt1 = new EuclideanIntegerPoint(new int[] {
        1959, 325100
    });
    EuclideanIntegerPoint pt2 = new EuclideanIntegerPoint(new int[] {
        1960, 373200
    });
    assertTrue(clusters.get(0).getPoints().contains(pt2));
    
}

---
--------------------
Run: Math_62
@@@
Split test: org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizerTest::testQuinticMin
file: /root/workbench/exportInfo/d4j_buggy/Math_62/src/test/java//org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java
Begin: Pos(57, 5)
End: Pos(80, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_62/src/test/java//org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java
Name: testQuinticMin
Childs: [StatementAssertion<Begin: Pos(71, 9), End: Pos(71, 62)>,
StatementAssertion<Begin: Pos(72, 9), End: Pos(72, 62)>,
StatementAssertion<Begin: Pos(76, 13), End: Pos(76, 84)>,
StatementAssertion<Begin: Pos(78, 9), End: Pos(78, 53)>,
StatementAssertion<Begin: Pos(79, 9), End: Pos(79, 54)>,
]
---
@Test public void testQuinticMin_catena_0()throws MathException {
    UnivariateRealFunction f = new QuinticFunction();
    UnivariateRealOptimizer underlying = new BrentOptimizer(1e-9, 1e-14);
    underlying.setMaxEvaluations(300);
    JDKRandomGenerator g = new JDKRandomGenerator();
    g.setSeed(4312000053L);
    MultiStartUnivariateRealOptimizer optimizer = new MultiStartUnivariateRealOptimizer(underlying, 5, g);
    UnivariateRealPointValuePair optimum = optimizer.optimize(f, GoalType.MINIMIZE,  - 0.3,  - 0.2);
    assertEquals( - 0.2719561293, optimum.getPoint(), 1e-9);
    UnivariateRealPointValuePair[]optima = optimizer.getOptima();
    for(int i = 0;
    i < optima.length;
     ++ i) {
        
    }
}

---
---
@Test public void testQuinticMin_catena_1()throws MathException {
    UnivariateRealFunction f = new QuinticFunction();
    UnivariateRealOptimizer underlying = new BrentOptimizer(1e-9, 1e-14);
    underlying.setMaxEvaluations(300);
    JDKRandomGenerator g = new JDKRandomGenerator();
    g.setSeed(4312000053L);
    MultiStartUnivariateRealOptimizer optimizer = new MultiStartUnivariateRealOptimizer(underlying, 5, g);
    UnivariateRealPointValuePair optimum = optimizer.optimize(f, GoalType.MINIMIZE,  - 0.3,  - 0.2);
    assertEquals( - 0.0443342695, optimum.getValue(), 1e-9);
    UnivariateRealPointValuePair[]optima = optimizer.getOptima();
    for(int i = 0;
    i < optima.length;
     ++ i) {
        
    }
}

---
---
@Test public void testQuinticMin_catena_2()throws MathException {
    UnivariateRealFunction f = new QuinticFunction();
    UnivariateRealOptimizer underlying = new BrentOptimizer(1e-9, 1e-14);
    underlying.setMaxEvaluations(300);
    JDKRandomGenerator g = new JDKRandomGenerator();
    g.setSeed(4312000053L);
    MultiStartUnivariateRealOptimizer optimizer = new MultiStartUnivariateRealOptimizer(underlying, 5, g);
    UnivariateRealPointValuePair optimum = optimizer.optimize(f, GoalType.MINIMIZE,  - 0.3,  - 0.2);
    UnivariateRealPointValuePair[]optima = optimizer.getOptima();
    for(int i = 0;
    i < optima.length;
     ++ i) {
        assertEquals(f.value(optima[i].getPoint()), optima[i].getValue(), 1e-9);
        
    }
}

---
---
@Test public void testQuinticMin_catena_3()throws MathException {
    UnivariateRealFunction f = new QuinticFunction();
    UnivariateRealOptimizer underlying = new BrentOptimizer(1e-9, 1e-14);
    underlying.setMaxEvaluations(300);
    JDKRandomGenerator g = new JDKRandomGenerator();
    g.setSeed(4312000053L);
    MultiStartUnivariateRealOptimizer optimizer = new MultiStartUnivariateRealOptimizer(underlying, 5, g);
    UnivariateRealPointValuePair optimum = optimizer.optimize(f, GoalType.MINIMIZE,  - 0.3,  - 0.2);
    UnivariateRealPointValuePair[]optima = optimizer.getOptima();
    for(int i = 0;
    i < optima.length;
     ++ i) {
        
    }
    assertTrue(optimizer.getEvaluations() >= 50);
    
}

---
---
@Test public void testQuinticMin_catena_4()throws MathException {
    UnivariateRealFunction f = new QuinticFunction();
    UnivariateRealOptimizer underlying = new BrentOptimizer(1e-9, 1e-14);
    underlying.setMaxEvaluations(300);
    JDKRandomGenerator g = new JDKRandomGenerator();
    g.setSeed(4312000053L);
    MultiStartUnivariateRealOptimizer optimizer = new MultiStartUnivariateRealOptimizer(underlying, 5, g);
    UnivariateRealPointValuePair optimum = optimizer.optimize(f, GoalType.MINIMIZE,  - 0.3,  - 0.2);
    UnivariateRealPointValuePair[]optima = optimizer.getOptima();
    for(int i = 0;
    i < optima.length;
     ++ i) {
        
    }
    assertTrue(optimizer.getEvaluations() <= 100);
    
}

---
--------------------
Run: Math_4
@@@
Split test: org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting
file: /root/workbench/exportInfo/d4j_buggy/Math_4/src/test/java//org/apache/commons/math3/geometry/euclidean/threed/SubLineTest.java
Begin: Pos(156, 5)
End: Pos(162, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_4/src/test/java//org/apache/commons/math3/geometry/euclidean/threed/SubLineTest.java
Name: testIntersectionNotIntersecting
Childs: [StatementAssertion<Begin: Pos(160, 9), End: Pos(160, 57)>,
StatementAssertion<Begin: Pos(161, 9), End: Pos(161, 58)>,
]
---
@Test public void testIntersectionNotIntersecting_catena_0()throws MathIllegalArgumentException {
    SubLine sub1 = new SubLine(new Vector3D(1, 1, 1), new Vector3D(1.5, 1, 1));
    SubLine sub2 = new SubLine(new Vector3D(2, 3, 0), new Vector3D(2, 3, 0.5));
    Assert.assertNull(sub1.intersection(sub2, true));
    
}

---
---
@Test public void testIntersectionNotIntersecting_catena_1()throws MathIllegalArgumentException {
    SubLine sub1 = new SubLine(new Vector3D(1, 1, 1), new Vector3D(1.5, 1, 1));
    SubLine sub2 = new SubLine(new Vector3D(2, 3, 0), new Vector3D(2, 3, 0.5));
    Assert.assertNull(sub1.intersection(sub2, false));
    
}

---
@@@
Split test: org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel
file: /root/workbench/exportInfo/d4j_buggy/Math_4/src/test/java//org/apache/commons/math3/geometry/euclidean/twod/SubLineTest.java
Begin: Pos(147, 5)
End: Pos(153, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_4/src/test/java//org/apache/commons/math3/geometry/euclidean/twod/SubLineTest.java
Name: testIntersectionParallel
Childs: [StatementAssertion<Begin: Pos(151, 9), End: Pos(151, 57)>,
StatementAssertion<Begin: Pos(152, 9), End: Pos(152, 58)>,
]
---
@Test public void testIntersectionParallel_catena_0() {
    final SubLine sub1 = new SubLine(new Vector2D(0, 1), new Vector2D(0, 2));
    final SubLine sub2 = new SubLine(new Vector2D(66, 3), new Vector2D(66, 4));
    Assert.assertNull(sub1.intersection(sub2, true));
    
}

---
---
@Test public void testIntersectionParallel_catena_1() {
    final SubLine sub1 = new SubLine(new Vector2D(0, 1), new Vector2D(0, 2));
    final SubLine sub2 = new SubLine(new Vector2D(66, 3), new Vector2D(66, 4));
    Assert.assertNull(sub1.intersection(sub2, false));
    
}

---
--------------------
Run: Math_12
@@@
Split test: org.apache.commons.math3.distribution.GammaDistributionTest::testDistributionClone
file: /root/workbench/exportInfo/d4j_buggy/Math_12/src/test/java//org/apache/commons/math3/distribution/GammaDistributionTest.java
# Exception:
Traceback (most recent call last):
  File "run.py", line 39, in run
    fti, check = spliter.process_test_node_v2(path2file, test[1])
  File "/root/workbench/splitTests/spliter.py", line 259, in process_test_node_v2
    node = get_only_node(name, _globals)
  File "/root/workbench/splitTests/util.py", line 39, in get_only_node
    raise ParseError('Cannot find method <{}> in AST'.format(name))
util.ParseError: Cannot find method <testDistributionClone> in AST

---
@@@
Split test: org.apache.commons.math3.distribution.LogNormalDistributionTest::testDistributionClone
file: /root/workbench/exportInfo/d4j_buggy/Math_12/src/test/java//org/apache/commons/math3/distribution/LogNormalDistributionTest.java
# Exception:
Traceback (most recent call last):
  File "run.py", line 39, in run
    fti, check = spliter.process_test_node_v2(path2file, test[1])
  File "/root/workbench/splitTests/spliter.py", line 259, in process_test_node_v2
    node = get_only_node(name, _globals)
  File "/root/workbench/splitTests/util.py", line 39, in get_only_node
    raise ParseError('Cannot find method <{}> in AST'.format(name))
util.ParseError: Cannot find method <testDistributionClone> in AST

---
@@@
Split test: org.apache.commons.math3.distribution.NormalDistributionTest::testDistributionClone
file: /root/workbench/exportInfo/d4j_buggy/Math_12/src/test/java//org/apache/commons/math3/distribution/NormalDistributionTest.java
# Exception:
Traceback (most recent call last):
  File "run.py", line 39, in run
    fti, check = spliter.process_test_node_v2(path2file, test[1])
  File "/root/workbench/splitTests/spliter.py", line 259, in process_test_node_v2
    node = get_only_node(name, _globals)
  File "/root/workbench/splitTests/util.py", line 39, in get_only_node
    raise ParseError('Cannot find method <{}> in AST'.format(name))
util.ParseError: Cannot find method <testDistributionClone> in AST

---
--------------------
Run: Math_100
@@@
Split test: org.apache.commons.math.estimation.GaussNewtonEstimatorTest::testBoundParameters
file: /root/workbench/exportInfo/d4j_buggy/Math_100/src/test//org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java
Begin: Pos(451, 10)
End: Pos(487, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Math_100/src/test//org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java
Name: testBoundParameters
Childs: [StatementAssertion<Begin: Pos(471, 7), End: Pos(471, 54)>,
StatementAssertion<Begin: Pos(478, 7), End: Pos(478, 60)>,
StatementAssertion<Begin: Pos(479, 7), End: Pos(479, 60)>,
StatementAssertion<Begin: Pos(480, 7), End: Pos(480, 60)>,
StatementAssertion<Begin: Pos(481, 7), End: Pos(481, 60)>,
StatementAssertion<Begin: Pos(484, 7), End: Pos(484, 43)>,
StatementAssertion<Begin: Pos(485, 7), End: Pos(485, 43)>,
]
---
public void testBoundParameters_catena_0()throws EstimationException {
    EstimatedParameter[]p =  {
        new EstimatedParameter("unbound0", 2, false), new EstimatedParameter("unbound1", 2, false), new EstimatedParameter("bound", 2, true)
    };
    LinearProblem problem = new LinearProblem(new LinearMeasurement[] {
        new LinearMeasurement(new double[] {
            1.0, 1.0, 1.0
        }, new EstimatedParameter[] {
            p[0], p[1], p[2]
        }, 3.0), new LinearMeasurement(new double[] {
            1.0,  - 1.0, 1.0
        }, new EstimatedParameter[] {
            p[0], p[1], p[2]
        }, 1.0), new LinearMeasurement(new double[] {
            1.0, 3.0, 2.0
        }, new EstimatedParameter[] {
            p[0], p[1], p[2]
        }, 7.0)
    });
    GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);
    estimator.estimate(problem);
    assertTrue(estimator.getRMS(problem) < 1.0e-10);
    double[][]covariances = estimator.getCovariances(problem);
    int i0 = 0, i1 = 1;
    if(problem.getUnboundParameters()[0].getName().endsWith("1")) {
        i0 = 1;
        i1 = 0;
        
    }
    double[]errors = estimator.guessParametersErrors(problem);
    
}

---
---
public void testBoundParameters_catena_1()throws EstimationException {
    EstimatedParameter[]p =  {
        new EstimatedParameter("unbound0", 2, false), new EstimatedParameter("unbound1", 2, false), new EstimatedParameter("bound", 2, true)
    };
    LinearProblem problem = new LinearProblem(new LinearMeasurement[] {
        new LinearMeasurement(new double[] {
            1.0, 1.0, 1.0
        }, new EstimatedParameter[] {
            p[0], p[1], p[2]
        }, 3.0), new LinearMeasurement(new double[] {
            1.0,  - 1.0, 1.0
        }, new EstimatedParameter[] {
            p[0], p[1], p[2]
        }, 1.0), new LinearMeasurement(new double[] {
            1.0, 3.0, 2.0
        }, new EstimatedParameter[] {
            p[0], p[1], p[2]
        }, 7.0)
    });
    GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);
    estimator.estimate(problem);
    double[][]covariances = estimator.getCovariances(problem);
    int i0 = 0, i1 = 1;
    if(problem.getUnboundParameters()[0].getName().endsWith("1")) {
        i0 = 1;
        i1 = 0;
        
    }
    assertEquals(11.0 / 24, covariances[i0][i0], 1.0e-10);
    double[]errors = estimator.guessParametersErrors(problem);
    
}

---
---
public void testBoundParameters_catena_2()throws EstimationException {
    EstimatedParameter[]p =  {
        new EstimatedParameter("unbound0", 2, false), new EstimatedParameter("unbound1", 2, false), new EstimatedParameter("bound", 2, true)
    };
    LinearProblem problem = new LinearProblem(new LinearMeasurement[] {
        new LinearMeasurement(new double[] {
            1.0, 1.0, 1.0
        }, new EstimatedParameter[] {
            p[0], p[1], p[2]
        }, 3.0), new LinearMeasurement(new double[] {
            1.0,  - 1.0, 1.0
        }, new EstimatedParameter[] {
            p[0], p[1], p[2]
        }, 1.0), new LinearMeasurement(new double[] {
            1.0, 3.0, 2.0
        }, new EstimatedParameter[] {
            p[0], p[1], p[2]
        }, 7.0)
    });
    GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);
    estimator.estimate(problem);
    double[][]covariances = estimator.getCovariances(problem);
    int i0 = 0, i1 = 1;
    if(problem.getUnboundParameters()[0].getName().endsWith("1")) {
        i0 = 1;
        i1 = 0;
        
    }
    assertEquals( - 3.0 / 24, covariances[i0][i1], 1.0e-10);
    double[]errors = estimator.guessParametersErrors(problem);
    
}

---
---
public void testBoundParameters_catena_3()throws EstimationException {
    EstimatedParameter[]p =  {
        new EstimatedParameter("unbound0", 2, false), new EstimatedParameter("unbound1", 2, false), new EstimatedParameter("bound", 2, true)
    };
    LinearProblem problem = new LinearProblem(new LinearMeasurement[] {
        new LinearMeasurement(new double[] {
            1.0, 1.0, 1.0
        }, new EstimatedParameter[] {
            p[0], p[1], p[2]
        }, 3.0), new LinearMeasurement(new double[] {
            1.0,  - 1.0, 1.0
        }, new EstimatedParameter[] {
            p[0], p[1], p[2]
        }, 1.0), new LinearMeasurement(new double[] {
            1.0, 3.0, 2.0
        }, new EstimatedParameter[] {
            p[0], p[1], p[2]
        }, 7.0)
    });
    GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);
    estimator.estimate(problem);
    double[][]covariances = estimator.getCovariances(problem);
    int i0 = 0, i1 = 1;
    if(problem.getUnboundParameters()[0].getName().endsWith("1")) {
        i0 = 1;
        i1 = 0;
        
    }
    assertEquals( - 3.0 / 24, covariances[i1][i0], 1.0e-10);
    double[]errors = estimator.guessParametersErrors(problem);
    
}

---
---
public void testBoundParameters_catena_4()throws EstimationException {
    EstimatedParameter[]p =  {
        new EstimatedParameter("unbound0", 2, false), new EstimatedParameter("unbound1", 2, false), new EstimatedParameter("bound", 2, true)
    };
    LinearProblem problem = new LinearProblem(new LinearMeasurement[] {
        new LinearMeasurement(new double[] {
            1.0, 1.0, 1.0
        }, new EstimatedParameter[] {
            p[0], p[1], p[2]
        }, 3.0), new LinearMeasurement(new double[] {
            1.0,  - 1.0, 1.0
        }, new EstimatedParameter[] {
            p[0], p[1], p[2]
        }, 1.0), new LinearMeasurement(new double[] {
            1.0, 3.0, 2.0
        }, new EstimatedParameter[] {
            p[0], p[1], p[2]
        }, 7.0)
    });
    GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);
    estimator.estimate(problem);
    double[][]covariances = estimator.getCovariances(problem);
    int i0 = 0, i1 = 1;
    if(problem.getUnboundParameters()[0].getName().endsWith("1")) {
        i0 = 1;
        i1 = 0;
        
    }
    assertEquals(3.0 / 24, covariances[i1][i1], 1.0e-10);
    double[]errors = estimator.guessParametersErrors(problem);
    
}

---
---
public void testBoundParameters_catena_5()throws EstimationException {
    EstimatedParameter[]p =  {
        new EstimatedParameter("unbound0", 2, false), new EstimatedParameter("unbound1", 2, false), new EstimatedParameter("bound", 2, true)
    };
    LinearProblem problem = new LinearProblem(new LinearMeasurement[] {
        new LinearMeasurement(new double[] {
            1.0, 1.0, 1.0
        }, new EstimatedParameter[] {
            p[0], p[1], p[2]
        }, 3.0), new LinearMeasurement(new double[] {
            1.0,  - 1.0, 1.0
        }, new EstimatedParameter[] {
            p[0], p[1], p[2]
        }, 1.0), new LinearMeasurement(new double[] {
            1.0, 3.0, 2.0
        }, new EstimatedParameter[] {
            p[0], p[1], p[2]
        }, 7.0)
    });
    GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);
    estimator.estimate(problem);
    double[][]covariances = estimator.getCovariances(problem);
    int i0 = 0, i1 = 1;
    if(problem.getUnboundParameters()[0].getName().endsWith("1")) {
        i0 = 1;
        i1 = 0;
        
    }
    double[]errors = estimator.guessParametersErrors(problem);
    assertEquals(0, errors[i0], 1.0e-10);
    
}

---
---
public void testBoundParameters_catena_6()throws EstimationException {
    EstimatedParameter[]p =  {
        new EstimatedParameter("unbound0", 2, false), new EstimatedParameter("unbound1", 2, false), new EstimatedParameter("bound", 2, true)
    };
    LinearProblem problem = new LinearProblem(new LinearMeasurement[] {
        new LinearMeasurement(new double[] {
            1.0, 1.0, 1.0
        }, new EstimatedParameter[] {
            p[0], p[1], p[2]
        }, 3.0), new LinearMeasurement(new double[] {
            1.0,  - 1.0, 1.0
        }, new EstimatedParameter[] {
            p[0], p[1], p[2]
        }, 1.0), new LinearMeasurement(new double[] {
            1.0, 3.0, 2.0
        }, new EstimatedParameter[] {
            p[0], p[1], p[2]
        }, 7.0)
    });
    GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);
    estimator.estimate(problem);
    double[][]covariances = estimator.getCovariances(problem);
    int i0 = 0, i1 = 1;
    if(problem.getUnboundParameters()[0].getName().endsWith("1")) {
        i0 = 1;
        i1 = 0;
        
    }
    double[]errors = estimator.guessParametersErrors(problem);
    assertEquals(0, errors[i1], 1.0e-10);
    
}

---
--------------------
Run: Math_99
@@@
Split test: org.apache.commons.math.util.MathUtilsTest::testGcd
file: /root/workbench/exportInfo/d4j_buggy/Math_99/src/test//org/apache/commons/math/util/MathUtilsTest.java
Begin: Pos(407, 12)
End: Pos(455, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_99/src/test//org/apache/commons/math/util/MathUtilsTest.java
Name: testGcd
Childs: [StatementAssertion<Begin: Pos(412, 9), End: Pos(412, 45)>,
StatementAssertion<Begin: Pos(414, 9), End: Pos(414, 45)>,
StatementAssertion<Begin: Pos(415, 9), End: Pos(415, 45)>,
StatementAssertion<Begin: Pos(416, 9), End: Pos(416, 46)>,
StatementAssertion<Begin: Pos(417, 9), End: Pos(417, 46)>,
StatementAssertion<Begin: Pos(419, 9), End: Pos(419, 46)>,
StatementAssertion<Begin: Pos(420, 9), End: Pos(420, 47)>,
StatementAssertion<Begin: Pos(421, 9), End: Pos(421, 47)>,
StatementAssertion<Begin: Pos(422, 9), End: Pos(422, 48)>,
StatementAssertion<Begin: Pos(424, 9), End: Pos(424, 45)>,
StatementAssertion<Begin: Pos(425, 9), End: Pos(425, 46)>,
StatementAssertion<Begin: Pos(426, 9), End: Pos(426, 46)>,
StatementAssertion<Begin: Pos(427, 9), End: Pos(427, 47)>,
StatementAssertion<Begin: Pos(429, 9), End: Pos(429, 75)>,
StatementAssertion<Begin: Pos(431, 9), End: Pos(431, 77)>,
StatementAssertion<Begin: Pos(432, 9), End: Pos(432, 78)>,
StatementAssertion<Begin: Pos(433, 9), End: Pos(433, 70)>,
StatementAssertion<Begin: Pos(437, 13), End: Pos(437, 50)>,
StatementAssertion<Begin: Pos(444, 13), End: Pos(444, 50)>,
StatementAssertion<Begin: Pos(451, 13), End: Pos(451, 50)>,
]
---
public void testGcd_catena_0() {
    int a = 30;
    int b = 50;
    int c = 77;
    assertEquals(0, MathUtils.gcd(0, 0));
    try {
        MathUtils.gcd(Integer.MIN_VALUE, 0);
        
    }
    catch(ArithmeticException expected) {
        
    }
    try {
        MathUtils.gcd(0, Integer.MIN_VALUE);
        
    }
    catch(ArithmeticException expected) {
        
    }
    try {
        MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);
        
    }
    catch(ArithmeticException expected) {
        
    }
}

---
---
public void testGcd_catena_1() {
    int a = 30;
    int b = 50;
    int c = 77;
    assertEquals(b, MathUtils.gcd(0, b));
    try {
        MathUtils.gcd(Integer.MIN_VALUE, 0);
        
    }
    catch(ArithmeticException expected) {
        
    }
    try {
        MathUtils.gcd(0, Integer.MIN_VALUE);
        
    }
    catch(ArithmeticException expected) {
        
    }
    try {
        MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);
        
    }
    catch(ArithmeticException expected) {
        
    }
}

---
---
public void testGcd_catena_2() {
    int a = 30;
    int b = 50;
    int c = 77;
    assertEquals(a, MathUtils.gcd(a, 0));
    try {
        MathUtils.gcd(Integer.MIN_VALUE, 0);
        
    }
    catch(ArithmeticException expected) {
        
    }
    try {
        MathUtils.gcd(0, Integer.MIN_VALUE);
        
    }
    catch(ArithmeticException expected) {
        
    }
    try {
        MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);
        
    }
    catch(ArithmeticException expected) {
        
    }
}

---
---
public void testGcd_catena_3() {
    int a = 30;
    int b = 50;
    int c = 77;
    assertEquals(b, MathUtils.gcd(0,  - b));
    try {
        MathUtils.gcd(Integer.MIN_VALUE, 0);
        
    }
    catch(ArithmeticException expected) {
        
    }
    try {
        MathUtils.gcd(0, Integer.MIN_VALUE);
        
    }
    catch(ArithmeticException expected) {
        
    }
    try {
        MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);
        
    }
    catch(ArithmeticException expected) {
        
    }
}

---
---
public void testGcd_catena_4() {
    int a = 30;
    int b = 50;
    int c = 77;
    assertEquals(a, MathUtils.gcd( - a, 0));
    try {
        MathUtils.gcd(Integer.MIN_VALUE, 0);
        
    }
    catch(ArithmeticException expected) {
        
    }
    try {
        MathUtils.gcd(0, Integer.MIN_VALUE);
        
    }
    catch(ArithmeticException expected) {
        
    }
    try {
        MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);
        
    }
    catch(ArithmeticException expected) {
        
    }
}

---
---
public void testGcd_catena_5() {
    int a = 30;
    int b = 50;
    int c = 77;
    assertEquals(10, MathUtils.gcd(a, b));
    try {
        MathUtils.gcd(Integer.MIN_VALUE, 0);
        
    }
    catch(ArithmeticException expected) {
        
    }
    try {
        MathUtils.gcd(0, Integer.MIN_VALUE);
        
    }
    catch(ArithmeticException expected) {
        
    }
    try {
        MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);
        
    }
    catch(ArithmeticException expected) {
        
    }
}

---
---
public void testGcd_catena_6() {
    int a = 30;
    int b = 50;
    int c = 77;
    assertEquals(10, MathUtils.gcd( - a, b));
    try {
        MathUtils.gcd(Integer.MIN_VALUE, 0);
        
    }
    catch(ArithmeticException expected) {
        
    }
    try {
        MathUtils.gcd(0, Integer.MIN_VALUE);
        
    }
    catch(ArithmeticException expected) {
        
    }
    try {
        MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);
        
    }
    catch(ArithmeticException expected) {
        
    }
}

---
---
public void testGcd_catena_7() {
    int a = 30;
    int b = 50;
    int c = 77;
    assertEquals(10, MathUtils.gcd(a,  - b));
    try {
        MathUtils.gcd(Integer.MIN_VALUE, 0);
        
    }
    catch(ArithmeticException expected) {
        
    }
    try {
        MathUtils.gcd(0, Integer.MIN_VALUE);
        
    }
    catch(ArithmeticException expected) {
        
    }
    try {
        MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);
        
    }
    catch(ArithmeticException expected) {
        
    }
}

---
---
public void testGcd_catena_8() {
    int a = 30;
    int b = 50;
    int c = 77;
    assertEquals(10, MathUtils.gcd( - a,  - b));
    try {
        MathUtils.gcd(Integer.MIN_VALUE, 0);
        
    }
    catch(ArithmeticException expected) {
        
    }
    try {
        MathUtils.gcd(0, Integer.MIN_VALUE);
        
    }
    catch(ArithmeticException expected) {
        
    }
    try {
        MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);
        
    }
    catch(ArithmeticException expected) {
        
    }
}

---
---
public void testGcd_catena_9() {
    int a = 30;
    int b = 50;
    int c = 77;
    assertEquals(1, MathUtils.gcd(a, c));
    try {
        MathUtils.gcd(Integer.MIN_VALUE, 0);
        
    }
    catch(ArithmeticException expected) {
        
    }
    try {
        MathUtils.gcd(0, Integer.MIN_VALUE);
        
    }
    catch(ArithmeticException expected) {
        
    }
    try {
        MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);
        
    }
    catch(ArithmeticException expected) {
        
    }
}

---
---
public void testGcd_catena_10() {
    int a = 30;
    int b = 50;
    int c = 77;
    assertEquals(1, MathUtils.gcd( - a, c));
    try {
        MathUtils.gcd(Integer.MIN_VALUE, 0);
        
    }
    catch(ArithmeticException expected) {
        
    }
    try {
        MathUtils.gcd(0, Integer.MIN_VALUE);
        
    }
    catch(ArithmeticException expected) {
        
    }
    try {
        MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);
        
    }
    catch(ArithmeticException expected) {
        
    }
}

---
---
public void testGcd_catena_11() {
    int a = 30;
    int b = 50;
    int c = 77;
    assertEquals(1, MathUtils.gcd(a,  - c));
    try {
        MathUtils.gcd(Integer.MIN_VALUE, 0);
        
    }
    catch(ArithmeticException expected) {
        
    }
    try {
        MathUtils.gcd(0, Integer.MIN_VALUE);
        
    }
    catch(ArithmeticException expected) {
        
    }
    try {
        MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);
        
    }
    catch(ArithmeticException expected) {
        
    }
}

---
---
public void testGcd_catena_12() {
    int a = 30;
    int b = 50;
    int c = 77;
    assertEquals(1, MathUtils.gcd( - a,  - c));
    try {
        MathUtils.gcd(Integer.MIN_VALUE, 0);
        
    }
    catch(ArithmeticException expected) {
        
    }
    try {
        MathUtils.gcd(0, Integer.MIN_VALUE);
        
    }
    catch(ArithmeticException expected) {
        
    }
    try {
        MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);
        
    }
    catch(ArithmeticException expected) {
        
    }
}

---
---
public void testGcd_catena_13() {
    int a = 30;
    int b = 50;
    int c = 77;
    assertEquals(3 * (1 << 15), MathUtils.gcd(3 * (1 << 20), 9 * (1 << 15)));
    try {
        MathUtils.gcd(Integer.MIN_VALUE, 0);
        
    }
    catch(ArithmeticException expected) {
        
    }
    try {
        MathUtils.gcd(0, Integer.MIN_VALUE);
        
    }
    catch(ArithmeticException expected) {
        
    }
    try {
        MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);
        
    }
    catch(ArithmeticException expected) {
        
    }
}

---
---
public void testGcd_catena_14() {
    int a = 30;
    int b = 50;
    int c = 77;
    assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));
    try {
        MathUtils.gcd(Integer.MIN_VALUE, 0);
        
    }
    catch(ArithmeticException expected) {
        
    }
    try {
        MathUtils.gcd(0, Integer.MIN_VALUE);
        
    }
    catch(ArithmeticException expected) {
        
    }
    try {
        MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);
        
    }
    catch(ArithmeticException expected) {
        
    }
}

---
---
public void testGcd_catena_15() {
    int a = 30;
    int b = 50;
    int c = 77;
    assertEquals(Integer.MAX_VALUE, MathUtils.gcd( - Integer.MAX_VALUE, 0));
    try {
        MathUtils.gcd(Integer.MIN_VALUE, 0);
        
    }
    catch(ArithmeticException expected) {
        
    }
    try {
        MathUtils.gcd(0, Integer.MIN_VALUE);
        
    }
    catch(ArithmeticException expected) {
        
    }
    try {
        MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);
        
    }
    catch(ArithmeticException expected) {
        
    }
}

---
---
public void testGcd_catena_16() {
    int a = 30;
    int b = 50;
    int c = 77;
    assertEquals(1 << 30, MathUtils.gcd(1 << 30,  - Integer.MIN_VALUE));
    try {
        MathUtils.gcd(Integer.MIN_VALUE, 0);
        
    }
    catch(ArithmeticException expected) {
        
    }
    try {
        MathUtils.gcd(0, Integer.MIN_VALUE);
        
    }
    catch(ArithmeticException expected) {
        
    }
    try {
        MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);
        
    }
    catch(ArithmeticException expected) {
        
    }
}

---
---
public void testGcd_catena_17() {
    int a = 30;
    int b = 50;
    int c = 77;
    try {
        MathUtils.gcd(Integer.MIN_VALUE, 0);
        fail("expecting ArithmeticException");
        
    }
    catch(ArithmeticException expected) {
        
    }
    try {
        MathUtils.gcd(0, Integer.MIN_VALUE);
        
    }
    catch(ArithmeticException expected) {
        
    }
    try {
        MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);
        
    }
    catch(ArithmeticException expected) {
        
    }
}

---
---
public void testGcd_catena_18() {
    int a = 30;
    int b = 50;
    int c = 77;
    try {
        MathUtils.gcd(Integer.MIN_VALUE, 0);
        
    }
    catch(ArithmeticException expected) {
        
    }
    try {
        MathUtils.gcd(0, Integer.MIN_VALUE);
        fail("expecting ArithmeticException");
        
    }
    catch(ArithmeticException expected) {
        
    }
    try {
        MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);
        
    }
    catch(ArithmeticException expected) {
        
    }
}

---
---
public void testGcd_catena_19() {
    int a = 30;
    int b = 50;
    int c = 77;
    try {
        MathUtils.gcd(Integer.MIN_VALUE, 0);
        
    }
    catch(ArithmeticException expected) {
        
    }
    try {
        MathUtils.gcd(0, Integer.MIN_VALUE);
        
    }
    catch(ArithmeticException expected) {
        
    }
    try {
        MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);
        fail("expecting ArithmeticException");
        
    }
    catch(ArithmeticException expected) {
        
    }
}

---
@@@
Split test: org.apache.commons.math.util.MathUtilsTest::testLcm
file: /root/workbench/exportInfo/d4j_buggy/Math_99/src/test//org/apache/commons/math/util/MathUtilsTest.java
Begin: Pos(565, 12)
End: Pos(609, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_99/src/test//org/apache/commons/math/util/MathUtilsTest.java
Name: testLcm
Childs: [StatementAssertion<Begin: Pos(570, 9), End: Pos(570, 45)>,
StatementAssertion<Begin: Pos(571, 9), End: Pos(571, 45)>,
StatementAssertion<Begin: Pos(572, 9), End: Pos(572, 45)>,
StatementAssertion<Begin: Pos(573, 9), End: Pos(573, 45)>,
StatementAssertion<Begin: Pos(574, 9), End: Pos(574, 47)>,
StatementAssertion<Begin: Pos(575, 9), End: Pos(575, 48)>,
StatementAssertion<Begin: Pos(576, 9), End: Pos(576, 48)>,
StatementAssertion<Begin: Pos(577, 9), End: Pos(577, 49)>,
StatementAssertion<Begin: Pos(578, 9), End: Pos(578, 48)>,
StatementAssertion<Begin: Pos(582, 9), End: Pos(582, 70)>,
StatementAssertion<Begin: Pos(585, 9), End: Pos(585, 45)>,
StatementAssertion<Begin: Pos(590, 13), End: Pos(590, 50)>,
StatementAssertion<Begin: Pos(598, 13), End: Pos(598, 50)>,
StatementAssertion<Begin: Pos(605, 13), End: Pos(605, 50)>,
]
---
public void testLcm_catena_0() {
    int a = 30;
    int b = 50;
    int c = 77;
    assertEquals(0, MathUtils.lcm(0, b));
    try {
        MathUtils.lcm(Integer.MIN_VALUE, 1);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        MathUtils.lcm(Integer.MIN_VALUE, 1 << 20);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);
        
    }
    catch(ArithmeticException ex) {
        
    }
}

---
---
public void testLcm_catena_1() {
    int a = 30;
    int b = 50;
    int c = 77;
    assertEquals(0, MathUtils.lcm(a, 0));
    try {
        MathUtils.lcm(Integer.MIN_VALUE, 1);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        MathUtils.lcm(Integer.MIN_VALUE, 1 << 20);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);
        
    }
    catch(ArithmeticException ex) {
        
    }
}

---
---
public void testLcm_catena_2() {
    int a = 30;
    int b = 50;
    int c = 77;
    assertEquals(b, MathUtils.lcm(1, b));
    try {
        MathUtils.lcm(Integer.MIN_VALUE, 1);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        MathUtils.lcm(Integer.MIN_VALUE, 1 << 20);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);
        
    }
    catch(ArithmeticException ex) {
        
    }
}

---
---
public void testLcm_catena_3() {
    int a = 30;
    int b = 50;
    int c = 77;
    assertEquals(a, MathUtils.lcm(a, 1));
    try {
        MathUtils.lcm(Integer.MIN_VALUE, 1);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        MathUtils.lcm(Integer.MIN_VALUE, 1 << 20);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);
        
    }
    catch(ArithmeticException ex) {
        
    }
}

---
---
public void testLcm_catena_4() {
    int a = 30;
    int b = 50;
    int c = 77;
    assertEquals(150, MathUtils.lcm(a, b));
    try {
        MathUtils.lcm(Integer.MIN_VALUE, 1);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        MathUtils.lcm(Integer.MIN_VALUE, 1 << 20);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);
        
    }
    catch(ArithmeticException ex) {
        
    }
}

---
---
public void testLcm_catena_5() {
    int a = 30;
    int b = 50;
    int c = 77;
    assertEquals(150, MathUtils.lcm( - a, b));
    try {
        MathUtils.lcm(Integer.MIN_VALUE, 1);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        MathUtils.lcm(Integer.MIN_VALUE, 1 << 20);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);
        
    }
    catch(ArithmeticException ex) {
        
    }
}

---
---
public void testLcm_catena_6() {
    int a = 30;
    int b = 50;
    int c = 77;
    assertEquals(150, MathUtils.lcm(a,  - b));
    try {
        MathUtils.lcm(Integer.MIN_VALUE, 1);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        MathUtils.lcm(Integer.MIN_VALUE, 1 << 20);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);
        
    }
    catch(ArithmeticException ex) {
        
    }
}

---
---
public void testLcm_catena_7() {
    int a = 30;
    int b = 50;
    int c = 77;
    assertEquals(150, MathUtils.lcm( - a,  - b));
    try {
        MathUtils.lcm(Integer.MIN_VALUE, 1);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        MathUtils.lcm(Integer.MIN_VALUE, 1 << 20);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);
        
    }
    catch(ArithmeticException ex) {
        
    }
}

---
---
public void testLcm_catena_8() {
    int a = 30;
    int b = 50;
    int c = 77;
    assertEquals(2310, MathUtils.lcm(a, c));
    try {
        MathUtils.lcm(Integer.MIN_VALUE, 1);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        MathUtils.lcm(Integer.MIN_VALUE, 1 << 20);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);
        
    }
    catch(ArithmeticException ex) {
        
    }
}

---
---
public void testLcm_catena_9() {
    int a = 30;
    int b = 50;
    int c = 77;
    assertEquals((1 << 20) * 15, MathUtils.lcm((1 << 20) * 3, (1 << 20) * 5));
    try {
        MathUtils.lcm(Integer.MIN_VALUE, 1);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        MathUtils.lcm(Integer.MIN_VALUE, 1 << 20);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);
        
    }
    catch(ArithmeticException ex) {
        
    }
}

---
---
public void testLcm_catena_10() {
    int a = 30;
    int b = 50;
    int c = 77;
    assertEquals(0, MathUtils.lcm(0, 0));
    try {
        MathUtils.lcm(Integer.MIN_VALUE, 1);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        MathUtils.lcm(Integer.MIN_VALUE, 1 << 20);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);
        
    }
    catch(ArithmeticException ex) {
        
    }
}

---
---
public void testLcm_catena_11() {
    int a = 30;
    int b = 50;
    int c = 77;
    try {
        MathUtils.lcm(Integer.MIN_VALUE, 1);
        fail("Expecting ArithmeticException");
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        MathUtils.lcm(Integer.MIN_VALUE, 1 << 20);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);
        
    }
    catch(ArithmeticException ex) {
        
    }
}

---
---
public void testLcm_catena_12() {
    int a = 30;
    int b = 50;
    int c = 77;
    try {
        MathUtils.lcm(Integer.MIN_VALUE, 1);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        MathUtils.lcm(Integer.MIN_VALUE, 1 << 20);
        fail("Expecting ArithmeticException");
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);
        
    }
    catch(ArithmeticException ex) {
        
    }
}

---
---
public void testLcm_catena_13() {
    int a = 30;
    int b = 50;
    int c = 77;
    try {
        MathUtils.lcm(Integer.MIN_VALUE, 1);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        MathUtils.lcm(Integer.MIN_VALUE, 1 << 20);
        
    }
    catch(ArithmeticException ex) {
        
    }
    try {
        MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);
        fail("Expecting ArithmeticException");
        
    }
    catch(ArithmeticException ex) {
        
    }
}

---
--------------------
Run: Math_3
@@@
Split test: org.apache.commons.math3.util.MathArraysTest::testLinearCombinationWithSingleElementArray
file: /root/workbench/exportInfo/d4j_buggy/Math_3/src/test/java//org/apache/commons/math3/util/MathArraysTest.java
Begin: Pos(586, 5)
End: Pos(592, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_3/src/test/java//org/apache/commons/math3/util/MathArraysTest.java
Name: testLinearCombinationWithSingleElementArray
Childs: [StatementAssertion<Begin: Pos(591, 9), End: Pos(591, 81)>,
]
--------------------
Run: Math_21
@@@
Split test: org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest::testMath789
file: /root/workbench/exportInfo/d4j_buggy/Math_21/src/test/java//org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java
Begin: Pos(75, 5)
End: Pos(110, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_21/src/test/java//org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java
Name: testMath789
Childs: [StatementAssertion<Begin: Pos(86, 9), End: Pos(86, 76)>,
StatementAssertion<Begin: Pos(97, 9), End: Pos(97, 76)>,
StatementAssertion<Begin: Pos(108, 9), End: Pos(108, 76)>,
]
---
@Test public void testMath789_catena_0() {
    final RealMatrix m1 = MatrixUtils.createRealMatrix(new double[][] {
         {
            0.013445532, 0.010394690, 0.009881156, 0.010499559
        },  {
            0.010394690, 0.023006616, 0.008196856, 0.010732709
        },  {
            0.009881156, 0.008196856, 0.019023866, 0.009210099
        },  {
            0.010499559, 0.010732709, 0.009210099, 0.019107243
        }
    });
    RealMatrix root1 = new RectangularCholeskyDecomposition(m1, 1.0e-10).getRootMatrix();
    RealMatrix rebuiltM1 = root1.multiply(root1.transpose());
    Assert.assertEquals(0.0, m1.subtract(rebuiltM1).getNorm(), 1.0e-16);
    final RealMatrix m2 = MatrixUtils.createRealMatrix(new double[][] {
         {
            0.0, 0.0, 0.0, 0.0, 0.0
        },  {
            0.0, 0.013445532, 0.010394690, 0.009881156, 0.010499559
        },  {
            0.0, 0.010394690, 0.023006616, 0.008196856, 0.010732709
        },  {
            0.0, 0.009881156, 0.008196856, 0.019023866, 0.009210099
        },  {
            0.0, 0.010499559, 0.010732709, 0.009210099, 0.019107243
        }
    });
    RealMatrix root2 = new RectangularCholeskyDecomposition(m2, 1.0e-10).getRootMatrix();
    RealMatrix rebuiltM2 = root2.multiply(root2.transpose());
    final RealMatrix m3 = MatrixUtils.createRealMatrix(new double[][] {
         {
            0.013445532, 0.010394690, 0.0, 0.009881156, 0.010499559
        },  {
            0.010394690, 0.023006616, 0.0, 0.008196856, 0.010732709
        },  {
            0.0, 0.0, 0.0, 0.0, 0.0
        },  {
            0.009881156, 0.008196856, 0.0, 0.019023866, 0.009210099
        },  {
            0.010499559, 0.010732709, 0.0, 0.009210099, 0.019107243
        }
    });
    RealMatrix root3 = new RectangularCholeskyDecomposition(m3, 1.0e-10).getRootMatrix();
    RealMatrix rebuiltM3 = root3.multiply(root3.transpose());
    
}

---
---
@Test public void testMath789_catena_1() {
    final RealMatrix m1 = MatrixUtils.createRealMatrix(new double[][] {
         {
            0.013445532, 0.010394690, 0.009881156, 0.010499559
        },  {
            0.010394690, 0.023006616, 0.008196856, 0.010732709
        },  {
            0.009881156, 0.008196856, 0.019023866, 0.009210099
        },  {
            0.010499559, 0.010732709, 0.009210099, 0.019107243
        }
    });
    RealMatrix root1 = new RectangularCholeskyDecomposition(m1, 1.0e-10).getRootMatrix();
    RealMatrix rebuiltM1 = root1.multiply(root1.transpose());
    final RealMatrix m2 = MatrixUtils.createRealMatrix(new double[][] {
         {
            0.0, 0.0, 0.0, 0.0, 0.0
        },  {
            0.0, 0.013445532, 0.010394690, 0.009881156, 0.010499559
        },  {
            0.0, 0.010394690, 0.023006616, 0.008196856, 0.010732709
        },  {
            0.0, 0.009881156, 0.008196856, 0.019023866, 0.009210099
        },  {
            0.0, 0.010499559, 0.010732709, 0.009210099, 0.019107243
        }
    });
    RealMatrix root2 = new RectangularCholeskyDecomposition(m2, 1.0e-10).getRootMatrix();
    RealMatrix rebuiltM2 = root2.multiply(root2.transpose());
    Assert.assertEquals(0.0, m2.subtract(rebuiltM2).getNorm(), 1.0e-16);
    final RealMatrix m3 = MatrixUtils.createRealMatrix(new double[][] {
         {
            0.013445532, 0.010394690, 0.0, 0.009881156, 0.010499559
        },  {
            0.010394690, 0.023006616, 0.0, 0.008196856, 0.010732709
        },  {
            0.0, 0.0, 0.0, 0.0, 0.0
        },  {
            0.009881156, 0.008196856, 0.0, 0.019023866, 0.009210099
        },  {
            0.010499559, 0.010732709, 0.0, 0.009210099, 0.019107243
        }
    });
    RealMatrix root3 = new RectangularCholeskyDecomposition(m3, 1.0e-10).getRootMatrix();
    RealMatrix rebuiltM3 = root3.multiply(root3.transpose());
    
}

---
---
@Test public void testMath789_catena_2() {
    final RealMatrix m1 = MatrixUtils.createRealMatrix(new double[][] {
         {
            0.013445532, 0.010394690, 0.009881156, 0.010499559
        },  {
            0.010394690, 0.023006616, 0.008196856, 0.010732709
        },  {
            0.009881156, 0.008196856, 0.019023866, 0.009210099
        },  {
            0.010499559, 0.010732709, 0.009210099, 0.019107243
        }
    });
    RealMatrix root1 = new RectangularCholeskyDecomposition(m1, 1.0e-10).getRootMatrix();
    RealMatrix rebuiltM1 = root1.multiply(root1.transpose());
    final RealMatrix m2 = MatrixUtils.createRealMatrix(new double[][] {
         {
            0.0, 0.0, 0.0, 0.0, 0.0
        },  {
            0.0, 0.013445532, 0.010394690, 0.009881156, 0.010499559
        },  {
            0.0, 0.010394690, 0.023006616, 0.008196856, 0.010732709
        },  {
            0.0, 0.009881156, 0.008196856, 0.019023866, 0.009210099
        },  {
            0.0, 0.010499559, 0.010732709, 0.009210099, 0.019107243
        }
    });
    RealMatrix root2 = new RectangularCholeskyDecomposition(m2, 1.0e-10).getRootMatrix();
    RealMatrix rebuiltM2 = root2.multiply(root2.transpose());
    final RealMatrix m3 = MatrixUtils.createRealMatrix(new double[][] {
         {
            0.013445532, 0.010394690, 0.0, 0.009881156, 0.010499559
        },  {
            0.010394690, 0.023006616, 0.0, 0.008196856, 0.010732709
        },  {
            0.0, 0.0, 0.0, 0.0, 0.0
        },  {
            0.009881156, 0.008196856, 0.0, 0.019023866, 0.009210099
        },  {
            0.010499559, 0.010732709, 0.0, 0.009210099, 0.019107243
        }
    });
    RealMatrix root3 = new RectangularCholeskyDecomposition(m3, 1.0e-10).getRootMatrix();
    RealMatrix rebuiltM3 = root3.multiply(root3.transpose());
    Assert.assertEquals(0.0, m3.subtract(rebuiltM3).getNorm(), 1.0e-16);
    
}

---
@@@
Split test: org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest::testFullRank
file: /root/workbench/exportInfo/d4j_buggy/Math_21/src/test/java//org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java
Begin: Pos(50, 5)
End: Pos(73, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_21/src/test/java//org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java
Name: testFullRank
Childs: [StatementAssertion<Begin: Pos(67, 9), End: Pos(67, 74)>,
StatementAssertion<Begin: Pos(71, 9), End: Pos(71, 63)>,
]
---
@Test public void testFullRank_catena_0() {
    RealMatrix base = MatrixUtils.createRealMatrix(new double[][] {
         {
            0.1159548705, 0., 0., 0.
        },  {
            0.0896442724, 0.1223540781, 0., 0.
        },  {
            0.0852155322, 4.558668e-3, 0.1083577299, 0.
        },  {
            0.0905486674, 0.0213768077, 0.0128878333, 0.1014155693
        }
    });
    RealMatrix m = base.multiply(base.transpose());
    RectangularCholeskyDecomposition d = new RectangularCholeskyDecomposition(m, 1.0e-10);
    RealMatrix root = d.getRootMatrix();
    RealMatrix rebuiltM = root.multiply(root.transpose());
    Assert.assertEquals(0.0, m.subtract(rebuiltM).getNorm(), 1.0e-15);
    
}

---
---
@Test public void testFullRank_catena_1() {
    RealMatrix base = MatrixUtils.createRealMatrix(new double[][] {
         {
            0.1159548705, 0., 0., 0.
        },  {
            0.0896442724, 0.1223540781, 0., 0.
        },  {
            0.0852155322, 4.558668e-3, 0.1083577299, 0.
        },  {
            0.0905486674, 0.0213768077, 0.0128878333, 0.1014155693
        }
    });
    RealMatrix m = base.multiply(base.transpose());
    RectangularCholeskyDecomposition d = new RectangularCholeskyDecomposition(m, 1.0e-10);
    RealMatrix root = d.getRootMatrix();
    RealMatrix rebuiltM = root.multiply(root.transpose());
    Assert.assertTrue(root.subtract(base).getNorm() > 0.3);
    
}

---
--------------------
Run: Math_76
@@@
Split test: org.apache.commons.math.linear.SingularValueSolverTest::testMath320A
file: /root/workbench/exportInfo/d4j_buggy/Math_76/src/test/java//org/apache/commons/math/linear/SingularValueSolverTest.java
Begin: Pos(167, 5)
End: Pos(209, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_76/src/test/java//org/apache/commons/math/linear/SingularValueSolverTest.java
Name: testMath320A
Childs: [StatementAssertion<Begin: Pos(181, 9), End: Pos(181, 69)>,
StatementAssertion<Begin: Pos(183, 13), End: Pos(183, 74)>,
StatementAssertion<Begin: Pos(188, 9), End: Pos(188, 77)>,
StatementAssertion<Begin: Pos(193, 9), End: Pos(193, 68)>,
StatementAssertion<Begin: Pos(204, 21), End: Pos(204, 88)>,
]
---
@Test public void testMath320A_catena_0() {
    RealMatrix rm = new Array2DRowRealMatrix(new double[][] {
         {
            1.0, 2.0, 3.0
        },  {
            2.0, 3.0, 4.0
        },  {
            3.0, 5.0, 7.0
        }
    });
    double s439 = Math.sqrt(439.0);
    double[]reference = new double[] {
        Math.sqrt(3.0 * (21.0 + s439)), Math.sqrt(3.0 * (21.0 - s439))
    };
    SingularValueDecomposition svd = new SingularValueDecompositionImpl(rm);
    double[]singularValues = svd.getSingularValues();
    Assert.assertEquals(reference.length, singularValues.length);
    for(int i = 0;
    i < reference.length;
     ++ i) {
        
    }
    RealMatrix recomposed = svd.getU().multiply(svd.getS()).multiply(svd.getVT());
    double[]b = new double[] {
        5.0, 6.0, 7.0
    };
    double[]resSVD = svd.getSolver().solve(b);
    double svdMinResidual = residual(rm, resSVD, b);
    double epsilon = 2 * Math.ulp(svdMinResidual);
    double h = 0.1;
    int k = 3;
    for(double d0 =  - k * h;
    d0 <= k * h;
    d0 += h) {
        for(double d1 =  - k * h;
        d1 <= k * h;
        d1 += h) {
            for(double d2 =  - k * h;
            d2 <= k * h;
            d2 += h) {
                double[]x = new double[] {
                    resSVD[0] + d0, resSVD[1] + d1, resSVD[2] + d2
                };
                
            }
        }
    }
}

---
---
@Test public void testMath320A_catena_1() {
    RealMatrix rm = new Array2DRowRealMatrix(new double[][] {
         {
            1.0, 2.0, 3.0
        },  {
            2.0, 3.0, 4.0
        },  {
            3.0, 5.0, 7.0
        }
    });
    double s439 = Math.sqrt(439.0);
    double[]reference = new double[] {
        Math.sqrt(3.0 * (21.0 + s439)), Math.sqrt(3.0 * (21.0 - s439))
    };
    SingularValueDecomposition svd = new SingularValueDecompositionImpl(rm);
    double[]singularValues = svd.getSingularValues();
    for(int i = 0;
    i < reference.length;
     ++ i) {
        Assert.assertEquals(reference[i], singularValues[i], 4.0e-13);
        
    }
    RealMatrix recomposed = svd.getU().multiply(svd.getS()).multiply(svd.getVT());
    double[]b = new double[] {
        5.0, 6.0, 7.0
    };
    double[]resSVD = svd.getSolver().solve(b);
    double svdMinResidual = residual(rm, resSVD, b);
    double epsilon = 2 * Math.ulp(svdMinResidual);
    double h = 0.1;
    int k = 3;
    for(double d0 =  - k * h;
    d0 <= k * h;
    d0 += h) {
        for(double d1 =  - k * h;
        d1 <= k * h;
        d1 += h) {
            for(double d2 =  - k * h;
            d2 <= k * h;
            d2 += h) {
                double[]x = new double[] {
                    resSVD[0] + d0, resSVD[1] + d1, resSVD[2] + d2
                };
                
            }
        }
    }
}

---
---
@Test public void testMath320A_catena_2() {
    RealMatrix rm = new Array2DRowRealMatrix(new double[][] {
         {
            1.0, 2.0, 3.0
        },  {
            2.0, 3.0, 4.0
        },  {
            3.0, 5.0, 7.0
        }
    });
    double s439 = Math.sqrt(439.0);
    double[]reference = new double[] {
        Math.sqrt(3.0 * (21.0 + s439)), Math.sqrt(3.0 * (21.0 - s439))
    };
    SingularValueDecomposition svd = new SingularValueDecompositionImpl(rm);
    double[]singularValues = svd.getSingularValues();
    for(int i = 0;
    i < reference.length;
     ++ i) {
        
    }
    RealMatrix recomposed = svd.getU().multiply(svd.getS()).multiply(svd.getVT());
    Assert.assertEquals(0.0, recomposed.subtract(rm).getNorm(), 5.0e-13);
    double[]b = new double[] {
        5.0, 6.0, 7.0
    };
    double[]resSVD = svd.getSolver().solve(b);
    double svdMinResidual = residual(rm, resSVD, b);
    double epsilon = 2 * Math.ulp(svdMinResidual);
    double h = 0.1;
    int k = 3;
    for(double d0 =  - k * h;
    d0 <= k * h;
    d0 += h) {
        for(double d1 =  - k * h;
        d1 <= k * h;
        d1 += h) {
            for(double d2 =  - k * h;
            d2 <= k * h;
            d2 += h) {
                double[]x = new double[] {
                    resSVD[0] + d0, resSVD[1] + d1, resSVD[2] + d2
                };
                
            }
        }
    }
}

---
---
@Test public void testMath320A_catena_3() {
    RealMatrix rm = new Array2DRowRealMatrix(new double[][] {
         {
            1.0, 2.0, 3.0
        },  {
            2.0, 3.0, 4.0
        },  {
            3.0, 5.0, 7.0
        }
    });
    double s439 = Math.sqrt(439.0);
    double[]reference = new double[] {
        Math.sqrt(3.0 * (21.0 + s439)), Math.sqrt(3.0 * (21.0 - s439))
    };
    SingularValueDecomposition svd = new SingularValueDecompositionImpl(rm);
    double[]singularValues = svd.getSingularValues();
    for(int i = 0;
    i < reference.length;
     ++ i) {
        
    }
    RealMatrix recomposed = svd.getU().multiply(svd.getS()).multiply(svd.getVT());
    double[]b = new double[] {
        5.0, 6.0, 7.0
    };
    double[]resSVD = svd.getSolver().solve(b);
    Assert.assertEquals(rm.getColumnDimension(), resSVD.length);
    double svdMinResidual = residual(rm, resSVD, b);
    double epsilon = 2 * Math.ulp(svdMinResidual);
    double h = 0.1;
    int k = 3;
    for(double d0 =  - k * h;
    d0 <= k * h;
    d0 += h) {
        for(double d1 =  - k * h;
        d1 <= k * h;
        d1 += h) {
            for(double d2 =  - k * h;
            d2 <= k * h;
            d2 += h) {
                double[]x = new double[] {
                    resSVD[0] + d0, resSVD[1] + d1, resSVD[2] + d2
                };
                
            }
        }
    }
}

---
---
@Test public void testMath320A_catena_4() {
    RealMatrix rm = new Array2DRowRealMatrix(new double[][] {
         {
            1.0, 2.0, 3.0
        },  {
            2.0, 3.0, 4.0
        },  {
            3.0, 5.0, 7.0
        }
    });
    double s439 = Math.sqrt(439.0);
    double[]reference = new double[] {
        Math.sqrt(3.0 * (21.0 + s439)), Math.sqrt(3.0 * (21.0 - s439))
    };
    SingularValueDecomposition svd = new SingularValueDecompositionImpl(rm);
    double[]singularValues = svd.getSingularValues();
    for(int i = 0;
    i < reference.length;
     ++ i) {
        
    }
    RealMatrix recomposed = svd.getU().multiply(svd.getS()).multiply(svd.getVT());
    double[]b = new double[] {
        5.0, 6.0, 7.0
    };
    double[]resSVD = svd.getSolver().solve(b);
    double svdMinResidual = residual(rm, resSVD, b);
    double epsilon = 2 * Math.ulp(svdMinResidual);
    double h = 0.1;
    int k = 3;
    for(double d0 =  - k * h;
    d0 <= k * h;
    d0 += h) {
        for(double d1 =  - k * h;
        d1 <= k * h;
        d1 += h) {
            for(double d2 =  - k * h;
            d2 <= k * h;
            d2 += h) {
                double[]x = new double[] {
                    resSVD[0] + d0, resSVD[1] + d1, resSVD[2] + d2
                };
                Assert.assertTrue((residual(rm, x, b) - svdMinResidual) >  - epsilon);
                
            }
        }
    }
}

---
@@@
Split test: org.apache.commons.math.linear.SingularValueSolverTest::testMath320B
file: /root/workbench/exportInfo/d4j_buggy/Math_76/src/test/java//org/apache/commons/math/linear/SingularValueSolverTest.java
Begin: Pos(211, 5)
End: Pos(220, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_76/src/test/java//org/apache/commons/math/linear/SingularValueSolverTest.java
Name: testMath320B
Childs: [StatementAssertion<Begin: Pos(219, 9), End: Pos(219, 77)>,
]
--------------------
Run: Math_102
@@@
Split test: org.apache.commons.math.stat.inference.ChiSquareFactoryTest::testChiSquareLargeTestStatistic
file: /root/workbench/exportInfo/d4j_buggy/Math_102/src/test//org/apache/commons/math/stat/inference/ChiSquareFactoryTest.java
# Exception:
Traceback (most recent call last):
  File "run.py", line 39, in run
    fti, check = spliter.process_test_node_v2(path2file, test[1])
  File "/root/workbench/splitTests/spliter.py", line 259, in process_test_node_v2
    node = get_only_node(name, _globals)
  File "/root/workbench/splitTests/util.py", line 39, in get_only_node
    raise ParseError('Cannot find method <{}> in AST'.format(name))
util.ParseError: Cannot find method <testChiSquareLargeTestStatistic> in AST

---
@@@
Split test: org.apache.commons.math.stat.inference.ChiSquareFactoryTest::testChiSquare
file: /root/workbench/exportInfo/d4j_buggy/Math_102/src/test//org/apache/commons/math/stat/inference/ChiSquareFactoryTest.java
# Exception:
Traceback (most recent call last):
  File "run.py", line 39, in run
    fti, check = spliter.process_test_node_v2(path2file, test[1])
  File "/root/workbench/splitTests/spliter.py", line 259, in process_test_node_v2
    node = get_only_node(name, _globals)
  File "/root/workbench/splitTests/util.py", line 39, in get_only_node
    raise ParseError('Cannot find method <{}> in AST'.format(name))
util.ParseError: Cannot find method <testChiSquare> in AST

---
@@@
Split test: org.apache.commons.math.stat.inference.ChiSquareTestTest::testChiSquareLargeTestStatistic
file: /root/workbench/exportInfo/d4j_buggy/Math_102/src/test//org/apache/commons/math/stat/inference/ChiSquareTestTest.java
Begin: Pos(170, 12)
End: Pos(185, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_102/src/test//org/apache/commons/math/stat/inference/ChiSquareTestTest.java
Name: testChiSquareLargeTestStatistic
Childs: [StatementAssertion<Begin: Pos(182, 9), End: Pos(182, 59)>,
StatementAssertion<Begin: Pos(183, 9), End: Pos(184, 77)>,
]
---
public void testChiSquareLargeTestStatistic_catena_0()throws Exception {
    double[]exp = new double[] {
        3389119.5, 649136.6, 285745.4, 25357364.76, 11291189.78, 543628.0, 232921.0, 437665.75
    };
    long[]obs = new long[] {
        2372383, 584222, 257170, 17750155, 7903832, 489265, 209628, 393899
    };
    org.apache.commons.math.stat.inference.ChiSquareTestImpl csti = new org.apache.commons.math.stat.inference.ChiSquareTestImpl();
    double cst = csti.chiSquareTest(exp, obs);
    assertEquals("chi-square p-value", 0.0, cst, 1E-3);
    
}

---
---
public void testChiSquareLargeTestStatistic_catena_1()throws Exception {
    double[]exp = new double[] {
        3389119.5, 649136.6, 285745.4, 25357364.76, 11291189.78, 543628.0, 232921.0, 437665.75
    };
    long[]obs = new long[] {
        2372383, 584222, 257170, 17750155, 7903832, 489265, 209628, 393899
    };
    org.apache.commons.math.stat.inference.ChiSquareTestImpl csti = new org.apache.commons.math.stat.inference.ChiSquareTestImpl();
    double cst = csti.chiSquareTest(exp, obs);
    assertEquals("chi-square test statistic", 114875.90421929007, testStatistic.chiSquare(exp, obs), 1E-9);
    
}

---
@@@
Split test: org.apache.commons.math.stat.inference.ChiSquareTestTest::testChiSquare
file: /root/workbench/exportInfo/d4j_buggy/Math_102/src/test//org/apache/commons/math/stat/inference/ChiSquareTestTest.java
# check: Use pattern matching: testStatistic.chiSquareTest
StatementExpression is in safe: <testStatistic.chiSquareTest>
Use pattern matching: testStatistic.chiSquareTest
StatementExpression is in safe: <testStatistic.chiSquareTest>
Use pattern matching: testStatistic.chiSquareTest
StatementExpression is in safe: <testStatistic.chiSquareTest>
Begin: Pos(46, 12)
End: Pos(110, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_102/src/test//org/apache/commons/math/stat/inference/ChiSquareTestTest.java
Name: testChiSquare
Childs: [StatementAssertion<Begin: Pos(55, 9), End: Pos(55, 104)>,
StatementAssertion<Begin: Pos(56, 9), End: Pos(56, 115)>,
StatementAssertion<Begin: Pos(60, 9), End: Pos(60, 124)>,
StatementAssertion<Begin: Pos(61, 9), End: Pos(61, 121)>,
StatementAssertion<Begin: Pos(62, 9), End: Pos(62, 102)>,
StatementAssertion<Begin: Pos(63, 9), End: Pos(63, 103)>,
StatementAssertion<Begin: Pos(67, 13), End: Pos(67, 74)>,
StatementAssertion<Begin: Pos(76, 13), End: Pos(76, 75)>,
StatementAssertion<Begin: Pos(86, 13), End: Pos(86, 85)>,
StatementAssertion<Begin: Pos(95, 13), End: Pos(95, 74)>,
StatementAssertion<Begin: Pos(105, 13), End: Pos(105, 74)>,
]
---
public void testChiSquare_catena_0()throws Exception {
    long[]observed =  {
        10, 9, 11
    };
    double[]expected =  {
        10, 10, 10
    };
    assertEquals("chi-square statistic", 0.2, testStatistic.chiSquare(expected, observed), 10E-12);
    long[]observed1 =  {
        500, 623, 72, 70, 31
    };
    double[]expected1 =  {
        485, 541, 82, 61, 37
    };
    try {
        testStatistic.chiSquareTest(expected1, observed1, 95);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    long[]tooShortObs =  {
        0
    };
    double[]tooShortEx =  {
        1
    };
    try {
        testStatistic.chiSquare(tooShortEx, tooShortObs);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    long[]unMatchedObs =  {
        0, 1, 2, 3
    };
    double[]unMatchedEx =  {
        1, 1, 2
    };
    try {
        testStatistic.chiSquare(unMatchedEx, unMatchedObs);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    expected[0] = 0;
    try {
        testStatistic.chiSquareTest(expected, observed, .01);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    expected[0] = 1;
    observed[0] =  - 1;
    try {
        testStatistic.chiSquareTest(expected, observed, .01);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
}

---
---
public void testChiSquare_catena_1()throws Exception {
    long[]observed =  {
        10, 9, 11
    };
    double[]expected =  {
        10, 10, 10
    };
    assertEquals("chi-square p-value", 0.904837418036, testStatistic.chiSquareTest(expected, observed), 1E-10);
    long[]observed1 =  {
        500, 623, 72, 70, 31
    };
    double[]expected1 =  {
        485, 541, 82, 61, 37
    };
    try {
        testStatistic.chiSquareTest(expected1, observed1, 95);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    long[]tooShortObs =  {
        0
    };
    double[]tooShortEx =  {
        1
    };
    try {
        testStatistic.chiSquare(tooShortEx, tooShortObs);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    long[]unMatchedObs =  {
        0, 1, 2, 3
    };
    double[]unMatchedEx =  {
        1, 1, 2
    };
    try {
        testStatistic.chiSquare(unMatchedEx, unMatchedObs);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    expected[0] = 0;
    try {
        testStatistic.chiSquareTest(expected, observed, .01);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    expected[0] = 1;
    observed[0] =  - 1;
    try {
        testStatistic.chiSquareTest(expected, observed, .01);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
}

---
---
public void testChiSquare_catena_2()throws Exception {
    long[]observed =  {
        10, 9, 11
    };
    double[]expected =  {
        10, 10, 10
    };
    long[]observed1 =  {
        500, 623, 72, 70, 31
    };
    double[]expected1 =  {
        485, 541, 82, 61, 37
    };
    assertEquals("chi-square test statistic", 9.023307936427388, testStatistic.chiSquare(expected1, observed1), 1E-10);
    try {
        testStatistic.chiSquareTest(expected1, observed1, 95);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    long[]tooShortObs =  {
        0
    };
    double[]tooShortEx =  {
        1
    };
    try {
        testStatistic.chiSquare(tooShortEx, tooShortObs);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    long[]unMatchedObs =  {
        0, 1, 2, 3
    };
    double[]unMatchedEx =  {
        1, 1, 2
    };
    try {
        testStatistic.chiSquare(unMatchedEx, unMatchedObs);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    expected[0] = 0;
    try {
        testStatistic.chiSquareTest(expected, observed, .01);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    expected[0] = 1;
    observed[0] =  - 1;
    try {
        testStatistic.chiSquareTest(expected, observed, .01);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
}

---
---
public void testChiSquare_catena_3()throws Exception {
    long[]observed =  {
        10, 9, 11
    };
    double[]expected =  {
        10, 10, 10
    };
    long[]observed1 =  {
        500, 623, 72, 70, 31
    };
    double[]expected1 =  {
        485, 541, 82, 61, 37
    };
    assertEquals("chi-square p-value", 0.06051952647453607, testStatistic.chiSquareTest(expected1, observed1), 1E-9);
    try {
        testStatistic.chiSquareTest(expected1, observed1, 95);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    long[]tooShortObs =  {
        0
    };
    double[]tooShortEx =  {
        1
    };
    try {
        testStatistic.chiSquare(tooShortEx, tooShortObs);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    long[]unMatchedObs =  {
        0, 1, 2, 3
    };
    double[]unMatchedEx =  {
        1, 1, 2
    };
    try {
        testStatistic.chiSquare(unMatchedEx, unMatchedObs);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    expected[0] = 0;
    try {
        testStatistic.chiSquareTest(expected, observed, .01);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    expected[0] = 1;
    observed[0] =  - 1;
    try {
        testStatistic.chiSquareTest(expected, observed, .01);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
}

---
---
public void testChiSquare_catena_4()throws Exception {
    long[]observed =  {
        10, 9, 11
    };
    double[]expected =  {
        10, 10, 10
    };
    long[]observed1 =  {
        500, 623, 72, 70, 31
    };
    double[]expected1 =  {
        485, 541, 82, 61, 37
    };
    assertTrue("chi-square test reject", testStatistic.chiSquareTest(expected1, observed1, 0.08));
    try {
        testStatistic.chiSquareTest(expected1, observed1, 95);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    long[]tooShortObs =  {
        0
    };
    double[]tooShortEx =  {
        1
    };
    try {
        testStatistic.chiSquare(tooShortEx, tooShortObs);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    long[]unMatchedObs =  {
        0, 1, 2, 3
    };
    double[]unMatchedEx =  {
        1, 1, 2
    };
    try {
        testStatistic.chiSquare(unMatchedEx, unMatchedObs);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    expected[0] = 0;
    try {
        testStatistic.chiSquareTest(expected, observed, .01);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    expected[0] = 1;
    observed[0] =  - 1;
    try {
        testStatistic.chiSquareTest(expected, observed, .01);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
}

---
---
public void testChiSquare_catena_5()throws Exception {
    long[]observed =  {
        10, 9, 11
    };
    double[]expected =  {
        10, 10, 10
    };
    long[]observed1 =  {
        500, 623, 72, 70, 31
    };
    double[]expected1 =  {
        485, 541, 82, 61, 37
    };
    assertTrue("chi-square test accept",  ! testStatistic.chiSquareTest(expected1, observed1, 0.05));
    try {
        testStatistic.chiSquareTest(expected1, observed1, 95);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    long[]tooShortObs =  {
        0
    };
    double[]tooShortEx =  {
        1
    };
    try {
        testStatistic.chiSquare(tooShortEx, tooShortObs);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    long[]unMatchedObs =  {
        0, 1, 2, 3
    };
    double[]unMatchedEx =  {
        1, 1, 2
    };
    try {
        testStatistic.chiSquare(unMatchedEx, unMatchedObs);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    expected[0] = 0;
    try {
        testStatistic.chiSquareTest(expected, observed, .01);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    expected[0] = 1;
    observed[0] =  - 1;
    try {
        testStatistic.chiSquareTest(expected, observed, .01);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
}

---
---
public void testChiSquare_catena_6()throws Exception {
    long[]observed =  {
        10, 9, 11
    };
    double[]expected =  {
        10, 10, 10
    };
    long[]observed1 =  {
        500, 623, 72, 70, 31
    };
    double[]expected1 =  {
        485, 541, 82, 61, 37
    };
    try {
        testStatistic.chiSquareTest(expected1, observed1, 95);
        fail("alpha out of range, IllegalArgumentException expected");
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    long[]tooShortObs =  {
        0
    };
    double[]tooShortEx =  {
        1
    };
    try {
        testStatistic.chiSquare(tooShortEx, tooShortObs);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    long[]unMatchedObs =  {
        0, 1, 2, 3
    };
    double[]unMatchedEx =  {
        1, 1, 2
    };
    try {
        testStatistic.chiSquare(unMatchedEx, unMatchedObs);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    expected[0] = 0;
    try {
        testStatistic.chiSquareTest(expected, observed, .01);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    expected[0] = 1;
    observed[0] =  - 1;
    try {
        testStatistic.chiSquareTest(expected, observed, .01);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
}

---
---
public void testChiSquare_catena_7()throws Exception {
    long[]observed =  {
        10, 9, 11
    };
    double[]expected =  {
        10, 10, 10
    };
    long[]observed1 =  {
        500, 623, 72, 70, 31
    };
    double[]expected1 =  {
        485, 541, 82, 61, 37
    };
    try {
        testStatistic.chiSquareTest(expected1, observed1, 95);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    long[]tooShortObs =  {
        0
    };
    double[]tooShortEx =  {
        1
    };
    try {
        testStatistic.chiSquare(tooShortEx, tooShortObs);
        fail("arguments too short, IllegalArgumentException expected");
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    long[]unMatchedObs =  {
        0, 1, 2, 3
    };
    double[]unMatchedEx =  {
        1, 1, 2
    };
    try {
        testStatistic.chiSquare(unMatchedEx, unMatchedObs);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    expected[0] = 0;
    try {
        testStatistic.chiSquareTest(expected, observed, .01);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    expected[0] = 1;
    observed[0] =  - 1;
    try {
        testStatistic.chiSquareTest(expected, observed, .01);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
}

---
---
public void testChiSquare_catena_8()throws Exception {
    long[]observed =  {
        10, 9, 11
    };
    double[]expected =  {
        10, 10, 10
    };
    long[]observed1 =  {
        500, 623, 72, 70, 31
    };
    double[]expected1 =  {
        485, 541, 82, 61, 37
    };
    try {
        testStatistic.chiSquareTest(expected1, observed1, 95);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    long[]tooShortObs =  {
        0
    };
    double[]tooShortEx =  {
        1
    };
    try {
        testStatistic.chiSquare(tooShortEx, tooShortObs);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    long[]unMatchedObs =  {
        0, 1, 2, 3
    };
    double[]unMatchedEx =  {
        1, 1, 2
    };
    try {
        testStatistic.chiSquare(unMatchedEx, unMatchedObs);
        fail("arrays have different lengths, IllegalArgumentException expected");
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    expected[0] = 0;
    try {
        testStatistic.chiSquareTest(expected, observed, .01);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    expected[0] = 1;
    observed[0] =  - 1;
    try {
        testStatistic.chiSquareTest(expected, observed, .01);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
}

---
---
public void testChiSquare_catena_9()throws Exception {
    long[]observed =  {
        10, 9, 11
    };
    double[]expected =  {
        10, 10, 10
    };
    long[]observed1 =  {
        500, 623, 72, 70, 31
    };
    double[]expected1 =  {
        485, 541, 82, 61, 37
    };
    try {
        testStatistic.chiSquareTest(expected1, observed1, 95);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    long[]tooShortObs =  {
        0
    };
    double[]tooShortEx =  {
        1
    };
    try {
        testStatistic.chiSquare(tooShortEx, tooShortObs);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    long[]unMatchedObs =  {
        0, 1, 2, 3
    };
    double[]unMatchedEx =  {
        1, 1, 2
    };
    try {
        testStatistic.chiSquare(unMatchedEx, unMatchedObs);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    expected[0] = 0;
    try {
        testStatistic.chiSquareTest(expected, observed, .01);
        fail("bad expected count, IllegalArgumentException expected");
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    expected[0] = 1;
    observed[0] =  - 1;
    try {
        testStatistic.chiSquareTest(expected, observed, .01);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
}

---
---
public void testChiSquare_catena_10()throws Exception {
    long[]observed =  {
        10, 9, 11
    };
    double[]expected =  {
        10, 10, 10
    };
    long[]observed1 =  {
        500, 623, 72, 70, 31
    };
    double[]expected1 =  {
        485, 541, 82, 61, 37
    };
    try {
        testStatistic.chiSquareTest(expected1, observed1, 95);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    long[]tooShortObs =  {
        0
    };
    double[]tooShortEx =  {
        1
    };
    try {
        testStatistic.chiSquare(tooShortEx, tooShortObs);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    long[]unMatchedObs =  {
        0, 1, 2, 3
    };
    double[]unMatchedEx =  {
        1, 1, 2
    };
    try {
        testStatistic.chiSquare(unMatchedEx, unMatchedObs);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    expected[0] = 0;
    try {
        testStatistic.chiSquareTest(expected, observed, .01);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    expected[0] = 1;
    observed[0] =  - 1;
    try {
        testStatistic.chiSquareTest(expected, observed, .01);
        fail("bad expected count, IllegalArgumentException expected");
        
    }
    catch(IllegalArgumentException ex) {
        
    }
}

---
@@@
Split test: org.apache.commons.math.stat.inference.TestUtilsTest::testChiSquareLargeTestStatistic
file: /root/workbench/exportInfo/d4j_buggy/Math_102/src/test//org/apache/commons/math/stat/inference/TestUtilsTest.java
Begin: Pos(168, 12)
End: Pos(183, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_102/src/test//org/apache/commons/math/stat/inference/TestUtilsTest.java
Name: testChiSquareLargeTestStatistic
Childs: [StatementAssertion<Begin: Pos(180, 9), End: Pos(180, 59)>,
StatementAssertion<Begin: Pos(181, 9), End: Pos(182, 73)>,
]
---
public void testChiSquareLargeTestStatistic_catena_0()throws Exception {
    double[]exp = new double[] {
        3389119.5, 649136.6, 285745.4, 25357364.76, 11291189.78, 543628.0, 232921.0, 437665.75
    };
    long[]obs = new long[] {
        2372383, 584222, 257170, 17750155, 7903832, 489265, 209628, 393899
    };
    org.apache.commons.math.stat.inference.ChiSquareTestImpl csti = new org.apache.commons.math.stat.inference.ChiSquareTestImpl();
    double cst = csti.chiSquareTest(exp, obs);
    assertEquals("chi-square p-value", 0.0, cst, 1E-3);
    
}

---
---
public void testChiSquareLargeTestStatistic_catena_1()throws Exception {
    double[]exp = new double[] {
        3389119.5, 649136.6, 285745.4, 25357364.76, 11291189.78, 543628.0, 232921.0, 437665.75
    };
    long[]obs = new long[] {
        2372383, 584222, 257170, 17750155, 7903832, 489265, 209628, 393899
    };
    org.apache.commons.math.stat.inference.ChiSquareTestImpl csti = new org.apache.commons.math.stat.inference.ChiSquareTestImpl();
    double cst = csti.chiSquareTest(exp, obs);
    assertEquals("chi-square test statistic", 114875.90421929007, TestUtils.chiSquare(exp, obs), 1E-9);
    
}

---
@@@
Split test: org.apache.commons.math.stat.inference.TestUtilsTest::testChiSquare
file: /root/workbench/exportInfo/d4j_buggy/Math_102/src/test//org/apache/commons/math/stat/inference/TestUtilsTest.java
# check: Use pattern matching: TestUtils.chiSquareTest
StatementExpression is in safe: <TestUtils.chiSquareTest>
Use pattern matching: TestUtils.chiSquareTest
StatementExpression is in safe: <TestUtils.chiSquareTest>
Use pattern matching: TestUtils.chiSquareTest
StatementExpression is in safe: <TestUtils.chiSquareTest>
Begin: Pos(44, 12)
End: Pos(108, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_102/src/test//org/apache/commons/math/stat/inference/TestUtilsTest.java
Name: testChiSquare
Childs: [StatementAssertion<Begin: Pos(53, 9), End: Pos(53, 100)>,
StatementAssertion<Begin: Pos(54, 9), End: Pos(54, 111)>,
StatementAssertion<Begin: Pos(58, 9), End: Pos(58, 120)>,
StatementAssertion<Begin: Pos(59, 9), End: Pos(59, 117)>,
StatementAssertion<Begin: Pos(60, 9), End: Pos(60, 98)>,
StatementAssertion<Begin: Pos(61, 9), End: Pos(61, 99)>,
StatementAssertion<Begin: Pos(65, 13), End: Pos(65, 74)>,
StatementAssertion<Begin: Pos(74, 13), End: Pos(74, 75)>,
StatementAssertion<Begin: Pos(84, 13), End: Pos(84, 85)>,
StatementAssertion<Begin: Pos(93, 13), End: Pos(93, 74)>,
StatementAssertion<Begin: Pos(103, 13), End: Pos(103, 74)>,
]
---
public void testChiSquare_catena_0()throws Exception {
    long[]observed =  {
        10, 9, 11
    };
    double[]expected =  {
        10, 10, 10
    };
    assertEquals("chi-square statistic", 0.2, TestUtils.chiSquare(expected, observed), 10E-12);
    long[]observed1 =  {
        500, 623, 72, 70, 31
    };
    double[]expected1 =  {
        485, 541, 82, 61, 37
    };
    try {
        TestUtils.chiSquareTest(expected1, observed1, 95);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    long[]tooShortObs =  {
        0
    };
    double[]tooShortEx =  {
        1
    };
    try {
        TestUtils.chiSquare(tooShortEx, tooShortObs);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    long[]unMatchedObs =  {
        0, 1, 2, 3
    };
    double[]unMatchedEx =  {
        1, 1, 2
    };
    try {
        TestUtils.chiSquare(unMatchedEx, unMatchedObs);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    expected[0] = 0;
    try {
        TestUtils.chiSquareTest(expected, observed, .01);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    expected[0] = 1;
    observed[0] =  - 1;
    try {
        TestUtils.chiSquareTest(expected, observed, .01);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
}

---
---
public void testChiSquare_catena_1()throws Exception {
    long[]observed =  {
        10, 9, 11
    };
    double[]expected =  {
        10, 10, 10
    };
    assertEquals("chi-square p-value", 0.904837418036, TestUtils.chiSquareTest(expected, observed), 1E-10);
    long[]observed1 =  {
        500, 623, 72, 70, 31
    };
    double[]expected1 =  {
        485, 541, 82, 61, 37
    };
    try {
        TestUtils.chiSquareTest(expected1, observed1, 95);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    long[]tooShortObs =  {
        0
    };
    double[]tooShortEx =  {
        1
    };
    try {
        TestUtils.chiSquare(tooShortEx, tooShortObs);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    long[]unMatchedObs =  {
        0, 1, 2, 3
    };
    double[]unMatchedEx =  {
        1, 1, 2
    };
    try {
        TestUtils.chiSquare(unMatchedEx, unMatchedObs);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    expected[0] = 0;
    try {
        TestUtils.chiSquareTest(expected, observed, .01);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    expected[0] = 1;
    observed[0] =  - 1;
    try {
        TestUtils.chiSquareTest(expected, observed, .01);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
}

---
---
public void testChiSquare_catena_2()throws Exception {
    long[]observed =  {
        10, 9, 11
    };
    double[]expected =  {
        10, 10, 10
    };
    long[]observed1 =  {
        500, 623, 72, 70, 31
    };
    double[]expected1 =  {
        485, 541, 82, 61, 37
    };
    assertEquals("chi-square test statistic", 9.023307936427388, TestUtils.chiSquare(expected1, observed1), 1E-10);
    try {
        TestUtils.chiSquareTest(expected1, observed1, 95);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    long[]tooShortObs =  {
        0
    };
    double[]tooShortEx =  {
        1
    };
    try {
        TestUtils.chiSquare(tooShortEx, tooShortObs);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    long[]unMatchedObs =  {
        0, 1, 2, 3
    };
    double[]unMatchedEx =  {
        1, 1, 2
    };
    try {
        TestUtils.chiSquare(unMatchedEx, unMatchedObs);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    expected[0] = 0;
    try {
        TestUtils.chiSquareTest(expected, observed, .01);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    expected[0] = 1;
    observed[0] =  - 1;
    try {
        TestUtils.chiSquareTest(expected, observed, .01);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
}

---
---
public void testChiSquare_catena_3()throws Exception {
    long[]observed =  {
        10, 9, 11
    };
    double[]expected =  {
        10, 10, 10
    };
    long[]observed1 =  {
        500, 623, 72, 70, 31
    };
    double[]expected1 =  {
        485, 541, 82, 61, 37
    };
    assertEquals("chi-square p-value", 0.06051952647453607, TestUtils.chiSquareTest(expected1, observed1), 1E-9);
    try {
        TestUtils.chiSquareTest(expected1, observed1, 95);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    long[]tooShortObs =  {
        0
    };
    double[]tooShortEx =  {
        1
    };
    try {
        TestUtils.chiSquare(tooShortEx, tooShortObs);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    long[]unMatchedObs =  {
        0, 1, 2, 3
    };
    double[]unMatchedEx =  {
        1, 1, 2
    };
    try {
        TestUtils.chiSquare(unMatchedEx, unMatchedObs);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    expected[0] = 0;
    try {
        TestUtils.chiSquareTest(expected, observed, .01);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    expected[0] = 1;
    observed[0] =  - 1;
    try {
        TestUtils.chiSquareTest(expected, observed, .01);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
}

---
---
public void testChiSquare_catena_4()throws Exception {
    long[]observed =  {
        10, 9, 11
    };
    double[]expected =  {
        10, 10, 10
    };
    long[]observed1 =  {
        500, 623, 72, 70, 31
    };
    double[]expected1 =  {
        485, 541, 82, 61, 37
    };
    assertTrue("chi-square test reject", TestUtils.chiSquareTest(expected1, observed1, 0.07));
    try {
        TestUtils.chiSquareTest(expected1, observed1, 95);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    long[]tooShortObs =  {
        0
    };
    double[]tooShortEx =  {
        1
    };
    try {
        TestUtils.chiSquare(tooShortEx, tooShortObs);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    long[]unMatchedObs =  {
        0, 1, 2, 3
    };
    double[]unMatchedEx =  {
        1, 1, 2
    };
    try {
        TestUtils.chiSquare(unMatchedEx, unMatchedObs);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    expected[0] = 0;
    try {
        TestUtils.chiSquareTest(expected, observed, .01);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    expected[0] = 1;
    observed[0] =  - 1;
    try {
        TestUtils.chiSquareTest(expected, observed, .01);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
}

---
---
public void testChiSquare_catena_5()throws Exception {
    long[]observed =  {
        10, 9, 11
    };
    double[]expected =  {
        10, 10, 10
    };
    long[]observed1 =  {
        500, 623, 72, 70, 31
    };
    double[]expected1 =  {
        485, 541, 82, 61, 37
    };
    assertTrue("chi-square test accept",  ! TestUtils.chiSquareTest(expected1, observed1, 0.05));
    try {
        TestUtils.chiSquareTest(expected1, observed1, 95);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    long[]tooShortObs =  {
        0
    };
    double[]tooShortEx =  {
        1
    };
    try {
        TestUtils.chiSquare(tooShortEx, tooShortObs);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    long[]unMatchedObs =  {
        0, 1, 2, 3
    };
    double[]unMatchedEx =  {
        1, 1, 2
    };
    try {
        TestUtils.chiSquare(unMatchedEx, unMatchedObs);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    expected[0] = 0;
    try {
        TestUtils.chiSquareTest(expected, observed, .01);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    expected[0] = 1;
    observed[0] =  - 1;
    try {
        TestUtils.chiSquareTest(expected, observed, .01);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
}

---
---
public void testChiSquare_catena_6()throws Exception {
    long[]observed =  {
        10, 9, 11
    };
    double[]expected =  {
        10, 10, 10
    };
    long[]observed1 =  {
        500, 623, 72, 70, 31
    };
    double[]expected1 =  {
        485, 541, 82, 61, 37
    };
    try {
        TestUtils.chiSquareTest(expected1, observed1, 95);
        fail("alpha out of range, IllegalArgumentException expected");
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    long[]tooShortObs =  {
        0
    };
    double[]tooShortEx =  {
        1
    };
    try {
        TestUtils.chiSquare(tooShortEx, tooShortObs);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    long[]unMatchedObs =  {
        0, 1, 2, 3
    };
    double[]unMatchedEx =  {
        1, 1, 2
    };
    try {
        TestUtils.chiSquare(unMatchedEx, unMatchedObs);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    expected[0] = 0;
    try {
        TestUtils.chiSquareTest(expected, observed, .01);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    expected[0] = 1;
    observed[0] =  - 1;
    try {
        TestUtils.chiSquareTest(expected, observed, .01);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
}

---
---
public void testChiSquare_catena_7()throws Exception {
    long[]observed =  {
        10, 9, 11
    };
    double[]expected =  {
        10, 10, 10
    };
    long[]observed1 =  {
        500, 623, 72, 70, 31
    };
    double[]expected1 =  {
        485, 541, 82, 61, 37
    };
    try {
        TestUtils.chiSquareTest(expected1, observed1, 95);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    long[]tooShortObs =  {
        0
    };
    double[]tooShortEx =  {
        1
    };
    try {
        TestUtils.chiSquare(tooShortEx, tooShortObs);
        fail("arguments too short, IllegalArgumentException expected");
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    long[]unMatchedObs =  {
        0, 1, 2, 3
    };
    double[]unMatchedEx =  {
        1, 1, 2
    };
    try {
        TestUtils.chiSquare(unMatchedEx, unMatchedObs);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    expected[0] = 0;
    try {
        TestUtils.chiSquareTest(expected, observed, .01);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    expected[0] = 1;
    observed[0] =  - 1;
    try {
        TestUtils.chiSquareTest(expected, observed, .01);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
}

---
---
public void testChiSquare_catena_8()throws Exception {
    long[]observed =  {
        10, 9, 11
    };
    double[]expected =  {
        10, 10, 10
    };
    long[]observed1 =  {
        500, 623, 72, 70, 31
    };
    double[]expected1 =  {
        485, 541, 82, 61, 37
    };
    try {
        TestUtils.chiSquareTest(expected1, observed1, 95);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    long[]tooShortObs =  {
        0
    };
    double[]tooShortEx =  {
        1
    };
    try {
        TestUtils.chiSquare(tooShortEx, tooShortObs);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    long[]unMatchedObs =  {
        0, 1, 2, 3
    };
    double[]unMatchedEx =  {
        1, 1, 2
    };
    try {
        TestUtils.chiSquare(unMatchedEx, unMatchedObs);
        fail("arrays have different lengths, IllegalArgumentException expected");
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    expected[0] = 0;
    try {
        TestUtils.chiSquareTest(expected, observed, .01);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    expected[0] = 1;
    observed[0] =  - 1;
    try {
        TestUtils.chiSquareTest(expected, observed, .01);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
}

---
---
public void testChiSquare_catena_9()throws Exception {
    long[]observed =  {
        10, 9, 11
    };
    double[]expected =  {
        10, 10, 10
    };
    long[]observed1 =  {
        500, 623, 72, 70, 31
    };
    double[]expected1 =  {
        485, 541, 82, 61, 37
    };
    try {
        TestUtils.chiSquareTest(expected1, observed1, 95);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    long[]tooShortObs =  {
        0
    };
    double[]tooShortEx =  {
        1
    };
    try {
        TestUtils.chiSquare(tooShortEx, tooShortObs);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    long[]unMatchedObs =  {
        0, 1, 2, 3
    };
    double[]unMatchedEx =  {
        1, 1, 2
    };
    try {
        TestUtils.chiSquare(unMatchedEx, unMatchedObs);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    expected[0] = 0;
    try {
        TestUtils.chiSquareTest(expected, observed, .01);
        fail("bad expected count, IllegalArgumentException expected");
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    expected[0] = 1;
    observed[0] =  - 1;
    try {
        TestUtils.chiSquareTest(expected, observed, .01);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
}

---
---
public void testChiSquare_catena_10()throws Exception {
    long[]observed =  {
        10, 9, 11
    };
    double[]expected =  {
        10, 10, 10
    };
    long[]observed1 =  {
        500, 623, 72, 70, 31
    };
    double[]expected1 =  {
        485, 541, 82, 61, 37
    };
    try {
        TestUtils.chiSquareTest(expected1, observed1, 95);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    long[]tooShortObs =  {
        0
    };
    double[]tooShortEx =  {
        1
    };
    try {
        TestUtils.chiSquare(tooShortEx, tooShortObs);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    long[]unMatchedObs =  {
        0, 1, 2, 3
    };
    double[]unMatchedEx =  {
        1, 1, 2
    };
    try {
        TestUtils.chiSquare(unMatchedEx, unMatchedObs);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    expected[0] = 0;
    try {
        TestUtils.chiSquareTest(expected, observed, .01);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    expected[0] = 1;
    observed[0] =  - 1;
    try {
        TestUtils.chiSquareTest(expected, observed, .01);
        fail("bad expected count, IllegalArgumentException expected");
        
    }
    catch(IllegalArgumentException ex) {
        
    }
}

---
--------------------
Run: Math_67
@@@
Split test: org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest::testQuinticMin
file: /root/workbench/exportInfo/d4j_buggy/Math_67/src/test/java//org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java
Begin: Pos(55, 5)
End: Pos(100, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_67/src/test/java//org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java
Name: testQuinticMin
Childs: [StatementAssertion<Begin: Pos(70, 13), End: Pos(70, 57)>,
StatementAssertion<Begin: Pos(74, 13), End: Pos(74, 43)>,
StatementAssertion<Begin: Pos(78, 13), End: Pos(78, 57)>,
StatementAssertion<Begin: Pos(82, 13), End: Pos(82, 43)>,
StatementAssertion<Begin: Pos(85, 9), End: Pos(85, 103)>,
StatementAssertion<Begin: Pos(86, 9), End: Pos(86, 72)>,
StatementAssertion<Begin: Pos(87, 9), End: Pos(87, 79)>,
StatementAssertion<Begin: Pos(92, 13), End: Pos(92, 71)>,
StatementAssertion<Begin: Pos(95, 9), End: Pos(95, 57)>,
StatementAssertion<Begin: Pos(96, 9), End: Pos(96, 57)>,
StatementAssertion<Begin: Pos(97, 9), End: Pos(97, 57)>,
StatementAssertion<Begin: Pos(98, 9), End: Pos(98, 57)>,
]
---
@Test public void testQuinticMin_catena_0()throws MathException {
    UnivariateRealFunction f = new QuinticFunction();
    UnivariateRealOptimizer underlying = new BrentOptimizer();
    JDKRandomGenerator g = new JDKRandomGenerator();
    g.setSeed(4312000053l);
    MultiStartUnivariateRealOptimizer minimizer = new MultiStartUnivariateRealOptimizer(underlying, 5, g);
    minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());
    minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());
    try {
        minimizer.getOptima();
        fail("an exception should have been thrown");
        
    }
    catch(IllegalStateException ise) {
        
    }
    catch(Exception e) {
        
    }
    try {
        minimizer.getOptimaValues();
        
    }
    catch(IllegalStateException ise) {
        
    }
    catch(Exception e) {
        
    }
    double[]optima = minimizer.getOptima();
    double[]optimaValues = minimizer.getOptimaValues();
    for(int i = 0;
    i < optima.length;
     ++ i) {
        
    }
}

---
---
@Test public void testQuinticMin_catena_1()throws MathException {
    UnivariateRealFunction f = new QuinticFunction();
    UnivariateRealOptimizer underlying = new BrentOptimizer();
    JDKRandomGenerator g = new JDKRandomGenerator();
    g.setSeed(4312000053l);
    MultiStartUnivariateRealOptimizer minimizer = new MultiStartUnivariateRealOptimizer(underlying, 5, g);
    minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());
    minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());
    try {
        minimizer.getOptima();
        
    }
    catch(IllegalStateException ise) {
        
    }
    catch(Exception e) {
        fail("wrong exception caught");
        
    }
    try {
        minimizer.getOptimaValues();
        
    }
    catch(IllegalStateException ise) {
        
    }
    catch(Exception e) {
        
    }
    double[]optima = minimizer.getOptima();
    double[]optimaValues = minimizer.getOptimaValues();
    for(int i = 0;
    i < optima.length;
     ++ i) {
        
    }
}

---
---
@Test public void testQuinticMin_catena_2()throws MathException {
    UnivariateRealFunction f = new QuinticFunction();
    UnivariateRealOptimizer underlying = new BrentOptimizer();
    JDKRandomGenerator g = new JDKRandomGenerator();
    g.setSeed(4312000053l);
    MultiStartUnivariateRealOptimizer minimizer = new MultiStartUnivariateRealOptimizer(underlying, 5, g);
    minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());
    minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());
    try {
        minimizer.getOptima();
        
    }
    catch(IllegalStateException ise) {
        
    }
    catch(Exception e) {
        
    }
    try {
        minimizer.getOptimaValues();
        fail("an exception should have been thrown");
        
    }
    catch(IllegalStateException ise) {
        
    }
    catch(Exception e) {
        
    }
    double[]optima = minimizer.getOptima();
    double[]optimaValues = minimizer.getOptimaValues();
    for(int i = 0;
    i < optima.length;
     ++ i) {
        
    }
}

---
---
@Test public void testQuinticMin_catena_3()throws MathException {
    UnivariateRealFunction f = new QuinticFunction();
    UnivariateRealOptimizer underlying = new BrentOptimizer();
    JDKRandomGenerator g = new JDKRandomGenerator();
    g.setSeed(4312000053l);
    MultiStartUnivariateRealOptimizer minimizer = new MultiStartUnivariateRealOptimizer(underlying, 5, g);
    minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());
    minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());
    try {
        minimizer.getOptima();
        
    }
    catch(IllegalStateException ise) {
        
    }
    catch(Exception e) {
        
    }
    try {
        minimizer.getOptimaValues();
        
    }
    catch(IllegalStateException ise) {
        
    }
    catch(Exception e) {
        fail("wrong exception caught");
        
    }
    double[]optima = minimizer.getOptima();
    double[]optimaValues = minimizer.getOptimaValues();
    for(int i = 0;
    i < optima.length;
     ++ i) {
        
    }
}

---
---
@Test public void testQuinticMin_catena_4()throws MathException {
    UnivariateRealFunction f = new QuinticFunction();
    UnivariateRealOptimizer underlying = new BrentOptimizer();
    JDKRandomGenerator g = new JDKRandomGenerator();
    g.setSeed(4312000053l);
    MultiStartUnivariateRealOptimizer minimizer = new MultiStartUnivariateRealOptimizer(underlying, 5, g);
    minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());
    minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());
    try {
        minimizer.getOptima();
        
    }
    catch(IllegalStateException ise) {
        
    }
    catch(Exception e) {
        
    }
    try {
        minimizer.getOptimaValues();
        
    }
    catch(IllegalStateException ise) {
        
    }
    catch(Exception e) {
        
    }
    assertEquals( - 0.27195612846834, minimizer.optimize(f, GoalType.MINIMIZE,  - 0.3,  - 0.2), 1.0e-13);
    double[]optima = minimizer.getOptima();
    double[]optimaValues = minimizer.getOptimaValues();
    for(int i = 0;
    i < optima.length;
     ++ i) {
        
    }
}

---
---
@Test public void testQuinticMin_catena_5()throws MathException {
    UnivariateRealFunction f = new QuinticFunction();
    UnivariateRealOptimizer underlying = new BrentOptimizer();
    JDKRandomGenerator g = new JDKRandomGenerator();
    g.setSeed(4312000053l);
    MultiStartUnivariateRealOptimizer minimizer = new MultiStartUnivariateRealOptimizer(underlying, 5, g);
    minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());
    minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());
    try {
        minimizer.getOptima();
        
    }
    catch(IllegalStateException ise) {
        
    }
    catch(Exception e) {
        
    }
    try {
        minimizer.getOptimaValues();
        
    }
    catch(IllegalStateException ise) {
        
    }
    catch(Exception e) {
        
    }
    assertEquals( - 0.27195612846834, minimizer.getResult(), 1.0e-13);
    double[]optima = minimizer.getOptima();
    double[]optimaValues = minimizer.getOptimaValues();
    for(int i = 0;
    i < optima.length;
     ++ i) {
        
    }
}

---
---
@Test public void testQuinticMin_catena_6()throws MathException {
    UnivariateRealFunction f = new QuinticFunction();
    UnivariateRealOptimizer underlying = new BrentOptimizer();
    JDKRandomGenerator g = new JDKRandomGenerator();
    g.setSeed(4312000053l);
    MultiStartUnivariateRealOptimizer minimizer = new MultiStartUnivariateRealOptimizer(underlying, 5, g);
    minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());
    minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());
    try {
        minimizer.getOptima();
        
    }
    catch(IllegalStateException ise) {
        
    }
    catch(Exception e) {
        
    }
    try {
        minimizer.getOptimaValues();
        
    }
    catch(IllegalStateException ise) {
        
    }
    catch(Exception e) {
        
    }
    assertEquals( - 0.04433426954946, minimizer.getFunctionValue(), 1.0e-13);
    double[]optima = minimizer.getOptima();
    double[]optimaValues = minimizer.getOptimaValues();
    for(int i = 0;
    i < optima.length;
     ++ i) {
        
    }
}

---
---
@Test public void testQuinticMin_catena_7()throws MathException {
    UnivariateRealFunction f = new QuinticFunction();
    UnivariateRealOptimizer underlying = new BrentOptimizer();
    JDKRandomGenerator g = new JDKRandomGenerator();
    g.setSeed(4312000053l);
    MultiStartUnivariateRealOptimizer minimizer = new MultiStartUnivariateRealOptimizer(underlying, 5, g);
    minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());
    minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());
    try {
        minimizer.getOptima();
        
    }
    catch(IllegalStateException ise) {
        
    }
    catch(Exception e) {
        
    }
    try {
        minimizer.getOptimaValues();
        
    }
    catch(IllegalStateException ise) {
        
    }
    catch(Exception e) {
        
    }
    double[]optima = minimizer.getOptima();
    double[]optimaValues = minimizer.getOptimaValues();
    for(int i = 0;
    i < optima.length;
     ++ i) {
        assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);
        
    }
}

---
---
@Test public void testQuinticMin_catena_8()throws MathException {
    UnivariateRealFunction f = new QuinticFunction();
    UnivariateRealOptimizer underlying = new BrentOptimizer();
    JDKRandomGenerator g = new JDKRandomGenerator();
    g.setSeed(4312000053l);
    MultiStartUnivariateRealOptimizer minimizer = new MultiStartUnivariateRealOptimizer(underlying, 5, g);
    minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());
    minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());
    try {
        minimizer.getOptima();
        
    }
    catch(IllegalStateException ise) {
        
    }
    catch(Exception e) {
        
    }
    try {
        minimizer.getOptimaValues();
        
    }
    catch(IllegalStateException ise) {
        
    }
    catch(Exception e) {
        
    }
    double[]optima = minimizer.getOptima();
    double[]optimaValues = minimizer.getOptimaValues();
    for(int i = 0;
    i < optima.length;
     ++ i) {
        
    }
    assertTrue(minimizer.getEvaluations() >= 510);
    
}

---
---
@Test public void testQuinticMin_catena_9()throws MathException {
    UnivariateRealFunction f = new QuinticFunction();
    UnivariateRealOptimizer underlying = new BrentOptimizer();
    JDKRandomGenerator g = new JDKRandomGenerator();
    g.setSeed(4312000053l);
    MultiStartUnivariateRealOptimizer minimizer = new MultiStartUnivariateRealOptimizer(underlying, 5, g);
    minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());
    minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());
    try {
        minimizer.getOptima();
        
    }
    catch(IllegalStateException ise) {
        
    }
    catch(Exception e) {
        
    }
    try {
        minimizer.getOptimaValues();
        
    }
    catch(IllegalStateException ise) {
        
    }
    catch(Exception e) {
        
    }
    double[]optima = minimizer.getOptima();
    double[]optimaValues = minimizer.getOptimaValues();
    for(int i = 0;
    i < optima.length;
     ++ i) {
        
    }
    assertTrue(minimizer.getEvaluations() <= 530);
    
}

---
---
@Test public void testQuinticMin_catena_10()throws MathException {
    UnivariateRealFunction f = new QuinticFunction();
    UnivariateRealOptimizer underlying = new BrentOptimizer();
    JDKRandomGenerator g = new JDKRandomGenerator();
    g.setSeed(4312000053l);
    MultiStartUnivariateRealOptimizer minimizer = new MultiStartUnivariateRealOptimizer(underlying, 5, g);
    minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());
    minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());
    try {
        minimizer.getOptima();
        
    }
    catch(IllegalStateException ise) {
        
    }
    catch(Exception e) {
        
    }
    try {
        minimizer.getOptimaValues();
        
    }
    catch(IllegalStateException ise) {
        
    }
    catch(Exception e) {
        
    }
    double[]optima = minimizer.getOptima();
    double[]optimaValues = minimizer.getOptimaValues();
    for(int i = 0;
    i < optima.length;
     ++ i) {
        
    }
    assertTrue(minimizer.getIterationCount() >= 150);
    
}

---
---
@Test public void testQuinticMin_catena_11()throws MathException {
    UnivariateRealFunction f = new QuinticFunction();
    UnivariateRealOptimizer underlying = new BrentOptimizer();
    JDKRandomGenerator g = new JDKRandomGenerator();
    g.setSeed(4312000053l);
    MultiStartUnivariateRealOptimizer minimizer = new MultiStartUnivariateRealOptimizer(underlying, 5, g);
    minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());
    minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());
    try {
        minimizer.getOptima();
        
    }
    catch(IllegalStateException ise) {
        
    }
    catch(Exception e) {
        
    }
    try {
        minimizer.getOptimaValues();
        
    }
    catch(IllegalStateException ise) {
        
    }
    catch(Exception e) {
        
    }
    double[]optima = minimizer.getOptima();
    double[]optimaValues = minimizer.getOptimaValues();
    for(int i = 0;
    i < optima.length;
     ++ i) {
        
    }
    assertTrue(minimizer.getIterationCount() <= 170);
    
}

---
--------------------
Run: Math_44
@@@
Split test: org.apache.commons.math.ode.events.EventStateTest::testIssue695
file: /root/workbench/exportInfo/d4j_buggy/Math_44/src/test/java//org/apache/commons/math/ode/events/EventStateTest.java
Begin: Pos(79, 5)
End: Pos(104, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_44/src/test/java//org/apache/commons/math/ode/events/EventStateTest.java
Name: testIssue695
Childs: [StatementAssertion<Begin: Pos(101, 9), End: Pos(101, 51)>,
StatementAssertion<Begin: Pos(102, 9), End: Pos(102, 49)>,
]
---
@Test public void testIssue695_catena_0() {
    FirstOrderDifferentialEquations equation = new FirstOrderDifferentialEquations() {
        public int getDimension() {
            return 1;
            
        }
        public void computeDerivatives(double t, double[]y, double[]yDot) {
            yDot[0] = 1.0;
            
        }
    };
    DormandPrince853Integrator integrator = new DormandPrince853Integrator(0.001, 1000, 1.0e-14, 1.0e-14);
    integrator.addEventHandler(new ResettingEvent(10.99), 0.1, 1.0e-9, 1000);
    integrator.addEventHandler(new ResettingEvent(11.01), 0.1, 1.0e-9, 1000);
    integrator.setInitialStepSize(3.0);
    double target = 30.0;
    double[]y = new double[1];
    double tEnd = integrator.integrate(equation, 0.0, y, target, y);
    Assert.assertEquals(target, tEnd, 1.0e-10);
    
}

---
---
@Test public void testIssue695_catena_1() {
    FirstOrderDifferentialEquations equation = new FirstOrderDifferentialEquations() {
        public int getDimension() {
            return 1;
            
        }
        public void computeDerivatives(double t, double[]y, double[]yDot) {
            yDot[0] = 1.0;
            
        }
    };
    DormandPrince853Integrator integrator = new DormandPrince853Integrator(0.001, 1000, 1.0e-14, 1.0e-14);
    integrator.addEventHandler(new ResettingEvent(10.99), 0.1, 1.0e-9, 1000);
    integrator.addEventHandler(new ResettingEvent(11.01), 0.1, 1.0e-9, 1000);
    integrator.setInitialStepSize(3.0);
    double target = 30.0;
    double[]y = new double[1];
    double tEnd = integrator.integrate(equation, 0.0, y, target, y);
    Assert.assertEquals(32.0, y[0], 1.0e-10);
    
}

---
--------------------
Run: Math_98
@@@
Split test: org.apache.commons.math.linear.BigMatrixImplTest::testMath209
file: /root/workbench/exportInfo/d4j_buggy/Math_98/src/test//org/apache/commons/math/linear/BigMatrixImplTest.java
Begin: Pos(440, 12)
End: Pos(451, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_98/src/test//org/apache/commons/math/linear/BigMatrixImplTest.java
Name: testMath209
Childs: [StatementAssertion<Begin: Pos(447, 9), End: Pos(447, 52)>,
StatementAssertion<Begin: Pos(448, 9), End: Pos(448, 56)>,
StatementAssertion<Begin: Pos(449, 9), End: Pos(449, 56)>,
StatementAssertion<Begin: Pos(450, 9), End: Pos(450, 56)>,
]
---
public void testMath209_catena_0() {
    BigMatrix a = new BigMatrixImpl(new BigDecimal[][] {
         {
            new BigDecimal(1), new BigDecimal(2)
        },  {
            new BigDecimal(3), new BigDecimal(4)
        },  {
            new BigDecimal(5), new BigDecimal(6)
        }
    }, false);
    BigDecimal[]b = a.operate(new BigDecimal[] {
        new BigDecimal(1), new BigDecimal(1)
    });
    assertEquals(a.getRowDimension(), b.length);
    
}

---
---
public void testMath209_catena_1() {
    BigMatrix a = new BigMatrixImpl(new BigDecimal[][] {
         {
            new BigDecimal(1), new BigDecimal(2)
        },  {
            new BigDecimal(3), new BigDecimal(4)
        },  {
            new BigDecimal(5), new BigDecimal(6)
        }
    }, false);
    BigDecimal[]b = a.operate(new BigDecimal[] {
        new BigDecimal(1), new BigDecimal(1)
    });
    assertEquals(3.0, b[0].doubleValue(), 1.0e-12);
    
}

---
---
public void testMath209_catena_2() {
    BigMatrix a = new BigMatrixImpl(new BigDecimal[][] {
         {
            new BigDecimal(1), new BigDecimal(2)
        },  {
            new BigDecimal(3), new BigDecimal(4)
        },  {
            new BigDecimal(5), new BigDecimal(6)
        }
    }, false);
    BigDecimal[]b = a.operate(new BigDecimal[] {
        new BigDecimal(1), new BigDecimal(1)
    });
    assertEquals(7.0, b[1].doubleValue(), 1.0e-12);
    
}

---
---
public void testMath209_catena_3() {
    BigMatrix a = new BigMatrixImpl(new BigDecimal[][] {
         {
            new BigDecimal(1), new BigDecimal(2)
        },  {
            new BigDecimal(3), new BigDecimal(4)
        },  {
            new BigDecimal(5), new BigDecimal(6)
        }
    }, false);
    BigDecimal[]b = a.operate(new BigDecimal[] {
        new BigDecimal(1), new BigDecimal(1)
    });
    assertEquals(11.0, b[2].doubleValue(), 1.0e-12);
    
}

---
@@@
Split test: org.apache.commons.math.linear.RealMatrixImplTest::testMath209
file: /root/workbench/exportInfo/d4j_buggy/Math_98/src/test//org/apache/commons/math/linear/RealMatrixImplTest.java
Begin: Pos(347, 12)
End: Pos(356, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_98/src/test//org/apache/commons/math/linear/RealMatrixImplTest.java
Name: testMath209
Childs: [StatementAssertion<Begin: Pos(352, 9), End: Pos(352, 52)>,
StatementAssertion<Begin: Pos(353, 9), End: Pos(353, 42)>,
StatementAssertion<Begin: Pos(354, 9), End: Pos(354, 42)>,
StatementAssertion<Begin: Pos(355, 9), End: Pos(355, 42)>,
]
---
public void testMath209_catena_0() {
    RealMatrix a = new RealMatrixImpl(new double[][] {
         {
            1, 2
        },  {
            3, 4
        },  {
            5, 6
        }
    }, false);
    double[]b = a.operate(new double[] {
        1, 1
    });
    assertEquals(a.getRowDimension(), b.length);
    
}

---
---
public void testMath209_catena_1() {
    RealMatrix a = new RealMatrixImpl(new double[][] {
         {
            1, 2
        },  {
            3, 4
        },  {
            5, 6
        }
    }, false);
    double[]b = a.operate(new double[] {
        1, 1
    });
    assertEquals(3.0, b[0], 1.0e-12);
    
}

---
---
public void testMath209_catena_2() {
    RealMatrix a = new RealMatrixImpl(new double[][] {
         {
            1, 2
        },  {
            3, 4
        },  {
            5, 6
        }
    }, false);
    double[]b = a.operate(new double[] {
        1, 1
    });
    assertEquals(7.0, b[1], 1.0e-12);
    
}

---
---
public void testMath209_catena_3() {
    RealMatrix a = new RealMatrixImpl(new double[][] {
         {
            1, 2
        },  {
            3, 4
        },  {
            5, 6
        }
    }, false);
    double[]b = a.operate(new double[] {
        1, 1
    });
    assertEquals(11.0, b[2], 1.0e-12);
    
}

---
--------------------
Run: Math_31
@@@
Split test: org.apache.commons.math3.distribution.BinomialDistributionTest::testMath718
file: /root/workbench/exportInfo/d4j_buggy/Math_31/src/test/java//org/apache/commons/math3/distribution/BinomialDistributionTest.java
Begin: Pos(132, 5)
End: Pos(144, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_31/src/test/java//org/apache/commons/math3/distribution/BinomialDistributionTest.java
Name: testMath718
Childs: [StatementAssertion<Begin: Pos(141, 13), End: Pos(141, 47)>,
]
@@@
Split test: org.apache.commons.math3.distribution.FDistributionTest::testMath785
file: /root/workbench/exportInfo/d4j_buggy/Math_31/src/test/java//org/apache/commons/math3/distribution/FDistributionTest.java
Begin: Pos(146, 5)
End: Pos(158, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_31/src/test/java//org/apache/commons/math3/distribution/FDistributionTest.java
Name: testMath785
Childs: [StatementAssertion<Begin: Pos(154, 13), End: Pos(154, 44)>,
StatementAssertion<Begin: Pos(156, 13), End: Pos(156, 79)>,
]
---
@Test public void testMath785_catena_0() {
    try {
        double prob = 0.01;
        FDistribution f = new FDistribution(200000, 200000);
        double result = f.inverseCumulativeProbability(prob);
        Assert.assertTrue(result < 1.0);
        
    }
    catch(Exception e) {
        
    }
}

---
---
@Test public void testMath785_catena_1() {
    try {
        double prob = 0.01;
        FDistribution f = new FDistribution(200000, 200000);
        double result = f.inverseCumulativeProbability(prob);
        
    }
    catch(Exception e) {
        Assert.fail("Failing to calculate inverse cumulative probability");
        
    }
}

---
--------------------
Run: Math_14
@@@
Split test: org.apache.commons.math3.fitting.PolynomialFitterTest::testLargeSample
file: /root/workbench/exportInfo/d4j_buggy/Math_14/src/test/java//org/apache/commons/math3/fitting/PolynomialFitterTest.java
Begin: Pos(223, 5)
End: Pos(248, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_14/src/test/java//org/apache/commons/math3/fitting/PolynomialFitterTest.java
Name: testLargeSample
Childs: [StatementAssertion<Begin: Pos(244, 17), End: Pos(244, 62)>,
StatementAssertion<Begin: Pos(247, 9), End: Pos(247, 44)>,
]
---
@Test public void testLargeSample_catena_0() {
    Random randomizer = new Random(0x5551480dca5b369bl);
    double maxError = 0;
    for(int degree = 0;
    degree < 10;
     ++ degree) {
        PolynomialFunction p = buildRandomPolynomial(degree, randomizer);
        PolynomialFitter fitter = new PolynomialFitter(new LevenbergMarquardtOptimizer());
        for(int i = 0;
        i < 40000;
         ++ i) {
            double x =  - 1.0 + i / 20000.0;
            fitter.addObservedPoint(1.0, x, p.value(x) + 0.1 * randomizer.nextGaussian());
            
        }
        final double[]init = new double[degree + 1];
        PolynomialFunction fitted = new PolynomialFunction(fitter.fit(init));
        for(double x =  - 1.0;
        x < 1.0;
        x += 0.01) {
            double error = FastMath.abs(p.value(x) - fitted.value(x)) / (1.0 + FastMath.abs(p.value(x)));
            maxError = FastMath.max(maxError, error);
            Assert.assertTrue(FastMath.abs(error) < 0.01);
            
        }
    }
}

---
---
@Test public void testLargeSample_catena_1() {
    Random randomizer = new Random(0x5551480dca5b369bl);
    double maxError = 0;
    for(int degree = 0;
    degree < 10;
     ++ degree) {
        PolynomialFunction p = buildRandomPolynomial(degree, randomizer);
        PolynomialFitter fitter = new PolynomialFitter(new LevenbergMarquardtOptimizer());
        for(int i = 0;
        i < 40000;
         ++ i) {
            double x =  - 1.0 + i / 20000.0;
            fitter.addObservedPoint(1.0, x, p.value(x) + 0.1 * randomizer.nextGaussian());
            
        }
        final double[]init = new double[degree + 1];
        PolynomialFunction fitted = new PolynomialFunction(fitter.fit(init));
        for(double x =  - 1.0;
        x < 1.0;
        x += 0.01) {
            double error = FastMath.abs(p.value(x) - fitted.value(x)) / (1.0 + FastMath.abs(p.value(x)));
            maxError = FastMath.max(maxError, error);
            
        }
    }
    Assert.assertTrue(maxError > 0.001);
    
}

---
--------------------
Run: Math_51
@@@
Split test: org.apache.commons.math.analysis.solvers.RegulaFalsiSolverTest::testIssue631
file: /root/workbench/exportInfo/d4j_buggy/Math_51/src/test/java//org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java
Begin: Pos(43, 5)
End: Pos(55, 2)
Source: /root/workbench/exportInfo/d4j_buggy/Math_51/src/test/java//org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java
Name: testIssue631
Childs: [StatementAssertion<Begin: Pos(54, 9), End: Pos(54, 61)>,
]
--------------------
Run: Math_92
@@@
Split test: org.apache.commons.math.util.MathUtilsTest::testBinomialCoefficientLarge
file: /root/workbench/exportInfo/d4j_buggy/Math_92/src/test//org/apache/commons/math/util/MathUtilsTest.java
Begin: Pos(176, 12)
End: Pos(225, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_92/src/test//org/apache/commons/math/util/MathUtilsTest.java
Name: testBinomialCoefficientLarge
Childs: [StatementAssertion<Begin: Pos(194, 17), End: Pos(194, 61)>,
StatementAssertion<Begin: Pos(195, 17), End: Pos(195, 62)>,
StatementAssertion<Begin: Pos(196, 17), End: Pos(196, 59)>,
StatementAssertion<Begin: Pos(202, 9), End: Pos(202, 45)>,
StatementAssertion<Begin: Pos(206, 9), End: Pos(206, 45)>,
StatementAssertion<Begin: Pos(211, 13), End: Pos(211, 50)>,
StatementAssertion<Begin: Pos(222, 13), End: Pos(222, 49)>,
]
---
public void testBinomialCoefficientLarge_catena_0()throws Exception {
    for(int n = 0;
    n <= 200;
    n ++ ) {
        for(int k = 0;
        k <= n;
        k ++ ) {
            long ourResult =  - 1;
            long exactResult =  - 1;
            boolean shouldThrow = false;
            boolean didThrow = false;
            try {
                ourResult = MathUtils.binomialCoefficient(n, k);
                
            }
            catch(ArithmeticException ex) {
                didThrow = true;
                
            }
            try {
                exactResult = binomialCoefficient(n, k);
                
            }
            catch(ArithmeticException ex) {
                shouldThrow = true;
                
            }
            assertEquals(n + "," + k, shouldThrow, didThrow);
            
        }
    }
    long ourResult = MathUtils.binomialCoefficient(300, 3);
    long exactResult = binomialCoefficient(300, 3);
    ourResult = MathUtils.binomialCoefficient(700, 697);
    exactResult = binomialCoefficient(700, 697);
    try {
        MathUtils.binomialCoefficient(700, 300);
        
    }
    catch(ArithmeticException ex) {
        
    }
    for(int i = 2000;
    i <= 10000;
    i += 2000) {
        ourResult = MathUtils.binomialCoefficient(i, 3);
        exactResult = binomialCoefficient(i, 3);
        
    }
}

---
---
public void testBinomialCoefficientLarge_catena_1()throws Exception {
    for(int n = 0;
    n <= 200;
    n ++ ) {
        for(int k = 0;
        k <= n;
        k ++ ) {
            long ourResult =  - 1;
            long exactResult =  - 1;
            boolean shouldThrow = false;
            boolean didThrow = false;
            try {
                ourResult = MathUtils.binomialCoefficient(n, k);
                
            }
            catch(ArithmeticException ex) {
                didThrow = true;
                
            }
            try {
                exactResult = binomialCoefficient(n, k);
                
            }
            catch(ArithmeticException ex) {
                shouldThrow = true;
                
            }
            assertEquals(n + "," + k, exactResult, ourResult);
            
        }
    }
    long ourResult = MathUtils.binomialCoefficient(300, 3);
    long exactResult = binomialCoefficient(300, 3);
    ourResult = MathUtils.binomialCoefficient(700, 697);
    exactResult = binomialCoefficient(700, 697);
    try {
        MathUtils.binomialCoefficient(700, 300);
        
    }
    catch(ArithmeticException ex) {
        
    }
    for(int i = 2000;
    i <= 10000;
    i += 2000) {
        ourResult = MathUtils.binomialCoefficient(i, 3);
        exactResult = binomialCoefficient(i, 3);
        
    }
}

---
---
public void testBinomialCoefficientLarge_catena_2()throws Exception {
    for(int n = 0;
    n <= 200;
    n ++ ) {
        for(int k = 0;
        k <= n;
        k ++ ) {
            long ourResult =  - 1;
            long exactResult =  - 1;
            boolean shouldThrow = false;
            boolean didThrow = false;
            try {
                ourResult = MathUtils.binomialCoefficient(n, k);
                
            }
            catch(ArithmeticException ex) {
                didThrow = true;
                
            }
            try {
                exactResult = binomialCoefficient(n, k);
                
            }
            catch(ArithmeticException ex) {
                shouldThrow = true;
                
            }
            assertTrue(n + "," + k, (n > 66 ||  ! didThrow));
            
        }
    }
    long ourResult = MathUtils.binomialCoefficient(300, 3);
    long exactResult = binomialCoefficient(300, 3);
    ourResult = MathUtils.binomialCoefficient(700, 697);
    exactResult = binomialCoefficient(700, 697);
    try {
        MathUtils.binomialCoefficient(700, 300);
        
    }
    catch(ArithmeticException ex) {
        
    }
    for(int i = 2000;
    i <= 10000;
    i += 2000) {
        ourResult = MathUtils.binomialCoefficient(i, 3);
        exactResult = binomialCoefficient(i, 3);
        
    }
}

---
---
public void testBinomialCoefficientLarge_catena_3()throws Exception {
    for(int n = 0;
    n <= 200;
    n ++ ) {
        for(int k = 0;
        k <= n;
        k ++ ) {
            long ourResult =  - 1;
            long exactResult =  - 1;
            boolean shouldThrow = false;
            boolean didThrow = false;
            try {
                ourResult = MathUtils.binomialCoefficient(n, k);
                
            }
            catch(ArithmeticException ex) {
                didThrow = true;
                
            }
            try {
                exactResult = binomialCoefficient(n, k);
                
            }
            catch(ArithmeticException ex) {
                shouldThrow = true;
                
            }
        }
    }
    long ourResult = MathUtils.binomialCoefficient(300, 3);
    long exactResult = binomialCoefficient(300, 3);
    assertEquals(exactResult, ourResult);
    ourResult = MathUtils.binomialCoefficient(700, 697);
    exactResult = binomialCoefficient(700, 697);
    try {
        MathUtils.binomialCoefficient(700, 300);
        
    }
    catch(ArithmeticException ex) {
        
    }
    for(int i = 2000;
    i <= 10000;
    i += 2000) {
        ourResult = MathUtils.binomialCoefficient(i, 3);
        exactResult = binomialCoefficient(i, 3);
        
    }
}

---
---
public void testBinomialCoefficientLarge_catena_4()throws Exception {
    for(int n = 0;
    n <= 200;
    n ++ ) {
        for(int k = 0;
        k <= n;
        k ++ ) {
            long ourResult =  - 1;
            long exactResult =  - 1;
            boolean shouldThrow = false;
            boolean didThrow = false;
            try {
                ourResult = MathUtils.binomialCoefficient(n, k);
                
            }
            catch(ArithmeticException ex) {
                didThrow = true;
                
            }
            try {
                exactResult = binomialCoefficient(n, k);
                
            }
            catch(ArithmeticException ex) {
                shouldThrow = true;
                
            }
        }
    }
    long ourResult = MathUtils.binomialCoefficient(300, 3);
    long exactResult = binomialCoefficient(300, 3);
    ourResult = MathUtils.binomialCoefficient(700, 697);
    exactResult = binomialCoefficient(700, 697);
    assertEquals(exactResult, ourResult);
    try {
        MathUtils.binomialCoefficient(700, 300);
        
    }
    catch(ArithmeticException ex) {
        
    }
    for(int i = 2000;
    i <= 10000;
    i += 2000) {
        ourResult = MathUtils.binomialCoefficient(i, 3);
        exactResult = binomialCoefficient(i, 3);
        
    }
}

---
---
public void testBinomialCoefficientLarge_catena_5()throws Exception {
    for(int n = 0;
    n <= 200;
    n ++ ) {
        for(int k = 0;
        k <= n;
        k ++ ) {
            long ourResult =  - 1;
            long exactResult =  - 1;
            boolean shouldThrow = false;
            boolean didThrow = false;
            try {
                ourResult = MathUtils.binomialCoefficient(n, k);
                
            }
            catch(ArithmeticException ex) {
                didThrow = true;
                
            }
            try {
                exactResult = binomialCoefficient(n, k);
                
            }
            catch(ArithmeticException ex) {
                shouldThrow = true;
                
            }
        }
    }
    long ourResult = MathUtils.binomialCoefficient(300, 3);
    long exactResult = binomialCoefficient(300, 3);
    ourResult = MathUtils.binomialCoefficient(700, 697);
    exactResult = binomialCoefficient(700, 697);
    try {
        MathUtils.binomialCoefficient(700, 300);
        fail("Expecting ArithmeticException");
        
    }
    catch(ArithmeticException ex) {
        
    }
    for(int i = 2000;
    i <= 10000;
    i += 2000) {
        ourResult = MathUtils.binomialCoefficient(i, 3);
        exactResult = binomialCoefficient(i, 3);
        
    }
}

---
---
public void testBinomialCoefficientLarge_catena_6()throws Exception {
    for(int n = 0;
    n <= 200;
    n ++ ) {
        for(int k = 0;
        k <= n;
        k ++ ) {
            long ourResult =  - 1;
            long exactResult =  - 1;
            boolean shouldThrow = false;
            boolean didThrow = false;
            try {
                ourResult = MathUtils.binomialCoefficient(n, k);
                
            }
            catch(ArithmeticException ex) {
                didThrow = true;
                
            }
            try {
                exactResult = binomialCoefficient(n, k);
                
            }
            catch(ArithmeticException ex) {
                shouldThrow = true;
                
            }
        }
    }
    long ourResult = MathUtils.binomialCoefficient(300, 3);
    long exactResult = binomialCoefficient(300, 3);
    ourResult = MathUtils.binomialCoefficient(700, 697);
    exactResult = binomialCoefficient(700, 697);
    try {
        MathUtils.binomialCoefficient(700, 300);
        
    }
    catch(ArithmeticException ex) {
        
    }
    for(int i = 2000;
    i <= 10000;
    i += 2000) {
        ourResult = MathUtils.binomialCoefficient(i, 3);
        exactResult = binomialCoefficient(i, 3);
        assertEquals(exactResult, ourResult);
        
    }
}

---
--------------------
Run: Math_8
@@@
Split test: org.apache.commons.math3.distribution.DiscreteRealDistributionTest::testIssue942
file: /root/workbench/exportInfo/d4j_buggy/Math_8/src/test/java//org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java
Begin: Pos(207, 5)
End: Pos(213, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_8/src/test/java//org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java
Name: testIssue942
Childs: [StatementAssertion<Begin: Pos(212, 9), End: Pos(212, 88)>,
]
--------------------
Run: Math_13
@@@
Split test: org.apache.commons.math3.optimization.fitting.PolynomialFitterTest::testLargeSample
file: /root/workbench/exportInfo/d4j_buggy/Math_13/src/test/java//org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java
Begin: Pos(226, 5)
End: Pos(251, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_13/src/test/java//org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java
Name: testLargeSample
Childs: [StatementAssertion<Begin: Pos(247, 17), End: Pos(247, 62)>,
StatementAssertion<Begin: Pos(250, 9), End: Pos(250, 44)>,
]
---
@Test public void testLargeSample_catena_0() {
    Random randomizer = new Random(0x5551480dca5b369bl);
    double maxError = 0;
    for(int degree = 0;
    degree < 10;
     ++ degree) {
        PolynomialFunction p = buildRandomPolynomial(degree, randomizer);
        PolynomialFitter fitter = new PolynomialFitter(new LevenbergMarquardtOptimizer());
        for(int i = 0;
        i < 40000;
         ++ i) {
            double x =  - 1.0 + i / 20000.0;
            fitter.addObservedPoint(1.0, x, p.value(x) + 0.1 * randomizer.nextGaussian());
            
        }
        final double[]init = new double[degree + 1];
        PolynomialFunction fitted = new PolynomialFunction(fitter.fit(init));
        for(double x =  - 1.0;
        x < 1.0;
        x += 0.01) {
            double error = FastMath.abs(p.value(x) - fitted.value(x)) / (1.0 + FastMath.abs(p.value(x)));
            maxError = FastMath.max(maxError, error);
            Assert.assertTrue(FastMath.abs(error) < 0.01);
            
        }
    }
}

---
---
@Test public void testLargeSample_catena_1() {
    Random randomizer = new Random(0x5551480dca5b369bl);
    double maxError = 0;
    for(int degree = 0;
    degree < 10;
     ++ degree) {
        PolynomialFunction p = buildRandomPolynomial(degree, randomizer);
        PolynomialFitter fitter = new PolynomialFitter(new LevenbergMarquardtOptimizer());
        for(int i = 0;
        i < 40000;
         ++ i) {
            double x =  - 1.0 + i / 20000.0;
            fitter.addObservedPoint(1.0, x, p.value(x) + 0.1 * randomizer.nextGaussian());
            
        }
        final double[]init = new double[degree + 1];
        PolynomialFunction fitted = new PolynomialFunction(fitter.fit(init));
        for(double x =  - 1.0;
        x < 1.0;
        x += 0.01) {
            double error = FastMath.abs(p.value(x) - fitted.value(x)) / (1.0 + FastMath.abs(p.value(x)));
            maxError = FastMath.max(maxError, error);
            
        }
    }
    Assert.assertTrue(maxError > 0.001);
    
}

---
--------------------
Run: Math_35
@@@
Split test: org.apache.commons.math3.genetics.ElitisticListPopulationTest::testChromosomeListConstructorTooLow
file: /root/workbench/exportInfo/d4j_buggy/Math_35/src/test/java//org/apache/commons/math3/genetics/ElitisticListPopulationTest.java
Begin: Pos(78, 5)
End: Pos(83, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_35/src/test/java//org/apache/commons/math3/genetics/ElitisticListPopulationTest.java
Name: testChromosomeListConstructorTooLow
Childs: []
@@@
Split test: org.apache.commons.math3.genetics.ElitisticListPopulationTest::testConstructorTooHigh
file: /root/workbench/exportInfo/d4j_buggy/Math_35/src/test/java//org/apache/commons/math3/genetics/ElitisticListPopulationTest.java
Begin: Pos(72, 5)
End: Pos(76, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_35/src/test/java//org/apache/commons/math3/genetics/ElitisticListPopulationTest.java
Name: testConstructorTooHigh
Childs: []
@@@
Split test: org.apache.commons.math3.genetics.ElitisticListPopulationTest::testConstructorTooLow
file: /root/workbench/exportInfo/d4j_buggy/Math_35/src/test/java//org/apache/commons/math3/genetics/ElitisticListPopulationTest.java
Begin: Pos(66, 5)
End: Pos(70, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_35/src/test/java//org/apache/commons/math3/genetics/ElitisticListPopulationTest.java
Name: testConstructorTooLow
Childs: []
@@@
Split test: org.apache.commons.math3.genetics.ElitisticListPopulationTest::testChromosomeListConstructorTooHigh
file: /root/workbench/exportInfo/d4j_buggy/Math_35/src/test/java//org/apache/commons/math3/genetics/ElitisticListPopulationTest.java
Begin: Pos(85, 5)
End: Pos(90, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_35/src/test/java//org/apache/commons/math3/genetics/ElitisticListPopulationTest.java
Name: testChromosomeListConstructorTooHigh
Childs: []
--------------------
Run: Math_65
@@@
Split test: org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest::testCircleFitting
file: /root/workbench/exportInfo/d4j_buggy/Math_65/src/test/java//org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java
Begin: Pos(398, 12)
End: Pos(445, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_65/src/test/java//org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java
Name: testCircleFitting
Childs: [StatementAssertion<Begin: Pos(409, 9), End: Pos(409, 52)>,
StatementAssertion<Begin: Pos(410, 9), End: Pos(410, 60)>,
StatementAssertion<Begin: Pos(412, 9), End: Pos(412, 83)>,
StatementAssertion<Begin: Pos(414, 9), End: Pos(414, 75)>,
StatementAssertion<Begin: Pos(415, 9), End: Pos(415, 64)>,
StatementAssertion<Begin: Pos(416, 9), End: Pos(416, 64)>,
StatementAssertion<Begin: Pos(418, 9), End: Pos(418, 46)>,
StatementAssertion<Begin: Pos(419, 9), End: Pos(419, 46)>,
StatementAssertion<Begin: Pos(420, 9), End: Pos(420, 52)>,
StatementAssertion<Begin: Pos(421, 9), End: Pos(421, 46)>,
StatementAssertion<Begin: Pos(423, 9), End: Pos(423, 46)>,
StatementAssertion<Begin: Pos(424, 9), End: Pos(424, 46)>,
StatementAssertion<Begin: Pos(437, 9), End: Pos(437, 47)>,
StatementAssertion<Begin: Pos(438, 9), End: Pos(438, 48)>,
StatementAssertion<Begin: Pos(439, 9), End: Pos(439, 52)>,
StatementAssertion<Begin: Pos(440, 9), End: Pos(440, 47)>,
StatementAssertion<Begin: Pos(442, 9), End: Pos(442, 46)>,
StatementAssertion<Begin: Pos(443, 9), End: Pos(443, 46)>,
]
---
public void testCircleFitting_catena_0()throws FunctionEvaluationException, OptimizationException {
    Circle circle = new Circle();
    circle.addPoint(30.0, 68.0);
    circle.addPoint(50.0,  - 6.0);
    circle.addPoint(110.0,  - 20.0);
    circle.addPoint(35.0, 15.0);
    circle.addPoint(45.0, 97.0);
    LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
    VectorialPointValuePair optimum = optimizer.optimize(circle, new double[] {
        0, 0, 0, 0, 0
    }, new double[] {
        1, 1, 1, 1, 1
    }, new double[] {
        98.680, 47.345
    });
    assertTrue(optimizer.getEvaluations() < 10);
    double rms = optimizer.getRMS();
    Point2D.Double center = new Point2D.Double(optimum.getPointRef()[0], optimum.getPointRef()[1]);
    double[][]cov = optimizer.getCovariances();
    double[]errors = optimizer.guessParametersErrors();
    double r = circle.getRadius(center);
    for(double d = 0;
    d < 2 * Math.PI;
    d += 0.01) {
        circle.addPoint(center.x + r * Math.cos(d), center.y + r * Math.sin(d));
        
    }
    double[]target = new double[circle.getN()];
    Arrays.fill(target, 0.0);
    double[]weights = new double[circle.getN()];
    Arrays.fill(weights, 2.0);
    optimizer.optimize(circle, target, weights, new double[] {
        98.680, 47.345
    });
    cov = optimizer.getCovariances();
    errors = optimizer.guessParametersErrors();
    
}

---
---
public void testCircleFitting_catena_1()throws FunctionEvaluationException, OptimizationException {
    Circle circle = new Circle();
    circle.addPoint(30.0, 68.0);
    circle.addPoint(50.0,  - 6.0);
    circle.addPoint(110.0,  - 20.0);
    circle.addPoint(35.0, 15.0);
    circle.addPoint(45.0, 97.0);
    LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
    VectorialPointValuePair optimum = optimizer.optimize(circle, new double[] {
        0, 0, 0, 0, 0
    }, new double[] {
        1, 1, 1, 1, 1
    }, new double[] {
        98.680, 47.345
    });
    assertTrue(optimizer.getJacobianEvaluations() < 10);
    double rms = optimizer.getRMS();
    Point2D.Double center = new Point2D.Double(optimum.getPointRef()[0], optimum.getPointRef()[1]);
    double[][]cov = optimizer.getCovariances();
    double[]errors = optimizer.guessParametersErrors();
    double r = circle.getRadius(center);
    for(double d = 0;
    d < 2 * Math.PI;
    d += 0.01) {
        circle.addPoint(center.x + r * Math.cos(d), center.y + r * Math.sin(d));
        
    }
    double[]target = new double[circle.getN()];
    Arrays.fill(target, 0.0);
    double[]weights = new double[circle.getN()];
    Arrays.fill(weights, 2.0);
    optimizer.optimize(circle, target, weights, new double[] {
        98.680, 47.345
    });
    cov = optimizer.getCovariances();
    errors = optimizer.guessParametersErrors();
    
}

---
---
public void testCircleFitting_catena_2()throws FunctionEvaluationException, OptimizationException {
    Circle circle = new Circle();
    circle.addPoint(30.0, 68.0);
    circle.addPoint(50.0,  - 6.0);
    circle.addPoint(110.0,  - 20.0);
    circle.addPoint(35.0, 15.0);
    circle.addPoint(45.0, 97.0);
    LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
    VectorialPointValuePair optimum = optimizer.optimize(circle, new double[] {
        0, 0, 0, 0, 0
    }, new double[] {
        1, 1, 1, 1, 1
    }, new double[] {
        98.680, 47.345
    });
    double rms = optimizer.getRMS();
    assertEquals(1.768262623567235, Math.sqrt(circle.getN()) * rms, 1.0e-10);
    Point2D.Double center = new Point2D.Double(optimum.getPointRef()[0], optimum.getPointRef()[1]);
    double[][]cov = optimizer.getCovariances();
    double[]errors = optimizer.guessParametersErrors();
    double r = circle.getRadius(center);
    for(double d = 0;
    d < 2 * Math.PI;
    d += 0.01) {
        circle.addPoint(center.x + r * Math.cos(d), center.y + r * Math.sin(d));
        
    }
    double[]target = new double[circle.getN()];
    Arrays.fill(target, 0.0);
    double[]weights = new double[circle.getN()];
    Arrays.fill(weights, 2.0);
    optimizer.optimize(circle, target, weights, new double[] {
        98.680, 47.345
    });
    cov = optimizer.getCovariances();
    errors = optimizer.guessParametersErrors();
    
}

---
---
public void testCircleFitting_catena_3()throws FunctionEvaluationException, OptimizationException {
    Circle circle = new Circle();
    circle.addPoint(30.0, 68.0);
    circle.addPoint(50.0,  - 6.0);
    circle.addPoint(110.0,  - 20.0);
    circle.addPoint(35.0, 15.0);
    circle.addPoint(45.0, 97.0);
    LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
    VectorialPointValuePair optimum = optimizer.optimize(circle, new double[] {
        0, 0, 0, 0, 0
    }, new double[] {
        1, 1, 1, 1, 1
    }, new double[] {
        98.680, 47.345
    });
    double rms = optimizer.getRMS();
    Point2D.Double center = new Point2D.Double(optimum.getPointRef()[0], optimum.getPointRef()[1]);
    assertEquals(69.96016176931406, circle.getRadius(center), 1.0e-10);
    double[][]cov = optimizer.getCovariances();
    double[]errors = optimizer.guessParametersErrors();
    double r = circle.getRadius(center);
    for(double d = 0;
    d < 2 * Math.PI;
    d += 0.01) {
        circle.addPoint(center.x + r * Math.cos(d), center.y + r * Math.sin(d));
        
    }
    double[]target = new double[circle.getN()];
    Arrays.fill(target, 0.0);
    double[]weights = new double[circle.getN()];
    Arrays.fill(weights, 2.0);
    optimizer.optimize(circle, target, weights, new double[] {
        98.680, 47.345
    });
    cov = optimizer.getCovariances();
    errors = optimizer.guessParametersErrors();
    
}

---
---
public void testCircleFitting_catena_4()throws FunctionEvaluationException, OptimizationException {
    Circle circle = new Circle();
    circle.addPoint(30.0, 68.0);
    circle.addPoint(50.0,  - 6.0);
    circle.addPoint(110.0,  - 20.0);
    circle.addPoint(35.0, 15.0);
    circle.addPoint(45.0, 97.0);
    LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
    VectorialPointValuePair optimum = optimizer.optimize(circle, new double[] {
        0, 0, 0, 0, 0
    }, new double[] {
        1, 1, 1, 1, 1
    }, new double[] {
        98.680, 47.345
    });
    double rms = optimizer.getRMS();
    Point2D.Double center = new Point2D.Double(optimum.getPointRef()[0], optimum.getPointRef()[1]);
    assertEquals(96.07590211815305, center.x, 1.0e-10);
    double[][]cov = optimizer.getCovariances();
    double[]errors = optimizer.guessParametersErrors();
    double r = circle.getRadius(center);
    for(double d = 0;
    d < 2 * Math.PI;
    d += 0.01) {
        circle.addPoint(center.x + r * Math.cos(d), center.y + r * Math.sin(d));
        
    }
    double[]target = new double[circle.getN()];
    Arrays.fill(target, 0.0);
    double[]weights = new double[circle.getN()];
    Arrays.fill(weights, 2.0);
    optimizer.optimize(circle, target, weights, new double[] {
        98.680, 47.345
    });
    cov = optimizer.getCovariances();
    errors = optimizer.guessParametersErrors();
    
}

---
---
public void testCircleFitting_catena_5()throws FunctionEvaluationException, OptimizationException {
    Circle circle = new Circle();
    circle.addPoint(30.0, 68.0);
    circle.addPoint(50.0,  - 6.0);
    circle.addPoint(110.0,  - 20.0);
    circle.addPoint(35.0, 15.0);
    circle.addPoint(45.0, 97.0);
    LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
    VectorialPointValuePair optimum = optimizer.optimize(circle, new double[] {
        0, 0, 0, 0, 0
    }, new double[] {
        1, 1, 1, 1, 1
    }, new double[] {
        98.680, 47.345
    });
    double rms = optimizer.getRMS();
    Point2D.Double center = new Point2D.Double(optimum.getPointRef()[0], optimum.getPointRef()[1]);
    assertEquals(48.13516790438953, center.y, 1.0e-10);
    double[][]cov = optimizer.getCovariances();
    double[]errors = optimizer.guessParametersErrors();
    double r = circle.getRadius(center);
    for(double d = 0;
    d < 2 * Math.PI;
    d += 0.01) {
        circle.addPoint(center.x + r * Math.cos(d), center.y + r * Math.sin(d));
        
    }
    double[]target = new double[circle.getN()];
    Arrays.fill(target, 0.0);
    double[]weights = new double[circle.getN()];
    Arrays.fill(weights, 2.0);
    optimizer.optimize(circle, target, weights, new double[] {
        98.680, 47.345
    });
    cov = optimizer.getCovariances();
    errors = optimizer.guessParametersErrors();
    
}

---
---
public void testCircleFitting_catena_6()throws FunctionEvaluationException, OptimizationException {
    Circle circle = new Circle();
    circle.addPoint(30.0, 68.0);
    circle.addPoint(50.0,  - 6.0);
    circle.addPoint(110.0,  - 20.0);
    circle.addPoint(35.0, 15.0);
    circle.addPoint(45.0, 97.0);
    LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
    VectorialPointValuePair optimum = optimizer.optimize(circle, new double[] {
        0, 0, 0, 0, 0
    }, new double[] {
        1, 1, 1, 1, 1
    }, new double[] {
        98.680, 47.345
    });
    double rms = optimizer.getRMS();
    Point2D.Double center = new Point2D.Double(optimum.getPointRef()[0], optimum.getPointRef()[1]);
    double[][]cov = optimizer.getCovariances();
    assertEquals(1.839, cov[0][0], 0.001);
    double[]errors = optimizer.guessParametersErrors();
    double r = circle.getRadius(center);
    for(double d = 0;
    d < 2 * Math.PI;
    d += 0.01) {
        circle.addPoint(center.x + r * Math.cos(d), center.y + r * Math.sin(d));
        
    }
    double[]target = new double[circle.getN()];
    Arrays.fill(target, 0.0);
    double[]weights = new double[circle.getN()];
    Arrays.fill(weights, 2.0);
    optimizer.optimize(circle, target, weights, new double[] {
        98.680, 47.345
    });
    cov = optimizer.getCovariances();
    errors = optimizer.guessParametersErrors();
    
}

---
---
public void testCircleFitting_catena_7()throws FunctionEvaluationException, OptimizationException {
    Circle circle = new Circle();
    circle.addPoint(30.0, 68.0);
    circle.addPoint(50.0,  - 6.0);
    circle.addPoint(110.0,  - 20.0);
    circle.addPoint(35.0, 15.0);
    circle.addPoint(45.0, 97.0);
    LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
    VectorialPointValuePair optimum = optimizer.optimize(circle, new double[] {
        0, 0, 0, 0, 0
    }, new double[] {
        1, 1, 1, 1, 1
    }, new double[] {
        98.680, 47.345
    });
    double rms = optimizer.getRMS();
    Point2D.Double center = new Point2D.Double(optimum.getPointRef()[0], optimum.getPointRef()[1]);
    double[][]cov = optimizer.getCovariances();
    assertEquals(0.731, cov[0][1], 0.001);
    double[]errors = optimizer.guessParametersErrors();
    double r = circle.getRadius(center);
    for(double d = 0;
    d < 2 * Math.PI;
    d += 0.01) {
        circle.addPoint(center.x + r * Math.cos(d), center.y + r * Math.sin(d));
        
    }
    double[]target = new double[circle.getN()];
    Arrays.fill(target, 0.0);
    double[]weights = new double[circle.getN()];
    Arrays.fill(weights, 2.0);
    optimizer.optimize(circle, target, weights, new double[] {
        98.680, 47.345
    });
    cov = optimizer.getCovariances();
    errors = optimizer.guessParametersErrors();
    
}

---
---
public void testCircleFitting_catena_8()throws FunctionEvaluationException, OptimizationException {
    Circle circle = new Circle();
    circle.addPoint(30.0, 68.0);
    circle.addPoint(50.0,  - 6.0);
    circle.addPoint(110.0,  - 20.0);
    circle.addPoint(35.0, 15.0);
    circle.addPoint(45.0, 97.0);
    LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
    VectorialPointValuePair optimum = optimizer.optimize(circle, new double[] {
        0, 0, 0, 0, 0
    }, new double[] {
        1, 1, 1, 1, 1
    }, new double[] {
        98.680, 47.345
    });
    double rms = optimizer.getRMS();
    Point2D.Double center = new Point2D.Double(optimum.getPointRef()[0], optimum.getPointRef()[1]);
    double[][]cov = optimizer.getCovariances();
    assertEquals(cov[0][1], cov[1][0], 1.0e-14);
    double[]errors = optimizer.guessParametersErrors();
    double r = circle.getRadius(center);
    for(double d = 0;
    d < 2 * Math.PI;
    d += 0.01) {
        circle.addPoint(center.x + r * Math.cos(d), center.y + r * Math.sin(d));
        
    }
    double[]target = new double[circle.getN()];
    Arrays.fill(target, 0.0);
    double[]weights = new double[circle.getN()];
    Arrays.fill(weights, 2.0);
    optimizer.optimize(circle, target, weights, new double[] {
        98.680, 47.345
    });
    cov = optimizer.getCovariances();
    errors = optimizer.guessParametersErrors();
    
}

---
---
public void testCircleFitting_catena_9()throws FunctionEvaluationException, OptimizationException {
    Circle circle = new Circle();
    circle.addPoint(30.0, 68.0);
    circle.addPoint(50.0,  - 6.0);
    circle.addPoint(110.0,  - 20.0);
    circle.addPoint(35.0, 15.0);
    circle.addPoint(45.0, 97.0);
    LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
    VectorialPointValuePair optimum = optimizer.optimize(circle, new double[] {
        0, 0, 0, 0, 0
    }, new double[] {
        1, 1, 1, 1, 1
    }, new double[] {
        98.680, 47.345
    });
    double rms = optimizer.getRMS();
    Point2D.Double center = new Point2D.Double(optimum.getPointRef()[0], optimum.getPointRef()[1]);
    double[][]cov = optimizer.getCovariances();
    assertEquals(0.786, cov[1][1], 0.001);
    double[]errors = optimizer.guessParametersErrors();
    double r = circle.getRadius(center);
    for(double d = 0;
    d < 2 * Math.PI;
    d += 0.01) {
        circle.addPoint(center.x + r * Math.cos(d), center.y + r * Math.sin(d));
        
    }
    double[]target = new double[circle.getN()];
    Arrays.fill(target, 0.0);
    double[]weights = new double[circle.getN()];
    Arrays.fill(weights, 2.0);
    optimizer.optimize(circle, target, weights, new double[] {
        98.680, 47.345
    });
    cov = optimizer.getCovariances();
    errors = optimizer.guessParametersErrors();
    
}

---
---
public void testCircleFitting_catena_10()throws FunctionEvaluationException, OptimizationException {
    Circle circle = new Circle();
    circle.addPoint(30.0, 68.0);
    circle.addPoint(50.0,  - 6.0);
    circle.addPoint(110.0,  - 20.0);
    circle.addPoint(35.0, 15.0);
    circle.addPoint(45.0, 97.0);
    LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
    VectorialPointValuePair optimum = optimizer.optimize(circle, new double[] {
        0, 0, 0, 0, 0
    }, new double[] {
        1, 1, 1, 1, 1
    }, new double[] {
        98.680, 47.345
    });
    double rms = optimizer.getRMS();
    Point2D.Double center = new Point2D.Double(optimum.getPointRef()[0], optimum.getPointRef()[1]);
    double[][]cov = optimizer.getCovariances();
    double[]errors = optimizer.guessParametersErrors();
    assertEquals(1.384, errors[0], 0.001);
    double r = circle.getRadius(center);
    for(double d = 0;
    d < 2 * Math.PI;
    d += 0.01) {
        circle.addPoint(center.x + r * Math.cos(d), center.y + r * Math.sin(d));
        
    }
    double[]target = new double[circle.getN()];
    Arrays.fill(target, 0.0);
    double[]weights = new double[circle.getN()];
    Arrays.fill(weights, 2.0);
    optimizer.optimize(circle, target, weights, new double[] {
        98.680, 47.345
    });
    cov = optimizer.getCovariances();
    errors = optimizer.guessParametersErrors();
    
}

---
---
public void testCircleFitting_catena_11()throws FunctionEvaluationException, OptimizationException {
    Circle circle = new Circle();
    circle.addPoint(30.0, 68.0);
    circle.addPoint(50.0,  - 6.0);
    circle.addPoint(110.0,  - 20.0);
    circle.addPoint(35.0, 15.0);
    circle.addPoint(45.0, 97.0);
    LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
    VectorialPointValuePair optimum = optimizer.optimize(circle, new double[] {
        0, 0, 0, 0, 0
    }, new double[] {
        1, 1, 1, 1, 1
    }, new double[] {
        98.680, 47.345
    });
    double rms = optimizer.getRMS();
    Point2D.Double center = new Point2D.Double(optimum.getPointRef()[0], optimum.getPointRef()[1]);
    double[][]cov = optimizer.getCovariances();
    double[]errors = optimizer.guessParametersErrors();
    assertEquals(0.905, errors[1], 0.001);
    double r = circle.getRadius(center);
    for(double d = 0;
    d < 2 * Math.PI;
    d += 0.01) {
        circle.addPoint(center.x + r * Math.cos(d), center.y + r * Math.sin(d));
        
    }
    double[]target = new double[circle.getN()];
    Arrays.fill(target, 0.0);
    double[]weights = new double[circle.getN()];
    Arrays.fill(weights, 2.0);
    optimizer.optimize(circle, target, weights, new double[] {
        98.680, 47.345
    });
    cov = optimizer.getCovariances();
    errors = optimizer.guessParametersErrors();
    
}

---
---
public void testCircleFitting_catena_12()throws FunctionEvaluationException, OptimizationException {
    Circle circle = new Circle();
    circle.addPoint(30.0, 68.0);
    circle.addPoint(50.0,  - 6.0);
    circle.addPoint(110.0,  - 20.0);
    circle.addPoint(35.0, 15.0);
    circle.addPoint(45.0, 97.0);
    LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
    VectorialPointValuePair optimum = optimizer.optimize(circle, new double[] {
        0, 0, 0, 0, 0
    }, new double[] {
        1, 1, 1, 1, 1
    }, new double[] {
        98.680, 47.345
    });
    double rms = optimizer.getRMS();
    Point2D.Double center = new Point2D.Double(optimum.getPointRef()[0], optimum.getPointRef()[1]);
    double[][]cov = optimizer.getCovariances();
    double[]errors = optimizer.guessParametersErrors();
    double r = circle.getRadius(center);
    for(double d = 0;
    d < 2 * Math.PI;
    d += 0.01) {
        circle.addPoint(center.x + r * Math.cos(d), center.y + r * Math.sin(d));
        
    }
    double[]target = new double[circle.getN()];
    Arrays.fill(target, 0.0);
    double[]weights = new double[circle.getN()];
    Arrays.fill(weights, 2.0);
    optimizer.optimize(circle, target, weights, new double[] {
        98.680, 47.345
    });
    cov = optimizer.getCovariances();
    assertEquals(0.0016, cov[0][0], 0.001);
    errors = optimizer.guessParametersErrors();
    
}

---
---
public void testCircleFitting_catena_13()throws FunctionEvaluationException, OptimizationException {
    Circle circle = new Circle();
    circle.addPoint(30.0, 68.0);
    circle.addPoint(50.0,  - 6.0);
    circle.addPoint(110.0,  - 20.0);
    circle.addPoint(35.0, 15.0);
    circle.addPoint(45.0, 97.0);
    LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
    VectorialPointValuePair optimum = optimizer.optimize(circle, new double[] {
        0, 0, 0, 0, 0
    }, new double[] {
        1, 1, 1, 1, 1
    }, new double[] {
        98.680, 47.345
    });
    double rms = optimizer.getRMS();
    Point2D.Double center = new Point2D.Double(optimum.getPointRef()[0], optimum.getPointRef()[1]);
    double[][]cov = optimizer.getCovariances();
    double[]errors = optimizer.guessParametersErrors();
    double r = circle.getRadius(center);
    for(double d = 0;
    d < 2 * Math.PI;
    d += 0.01) {
        circle.addPoint(center.x + r * Math.cos(d), center.y + r * Math.sin(d));
        
    }
    double[]target = new double[circle.getN()];
    Arrays.fill(target, 0.0);
    double[]weights = new double[circle.getN()];
    Arrays.fill(weights, 2.0);
    optimizer.optimize(circle, target, weights, new double[] {
        98.680, 47.345
    });
    cov = optimizer.getCovariances();
    assertEquals(3.2e-7, cov[0][1], 1.0e-9);
    errors = optimizer.guessParametersErrors();
    
}

---
---
public void testCircleFitting_catena_14()throws FunctionEvaluationException, OptimizationException {
    Circle circle = new Circle();
    circle.addPoint(30.0, 68.0);
    circle.addPoint(50.0,  - 6.0);
    circle.addPoint(110.0,  - 20.0);
    circle.addPoint(35.0, 15.0);
    circle.addPoint(45.0, 97.0);
    LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
    VectorialPointValuePair optimum = optimizer.optimize(circle, new double[] {
        0, 0, 0, 0, 0
    }, new double[] {
        1, 1, 1, 1, 1
    }, new double[] {
        98.680, 47.345
    });
    double rms = optimizer.getRMS();
    Point2D.Double center = new Point2D.Double(optimum.getPointRef()[0], optimum.getPointRef()[1]);
    double[][]cov = optimizer.getCovariances();
    double[]errors = optimizer.guessParametersErrors();
    double r = circle.getRadius(center);
    for(double d = 0;
    d < 2 * Math.PI;
    d += 0.01) {
        circle.addPoint(center.x + r * Math.cos(d), center.y + r * Math.sin(d));
        
    }
    double[]target = new double[circle.getN()];
    Arrays.fill(target, 0.0);
    double[]weights = new double[circle.getN()];
    Arrays.fill(weights, 2.0);
    optimizer.optimize(circle, target, weights, new double[] {
        98.680, 47.345
    });
    cov = optimizer.getCovariances();
    assertEquals(cov[0][1], cov[1][0], 1.0e-14);
    errors = optimizer.guessParametersErrors();
    
}

---
---
public void testCircleFitting_catena_15()throws FunctionEvaluationException, OptimizationException {
    Circle circle = new Circle();
    circle.addPoint(30.0, 68.0);
    circle.addPoint(50.0,  - 6.0);
    circle.addPoint(110.0,  - 20.0);
    circle.addPoint(35.0, 15.0);
    circle.addPoint(45.0, 97.0);
    LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
    VectorialPointValuePair optimum = optimizer.optimize(circle, new double[] {
        0, 0, 0, 0, 0
    }, new double[] {
        1, 1, 1, 1, 1
    }, new double[] {
        98.680, 47.345
    });
    double rms = optimizer.getRMS();
    Point2D.Double center = new Point2D.Double(optimum.getPointRef()[0], optimum.getPointRef()[1]);
    double[][]cov = optimizer.getCovariances();
    double[]errors = optimizer.guessParametersErrors();
    double r = circle.getRadius(center);
    for(double d = 0;
    d < 2 * Math.PI;
    d += 0.01) {
        circle.addPoint(center.x + r * Math.cos(d), center.y + r * Math.sin(d));
        
    }
    double[]target = new double[circle.getN()];
    Arrays.fill(target, 0.0);
    double[]weights = new double[circle.getN()];
    Arrays.fill(weights, 2.0);
    optimizer.optimize(circle, target, weights, new double[] {
        98.680, 47.345
    });
    cov = optimizer.getCovariances();
    assertEquals(0.0016, cov[1][1], 0.001);
    errors = optimizer.guessParametersErrors();
    
}

---
---
public void testCircleFitting_catena_16()throws FunctionEvaluationException, OptimizationException {
    Circle circle = new Circle();
    circle.addPoint(30.0, 68.0);
    circle.addPoint(50.0,  - 6.0);
    circle.addPoint(110.0,  - 20.0);
    circle.addPoint(35.0, 15.0);
    circle.addPoint(45.0, 97.0);
    LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
    VectorialPointValuePair optimum = optimizer.optimize(circle, new double[] {
        0, 0, 0, 0, 0
    }, new double[] {
        1, 1, 1, 1, 1
    }, new double[] {
        98.680, 47.345
    });
    double rms = optimizer.getRMS();
    Point2D.Double center = new Point2D.Double(optimum.getPointRef()[0], optimum.getPointRef()[1]);
    double[][]cov = optimizer.getCovariances();
    double[]errors = optimizer.guessParametersErrors();
    double r = circle.getRadius(center);
    for(double d = 0;
    d < 2 * Math.PI;
    d += 0.01) {
        circle.addPoint(center.x + r * Math.cos(d), center.y + r * Math.sin(d));
        
    }
    double[]target = new double[circle.getN()];
    Arrays.fill(target, 0.0);
    double[]weights = new double[circle.getN()];
    Arrays.fill(weights, 2.0);
    optimizer.optimize(circle, target, weights, new double[] {
        98.680, 47.345
    });
    cov = optimizer.getCovariances();
    errors = optimizer.guessParametersErrors();
    assertEquals(0.004, errors[0], 0.001);
    
}

---
---
public void testCircleFitting_catena_17()throws FunctionEvaluationException, OptimizationException {
    Circle circle = new Circle();
    circle.addPoint(30.0, 68.0);
    circle.addPoint(50.0,  - 6.0);
    circle.addPoint(110.0,  - 20.0);
    circle.addPoint(35.0, 15.0);
    circle.addPoint(45.0, 97.0);
    LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
    VectorialPointValuePair optimum = optimizer.optimize(circle, new double[] {
        0, 0, 0, 0, 0
    }, new double[] {
        1, 1, 1, 1, 1
    }, new double[] {
        98.680, 47.345
    });
    double rms = optimizer.getRMS();
    Point2D.Double center = new Point2D.Double(optimum.getPointRef()[0], optimum.getPointRef()[1]);
    double[][]cov = optimizer.getCovariances();
    double[]errors = optimizer.guessParametersErrors();
    double r = circle.getRadius(center);
    for(double d = 0;
    d < 2 * Math.PI;
    d += 0.01) {
        circle.addPoint(center.x + r * Math.cos(d), center.y + r * Math.sin(d));
        
    }
    double[]target = new double[circle.getN()];
    Arrays.fill(target, 0.0);
    double[]weights = new double[circle.getN()];
    Arrays.fill(weights, 2.0);
    optimizer.optimize(circle, target, weights, new double[] {
        98.680, 47.345
    });
    cov = optimizer.getCovariances();
    errors = optimizer.guessParametersErrors();
    assertEquals(0.004, errors[1], 0.001);
    
}

---
--------------------
Run: Math_72
@@@
Split test: org.apache.commons.math.analysis.solvers.BrentSolverTest::testRootEndpoints
file: /root/workbench/exportInfo/d4j_buggy/Math_72/src/test/java//org/apache/commons/math/analysis/solvers/BrentSolverTest.java
Begin: Pos(305, 12)
End: Pos(322, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_72/src/test/java//org/apache/commons/math/analysis/solvers/BrentSolverTest.java
Name: testRootEndpoints
Childs: [StatementAssertion<Begin: Pos(311, 9), End: Pos(311, 68)>,
StatementAssertion<Begin: Pos(314, 9), End: Pos(314, 68)>,
StatementAssertion<Begin: Pos(317, 9), End: Pos(317, 68)>,
StatementAssertion<Begin: Pos(320, 9), End: Pos(320, 68)>,
]
---
public void testRootEndpoints_catena_0()throws Exception {
    UnivariateRealFunction f = new SinFunction();
    UnivariateRealSolver solver = new BrentSolver();
    double result = solver.solve(f, Math.PI, 4);
    assertEquals(Math.PI, result, solver.getAbsoluteAccuracy());
    result = solver.solve(f, 3, Math.PI);
    result = solver.solve(f, Math.PI, 4, 3.5);
    result = solver.solve(f, 3, Math.PI, 3.07);
    
}

---
---
public void testRootEndpoints_catena_1()throws Exception {
    UnivariateRealFunction f = new SinFunction();
    UnivariateRealSolver solver = new BrentSolver();
    double result = solver.solve(f, Math.PI, 4);
    result = solver.solve(f, 3, Math.PI);
    assertEquals(Math.PI, result, solver.getAbsoluteAccuracy());
    result = solver.solve(f, Math.PI, 4, 3.5);
    result = solver.solve(f, 3, Math.PI, 3.07);
    
}

---
---
public void testRootEndpoints_catena_2()throws Exception {
    UnivariateRealFunction f = new SinFunction();
    UnivariateRealSolver solver = new BrentSolver();
    double result = solver.solve(f, Math.PI, 4);
    result = solver.solve(f, 3, Math.PI);
    result = solver.solve(f, Math.PI, 4, 3.5);
    assertEquals(Math.PI, result, solver.getAbsoluteAccuracy());
    result = solver.solve(f, 3, Math.PI, 3.07);
    
}

---
---
public void testRootEndpoints_catena_3()throws Exception {
    UnivariateRealFunction f = new SinFunction();
    UnivariateRealSolver solver = new BrentSolver();
    double result = solver.solve(f, Math.PI, 4);
    result = solver.solve(f, 3, Math.PI);
    result = solver.solve(f, Math.PI, 4, 3.5);
    result = solver.solve(f, 3, Math.PI, 3.07);
    assertEquals(Math.PI, result, solver.getAbsoluteAccuracy());
    
}

---
--------------------
Run: Math_46
@@@
Split test: org.apache.commons.math.complex.ComplexTest::testAtanI
file: /root/workbench/exportInfo/d4j_buggy/Math_46/src/test/java//org/apache/commons/math/complex/ComplexTest.java
Begin: Pos(575, 5)
End: Pos(578, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_46/src/test/java//org/apache/commons/math/complex/ComplexTest.java
Name: testAtanI
Childs: [StatementAssertion<Begin: Pos(577, 9), End: Pos(577, 52)>,
]
@@@
Split test: org.apache.commons.math.complex.ComplexTest::testDivideZero
file: /root/workbench/exportInfo/d4j_buggy/Math_46/src/test/java//org/apache/commons/math/complex/ComplexTest.java
Begin: Pos(228, 5)
End: Pos(234, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_46/src/test/java//org/apache/commons/math/complex/ComplexTest.java
Name: testDivideZero
Childs: [StatementAssertion<Begin: Pos(233, 9), End: Pos(233, 44)>,
]
--------------------
Run: Math_84
@@@
Split test: org.apache.commons.math.optimization.direct.MultiDirectionalTest::testMinimizeMaximize
file: /root/workbench/exportInfo/d4j_buggy/Math_84/src/test/java//org/apache/commons/math/optimization/direct/MultiDirectionalTest.java
Begin: Pos(69, 3)
End: Pos(128, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Math_84/src/test/java//org/apache/commons/math/optimization/direct/MultiDirectionalTest.java
Name: testMinimizeMaximize
Childs: [StatementAssertion<Begin: Pos(99, 7), End: Pos(99, 68)>,
StatementAssertion<Begin: Pos(100, 7), End: Pos(100, 68)>,
StatementAssertion<Begin: Pos(101, 7), End: Pos(101, 69)>,
StatementAssertion<Begin: Pos(102, 7), End: Pos(102, 58)>,
StatementAssertion<Begin: Pos(103, 7), End: Pos(103, 58)>,
StatementAssertion<Begin: Pos(106, 7), End: Pos(106, 68)>,
StatementAssertion<Begin: Pos(107, 7), End: Pos(107, 68)>,
StatementAssertion<Begin: Pos(108, 7), End: Pos(108, 69)>,
StatementAssertion<Begin: Pos(109, 7), End: Pos(109, 58)>,
StatementAssertion<Begin: Pos(110, 7), End: Pos(110, 58)>,
StatementAssertion<Begin: Pos(114, 7), End: Pos(114, 68)>,
StatementAssertion<Begin: Pos(115, 7), End: Pos(115, 68)>,
StatementAssertion<Begin: Pos(116, 7), End: Pos(116, 69)>,
StatementAssertion<Begin: Pos(117, 7), End: Pos(117, 58)>,
StatementAssertion<Begin: Pos(118, 7), End: Pos(118, 58)>,
StatementAssertion<Begin: Pos(122, 7), End: Pos(122, 68)>,
StatementAssertion<Begin: Pos(123, 7), End: Pos(123, 68)>,
StatementAssertion<Begin: Pos(124, 7), End: Pos(124, 69)>,
StatementAssertion<Begin: Pos(125, 7), End: Pos(125, 58)>,
StatementAssertion<Begin: Pos(126, 7), End: Pos(126, 58)>,
]
---
@Test public void testMinimizeMaximize_catena_0()throws FunctionEvaluationException, ConvergenceException {
    final double xM =  - 3.841947088256863675365;
    final double yM =  - 1.391745200270734924416;
    final double xP = 0.2286682237349059125691;
    final double yP =  - yM;
    final double valueXmYm = 0.2373295333134216789769;
    final double valueXmYp =  - valueXmYm;
    final double valueXpYm =  - 0.7290400707055187115322;
    final double valueXpYp =  - valueXpYm;
    MultivariateRealFunction fourExtrema = new MultivariateRealFunction() {
        private static final long serialVersionUID =  - 7039124064449091152L;
        public double value(double[]variables)throws FunctionEvaluationException {
            final double x = variables[0];
            final double y = variables[1];
            return((x == 0) || (y == 0)) ? 0 : (Math.atan(x) * Math.atan(x + 2) * Math.atan(y) * Math.atan(y) / (x * y));
            
        }
    };
    MultiDirectional optimizer = new MultiDirectional();
    optimizer.setConvergenceChecker(new SimpleScalarValueChecker(1.0e-11, 1.0e-30));
    optimizer.setMaxIterations(200);
    optimizer.setStartConfiguration(new double[] {
        0.2, 0.2
    });
    RealPointValuePair optimum;
    optimum = optimizer.optimize(fourExtrema, GoalType.MINIMIZE, new double[] {
         - 3.0, 0
    });
    Assert.assertEquals(xM, optimum.getPoint()[0], 4.0e-6);
    optimum = optimizer.optimize(fourExtrema, GoalType.MINIMIZE, new double[] {
         + 1, 0
    });
    optimum = optimizer.optimize(fourExtrema, GoalType.MAXIMIZE, new double[] {
         - 3.0, 0.0
    });
    optimizer.setConvergenceChecker(new SimpleScalarValueChecker(1.0e-15, 1.0e-30));
    optimum = optimizer.optimize(fourExtrema, GoalType.MAXIMIZE, new double[] {
         + 1, 0
    });
    
}

---
---
@Test public void testMinimizeMaximize_catena_1()throws FunctionEvaluationException, ConvergenceException {
    final double xM =  - 3.841947088256863675365;
    final double yM =  - 1.391745200270734924416;
    final double xP = 0.2286682237349059125691;
    final double yP =  - yM;
    final double valueXmYm = 0.2373295333134216789769;
    final double valueXmYp =  - valueXmYm;
    final double valueXpYm =  - 0.7290400707055187115322;
    final double valueXpYp =  - valueXpYm;
    MultivariateRealFunction fourExtrema = new MultivariateRealFunction() {
        private static final long serialVersionUID =  - 7039124064449091152L;
        public double value(double[]variables)throws FunctionEvaluationException {
            final double x = variables[0];
            final double y = variables[1];
            return((x == 0) || (y == 0)) ? 0 : (Math.atan(x) * Math.atan(x + 2) * Math.atan(y) * Math.atan(y) / (x * y));
            
        }
    };
    MultiDirectional optimizer = new MultiDirectional();
    optimizer.setConvergenceChecker(new SimpleScalarValueChecker(1.0e-11, 1.0e-30));
    optimizer.setMaxIterations(200);
    optimizer.setStartConfiguration(new double[] {
        0.2, 0.2
    });
    RealPointValuePair optimum;
    optimum = optimizer.optimize(fourExtrema, GoalType.MINIMIZE, new double[] {
         - 3.0, 0
    });
    Assert.assertEquals(yP, optimum.getPoint()[1], 3.0e-6);
    optimum = optimizer.optimize(fourExtrema, GoalType.MINIMIZE, new double[] {
         + 1, 0
    });
    optimum = optimizer.optimize(fourExtrema, GoalType.MAXIMIZE, new double[] {
         - 3.0, 0.0
    });
    optimizer.setConvergenceChecker(new SimpleScalarValueChecker(1.0e-15, 1.0e-30));
    optimum = optimizer.optimize(fourExtrema, GoalType.MAXIMIZE, new double[] {
         + 1, 0
    });
    
}

---
---
@Test public void testMinimizeMaximize_catena_2()throws FunctionEvaluationException, ConvergenceException {
    final double xM =  - 3.841947088256863675365;
    final double yM =  - 1.391745200270734924416;
    final double xP = 0.2286682237349059125691;
    final double yP =  - yM;
    final double valueXmYm = 0.2373295333134216789769;
    final double valueXmYp =  - valueXmYm;
    final double valueXpYm =  - 0.7290400707055187115322;
    final double valueXpYp =  - valueXpYm;
    MultivariateRealFunction fourExtrema = new MultivariateRealFunction() {
        private static final long serialVersionUID =  - 7039124064449091152L;
        public double value(double[]variables)throws FunctionEvaluationException {
            final double x = variables[0];
            final double y = variables[1];
            return((x == 0) || (y == 0)) ? 0 : (Math.atan(x) * Math.atan(x + 2) * Math.atan(y) * Math.atan(y) / (x * y));
            
        }
    };
    MultiDirectional optimizer = new MultiDirectional();
    optimizer.setConvergenceChecker(new SimpleScalarValueChecker(1.0e-11, 1.0e-30));
    optimizer.setMaxIterations(200);
    optimizer.setStartConfiguration(new double[] {
        0.2, 0.2
    });
    RealPointValuePair optimum;
    optimum = optimizer.optimize(fourExtrema, GoalType.MINIMIZE, new double[] {
         - 3.0, 0
    });
    Assert.assertEquals(valueXmYp, optimum.getValue(), 8.0e-13);
    optimum = optimizer.optimize(fourExtrema, GoalType.MINIMIZE, new double[] {
         + 1, 0
    });
    optimum = optimizer.optimize(fourExtrema, GoalType.MAXIMIZE, new double[] {
         - 3.0, 0.0
    });
    optimizer.setConvergenceChecker(new SimpleScalarValueChecker(1.0e-15, 1.0e-30));
    optimum = optimizer.optimize(fourExtrema, GoalType.MAXIMIZE, new double[] {
         + 1, 0
    });
    
}

---
---
@Test public void testMinimizeMaximize_catena_3()throws FunctionEvaluationException, ConvergenceException {
    final double xM =  - 3.841947088256863675365;
    final double yM =  - 1.391745200270734924416;
    final double xP = 0.2286682237349059125691;
    final double yP =  - yM;
    final double valueXmYm = 0.2373295333134216789769;
    final double valueXmYp =  - valueXmYm;
    final double valueXpYm =  - 0.7290400707055187115322;
    final double valueXpYp =  - valueXpYm;
    MultivariateRealFunction fourExtrema = new MultivariateRealFunction() {
        private static final long serialVersionUID =  - 7039124064449091152L;
        public double value(double[]variables)throws FunctionEvaluationException {
            final double x = variables[0];
            final double y = variables[1];
            return((x == 0) || (y == 0)) ? 0 : (Math.atan(x) * Math.atan(x + 2) * Math.atan(y) * Math.atan(y) / (x * y));
            
        }
    };
    MultiDirectional optimizer = new MultiDirectional();
    optimizer.setConvergenceChecker(new SimpleScalarValueChecker(1.0e-11, 1.0e-30));
    optimizer.setMaxIterations(200);
    optimizer.setStartConfiguration(new double[] {
        0.2, 0.2
    });
    RealPointValuePair optimum;
    optimum = optimizer.optimize(fourExtrema, GoalType.MINIMIZE, new double[] {
         - 3.0, 0
    });
    Assert.assertTrue(optimizer.getEvaluations() > 120);
    optimum = optimizer.optimize(fourExtrema, GoalType.MINIMIZE, new double[] {
         + 1, 0
    });
    optimum = optimizer.optimize(fourExtrema, GoalType.MAXIMIZE, new double[] {
         - 3.0, 0.0
    });
    optimizer.setConvergenceChecker(new SimpleScalarValueChecker(1.0e-15, 1.0e-30));
    optimum = optimizer.optimize(fourExtrema, GoalType.MAXIMIZE, new double[] {
         + 1, 0
    });
    
}

---
---
@Test public void testMinimizeMaximize_catena_4()throws FunctionEvaluationException, ConvergenceException {
    final double xM =  - 3.841947088256863675365;
    final double yM =  - 1.391745200270734924416;
    final double xP = 0.2286682237349059125691;
    final double yP =  - yM;
    final double valueXmYm = 0.2373295333134216789769;
    final double valueXmYp =  - valueXmYm;
    final double valueXpYm =  - 0.7290400707055187115322;
    final double valueXpYp =  - valueXpYm;
    MultivariateRealFunction fourExtrema = new MultivariateRealFunction() {
        private static final long serialVersionUID =  - 7039124064449091152L;
        public double value(double[]variables)throws FunctionEvaluationException {
            final double x = variables[0];
            final double y = variables[1];
            return((x == 0) || (y == 0)) ? 0 : (Math.atan(x) * Math.atan(x + 2) * Math.atan(y) * Math.atan(y) / (x * y));
            
        }
    };
    MultiDirectional optimizer = new MultiDirectional();
    optimizer.setConvergenceChecker(new SimpleScalarValueChecker(1.0e-11, 1.0e-30));
    optimizer.setMaxIterations(200);
    optimizer.setStartConfiguration(new double[] {
        0.2, 0.2
    });
    RealPointValuePair optimum;
    optimum = optimizer.optimize(fourExtrema, GoalType.MINIMIZE, new double[] {
         - 3.0, 0
    });
    Assert.assertTrue(optimizer.getEvaluations() < 150);
    optimum = optimizer.optimize(fourExtrema, GoalType.MINIMIZE, new double[] {
         + 1, 0
    });
    optimum = optimizer.optimize(fourExtrema, GoalType.MAXIMIZE, new double[] {
         - 3.0, 0.0
    });
    optimizer.setConvergenceChecker(new SimpleScalarValueChecker(1.0e-15, 1.0e-30));
    optimum = optimizer.optimize(fourExtrema, GoalType.MAXIMIZE, new double[] {
         + 1, 0
    });
    
}

---
---
@Test public void testMinimizeMaximize_catena_5()throws FunctionEvaluationException, ConvergenceException {
    final double xM =  - 3.841947088256863675365;
    final double yM =  - 1.391745200270734924416;
    final double xP = 0.2286682237349059125691;
    final double yP =  - yM;
    final double valueXmYm = 0.2373295333134216789769;
    final double valueXmYp =  - valueXmYm;
    final double valueXpYm =  - 0.7290400707055187115322;
    final double valueXpYp =  - valueXpYm;
    MultivariateRealFunction fourExtrema = new MultivariateRealFunction() {
        private static final long serialVersionUID =  - 7039124064449091152L;
        public double value(double[]variables)throws FunctionEvaluationException {
            final double x = variables[0];
            final double y = variables[1];
            return((x == 0) || (y == 0)) ? 0 : (Math.atan(x) * Math.atan(x + 2) * Math.atan(y) * Math.atan(y) / (x * y));
            
        }
    };
    MultiDirectional optimizer = new MultiDirectional();
    optimizer.setConvergenceChecker(new SimpleScalarValueChecker(1.0e-11, 1.0e-30));
    optimizer.setMaxIterations(200);
    optimizer.setStartConfiguration(new double[] {
        0.2, 0.2
    });
    RealPointValuePair optimum;
    optimum = optimizer.optimize(fourExtrema, GoalType.MINIMIZE, new double[] {
         - 3.0, 0
    });
    optimum = optimizer.optimize(fourExtrema, GoalType.MINIMIZE, new double[] {
         + 1, 0
    });
    Assert.assertEquals(xP, optimum.getPoint()[0], 2.0e-8);
    optimum = optimizer.optimize(fourExtrema, GoalType.MAXIMIZE, new double[] {
         - 3.0, 0.0
    });
    optimizer.setConvergenceChecker(new SimpleScalarValueChecker(1.0e-15, 1.0e-30));
    optimum = optimizer.optimize(fourExtrema, GoalType.MAXIMIZE, new double[] {
         + 1, 0
    });
    
}

---
---
@Test public void testMinimizeMaximize_catena_6()throws FunctionEvaluationException, ConvergenceException {
    final double xM =  - 3.841947088256863675365;
    final double yM =  - 1.391745200270734924416;
    final double xP = 0.2286682237349059125691;
    final double yP =  - yM;
    final double valueXmYm = 0.2373295333134216789769;
    final double valueXmYp =  - valueXmYm;
    final double valueXpYm =  - 0.7290400707055187115322;
    final double valueXpYp =  - valueXpYm;
    MultivariateRealFunction fourExtrema = new MultivariateRealFunction() {
        private static final long serialVersionUID =  - 7039124064449091152L;
        public double value(double[]variables)throws FunctionEvaluationException {
            final double x = variables[0];
            final double y = variables[1];
            return((x == 0) || (y == 0)) ? 0 : (Math.atan(x) * Math.atan(x + 2) * Math.atan(y) * Math.atan(y) / (x * y));
            
        }
    };
    MultiDirectional optimizer = new MultiDirectional();
    optimizer.setConvergenceChecker(new SimpleScalarValueChecker(1.0e-11, 1.0e-30));
    optimizer.setMaxIterations(200);
    optimizer.setStartConfiguration(new double[] {
        0.2, 0.2
    });
    RealPointValuePair optimum;
    optimum = optimizer.optimize(fourExtrema, GoalType.MINIMIZE, new double[] {
         - 3.0, 0
    });
    optimum = optimizer.optimize(fourExtrema, GoalType.MINIMIZE, new double[] {
         + 1, 0
    });
    Assert.assertEquals(yM, optimum.getPoint()[1], 3.0e-6);
    optimum = optimizer.optimize(fourExtrema, GoalType.MAXIMIZE, new double[] {
         - 3.0, 0.0
    });
    optimizer.setConvergenceChecker(new SimpleScalarValueChecker(1.0e-15, 1.0e-30));
    optimum = optimizer.optimize(fourExtrema, GoalType.MAXIMIZE, new double[] {
         + 1, 0
    });
    
}

---
---
@Test public void testMinimizeMaximize_catena_7()throws FunctionEvaluationException, ConvergenceException {
    final double xM =  - 3.841947088256863675365;
    final double yM =  - 1.391745200270734924416;
    final double xP = 0.2286682237349059125691;
    final double yP =  - yM;
    final double valueXmYm = 0.2373295333134216789769;
    final double valueXmYp =  - valueXmYm;
    final double valueXpYm =  - 0.7290400707055187115322;
    final double valueXpYp =  - valueXpYm;
    MultivariateRealFunction fourExtrema = new MultivariateRealFunction() {
        private static final long serialVersionUID =  - 7039124064449091152L;
        public double value(double[]variables)throws FunctionEvaluationException {
            final double x = variables[0];
            final double y = variables[1];
            return((x == 0) || (y == 0)) ? 0 : (Math.atan(x) * Math.atan(x + 2) * Math.atan(y) * Math.atan(y) / (x * y));
            
        }
    };
    MultiDirectional optimizer = new MultiDirectional();
    optimizer.setConvergenceChecker(new SimpleScalarValueChecker(1.0e-11, 1.0e-30));
    optimizer.setMaxIterations(200);
    optimizer.setStartConfiguration(new double[] {
        0.2, 0.2
    });
    RealPointValuePair optimum;
    optimum = optimizer.optimize(fourExtrema, GoalType.MINIMIZE, new double[] {
         - 3.0, 0
    });
    optimum = optimizer.optimize(fourExtrema, GoalType.MINIMIZE, new double[] {
         + 1, 0
    });
    Assert.assertEquals(valueXpYm, optimum.getValue(), 2.0e-12);
    optimum = optimizer.optimize(fourExtrema, GoalType.MAXIMIZE, new double[] {
         - 3.0, 0.0
    });
    optimizer.setConvergenceChecker(new SimpleScalarValueChecker(1.0e-15, 1.0e-30));
    optimum = optimizer.optimize(fourExtrema, GoalType.MAXIMIZE, new double[] {
         + 1, 0
    });
    
}

---
---
@Test public void testMinimizeMaximize_catena_8()throws FunctionEvaluationException, ConvergenceException {
    final double xM =  - 3.841947088256863675365;
    final double yM =  - 1.391745200270734924416;
    final double xP = 0.2286682237349059125691;
    final double yP =  - yM;
    final double valueXmYm = 0.2373295333134216789769;
    final double valueXmYp =  - valueXmYm;
    final double valueXpYm =  - 0.7290400707055187115322;
    final double valueXpYp =  - valueXpYm;
    MultivariateRealFunction fourExtrema = new MultivariateRealFunction() {
        private static final long serialVersionUID =  - 7039124064449091152L;
        public double value(double[]variables)throws FunctionEvaluationException {
            final double x = variables[0];
            final double y = variables[1];
            return((x == 0) || (y == 0)) ? 0 : (Math.atan(x) * Math.atan(x + 2) * Math.atan(y) * Math.atan(y) / (x * y));
            
        }
    };
    MultiDirectional optimizer = new MultiDirectional();
    optimizer.setConvergenceChecker(new SimpleScalarValueChecker(1.0e-11, 1.0e-30));
    optimizer.setMaxIterations(200);
    optimizer.setStartConfiguration(new double[] {
        0.2, 0.2
    });
    RealPointValuePair optimum;
    optimum = optimizer.optimize(fourExtrema, GoalType.MINIMIZE, new double[] {
         - 3.0, 0
    });
    optimum = optimizer.optimize(fourExtrema, GoalType.MINIMIZE, new double[] {
         + 1, 0
    });
    Assert.assertTrue(optimizer.getEvaluations() > 120);
    optimum = optimizer.optimize(fourExtrema, GoalType.MAXIMIZE, new double[] {
         - 3.0, 0.0
    });
    optimizer.setConvergenceChecker(new SimpleScalarValueChecker(1.0e-15, 1.0e-30));
    optimum = optimizer.optimize(fourExtrema, GoalType.MAXIMIZE, new double[] {
         + 1, 0
    });
    
}

---
---
@Test public void testMinimizeMaximize_catena_9()throws FunctionEvaluationException, ConvergenceException {
    final double xM =  - 3.841947088256863675365;
    final double yM =  - 1.391745200270734924416;
    final double xP = 0.2286682237349059125691;
    final double yP =  - yM;
    final double valueXmYm = 0.2373295333134216789769;
    final double valueXmYp =  - valueXmYm;
    final double valueXpYm =  - 0.7290400707055187115322;
    final double valueXpYp =  - valueXpYm;
    MultivariateRealFunction fourExtrema = new MultivariateRealFunction() {
        private static final long serialVersionUID =  - 7039124064449091152L;
        public double value(double[]variables)throws FunctionEvaluationException {
            final double x = variables[0];
            final double y = variables[1];
            return((x == 0) || (y == 0)) ? 0 : (Math.atan(x) * Math.atan(x + 2) * Math.atan(y) * Math.atan(y) / (x * y));
            
        }
    };
    MultiDirectional optimizer = new MultiDirectional();
    optimizer.setConvergenceChecker(new SimpleScalarValueChecker(1.0e-11, 1.0e-30));
    optimizer.setMaxIterations(200);
    optimizer.setStartConfiguration(new double[] {
        0.2, 0.2
    });
    RealPointValuePair optimum;
    optimum = optimizer.optimize(fourExtrema, GoalType.MINIMIZE, new double[] {
         - 3.0, 0
    });
    optimum = optimizer.optimize(fourExtrema, GoalType.MINIMIZE, new double[] {
         + 1, 0
    });
    Assert.assertTrue(optimizer.getEvaluations() < 150);
    optimum = optimizer.optimize(fourExtrema, GoalType.MAXIMIZE, new double[] {
         - 3.0, 0.0
    });
    optimizer.setConvergenceChecker(new SimpleScalarValueChecker(1.0e-15, 1.0e-30));
    optimum = optimizer.optimize(fourExtrema, GoalType.MAXIMIZE, new double[] {
         + 1, 0
    });
    
}

---
---
@Test public void testMinimizeMaximize_catena_10()throws FunctionEvaluationException, ConvergenceException {
    final double xM =  - 3.841947088256863675365;
    final double yM =  - 1.391745200270734924416;
    final double xP = 0.2286682237349059125691;
    final double yP =  - yM;
    final double valueXmYm = 0.2373295333134216789769;
    final double valueXmYp =  - valueXmYm;
    final double valueXpYm =  - 0.7290400707055187115322;
    final double valueXpYp =  - valueXpYm;
    MultivariateRealFunction fourExtrema = new MultivariateRealFunction() {
        private static final long serialVersionUID =  - 7039124064449091152L;
        public double value(double[]variables)throws FunctionEvaluationException {
            final double x = variables[0];
            final double y = variables[1];
            return((x == 0) || (y == 0)) ? 0 : (Math.atan(x) * Math.atan(x + 2) * Math.atan(y) * Math.atan(y) / (x * y));
            
        }
    };
    MultiDirectional optimizer = new MultiDirectional();
    optimizer.setConvergenceChecker(new SimpleScalarValueChecker(1.0e-11, 1.0e-30));
    optimizer.setMaxIterations(200);
    optimizer.setStartConfiguration(new double[] {
        0.2, 0.2
    });
    RealPointValuePair optimum;
    optimum = optimizer.optimize(fourExtrema, GoalType.MINIMIZE, new double[] {
         - 3.0, 0
    });
    optimum = optimizer.optimize(fourExtrema, GoalType.MINIMIZE, new double[] {
         + 1, 0
    });
    optimum = optimizer.optimize(fourExtrema, GoalType.MAXIMIZE, new double[] {
         - 3.0, 0.0
    });
    Assert.assertEquals(xM, optimum.getPoint()[0], 7.0e-7);
    optimizer.setConvergenceChecker(new SimpleScalarValueChecker(1.0e-15, 1.0e-30));
    optimum = optimizer.optimize(fourExtrema, GoalType.MAXIMIZE, new double[] {
         + 1, 0
    });
    
}

---
---
@Test public void testMinimizeMaximize_catena_11()throws FunctionEvaluationException, ConvergenceException {
    final double xM =  - 3.841947088256863675365;
    final double yM =  - 1.391745200270734924416;
    final double xP = 0.2286682237349059125691;
    final double yP =  - yM;
    final double valueXmYm = 0.2373295333134216789769;
    final double valueXmYp =  - valueXmYm;
    final double valueXpYm =  - 0.7290400707055187115322;
    final double valueXpYp =  - valueXpYm;
    MultivariateRealFunction fourExtrema = new MultivariateRealFunction() {
        private static final long serialVersionUID =  - 7039124064449091152L;
        public double value(double[]variables)throws FunctionEvaluationException {
            final double x = variables[0];
            final double y = variables[1];
            return((x == 0) || (y == 0)) ? 0 : (Math.atan(x) * Math.atan(x + 2) * Math.atan(y) * Math.atan(y) / (x * y));
            
        }
    };
    MultiDirectional optimizer = new MultiDirectional();
    optimizer.setConvergenceChecker(new SimpleScalarValueChecker(1.0e-11, 1.0e-30));
    optimizer.setMaxIterations(200);
    optimizer.setStartConfiguration(new double[] {
        0.2, 0.2
    });
    RealPointValuePair optimum;
    optimum = optimizer.optimize(fourExtrema, GoalType.MINIMIZE, new double[] {
         - 3.0, 0
    });
    optimum = optimizer.optimize(fourExtrema, GoalType.MINIMIZE, new double[] {
         + 1, 0
    });
    optimum = optimizer.optimize(fourExtrema, GoalType.MAXIMIZE, new double[] {
         - 3.0, 0.0
    });
    Assert.assertEquals(yM, optimum.getPoint()[1], 3.0e-7);
    optimizer.setConvergenceChecker(new SimpleScalarValueChecker(1.0e-15, 1.0e-30));
    optimum = optimizer.optimize(fourExtrema, GoalType.MAXIMIZE, new double[] {
         + 1, 0
    });
    
}

---
---
@Test public void testMinimizeMaximize_catena_12()throws FunctionEvaluationException, ConvergenceException {
    final double xM =  - 3.841947088256863675365;
    final double yM =  - 1.391745200270734924416;
    final double xP = 0.2286682237349059125691;
    final double yP =  - yM;
    final double valueXmYm = 0.2373295333134216789769;
    final double valueXmYp =  - valueXmYm;
    final double valueXpYm =  - 0.7290400707055187115322;
    final double valueXpYp =  - valueXpYm;
    MultivariateRealFunction fourExtrema = new MultivariateRealFunction() {
        private static final long serialVersionUID =  - 7039124064449091152L;
        public double value(double[]variables)throws FunctionEvaluationException {
            final double x = variables[0];
            final double y = variables[1];
            return((x == 0) || (y == 0)) ? 0 : (Math.atan(x) * Math.atan(x + 2) * Math.atan(y) * Math.atan(y) / (x * y));
            
        }
    };
    MultiDirectional optimizer = new MultiDirectional();
    optimizer.setConvergenceChecker(new SimpleScalarValueChecker(1.0e-11, 1.0e-30));
    optimizer.setMaxIterations(200);
    optimizer.setStartConfiguration(new double[] {
        0.2, 0.2
    });
    RealPointValuePair optimum;
    optimum = optimizer.optimize(fourExtrema, GoalType.MINIMIZE, new double[] {
         - 3.0, 0
    });
    optimum = optimizer.optimize(fourExtrema, GoalType.MINIMIZE, new double[] {
         + 1, 0
    });
    optimum = optimizer.optimize(fourExtrema, GoalType.MAXIMIZE, new double[] {
         - 3.0, 0.0
    });
    Assert.assertEquals(valueXmYm, optimum.getValue(), 2.0e-14);
    optimizer.setConvergenceChecker(new SimpleScalarValueChecker(1.0e-15, 1.0e-30));
    optimum = optimizer.optimize(fourExtrema, GoalType.MAXIMIZE, new double[] {
         + 1, 0
    });
    
}

---
---
@Test public void testMinimizeMaximize_catena_13()throws FunctionEvaluationException, ConvergenceException {
    final double xM =  - 3.841947088256863675365;
    final double yM =  - 1.391745200270734924416;
    final double xP = 0.2286682237349059125691;
    final double yP =  - yM;
    final double valueXmYm = 0.2373295333134216789769;
    final double valueXmYp =  - valueXmYm;
    final double valueXpYm =  - 0.7290400707055187115322;
    final double valueXpYp =  - valueXpYm;
    MultivariateRealFunction fourExtrema = new MultivariateRealFunction() {
        private static final long serialVersionUID =  - 7039124064449091152L;
        public double value(double[]variables)throws FunctionEvaluationException {
            final double x = variables[0];
            final double y = variables[1];
            return((x == 0) || (y == 0)) ? 0 : (Math.atan(x) * Math.atan(x + 2) * Math.atan(y) * Math.atan(y) / (x * y));
            
        }
    };
    MultiDirectional optimizer = new MultiDirectional();
    optimizer.setConvergenceChecker(new SimpleScalarValueChecker(1.0e-11, 1.0e-30));
    optimizer.setMaxIterations(200);
    optimizer.setStartConfiguration(new double[] {
        0.2, 0.2
    });
    RealPointValuePair optimum;
    optimum = optimizer.optimize(fourExtrema, GoalType.MINIMIZE, new double[] {
         - 3.0, 0
    });
    optimum = optimizer.optimize(fourExtrema, GoalType.MINIMIZE, new double[] {
         + 1, 0
    });
    optimum = optimizer.optimize(fourExtrema, GoalType.MAXIMIZE, new double[] {
         - 3.0, 0.0
    });
    Assert.assertTrue(optimizer.getEvaluations() > 120);
    optimizer.setConvergenceChecker(new SimpleScalarValueChecker(1.0e-15, 1.0e-30));
    optimum = optimizer.optimize(fourExtrema, GoalType.MAXIMIZE, new double[] {
         + 1, 0
    });
    
}

---
---
@Test public void testMinimizeMaximize_catena_14()throws FunctionEvaluationException, ConvergenceException {
    final double xM =  - 3.841947088256863675365;
    final double yM =  - 1.391745200270734924416;
    final double xP = 0.2286682237349059125691;
    final double yP =  - yM;
    final double valueXmYm = 0.2373295333134216789769;
    final double valueXmYp =  - valueXmYm;
    final double valueXpYm =  - 0.7290400707055187115322;
    final double valueXpYp =  - valueXpYm;
    MultivariateRealFunction fourExtrema = new MultivariateRealFunction() {
        private static final long serialVersionUID =  - 7039124064449091152L;
        public double value(double[]variables)throws FunctionEvaluationException {
            final double x = variables[0];
            final double y = variables[1];
            return((x == 0) || (y == 0)) ? 0 : (Math.atan(x) * Math.atan(x + 2) * Math.atan(y) * Math.atan(y) / (x * y));
            
        }
    };
    MultiDirectional optimizer = new MultiDirectional();
    optimizer.setConvergenceChecker(new SimpleScalarValueChecker(1.0e-11, 1.0e-30));
    optimizer.setMaxIterations(200);
    optimizer.setStartConfiguration(new double[] {
        0.2, 0.2
    });
    RealPointValuePair optimum;
    optimum = optimizer.optimize(fourExtrema, GoalType.MINIMIZE, new double[] {
         - 3.0, 0
    });
    optimum = optimizer.optimize(fourExtrema, GoalType.MINIMIZE, new double[] {
         + 1, 0
    });
    optimum = optimizer.optimize(fourExtrema, GoalType.MAXIMIZE, new double[] {
         - 3.0, 0.0
    });
    Assert.assertTrue(optimizer.getEvaluations() < 150);
    optimizer.setConvergenceChecker(new SimpleScalarValueChecker(1.0e-15, 1.0e-30));
    optimum = optimizer.optimize(fourExtrema, GoalType.MAXIMIZE, new double[] {
         + 1, 0
    });
    
}

---
---
@Test public void testMinimizeMaximize_catena_15()throws FunctionEvaluationException, ConvergenceException {
    final double xM =  - 3.841947088256863675365;
    final double yM =  - 1.391745200270734924416;
    final double xP = 0.2286682237349059125691;
    final double yP =  - yM;
    final double valueXmYm = 0.2373295333134216789769;
    final double valueXmYp =  - valueXmYm;
    final double valueXpYm =  - 0.7290400707055187115322;
    final double valueXpYp =  - valueXpYm;
    MultivariateRealFunction fourExtrema = new MultivariateRealFunction() {
        private static final long serialVersionUID =  - 7039124064449091152L;
        public double value(double[]variables)throws FunctionEvaluationException {
            final double x = variables[0];
            final double y = variables[1];
            return((x == 0) || (y == 0)) ? 0 : (Math.atan(x) * Math.atan(x + 2) * Math.atan(y) * Math.atan(y) / (x * y));
            
        }
    };
    MultiDirectional optimizer = new MultiDirectional();
    optimizer.setConvergenceChecker(new SimpleScalarValueChecker(1.0e-11, 1.0e-30));
    optimizer.setMaxIterations(200);
    optimizer.setStartConfiguration(new double[] {
        0.2, 0.2
    });
    RealPointValuePair optimum;
    optimum = optimizer.optimize(fourExtrema, GoalType.MINIMIZE, new double[] {
         - 3.0, 0
    });
    optimum = optimizer.optimize(fourExtrema, GoalType.MINIMIZE, new double[] {
         + 1, 0
    });
    optimum = optimizer.optimize(fourExtrema, GoalType.MAXIMIZE, new double[] {
         - 3.0, 0.0
    });
    optimizer.setConvergenceChecker(new SimpleScalarValueChecker(1.0e-15, 1.0e-30));
    optimum = optimizer.optimize(fourExtrema, GoalType.MAXIMIZE, new double[] {
         + 1, 0
    });
    Assert.assertEquals(xP, optimum.getPoint()[0], 2.0e-8);
    
}

---
---
@Test public void testMinimizeMaximize_catena_16()throws FunctionEvaluationException, ConvergenceException {
    final double xM =  - 3.841947088256863675365;
    final double yM =  - 1.391745200270734924416;
    final double xP = 0.2286682237349059125691;
    final double yP =  - yM;
    final double valueXmYm = 0.2373295333134216789769;
    final double valueXmYp =  - valueXmYm;
    final double valueXpYm =  - 0.7290400707055187115322;
    final double valueXpYp =  - valueXpYm;
    MultivariateRealFunction fourExtrema = new MultivariateRealFunction() {
        private static final long serialVersionUID =  - 7039124064449091152L;
        public double value(double[]variables)throws FunctionEvaluationException {
            final double x = variables[0];
            final double y = variables[1];
            return((x == 0) || (y == 0)) ? 0 : (Math.atan(x) * Math.atan(x + 2) * Math.atan(y) * Math.atan(y) / (x * y));
            
        }
    };
    MultiDirectional optimizer = new MultiDirectional();
    optimizer.setConvergenceChecker(new SimpleScalarValueChecker(1.0e-11, 1.0e-30));
    optimizer.setMaxIterations(200);
    optimizer.setStartConfiguration(new double[] {
        0.2, 0.2
    });
    RealPointValuePair optimum;
    optimum = optimizer.optimize(fourExtrema, GoalType.MINIMIZE, new double[] {
         - 3.0, 0
    });
    optimum = optimizer.optimize(fourExtrema, GoalType.MINIMIZE, new double[] {
         + 1, 0
    });
    optimum = optimizer.optimize(fourExtrema, GoalType.MAXIMIZE, new double[] {
         - 3.0, 0.0
    });
    optimizer.setConvergenceChecker(new SimpleScalarValueChecker(1.0e-15, 1.0e-30));
    optimum = optimizer.optimize(fourExtrema, GoalType.MAXIMIZE, new double[] {
         + 1, 0
    });
    Assert.assertEquals(yP, optimum.getPoint()[1], 3.0e-6);
    
}

---
---
@Test public void testMinimizeMaximize_catena_17()throws FunctionEvaluationException, ConvergenceException {
    final double xM =  - 3.841947088256863675365;
    final double yM =  - 1.391745200270734924416;
    final double xP = 0.2286682237349059125691;
    final double yP =  - yM;
    final double valueXmYm = 0.2373295333134216789769;
    final double valueXmYp =  - valueXmYm;
    final double valueXpYm =  - 0.7290400707055187115322;
    final double valueXpYp =  - valueXpYm;
    MultivariateRealFunction fourExtrema = new MultivariateRealFunction() {
        private static final long serialVersionUID =  - 7039124064449091152L;
        public double value(double[]variables)throws FunctionEvaluationException {
            final double x = variables[0];
            final double y = variables[1];
            return((x == 0) || (y == 0)) ? 0 : (Math.atan(x) * Math.atan(x + 2) * Math.atan(y) * Math.atan(y) / (x * y));
            
        }
    };
    MultiDirectional optimizer = new MultiDirectional();
    optimizer.setConvergenceChecker(new SimpleScalarValueChecker(1.0e-11, 1.0e-30));
    optimizer.setMaxIterations(200);
    optimizer.setStartConfiguration(new double[] {
        0.2, 0.2
    });
    RealPointValuePair optimum;
    optimum = optimizer.optimize(fourExtrema, GoalType.MINIMIZE, new double[] {
         - 3.0, 0
    });
    optimum = optimizer.optimize(fourExtrema, GoalType.MINIMIZE, new double[] {
         + 1, 0
    });
    optimum = optimizer.optimize(fourExtrema, GoalType.MAXIMIZE, new double[] {
         - 3.0, 0.0
    });
    optimizer.setConvergenceChecker(new SimpleScalarValueChecker(1.0e-15, 1.0e-30));
    optimum = optimizer.optimize(fourExtrema, GoalType.MAXIMIZE, new double[] {
         + 1, 0
    });
    Assert.assertEquals(valueXpYp, optimum.getValue(), 2.0e-12);
    
}

---
---
@Test public void testMinimizeMaximize_catena_18()throws FunctionEvaluationException, ConvergenceException {
    final double xM =  - 3.841947088256863675365;
    final double yM =  - 1.391745200270734924416;
    final double xP = 0.2286682237349059125691;
    final double yP =  - yM;
    final double valueXmYm = 0.2373295333134216789769;
    final double valueXmYp =  - valueXmYm;
    final double valueXpYm =  - 0.7290400707055187115322;
    final double valueXpYp =  - valueXpYm;
    MultivariateRealFunction fourExtrema = new MultivariateRealFunction() {
        private static final long serialVersionUID =  - 7039124064449091152L;
        public double value(double[]variables)throws FunctionEvaluationException {
            final double x = variables[0];
            final double y = variables[1];
            return((x == 0) || (y == 0)) ? 0 : (Math.atan(x) * Math.atan(x + 2) * Math.atan(y) * Math.atan(y) / (x * y));
            
        }
    };
    MultiDirectional optimizer = new MultiDirectional();
    optimizer.setConvergenceChecker(new SimpleScalarValueChecker(1.0e-11, 1.0e-30));
    optimizer.setMaxIterations(200);
    optimizer.setStartConfiguration(new double[] {
        0.2, 0.2
    });
    RealPointValuePair optimum;
    optimum = optimizer.optimize(fourExtrema, GoalType.MINIMIZE, new double[] {
         - 3.0, 0
    });
    optimum = optimizer.optimize(fourExtrema, GoalType.MINIMIZE, new double[] {
         + 1, 0
    });
    optimum = optimizer.optimize(fourExtrema, GoalType.MAXIMIZE, new double[] {
         - 3.0, 0.0
    });
    optimizer.setConvergenceChecker(new SimpleScalarValueChecker(1.0e-15, 1.0e-30));
    optimum = optimizer.optimize(fourExtrema, GoalType.MAXIMIZE, new double[] {
         + 1, 0
    });
    Assert.assertTrue(optimizer.getEvaluations() > 180);
    
}

---
---
@Test public void testMinimizeMaximize_catena_19()throws FunctionEvaluationException, ConvergenceException {
    final double xM =  - 3.841947088256863675365;
    final double yM =  - 1.391745200270734924416;
    final double xP = 0.2286682237349059125691;
    final double yP =  - yM;
    final double valueXmYm = 0.2373295333134216789769;
    final double valueXmYp =  - valueXmYm;
    final double valueXpYm =  - 0.7290400707055187115322;
    final double valueXpYp =  - valueXpYm;
    MultivariateRealFunction fourExtrema = new MultivariateRealFunction() {
        private static final long serialVersionUID =  - 7039124064449091152L;
        public double value(double[]variables)throws FunctionEvaluationException {
            final double x = variables[0];
            final double y = variables[1];
            return((x == 0) || (y == 0)) ? 0 : (Math.atan(x) * Math.atan(x + 2) * Math.atan(y) * Math.atan(y) / (x * y));
            
        }
    };
    MultiDirectional optimizer = new MultiDirectional();
    optimizer.setConvergenceChecker(new SimpleScalarValueChecker(1.0e-11, 1.0e-30));
    optimizer.setMaxIterations(200);
    optimizer.setStartConfiguration(new double[] {
        0.2, 0.2
    });
    RealPointValuePair optimum;
    optimum = optimizer.optimize(fourExtrema, GoalType.MINIMIZE, new double[] {
         - 3.0, 0
    });
    optimum = optimizer.optimize(fourExtrema, GoalType.MINIMIZE, new double[] {
         + 1, 0
    });
    optimum = optimizer.optimize(fourExtrema, GoalType.MAXIMIZE, new double[] {
         - 3.0, 0.0
    });
    optimizer.setConvergenceChecker(new SimpleScalarValueChecker(1.0e-15, 1.0e-30));
    optimum = optimizer.optimize(fourExtrema, GoalType.MAXIMIZE, new double[] {
         + 1, 0
    });
    Assert.assertTrue(optimizer.getEvaluations() < 220);
    
}

---
@@@
Split test: org.apache.commons.math.optimization.direct.MultiDirectionalTest::testMath283
file: /root/workbench/exportInfo/d4j_buggy/Math_84/src/test/java//org/apache/commons/math/optimization/direct/MultiDirectionalTest.java
Begin: Pos(192, 3)
End: Pos(217, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Math_84/src/test/java//org/apache/commons/math/optimization/direct/MultiDirectionalTest.java
Name: testMath283
Childs: [StatementAssertion<Begin: Pos(210, 7), End: Pos(210, 67)>,
StatementAssertion<Begin: Pos(214, 7), End: Pos(214, 76)>,
StatementAssertion<Begin: Pos(215, 7), End: Pos(215, 76)>,
]
---
@Test public void testMath283_catena_0()throws FunctionEvaluationException, OptimizationException {
    MultiDirectional multiDirectional = new MultiDirectional();
    multiDirectional.setMaxIterations(100);
    multiDirectional.setMaxEvaluations(1000);
    final Gaussian2D function = new Gaussian2D(0.0, 0.0, 1.0);
    RealPointValuePair estimate = multiDirectional.optimize(function, GoalType.MAXIMIZE, function.getMaximumPosition());
    final double EPSILON = 1e-5;
    final double expectedMaximum = function.getMaximum();
    final double actualMaximum = estimate.getValue();
    Assert.assertEquals(expectedMaximum, actualMaximum, EPSILON);
    final double[]expectedPosition = function.getMaximumPosition();
    final double[]actualPosition = estimate.getPoint();
    
}

---
---
@Test public void testMath283_catena_1()throws FunctionEvaluationException, OptimizationException {
    MultiDirectional multiDirectional = new MultiDirectional();
    multiDirectional.setMaxIterations(100);
    multiDirectional.setMaxEvaluations(1000);
    final Gaussian2D function = new Gaussian2D(0.0, 0.0, 1.0);
    RealPointValuePair estimate = multiDirectional.optimize(function, GoalType.MAXIMIZE, function.getMaximumPosition());
    final double EPSILON = 1e-5;
    final double expectedMaximum = function.getMaximum();
    final double actualMaximum = estimate.getValue();
    final double[]expectedPosition = function.getMaximumPosition();
    final double[]actualPosition = estimate.getPoint();
    Assert.assertEquals(expectedPosition[0], actualPosition[0], EPSILON);
    
}

---
---
@Test public void testMath283_catena_2()throws FunctionEvaluationException, OptimizationException {
    MultiDirectional multiDirectional = new MultiDirectional();
    multiDirectional.setMaxIterations(100);
    multiDirectional.setMaxEvaluations(1000);
    final Gaussian2D function = new Gaussian2D(0.0, 0.0, 1.0);
    RealPointValuePair estimate = multiDirectional.optimize(function, GoalType.MAXIMIZE, function.getMaximumPosition());
    final double EPSILON = 1e-5;
    final double expectedMaximum = function.getMaximum();
    final double actualMaximum = estimate.getValue();
    final double[]expectedPosition = function.getMaximumPosition();
    final double[]actualPosition = estimate.getPoint();
    Assert.assertEquals(expectedPosition[1], actualPosition[1], EPSILON);
    
}

---
--------------------
Run: Math_87
@@@
Split test: org.apache.commons.math.optimization.linear.SimplexSolverTest::testSingleVariableAndConstraint
file: /root/workbench/exportInfo/d4j_buggy/Math_87/src/test//org/apache/commons/math/optimization/linear/SimplexSolverTest.java
Begin: Pos(67, 5)
End: Pos(77, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_87/src/test//org/apache/commons/math/optimization/linear/SimplexSolverTest.java
Name: testSingleVariableAndConstraint
Childs: [StatementAssertion<Begin: Pos(75, 9), End: Pos(75, 56)>,
StatementAssertion<Begin: Pos(76, 9), End: Pos(76, 53)>,
]
---
@Test public void testSingleVariableAndConstraint_catena_0()throws OptimizationException {
    LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] {
        3
    }, 0);
    Collection < LinearConstraint > constraints = new ArrayList < LinearConstraint > ();
    constraints.add(new LinearConstraint(new double[] {
        1
    }, Relationship.LEQ, 10));
    SimplexSolver solver = new SimplexSolver();
    RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, false);
    assertEquals(10.0, solution.getPoint()[0], 0.0);
    
}

---
---
@Test public void testSingleVariableAndConstraint_catena_1()throws OptimizationException {
    LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] {
        3
    }, 0);
    Collection < LinearConstraint > constraints = new ArrayList < LinearConstraint > ();
    constraints.add(new LinearConstraint(new double[] {
        1
    }, Relationship.LEQ, 10));
    SimplexSolver solver = new SimplexSolver();
    RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, false);
    assertEquals(30.0, solution.getValue(), 0.0);
    
}

---
--------------------
Run: Math_68
@@@
Split test: org.apache.commons.math.optimization.general.MinpackTest::testMinpackJennrichSampson
file: /root/workbench/exportInfo/d4j_buggy/Math_68/src/test/java//org/apache/commons/math/optimization/general/MinpackTest.java
Begin: Pos(324, 10)
End: Pos(330, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Math_68/src/test/java//org/apache/commons/math/optimization/general/MinpackTest.java
Name: testMinpackJennrichSampson
Childs: [StatementAssertion<Begin: Pos(325, 5), End: Pos(329, 55)>,
]
@@@
Split test: org.apache.commons.math.optimization.general.MinpackTest::testMinpackFreudensteinRoth
file: /root/workbench/exportInfo/d4j_buggy/Math_68/src/test/java//org/apache/commons/math/optimization/general/MinpackTest.java
Begin: Pos(145, 10)
End: Pos(164, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Math_68/src/test/java//org/apache/commons/math/optimization/general/MinpackTest.java
Name: testMinpackFreudensteinRoth
Childs: [StatementAssertion<Begin: Pos(146, 5), End: Pos(151, 56)>,
StatementAssertion<Begin: Pos(152, 5), End: Pos(157, 56)>,
StatementAssertion<Begin: Pos(158, 5), End: Pos(163, 56)>,
]
---
public void testMinpackFreudensteinRoth_catena_0() {
    minpackTest(new FreudensteinRothFunction(new double[] {
        0.5,  - 2.0
    }, 20.0124960961895, 6.99887517584575, new double[] {
        11.4124844654993,  - 0.896827913731509
    }), false);
    
}

---
---
public void testMinpackFreudensteinRoth_catena_1() {
    minpackTest(new FreudensteinRothFunction(new double[] {
        5.0,  - 20.0
    }, 12432.833948863, 6.9988751744895, new double[] {
        11.4121122022341,  - 0.8968550851268697
    }), false);
    
}

---
---
public void testMinpackFreudensteinRoth_catena_2() {
    minpackTest(new FreudensteinRothFunction(new double[] {
        50.0,  - 200.0
    }, 11426454.595762, 6.99887517242903, new double[] {
        11.412069435091231,  - 0.8968582807605691
    }), false);
    
}

---
--------------------
Run: Math_81
@@@
Split test: org.apache.commons.math.linear.EigenDecompositionImplTest::testMath308
file: /root/workbench/exportInfo/d4j_buggy/Math_81/src/test/java//org/apache/commons/math/linear/EigenDecompositionImplTest.java
Begin: Pos(112, 12)
End: Pos(143, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_81/src/test/java//org/apache/commons/math/linear/EigenDecompositionImplTest.java
Name: testMath308
Childs: [StatementAssertion<Begin: Pos(139, 13), End: Pos(139, 68)>,
StatementAssertion<Begin: Pos(140, 13), End: Pos(140, 108)>,
]
---
public void testMath308_catena_0() {
    double[]mainTridiagonal =  {
        22.330154644539597, 46.65485522478641, 17.393672330044705, 54.46687435351116, 80.17800767709437
    };
    double[]secondaryTridiagonal =  {
        13.04450406501361,  - 5.977590941539671, 2.9040909856707517, 7.1570352792841225
    };
    double[]refEigenValues =  {
        82.044413207204002, 53.456697699894512, 52.536278520113882, 18.847969733754262, 14.138204224043099
    };
    RealVector[]refEigenVectors =  {
        new ArrayRealVector(new double[] {
             - 0.000462690386766,  - 0.002118073109055, 0.011530080757413, 0.252322434584915, 0.967572088232592
        }), new ArrayRealVector(new double[] {
            0.314647769490148, 0.750806415553905,  - 0.167700312025760,  - 0.537092972407375, 0.143854968127780
        }), new ArrayRealVector(new double[] {
            0.222368839324646, 0.514921891363332,  - 0.021377019336614, 0.801196801016305,  - 0.207446991247740
        }), new ArrayRealVector(new double[] {
            0.713933751051495,  - 0.190582113553930, 0.671410443368332,  - 0.056056055955050, 0.006541576993581
        }), new ArrayRealVector(new double[] {
            0.584677060845929,  - 0.367177264979103,  - 0.721453187784497, 0.052971054621812,  - 0.005740715188257
        })
    };
    EigenDecomposition decomposition = new EigenDecompositionImpl(mainTridiagonal, secondaryTridiagonal, MathUtils.SAFE_MIN);
    double[]eigenValues = decomposition.getRealEigenvalues();
    for(int i = 0;
    i < refEigenValues.length;
     ++ i) {
        assertEquals(refEigenValues[i], eigenValues[i], 1.0e-5);
        
    }
}

---
---
public void testMath308_catena_1() {
    double[]mainTridiagonal =  {
        22.330154644539597, 46.65485522478641, 17.393672330044705, 54.46687435351116, 80.17800767709437
    };
    double[]secondaryTridiagonal =  {
        13.04450406501361,  - 5.977590941539671, 2.9040909856707517, 7.1570352792841225
    };
    double[]refEigenValues =  {
        82.044413207204002, 53.456697699894512, 52.536278520113882, 18.847969733754262, 14.138204224043099
    };
    RealVector[]refEigenVectors =  {
        new ArrayRealVector(new double[] {
             - 0.000462690386766,  - 0.002118073109055, 0.011530080757413, 0.252322434584915, 0.967572088232592
        }), new ArrayRealVector(new double[] {
            0.314647769490148, 0.750806415553905,  - 0.167700312025760,  - 0.537092972407375, 0.143854968127780
        }), new ArrayRealVector(new double[] {
            0.222368839324646, 0.514921891363332,  - 0.021377019336614, 0.801196801016305,  - 0.207446991247740
        }), new ArrayRealVector(new double[] {
            0.713933751051495,  - 0.190582113553930, 0.671410443368332,  - 0.056056055955050, 0.006541576993581
        }), new ArrayRealVector(new double[] {
            0.584677060845929,  - 0.367177264979103,  - 0.721453187784497, 0.052971054621812,  - 0.005740715188257
        })
    };
    EigenDecomposition decomposition = new EigenDecompositionImpl(mainTridiagonal, secondaryTridiagonal, MathUtils.SAFE_MIN);
    double[]eigenValues = decomposition.getRealEigenvalues();
    for(int i = 0;
    i < refEigenValues.length;
     ++ i) {
        assertEquals(0, refEigenVectors[i].subtract(decomposition.getEigenvector(i)).getNorm(), 2.0e-7);
        
    }
}

---
--------------------
Run: Math_16
@@@
Split test: org.apache.commons.math3.util.FastMathTest::testMath905LargePositive
file: /root/workbench/exportInfo/d4j_buggy/Math_16/src/test/java//org/apache/commons/math3/util/FastMathTest.java
Begin: Pos(160, 5)
End: Pos(180, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_16/src/test/java//org/apache/commons/math3/util/FastMathTest.java
Name: testMath905LargePositive
Childs: [StatementAssertion<Begin: Pos(172, 9), End: Pos(172, 42)>,
StatementAssertion<Begin: Pos(179, 9), End: Pos(179, 42)>,
]
---
@Test public void testMath905LargePositive_catena_0() {
    final double start = StrictMath.log(Double.MAX_VALUE);
    final double endT = StrictMath.sqrt(2) * StrictMath.sqrt(Double.MAX_VALUE);
    final double end = 2 * StrictMath.log(endT);
    double maxErr = 0;
    for(double x = start;
    x < end;
    x += 1e-3) {
        final double tst = FastMath.cosh(x);
        final double ref = Math.cosh(x);
        maxErr = FastMath.max(maxErr, FastMath.abs(ref - tst) / FastMath.ulp(ref));
        
    }
    Assert.assertEquals(0, maxErr, 3);
    for(double x = start;
    x < end;
    x += 1e-3) {
        final double tst = FastMath.sinh(x);
        final double ref = Math.sinh(x);
        maxErr = FastMath.max(maxErr, FastMath.abs(ref - tst) / FastMath.ulp(ref));
        
    }
}

---
---
@Test public void testMath905LargePositive_catena_1() {
    final double start = StrictMath.log(Double.MAX_VALUE);
    final double endT = StrictMath.sqrt(2) * StrictMath.sqrt(Double.MAX_VALUE);
    final double end = 2 * StrictMath.log(endT);
    double maxErr = 0;
    for(double x = start;
    x < end;
    x += 1e-3) {
        final double tst = FastMath.cosh(x);
        final double ref = Math.cosh(x);
        maxErr = FastMath.max(maxErr, FastMath.abs(ref - tst) / FastMath.ulp(ref));
        
    }
    for(double x = start;
    x < end;
    x += 1e-3) {
        final double tst = FastMath.sinh(x);
        final double ref = Math.sinh(x);
        maxErr = FastMath.max(maxErr, FastMath.abs(ref - tst) / FastMath.ulp(ref));
        
    }
    Assert.assertEquals(0, maxErr, 3);
    
}

---
@@@
Split test: org.apache.commons.math3.util.FastMathTest::testMath905LargeNegative
file: /root/workbench/exportInfo/d4j_buggy/Math_16/src/test/java//org/apache/commons/math3/util/FastMathTest.java
Begin: Pos(182, 5)
End: Pos(202, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_16/src/test/java//org/apache/commons/math3/util/FastMathTest.java
Name: testMath905LargeNegative
Childs: [StatementAssertion<Begin: Pos(194, 9), End: Pos(194, 42)>,
StatementAssertion<Begin: Pos(201, 9), End: Pos(201, 42)>,
]
---
@Test public void testMath905LargeNegative_catena_0() {
    final double start =  - StrictMath.log(Double.MAX_VALUE);
    final double endT = StrictMath.sqrt(2) * StrictMath.sqrt(Double.MAX_VALUE);
    final double end =  - 2 * StrictMath.log(endT);
    double maxErr = 0;
    for(double x = start;
    x > end;
    x -= 1e-3) {
        final double tst = FastMath.cosh(x);
        final double ref = Math.cosh(x);
        maxErr = FastMath.max(maxErr, FastMath.abs(ref - tst) / FastMath.ulp(ref));
        
    }
    Assert.assertEquals(0, maxErr, 3);
    for(double x = start;
    x > end;
    x -= 1e-3) {
        final double tst = FastMath.sinh(x);
        final double ref = Math.sinh(x);
        maxErr = FastMath.max(maxErr, FastMath.abs(ref - tst) / FastMath.ulp(ref));
        
    }
}

---
---
@Test public void testMath905LargeNegative_catena_1() {
    final double start =  - StrictMath.log(Double.MAX_VALUE);
    final double endT = StrictMath.sqrt(2) * StrictMath.sqrt(Double.MAX_VALUE);
    final double end =  - 2 * StrictMath.log(endT);
    double maxErr = 0;
    for(double x = start;
    x > end;
    x -= 1e-3) {
        final double tst = FastMath.cosh(x);
        final double ref = Math.cosh(x);
        maxErr = FastMath.max(maxErr, FastMath.abs(ref - tst) / FastMath.ulp(ref));
        
    }
    for(double x = start;
    x > end;
    x -= 1e-3) {
        final double tst = FastMath.sinh(x);
        final double ref = Math.sinh(x);
        maxErr = FastMath.max(maxErr, FastMath.abs(ref - tst) / FastMath.ulp(ref));
        
    }
    Assert.assertEquals(0, maxErr, 3);
    
}

---
--------------------
Run: Math_18
@@@
Split test: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testFitAccuracyDependsOnBoundary
file: /root/workbench/exportInfo/d4j_buggy/Math_18/src/test/java//org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java
Begin: Pos(438, 5)
End: Pos(478, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_18/src/test/java//org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java
Name: testFitAccuracyDependsOnBoundary
Childs: [StatementAssertion<Begin: Pos(476, 9), End: Pos(476, 57)>,
StatementAssertion<Begin: Pos(477, 9), End: Pos(477, 57)>,
]
---
@Test public void testFitAccuracyDependsOnBoundary_catena_0() {
    final CMAESOptimizer optimizer = new CMAESOptimizer();
    final MultivariateFunction fitnessFunction = new MultivariateFunction() {
        public double value(double[]parameters) {
            final double target = 11.1;
            final double error = target - parameters[0];
            return error * error;
            
        }
    };
    final double[]start =  {
        1
    };
    PointValuePair result = optimizer.optimize(100000, fitnessFunction, GoalType.MINIMIZE, start);
    final double resNoBound = result.getPoint()[0];
    final double[]lower =  {
         - 20
    };
    final double[]upper =  {
        5e16
    };
    result = optimizer.optimize(100000, fitnessFunction, GoalType.MINIMIZE, start, lower, upper);
    final double resNearLo = result.getPoint()[0];
    lower[0] =  - 5e16;
    upper[0] = 20;
    result = optimizer.optimize(100000, fitnessFunction, GoalType.MINIMIZE, start, lower, upper);
    final double resNearHi = result.getPoint()[0];
    Assert.assertEquals(resNoBound, resNearLo, 1e-3);
    
}

---
---
@Test public void testFitAccuracyDependsOnBoundary_catena_1() {
    final CMAESOptimizer optimizer = new CMAESOptimizer();
    final MultivariateFunction fitnessFunction = new MultivariateFunction() {
        public double value(double[]parameters) {
            final double target = 11.1;
            final double error = target - parameters[0];
            return error * error;
            
        }
    };
    final double[]start =  {
        1
    };
    PointValuePair result = optimizer.optimize(100000, fitnessFunction, GoalType.MINIMIZE, start);
    final double resNoBound = result.getPoint()[0];
    final double[]lower =  {
         - 20
    };
    final double[]upper =  {
        5e16
    };
    result = optimizer.optimize(100000, fitnessFunction, GoalType.MINIMIZE, start, lower, upper);
    final double resNearLo = result.getPoint()[0];
    lower[0] =  - 5e16;
    upper[0] = 20;
    result = optimizer.optimize(100000, fitnessFunction, GoalType.MINIMIZE, start, lower, upper);
    final double resNearHi = result.getPoint()[0];
    Assert.assertEquals(resNoBound, resNearHi, 1e-3);
    
}

---
--------------------
Run: Math_95
@@@
Split test: org.apache.commons.math.distribution.FDistributionTest::testSmallDegreesOfFreedom
file: /root/workbench/exportInfo/d4j_buggy/Math_95/src/test//org/apache/commons/math/distribution/FDistributionTest.java
Begin: Pos(109, 12)
End: Pos(121, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_95/src/test//org/apache/commons/math/distribution/FDistributionTest.java
Name: testSmallDegreesOfFreedom
Childs: [StatementAssertion<Begin: Pos(115, 9), End: Pos(115, 39)>,
StatementAssertion<Begin: Pos(120, 9), End: Pos(120, 39)>,
]
---
public void testSmallDegreesOfFreedom_catena_0()throws Exception {
    org.apache.commons.math.distribution.FDistributionImpl fd = new org.apache.commons.math.distribution.FDistributionImpl(1.0, 1.0);
    double p = fd.cumulativeProbability(0.975);
    double x = fd.inverseCumulativeProbability(p);
    assertEquals(0.975, x, 1.0e-5);
    fd.setDenominatorDegreesOfFreedom(2.0);
    p = fd.cumulativeProbability(0.975);
    x = fd.inverseCumulativeProbability(p);
    
}

---
---
public void testSmallDegreesOfFreedom_catena_1()throws Exception {
    org.apache.commons.math.distribution.FDistributionImpl fd = new org.apache.commons.math.distribution.FDistributionImpl(1.0, 1.0);
    double p = fd.cumulativeProbability(0.975);
    double x = fd.inverseCumulativeProbability(p);
    fd.setDenominatorDegreesOfFreedom(2.0);
    p = fd.cumulativeProbability(0.975);
    x = fd.inverseCumulativeProbability(p);
    assertEquals(0.975, x, 1.0e-5);
    
}

---
--------------------
Run: Math_49
@@@
Split test: org.apache.commons.math.linear.SparseRealVectorTest::testConcurrentModification
file: /root/workbench/exportInfo/d4j_buggy/Math_49/src/test/java//org/apache/commons/math/linear/SparseRealVectorTest.java
Begin: Pos(1003, 5)
End: Pos(1026, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_49/src/test/java//org/apache/commons/math/linear/SparseRealVectorTest.java
Name: testConcurrentModification
Childs: []
--------------------
Run: Math_26
@@@
Split test: org.apache.commons.math3.fraction.FractionTest::testIntegerOverflow
file: /root/workbench/exportInfo/d4j_buggy/Math_26/src/test/java//org/apache/commons/math3/fraction/FractionTest.java
Begin: Pos(134, 5)
End: Pos(140, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_26/src/test/java//org/apache/commons/math3/fraction/FractionTest.java
Name: testIntegerOverflow
Childs: [StatementAssertion<Begin: Pos(136, 9), End: Pos(136, 50)>,
StatementAssertion<Begin: Pos(137, 9), End: Pos(137, 37)>,
StatementAssertion<Begin: Pos(138, 9), End: Pos(138, 38)>,
StatementAssertion<Begin: Pos(139, 9), End: Pos(139, 49)>,
]
---
@Test public void testIntegerOverflow_catena_0() {
    checkIntegerOverflow(0.75000000001455192);
    
}

---
---
@Test public void testIntegerOverflow_catena_1() {
    checkIntegerOverflow(1.0e10);
    
}

---
---
@Test public void testIntegerOverflow_catena_2() {
    checkIntegerOverflow( - 1.0e10);
    
}

---
---
@Test public void testIntegerOverflow_catena_3() {
    checkIntegerOverflow( - 43979.60679604749);
    
}

---
--------------------
Run: Math_29
@@@
Split test: org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
file: /root/workbench/exportInfo/d4j_buggy/Math_29/src/test/java//org/apache/commons/math3/linear/SparseRealVectorTest.java
# Exception:
Traceback (most recent call last):
  File "run.py", line 39, in run
    fti, check = spliter.process_test_node_v2(path2file, test[1])
  File "/root/workbench/splitTests/spliter.py", line 259, in process_test_node_v2
    node = get_only_node(name, _globals)
  File "/root/workbench/splitTests/util.py", line 39, in get_only_node
    raise ParseError('Cannot find method <{}> in AST'.format(name))
util.ParseError: Cannot find method <testEbeDivideMixedTypes> in AST

---
@@@
Split test: org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
file: /root/workbench/exportInfo/d4j_buggy/Math_29/src/test/java//org/apache/commons/math3/linear/SparseRealVectorTest.java
# Exception:
Traceback (most recent call last):
  File "run.py", line 39, in run
    fti, check = spliter.process_test_node_v2(path2file, test[1])
  File "/root/workbench/splitTests/spliter.py", line 259, in process_test_node_v2
    node = get_only_node(name, _globals)
  File "/root/workbench/splitTests/util.py", line 39, in get_only_node
    raise ParseError('Cannot find method <{}> in AST'.format(name))
util.ParseError: Cannot find method <testEbeMultiplyMixedTypes> in AST

---
@@@
Split test: org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
file: /root/workbench/exportInfo/d4j_buggy/Math_29/src/test/java//org/apache/commons/math3/linear/SparseRealVectorTest.java
# Exception:
Traceback (most recent call last):
  File "run.py", line 39, in run
    fti, check = spliter.process_test_node_v2(path2file, test[1])
  File "/root/workbench/splitTests/spliter.py", line 259, in process_test_node_v2
    node = get_only_node(name, _globals)
  File "/root/workbench/splitTests/util.py", line 39, in get_only_node
    raise ParseError('Cannot find method <{}> in AST'.format(name))
util.ParseError: Cannot find method <testEbeMultiplySameType> in AST

---
--------------------
Run: Math_78
@@@
Split test: org.apache.commons.math.ode.events.EventStateTest::closeEvents
file: /root/workbench/exportInfo/d4j_buggy/Math_78/src/test/java//org/apache/commons/math/ode/events/EventStateTest.java
Begin: Pos(31, 5)
End: Pos(69, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_78/src/test/java//org/apache/commons/math/ode/events/EventStateTest.java
Name: closeEvents
Childs: [StatementAssertion<Begin: Pos(60, 9), End: Pos(60, 57)>,
StatementAssertion<Begin: Pos(61, 9), End: Pos(61, 62)>,
StatementAssertion<Begin: Pos(66, 9), End: Pos(66, 57)>,
StatementAssertion<Begin: Pos(67, 9), End: Pos(67, 62)>,
]
---
@Test public void closeEvents_catena_0()throws EventException, ConvergenceException, DerivativeException {
    final double r1 = 90.0;
    final double r2 = 135.0;
    final double gap = r2 - r1;
    EventHandler closeEventsGenerator = new EventHandler() {
        public void resetState(double t, double[]y) {
            
        }
        public double g(double t, double[]y) {
            return(t - r1) * (r2 - t);
            
        }
        public int eventOccurred(double t, double[]y, boolean increasing) {
            return CONTINUE;
            
        }
    };
    final double tolerance = 0.1;
    EventState es = new EventState(closeEventsGenerator, 1.5 * gap, tolerance, 10);
    double t0 = r1 - 0.5 * gap;
    es.reinitializeBegin(t0, new double[0]);
    AbstractStepInterpolator interpolator = new DummyStepInterpolator(new double[0], true);
    interpolator.storeTime(t0);
    interpolator.shift();
    interpolator.storeTime(0.5 * (r1 + r2));
    Assert.assertTrue(es.evaluateStep(interpolator));
    es.stepAccepted(es.getEventTime(), new double[0]);
    interpolator.shift();
    interpolator.storeTime(r2 + 0.4 * gap);
    
}

---
---
@Test public void closeEvents_catena_1()throws EventException, ConvergenceException, DerivativeException {
    final double r1 = 90.0;
    final double r2 = 135.0;
    final double gap = r2 - r1;
    EventHandler closeEventsGenerator = new EventHandler() {
        public void resetState(double t, double[]y) {
            
        }
        public double g(double t, double[]y) {
            return(t - r1) * (r2 - t);
            
        }
        public int eventOccurred(double t, double[]y, boolean increasing) {
            return CONTINUE;
            
        }
    };
    final double tolerance = 0.1;
    EventState es = new EventState(closeEventsGenerator, 1.5 * gap, tolerance, 10);
    double t0 = r1 - 0.5 * gap;
    es.reinitializeBegin(t0, new double[0]);
    AbstractStepInterpolator interpolator = new DummyStepInterpolator(new double[0], true);
    interpolator.storeTime(t0);
    interpolator.shift();
    interpolator.storeTime(0.5 * (r1 + r2));
    Assert.assertEquals(r1, es.getEventTime(), tolerance);
    es.stepAccepted(es.getEventTime(), new double[0]);
    interpolator.shift();
    interpolator.storeTime(r2 + 0.4 * gap);
    
}

---
---
@Test public void closeEvents_catena_2()throws EventException, ConvergenceException, DerivativeException {
    final double r1 = 90.0;
    final double r2 = 135.0;
    final double gap = r2 - r1;
    EventHandler closeEventsGenerator = new EventHandler() {
        public void resetState(double t, double[]y) {
            
        }
        public double g(double t, double[]y) {
            return(t - r1) * (r2 - t);
            
        }
        public int eventOccurred(double t, double[]y, boolean increasing) {
            return CONTINUE;
            
        }
    };
    final double tolerance = 0.1;
    EventState es = new EventState(closeEventsGenerator, 1.5 * gap, tolerance, 10);
    double t0 = r1 - 0.5 * gap;
    es.reinitializeBegin(t0, new double[0]);
    AbstractStepInterpolator interpolator = new DummyStepInterpolator(new double[0], true);
    interpolator.storeTime(t0);
    interpolator.shift();
    interpolator.storeTime(0.5 * (r1 + r2));
    es.stepAccepted(es.getEventTime(), new double[0]);
    interpolator.shift();
    interpolator.storeTime(r2 + 0.4 * gap);
    Assert.assertTrue(es.evaluateStep(interpolator));
    
}

---
---
@Test public void closeEvents_catena_3()throws EventException, ConvergenceException, DerivativeException {
    final double r1 = 90.0;
    final double r2 = 135.0;
    final double gap = r2 - r1;
    EventHandler closeEventsGenerator = new EventHandler() {
        public void resetState(double t, double[]y) {
            
        }
        public double g(double t, double[]y) {
            return(t - r1) * (r2 - t);
            
        }
        public int eventOccurred(double t, double[]y, boolean increasing) {
            return CONTINUE;
            
        }
    };
    final double tolerance = 0.1;
    EventState es = new EventState(closeEventsGenerator, 1.5 * gap, tolerance, 10);
    double t0 = r1 - 0.5 * gap;
    es.reinitializeBegin(t0, new double[0]);
    AbstractStepInterpolator interpolator = new DummyStepInterpolator(new double[0], true);
    interpolator.storeTime(t0);
    interpolator.shift();
    interpolator.storeTime(0.5 * (r1 + r2));
    es.stepAccepted(es.getEventTime(), new double[0]);
    interpolator.shift();
    interpolator.storeTime(r2 + 0.4 * gap);
    Assert.assertEquals(r2, es.getEventTime(), tolerance);
    
}

---
--------------------
Run: Math_7
@@@
Split test: org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest::testEventsScheduling
file: /root/workbench/exportInfo/d4j_buggy/Math_7/src/test/java//org/apache/commons/math3/ode/nonstiff/DormandPrince853IntegratorTest.java
Begin: Pos(336, 3)
End: Pos(367, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Math_7/src/test/java//org/apache/commons/math3/ode/nonstiff/DormandPrince853IntegratorTest.java
Name: testEventsScheduling
Childs: [StatementAssertion<Begin: Pos(365, 7), End: Pos(365, 44)>,
]
--------------------
Run: Math_55
@@@
Split test: org.apache.commons.math.geometry.Vector3DTest::testCrossProductCancellation
file: /root/workbench/exportInfo/d4j_buggy/Math_55/src/test/java//org/apache/commons/math/geometry/Vector3DTest.java
# check: Use pattern matching: .checkVector
Use pattern matching: .checkVector
Begin: Pos(155, 5)
End: Pos(166, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_55/src/test/java//org/apache/commons/math/geometry/Vector3DTest.java
Name: testCrossProductCancellation
Childs: [StatementAssertion<Begin: Pos(159, 9), End: Pos(159, 61)>,
StatementAssertion<Begin: Pos(164, 9), End: Pos(164, 67)>,
]
---
@Test public void testCrossProductCancellation_catena_0() {
    Vector3D v1 = new Vector3D(9070467121.0, 4535233560.0, 1);
    Vector3D v2 = new Vector3D(9070467123.0, 4535233561.0, 1);
    checkVector(Vector3D.crossProduct(v1, v2),  - 1, 2, 1);
    double scale = FastMath.scalb(1.0, 100);
    Vector3D big1 = new Vector3D(scale, v1);
    Vector3D small2 = new Vector3D(1 / scale, v2);
    
}

---
---
@Test public void testCrossProductCancellation_catena_1() {
    Vector3D v1 = new Vector3D(9070467121.0, 4535233560.0, 1);
    Vector3D v2 = new Vector3D(9070467123.0, 4535233561.0, 1);
    double scale = FastMath.scalb(1.0, 100);
    Vector3D big1 = new Vector3D(scale, v1);
    Vector3D small2 = new Vector3D(1 / scale, v2);
    checkVector(Vector3D.crossProduct(big1, small2),  - 1, 2, 1);
    
}

---
--------------------
Run: Math_61
@@@
Split test: org.apache.commons.math.distribution.PoissonDistributionTest::testMean
file: /root/workbench/exportInfo/d4j_buggy/Math_61/src/test/java//org/apache/commons/math/distribution/PoissonDistributionTest.java
Begin: Pos(137, 12)
End: Pos(148, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_61/src/test/java//org/apache/commons/math/distribution/PoissonDistributionTest.java
Name: testMean
Childs: [StatementAssertion<Begin: Pos(141, 13), End: Pos(141, 73)>,
StatementAssertion<Begin: Pos(147, 9), End: Pos(147, 48)>,
]
---
public void testMean_catena_0() {
    PoissonDistribution dist;
    try {
        dist = new PoissonDistributionImpl( - 1);
        fail("negative mean: NotStrictlyPositiveException expected");
        
    }
    catch(NotStrictlyPositiveException ex) {
        
    }
    dist = new PoissonDistributionImpl(10.0);
    
}

---
---
public void testMean_catena_1() {
    PoissonDistribution dist;
    try {
        dist = new PoissonDistributionImpl( - 1);
        
    }
    catch(NotStrictlyPositiveException ex) {
        
    }
    dist = new PoissonDistributionImpl(10.0);
    assertEquals(10.0, dist.getMean(), 0.0);
    
}

---
--------------------
Run: Math_42
@@@
Split test: org.apache.commons.math.optimization.linear.SimplexSolverTest::testMath713NegativeVariable
file: /root/workbench/exportInfo/d4j_buggy/Math_42/src/test/java//org/apache/commons/math/optimization/linear/SimplexSolverTest.java
Begin: Pos(32, 5)
End: Pos(44, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_42/src/test/java//org/apache/commons/math/optimization/linear/SimplexSolverTest.java
Name: testMath713NegativeVariable
Childs: [StatementAssertion<Begin: Pos(42, 9), End: Pos(42, 91)>,
StatementAssertion<Begin: Pos(43, 9), End: Pos(43, 91)>,
]
---
@Test public void testMath713NegativeVariable_catena_0() {
    LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] {
        1.0, 1.0
    }, 0.0d);
    ArrayList < LinearConstraint > constraints = new ArrayList < LinearConstraint > ();
    constraints.add(new LinearConstraint(new double[] {
        1, 0
    }, Relationship.EQ, 1));
    double epsilon = 1e-6;
    SimplexSolver solver = new SimplexSolver();
    RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MINIMIZE, true);
    Assert.assertTrue(Precision.compareTo(solution.getPoint()[0], 0.0d, epsilon) >= 0);
    
}

---
---
@Test public void testMath713NegativeVariable_catena_1() {
    LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] {
        1.0, 1.0
    }, 0.0d);
    ArrayList < LinearConstraint > constraints = new ArrayList < LinearConstraint > ();
    constraints.add(new LinearConstraint(new double[] {
        1, 0
    }, Relationship.EQ, 1));
    double epsilon = 1e-6;
    SimplexSolver solver = new SimplexSolver();
    RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MINIMIZE, true);
    Assert.assertTrue(Precision.compareTo(solution.getPoint()[1], 0.0d, epsilon) >= 0);
    
}

---
--------------------
Run: Math_64
@@@
Split test: org.apache.commons.math.optimization.general.MinpackTest::testMinpackJennrichSampson
file: /root/workbench/exportInfo/d4j_buggy/Math_64/src/test/java//org/apache/commons/math/optimization/general/MinpackTest.java
Begin: Pos(324, 10)
End: Pos(331, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Math_64/src/test/java//org/apache/commons/math/optimization/general/MinpackTest.java
Name: testMinpackJennrichSampson
Childs: [StatementAssertion<Begin: Pos(325, 5), End: Pos(330, 55)>,
]
@@@
Split test: org.apache.commons.math.optimization.general.MinpackTest::testMinpackFreudensteinRoth
file: /root/workbench/exportInfo/d4j_buggy/Math_64/src/test/java//org/apache/commons/math/optimization/general/MinpackTest.java
Begin: Pos(145, 10)
End: Pos(164, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Math_64/src/test/java//org/apache/commons/math/optimization/general/MinpackTest.java
Name: testMinpackFreudensteinRoth
Childs: [StatementAssertion<Begin: Pos(146, 5), End: Pos(151, 56)>,
StatementAssertion<Begin: Pos(152, 5), End: Pos(157, 56)>,
StatementAssertion<Begin: Pos(158, 5), End: Pos(163, 56)>,
]
---
public void testMinpackFreudensteinRoth_catena_0() {
    minpackTest(new FreudensteinRothFunction(new double[] {
        0.5,  - 2.0
    }, 20.0124960961895, 6.99887517584575, new double[] {
        11.4124844654993,  - 0.896827913731509
    }), false);
    
}

---
---
public void testMinpackFreudensteinRoth_catena_1() {
    minpackTest(new FreudensteinRothFunction(new double[] {
        5.0,  - 20.0
    }, 12432.833948863, 6.9988751744895, new double[] {
        11.41300466147456,  - 0.896796038685959
    }), false);
    
}

---
---
public void testMinpackFreudensteinRoth_catena_2() {
    minpackTest(new FreudensteinRothFunction(new double[] {
        50.0,  - 200.0
    }, 11426454.595762, 6.99887517242903, new double[] {
        11.412781785788564,  - 0.8968051074920405
    }), false);
    
}

---
--------------------
Run: Math_71
@@@
Split test: org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest::testMissedEndEvent
file: /root/workbench/exportInfo/d4j_buggy/Math_71/src/test/java//org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java
Begin: Pos(44, 10)
End: Pos(95, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Math_71/src/test/java//org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java
Name: testMissedEndEvent
Childs: [StatementAssertion<Begin: Pos(70, 7), End: Pos(70, 50)>,
StatementAssertion<Begin: Pos(72, 11), End: Pos(72, 84)>,
StatementAssertion<Begin: Pos(85, 15), End: Pos(85, 53)>,
StatementAssertion<Begin: Pos(90, 7), End: Pos(90, 56)>,
StatementAssertion<Begin: Pos(92, 11), End: Pos(92, 84)>,
]
---
public void testMissedEndEvent_catena_0()throws IntegratorException, DerivativeException {
    final double t0 = 1878250320.0000029;
    final double tEvent = 1878250379.9999986;
    final double[]k =  {
        1.0e-4, 1.0e-5, 1.0e-6
    };
    FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {
        public int getDimension() {
            return k.length;
            
        }
        public void computeDerivatives(double t, double[]y, double[]yDot) {
            for(int i = 0;
            i < y.length;
             ++ i) {
                yDot[i] = k[i] * y[i];
                
            }
        }
    };
    ClassicalRungeKuttaIntegrator integrator = new ClassicalRungeKuttaIntegrator(60.0);
    double[]y0 = new double[k.length];
    for(int i = 0;
    i < y0.length;
     ++ i) {
        y0[i] = i + 1;
        
    }
    double[]y = new double[k.length];
    double finalT = integrator.integrate(ode, t0, y0, tEvent, y);
    Assert.assertEquals(tEvent, finalT, 5.0e-6);
    for(int i = 0;
    i < y.length;
     ++ i) {
        
    }
    integrator.addEventHandler(new EventHandler() {
        public void resetState(double t, double[]y) {
            
        }
        public double g(double t, double[]y) {
            return t - tEvent;
            
        }
        public int eventOccurred(double t, double[]y, boolean increasing) {
            return CONTINUE;
            
        }
    }, Double.POSITIVE_INFINITY, 1.0e-20, 100);
    finalT = integrator.integrate(ode, t0, y0, tEvent + 120, y);
    for(int i = 0;
    i < y.length;
     ++ i) {
        
    }
}

---
---
public void testMissedEndEvent_catena_1()throws IntegratorException, DerivativeException {
    final double t0 = 1878250320.0000029;
    final double tEvent = 1878250379.9999986;
    final double[]k =  {
        1.0e-4, 1.0e-5, 1.0e-6
    };
    FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {
        public int getDimension() {
            return k.length;
            
        }
        public void computeDerivatives(double t, double[]y, double[]yDot) {
            for(int i = 0;
            i < y.length;
             ++ i) {
                yDot[i] = k[i] * y[i];
                
            }
        }
    };
    ClassicalRungeKuttaIntegrator integrator = new ClassicalRungeKuttaIntegrator(60.0);
    double[]y0 = new double[k.length];
    for(int i = 0;
    i < y0.length;
     ++ i) {
        y0[i] = i + 1;
        
    }
    double[]y = new double[k.length];
    double finalT = integrator.integrate(ode, t0, y0, tEvent, y);
    for(int i = 0;
    i < y.length;
     ++ i) {
        Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);
        
    }
    integrator.addEventHandler(new EventHandler() {
        public void resetState(double t, double[]y) {
            
        }
        public double g(double t, double[]y) {
            return t - tEvent;
            
        }
        public int eventOccurred(double t, double[]y, boolean increasing) {
            return CONTINUE;
            
        }
    }, Double.POSITIVE_INFINITY, 1.0e-20, 100);
    finalT = integrator.integrate(ode, t0, y0, tEvent + 120, y);
    for(int i = 0;
    i < y.length;
     ++ i) {
        
    }
}

---
---
public void testMissedEndEvent_catena_2()throws IntegratorException, DerivativeException {
    final double t0 = 1878250320.0000029;
    final double tEvent = 1878250379.9999986;
    final double[]k =  {
        1.0e-4, 1.0e-5, 1.0e-6
    };
    FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {
        public int getDimension() {
            return k.length;
            
        }
        public void computeDerivatives(double t, double[]y, double[]yDot) {
            for(int i = 0;
            i < y.length;
             ++ i) {
                yDot[i] = k[i] * y[i];
                
            }
        }
    };
    ClassicalRungeKuttaIntegrator integrator = new ClassicalRungeKuttaIntegrator(60.0);
    double[]y0 = new double[k.length];
    for(int i = 0;
    i < y0.length;
     ++ i) {
        y0[i] = i + 1;
        
    }
    double[]y = new double[k.length];
    double finalT = integrator.integrate(ode, t0, y0, tEvent, y);
    for(int i = 0;
    i < y.length;
     ++ i) {
        
    }
    integrator.addEventHandler(new EventHandler() {
        public void resetState(double t, double[]y) {
            
        }
        public double g(double t, double[]y) {
            return t - tEvent;
            
        }
        public int eventOccurred(double t, double[]y, boolean increasing) {
            Assert.assertEquals(tEvent, t, 5.0e-6);
            return CONTINUE;
            
        }
    }, Double.POSITIVE_INFINITY, 1.0e-20, 100);
    finalT = integrator.integrate(ode, t0, y0, tEvent + 120, y);
    for(int i = 0;
    i < y.length;
     ++ i) {
        
    }
}

---
---
public void testMissedEndEvent_catena_3()throws IntegratorException, DerivativeException {
    final double t0 = 1878250320.0000029;
    final double tEvent = 1878250379.9999986;
    final double[]k =  {
        1.0e-4, 1.0e-5, 1.0e-6
    };
    FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {
        public int getDimension() {
            return k.length;
            
        }
        public void computeDerivatives(double t, double[]y, double[]yDot) {
            for(int i = 0;
            i < y.length;
             ++ i) {
                yDot[i] = k[i] * y[i];
                
            }
        }
    };
    ClassicalRungeKuttaIntegrator integrator = new ClassicalRungeKuttaIntegrator(60.0);
    double[]y0 = new double[k.length];
    for(int i = 0;
    i < y0.length;
     ++ i) {
        y0[i] = i + 1;
        
    }
    double[]y = new double[k.length];
    double finalT = integrator.integrate(ode, t0, y0, tEvent, y);
    for(int i = 0;
    i < y.length;
     ++ i) {
        
    }
    integrator.addEventHandler(new EventHandler() {
        public void resetState(double t, double[]y) {
            
        }
        public double g(double t, double[]y) {
            return t - tEvent;
            
        }
        public int eventOccurred(double t, double[]y, boolean increasing) {
            return CONTINUE;
            
        }
    }, Double.POSITIVE_INFINITY, 1.0e-20, 100);
    finalT = integrator.integrate(ode, t0, y0, tEvent + 120, y);
    Assert.assertEquals(tEvent + 120, finalT, 5.0e-6);
    for(int i = 0;
    i < y.length;
     ++ i) {
        
    }
}

---
---
public void testMissedEndEvent_catena_4()throws IntegratorException, DerivativeException {
    final double t0 = 1878250320.0000029;
    final double tEvent = 1878250379.9999986;
    final double[]k =  {
        1.0e-4, 1.0e-5, 1.0e-6
    };
    FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {
        public int getDimension() {
            return k.length;
            
        }
        public void computeDerivatives(double t, double[]y, double[]yDot) {
            for(int i = 0;
            i < y.length;
             ++ i) {
                yDot[i] = k[i] * y[i];
                
            }
        }
    };
    ClassicalRungeKuttaIntegrator integrator = new ClassicalRungeKuttaIntegrator(60.0);
    double[]y0 = new double[k.length];
    for(int i = 0;
    i < y0.length;
     ++ i) {
        y0[i] = i + 1;
        
    }
    double[]y = new double[k.length];
    double finalT = integrator.integrate(ode, t0, y0, tEvent, y);
    for(int i = 0;
    i < y.length;
     ++ i) {
        
    }
    integrator.addEventHandler(new EventHandler() {
        public void resetState(double t, double[]y) {
            
        }
        public double g(double t, double[]y) {
            return t - tEvent;
            
        }
        public int eventOccurred(double t, double[]y, boolean increasing) {
            return CONTINUE;
            
        }
    }, Double.POSITIVE_INFINITY, 1.0e-20, 100);
    finalT = integrator.integrate(ode, t0, y0, tEvent + 120, y);
    for(int i = 0;
    i < y.length;
     ++ i) {
        Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);
        
    }
}

---
@@@
Split test: org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest::testMissedEndEvent
file: /root/workbench/exportInfo/d4j_buggy/Math_71/src/test/java//org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java
Begin: Pos(44, 10)
End: Pos(98, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Math_71/src/test/java//org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java
Name: testMissedEndEvent
Childs: [StatementAssertion<Begin: Pos(72, 7), End: Pos(72, 50)>,
StatementAssertion<Begin: Pos(74, 11), End: Pos(74, 84)>,
StatementAssertion<Begin: Pos(88, 15), End: Pos(88, 53)>,
StatementAssertion<Begin: Pos(93, 7), End: Pos(93, 56)>,
StatementAssertion<Begin: Pos(95, 11), End: Pos(95, 84)>,
]
---
public void testMissedEndEvent_catena_0()throws IntegratorException, DerivativeException {
    final double t0 = 1878250320.0000029;
    final double tEvent = 1878250379.9999986;
    final double[]k =  {
        1.0e-4, 1.0e-5, 1.0e-6
    };
    FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {
        public int getDimension() {
            return k.length;
            
        }
        public void computeDerivatives(double t, double[]y, double[]yDot) {
            for(int i = 0;
            i < y.length;
             ++ i) {
                yDot[i] = k[i] * y[i];
                
            }
        }
    };
    DormandPrince853Integrator integrator = new DormandPrince853Integrator(0.0, 100.0, 1.0e-10, 1.0e-10);
    double[]y0 = new double[k.length];
    for(int i = 0;
    i < y0.length;
     ++ i) {
        y0[i] = i + 1;
        
    }
    double[]y = new double[k.length];
    integrator.setInitialStepSize(60.0);
    double finalT = integrator.integrate(ode, t0, y0, tEvent, y);
    Assert.assertEquals(tEvent, finalT, 5.0e-6);
    for(int i = 0;
    i < y.length;
     ++ i) {
        
    }
    integrator.setInitialStepSize(60.0);
    integrator.addEventHandler(new EventHandler() {
        public void resetState(double t, double[]y) {
            
        }
        public double g(double t, double[]y) {
            return t - tEvent;
            
        }
        public int eventOccurred(double t, double[]y, boolean increasing) {
            return CONTINUE;
            
        }
    }, Double.POSITIVE_INFINITY, 1.0e-20, 100);
    finalT = integrator.integrate(ode, t0, y0, tEvent + 120, y);
    for(int i = 0;
    i < y.length;
     ++ i) {
        
    }
}

---
---
public void testMissedEndEvent_catena_1()throws IntegratorException, DerivativeException {
    final double t0 = 1878250320.0000029;
    final double tEvent = 1878250379.9999986;
    final double[]k =  {
        1.0e-4, 1.0e-5, 1.0e-6
    };
    FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {
        public int getDimension() {
            return k.length;
            
        }
        public void computeDerivatives(double t, double[]y, double[]yDot) {
            for(int i = 0;
            i < y.length;
             ++ i) {
                yDot[i] = k[i] * y[i];
                
            }
        }
    };
    DormandPrince853Integrator integrator = new DormandPrince853Integrator(0.0, 100.0, 1.0e-10, 1.0e-10);
    double[]y0 = new double[k.length];
    for(int i = 0;
    i < y0.length;
     ++ i) {
        y0[i] = i + 1;
        
    }
    double[]y = new double[k.length];
    integrator.setInitialStepSize(60.0);
    double finalT = integrator.integrate(ode, t0, y0, tEvent, y);
    for(int i = 0;
    i < y.length;
     ++ i) {
        Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);
        
    }
    integrator.setInitialStepSize(60.0);
    integrator.addEventHandler(new EventHandler() {
        public void resetState(double t, double[]y) {
            
        }
        public double g(double t, double[]y) {
            return t - tEvent;
            
        }
        public int eventOccurred(double t, double[]y, boolean increasing) {
            return CONTINUE;
            
        }
    }, Double.POSITIVE_INFINITY, 1.0e-20, 100);
    finalT = integrator.integrate(ode, t0, y0, tEvent + 120, y);
    for(int i = 0;
    i < y.length;
     ++ i) {
        
    }
}

---
---
public void testMissedEndEvent_catena_2()throws IntegratorException, DerivativeException {
    final double t0 = 1878250320.0000029;
    final double tEvent = 1878250379.9999986;
    final double[]k =  {
        1.0e-4, 1.0e-5, 1.0e-6
    };
    FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {
        public int getDimension() {
            return k.length;
            
        }
        public void computeDerivatives(double t, double[]y, double[]yDot) {
            for(int i = 0;
            i < y.length;
             ++ i) {
                yDot[i] = k[i] * y[i];
                
            }
        }
    };
    DormandPrince853Integrator integrator = new DormandPrince853Integrator(0.0, 100.0, 1.0e-10, 1.0e-10);
    double[]y0 = new double[k.length];
    for(int i = 0;
    i < y0.length;
     ++ i) {
        y0[i] = i + 1;
        
    }
    double[]y = new double[k.length];
    integrator.setInitialStepSize(60.0);
    double finalT = integrator.integrate(ode, t0, y0, tEvent, y);
    for(int i = 0;
    i < y.length;
     ++ i) {
        
    }
    integrator.setInitialStepSize(60.0);
    integrator.addEventHandler(new EventHandler() {
        public void resetState(double t, double[]y) {
            
        }
        public double g(double t, double[]y) {
            return t - tEvent;
            
        }
        public int eventOccurred(double t, double[]y, boolean increasing) {
            Assert.assertEquals(tEvent, t, 5.0e-6);
            return CONTINUE;
            
        }
    }, Double.POSITIVE_INFINITY, 1.0e-20, 100);
    finalT = integrator.integrate(ode, t0, y0, tEvent + 120, y);
    for(int i = 0;
    i < y.length;
     ++ i) {
        
    }
}

---
---
public void testMissedEndEvent_catena_3()throws IntegratorException, DerivativeException {
    final double t0 = 1878250320.0000029;
    final double tEvent = 1878250379.9999986;
    final double[]k =  {
        1.0e-4, 1.0e-5, 1.0e-6
    };
    FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {
        public int getDimension() {
            return k.length;
            
        }
        public void computeDerivatives(double t, double[]y, double[]yDot) {
            for(int i = 0;
            i < y.length;
             ++ i) {
                yDot[i] = k[i] * y[i];
                
            }
        }
    };
    DormandPrince853Integrator integrator = new DormandPrince853Integrator(0.0, 100.0, 1.0e-10, 1.0e-10);
    double[]y0 = new double[k.length];
    for(int i = 0;
    i < y0.length;
     ++ i) {
        y0[i] = i + 1;
        
    }
    double[]y = new double[k.length];
    integrator.setInitialStepSize(60.0);
    double finalT = integrator.integrate(ode, t0, y0, tEvent, y);
    for(int i = 0;
    i < y.length;
     ++ i) {
        
    }
    integrator.setInitialStepSize(60.0);
    integrator.addEventHandler(new EventHandler() {
        public void resetState(double t, double[]y) {
            
        }
        public double g(double t, double[]y) {
            return t - tEvent;
            
        }
        public int eventOccurred(double t, double[]y, boolean increasing) {
            return CONTINUE;
            
        }
    }, Double.POSITIVE_INFINITY, 1.0e-20, 100);
    finalT = integrator.integrate(ode, t0, y0, tEvent + 120, y);
    Assert.assertEquals(tEvent + 120, finalT, 5.0e-6);
    for(int i = 0;
    i < y.length;
     ++ i) {
        
    }
}

---
---
public void testMissedEndEvent_catena_4()throws IntegratorException, DerivativeException {
    final double t0 = 1878250320.0000029;
    final double tEvent = 1878250379.9999986;
    final double[]k =  {
        1.0e-4, 1.0e-5, 1.0e-6
    };
    FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {
        public int getDimension() {
            return k.length;
            
        }
        public void computeDerivatives(double t, double[]y, double[]yDot) {
            for(int i = 0;
            i < y.length;
             ++ i) {
                yDot[i] = k[i] * y[i];
                
            }
        }
    };
    DormandPrince853Integrator integrator = new DormandPrince853Integrator(0.0, 100.0, 1.0e-10, 1.0e-10);
    double[]y0 = new double[k.length];
    for(int i = 0;
    i < y0.length;
     ++ i) {
        y0[i] = i + 1;
        
    }
    double[]y = new double[k.length];
    integrator.setInitialStepSize(60.0);
    double finalT = integrator.integrate(ode, t0, y0, tEvent, y);
    for(int i = 0;
    i < y.length;
     ++ i) {
        
    }
    integrator.setInitialStepSize(60.0);
    integrator.addEventHandler(new EventHandler() {
        public void resetState(double t, double[]y) {
            
        }
        public double g(double t, double[]y) {
            return t - tEvent;
            
        }
        public int eventOccurred(double t, double[]y, boolean increasing) {
            return CONTINUE;
            
        }
    }, Double.POSITIVE_INFINITY, 1.0e-20, 100);
    finalT = integrator.integrate(ode, t0, y0, tEvent + 120, y);
    for(int i = 0;
    i < y.length;
     ++ i) {
        Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);
        
    }
}

---
--------------------
Run: Math_23
@@@
Split test: org.apache.commons.math3.optimization.univariate.BrentOptimizerTest::testKeepInitIfBest
file: /root/workbench/exportInfo/d4j_buggy/Math_23/src/test/java//org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java
Begin: Pos(192, 5)
End: Pos(222, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_23/src/test/java//org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java
Name: testKeepInitIfBest
Childs: [StatementAssertion<Begin: Pos(221, 9), End: Pos(221, 88)>,
]
--------------------
Run: Math_60
@@@
Split test: org.apache.commons.math.distribution.NormalDistributionTest::testExtremeValues
file: /root/workbench/exportInfo/d4j_buggy/Math_60/src/test/java//org/apache/commons/math/distribution/NormalDistributionTest.java
Begin: Pos(157, 12)
End: Pos(179, 4)
Source: /root/workbench/exportInfo/d4j_buggy/Math_60/src/test/java//org/apache/commons/math/distribution/NormalDistributionTest.java
Name: testExtremeValues
Childs: [StatementAssertion<Begin: Pos(165, 17), End: Pos(165, 45)>,
StatementAssertion<Begin: Pos(166, 17), End: Pos(166, 45)>,
StatementAssertion<Begin: Pos(169, 17), End: Pos(169, 48)>,
StatementAssertion<Begin: Pos(170, 17), End: Pos(170, 48)>,
StatementAssertion<Begin: Pos(174, 9), End: Pos(174, 81)>,
StatementAssertion<Begin: Pos(175, 9), End: Pos(175, 82)>,
StatementAssertion<Begin: Pos(176, 9), End: Pos(176, 89)>,
StatementAssertion<Begin: Pos(177, 9), End: Pos(177, 89)>,
]
---
public void testExtremeValues_catena_0()throws Exception {
    NormalDistribution distribution = new NormalDistributionImpl(0, 1);
    for(int i = 0;
    i < 100;
    i ++ ) {
        double lowerTail = distribution.cumulativeProbability( - i);
        double upperTail = distribution.cumulativeProbability(i);
        if(i < 9) {
            assertTrue(lowerTail > 0.0d);
            
        }
        else {
            
        }
    }
}

---
---
public void testExtremeValues_catena_1()throws Exception {
    NormalDistribution distribution = new NormalDistributionImpl(0, 1);
    for(int i = 0;
    i < 100;
    i ++ ) {
        double lowerTail = distribution.cumulativeProbability( - i);
        double upperTail = distribution.cumulativeProbability(i);
        if(i < 9) {
            assertTrue(upperTail < 1.0d);
            
        }
        else {
            
        }
    }
}

---
---
public void testExtremeValues_catena_2()throws Exception {
    NormalDistribution distribution = new NormalDistributionImpl(0, 1);
    for(int i = 0;
    i < 100;
    i ++ ) {
        double lowerTail = distribution.cumulativeProbability( - i);
        double upperTail = distribution.cumulativeProbability(i);
        if(i < 9) {
            
        }
        else {
            assertTrue(lowerTail < 0.00001);
            
        }
    }
}

---
---
public void testExtremeValues_catena_3()throws Exception {
    NormalDistribution distribution = new NormalDistributionImpl(0, 1);
    for(int i = 0;
    i < 100;
    i ++ ) {
        double lowerTail = distribution.cumulativeProbability( - i);
        double upperTail = distribution.cumulativeProbability(i);
        if(i < 9) {
            
        }
        else {
            assertTrue(upperTail > 0.99999);
            
        }
    }
}

---
---
public void testExtremeValues_catena_4()throws Exception {
    NormalDistribution distribution = new NormalDistributionImpl(0, 1);
    for(int i = 0;
    i < 100;
    i ++ ) {
        double lowerTail = distribution.cumulativeProbability( - i);
        double upperTail = distribution.cumulativeProbability(i);
        if(i < 9) {
            
        }
        else {
            
        }
    }
    assertEquals(distribution.cumulativeProbability(Double.MAX_VALUE), 1, 0);
    
}

---
---
public void testExtremeValues_catena_5()throws Exception {
    NormalDistribution distribution = new NormalDistributionImpl(0, 1);
    for(int i = 0;
    i < 100;
    i ++ ) {
        double lowerTail = distribution.cumulativeProbability( - i);
        double upperTail = distribution.cumulativeProbability(i);
        if(i < 9) {
            
        }
        else {
            
        }
    }
    assertEquals(distribution.cumulativeProbability( - Double.MAX_VALUE), 0, 0);
    
}

---
---
public void testExtremeValues_catena_6()throws Exception {
    NormalDistribution distribution = new NormalDistributionImpl(0, 1);
    for(int i = 0;
    i < 100;
    i ++ ) {
        double lowerTail = distribution.cumulativeProbability( - i);
        double upperTail = distribution.cumulativeProbability(i);
        if(i < 9) {
            
        }
        else {
            
        }
    }
    assertEquals(distribution.cumulativeProbability(Double.POSITIVE_INFINITY), 1, 0);
    
}

---
---
public void testExtremeValues_catena_7()throws Exception {
    NormalDistribution distribution = new NormalDistributionImpl(0, 1);
    for(int i = 0;
    i < 100;
    i ++ ) {
        double lowerTail = distribution.cumulativeProbability( - i);
        double upperTail = distribution.cumulativeProbability(i);
        if(i < 9) {
            
        }
        else {
            
        }
    }
    assertEquals(distribution.cumulativeProbability(Double.NEGATIVE_INFINITY), 0, 0);
    
}

---
--------------------
Run: Math_15
@@@
Split test: org.apache.commons.math3.util.FastMathTest::testMath904
file: /root/workbench/exportInfo/d4j_buggy/Math_15/src/test/java//org/apache/commons/math3/util/FastMathTest.java
Begin: Pos(160, 5)
End: Pos(168, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_15/src/test/java//org/apache/commons/math3/util/FastMathTest.java
Name: testMath904
Childs: [StatementAssertion<Begin: Pos(164, 9), End: Pos(165, 51)>,
StatementAssertion<Begin: Pos(166, 9), End: Pos(167, 52)>,
]
---
@Test public void testMath904_catena_0() {
    final double x =  - 1;
    final double y = (5 + 1e-15) * 1e15;
    Assert.assertEquals(Math.pow(x, y), FastMath.pow(x, y), 0);
    
}

---
---
@Test public void testMath904_catena_1() {
    final double x =  - 1;
    final double y = (5 + 1e-15) * 1e15;
    Assert.assertEquals(Math.pow(x,  - y), FastMath.pow(x,  - y), 0);
    
}

---
--------------------
Run: Math_6
@@@
Split test: org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial
file: /root/workbench/exportInfo/d4j_buggy/Math_6/src/test/java//org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.java
Begin: Pos(124, 5)
End: Pos(142, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_6/src/test/java//org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.java
Name: testTrivial
Childs: [StatementAssertion<Begin: Pos(137, 9), End: Pos(137, 65)>,
StatementAssertion<Begin: Pos(138, 9), End: Pos(138, 62)>,
StatementAssertion<Begin: Pos(141, 9), End: Pos(141, 57)>,
]
---
@Test public void testTrivial_catena_0() {
    LinearProblem problem = new LinearProblem(new double[][] {
         {
            2
        }
    }, new double[] {
        3
    });
    NonLinearConjugateGradientOptimizer optimizer = new NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE, new SimpleValueChecker(1e-6, 1e-6));
    PointValuePair optimum = optimizer.optimize(new MaxEval(100), problem.getObjectiveFunction(), problem.getObjectiveFunctionGradient(), GoalType.MINIMIZE, new InitialGuess(new double[] {
        0
    }));
    Assert.assertEquals(1.5, optimum.getPoint()[0], 1.0e-10);
    
}

---
---
@Test public void testTrivial_catena_1() {
    LinearProblem problem = new LinearProblem(new double[][] {
         {
            2
        }
    }, new double[] {
        3
    });
    NonLinearConjugateGradientOptimizer optimizer = new NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE, new SimpleValueChecker(1e-6, 1e-6));
    PointValuePair optimum = optimizer.optimize(new MaxEval(100), problem.getObjectiveFunction(), problem.getObjectiveFunctionGradient(), GoalType.MINIMIZE, new InitialGuess(new double[] {
        0
    }));
    Assert.assertEquals(0.0, optimum.getValue(), 1.0e-10);
    
}

---
---
@Test public void testTrivial_catena_2() {
    LinearProblem problem = new LinearProblem(new double[][] {
         {
            2
        }
    }, new double[] {
        3
    });
    NonLinearConjugateGradientOptimizer optimizer = new NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE, new SimpleValueChecker(1e-6, 1e-6));
    PointValuePair optimum = optimizer.optimize(new MaxEval(100), problem.getObjectiveFunction(), problem.getObjectiveFunctionGradient(), GoalType.MINIMIZE, new InitialGuess(new double[] {
        0
    }));
    Assert.assertTrue(optimizer.getIterations() > 0);
    
}

---
@@@
Split test: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
file: /root/workbench/exportInfo/d4j_buggy/Math_6/src/test/java//org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java
Begin: Pos(341, 5)
End: Pos(354, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_6/src/test/java//org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java
Name: testConstrainedRosen
Childs: [StatementAssertion<Begin: Pos(348, 9), End: Pos(350, 47)>,
StatementAssertion<Begin: Pos(351, 9), End: Pos(353, 47)>,
]
---
@Test public void testConstrainedRosen_catena_0() {
    double[]startPoint = point(DIM, 0.1);
    double[]insigma = point(DIM, 0.1);
    double[][]boundaries = boundaries(DIM,  - 1, 2);
    PointValuePair expected = new PointValuePair(point(DIM, 1.0), 0.0);
    doTest(new Rosen(), startPoint, insigma, boundaries, GoalType.MINIMIZE, 2 * LAMBDA, true, 0, 1e-13, 1e-13, 1e-6, 100000, expected);
    
}

---
---
@Test public void testConstrainedRosen_catena_1() {
    double[]startPoint = point(DIM, 0.1);
    double[]insigma = point(DIM, 0.1);
    double[][]boundaries = boundaries(DIM,  - 1, 2);
    PointValuePair expected = new PointValuePair(point(DIM, 1.0), 0.0);
    doTest(new Rosen(), startPoint, insigma, boundaries, GoalType.MINIMIZE, 2 * LAMBDA, false, 0, 1e-13, 1e-13, 1e-6, 100000, expected);
    
}

---
@@@
Split test: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
file: /root/workbench/exportInfo/d4j_buggy/Math_6/src/test/java//org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java
Begin: Pos(176, 5)
End: Pos(189, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_6/src/test/java//org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java
Name: testElliRotated
Childs: [StatementAssertion<Begin: Pos(183, 9), End: Pos(185, 47)>,
StatementAssertion<Begin: Pos(186, 9), End: Pos(188, 47)>,
]
---
@Test public void testElliRotated_catena_0() {
    double[]startPoint = point(DIM, 1.0);
    double[]insigma = point(DIM, 0.1);
    double[][]boundaries = null;
    PointValuePair expected = new PointValuePair(point(DIM, 0.0), 0.0);
    doTest(new ElliRotated(), startPoint, insigma, boundaries, GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13, 1e-13, 1e-6, 100000, expected);
    
}

---
---
@Test public void testElliRotated_catena_1() {
    double[]startPoint = point(DIM, 1.0);
    double[]insigma = point(DIM, 0.1);
    double[][]boundaries = null;
    PointValuePair expected = new PointValuePair(point(DIM, 0.0), 0.0);
    doTest(new ElliRotated(), startPoint, insigma, boundaries, GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13, 1e-13, 1e-6, 100000, expected);
    
}

---
@@@
Split test: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
file: /root/workbench/exportInfo/d4j_buggy/Math_6/src/test/java//org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java
Begin: Pos(161, 5)
End: Pos(174, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_6/src/test/java//org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java
Name: testEllipse
Childs: [StatementAssertion<Begin: Pos(168, 9), End: Pos(170, 47)>,
StatementAssertion<Begin: Pos(171, 9), End: Pos(173, 47)>,
]
---
@Test public void testEllipse_catena_0() {
    double[]startPoint = point(DIM, 1.0);
    double[]insigma = point(DIM, 0.1);
    double[][]boundaries = null;
    PointValuePair expected = new PointValuePair(point(DIM, 0.0), 0.0);
    doTest(new Elli(), startPoint, insigma, boundaries, GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13, 1e-13, 1e-6, 100000, expected);
    
}

---
---
@Test public void testEllipse_catena_1() {
    double[]startPoint = point(DIM, 1.0);
    double[]insigma = point(DIM, 0.1);
    double[][]boundaries = null;
    PointValuePair expected = new PointValuePair(point(DIM, 0.0), 0.0);
    doTest(new Elli(), startPoint, insigma, boundaries, GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13, 1e-13, 1e-6, 100000, expected);
    
}

---
@@@
Split test: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
file: /root/workbench/exportInfo/d4j_buggy/Math_6/src/test/java//org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java
Begin: Pos(221, 5)
End: Pos(234, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_6/src/test/java//org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java
Name: testTwoAxes
Childs: [StatementAssertion<Begin: Pos(228, 9), End: Pos(230, 47)>,
StatementAssertion<Begin: Pos(231, 9), End: Pos(233, 46)>,
]
---
@Test public void testTwoAxes_catena_0() {
    double[]startPoint = point(DIM, 1.0);
    double[]insigma = point(DIM, 0.1);
    double[][]boundaries = null;
    PointValuePair expected = new PointValuePair(point(DIM, 0.0), 0.0);
    doTest(new TwoAxes(), startPoint, insigma, boundaries, GoalType.MINIMIZE, 2 * LAMBDA, true, 0, 1e-13, 1e-13, 1e-6, 200000, expected);
    
}

---
---
@Test public void testTwoAxes_catena_1() {
    double[]startPoint = point(DIM, 1.0);
    double[]insigma = point(DIM, 0.1);
    double[][]boundaries = null;
    PointValuePair expected = new PointValuePair(point(DIM, 0.0), 0.0);
    doTest(new TwoAxes(), startPoint, insigma, boundaries, GoalType.MINIMIZE, 2 * LAMBDA, false, 0, 1e-13, 1e-8, 1e-3, 200000, expected);
    
}

---
@@@
Split test: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
file: /root/workbench/exportInfo/d4j_buggy/Math_6/src/test/java//org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java
Begin: Pos(191, 5)
End: Pos(204, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_6/src/test/java//org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java
Name: testCigar
Childs: [StatementAssertion<Begin: Pos(198, 9), End: Pos(200, 47)>,
StatementAssertion<Begin: Pos(201, 9), End: Pos(203, 47)>,
]
---
@Test public void testCigar_catena_0() {
    double[]startPoint = point(DIM, 1.0);
    double[]insigma = point(DIM, 0.1);
    double[][]boundaries = null;
    PointValuePair expected = new PointValuePair(point(DIM, 0.0), 0.0);
    doTest(new Cigar(), startPoint, insigma, boundaries, GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13, 1e-13, 1e-6, 200000, expected);
    
}

---
---
@Test public void testCigar_catena_1() {
    double[]startPoint = point(DIM, 1.0);
    double[]insigma = point(DIM, 0.1);
    double[][]boundaries = null;
    PointValuePair expected = new PointValuePair(point(DIM, 0.0), 0.0);
    doTest(new Cigar(), startPoint, insigma, boundaries, GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13, 1e-13, 1e-6, 100000, expected);
    
}

---
@@@
Split test: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
file: /root/workbench/exportInfo/d4j_buggy/Math_6/src/test/java//org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java
Begin: Pos(124, 5)
End: Pos(138, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_6/src/test/java//org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java
Name: testRosen
Childs: [StatementAssertion<Begin: Pos(132, 9), End: Pos(134, 47)>,
StatementAssertion<Begin: Pos(135, 9), End: Pos(137, 47)>,
]
---
@Test@Retry(3)public void testRosen_catena_0() {
    double[]startPoint = point(DIM, 0.1);
    double[]insigma = point(DIM, 0.1);
    double[][]boundaries = null;
    PointValuePair expected = new PointValuePair(point(DIM, 1.0), 0.0);
    doTest(new Rosen(), startPoint, insigma, boundaries, GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13, 1e-13, 1e-6, 100000, expected);
    
}

---
---
@Test@Retry(3)public void testRosen_catena_1() {
    double[]startPoint = point(DIM, 0.1);
    double[]insigma = point(DIM, 0.1);
    double[][]boundaries = null;
    PointValuePair expected = new PointValuePair(point(DIM, 1.0), 0.0);
    doTest(new Rosen(), startPoint, insigma, boundaries, GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13, 1e-13, 1e-6, 100000, expected);
    
}

---
@@@
Split test: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
file: /root/workbench/exportInfo/d4j_buggy/Math_6/src/test/java//org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java
Begin: Pos(326, 5)
End: Pos(339, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_6/src/test/java//org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java
Name: testRastrigin
Childs: [StatementAssertion<Begin: Pos(333, 9), End: Pos(335, 47)>,
StatementAssertion<Begin: Pos(336, 9), End: Pos(338, 47)>,
]
---
@Test public void testRastrigin_catena_0() {
    double[]startPoint = point(DIM, 0.1);
    double[]insigma = point(DIM, 0.1);
    double[][]boundaries = null;
    PointValuePair expected = new PointValuePair(point(DIM, 0.0), 0.0);
    doTest(new Rastrigin(), startPoint, insigma, boundaries, GoalType.MINIMIZE, (int)(200 * Math.sqrt(DIM)), true, 0, 1e-13, 1e-13, 1e-6, 200000, expected);
    
}

---
---
@Test public void testRastrigin_catena_1() {
    double[]startPoint = point(DIM, 0.1);
    double[]insigma = point(DIM, 0.1);
    double[][]boundaries = null;
    PointValuePair expected = new PointValuePair(point(DIM, 0.0), 0.0);
    doTest(new Rastrigin(), startPoint, insigma, boundaries, GoalType.MINIMIZE, (int)(200 * Math.sqrt(DIM)), false, 0, 1e-13, 1e-13, 1e-6, 200000, expected);
    
}

---
@@@
Split test: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
file: /root/workbench/exportInfo/d4j_buggy/Math_6/src/test/java//org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java
Begin: Pos(356, 5)
End: Pos(366, 6)
Source: /root/workbench/exportInfo/d4j_buggy/Math_6/src/test/java//org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java
Name: testDiagonalRosen
Childs: [StatementAssertion<Begin: Pos(363, 9), End: Pos(365, 48)>,
]
@@@
Split test: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
file: /root/workbench/exportInfo/d4j_buggy/Math_6/src/test/java//org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java
Begin: Pos(296, 5)
End: Pos(309, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_6/src/test/java//org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java
Name: testSsDiffPow
Childs: [StatementAssertion<Begin: Pos(303, 9), End: Pos(305, 46)>,
StatementAssertion<Begin: Pos(306, 9), End: Pos(308, 46)>,
]
---
@Test public void testSsDiffPow_catena_0() {
    double[]startPoint = point(DIM, 1.0);
    double[]insigma = point(DIM, 0.1);
    double[][]boundaries = null;
    PointValuePair expected = new PointValuePair(point(DIM, 0.0), 0.0);
    doTest(new SsDiffPow(), startPoint, insigma, boundaries, GoalType.MINIMIZE, 10, true, 0, 1e-13, 1e-4, 1e-1, 200000, expected);
    
}

---
---
@Test public void testSsDiffPow_catena_1() {
    double[]startPoint = point(DIM, 1.0);
    double[]insigma = point(DIM, 0.1);
    double[][]boundaries = null;
    PointValuePair expected = new PointValuePair(point(DIM, 0.0), 0.0);
    doTest(new SsDiffPow(), startPoint, insigma, boundaries, GoalType.MINIMIZE, 10, false, 0, 1e-13, 1e-4, 1e-1, 200000, expected);
    
}

---
@@@
Split test: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
file: /root/workbench/exportInfo/d4j_buggy/Math_6/src/test/java//org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java
Begin: Pos(140, 5)
End: Pos(159, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_6/src/test/java//org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java
Name: testMaximize
Childs: [StatementAssertion<Begin: Pos(148, 9), End: Pos(150, 47)>,
StatementAssertion<Begin: Pos(151, 9), End: Pos(153, 47)>,
StatementAssertion<Begin: Pos(156, 9), End: Pos(158, 47)>,
]
---
@Test@Retry(3)public void testMaximize_catena_0() {
    double[]startPoint = point(DIM, 1.0);
    double[]insigma = point(DIM, 0.1);
    double[][]boundaries = null;
    PointValuePair expected = new PointValuePair(point(DIM, 0.0), 1.0);
    doTest(new MinusElli(), startPoint, insigma, boundaries, GoalType.MAXIMIZE, LAMBDA, true, 0, 1.0 - 1e-13, 2e-10, 5e-6, 100000, expected);
    boundaries = boundaries(DIM,  - 0.3, 0.3);
    startPoint = point(DIM, 0.1);
    
}

---
---
@Test@Retry(3)public void testMaximize_catena_1() {
    double[]startPoint = point(DIM, 1.0);
    double[]insigma = point(DIM, 0.1);
    double[][]boundaries = null;
    PointValuePair expected = new PointValuePair(point(DIM, 0.0), 1.0);
    doTest(new MinusElli(), startPoint, insigma, boundaries, GoalType.MAXIMIZE, LAMBDA, false, 0, 1.0 - 1e-13, 2e-10, 5e-6, 100000, expected);
    boundaries = boundaries(DIM,  - 0.3, 0.3);
    startPoint = point(DIM, 0.1);
    
}

---
---
@Test@Retry(3)public void testMaximize_catena_2() {
    double[]startPoint = point(DIM, 1.0);
    double[]insigma = point(DIM, 0.1);
    double[][]boundaries = null;
    PointValuePair expected = new PointValuePair(point(DIM, 0.0), 1.0);
    boundaries = boundaries(DIM,  - 0.3, 0.3);
    startPoint = point(DIM, 0.1);
    doTest(new MinusElli(), startPoint, insigma, boundaries, GoalType.MAXIMIZE, LAMBDA, true, 0, 1.0 - 1e-13, 2e-10, 5e-6, 100000, expected);
    
}

---
@@@
Split test: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
file: /root/workbench/exportInfo/d4j_buggy/Math_6/src/test/java//org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java
Begin: Pos(311, 5)
End: Pos(324, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_6/src/test/java//org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java
Name: testAckley
Childs: [StatementAssertion<Begin: Pos(318, 9), End: Pos(320, 46)>,
StatementAssertion<Begin: Pos(321, 9), End: Pos(323, 46)>,
]
---
@Test public void testAckley_catena_0() {
    double[]startPoint = point(DIM, 1.0);
    double[]insigma = point(DIM, 1.0);
    double[][]boundaries = null;
    PointValuePair expected = new PointValuePair(point(DIM, 0.0), 0.0);
    doTest(new Ackley(), startPoint, insigma, boundaries, GoalType.MINIMIZE, 2 * LAMBDA, true, 0, 1e-13, 1e-9, 1e-5, 100000, expected);
    
}

---
---
@Test public void testAckley_catena_1() {
    double[]startPoint = point(DIM, 1.0);
    double[]insigma = point(DIM, 1.0);
    double[][]boundaries = null;
    PointValuePair expected = new PointValuePair(point(DIM, 0.0), 0.0);
    doTest(new Ackley(), startPoint, insigma, boundaries, GoalType.MINIMIZE, 2 * LAMBDA, false, 0, 1e-13, 1e-9, 1e-5, 100000, expected);
    
}

---
@@@
Split test: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
file: /root/workbench/exportInfo/d4j_buggy/Math_6/src/test/java//org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java
Begin: Pos(236, 5)
End: Pos(249, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_6/src/test/java//org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java
Name: testCigTab
Childs: [StatementAssertion<Begin: Pos(243, 9), End: Pos(245, 47)>,
StatementAssertion<Begin: Pos(246, 9), End: Pos(248, 47)>,
]
---
@Test public void testCigTab_catena_0() {
    double[]startPoint = point(DIM, 1.0);
    double[]insigma = point(DIM, 0.3);
    double[][]boundaries = null;
    PointValuePair expected = new PointValuePair(point(DIM, 0.0), 0.0);
    doTest(new CigTab(), startPoint, insigma, boundaries, GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13, 1e-13, 5e-5, 100000, expected);
    
}

---
---
@Test public void testCigTab_catena_1() {
    double[]startPoint = point(DIM, 1.0);
    double[]insigma = point(DIM, 0.3);
    double[][]boundaries = null;
    PointValuePair expected = new PointValuePair(point(DIM, 0.0), 0.0);
    doTest(new CigTab(), startPoint, insigma, boundaries, GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13, 1e-13, 5e-5, 100000, expected);
    
}

---
@@@
Split test: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiffPow
file: /root/workbench/exportInfo/d4j_buggy/Math_6/src/test/java//org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java
Begin: Pos(281, 5)
End: Pos(294, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_6/src/test/java//org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java
Name: testDiffPow
Childs: [StatementAssertion<Begin: Pos(288, 9), End: Pos(290, 46)>,
StatementAssertion<Begin: Pos(291, 9), End: Pos(293, 46)>,
]
---
@Test public void testDiffPow_catena_0() {
    double[]startPoint = point(DIM, 1.0);
    double[]insigma = point(DIM, 0.1);
    double[][]boundaries = null;
    PointValuePair expected = new PointValuePair(point(DIM, 0.0), 0.0);
    doTest(new DiffPow(), startPoint, insigma, boundaries, GoalType.MINIMIZE, 10, true, 0, 1e-13, 1e-8, 1e-1, 100000, expected);
    
}

---
---
@Test public void testDiffPow_catena_1() {
    double[]startPoint = point(DIM, 1.0);
    double[]insigma = point(DIM, 0.1);
    double[][]boundaries = null;
    PointValuePair expected = new PointValuePair(point(DIM, 0.0), 0.0);
    doTest(new DiffPow(), startPoint, insigma, boundaries, GoalType.MINIMIZE, 10, false, 0, 1e-13, 1e-8, 2e-1, 100000, expected);
    
}

---
@@@
Split test: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
file: /root/workbench/exportInfo/d4j_buggy/Math_6/src/test/java//org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java
Begin: Pos(251, 5)
End: Pos(264, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_6/src/test/java//org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java
Name: testSphere
Childs: [StatementAssertion<Begin: Pos(258, 9), End: Pos(260, 47)>,
StatementAssertion<Begin: Pos(261, 9), End: Pos(263, 47)>,
]
---
@Test public void testSphere_catena_0() {
    double[]startPoint = point(DIM, 1.0);
    double[]insigma = point(DIM, 0.1);
    double[][]boundaries = null;
    PointValuePair expected = new PointValuePair(point(DIM, 0.0), 0.0);
    doTest(new Sphere(), startPoint, insigma, boundaries, GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13, 1e-13, 1e-6, 100000, expected);
    
}

---
---
@Test public void testSphere_catena_1() {
    double[]startPoint = point(DIM, 1.0);
    double[]insigma = point(DIM, 0.1);
    double[][]boundaries = null;
    PointValuePair expected = new PointValuePair(point(DIM, 0.0), 0.0);
    doTest(new Sphere(), startPoint, insigma, boundaries, GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13, 1e-13, 1e-6, 100000, expected);
    
}

---
@@@
Split test: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
file: /root/workbench/exportInfo/d4j_buggy/Math_6/src/test/java//org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java
Begin: Pos(266, 5)
End: Pos(279, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_6/src/test/java//org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java
Name: testTablet
Childs: [StatementAssertion<Begin: Pos(273, 9), End: Pos(275, 47)>,
StatementAssertion<Begin: Pos(276, 9), End: Pos(278, 47)>,
]
---
@Test public void testTablet_catena_0() {
    double[]startPoint = point(DIM, 1.0);
    double[]insigma = point(DIM, 0.1);
    double[][]boundaries = null;
    PointValuePair expected = new PointValuePair(point(DIM, 0.0), 0.0);
    doTest(new Tablet(), startPoint, insigma, boundaries, GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13, 1e-13, 1e-6, 100000, expected);
    
}

---
---
@Test public void testTablet_catena_1() {
    double[]startPoint = point(DIM, 1.0);
    double[]insigma = point(DIM, 0.1);
    double[][]boundaries = null;
    PointValuePair expected = new PointValuePair(point(DIM, 0.0), 0.0);
    doTest(new Tablet(), startPoint, insigma, boundaries, GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13, 1e-13, 1e-6, 100000, expected);
    
}

---
@@@
Split test: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
file: /root/workbench/exportInfo/d4j_buggy/Math_6/src/test/java//org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java
Begin: Pos(206, 5)
End: Pos(219, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_6/src/test/java//org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java
Name: testCigarWithBoundaries
Childs: [StatementAssertion<Begin: Pos(213, 9), End: Pos(215, 47)>,
StatementAssertion<Begin: Pos(216, 9), End: Pos(218, 47)>,
]
---
@Test public void testCigarWithBoundaries_catena_0() {
    double[]startPoint = point(DIM, 1.0);
    double[]insigma = point(DIM, 0.1);
    double[][]boundaries = boundaries(DIM,  - 1e100, Double.POSITIVE_INFINITY);
    PointValuePair expected = new PointValuePair(point(DIM, 0.0), 0.0);
    doTest(new Cigar(), startPoint, insigma, boundaries, GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13, 1e-13, 1e-6, 200000, expected);
    
}

---
---
@Test public void testCigarWithBoundaries_catena_1() {
    double[]startPoint = point(DIM, 1.0);
    double[]insigma = point(DIM, 0.1);
    double[][]boundaries = boundaries(DIM,  - 1e100, Double.POSITIVE_INFINITY);
    PointValuePair expected = new PointValuePair(point(DIM, 0.0), 0.0);
    doTest(new Cigar(), startPoint, insigma, boundaries, GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13, 1e-13, 1e-6, 100000, expected);
    
}

---
@@@
Split test: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
file: /root/workbench/exportInfo/d4j_buggy/Math_6/src/test/java//org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizerTest.java
Begin: Pos(50, 5)
End: Pos(76, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_6/src/test/java//org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizerTest.java
Name: testSumSinc
Childs: [StatementAssertion<Begin: Pos(66, 9), End: Pos(66, 68)>,
StatementAssertion<Begin: Pos(72, 9), End: Pos(72, 68)>,
StatementAssertion<Begin: Pos(75, 9), End: Pos(75, 74)>,
]
---
@Test public void testSumSinc_catena_0() {
    final MultivariateFunction func = new SumSincFunction( - 1);
    int dim = 2;
    final double[]minPoint = new double[dim];
    for(int i = 0;
    i < dim;
    i ++ ) {
        minPoint[i] = 0;
        
    }
    double[]init = new double[dim];
    for(int i = 0;
    i < dim;
    i ++ ) {
        init[i] = minPoint[i];
        
    }
    doTest(func, minPoint, init, GoalType.MINIMIZE, 1e-9, 1e-9);
    for(int i = 0;
    i < dim;
    i ++ ) {
        init[i] = minPoint[i] + 3;
        
    }
}

---
---
@Test public void testSumSinc_catena_1() {
    final MultivariateFunction func = new SumSincFunction( - 1);
    int dim = 2;
    final double[]minPoint = new double[dim];
    for(int i = 0;
    i < dim;
    i ++ ) {
        minPoint[i] = 0;
        
    }
    double[]init = new double[dim];
    for(int i = 0;
    i < dim;
    i ++ ) {
        init[i] = minPoint[i];
        
    }
    for(int i = 0;
    i < dim;
    i ++ ) {
        init[i] = minPoint[i] + 3;
        
    }
    doTest(func, minPoint, init, GoalType.MINIMIZE, 1e-9, 1e-5);
    
}

---
---
@Test public void testSumSinc_catena_2() {
    final MultivariateFunction func = new SumSincFunction( - 1);
    int dim = 2;
    final double[]minPoint = new double[dim];
    for(int i = 0;
    i < dim;
    i ++ ) {
        minPoint[i] = 0;
        
    }
    double[]init = new double[dim];
    for(int i = 0;
    i < dim;
    i ++ ) {
        init[i] = minPoint[i];
        
    }
    for(int i = 0;
    i < dim;
    i ++ ) {
        init[i] = minPoint[i] + 3;
        
    }
    doTest(func, minPoint, init, GoalType.MINIMIZE, 1e-9, 1e-9, 1e-7);
    
}

---
@@@
Split test: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1
file: /root/workbench/exportInfo/d4j_buggy/Math_6/src/test/java//org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerMultiDirectionalTest.java
Begin: Pos(90, 5)
End: Pos(109, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_6/src/test/java//org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerMultiDirectionalTest.java
Name: testMaximize1
Childs: [StatementAssertion<Begin: Pos(101, 9), End: Pos(101, 73)>,
StatementAssertion<Begin: Pos(102, 9), End: Pos(102, 73)>,
StatementAssertion<Begin: Pos(103, 9), End: Pos(103, 78)>,
StatementAssertion<Begin: Pos(104, 9), End: Pos(104, 60)>,
StatementAssertion<Begin: Pos(105, 9), End: Pos(105, 60)>,
StatementAssertion<Begin: Pos(108, 9), End: Pos(108, 57)>,
]
---
@Test public void testMaximize1_catena_0() {
    SimplexOptimizer optimizer = new SimplexOptimizer(1e-11, 1e-30);
    final FourExtrema fourExtrema = new FourExtrema();
    final PointValuePair optimum = optimizer.optimize(new MaxEval(200), new ObjectiveFunction(fourExtrema), GoalType.MAXIMIZE, new InitialGuess(new double[] {
         - 3.0, 0.0
    }), new MultiDirectionalSimplex(new double[] {
        0.2, 0.2
    }));
    Assert.assertEquals(fourExtrema.xM, optimum.getPoint()[0], 7e-7);
    
}

---
---
@Test public void testMaximize1_catena_1() {
    SimplexOptimizer optimizer = new SimplexOptimizer(1e-11, 1e-30);
    final FourExtrema fourExtrema = new FourExtrema();
    final PointValuePair optimum = optimizer.optimize(new MaxEval(200), new ObjectiveFunction(fourExtrema), GoalType.MAXIMIZE, new InitialGuess(new double[] {
         - 3.0, 0.0
    }), new MultiDirectionalSimplex(new double[] {
        0.2, 0.2
    }));
    Assert.assertEquals(fourExtrema.yM, optimum.getPoint()[1], 3e-7);
    
}

---
---
@Test public void testMaximize1_catena_2() {
    SimplexOptimizer optimizer = new SimplexOptimizer(1e-11, 1e-30);
    final FourExtrema fourExtrema = new FourExtrema();
    final PointValuePair optimum = optimizer.optimize(new MaxEval(200), new ObjectiveFunction(fourExtrema), GoalType.MAXIMIZE, new InitialGuess(new double[] {
         - 3.0, 0.0
    }), new MultiDirectionalSimplex(new double[] {
        0.2, 0.2
    }));
    Assert.assertEquals(fourExtrema.valueXmYm, optimum.getValue(), 2e-14);
    
}

---
---
@Test public void testMaximize1_catena_3() {
    SimplexOptimizer optimizer = new SimplexOptimizer(1e-11, 1e-30);
    final FourExtrema fourExtrema = new FourExtrema();
    final PointValuePair optimum = optimizer.optimize(new MaxEval(200), new ObjectiveFunction(fourExtrema), GoalType.MAXIMIZE, new InitialGuess(new double[] {
         - 3.0, 0.0
    }), new MultiDirectionalSimplex(new double[] {
        0.2, 0.2
    }));
    Assert.assertTrue(optimizer.getEvaluations() > 120);
    
}

---
---
@Test public void testMaximize1_catena_4() {
    SimplexOptimizer optimizer = new SimplexOptimizer(1e-11, 1e-30);
    final FourExtrema fourExtrema = new FourExtrema();
    final PointValuePair optimum = optimizer.optimize(new MaxEval(200), new ObjectiveFunction(fourExtrema), GoalType.MAXIMIZE, new InitialGuess(new double[] {
         - 3.0, 0.0
    }), new MultiDirectionalSimplex(new double[] {
        0.2, 0.2
    }));
    Assert.assertTrue(optimizer.getEvaluations() < 150);
    
}

---
---
@Test public void testMaximize1_catena_5() {
    SimplexOptimizer optimizer = new SimplexOptimizer(1e-11, 1e-30);
    final FourExtrema fourExtrema = new FourExtrema();
    final PointValuePair optimum = optimizer.optimize(new MaxEval(200), new ObjectiveFunction(fourExtrema), GoalType.MAXIMIZE, new InitialGuess(new double[] {
         - 3.0, 0.0
    }), new MultiDirectionalSimplex(new double[] {
        0.2, 0.2
    }));
    Assert.assertTrue(optimizer.getIterations() > 0);
    
}

---
@@@
Split test: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2
file: /root/workbench/exportInfo/d4j_buggy/Math_6/src/test/java//org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerMultiDirectionalTest.java
Begin: Pos(111, 5)
End: Pos(130, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_6/src/test/java//org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerMultiDirectionalTest.java
Name: testMaximize2
Childs: [StatementAssertion<Begin: Pos(122, 9), End: Pos(122, 73)>,
StatementAssertion<Begin: Pos(123, 9), End: Pos(123, 73)>,
StatementAssertion<Begin: Pos(124, 9), End: Pos(124, 78)>,
StatementAssertion<Begin: Pos(125, 9), End: Pos(125, 60)>,
StatementAssertion<Begin: Pos(126, 9), End: Pos(126, 60)>,
StatementAssertion<Begin: Pos(129, 9), End: Pos(129, 57)>,
]
---
@Test public void testMaximize2_catena_0() {
    SimplexOptimizer optimizer = new SimplexOptimizer(new SimpleValueChecker(1e-15, 1e-30));
    final FourExtrema fourExtrema = new FourExtrema();
    final PointValuePair optimum = optimizer.optimize(new MaxEval(200), new ObjectiveFunction(fourExtrema), GoalType.MAXIMIZE, new InitialGuess(new double[] {
        1, 0
    }), new MultiDirectionalSimplex(new double[] {
        0.2, 0.2
    }));
    Assert.assertEquals(fourExtrema.xP, optimum.getPoint()[0], 2e-8);
    
}

---
---
@Test public void testMaximize2_catena_1() {
    SimplexOptimizer optimizer = new SimplexOptimizer(new SimpleValueChecker(1e-15, 1e-30));
    final FourExtrema fourExtrema = new FourExtrema();
    final PointValuePair optimum = optimizer.optimize(new MaxEval(200), new ObjectiveFunction(fourExtrema), GoalType.MAXIMIZE, new InitialGuess(new double[] {
        1, 0
    }), new MultiDirectionalSimplex(new double[] {
        0.2, 0.2
    }));
    Assert.assertEquals(fourExtrema.yP, optimum.getPoint()[1], 3e-6);
    
}

---
---
@Test public void testMaximize2_catena_2() {
    SimplexOptimizer optimizer = new SimplexOptimizer(new SimpleValueChecker(1e-15, 1e-30));
    final FourExtrema fourExtrema = new FourExtrema();
    final PointValuePair optimum = optimizer.optimize(new MaxEval(200), new ObjectiveFunction(fourExtrema), GoalType.MAXIMIZE, new InitialGuess(new double[] {
        1, 0
    }), new MultiDirectionalSimplex(new double[] {
        0.2, 0.2
    }));
    Assert.assertEquals(fourExtrema.valueXpYp, optimum.getValue(), 2e-12);
    
}

---
---
@Test public void testMaximize2_catena_3() {
    SimplexOptimizer optimizer = new SimplexOptimizer(new SimpleValueChecker(1e-15, 1e-30));
    final FourExtrema fourExtrema = new FourExtrema();
    final PointValuePair optimum = optimizer.optimize(new MaxEval(200), new ObjectiveFunction(fourExtrema), GoalType.MAXIMIZE, new InitialGuess(new double[] {
        1, 0
    }), new MultiDirectionalSimplex(new double[] {
        0.2, 0.2
    }));
    Assert.assertTrue(optimizer.getEvaluations() > 180);
    
}

---
---
@Test public void testMaximize2_catena_4() {
    SimplexOptimizer optimizer = new SimplexOptimizer(new SimpleValueChecker(1e-15, 1e-30));
    final FourExtrema fourExtrema = new FourExtrema();
    final PointValuePair optimum = optimizer.optimize(new MaxEval(200), new ObjectiveFunction(fourExtrema), GoalType.MAXIMIZE, new InitialGuess(new double[] {
        1, 0
    }), new MultiDirectionalSimplex(new double[] {
        0.2, 0.2
    }));
    Assert.assertTrue(optimizer.getEvaluations() < 220);
    
}

---
---
@Test public void testMaximize2_catena_5() {
    SimplexOptimizer optimizer = new SimplexOptimizer(new SimpleValueChecker(1e-15, 1e-30));
    final FourExtrema fourExtrema = new FourExtrema();
    final PointValuePair optimum = optimizer.optimize(new MaxEval(200), new ObjectiveFunction(fourExtrema), GoalType.MAXIMIZE, new InitialGuess(new double[] {
        1, 0
    }), new MultiDirectionalSimplex(new double[] {
        0.2, 0.2
    }));
    Assert.assertTrue(optimizer.getIterations() > 0);
    
}

---
@@@
Split test: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize1
file: /root/workbench/exportInfo/d4j_buggy/Math_6/src/test/java//org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerMultiDirectionalTest.java
Begin: Pos(48, 5)
End: Pos(67, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_6/src/test/java//org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerMultiDirectionalTest.java
Name: testMinimize1
Childs: [StatementAssertion<Begin: Pos(59, 9), End: Pos(59, 73)>,
StatementAssertion<Begin: Pos(60, 9), End: Pos(60, 73)>,
StatementAssertion<Begin: Pos(61, 9), End: Pos(61, 78)>,
StatementAssertion<Begin: Pos(62, 9), End: Pos(62, 60)>,
StatementAssertion<Begin: Pos(63, 9), End: Pos(63, 60)>,
StatementAssertion<Begin: Pos(66, 9), End: Pos(66, 57)>,
]
---
@Test public void testMinimize1_catena_0() {
    SimplexOptimizer optimizer = new SimplexOptimizer(1e-11, 1e-30);
    final FourExtrema fourExtrema = new FourExtrema();
    final PointValuePair optimum = optimizer.optimize(new MaxEval(200), new ObjectiveFunction(fourExtrema), GoalType.MINIMIZE, new InitialGuess(new double[] {
         - 3, 0
    }), new MultiDirectionalSimplex(new double[] {
        0.2, 0.2
    }));
    Assert.assertEquals(fourExtrema.xM, optimum.getPoint()[0], 4e-6);
    
}

---
---
@Test public void testMinimize1_catena_1() {
    SimplexOptimizer optimizer = new SimplexOptimizer(1e-11, 1e-30);
    final FourExtrema fourExtrema = new FourExtrema();
    final PointValuePair optimum = optimizer.optimize(new MaxEval(200), new ObjectiveFunction(fourExtrema), GoalType.MINIMIZE, new InitialGuess(new double[] {
         - 3, 0
    }), new MultiDirectionalSimplex(new double[] {
        0.2, 0.2
    }));
    Assert.assertEquals(fourExtrema.yP, optimum.getPoint()[1], 3e-6);
    
}

---
---
@Test public void testMinimize1_catena_2() {
    SimplexOptimizer optimizer = new SimplexOptimizer(1e-11, 1e-30);
    final FourExtrema fourExtrema = new FourExtrema();
    final PointValuePair optimum = optimizer.optimize(new MaxEval(200), new ObjectiveFunction(fourExtrema), GoalType.MINIMIZE, new InitialGuess(new double[] {
         - 3, 0
    }), new MultiDirectionalSimplex(new double[] {
        0.2, 0.2
    }));
    Assert.assertEquals(fourExtrema.valueXmYp, optimum.getValue(), 8e-13);
    
}

---
---
@Test public void testMinimize1_catena_3() {
    SimplexOptimizer optimizer = new SimplexOptimizer(1e-11, 1e-30);
    final FourExtrema fourExtrema = new FourExtrema();
    final PointValuePair optimum = optimizer.optimize(new MaxEval(200), new ObjectiveFunction(fourExtrema), GoalType.MINIMIZE, new InitialGuess(new double[] {
         - 3, 0
    }), new MultiDirectionalSimplex(new double[] {
        0.2, 0.2
    }));
    Assert.assertTrue(optimizer.getEvaluations() > 120);
    
}

---
---
@Test public void testMinimize1_catena_4() {
    SimplexOptimizer optimizer = new SimplexOptimizer(1e-11, 1e-30);
    final FourExtrema fourExtrema = new FourExtrema();
    final PointValuePair optimum = optimizer.optimize(new MaxEval(200), new ObjectiveFunction(fourExtrema), GoalType.MINIMIZE, new InitialGuess(new double[] {
         - 3, 0
    }), new MultiDirectionalSimplex(new double[] {
        0.2, 0.2
    }));
    Assert.assertTrue(optimizer.getEvaluations() < 150);
    
}

---
---
@Test public void testMinimize1_catena_5() {
    SimplexOptimizer optimizer = new SimplexOptimizer(1e-11, 1e-30);
    final FourExtrema fourExtrema = new FourExtrema();
    final PointValuePair optimum = optimizer.optimize(new MaxEval(200), new ObjectiveFunction(fourExtrema), GoalType.MINIMIZE, new InitialGuess(new double[] {
         - 3, 0
    }), new MultiDirectionalSimplex(new double[] {
        0.2, 0.2
    }));
    Assert.assertTrue(optimizer.getIterations() > 0);
    
}

---
@@@
Split test: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2
file: /root/workbench/exportInfo/d4j_buggy/Math_6/src/test/java//org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerMultiDirectionalTest.java
Begin: Pos(69, 5)
End: Pos(88, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_6/src/test/java//org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerMultiDirectionalTest.java
Name: testMinimize2
Childs: [StatementAssertion<Begin: Pos(80, 9), End: Pos(80, 73)>,
StatementAssertion<Begin: Pos(81, 9), End: Pos(81, 73)>,
StatementAssertion<Begin: Pos(82, 9), End: Pos(82, 78)>,
StatementAssertion<Begin: Pos(83, 9), End: Pos(83, 60)>,
StatementAssertion<Begin: Pos(84, 9), End: Pos(84, 60)>,
StatementAssertion<Begin: Pos(87, 9), End: Pos(87, 57)>,
]
---
@Test public void testMinimize2_catena_0() {
    SimplexOptimizer optimizer = new SimplexOptimizer(1e-11, 1e-30);
    final FourExtrema fourExtrema = new FourExtrema();
    final PointValuePair optimum = optimizer.optimize(new MaxEval(200), new ObjectiveFunction(fourExtrema), GoalType.MINIMIZE, new InitialGuess(new double[] {
        1, 0
    }), new MultiDirectionalSimplex(new double[] {
        0.2, 0.2
    }));
    Assert.assertEquals(fourExtrema.xP, optimum.getPoint()[0], 2e-8);
    
}

---
---
@Test public void testMinimize2_catena_1() {
    SimplexOptimizer optimizer = new SimplexOptimizer(1e-11, 1e-30);
    final FourExtrema fourExtrema = new FourExtrema();
    final PointValuePair optimum = optimizer.optimize(new MaxEval(200), new ObjectiveFunction(fourExtrema), GoalType.MINIMIZE, new InitialGuess(new double[] {
        1, 0
    }), new MultiDirectionalSimplex(new double[] {
        0.2, 0.2
    }));
    Assert.assertEquals(fourExtrema.yM, optimum.getPoint()[1], 3e-6);
    
}

---
---
@Test public void testMinimize2_catena_2() {
    SimplexOptimizer optimizer = new SimplexOptimizer(1e-11, 1e-30);
    final FourExtrema fourExtrema = new FourExtrema();
    final PointValuePair optimum = optimizer.optimize(new MaxEval(200), new ObjectiveFunction(fourExtrema), GoalType.MINIMIZE, new InitialGuess(new double[] {
        1, 0
    }), new MultiDirectionalSimplex(new double[] {
        0.2, 0.2
    }));
    Assert.assertEquals(fourExtrema.valueXpYm, optimum.getValue(), 2e-12);
    
}

---
---
@Test public void testMinimize2_catena_3() {
    SimplexOptimizer optimizer = new SimplexOptimizer(1e-11, 1e-30);
    final FourExtrema fourExtrema = new FourExtrema();
    final PointValuePair optimum = optimizer.optimize(new MaxEval(200), new ObjectiveFunction(fourExtrema), GoalType.MINIMIZE, new InitialGuess(new double[] {
        1, 0
    }), new MultiDirectionalSimplex(new double[] {
        0.2, 0.2
    }));
    Assert.assertTrue(optimizer.getEvaluations() > 120);
    
}

---
---
@Test public void testMinimize2_catena_4() {
    SimplexOptimizer optimizer = new SimplexOptimizer(1e-11, 1e-30);
    final FourExtrema fourExtrema = new FourExtrema();
    final PointValuePair optimum = optimizer.optimize(new MaxEval(200), new ObjectiveFunction(fourExtrema), GoalType.MINIMIZE, new InitialGuess(new double[] {
        1, 0
    }), new MultiDirectionalSimplex(new double[] {
        0.2, 0.2
    }));
    Assert.assertTrue(optimizer.getEvaluations() < 150);
    
}

---
---
@Test public void testMinimize2_catena_5() {
    SimplexOptimizer optimizer = new SimplexOptimizer(1e-11, 1e-30);
    final FourExtrema fourExtrema = new FourExtrema();
    final PointValuePair optimum = optimizer.optimize(new MaxEval(200), new ObjectiveFunction(fourExtrema), GoalType.MINIMIZE, new InitialGuess(new double[] {
        1, 0
    }), new MultiDirectionalSimplex(new double[] {
        0.2, 0.2
    }));
    Assert.assertTrue(optimizer.getIterations() > 0);
    
}

---
@@@
Split test: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize1
file: /root/workbench/exportInfo/d4j_buggy/Math_6/src/test/java//org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerNelderMeadTest.java
Begin: Pos(95, 5)
End: Pos(114, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_6/src/test/java//org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerNelderMeadTest.java
Name: testMaximize1
Childs: [StatementAssertion<Begin: Pos(106, 9), End: Pos(106, 73)>,
StatementAssertion<Begin: Pos(107, 9), End: Pos(107, 73)>,
StatementAssertion<Begin: Pos(108, 9), End: Pos(108, 78)>,
StatementAssertion<Begin: Pos(109, 9), End: Pos(109, 59)>,
StatementAssertion<Begin: Pos(110, 9), End: Pos(110, 59)>,
StatementAssertion<Begin: Pos(113, 9), End: Pos(113, 57)>,
]
---
@Test public void testMaximize1_catena_0() {
    SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);
    final FourExtrema fourExtrema = new FourExtrema();
    final PointValuePair optimum = optimizer.optimize(new MaxEval(100), new ObjectiveFunction(fourExtrema), GoalType.MAXIMIZE, new InitialGuess(new double[] {
         - 3, 0
    }), new NelderMeadSimplex(new double[] {
        0.2, 0.2
    }));
    Assert.assertEquals(fourExtrema.xM, optimum.getPoint()[0], 1e-5);
    
}

---
---
@Test public void testMaximize1_catena_1() {
    SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);
    final FourExtrema fourExtrema = new FourExtrema();
    final PointValuePair optimum = optimizer.optimize(new MaxEval(100), new ObjectiveFunction(fourExtrema), GoalType.MAXIMIZE, new InitialGuess(new double[] {
         - 3, 0
    }), new NelderMeadSimplex(new double[] {
        0.2, 0.2
    }));
    Assert.assertEquals(fourExtrema.yM, optimum.getPoint()[1], 3e-6);
    
}

---
---
@Test public void testMaximize1_catena_2() {
    SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);
    final FourExtrema fourExtrema = new FourExtrema();
    final PointValuePair optimum = optimizer.optimize(new MaxEval(100), new ObjectiveFunction(fourExtrema), GoalType.MAXIMIZE, new InitialGuess(new double[] {
         - 3, 0
    }), new NelderMeadSimplex(new double[] {
        0.2, 0.2
    }));
    Assert.assertEquals(fourExtrema.valueXmYm, optimum.getValue(), 3e-12);
    
}

---
---
@Test public void testMaximize1_catena_3() {
    SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);
    final FourExtrema fourExtrema = new FourExtrema();
    final PointValuePair optimum = optimizer.optimize(new MaxEval(100), new ObjectiveFunction(fourExtrema), GoalType.MAXIMIZE, new InitialGuess(new double[] {
         - 3, 0
    }), new NelderMeadSimplex(new double[] {
        0.2, 0.2
    }));
    Assert.assertTrue(optimizer.getEvaluations() > 60);
    
}

---
---
@Test public void testMaximize1_catena_4() {
    SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);
    final FourExtrema fourExtrema = new FourExtrema();
    final PointValuePair optimum = optimizer.optimize(new MaxEval(100), new ObjectiveFunction(fourExtrema), GoalType.MAXIMIZE, new InitialGuess(new double[] {
         - 3, 0
    }), new NelderMeadSimplex(new double[] {
        0.2, 0.2
    }));
    Assert.assertTrue(optimizer.getEvaluations() < 90);
    
}

---
---
@Test public void testMaximize1_catena_5() {
    SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);
    final FourExtrema fourExtrema = new FourExtrema();
    final PointValuePair optimum = optimizer.optimize(new MaxEval(100), new ObjectiveFunction(fourExtrema), GoalType.MAXIMIZE, new InitialGuess(new double[] {
         - 3, 0
    }), new NelderMeadSimplex(new double[] {
        0.2, 0.2
    }));
    Assert.assertTrue(optimizer.getIterations() > 0);
    
}

---
@@@
Split test: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize2
file: /root/workbench/exportInfo/d4j_buggy/Math_6/src/test/java//org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerNelderMeadTest.java
Begin: Pos(116, 5)
End: Pos(135, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_6/src/test/java//org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerNelderMeadTest.java
Name: testMaximize2
Childs: [StatementAssertion<Begin: Pos(127, 9), End: Pos(127, 73)>,
StatementAssertion<Begin: Pos(128, 9), End: Pos(128, 73)>,
StatementAssertion<Begin: Pos(129, 9), End: Pos(129, 78)>,
StatementAssertion<Begin: Pos(130, 9), End: Pos(130, 59)>,
StatementAssertion<Begin: Pos(131, 9), End: Pos(131, 59)>,
StatementAssertion<Begin: Pos(134, 9), End: Pos(134, 57)>,
]
---
@Test public void testMaximize2_catena_0() {
    SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);
    final FourExtrema fourExtrema = new FourExtrema();
    final PointValuePair optimum = optimizer.optimize(new MaxEval(100), new ObjectiveFunction(fourExtrema), GoalType.MAXIMIZE, new InitialGuess(new double[] {
        1, 0
    }), new NelderMeadSimplex(new double[] {
        0.2, 0.2
    }));
    Assert.assertEquals(fourExtrema.xP, optimum.getPoint()[0], 4e-6);
    
}

---
---
@Test public void testMaximize2_catena_1() {
    SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);
    final FourExtrema fourExtrema = new FourExtrema();
    final PointValuePair optimum = optimizer.optimize(new MaxEval(100), new ObjectiveFunction(fourExtrema), GoalType.MAXIMIZE, new InitialGuess(new double[] {
        1, 0
    }), new NelderMeadSimplex(new double[] {
        0.2, 0.2
    }));
    Assert.assertEquals(fourExtrema.yP, optimum.getPoint()[1], 5e-6);
    
}

---
---
@Test public void testMaximize2_catena_2() {
    SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);
    final FourExtrema fourExtrema = new FourExtrema();
    final PointValuePair optimum = optimizer.optimize(new MaxEval(100), new ObjectiveFunction(fourExtrema), GoalType.MAXIMIZE, new InitialGuess(new double[] {
        1, 0
    }), new NelderMeadSimplex(new double[] {
        0.2, 0.2
    }));
    Assert.assertEquals(fourExtrema.valueXpYp, optimum.getValue(), 7e-12);
    
}

---
---
@Test public void testMaximize2_catena_3() {
    SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);
    final FourExtrema fourExtrema = new FourExtrema();
    final PointValuePair optimum = optimizer.optimize(new MaxEval(100), new ObjectiveFunction(fourExtrema), GoalType.MAXIMIZE, new InitialGuess(new double[] {
        1, 0
    }), new NelderMeadSimplex(new double[] {
        0.2, 0.2
    }));
    Assert.assertTrue(optimizer.getEvaluations() > 60);
    
}

---
---
@Test public void testMaximize2_catena_4() {
    SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);
    final FourExtrema fourExtrema = new FourExtrema();
    final PointValuePair optimum = optimizer.optimize(new MaxEval(100), new ObjectiveFunction(fourExtrema), GoalType.MAXIMIZE, new InitialGuess(new double[] {
        1, 0
    }), new NelderMeadSimplex(new double[] {
        0.2, 0.2
    }));
    Assert.assertTrue(optimizer.getEvaluations() < 90);
    
}

---
---
@Test public void testMaximize2_catena_5() {
    SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);
    final FourExtrema fourExtrema = new FourExtrema();
    final PointValuePair optimum = optimizer.optimize(new MaxEval(100), new ObjectiveFunction(fourExtrema), GoalType.MAXIMIZE, new InitialGuess(new double[] {
        1, 0
    }), new NelderMeadSimplex(new double[] {
        0.2, 0.2
    }));
    Assert.assertTrue(optimizer.getIterations() > 0);
    
}

---
@@@
Split test: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize1
file: /root/workbench/exportInfo/d4j_buggy/Math_6/src/test/java//org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerNelderMeadTest.java
Begin: Pos(53, 5)
End: Pos(72, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_6/src/test/java//org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerNelderMeadTest.java
Name: testMinimize1
Childs: [StatementAssertion<Begin: Pos(64, 9), End: Pos(64, 73)>,
StatementAssertion<Begin: Pos(65, 9), End: Pos(65, 73)>,
StatementAssertion<Begin: Pos(66, 9), End: Pos(66, 78)>,
StatementAssertion<Begin: Pos(67, 9), End: Pos(67, 59)>,
StatementAssertion<Begin: Pos(68, 9), End: Pos(68, 59)>,
StatementAssertion<Begin: Pos(71, 9), End: Pos(71, 57)>,
]
---
@Test public void testMinimize1_catena_0() {
    SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);
    final FourExtrema fourExtrema = new FourExtrema();
    final PointValuePair optimum = optimizer.optimize(new MaxEval(100), new ObjectiveFunction(fourExtrema), GoalType.MINIMIZE, new InitialGuess(new double[] {
         - 3, 0
    }), new NelderMeadSimplex(new double[] {
        0.2, 0.2
    }));
    Assert.assertEquals(fourExtrema.xM, optimum.getPoint()[0], 2e-7);
    
}

---
---
@Test public void testMinimize1_catena_1() {
    SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);
    final FourExtrema fourExtrema = new FourExtrema();
    final PointValuePair optimum = optimizer.optimize(new MaxEval(100), new ObjectiveFunction(fourExtrema), GoalType.MINIMIZE, new InitialGuess(new double[] {
         - 3, 0
    }), new NelderMeadSimplex(new double[] {
        0.2, 0.2
    }));
    Assert.assertEquals(fourExtrema.yP, optimum.getPoint()[1], 2e-5);
    
}

---
---
@Test public void testMinimize1_catena_2() {
    SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);
    final FourExtrema fourExtrema = new FourExtrema();
    final PointValuePair optimum = optimizer.optimize(new MaxEval(100), new ObjectiveFunction(fourExtrema), GoalType.MINIMIZE, new InitialGuess(new double[] {
         - 3, 0
    }), new NelderMeadSimplex(new double[] {
        0.2, 0.2
    }));
    Assert.assertEquals(fourExtrema.valueXmYp, optimum.getValue(), 6e-12);
    
}

---
---
@Test public void testMinimize1_catena_3() {
    SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);
    final FourExtrema fourExtrema = new FourExtrema();
    final PointValuePair optimum = optimizer.optimize(new MaxEval(100), new ObjectiveFunction(fourExtrema), GoalType.MINIMIZE, new InitialGuess(new double[] {
         - 3, 0
    }), new NelderMeadSimplex(new double[] {
        0.2, 0.2
    }));
    Assert.assertTrue(optimizer.getEvaluations() > 60);
    
}

---
---
@Test public void testMinimize1_catena_4() {
    SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);
    final FourExtrema fourExtrema = new FourExtrema();
    final PointValuePair optimum = optimizer.optimize(new MaxEval(100), new ObjectiveFunction(fourExtrema), GoalType.MINIMIZE, new InitialGuess(new double[] {
         - 3, 0
    }), new NelderMeadSimplex(new double[] {
        0.2, 0.2
    }));
    Assert.assertTrue(optimizer.getEvaluations() < 90);
    
}

---
---
@Test public void testMinimize1_catena_5() {
    SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);
    final FourExtrema fourExtrema = new FourExtrema();
    final PointValuePair optimum = optimizer.optimize(new MaxEval(100), new ObjectiveFunction(fourExtrema), GoalType.MINIMIZE, new InitialGuess(new double[] {
         - 3, 0
    }), new NelderMeadSimplex(new double[] {
        0.2, 0.2
    }));
    Assert.assertTrue(optimizer.getIterations() > 0);
    
}

---
@@@
Split test: org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize2
file: /root/workbench/exportInfo/d4j_buggy/Math_6/src/test/java//org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerNelderMeadTest.java
Begin: Pos(74, 5)
End: Pos(93, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_6/src/test/java//org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerNelderMeadTest.java
Name: testMinimize2
Childs: [StatementAssertion<Begin: Pos(85, 9), End: Pos(85, 73)>,
StatementAssertion<Begin: Pos(86, 9), End: Pos(86, 73)>,
StatementAssertion<Begin: Pos(87, 9), End: Pos(87, 78)>,
StatementAssertion<Begin: Pos(88, 9), End: Pos(88, 59)>,
StatementAssertion<Begin: Pos(89, 9), End: Pos(89, 59)>,
StatementAssertion<Begin: Pos(92, 9), End: Pos(92, 57)>,
]
---
@Test public void testMinimize2_catena_0() {
    SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);
    final FourExtrema fourExtrema = new FourExtrema();
    final PointValuePair optimum = optimizer.optimize(new MaxEval(100), new ObjectiveFunction(fourExtrema), GoalType.MINIMIZE, new InitialGuess(new double[] {
        1, 0
    }), new NelderMeadSimplex(new double[] {
        0.2, 0.2
    }));
    Assert.assertEquals(fourExtrema.xP, optimum.getPoint()[0], 5e-6);
    
}

---
---
@Test public void testMinimize2_catena_1() {
    SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);
    final FourExtrema fourExtrema = new FourExtrema();
    final PointValuePair optimum = optimizer.optimize(new MaxEval(100), new ObjectiveFunction(fourExtrema), GoalType.MINIMIZE, new InitialGuess(new double[] {
        1, 0
    }), new NelderMeadSimplex(new double[] {
        0.2, 0.2
    }));
    Assert.assertEquals(fourExtrema.yM, optimum.getPoint()[1], 6e-6);
    
}

---
---
@Test public void testMinimize2_catena_2() {
    SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);
    final FourExtrema fourExtrema = new FourExtrema();
    final PointValuePair optimum = optimizer.optimize(new MaxEval(100), new ObjectiveFunction(fourExtrema), GoalType.MINIMIZE, new InitialGuess(new double[] {
        1, 0
    }), new NelderMeadSimplex(new double[] {
        0.2, 0.2
    }));
    Assert.assertEquals(fourExtrema.valueXpYm, optimum.getValue(), 1e-11);
    
}

---
---
@Test public void testMinimize2_catena_3() {
    SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);
    final FourExtrema fourExtrema = new FourExtrema();
    final PointValuePair optimum = optimizer.optimize(new MaxEval(100), new ObjectiveFunction(fourExtrema), GoalType.MINIMIZE, new InitialGuess(new double[] {
        1, 0
    }), new NelderMeadSimplex(new double[] {
        0.2, 0.2
    }));
    Assert.assertTrue(optimizer.getEvaluations() > 60);
    
}

---
---
@Test public void testMinimize2_catena_4() {
    SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);
    final FourExtrema fourExtrema = new FourExtrema();
    final PointValuePair optimum = optimizer.optimize(new MaxEval(100), new ObjectiveFunction(fourExtrema), GoalType.MINIMIZE, new InitialGuess(new double[] {
        1, 0
    }), new NelderMeadSimplex(new double[] {
        0.2, 0.2
    }));
    Assert.assertTrue(optimizer.getEvaluations() < 90);
    
}

---
---
@Test public void testMinimize2_catena_5() {
    SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);
    final FourExtrema fourExtrema = new FourExtrema();
    final PointValuePair optimum = optimizer.optimize(new MaxEval(100), new ObjectiveFunction(fourExtrema), GoalType.MINIMIZE, new InitialGuess(new double[] {
        1, 0
    }), new NelderMeadSimplex(new double[] {
        0.2, 0.2
    }));
    Assert.assertTrue(optimizer.getIterations() > 0);
    
}

---
@@@
Split test: org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
file: /root/workbench/exportInfo/d4j_buggy/Math_6/src/test/java//org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizerTest.java
# Exception:
Traceback (most recent call last):
  File "run.py", line 39, in run
    fti, check = spliter.process_test_node_v2(path2file, test[1])
  File "/root/workbench/splitTests/spliter.py", line 259, in process_test_node_v2
    node = get_only_node(name, _globals)
  File "/root/workbench/splitTests/util.py", line 39, in get_only_node
    raise ParseError('Cannot find method <{}> in AST'.format(name))
util.ParseError: Cannot find method <testGetIterations> in AST

---
@@@
Split test: org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
file: /root/workbench/exportInfo/d4j_buggy/Math_6/src/test/java//org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java
# Exception:
Traceback (most recent call last):
  File "run.py", line 39, in run
    fti, check = spliter.process_test_node_v2(path2file, test[1])
  File "/root/workbench/splitTests/spliter.py", line 259, in process_test_node_v2
    node = get_only_node(name, _globals)
  File "/root/workbench/splitTests/util.py", line 39, in get_only_node
    raise ParseError('Cannot find method <{}> in AST'.format(name))
util.ParseError: Cannot find method <testGetIterations> in AST

---
--------------------
Run: Math_83
@@@
Split test: org.apache.commons.math.optimization.linear.SimplexSolverTest::testMath286
file: /root/workbench/exportInfo/d4j_buggy/Math_83/src/test/java//org/apache/commons/math/optimization/linear/SimplexSolverTest.java
Begin: Pos(51, 5)
End: Pos(59, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_83/src/test/java//org/apache/commons/math/optimization/linear/SimplexSolverTest.java
Name: testMath286
Childs: [StatementAssertion<Begin: Pos(58, 7), End: Pos(58, 55)>,
]
--------------------
Run: Math_86
@@@
Split test: org.apache.commons.math.linear.CholeskyDecompositionImplTest::testMath274
file: /root/workbench/exportInfo/d4j_buggy/Math_86/src/test//org/apache/commons/math/linear/CholeskyDecompositionImplTest.java
Begin: Pos(81, 5)
End: Pos(90, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_86/src/test//org/apache/commons/math/linear/CholeskyDecompositionImplTest.java
Name: testMath274
Childs: []
@@@
Split test: org.apache.commons.math.linear.CholeskyDecompositionImplTest::testNotPositiveDefinite
file: /root/workbench/exportInfo/d4j_buggy/Math_86/src/test//org/apache/commons/math/linear/CholeskyDecompositionImplTest.java
Begin: Pos(69, 5)
End: Pos(79, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_86/src/test//org/apache/commons/math/linear/CholeskyDecompositionImplTest.java
Name: testNotPositiveDefinite
Childs: []
--------------------
Run: Math_40
@@@
Split test: org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest::testIssue716
file: /root/workbench/exportInfo/d4j_buggy/Math_40/src/test/java//org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java
Begin: Pos(84, 5)
End: Pos(97, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_40/src/test/java//org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java
Name: testIssue716
Childs: [StatementAssertion<Begin: Pos(94, 9), End: Pos(94, 91)>,
StatementAssertion<Begin: Pos(95, 9), End: Pos(95, 56)>,
StatementAssertion<Begin: Pos(96, 9), End: Pos(96, 51)>,
]
---
@Test public void testIssue716_catena_0() {
    BracketingNthOrderBrentSolver solver = new BracketingNthOrderBrentSolver(1.0e-12, 1.0e-10, 1.0e-22, 5);
    UnivariateFunction sharpTurn = new UnivariateFunction() {
        public double value(double x) {
            return(2 * x + 1) / (1.0e9 * (x + 1));
            
        }
    };
    double result = solver.solve(100, sharpTurn,  - 0.9999999, 30, 15, AllowedSolution.RIGHT_SIDE);
    Assert.assertEquals(0, sharpTurn.value(result), solver.getFunctionValueAccuracy());
    
}

---
---
@Test public void testIssue716_catena_1() {
    BracketingNthOrderBrentSolver solver = new BracketingNthOrderBrentSolver(1.0e-12, 1.0e-10, 1.0e-22, 5);
    UnivariateFunction sharpTurn = new UnivariateFunction() {
        public double value(double x) {
            return(2 * x + 1) / (1.0e9 * (x + 1));
            
        }
    };
    double result = solver.solve(100, sharpTurn,  - 0.9999999, 30, 15, AllowedSolution.RIGHT_SIDE);
    Assert.assertTrue(sharpTurn.value(result) >= 0);
    
}

---
---
@Test public void testIssue716_catena_2() {
    BracketingNthOrderBrentSolver solver = new BracketingNthOrderBrentSolver(1.0e-12, 1.0e-10, 1.0e-22, 5);
    UnivariateFunction sharpTurn = new UnivariateFunction() {
        public double value(double x) {
            return(2 * x + 1) / (1.0e9 * (x + 1));
            
        }
    };
    double result = solver.solve(100, sharpTurn,  - 0.9999999, 30, 15, AllowedSolution.RIGHT_SIDE);
    Assert.assertEquals( - 0.5, result, 1.0e-10);
    
}

---
--------------------
Run: Math_54
@@@
Split test: org.apache.commons.math.dfp.DfpTest::testIssue567
file: /root/workbench/exportInfo/d4j_buggy/Math_54/src/test/java//org/apache/commons/math/dfp/DfpTest.java
Begin: Pos(1509, 5)
End: Pos(1516, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Math_54/src/test/java//org/apache/commons/math/dfp/DfpTest.java
Name: testIssue567
Childs: [StatementAssertion<Begin: Pos(1512, 9), End: Pos(1512, 81)>,
StatementAssertion<Begin: Pos(1513, 9), End: Pos(1513, 83)>,
StatementAssertion<Begin: Pos(1514, 9), End: Pos(1514, 104)>,
StatementAssertion<Begin: Pos(1515, 9), End: Pos(1515, 104)>,
]
---
@Test public void testIssue567_catena_0() {
    DfpField field = new DfpField(100);
    Assert.assertEquals(0.0, field.getZero().toDouble(), MathUtils.SAFE_MIN);
    
}

---
---
@Test public void testIssue567_catena_1() {
    DfpField field = new DfpField(100);
    Assert.assertEquals(0.0, field.newDfp(0.0).toDouble(), MathUtils.SAFE_MIN);
    
}

---
---
@Test public void testIssue567_catena_2() {
    DfpField field = new DfpField(100);
    Assert.assertEquals( - 1, FastMath.copySign(1, field.newDfp( - 0.0).toDouble()), MathUtils.EPSILON);
    
}

---
---
@Test public void testIssue567_catena_3() {
    DfpField field = new DfpField(100);
    Assert.assertEquals( + 1, FastMath.copySign(1, field.newDfp( + 0.0).toDouble()), MathUtils.EPSILON);
    
}

---
--------------------
Run: Time_10
@@@
Split test: org.joda.time.TestDays::testFactory_daysBetween_RPartial_MonthDay
file: /root/workbench/exportInfo/d4j_buggy/Time_10/src/test/java//org/joda/time/TestDays.java
Begin: Pos(123, 12)
End: Pos(138, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Time_10/src/test/java//org/joda/time/TestDays.java
Name: testFactory_daysBetween_RPartial_MonthDay
Childs: [StatementAssertion<Begin: Pos(129, 9), End: Pos(129, 67)>,
StatementAssertion<Begin: Pos(130, 9), End: Pos(130, 67)>,
StatementAssertion<Begin: Pos(131, 9), End: Pos(131, 66)>,
StatementAssertion<Begin: Pos(132, 9), End: Pos(132, 66)>,
StatementAssertion<Begin: Pos(134, 9), End: Pos(134, 68)>,
StatementAssertion<Begin: Pos(135, 9), End: Pos(135, 68)>,
StatementAssertion<Begin: Pos(136, 9), End: Pos(136, 66)>,
StatementAssertion<Begin: Pos(137, 9), End: Pos(137, 67)>,
]
---
public void testFactory_daysBetween_RPartial_MonthDay_catena_0() {
    MonthDay start1 = new MonthDay(2, 1);
    MonthDay start2 = new MonthDay(2, 28);
    MonthDay end1 = new MonthDay(2, 28);
    MonthDay end2 = new MonthDay(2, 29);
    assertEquals(27, Days.daysBetween(start1, end1).getDays());
    
}

---
---
public void testFactory_daysBetween_RPartial_MonthDay_catena_1() {
    MonthDay start1 = new MonthDay(2, 1);
    MonthDay start2 = new MonthDay(2, 28);
    MonthDay end1 = new MonthDay(2, 28);
    MonthDay end2 = new MonthDay(2, 29);
    assertEquals(28, Days.daysBetween(start1, end2).getDays());
    
}

---
---
public void testFactory_daysBetween_RPartial_MonthDay_catena_2() {
    MonthDay start1 = new MonthDay(2, 1);
    MonthDay start2 = new MonthDay(2, 28);
    MonthDay end1 = new MonthDay(2, 28);
    MonthDay end2 = new MonthDay(2, 29);
    assertEquals(0, Days.daysBetween(start2, end1).getDays());
    
}

---
---
public void testFactory_daysBetween_RPartial_MonthDay_catena_3() {
    MonthDay start1 = new MonthDay(2, 1);
    MonthDay start2 = new MonthDay(2, 28);
    MonthDay end1 = new MonthDay(2, 28);
    MonthDay end2 = new MonthDay(2, 29);
    assertEquals(1, Days.daysBetween(start2, end2).getDays());
    
}

---
---
public void testFactory_daysBetween_RPartial_MonthDay_catena_4() {
    MonthDay start1 = new MonthDay(2, 1);
    MonthDay start2 = new MonthDay(2, 28);
    MonthDay end1 = new MonthDay(2, 28);
    MonthDay end2 = new MonthDay(2, 29);
    assertEquals( - 27, Days.daysBetween(end1, start1).getDays());
    
}

---
---
public void testFactory_daysBetween_RPartial_MonthDay_catena_5() {
    MonthDay start1 = new MonthDay(2, 1);
    MonthDay start2 = new MonthDay(2, 28);
    MonthDay end1 = new MonthDay(2, 28);
    MonthDay end2 = new MonthDay(2, 29);
    assertEquals( - 28, Days.daysBetween(end2, start1).getDays());
    
}

---
---
public void testFactory_daysBetween_RPartial_MonthDay_catena_6() {
    MonthDay start1 = new MonthDay(2, 1);
    MonthDay start2 = new MonthDay(2, 28);
    MonthDay end1 = new MonthDay(2, 28);
    MonthDay end2 = new MonthDay(2, 29);
    assertEquals(0, Days.daysBetween(end1, start2).getDays());
    
}

---
---
public void testFactory_daysBetween_RPartial_MonthDay_catena_7() {
    MonthDay start1 = new MonthDay(2, 1);
    MonthDay start2 = new MonthDay(2, 28);
    MonthDay end1 = new MonthDay(2, 28);
    MonthDay end2 = new MonthDay(2, 29);
    assertEquals( - 1, Days.daysBetween(end2, start2).getDays());
    
}

---
@@@
Split test: org.joda.time.TestMonths::testFactory_monthsBetween_RPartial_MonthDay
file: /root/workbench/exportInfo/d4j_buggy/Time_10/src/test/java//org/joda/time/TestMonths.java
Begin: Pos(130, 12)
End: Pos(143, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Time_10/src/test/java//org/joda/time/TestMonths.java
Name: testFactory_monthsBetween_RPartial_MonthDay
Childs: [StatementAssertion<Begin: Pos(136, 9), End: Pos(136, 71)>,
StatementAssertion<Begin: Pos(137, 9), End: Pos(137, 71)>,
StatementAssertion<Begin: Pos(138, 9), End: Pos(138, 71)>,
StatementAssertion<Begin: Pos(140, 9), End: Pos(140, 71)>,
StatementAssertion<Begin: Pos(141, 9), End: Pos(141, 71)>,
StatementAssertion<Begin: Pos(142, 9), End: Pos(142, 72)>,
]
---
public void testFactory_monthsBetween_RPartial_MonthDay_catena_0() {
    MonthDay start = new MonthDay(2, 1);
    MonthDay end1 = new MonthDay(2, 28);
    MonthDay end2 = new MonthDay(2, 29);
    MonthDay end3 = new MonthDay(3, 1);
    assertEquals(0, Months.monthsBetween(start, end1).getMonths());
    
}

---
---
public void testFactory_monthsBetween_RPartial_MonthDay_catena_1() {
    MonthDay start = new MonthDay(2, 1);
    MonthDay end1 = new MonthDay(2, 28);
    MonthDay end2 = new MonthDay(2, 29);
    MonthDay end3 = new MonthDay(3, 1);
    assertEquals(0, Months.monthsBetween(start, end2).getMonths());
    
}

---
---
public void testFactory_monthsBetween_RPartial_MonthDay_catena_2() {
    MonthDay start = new MonthDay(2, 1);
    MonthDay end1 = new MonthDay(2, 28);
    MonthDay end2 = new MonthDay(2, 29);
    MonthDay end3 = new MonthDay(3, 1);
    assertEquals(1, Months.monthsBetween(start, end3).getMonths());
    
}

---
---
public void testFactory_monthsBetween_RPartial_MonthDay_catena_3() {
    MonthDay start = new MonthDay(2, 1);
    MonthDay end1 = new MonthDay(2, 28);
    MonthDay end2 = new MonthDay(2, 29);
    MonthDay end3 = new MonthDay(3, 1);
    assertEquals(0, Months.monthsBetween(end1, start).getMonths());
    
}

---
---
public void testFactory_monthsBetween_RPartial_MonthDay_catena_4() {
    MonthDay start = new MonthDay(2, 1);
    MonthDay end1 = new MonthDay(2, 28);
    MonthDay end2 = new MonthDay(2, 29);
    MonthDay end3 = new MonthDay(3, 1);
    assertEquals(0, Months.monthsBetween(end2, start).getMonths());
    
}

---
---
public void testFactory_monthsBetween_RPartial_MonthDay_catena_5() {
    MonthDay start = new MonthDay(2, 1);
    MonthDay end1 = new MonthDay(2, 28);
    MonthDay end2 = new MonthDay(2, 29);
    MonthDay end3 = new MonthDay(3, 1);
    assertEquals( - 1, Months.monthsBetween(end3, start).getMonths());
    
}

---
--------------------
Run: Time_9
@@@
Split test: org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int
file: /root/workbench/exportInfo/d4j_buggy/Time_9/src/test/java//org/joda/time/TestDateTimeZone.java
Begin: Pos(303, 12)
End: Pos(334, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Time_9/src/test/java//org/joda/time/TestDateTimeZone.java
Name: testForOffsetHoursMinutes_int_int
Childs: [StatementAssertion<Begin: Pos(304, 9), End: Pos(304, 81)>,
StatementAssertion<Begin: Pos(305, 9), End: Pos(305, 95)>,
StatementAssertion<Begin: Pos(306, 9), End: Pos(306, 94)>,
StatementAssertion<Begin: Pos(307, 9), End: Pos(307, 94)>,
StatementAssertion<Begin: Pos(308, 9), End: Pos(308, 95)>,
StatementAssertion<Begin: Pos(309, 9), End: Pos(309, 96)>,
StatementAssertion<Begin: Pos(312, 13), End: Pos(312, 19)>,
StatementAssertion<Begin: Pos(316, 13), End: Pos(316, 19)>,
StatementAssertion<Begin: Pos(320, 13), End: Pos(320, 19)>,
StatementAssertion<Begin: Pos(324, 13), End: Pos(324, 19)>,
StatementAssertion<Begin: Pos(328, 13), End: Pos(328, 19)>,
StatementAssertion<Begin: Pos(332, 13), End: Pos(332, 19)>,
]
---
public void testForOffsetHoursMinutes_int_int_catena_0() {
    assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));
    try {
        DateTimeZone.forOffsetHoursMinutes(2, 60);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes( - 2, 60);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes(2,  - 1);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes( - 2,  - 1);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes(24, 0);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes( - 24, 0);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
}

---
---
public void testForOffsetHoursMinutes_int_int_catena_1() {
    assertEquals(DateTimeZone.forID("+23:59"), DateTimeZone.forOffsetHoursMinutes(23, 59));
    try {
        DateTimeZone.forOffsetHoursMinutes(2, 60);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes( - 2, 60);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes(2,  - 1);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes( - 2,  - 1);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes(24, 0);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes( - 24, 0);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
}

---
---
public void testForOffsetHoursMinutes_int_int_catena_2() {
    assertEquals(DateTimeZone.forID("+03:15"), DateTimeZone.forOffsetHoursMinutes(3, 15));
    try {
        DateTimeZone.forOffsetHoursMinutes(2, 60);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes( - 2, 60);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes(2,  - 1);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes( - 2,  - 1);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes(24, 0);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes( - 24, 0);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
}

---
---
public void testForOffsetHoursMinutes_int_int_catena_3() {
    assertEquals(DateTimeZone.forID("-02:00"), DateTimeZone.forOffsetHoursMinutes( - 2, 0));
    try {
        DateTimeZone.forOffsetHoursMinutes(2, 60);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes( - 2, 60);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes(2,  - 1);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes( - 2,  - 1);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes(24, 0);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes( - 24, 0);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
}

---
---
public void testForOffsetHoursMinutes_int_int_catena_4() {
    assertEquals(DateTimeZone.forID("-02:30"), DateTimeZone.forOffsetHoursMinutes( - 2, 30));
    try {
        DateTimeZone.forOffsetHoursMinutes(2, 60);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes( - 2, 60);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes(2,  - 1);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes( - 2,  - 1);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes(24, 0);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes( - 24, 0);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
}

---
---
public void testForOffsetHoursMinutes_int_int_catena_5() {
    assertEquals(DateTimeZone.forID("-23:59"), DateTimeZone.forOffsetHoursMinutes( - 23, 59));
    try {
        DateTimeZone.forOffsetHoursMinutes(2, 60);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes( - 2, 60);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes(2,  - 1);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes( - 2,  - 1);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes(24, 0);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes( - 24, 0);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
}

---
---
public void testForOffsetHoursMinutes_int_int_catena_6() {
    try {
        DateTimeZone.forOffsetHoursMinutes(2, 60);
        fail();
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes( - 2, 60);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes(2,  - 1);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes( - 2,  - 1);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes(24, 0);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes( - 24, 0);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
}

---
---
public void testForOffsetHoursMinutes_int_int_catena_7() {
    try {
        DateTimeZone.forOffsetHoursMinutes(2, 60);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes( - 2, 60);
        fail();
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes(2,  - 1);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes( - 2,  - 1);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes(24, 0);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes( - 24, 0);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
}

---
---
public void testForOffsetHoursMinutes_int_int_catena_8() {
    try {
        DateTimeZone.forOffsetHoursMinutes(2, 60);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes( - 2, 60);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes(2,  - 1);
        fail();
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes( - 2,  - 1);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes(24, 0);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes( - 24, 0);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
}

---
---
public void testForOffsetHoursMinutes_int_int_catena_9() {
    try {
        DateTimeZone.forOffsetHoursMinutes(2, 60);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes( - 2, 60);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes(2,  - 1);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes( - 2,  - 1);
        fail();
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes(24, 0);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes( - 24, 0);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
}

---
---
public void testForOffsetHoursMinutes_int_int_catena_10() {
    try {
        DateTimeZone.forOffsetHoursMinutes(2, 60);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes( - 2, 60);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes(2,  - 1);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes( - 2,  - 1);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes(24, 0);
        fail();
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes( - 24, 0);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
}

---
---
public void testForOffsetHoursMinutes_int_int_catena_11() {
    try {
        DateTimeZone.forOffsetHoursMinutes(2, 60);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes( - 2, 60);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes(2,  - 1);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes( - 2,  - 1);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes(24, 0);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes( - 24, 0);
        fail();
        
    }
    catch(IllegalArgumentException ex) {
        
    }
}

---
--------------------
Run: Time_1
@@@
Split test: org.joda.time.TestPartial_Constructors::testConstructorEx7_TypeArray_intArray
file: /root/workbench/exportInfo/d4j_buggy/Time_1/src/test/java//org/joda/time/TestPartial_Constructors.java
Begin: Pos(260, 12)
End: Pos(315, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Time_1/src/test/java//org/joda/time/TestPartial_Constructors.java
Name: testConstructorEx7_TypeArray_intArray
Childs: [StatementAssertion<Begin: Pos(266, 13), End: Pos(266, 19)>,
StatementAssertion<Begin: Pos(268, 13), End: Pos(268, 78)>,
StatementAssertion<Begin: Pos(275, 13), End: Pos(275, 19)>,
StatementAssertion<Begin: Pos(277, 13), End: Pos(277, 78)>,
StatementAssertion<Begin: Pos(284, 13), End: Pos(284, 19)>,
StatementAssertion<Begin: Pos(286, 13), End: Pos(286, 78)>,
StatementAssertion<Begin: Pos(293, 13), End: Pos(293, 19)>,
StatementAssertion<Begin: Pos(295, 13), End: Pos(295, 78)>,
StatementAssertion<Begin: Pos(302, 13), End: Pos(302, 19)>,
StatementAssertion<Begin: Pos(304, 13), End: Pos(304, 78)>,
StatementAssertion<Begin: Pos(311, 13), End: Pos(311, 19)>,
StatementAssertion<Begin: Pos(313, 13), End: Pos(313, 78)>,
]
---
public void testConstructorEx7_TypeArray_intArray_catena_0()throws Throwable {
    int[]values = new int[] {
        1, 1, 1
    };
    DateTimeFieldType[]types = new DateTimeFieldType[] {
        DateTimeFieldType.dayOfMonth(), DateTimeFieldType.year(), DateTimeFieldType.monthOfYear()
    };
    try {
        new Partial(types, values);
        fail();
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    types = new DateTimeFieldType[] {
        DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.monthOfYear()
    };
    try {
        new Partial(types, values);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    types = new DateTimeFieldType[] {
        DateTimeFieldType.year(), DateTimeFieldType.era(), DateTimeFieldType.monthOfYear()
    };
    try {
        new Partial(types, values);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    types = new DateTimeFieldType[] {
        DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.era()
    };
    try {
        new Partial(types, values);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    types = new DateTimeFieldType[] {
        DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.dayOfYear()
    };
    try {
        new Partial(types, values);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    types = new DateTimeFieldType[] {
        DateTimeFieldType.yearOfEra(), DateTimeFieldType.year(), DateTimeFieldType.dayOfYear()
    };
    try {
        new Partial(types, values);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
}

---
---
public void testConstructorEx7_TypeArray_intArray_catena_1()throws Throwable {
    int[]values = new int[] {
        1, 1, 1
    };
    DateTimeFieldType[]types = new DateTimeFieldType[] {
        DateTimeFieldType.dayOfMonth(), DateTimeFieldType.year(), DateTimeFieldType.monthOfYear()
    };
    try {
        new Partial(types, values);
        
    }
    catch(IllegalArgumentException ex) {
        assertMessageContains(ex, "must be in order", "largest-smallest");
        
    }
    types = new DateTimeFieldType[] {
        DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.monthOfYear()
    };
    try {
        new Partial(types, values);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    types = new DateTimeFieldType[] {
        DateTimeFieldType.year(), DateTimeFieldType.era(), DateTimeFieldType.monthOfYear()
    };
    try {
        new Partial(types, values);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    types = new DateTimeFieldType[] {
        DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.era()
    };
    try {
        new Partial(types, values);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    types = new DateTimeFieldType[] {
        DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.dayOfYear()
    };
    try {
        new Partial(types, values);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    types = new DateTimeFieldType[] {
        DateTimeFieldType.yearOfEra(), DateTimeFieldType.year(), DateTimeFieldType.dayOfYear()
    };
    try {
        new Partial(types, values);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
}

---
---
public void testConstructorEx7_TypeArray_intArray_catena_2()throws Throwable {
    int[]values = new int[] {
        1, 1, 1
    };
    DateTimeFieldType[]types = new DateTimeFieldType[] {
        DateTimeFieldType.dayOfMonth(), DateTimeFieldType.year(), DateTimeFieldType.monthOfYear()
    };
    try {
        new Partial(types, values);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    types = new DateTimeFieldType[] {
        DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.monthOfYear()
    };
    try {
        new Partial(types, values);
        fail();
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    types = new DateTimeFieldType[] {
        DateTimeFieldType.year(), DateTimeFieldType.era(), DateTimeFieldType.monthOfYear()
    };
    try {
        new Partial(types, values);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    types = new DateTimeFieldType[] {
        DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.era()
    };
    try {
        new Partial(types, values);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    types = new DateTimeFieldType[] {
        DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.dayOfYear()
    };
    try {
        new Partial(types, values);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    types = new DateTimeFieldType[] {
        DateTimeFieldType.yearOfEra(), DateTimeFieldType.year(), DateTimeFieldType.dayOfYear()
    };
    try {
        new Partial(types, values);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
}

---
---
public void testConstructorEx7_TypeArray_intArray_catena_3()throws Throwable {
    int[]values = new int[] {
        1, 1, 1
    };
    DateTimeFieldType[]types = new DateTimeFieldType[] {
        DateTimeFieldType.dayOfMonth(), DateTimeFieldType.year(), DateTimeFieldType.monthOfYear()
    };
    try {
        new Partial(types, values);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    types = new DateTimeFieldType[] {
        DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.monthOfYear()
    };
    try {
        new Partial(types, values);
        
    }
    catch(IllegalArgumentException ex) {
        assertMessageContains(ex, "must be in order", "largest-smallest");
        
    }
    types = new DateTimeFieldType[] {
        DateTimeFieldType.year(), DateTimeFieldType.era(), DateTimeFieldType.monthOfYear()
    };
    try {
        new Partial(types, values);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    types = new DateTimeFieldType[] {
        DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.era()
    };
    try {
        new Partial(types, values);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    types = new DateTimeFieldType[] {
        DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.dayOfYear()
    };
    try {
        new Partial(types, values);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    types = new DateTimeFieldType[] {
        DateTimeFieldType.yearOfEra(), DateTimeFieldType.year(), DateTimeFieldType.dayOfYear()
    };
    try {
        new Partial(types, values);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
}

---
---
public void testConstructorEx7_TypeArray_intArray_catena_4()throws Throwable {
    int[]values = new int[] {
        1, 1, 1
    };
    DateTimeFieldType[]types = new DateTimeFieldType[] {
        DateTimeFieldType.dayOfMonth(), DateTimeFieldType.year(), DateTimeFieldType.monthOfYear()
    };
    try {
        new Partial(types, values);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    types = new DateTimeFieldType[] {
        DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.monthOfYear()
    };
    try {
        new Partial(types, values);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    types = new DateTimeFieldType[] {
        DateTimeFieldType.year(), DateTimeFieldType.era(), DateTimeFieldType.monthOfYear()
    };
    try {
        new Partial(types, values);
        fail();
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    types = new DateTimeFieldType[] {
        DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.era()
    };
    try {
        new Partial(types, values);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    types = new DateTimeFieldType[] {
        DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.dayOfYear()
    };
    try {
        new Partial(types, values);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    types = new DateTimeFieldType[] {
        DateTimeFieldType.yearOfEra(), DateTimeFieldType.year(), DateTimeFieldType.dayOfYear()
    };
    try {
        new Partial(types, values);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
}

---
---
public void testConstructorEx7_TypeArray_intArray_catena_5()throws Throwable {
    int[]values = new int[] {
        1, 1, 1
    };
    DateTimeFieldType[]types = new DateTimeFieldType[] {
        DateTimeFieldType.dayOfMonth(), DateTimeFieldType.year(), DateTimeFieldType.monthOfYear()
    };
    try {
        new Partial(types, values);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    types = new DateTimeFieldType[] {
        DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.monthOfYear()
    };
    try {
        new Partial(types, values);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    types = new DateTimeFieldType[] {
        DateTimeFieldType.year(), DateTimeFieldType.era(), DateTimeFieldType.monthOfYear()
    };
    try {
        new Partial(types, values);
        
    }
    catch(IllegalArgumentException ex) {
        assertMessageContains(ex, "must be in order", "largest-smallest");
        
    }
    types = new DateTimeFieldType[] {
        DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.era()
    };
    try {
        new Partial(types, values);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    types = new DateTimeFieldType[] {
        DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.dayOfYear()
    };
    try {
        new Partial(types, values);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    types = new DateTimeFieldType[] {
        DateTimeFieldType.yearOfEra(), DateTimeFieldType.year(), DateTimeFieldType.dayOfYear()
    };
    try {
        new Partial(types, values);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
}

---
---
public void testConstructorEx7_TypeArray_intArray_catena_6()throws Throwable {
    int[]values = new int[] {
        1, 1, 1
    };
    DateTimeFieldType[]types = new DateTimeFieldType[] {
        DateTimeFieldType.dayOfMonth(), DateTimeFieldType.year(), DateTimeFieldType.monthOfYear()
    };
    try {
        new Partial(types, values);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    types = new DateTimeFieldType[] {
        DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.monthOfYear()
    };
    try {
        new Partial(types, values);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    types = new DateTimeFieldType[] {
        DateTimeFieldType.year(), DateTimeFieldType.era(), DateTimeFieldType.monthOfYear()
    };
    try {
        new Partial(types, values);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    types = new DateTimeFieldType[] {
        DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.era()
    };
    try {
        new Partial(types, values);
        fail();
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    types = new DateTimeFieldType[] {
        DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.dayOfYear()
    };
    try {
        new Partial(types, values);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    types = new DateTimeFieldType[] {
        DateTimeFieldType.yearOfEra(), DateTimeFieldType.year(), DateTimeFieldType.dayOfYear()
    };
    try {
        new Partial(types, values);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
}

---
---
public void testConstructorEx7_TypeArray_intArray_catena_7()throws Throwable {
    int[]values = new int[] {
        1, 1, 1
    };
    DateTimeFieldType[]types = new DateTimeFieldType[] {
        DateTimeFieldType.dayOfMonth(), DateTimeFieldType.year(), DateTimeFieldType.monthOfYear()
    };
    try {
        new Partial(types, values);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    types = new DateTimeFieldType[] {
        DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.monthOfYear()
    };
    try {
        new Partial(types, values);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    types = new DateTimeFieldType[] {
        DateTimeFieldType.year(), DateTimeFieldType.era(), DateTimeFieldType.monthOfYear()
    };
    try {
        new Partial(types, values);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    types = new DateTimeFieldType[] {
        DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.era()
    };
    try {
        new Partial(types, values);
        
    }
    catch(IllegalArgumentException ex) {
        assertMessageContains(ex, "must be in order", "largest-smallest");
        
    }
    types = new DateTimeFieldType[] {
        DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.dayOfYear()
    };
    try {
        new Partial(types, values);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    types = new DateTimeFieldType[] {
        DateTimeFieldType.yearOfEra(), DateTimeFieldType.year(), DateTimeFieldType.dayOfYear()
    };
    try {
        new Partial(types, values);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
}

---
---
public void testConstructorEx7_TypeArray_intArray_catena_8()throws Throwable {
    int[]values = new int[] {
        1, 1, 1
    };
    DateTimeFieldType[]types = new DateTimeFieldType[] {
        DateTimeFieldType.dayOfMonth(), DateTimeFieldType.year(), DateTimeFieldType.monthOfYear()
    };
    try {
        new Partial(types, values);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    types = new DateTimeFieldType[] {
        DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.monthOfYear()
    };
    try {
        new Partial(types, values);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    types = new DateTimeFieldType[] {
        DateTimeFieldType.year(), DateTimeFieldType.era(), DateTimeFieldType.monthOfYear()
    };
    try {
        new Partial(types, values);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    types = new DateTimeFieldType[] {
        DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.era()
    };
    try {
        new Partial(types, values);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    types = new DateTimeFieldType[] {
        DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.dayOfYear()
    };
    try {
        new Partial(types, values);
        fail();
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    types = new DateTimeFieldType[] {
        DateTimeFieldType.yearOfEra(), DateTimeFieldType.year(), DateTimeFieldType.dayOfYear()
    };
    try {
        new Partial(types, values);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
}

---
---
public void testConstructorEx7_TypeArray_intArray_catena_9()throws Throwable {
    int[]values = new int[] {
        1, 1, 1
    };
    DateTimeFieldType[]types = new DateTimeFieldType[] {
        DateTimeFieldType.dayOfMonth(), DateTimeFieldType.year(), DateTimeFieldType.monthOfYear()
    };
    try {
        new Partial(types, values);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    types = new DateTimeFieldType[] {
        DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.monthOfYear()
    };
    try {
        new Partial(types, values);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    types = new DateTimeFieldType[] {
        DateTimeFieldType.year(), DateTimeFieldType.era(), DateTimeFieldType.monthOfYear()
    };
    try {
        new Partial(types, values);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    types = new DateTimeFieldType[] {
        DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.era()
    };
    try {
        new Partial(types, values);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    types = new DateTimeFieldType[] {
        DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.dayOfYear()
    };
    try {
        new Partial(types, values);
        
    }
    catch(IllegalArgumentException ex) {
        assertMessageContains(ex, "must be in order", "largest-smallest");
        
    }
    types = new DateTimeFieldType[] {
        DateTimeFieldType.yearOfEra(), DateTimeFieldType.year(), DateTimeFieldType.dayOfYear()
    };
    try {
        new Partial(types, values);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
}

---
---
public void testConstructorEx7_TypeArray_intArray_catena_10()throws Throwable {
    int[]values = new int[] {
        1, 1, 1
    };
    DateTimeFieldType[]types = new DateTimeFieldType[] {
        DateTimeFieldType.dayOfMonth(), DateTimeFieldType.year(), DateTimeFieldType.monthOfYear()
    };
    try {
        new Partial(types, values);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    types = new DateTimeFieldType[] {
        DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.monthOfYear()
    };
    try {
        new Partial(types, values);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    types = new DateTimeFieldType[] {
        DateTimeFieldType.year(), DateTimeFieldType.era(), DateTimeFieldType.monthOfYear()
    };
    try {
        new Partial(types, values);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    types = new DateTimeFieldType[] {
        DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.era()
    };
    try {
        new Partial(types, values);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    types = new DateTimeFieldType[] {
        DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.dayOfYear()
    };
    try {
        new Partial(types, values);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    types = new DateTimeFieldType[] {
        DateTimeFieldType.yearOfEra(), DateTimeFieldType.year(), DateTimeFieldType.dayOfYear()
    };
    try {
        new Partial(types, values);
        fail();
        
    }
    catch(IllegalArgumentException ex) {
        
    }
}

---
---
public void testConstructorEx7_TypeArray_intArray_catena_11()throws Throwable {
    int[]values = new int[] {
        1, 1, 1
    };
    DateTimeFieldType[]types = new DateTimeFieldType[] {
        DateTimeFieldType.dayOfMonth(), DateTimeFieldType.year(), DateTimeFieldType.monthOfYear()
    };
    try {
        new Partial(types, values);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    types = new DateTimeFieldType[] {
        DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.monthOfYear()
    };
    try {
        new Partial(types, values);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    types = new DateTimeFieldType[] {
        DateTimeFieldType.year(), DateTimeFieldType.era(), DateTimeFieldType.monthOfYear()
    };
    try {
        new Partial(types, values);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    types = new DateTimeFieldType[] {
        DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.era()
    };
    try {
        new Partial(types, values);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    types = new DateTimeFieldType[] {
        DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.dayOfYear()
    };
    try {
        new Partial(types, values);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    types = new DateTimeFieldType[] {
        DateTimeFieldType.yearOfEra(), DateTimeFieldType.year(), DateTimeFieldType.dayOfYear()
    };
    try {
        new Partial(types, values);
        
    }
    catch(IllegalArgumentException ex) {
        assertMessageContains(ex, "must be in order", "largest-smallest");
        
    }
}

---
--------------------
Run: Time_22
@@@
Split test: org.joda.time.TestDuration_Basics::testToPeriod_fixedZone
file: /root/workbench/exportInfo/d4j_buggy/Time_22/src/test/java//org/joda/time/TestDuration_Basics.java
Begin: Pos(470, 12)
End: Pos(492, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Time_22/src/test/java//org/joda/time/TestDuration_Basics.java
Name: testToPeriod_fixedZone
Childs: [StatementAssertion<Begin: Pos(481, 13), End: Pos(481, 45)>,
StatementAssertion<Begin: Pos(482, 13), End: Pos(482, 46)>,
StatementAssertion<Begin: Pos(483, 13), End: Pos(483, 45)>,
StatementAssertion<Begin: Pos(484, 13), End: Pos(484, 44)>,
StatementAssertion<Begin: Pos(485, 13), End: Pos(485, 58)>,
StatementAssertion<Begin: Pos(486, 13), End: Pos(486, 47)>,
StatementAssertion<Begin: Pos(487, 13), End: Pos(487, 47)>,
StatementAssertion<Begin: Pos(488, 13), End: Pos(488, 46)>,
]
---
public void testToPeriod_fixedZone_catena_0()throws Throwable {
    DateTimeZone zone = DateTimeZone.getDefault();
    try {
        DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));
        long length = (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;
        Duration dur = new Duration(length);
        Period test = dur.toPeriod();
        assertEquals(0, test.getYears());
        
    }
    finally {
        DateTimeZone.setDefault(zone);
        
    }
}

---
---
public void testToPeriod_fixedZone_catena_1()throws Throwable {
    DateTimeZone zone = DateTimeZone.getDefault();
    try {
        DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));
        long length = (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;
        Duration dur = new Duration(length);
        Period test = dur.toPeriod();
        assertEquals(0, test.getMonths());
        
    }
    finally {
        DateTimeZone.setDefault(zone);
        
    }
}

---
---
public void testToPeriod_fixedZone_catena_2()throws Throwable {
    DateTimeZone zone = DateTimeZone.getDefault();
    try {
        DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));
        long length = (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;
        Duration dur = new Duration(length);
        Period test = dur.toPeriod();
        assertEquals(0, test.getWeeks());
        
    }
    finally {
        DateTimeZone.setDefault(zone);
        
    }
}

---
---
public void testToPeriod_fixedZone_catena_3()throws Throwable {
    DateTimeZone zone = DateTimeZone.getDefault();
    try {
        DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));
        long length = (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;
        Duration dur = new Duration(length);
        Period test = dur.toPeriod();
        assertEquals(0, test.getDays());
        
    }
    finally {
        DateTimeZone.setDefault(zone);
        
    }
}

---
---
public void testToPeriod_fixedZone_catena_4()throws Throwable {
    DateTimeZone zone = DateTimeZone.getDefault();
    try {
        DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));
        long length = (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;
        Duration dur = new Duration(length);
        Period test = dur.toPeriod();
        assertEquals((450 * 24) + 5, test.getHours());
        
    }
    finally {
        DateTimeZone.setDefault(zone);
        
    }
}

---
---
public void testToPeriod_fixedZone_catena_5()throws Throwable {
    DateTimeZone zone = DateTimeZone.getDefault();
    try {
        DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));
        long length = (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;
        Duration dur = new Duration(length);
        Period test = dur.toPeriod();
        assertEquals(6, test.getMinutes());
        
    }
    finally {
        DateTimeZone.setDefault(zone);
        
    }
}

---
---
public void testToPeriod_fixedZone_catena_6()throws Throwable {
    DateTimeZone zone = DateTimeZone.getDefault();
    try {
        DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));
        long length = (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;
        Duration dur = new Duration(length);
        Period test = dur.toPeriod();
        assertEquals(7, test.getSeconds());
        
    }
    finally {
        DateTimeZone.setDefault(zone);
        
    }
}

---
---
public void testToPeriod_fixedZone_catena_7()throws Throwable {
    DateTimeZone zone = DateTimeZone.getDefault();
    try {
        DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));
        long length = (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;
        Duration dur = new Duration(length);
        Period test = dur.toPeriod();
        assertEquals(8, test.getMillis());
        
    }
    finally {
        DateTimeZone.setDefault(zone);
        
    }
}

---
@@@
Split test: org.joda.time.TestPeriod_Constructors::testConstructor_long_fixedZone
file: /root/workbench/exportInfo/d4j_buggy/Time_22/src/test/java//org/joda/time/TestPeriod_Constructors.java
Begin: Pos(174, 12)
End: Pos(197, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Time_22/src/test/java//org/joda/time/TestPeriod_Constructors.java
Name: testConstructor_long_fixedZone
Childs: [StatementAssertion<Begin: Pos(184, 13), End: Pos(184, 70)>,
StatementAssertion<Begin: Pos(186, 13), End: Pos(186, 45)>,
StatementAssertion<Begin: Pos(187, 13), End: Pos(187, 46)>,
StatementAssertion<Begin: Pos(188, 13), End: Pos(188, 45)>,
StatementAssertion<Begin: Pos(189, 13), End: Pos(189, 44)>,
StatementAssertion<Begin: Pos(190, 13), End: Pos(190, 58)>,
StatementAssertion<Begin: Pos(191, 13), End: Pos(191, 47)>,
StatementAssertion<Begin: Pos(192, 13), End: Pos(192, 47)>,
StatementAssertion<Begin: Pos(193, 13), End: Pos(193, 46)>,
]
---
public void testConstructor_long_fixedZone_catena_0()throws Throwable {
    DateTimeZone zone = DateTimeZone.getDefault();
    try {
        DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));
        long length = (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;
        Period test = new Period(length);
        assertEquals(PeriodType.standard(), test.getPeriodType());
        
    }
    finally {
        DateTimeZone.setDefault(zone);
        
    }
}

---
---
public void testConstructor_long_fixedZone_catena_1()throws Throwable {
    DateTimeZone zone = DateTimeZone.getDefault();
    try {
        DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));
        long length = (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;
        Period test = new Period(length);
        assertEquals(0, test.getYears());
        
    }
    finally {
        DateTimeZone.setDefault(zone);
        
    }
}

---
---
public void testConstructor_long_fixedZone_catena_2()throws Throwable {
    DateTimeZone zone = DateTimeZone.getDefault();
    try {
        DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));
        long length = (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;
        Period test = new Period(length);
        assertEquals(0, test.getMonths());
        
    }
    finally {
        DateTimeZone.setDefault(zone);
        
    }
}

---
---
public void testConstructor_long_fixedZone_catena_3()throws Throwable {
    DateTimeZone zone = DateTimeZone.getDefault();
    try {
        DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));
        long length = (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;
        Period test = new Period(length);
        assertEquals(0, test.getWeeks());
        
    }
    finally {
        DateTimeZone.setDefault(zone);
        
    }
}

---
---
public void testConstructor_long_fixedZone_catena_4()throws Throwable {
    DateTimeZone zone = DateTimeZone.getDefault();
    try {
        DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));
        long length = (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;
        Period test = new Period(length);
        assertEquals(0, test.getDays());
        
    }
    finally {
        DateTimeZone.setDefault(zone);
        
    }
}

---
---
public void testConstructor_long_fixedZone_catena_5()throws Throwable {
    DateTimeZone zone = DateTimeZone.getDefault();
    try {
        DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));
        long length = (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;
        Period test = new Period(length);
        assertEquals((450 * 24) + 5, test.getHours());
        
    }
    finally {
        DateTimeZone.setDefault(zone);
        
    }
}

---
---
public void testConstructor_long_fixedZone_catena_6()throws Throwable {
    DateTimeZone zone = DateTimeZone.getDefault();
    try {
        DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));
        long length = (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;
        Period test = new Period(length);
        assertEquals(6, test.getMinutes());
        
    }
    finally {
        DateTimeZone.setDefault(zone);
        
    }
}

---
---
public void testConstructor_long_fixedZone_catena_7()throws Throwable {
    DateTimeZone zone = DateTimeZone.getDefault();
    try {
        DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));
        long length = (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;
        Period test = new Period(length);
        assertEquals(7, test.getSeconds());
        
    }
    finally {
        DateTimeZone.setDefault(zone);
        
    }
}

---
---
public void testConstructor_long_fixedZone_catena_8()throws Throwable {
    DateTimeZone zone = DateTimeZone.getDefault();
    try {
        DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));
        long length = (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY + 5L * DateTimeConstants.MILLIS_PER_HOUR + 6L * DateTimeConstants.MILLIS_PER_MINUTE + 7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;
        Period test = new Period(length);
        assertEquals(8, test.getMillis());
        
    }
    finally {
        DateTimeZone.setDefault(zone);
        
    }
}

---
--------------------
Run: Time_17
@@@
Split test: org.joda.time.TestDateTimeZoneCutover::testBug3476684_adjustOffset
file: /root/workbench/exportInfo/d4j_buggy/Time_17/src/test/java//org/joda/time/TestDateTimeZoneCutover.java
Begin: Pos(1249, 12)
End: Pos(1263, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Time_17/src/test/java//org/joda/time/TestDateTimeZoneCutover.java
Name: testBug3476684_adjustOffset
Childs: [StatementAssertion<Begin: Pos(1255, 9), End: Pos(1255, 60)>,
StatementAssertion<Begin: Pos(1256, 9), End: Pos(1256, 58)>,
StatementAssertion<Begin: Pos(1258, 9), End: Pos(1258, 72)>,
StatementAssertion<Begin: Pos(1259, 9), End: Pos(1259, 71)>,
StatementAssertion<Begin: Pos(1261, 9), End: Pos(1261, 68)>,
StatementAssertion<Begin: Pos(1262, 9), End: Pos(1262, 73)>,
]
---
public void testBug3476684_adjustOffset_catena_0() {
    final DateTimeZone zone = DateTimeZone.forID("America/Sao_Paulo");
    DateTime base = new DateTime(2012, 2, 25, 22, 15, zone);
    DateTime baseBefore = base.plusHours(1);
    DateTime baseAfter = base.plusHours(2);
    assertSame(base, base.withEarlierOffsetAtOverlap());
    
}

---
---
public void testBug3476684_adjustOffset_catena_1() {
    final DateTimeZone zone = DateTimeZone.forID("America/Sao_Paulo");
    DateTime base = new DateTime(2012, 2, 25, 22, 15, zone);
    DateTime baseBefore = base.plusHours(1);
    DateTime baseAfter = base.plusHours(2);
    assertSame(base, base.withLaterOffsetAtOverlap());
    
}

---
---
public void testBug3476684_adjustOffset_catena_2() {
    final DateTimeZone zone = DateTimeZone.forID("America/Sao_Paulo");
    DateTime base = new DateTime(2012, 2, 25, 22, 15, zone);
    DateTime baseBefore = base.plusHours(1);
    DateTime baseAfter = base.plusHours(2);
    assertSame(baseBefore, baseBefore.withEarlierOffsetAtOverlap());
    
}

---
---
public void testBug3476684_adjustOffset_catena_3() {
    final DateTimeZone zone = DateTimeZone.forID("America/Sao_Paulo");
    DateTime base = new DateTime(2012, 2, 25, 22, 15, zone);
    DateTime baseBefore = base.plusHours(1);
    DateTime baseAfter = base.plusHours(2);
    assertEquals(baseAfter, baseBefore.withLaterOffsetAtOverlap());
    
}

---
---
public void testBug3476684_adjustOffset_catena_4() {
    final DateTimeZone zone = DateTimeZone.forID("America/Sao_Paulo");
    DateTime base = new DateTime(2012, 2, 25, 22, 15, zone);
    DateTime baseBefore = base.plusHours(1);
    DateTime baseAfter = base.plusHours(2);
    assertSame(baseAfter, baseAfter.withLaterOffsetAtOverlap());
    
}

---
---
public void testBug3476684_adjustOffset_catena_5() {
    final DateTimeZone zone = DateTimeZone.forID("America/Sao_Paulo");
    DateTime base = new DateTime(2012, 2, 25, 22, 15, zone);
    DateTime baseBefore = base.plusHours(1);
    DateTime baseAfter = base.plusHours(2);
    assertEquals(baseBefore, baseAfter.withEarlierOffsetAtOverlap());
    
}

---
--------------------
Run: Time_12
@@@
Split test: org.joda.time.TestLocalDateTime_Constructors::testFactory_fromDateFields_beforeYearZero1
file: /root/workbench/exportInfo/d4j_buggy/Time_12/src/test/java//org/joda/time/TestLocalDateTime_Constructors.java
Begin: Pos(150, 12)
End: Pos(156, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Time_12/src/test/java//org/joda/time/TestLocalDateTime_Constructors.java
Name: testFactory_fromDateFields_beforeYearZero1
Childs: [StatementAssertion<Begin: Pos(155, 9), End: Pos(155, 76)>,
]
@@@
Split test: org.joda.time.TestLocalDateTime_Constructors::testFactory_fromDateFields_beforeYearZero3
file: /root/workbench/exportInfo/d4j_buggy/Time_12/src/test/java//org/joda/time/TestLocalDateTime_Constructors.java
Begin: Pos(158, 12)
End: Pos(164, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Time_12/src/test/java//org/joda/time/TestLocalDateTime_Constructors.java
Name: testFactory_fromDateFields_beforeYearZero3
Childs: [StatementAssertion<Begin: Pos(163, 9), End: Pos(163, 76)>,
]
@@@
Split test: org.joda.time.TestLocalDateTime_Constructors::testFactory_fromCalendarFields_beforeYearZero1
file: /root/workbench/exportInfo/d4j_buggy/Time_12/src/test/java//org/joda/time/TestLocalDateTime_Constructors.java
Begin: Pos(112, 12)
End: Pos(118, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Time_12/src/test/java//org/joda/time/TestLocalDateTime_Constructors.java
Name: testFactory_fromCalendarFields_beforeYearZero1
Childs: [StatementAssertion<Begin: Pos(117, 9), End: Pos(117, 70)>,
]
@@@
Split test: org.joda.time.TestLocalDateTime_Constructors::testFactory_fromCalendarFields_beforeYearZero3
file: /root/workbench/exportInfo/d4j_buggy/Time_12/src/test/java//org/joda/time/TestLocalDateTime_Constructors.java
Begin: Pos(120, 12)
End: Pos(126, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Time_12/src/test/java//org/joda/time/TestLocalDateTime_Constructors.java
Name: testFactory_fromCalendarFields_beforeYearZero3
Childs: [StatementAssertion<Begin: Pos(125, 9), End: Pos(125, 70)>,
]
@@@
Split test: org.joda.time.TestLocalDate_Constructors::testFactory_fromDateFields_beforeYearZero1
file: /root/workbench/exportInfo/d4j_buggy/Time_12/src/test/java//org/joda/time/TestLocalDate_Constructors.java
Begin: Pos(142, 12)
End: Pos(148, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Time_12/src/test/java//org/joda/time/TestLocalDate_Constructors.java
Name: testFactory_fromDateFields_beforeYearZero1
Childs: [StatementAssertion<Begin: Pos(147, 9), End: Pos(147, 72)>,
]
@@@
Split test: org.joda.time.TestLocalDate_Constructors::testFactory_fromDateFields_beforeYearZero3
file: /root/workbench/exportInfo/d4j_buggy/Time_12/src/test/java//org/joda/time/TestLocalDate_Constructors.java
Begin: Pos(150, 12)
End: Pos(156, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Time_12/src/test/java//org/joda/time/TestLocalDate_Constructors.java
Name: testFactory_fromDateFields_beforeYearZero3
Childs: [StatementAssertion<Begin: Pos(155, 9), End: Pos(155, 72)>,
]
@@@
Split test: org.joda.time.TestLocalDate_Constructors::testFactory_fromCalendarFields_beforeYearZero1
file: /root/workbench/exportInfo/d4j_buggy/Time_12/src/test/java//org/joda/time/TestLocalDate_Constructors.java
Begin: Pos(104, 12)
End: Pos(110, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Time_12/src/test/java//org/joda/time/TestLocalDate_Constructors.java
Name: testFactory_fromCalendarFields_beforeYearZero1
Childs: [StatementAssertion<Begin: Pos(109, 9), End: Pos(109, 66)>,
]
@@@
Split test: org.joda.time.TestLocalDate_Constructors::testFactory_fromCalendarFields_beforeYearZero3
file: /root/workbench/exportInfo/d4j_buggy/Time_12/src/test/java//org/joda/time/TestLocalDate_Constructors.java
Begin: Pos(112, 12)
End: Pos(118, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Time_12/src/test/java//org/joda/time/TestLocalDate_Constructors.java
Name: testFactory_fromCalendarFields_beforeYearZero3
Childs: [StatementAssertion<Begin: Pos(117, 9), End: Pos(117, 66)>,
]
--------------------
Run: Time_3
@@@
Split test: org.joda.time.TestMutableDateTime_Adds::testAddYears_int_dstOverlapWinter_addZero
file: /root/workbench/exportInfo/d4j_buggy/Time_3/src/test/java//org/joda/time/TestMutableDateTime_Adds.java
Begin: Pos(222, 12)
End: Pos(228, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Time_3/src/test/java//org/joda/time/TestMutableDateTime_Adds.java
Name: testAddYears_int_dstOverlapWinter_addZero
Childs: [StatementAssertion<Begin: Pos(225, 9), End: Pos(225, 71)>,
StatementAssertion<Begin: Pos(227, 9), End: Pos(227, 71)>,
]
---
public void testAddYears_int_dstOverlapWinter_addZero_catena_0() {
    MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin"));
    test.addHours(1);
    assertEquals("2011-10-30T02:30:00.000+01:00", test.toString());
    test.addYears(0);
    
}

---
---
public void testAddYears_int_dstOverlapWinter_addZero_catena_1() {
    MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin"));
    test.addHours(1);
    test.addYears(0);
    assertEquals("2011-10-30T02:30:00.000+01:00", test.toString());
    
}

---
@@@
Split test: org.joda.time.TestMutableDateTime_Adds::testAddDays_int_dstOverlapWinter_addZero
file: /root/workbench/exportInfo/d4j_buggy/Time_3/src/test/java//org/joda/time/TestMutableDateTime_Adds.java
Begin: Pos(266, 12)
End: Pos(272, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Time_3/src/test/java//org/joda/time/TestMutableDateTime_Adds.java
Name: testAddDays_int_dstOverlapWinter_addZero
Childs: [StatementAssertion<Begin: Pos(269, 9), End: Pos(269, 71)>,
StatementAssertion<Begin: Pos(271, 9), End: Pos(271, 71)>,
]
---
public void testAddDays_int_dstOverlapWinter_addZero_catena_0() {
    MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin"));
    test.addHours(1);
    assertEquals("2011-10-30T02:30:00.000+01:00", test.toString());
    test.addDays(0);
    
}

---
---
public void testAddDays_int_dstOverlapWinter_addZero_catena_1() {
    MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin"));
    test.addHours(1);
    test.addDays(0);
    assertEquals("2011-10-30T02:30:00.000+01:00", test.toString());
    
}

---
@@@
Split test: org.joda.time.TestMutableDateTime_Adds::testAddWeeks_int_dstOverlapWinter_addZero
file: /root/workbench/exportInfo/d4j_buggy/Time_3/src/test/java//org/joda/time/TestMutableDateTime_Adds.java
Begin: Pos(295, 12)
End: Pos(301, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Time_3/src/test/java//org/joda/time/TestMutableDateTime_Adds.java
Name: testAddWeeks_int_dstOverlapWinter_addZero
Childs: [StatementAssertion<Begin: Pos(298, 9), End: Pos(298, 71)>,
StatementAssertion<Begin: Pos(300, 9), End: Pos(300, 71)>,
]
---
public void testAddWeeks_int_dstOverlapWinter_addZero_catena_0() {
    MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin"));
    test.addHours(1);
    assertEquals("2011-10-30T02:30:00.000+01:00", test.toString());
    test.addWeeks(0);
    
}

---
---
public void testAddWeeks_int_dstOverlapWinter_addZero_catena_1() {
    MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin"));
    test.addHours(1);
    test.addWeeks(0);
    assertEquals("2011-10-30T02:30:00.000+01:00", test.toString());
    
}

---
@@@
Split test: org.joda.time.TestMutableDateTime_Adds::testAdd_DurationFieldType_int_dstOverlapWinter_addZero
file: /root/workbench/exportInfo/d4j_buggy/Time_3/src/test/java//org/joda/time/TestMutableDateTime_Adds.java
Begin: Pos(182, 12)
End: Pos(188, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Time_3/src/test/java//org/joda/time/TestMutableDateTime_Adds.java
Name: testAdd_DurationFieldType_int_dstOverlapWinter_addZero
Childs: [StatementAssertion<Begin: Pos(185, 9), End: Pos(185, 71)>,
StatementAssertion<Begin: Pos(187, 9), End: Pos(187, 71)>,
]
---
public void testAdd_DurationFieldType_int_dstOverlapWinter_addZero_catena_0() {
    MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin"));
    test.addHours(1);
    assertEquals("2011-10-30T02:30:00.000+01:00", test.toString());
    test.add(DurationFieldType.years(), 0);
    
}

---
---
public void testAdd_DurationFieldType_int_dstOverlapWinter_addZero_catena_1() {
    MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin"));
    test.addHours(1);
    test.add(DurationFieldType.years(), 0);
    assertEquals("2011-10-30T02:30:00.000+01:00", test.toString());
    
}

---
@@@
Split test: org.joda.time.TestMutableDateTime_Adds::testAddMonths_int_dstOverlapWinter_addZero
file: /root/workbench/exportInfo/d4j_buggy/Time_3/src/test/java//org/joda/time/TestMutableDateTime_Adds.java
Begin: Pos(244, 12)
End: Pos(250, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Time_3/src/test/java//org/joda/time/TestMutableDateTime_Adds.java
Name: testAddMonths_int_dstOverlapWinter_addZero
Childs: [StatementAssertion<Begin: Pos(247, 9), End: Pos(247, 71)>,
StatementAssertion<Begin: Pos(249, 9), End: Pos(249, 71)>,
]
---
public void testAddMonths_int_dstOverlapWinter_addZero_catena_0() {
    MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin"));
    test.addHours(1);
    assertEquals("2011-10-30T02:30:00.000+01:00", test.toString());
    test.addMonths(0);
    
}

---
---
public void testAddMonths_int_dstOverlapWinter_addZero_catena_1() {
    MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID("Europe/Berlin"));
    test.addHours(1);
    test.addMonths(0);
    assertEquals("2011-10-30T02:30:00.000+01:00", test.toString());
    
}

---
--------------------
Run: Time_27
@@@
Split test: org.joda.time.format.TestPeriodFormatterBuilder::testBug2495455
file: /root/workbench/exportInfo/d4j_buggy/Time_27/src/test/java//org/joda/time/format/TestPeriodFormatterBuilder.java
Begin: Pos(846, 12)
End: Pos(870, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Time_27/src/test/java//org/joda/time/format/TestPeriodFormatterBuilder.java
Name: testBug2495455
Childs: []
--------------------
Run: Time_21
--------------------
Run: Time_14
@@@
Split test: org.joda.time.TestMonthDay_Basics::testPlusMonths_int_negativeFromLeap
file: /root/workbench/exportInfo/d4j_buggy/Time_14/src/test/java//org/joda/time/TestMonthDay_Basics.java
Begin: Pos(458, 12)
End: Pos(463, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Time_14/src/test/java//org/joda/time/TestMonthDay_Basics.java
Name: testPlusMonths_int_negativeFromLeap
Childs: [StatementAssertion<Begin: Pos(462, 9), End: Pos(462, 39)>,
]
@@@
Split test: org.joda.time.TestMonthDay_Basics::testMinusDays_int_negativeFromLeap
file: /root/workbench/exportInfo/d4j_buggy/Time_14/src/test/java//org/joda/time/TestMonthDay_Basics.java
Begin: Pos(608, 12)
End: Pos(613, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Time_14/src/test/java//org/joda/time/TestMonthDay_Basics.java
Name: testMinusDays_int_negativeFromLeap
Childs: [StatementAssertion<Begin: Pos(612, 9), End: Pos(612, 39)>,
]
@@@
Split test: org.joda.time.TestMonthDay_Basics::testPlusMonths_int_fromLeap
file: /root/workbench/exportInfo/d4j_buggy/Time_14/src/test/java//org/joda/time/TestMonthDay_Basics.java
Begin: Pos(451, 12)
End: Pos(456, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Time_14/src/test/java//org/joda/time/TestMonthDay_Basics.java
Name: testPlusMonths_int_fromLeap
Childs: [StatementAssertion<Begin: Pos(455, 9), End: Pos(455, 39)>,
]
@@@
Split test: org.joda.time.TestMonthDay_Basics::testPlusMonths_int_negativeEndOfMonthAdjust
file: /root/workbench/exportInfo/d4j_buggy/Time_14/src/test/java//org/joda/time/TestMonthDay_Basics.java
Begin: Pos(472, 12)
End: Pos(477, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Time_14/src/test/java//org/joda/time/TestMonthDay_Basics.java
Name: testPlusMonths_int_negativeEndOfMonthAdjust
Childs: [StatementAssertion<Begin: Pos(476, 9), End: Pos(476, 39)>,
]
@@@
Split test: org.joda.time.TestMonthDay_Basics::testMinusMonths_int_endOfMonthAdjust
file: /root/workbench/exportInfo/d4j_buggy/Time_14/src/test/java//org/joda/time/TestMonthDay_Basics.java
Begin: Pos(559, 12)
End: Pos(564, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Time_14/src/test/java//org/joda/time/TestMonthDay_Basics.java
Name: testMinusMonths_int_endOfMonthAdjust
Childs: [StatementAssertion<Begin: Pos(563, 9), End: Pos(563, 39)>,
]
@@@
Split test: org.joda.time.TestMonthDay_Basics::testMinusMonths_int_negativeFromLeap
file: /root/workbench/exportInfo/d4j_buggy/Time_14/src/test/java//org/joda/time/TestMonthDay_Basics.java
Begin: Pos(552, 12)
End: Pos(557, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Time_14/src/test/java//org/joda/time/TestMonthDay_Basics.java
Name: testMinusMonths_int_negativeFromLeap
Childs: [StatementAssertion<Begin: Pos(556, 9), End: Pos(556, 39)>,
]
@@@
Split test: org.joda.time.TestMonthDay_Basics::testMinusMonths_int_fromLeap
file: /root/workbench/exportInfo/d4j_buggy/Time_14/src/test/java//org/joda/time/TestMonthDay_Basics.java
Begin: Pos(545, 12)
End: Pos(550, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Time_14/src/test/java//org/joda/time/TestMonthDay_Basics.java
Name: testMinusMonths_int_fromLeap
Childs: [StatementAssertion<Begin: Pos(549, 9), End: Pos(549, 39)>,
]
@@@
Split test: org.joda.time.TestMonthDay_Basics::testPlusDays_int_fromLeap
file: /root/workbench/exportInfo/d4j_buggy/Time_14/src/test/java//org/joda/time/TestMonthDay_Basics.java
Begin: Pos(507, 12)
End: Pos(512, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Time_14/src/test/java//org/joda/time/TestMonthDay_Basics.java
Name: testPlusDays_int_fromLeap
Childs: [StatementAssertion<Begin: Pos(511, 9), End: Pos(511, 39)>,
]
--------------------
Run: Time_8
@@@
Split test: org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int
file: /root/workbench/exportInfo/d4j_buggy/Time_8/src/test/java//org/joda/time/TestDateTimeZone.java
Begin: Pos(303, 12)
End: Pos(339, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Time_8/src/test/java//org/joda/time/TestDateTimeZone.java
Name: testForOffsetHoursMinutes_int_int
Childs: [StatementAssertion<Begin: Pos(304, 9), End: Pos(304, 81)>,
StatementAssertion<Begin: Pos(305, 9), End: Pos(305, 95)>,
StatementAssertion<Begin: Pos(307, 9), End: Pos(307, 94)>,
StatementAssertion<Begin: Pos(308, 9), End: Pos(308, 93)>,
StatementAssertion<Begin: Pos(311, 13), End: Pos(311, 19)>,
StatementAssertion<Begin: Pos(314, 9), End: Pos(314, 94)>,
StatementAssertion<Begin: Pos(315, 9), End: Pos(315, 93)>,
StatementAssertion<Begin: Pos(316, 9), End: Pos(316, 95)>,
StatementAssertion<Begin: Pos(318, 9), End: Pos(318, 94)>,
StatementAssertion<Begin: Pos(319, 9), End: Pos(319, 96)>,
StatementAssertion<Begin: Pos(320, 9), End: Pos(320, 95)>,
StatementAssertion<Begin: Pos(322, 9), End: Pos(322, 96)>,
StatementAssertion<Begin: Pos(325, 13), End: Pos(325, 19)>,
StatementAssertion<Begin: Pos(329, 13), End: Pos(329, 19)>,
StatementAssertion<Begin: Pos(333, 13), End: Pos(333, 19)>,
StatementAssertion<Begin: Pos(337, 13), End: Pos(337, 19)>,
]
---
public void testForOffsetHoursMinutes_int_int_catena_0() {
    assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));
    try {
        DateTimeZone.forOffsetHoursMinutes(2,  - 15);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes(2, 60);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes( - 2, 60);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes(24, 0);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes( - 24, 0);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
}

---
---
public void testForOffsetHoursMinutes_int_int_catena_1() {
    assertEquals(DateTimeZone.forID("+23:59"), DateTimeZone.forOffsetHoursMinutes(23, 59));
    try {
        DateTimeZone.forOffsetHoursMinutes(2,  - 15);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes(2, 60);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes( - 2, 60);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes(24, 0);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes( - 24, 0);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
}

---
---
public void testForOffsetHoursMinutes_int_int_catena_2() {
    assertEquals(DateTimeZone.forID("+02:15"), DateTimeZone.forOffsetHoursMinutes(2, 15));
    try {
        DateTimeZone.forOffsetHoursMinutes(2,  - 15);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes(2, 60);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes( - 2, 60);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes(24, 0);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes( - 24, 0);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
}

---
---
public void testForOffsetHoursMinutes_int_int_catena_3() {
    assertEquals(DateTimeZone.forID("+02:00"), DateTimeZone.forOffsetHoursMinutes(2, 0));
    try {
        DateTimeZone.forOffsetHoursMinutes(2,  - 15);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes(2, 60);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes( - 2, 60);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes(24, 0);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes( - 24, 0);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
}

---
---
public void testForOffsetHoursMinutes_int_int_catena_4() {
    try {
        DateTimeZone.forOffsetHoursMinutes(2,  - 15);
        fail();
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes(2, 60);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes( - 2, 60);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes(24, 0);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes( - 24, 0);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
}

---
---
public void testForOffsetHoursMinutes_int_int_catena_5() {
    try {
        DateTimeZone.forOffsetHoursMinutes(2,  - 15);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    assertEquals(DateTimeZone.forID("+00:15"), DateTimeZone.forOffsetHoursMinutes(0, 15));
    try {
        DateTimeZone.forOffsetHoursMinutes(2, 60);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes( - 2, 60);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes(24, 0);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes( - 24, 0);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
}

---
---
public void testForOffsetHoursMinutes_int_int_catena_6() {
    try {
        DateTimeZone.forOffsetHoursMinutes(2,  - 15);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    assertEquals(DateTimeZone.forID("+00:00"), DateTimeZone.forOffsetHoursMinutes(0, 0));
    try {
        DateTimeZone.forOffsetHoursMinutes(2, 60);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes( - 2, 60);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes(24, 0);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes( - 24, 0);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
}

---
---
public void testForOffsetHoursMinutes_int_int_catena_7() {
    try {
        DateTimeZone.forOffsetHoursMinutes(2,  - 15);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    assertEquals(DateTimeZone.forID("-00:15"), DateTimeZone.forOffsetHoursMinutes(0,  - 15));
    try {
        DateTimeZone.forOffsetHoursMinutes(2, 60);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes( - 2, 60);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes(24, 0);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes( - 24, 0);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
}

---
---
public void testForOffsetHoursMinutes_int_int_catena_8() {
    try {
        DateTimeZone.forOffsetHoursMinutes(2,  - 15);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    assertEquals(DateTimeZone.forID("-02:00"), DateTimeZone.forOffsetHoursMinutes( - 2, 0));
    try {
        DateTimeZone.forOffsetHoursMinutes(2, 60);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes( - 2, 60);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes(24, 0);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes( - 24, 0);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
}

---
---
public void testForOffsetHoursMinutes_int_int_catena_9() {
    try {
        DateTimeZone.forOffsetHoursMinutes(2,  - 15);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    assertEquals(DateTimeZone.forID("-02:15"), DateTimeZone.forOffsetHoursMinutes( - 2,  - 15));
    try {
        DateTimeZone.forOffsetHoursMinutes(2, 60);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes( - 2, 60);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes(24, 0);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes( - 24, 0);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
}

---
---
public void testForOffsetHoursMinutes_int_int_catena_10() {
    try {
        DateTimeZone.forOffsetHoursMinutes(2,  - 15);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    assertEquals(DateTimeZone.forID("-02:15"), DateTimeZone.forOffsetHoursMinutes( - 2, 15));
    try {
        DateTimeZone.forOffsetHoursMinutes(2, 60);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes( - 2, 60);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes(24, 0);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes( - 24, 0);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
}

---
---
public void testForOffsetHoursMinutes_int_int_catena_11() {
    try {
        DateTimeZone.forOffsetHoursMinutes(2,  - 15);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    assertEquals(DateTimeZone.forID("-23:59"), DateTimeZone.forOffsetHoursMinutes( - 23, 59));
    try {
        DateTimeZone.forOffsetHoursMinutes(2, 60);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes( - 2, 60);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes(24, 0);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes( - 24, 0);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
}

---
---
public void testForOffsetHoursMinutes_int_int_catena_12() {
    try {
        DateTimeZone.forOffsetHoursMinutes(2,  - 15);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes(2, 60);
        fail();
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes( - 2, 60);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes(24, 0);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes( - 24, 0);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
}

---
---
public void testForOffsetHoursMinutes_int_int_catena_13() {
    try {
        DateTimeZone.forOffsetHoursMinutes(2,  - 15);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes(2, 60);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes( - 2, 60);
        fail();
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes(24, 0);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes( - 24, 0);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
}

---
---
public void testForOffsetHoursMinutes_int_int_catena_14() {
    try {
        DateTimeZone.forOffsetHoursMinutes(2,  - 15);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes(2, 60);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes( - 2, 60);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes(24, 0);
        fail();
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes( - 24, 0);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
}

---
---
public void testForOffsetHoursMinutes_int_int_catena_15() {
    try {
        DateTimeZone.forOffsetHoursMinutes(2,  - 15);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes(2, 60);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes( - 2, 60);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes(24, 0);
        
    }
    catch(IllegalArgumentException ex) {
        
    }
    try {
        DateTimeZone.forOffsetHoursMinutes( - 24, 0);
        fail();
        
    }
    catch(IllegalArgumentException ex) {
        
    }
}

---
--------------------
Run: Time_13
@@@
Split test: org.joda.time.format.TestISOPeriodFormat::testFormatStandard_negative
file: /root/workbench/exportInfo/d4j_buggy/Time_13/src/test/java//org/joda/time/format/TestISOPeriodFormat.java
Begin: Pos(118, 12)
End: Pos(136, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Time_13/src/test/java//org/joda/time/format/TestISOPeriodFormat.java
Name: testFormatStandard_negative
Childs: [StatementAssertion<Begin: Pos(120, 9), End: Pos(120, 89)>,
StatementAssertion<Begin: Pos(123, 9), End: Pos(123, 67)>,
StatementAssertion<Begin: Pos(126, 9), End: Pos(126, 70)>,
StatementAssertion<Begin: Pos(129, 9), End: Pos(129, 71)>,
StatementAssertion<Begin: Pos(132, 9), End: Pos(132, 68)>,
StatementAssertion<Begin: Pos(135, 9), End: Pos(135, 71)>,
]
---
public void testFormatStandard_negative_catena_0() {
    Period p = new Period( - 1,  - 2,  - 3,  - 4,  - 5,  - 6,  - 7,  - 8);
    assertEquals("P-1Y-2M-3W-4DT-5H-6M-7.008S", ISOPeriodFormat.standard().print(p));
    p = Period.years( - 54);
    p = Period.seconds(4).withMillis( - 8);
    p = Period.seconds( - 4).withMillis(8);
    p = Period.seconds( - 23);
    p = Period.millis( - 8);
    
}

---
---
public void testFormatStandard_negative_catena_1() {
    Period p = new Period( - 1,  - 2,  - 3,  - 4,  - 5,  - 6,  - 7,  - 8);
    p = Period.years( - 54);
    assertEquals("P-54Y", ISOPeriodFormat.standard().print(p));
    p = Period.seconds(4).withMillis( - 8);
    p = Period.seconds( - 4).withMillis(8);
    p = Period.seconds( - 23);
    p = Period.millis( - 8);
    
}

---
---
public void testFormatStandard_negative_catena_2() {
    Period p = new Period( - 1,  - 2,  - 3,  - 4,  - 5,  - 6,  - 7,  - 8);
    p = Period.years( - 54);
    p = Period.seconds(4).withMillis( - 8);
    assertEquals("PT3.992S", ISOPeriodFormat.standard().print(p));
    p = Period.seconds( - 4).withMillis(8);
    p = Period.seconds( - 23);
    p = Period.millis( - 8);
    
}

---
---
public void testFormatStandard_negative_catena_3() {
    Period p = new Period( - 1,  - 2,  - 3,  - 4,  - 5,  - 6,  - 7,  - 8);
    p = Period.years( - 54);
    p = Period.seconds(4).withMillis( - 8);
    p = Period.seconds( - 4).withMillis(8);
    assertEquals("PT-3.992S", ISOPeriodFormat.standard().print(p));
    p = Period.seconds( - 23);
    p = Period.millis( - 8);
    
}

---
---
public void testFormatStandard_negative_catena_4() {
    Period p = new Period( - 1,  - 2,  - 3,  - 4,  - 5,  - 6,  - 7,  - 8);
    p = Period.years( - 54);
    p = Period.seconds(4).withMillis( - 8);
    p = Period.seconds( - 4).withMillis(8);
    p = Period.seconds( - 23);
    assertEquals("PT-23S", ISOPeriodFormat.standard().print(p));
    p = Period.millis( - 8);
    
}

---
---
public void testFormatStandard_negative_catena_5() {
    Period p = new Period( - 1,  - 2,  - 3,  - 4,  - 5,  - 6,  - 7,  - 8);
    p = Period.years( - 54);
    p = Period.seconds(4).withMillis( - 8);
    p = Period.seconds( - 4).withMillis(8);
    p = Period.seconds( - 23);
    p = Period.millis( - 8);
    assertEquals("PT-0.008S", ISOPeriodFormat.standard().print(p));
    
}

---
--------------------
Run: Time_18
@@@
Split test: org.joda.time.chrono.TestGJChronology::testLeapYearRulesConstruction
file: /root/workbench/exportInfo/d4j_buggy/Time_18/src/test/java//org/joda/time/chrono/TestGJChronology.java
Begin: Pos(494, 12)
End: Pos(500, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Time_18/src/test/java//org/joda/time/chrono/TestGJChronology.java
Name: testLeapYearRulesConstruction
Childs: [StatementAssertion<Begin: Pos(497, 9), End: Pos(497, 41)>,
StatementAssertion<Begin: Pos(498, 9), End: Pos(498, 45)>,
StatementAssertion<Begin: Pos(499, 9), End: Pos(499, 45)>,
]
---
public void testLeapYearRulesConstruction_catena_0() {
    DateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC());
    assertEquals(dt.getYear(), 1500);
    
}

---
---
public void testLeapYearRulesConstruction_catena_1() {
    DateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC());
    assertEquals(dt.getMonthOfYear(), 2);
    
}

---
---
public void testLeapYearRulesConstruction_catena_2() {
    DateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC());
    assertEquals(dt.getDayOfMonth(), 29);
    
}

---
--------------------
Run: Time_26
@@@
Split test: org.joda.time.TestDateTimeZoneCutover::testWithSecondOfMinuteInDstChange
file: /root/workbench/exportInfo/d4j_buggy/Time_26/src/test/java//org/joda/time/TestDateTimeZoneCutover.java
Begin: Pos(1097, 12)
End: Pos(1102, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Time_26/src/test/java//org/joda/time/TestDateTimeZoneCutover.java
Name: testWithSecondOfMinuteInDstChange
Childs: [StatementAssertion<Begin: Pos(1099, 9), End: Pos(1099, 75)>,
StatementAssertion<Begin: Pos(1101, 9), End: Pos(1101, 71)>,
]
---
public void testWithSecondOfMinuteInDstChange_catena_0() {
    DateTime dateTime = new DateTime("2010-10-31T02:30:10.123+02:00", ZONE_PARIS);
    assertEquals("2010-10-31T02:30:10.123+02:00", dateTime.toString());
    DateTime test = dateTime.withSecondOfMinute(0);
    
}

---
---
public void testWithSecondOfMinuteInDstChange_catena_1() {
    DateTime dateTime = new DateTime("2010-10-31T02:30:10.123+02:00", ZONE_PARIS);
    DateTime test = dateTime.withSecondOfMinute(0);
    assertEquals("2010-10-31T02:30:00.123+02:00", test.toString());
    
}

---
@@@
Split test: org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange
file: /root/workbench/exportInfo/d4j_buggy/Time_26/src/test/java//org/joda/time/TestDateTimeZoneCutover.java
Begin: Pos(1090, 12)
End: Pos(1095, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Time_26/src/test/java//org/joda/time/TestDateTimeZoneCutover.java
Name: testWithMinuteOfHourInDstChange
Childs: [StatementAssertion<Begin: Pos(1092, 9), End: Pos(1092, 75)>,
StatementAssertion<Begin: Pos(1094, 9), End: Pos(1094, 71)>,
]
---
public void testWithMinuteOfHourInDstChange_catena_0() {
    DateTime dateTime = new DateTime("2010-10-31T02:30:10.123+02:00", ZONE_PARIS);
    assertEquals("2010-10-31T02:30:10.123+02:00", dateTime.toString());
    DateTime test = dateTime.withMinuteOfHour(0);
    
}

---
---
public void testWithMinuteOfHourInDstChange_catena_1() {
    DateTime dateTime = new DateTime("2010-10-31T02:30:10.123+02:00", ZONE_PARIS);
    DateTime test = dateTime.withMinuteOfHour(0);
    assertEquals("2010-10-31T02:00:10.123+02:00", test.toString());
    
}

---
@@@
Split test: org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange_mockZone
file: /root/workbench/exportInfo/d4j_buggy/Time_26/src/test/java//org/joda/time/TestDateTimeZoneCutover.java
Begin: Pos(1063, 12)
End: Pos(1081, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Time_26/src/test/java//org/joda/time/TestDateTimeZoneCutover.java
Name: testWithMinuteOfHourInDstChange_mockZone
Childs: [StatementAssertion<Begin: Pos(1065, 9), End: Pos(1065, 74)>,
StatementAssertion<Begin: Pos(1068, 9), End: Pos(1068, 70)>,
StatementAssertion<Begin: Pos(1070, 9), End: Pos(1070, 71)>,
StatementAssertion<Begin: Pos(1073, 9), End: Pos(1073, 75)>,
StatementAssertion<Begin: Pos(1075, 9), End: Pos(1075, 75)>,
StatementAssertion<Begin: Pos(1078, 9), End: Pos(1078, 76)>,
StatementAssertion<Begin: Pos(1080, 9), End: Pos(1080, 76)>,
]
---
public void testWithMinuteOfHourInDstChange_mockZone_catena_0() {
    DateTime cutover = new DateTime(2010, 10, 31, 1, 15, DateTimeZone.forOffsetHoursMinutes(0, 30));
    assertEquals("2010-10-31T01:15:00.000+00:30", cutover.toString());
    DateTimeZone halfHourZone = new MockZone(cutover.getMillis(), 3600000,  - 1800);
    DateTime pre = new DateTime(2010, 10, 31, 1, 0, halfHourZone);
    DateTime post = new DateTime(2010, 10, 31, 1, 59, halfHourZone);
    DateTime testPre1 = pre.withMinuteOfHour(30);
    DateTime testPre2 = pre.withMinuteOfHour(50);
    DateTime testPost1 = post.withMinuteOfHour(30);
    DateTime testPost2 = post.withMinuteOfHour(10);
    
}

---
---
public void testWithMinuteOfHourInDstChange_mockZone_catena_1() {
    DateTime cutover = new DateTime(2010, 10, 31, 1, 15, DateTimeZone.forOffsetHoursMinutes(0, 30));
    DateTimeZone halfHourZone = new MockZone(cutover.getMillis(), 3600000,  - 1800);
    DateTime pre = new DateTime(2010, 10, 31, 1, 0, halfHourZone);
    assertEquals("2010-10-31T01:00:00.000+01:00", pre.toString());
    DateTime post = new DateTime(2010, 10, 31, 1, 59, halfHourZone);
    DateTime testPre1 = pre.withMinuteOfHour(30);
    DateTime testPre2 = pre.withMinuteOfHour(50);
    DateTime testPost1 = post.withMinuteOfHour(30);
    DateTime testPost2 = post.withMinuteOfHour(10);
    
}

---
---
public void testWithMinuteOfHourInDstChange_mockZone_catena_2() {
    DateTime cutover = new DateTime(2010, 10, 31, 1, 15, DateTimeZone.forOffsetHoursMinutes(0, 30));
    DateTimeZone halfHourZone = new MockZone(cutover.getMillis(), 3600000,  - 1800);
    DateTime pre = new DateTime(2010, 10, 31, 1, 0, halfHourZone);
    DateTime post = new DateTime(2010, 10, 31, 1, 59, halfHourZone);
    assertEquals("2010-10-31T01:59:00.000+00:30", post.toString());
    DateTime testPre1 = pre.withMinuteOfHour(30);
    DateTime testPre2 = pre.withMinuteOfHour(50);
    DateTime testPost1 = post.withMinuteOfHour(30);
    DateTime testPost2 = post.withMinuteOfHour(10);
    
}

---
---
public void testWithMinuteOfHourInDstChange_mockZone_catena_3() {
    DateTime cutover = new DateTime(2010, 10, 31, 1, 15, DateTimeZone.forOffsetHoursMinutes(0, 30));
    DateTimeZone halfHourZone = new MockZone(cutover.getMillis(), 3600000,  - 1800);
    DateTime pre = new DateTime(2010, 10, 31, 1, 0, halfHourZone);
    DateTime post = new DateTime(2010, 10, 31, 1, 59, halfHourZone);
    DateTime testPre1 = pre.withMinuteOfHour(30);
    assertEquals("2010-10-31T01:30:00.000+01:00", testPre1.toString());
    DateTime testPre2 = pre.withMinuteOfHour(50);
    DateTime testPost1 = post.withMinuteOfHour(30);
    DateTime testPost2 = post.withMinuteOfHour(10);
    
}

---
---
public void testWithMinuteOfHourInDstChange_mockZone_catena_4() {
    DateTime cutover = new DateTime(2010, 10, 31, 1, 15, DateTimeZone.forOffsetHoursMinutes(0, 30));
    DateTimeZone halfHourZone = new MockZone(cutover.getMillis(), 3600000,  - 1800);
    DateTime pre = new DateTime(2010, 10, 31, 1, 0, halfHourZone);
    DateTime post = new DateTime(2010, 10, 31, 1, 59, halfHourZone);
    DateTime testPre1 = pre.withMinuteOfHour(30);
    DateTime testPre2 = pre.withMinuteOfHour(50);
    assertEquals("2010-10-31T01:50:00.000+00:30", testPre2.toString());
    DateTime testPost1 = post.withMinuteOfHour(30);
    DateTime testPost2 = post.withMinuteOfHour(10);
    
}

---
---
public void testWithMinuteOfHourInDstChange_mockZone_catena_5() {
    DateTime cutover = new DateTime(2010, 10, 31, 1, 15, DateTimeZone.forOffsetHoursMinutes(0, 30));
    DateTimeZone halfHourZone = new MockZone(cutover.getMillis(), 3600000,  - 1800);
    DateTime pre = new DateTime(2010, 10, 31, 1, 0, halfHourZone);
    DateTime post = new DateTime(2010, 10, 31, 1, 59, halfHourZone);
    DateTime testPre1 = pre.withMinuteOfHour(30);
    DateTime testPre2 = pre.withMinuteOfHour(50);
    DateTime testPost1 = post.withMinuteOfHour(30);
    assertEquals("2010-10-31T01:30:00.000+00:30", testPost1.toString());
    DateTime testPost2 = post.withMinuteOfHour(10);
    
}

---
---
public void testWithMinuteOfHourInDstChange_mockZone_catena_6() {
    DateTime cutover = new DateTime(2010, 10, 31, 1, 15, DateTimeZone.forOffsetHoursMinutes(0, 30));
    DateTimeZone halfHourZone = new MockZone(cutover.getMillis(), 3600000,  - 1800);
    DateTime pre = new DateTime(2010, 10, 31, 1, 0, halfHourZone);
    DateTime post = new DateTime(2010, 10, 31, 1, 59, halfHourZone);
    DateTime testPre1 = pre.withMinuteOfHour(30);
    DateTime testPre2 = pre.withMinuteOfHour(50);
    DateTime testPost1 = post.withMinuteOfHour(30);
    DateTime testPost2 = post.withMinuteOfHour(10);
    assertEquals("2010-10-31T01:10:00.000+01:00", testPost2.toString());
    
}

---
@@@
Split test: org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral
file: /root/workbench/exportInfo/d4j_buggy/Time_26/src/test/java//org/joda/time/TestDateTimeZoneCutover.java
Begin: Pos(1153, 12)
End: Pos(1170, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Time_26/src/test/java//org/joda/time/TestDateTimeZoneCutover.java
Name: testBug2182444_usCentral
Childs: [StatementAssertion<Begin: Pos(1158, 9), End: Pos(1158, 125)>,
StatementAssertion<Begin: Pos(1159, 9), End: Pos(1159, 126)>,
StatementAssertion<Begin: Pos(1163, 9), End: Pos(1163, 69)>,
StatementAssertion<Begin: Pos(1164, 9), End: Pos(1164, 111)>,
StatementAssertion<Begin: Pos(1165, 9), End: Pos(1165, 105)>,
StatementAssertion<Begin: Pos(1166, 9), End: Pos(1166, 98)>,
StatementAssertion<Begin: Pos(1167, 9), End: Pos(1167, 131)>,
StatementAssertion<Begin: Pos(1168, 9), End: Pos(1168, 98)>,
StatementAssertion<Begin: Pos(1169, 9), End: Pos(1169, 131)>,
]
---
public void testBug2182444_usCentral_catena_0() {
    Chronology chronUSCentral = GregorianChronology.getInstance(DateTimeZone.forID("US/Central"));
    Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);
    DateTime usCentralStandardInUTC = new DateTime(2008, 11, 2, 7, 0, 0, 0, chronUTC);
    DateTime usCentralDaylightInUTC = new DateTime(2008, 11, 2, 6, 0, 0, 0, chronUTC);
    assertTrue("Should be standard time", chronUSCentral.getZone().isStandardOffset(usCentralStandardInUTC.getMillis()));
    DateTime usCentralStandardInUSCentral = usCentralStandardInUTC.toDateTime(chronUSCentral);
    DateTime usCentralDaylightInUSCentral = usCentralDaylightInUTC.toDateTime(chronUSCentral);
    
}

---
---
public void testBug2182444_usCentral_catena_1() {
    Chronology chronUSCentral = GregorianChronology.getInstance(DateTimeZone.forID("US/Central"));
    Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);
    DateTime usCentralStandardInUTC = new DateTime(2008, 11, 2, 7, 0, 0, 0, chronUTC);
    DateTime usCentralDaylightInUTC = new DateTime(2008, 11, 2, 6, 0, 0, 0, chronUTC);
    assertFalse("Should be daylight time", chronUSCentral.getZone().isStandardOffset(usCentralDaylightInUTC.getMillis()));
    DateTime usCentralStandardInUSCentral = usCentralStandardInUTC.toDateTime(chronUSCentral);
    DateTime usCentralDaylightInUSCentral = usCentralDaylightInUTC.toDateTime(chronUSCentral);
    
}

---
---
public void testBug2182444_usCentral_catena_2() {
    Chronology chronUSCentral = GregorianChronology.getInstance(DateTimeZone.forID("US/Central"));
    Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);
    DateTime usCentralStandardInUTC = new DateTime(2008, 11, 2, 7, 0, 0, 0, chronUTC);
    DateTime usCentralDaylightInUTC = new DateTime(2008, 11, 2, 6, 0, 0, 0, chronUTC);
    DateTime usCentralStandardInUSCentral = usCentralStandardInUTC.toDateTime(chronUSCentral);
    DateTime usCentralDaylightInUSCentral = usCentralDaylightInUTC.toDateTime(chronUSCentral);
    assertEquals(1, usCentralStandardInUSCentral.getHourOfDay());
    
}

---
---
public void testBug2182444_usCentral_catena_3() {
    Chronology chronUSCentral = GregorianChronology.getInstance(DateTimeZone.forID("US/Central"));
    Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);
    DateTime usCentralStandardInUTC = new DateTime(2008, 11, 2, 7, 0, 0, 0, chronUTC);
    DateTime usCentralDaylightInUTC = new DateTime(2008, 11, 2, 6, 0, 0, 0, chronUTC);
    DateTime usCentralStandardInUSCentral = usCentralStandardInUTC.toDateTime(chronUSCentral);
    DateTime usCentralDaylightInUSCentral = usCentralDaylightInUTC.toDateTime(chronUSCentral);
    assertEquals(usCentralStandardInUSCentral.getHourOfDay(), usCentralDaylightInUSCentral.getHourOfDay());
    
}

---
---
public void testBug2182444_usCentral_catena_4() {
    Chronology chronUSCentral = GregorianChronology.getInstance(DateTimeZone.forID("US/Central"));
    Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);
    DateTime usCentralStandardInUTC = new DateTime(2008, 11, 2, 7, 0, 0, 0, chronUTC);
    DateTime usCentralDaylightInUTC = new DateTime(2008, 11, 2, 6, 0, 0, 0, chronUTC);
    DateTime usCentralStandardInUSCentral = usCentralStandardInUTC.toDateTime(chronUSCentral);
    DateTime usCentralDaylightInUSCentral = usCentralDaylightInUTC.toDateTime(chronUSCentral);
    assertTrue(usCentralStandardInUSCentral.getMillis() != usCentralDaylightInUSCentral.getMillis());
    
}

---
---
public void testBug2182444_usCentral_catena_5() {
    Chronology chronUSCentral = GregorianChronology.getInstance(DateTimeZone.forID("US/Central"));
    Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);
    DateTime usCentralStandardInUTC = new DateTime(2008, 11, 2, 7, 0, 0, 0, chronUTC);
    DateTime usCentralDaylightInUTC = new DateTime(2008, 11, 2, 6, 0, 0, 0, chronUTC);
    DateTime usCentralStandardInUSCentral = usCentralStandardInUTC.toDateTime(chronUSCentral);
    DateTime usCentralDaylightInUSCentral = usCentralDaylightInUTC.toDateTime(chronUSCentral);
    assertEquals(usCentralStandardInUSCentral, usCentralStandardInUSCentral.withHourOfDay(1));
    
}

---
---
public void testBug2182444_usCentral_catena_6() {
    Chronology chronUSCentral = GregorianChronology.getInstance(DateTimeZone.forID("US/Central"));
    Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);
    DateTime usCentralStandardInUTC = new DateTime(2008, 11, 2, 7, 0, 0, 0, chronUTC);
    DateTime usCentralDaylightInUTC = new DateTime(2008, 11, 2, 6, 0, 0, 0, chronUTC);
    DateTime usCentralStandardInUSCentral = usCentralStandardInUTC.toDateTime(chronUSCentral);
    DateTime usCentralDaylightInUSCentral = usCentralDaylightInUTC.toDateTime(chronUSCentral);
    assertEquals(usCentralStandardInUSCentral.getMillis() + 3, usCentralStandardInUSCentral.withMillisOfSecond(3).getMillis());
    
}

---
---
public void testBug2182444_usCentral_catena_7() {
    Chronology chronUSCentral = GregorianChronology.getInstance(DateTimeZone.forID("US/Central"));
    Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);
    DateTime usCentralStandardInUTC = new DateTime(2008, 11, 2, 7, 0, 0, 0, chronUTC);
    DateTime usCentralDaylightInUTC = new DateTime(2008, 11, 2, 6, 0, 0, 0, chronUTC);
    DateTime usCentralStandardInUSCentral = usCentralStandardInUTC.toDateTime(chronUSCentral);
    DateTime usCentralDaylightInUSCentral = usCentralDaylightInUTC.toDateTime(chronUSCentral);
    assertEquals(usCentralDaylightInUSCentral, usCentralDaylightInUSCentral.withHourOfDay(1));
    
}

---
---
public void testBug2182444_usCentral_catena_8() {
    Chronology chronUSCentral = GregorianChronology.getInstance(DateTimeZone.forID("US/Central"));
    Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);
    DateTime usCentralStandardInUTC = new DateTime(2008, 11, 2, 7, 0, 0, 0, chronUTC);
    DateTime usCentralDaylightInUTC = new DateTime(2008, 11, 2, 6, 0, 0, 0, chronUTC);
    DateTime usCentralStandardInUSCentral = usCentralStandardInUTC.toDateTime(chronUSCentral);
    DateTime usCentralDaylightInUSCentral = usCentralDaylightInUTC.toDateTime(chronUSCentral);
    assertEquals(usCentralDaylightInUSCentral.getMillis() + 3, usCentralDaylightInUSCentral.withMillisOfSecond(3).getMillis());
    
}

---
@@@
Split test: org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_Paris_summer
file: /root/workbench/exportInfo/d4j_buggy/Time_26/src/test/java//org/joda/time/TestDateTimeZoneCutover.java
Begin: Pos(1104, 12)
End: Pos(1109, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Time_26/src/test/java//org/joda/time/TestDateTimeZoneCutover.java
Name: testWithMillisOfSecondInDstChange_Paris_summer
Childs: [StatementAssertion<Begin: Pos(1106, 9), End: Pos(1106, 75)>,
StatementAssertion<Begin: Pos(1108, 9), End: Pos(1108, 71)>,
]
---
public void testWithMillisOfSecondInDstChange_Paris_summer_catena_0() {
    DateTime dateTime = new DateTime("2010-10-31T02:30:10.123+02:00", ZONE_PARIS);
    assertEquals("2010-10-31T02:30:10.123+02:00", dateTime.toString());
    DateTime test = dateTime.withMillisOfSecond(0);
    
}

---
---
public void testWithMillisOfSecondInDstChange_Paris_summer_catena_1() {
    DateTime dateTime = new DateTime("2010-10-31T02:30:10.123+02:00", ZONE_PARIS);
    DateTime test = dateTime.withMillisOfSecond(0);
    assertEquals("2010-10-31T02:30:10.000+02:00", test.toString());
    
}

---
@@@
Split test: org.joda.time.TestDateTimeZoneCutover::testWithHourOfDayInDstChange
file: /root/workbench/exportInfo/d4j_buggy/Time_26/src/test/java//org/joda/time/TestDateTimeZoneCutover.java
Begin: Pos(1083, 12)
End: Pos(1088, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Time_26/src/test/java//org/joda/time/TestDateTimeZoneCutover.java
Name: testWithHourOfDayInDstChange
Childs: [StatementAssertion<Begin: Pos(1085, 9), End: Pos(1085, 75)>,
StatementAssertion<Begin: Pos(1087, 9), End: Pos(1087, 71)>,
]
---
public void testWithHourOfDayInDstChange_catena_0() {
    DateTime dateTime = new DateTime("2010-10-31T02:30:10.123+02:00", ZONE_PARIS);
    assertEquals("2010-10-31T02:30:10.123+02:00", dateTime.toString());
    DateTime test = dateTime.withHourOfDay(2);
    
}

---
---
public void testWithHourOfDayInDstChange_catena_1() {
    DateTime dateTime = new DateTime("2010-10-31T02:30:10.123+02:00", ZONE_PARIS);
    DateTime test = dateTime.withHourOfDay(2);
    assertEquals("2010-10-31T02:30:10.123+02:00", test.toString());
    
}

---
@@@
Split test: org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_NewYork_winter
file: /root/workbench/exportInfo/d4j_buggy/Time_26/src/test/java//org/joda/time/TestDateTimeZoneCutover.java
Begin: Pos(1125, 12)
End: Pos(1130, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Time_26/src/test/java//org/joda/time/TestDateTimeZoneCutover.java
Name: testWithMillisOfSecondInDstChange_NewYork_winter
Childs: [StatementAssertion<Begin: Pos(1127, 9), End: Pos(1127, 75)>,
StatementAssertion<Begin: Pos(1129, 9), End: Pos(1129, 71)>,
]
---
public void testWithMillisOfSecondInDstChange_NewYork_winter_catena_0() {
    DateTime dateTime = new DateTime("2007-11-04T01:30:00.123-05:00", ZONE_NEW_YORK);
    assertEquals("2007-11-04T01:30:00.123-05:00", dateTime.toString());
    DateTime test = dateTime.withMillisOfSecond(0);
    
}

---
---
public void testWithMillisOfSecondInDstChange_NewYork_winter_catena_1() {
    DateTime dateTime = new DateTime("2007-11-04T01:30:00.123-05:00", ZONE_NEW_YORK);
    DateTime test = dateTime.withMillisOfSecond(0);
    assertEquals("2007-11-04T01:30:00.000-05:00", test.toString());
    
}

---
@@@
Split test: org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW
file: /root/workbench/exportInfo/d4j_buggy/Time_26/src/test/java//org/joda/time/TestDateTimeZoneCutover.java
Begin: Pos(1172, 12)
End: Pos(1189, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Time_26/src/test/java//org/joda/time/TestDateTimeZoneCutover.java
Name: testBug2182444_ausNSW
Childs: [StatementAssertion<Begin: Pos(1177, 9), End: Pos(1177, 125)>,
StatementAssertion<Begin: Pos(1178, 9), End: Pos(1178, 126)>,
StatementAssertion<Begin: Pos(1182, 9), End: Pos(1182, 75)>,
StatementAssertion<Begin: Pos(1183, 9), End: Pos(1183, 122)>,
StatementAssertion<Begin: Pos(1184, 9), End: Pos(1184, 116)>,
StatementAssertion<Begin: Pos(1185, 9), End: Pos(1185, 110)>,
StatementAssertion<Begin: Pos(1186, 9), End: Pos(1186, 143)>,
StatementAssertion<Begin: Pos(1187, 9), End: Pos(1187, 108)>,
StatementAssertion<Begin: Pos(1188, 9), End: Pos(1188, 141)>,
]
---
public void testBug2182444_ausNSW_catena_0() {
    Chronology chronAusNSW = GregorianChronology.getInstance(DateTimeZone.forID("Australia/NSW"));
    Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);
    DateTime australiaNSWStandardInUTC = new DateTime(2008, 4, 5, 16, 0, 0, 0, chronUTC);
    DateTime australiaNSWDaylightInUTC = new DateTime(2008, 4, 5, 15, 0, 0, 0, chronUTC);
    assertTrue("Should be standard time", chronAusNSW.getZone().isStandardOffset(australiaNSWStandardInUTC.getMillis()));
    DateTime australiaNSWStandardInAustraliaNSW = australiaNSWStandardInUTC.toDateTime(chronAusNSW);
    DateTime australiaNSWDaylightInAusraliaNSW = australiaNSWDaylightInUTC.toDateTime(chronAusNSW);
    
}

---
---
public void testBug2182444_ausNSW_catena_1() {
    Chronology chronAusNSW = GregorianChronology.getInstance(DateTimeZone.forID("Australia/NSW"));
    Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);
    DateTime australiaNSWStandardInUTC = new DateTime(2008, 4, 5, 16, 0, 0, 0, chronUTC);
    DateTime australiaNSWDaylightInUTC = new DateTime(2008, 4, 5, 15, 0, 0, 0, chronUTC);
    assertFalse("Should be daylight time", chronAusNSW.getZone().isStandardOffset(australiaNSWDaylightInUTC.getMillis()));
    DateTime australiaNSWStandardInAustraliaNSW = australiaNSWStandardInUTC.toDateTime(chronAusNSW);
    DateTime australiaNSWDaylightInAusraliaNSW = australiaNSWDaylightInUTC.toDateTime(chronAusNSW);
    
}

---
---
public void testBug2182444_ausNSW_catena_2() {
    Chronology chronAusNSW = GregorianChronology.getInstance(DateTimeZone.forID("Australia/NSW"));
    Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);
    DateTime australiaNSWStandardInUTC = new DateTime(2008, 4, 5, 16, 0, 0, 0, chronUTC);
    DateTime australiaNSWDaylightInUTC = new DateTime(2008, 4, 5, 15, 0, 0, 0, chronUTC);
    DateTime australiaNSWStandardInAustraliaNSW = australiaNSWStandardInUTC.toDateTime(chronAusNSW);
    DateTime australiaNSWDaylightInAusraliaNSW = australiaNSWDaylightInUTC.toDateTime(chronAusNSW);
    assertEquals(2, australiaNSWStandardInAustraliaNSW.getHourOfDay());
    
}

---
---
public void testBug2182444_ausNSW_catena_3() {
    Chronology chronAusNSW = GregorianChronology.getInstance(DateTimeZone.forID("Australia/NSW"));
    Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);
    DateTime australiaNSWStandardInUTC = new DateTime(2008, 4, 5, 16, 0, 0, 0, chronUTC);
    DateTime australiaNSWDaylightInUTC = new DateTime(2008, 4, 5, 15, 0, 0, 0, chronUTC);
    DateTime australiaNSWStandardInAustraliaNSW = australiaNSWStandardInUTC.toDateTime(chronAusNSW);
    DateTime australiaNSWDaylightInAusraliaNSW = australiaNSWDaylightInUTC.toDateTime(chronAusNSW);
    assertEquals(australiaNSWStandardInAustraliaNSW.getHourOfDay(), australiaNSWDaylightInAusraliaNSW.getHourOfDay());
    
}

---
---
public void testBug2182444_ausNSW_catena_4() {
    Chronology chronAusNSW = GregorianChronology.getInstance(DateTimeZone.forID("Australia/NSW"));
    Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);
    DateTime australiaNSWStandardInUTC = new DateTime(2008, 4, 5, 16, 0, 0, 0, chronUTC);
    DateTime australiaNSWDaylightInUTC = new DateTime(2008, 4, 5, 15, 0, 0, 0, chronUTC);
    DateTime australiaNSWStandardInAustraliaNSW = australiaNSWStandardInUTC.toDateTime(chronAusNSW);
    DateTime australiaNSWDaylightInAusraliaNSW = australiaNSWDaylightInUTC.toDateTime(chronAusNSW);
    assertTrue(australiaNSWStandardInAustraliaNSW.getMillis() != australiaNSWDaylightInAusraliaNSW.getMillis());
    
}

---
---
public void testBug2182444_ausNSW_catena_5() {
    Chronology chronAusNSW = GregorianChronology.getInstance(DateTimeZone.forID("Australia/NSW"));
    Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);
    DateTime australiaNSWStandardInUTC = new DateTime(2008, 4, 5, 16, 0, 0, 0, chronUTC);
    DateTime australiaNSWDaylightInUTC = new DateTime(2008, 4, 5, 15, 0, 0, 0, chronUTC);
    DateTime australiaNSWStandardInAustraliaNSW = australiaNSWStandardInUTC.toDateTime(chronAusNSW);
    DateTime australiaNSWDaylightInAusraliaNSW = australiaNSWDaylightInUTC.toDateTime(chronAusNSW);
    assertEquals(australiaNSWStandardInAustraliaNSW, australiaNSWStandardInAustraliaNSW.withHourOfDay(2));
    
}

---
---
public void testBug2182444_ausNSW_catena_6() {
    Chronology chronAusNSW = GregorianChronology.getInstance(DateTimeZone.forID("Australia/NSW"));
    Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);
    DateTime australiaNSWStandardInUTC = new DateTime(2008, 4, 5, 16, 0, 0, 0, chronUTC);
    DateTime australiaNSWDaylightInUTC = new DateTime(2008, 4, 5, 15, 0, 0, 0, chronUTC);
    DateTime australiaNSWStandardInAustraliaNSW = australiaNSWStandardInUTC.toDateTime(chronAusNSW);
    DateTime australiaNSWDaylightInAusraliaNSW = australiaNSWDaylightInUTC.toDateTime(chronAusNSW);
    assertEquals(australiaNSWStandardInAustraliaNSW.getMillis() + 3, australiaNSWStandardInAustraliaNSW.withMillisOfSecond(3).getMillis());
    
}

---
---
public void testBug2182444_ausNSW_catena_7() {
    Chronology chronAusNSW = GregorianChronology.getInstance(DateTimeZone.forID("Australia/NSW"));
    Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);
    DateTime australiaNSWStandardInUTC = new DateTime(2008, 4, 5, 16, 0, 0, 0, chronUTC);
    DateTime australiaNSWDaylightInUTC = new DateTime(2008, 4, 5, 15, 0, 0, 0, chronUTC);
    DateTime australiaNSWStandardInAustraliaNSW = australiaNSWStandardInUTC.toDateTime(chronAusNSW);
    DateTime australiaNSWDaylightInAusraliaNSW = australiaNSWDaylightInUTC.toDateTime(chronAusNSW);
    assertEquals(australiaNSWDaylightInAusraliaNSW, australiaNSWDaylightInAusraliaNSW.withHourOfDay(2));
    
}

---
---
public void testBug2182444_ausNSW_catena_8() {
    Chronology chronAusNSW = GregorianChronology.getInstance(DateTimeZone.forID("Australia/NSW"));
    Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);
    DateTime australiaNSWStandardInUTC = new DateTime(2008, 4, 5, 16, 0, 0, 0, chronUTC);
    DateTime australiaNSWDaylightInUTC = new DateTime(2008, 4, 5, 15, 0, 0, 0, chronUTC);
    DateTime australiaNSWStandardInAustraliaNSW = australiaNSWStandardInUTC.toDateTime(chronAusNSW);
    DateTime australiaNSWDaylightInAusraliaNSW = australiaNSWDaylightInUTC.toDateTime(chronAusNSW);
    assertEquals(australiaNSWDaylightInAusraliaNSW.getMillis() + 3, australiaNSWDaylightInAusraliaNSW.withMillisOfSecond(3).getMillis());
    
}

---
--------------------
Run: Time_7
@@@
Split test: org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
file: /root/workbench/exportInfo/d4j_buggy/Time_7/src/test/java//org/joda/time/format/TestDateTimeFormatter.java
Begin: Pos(929, 12)
End: Pos(934, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Time_7/src/test/java//org/joda/time/format/TestDateTimeFormatter.java
Name: testParseInto_monthDay_feb29_newYork_startOfYear
Childs: [StatementAssertion<Begin: Pos(932, 9), End: Pos(932, 56)>,
StatementAssertion<Begin: Pos(933, 9), End: Pos(933, 84)>,
]
---
public void testParseInto_monthDay_feb29_newYork_startOfYear_catena_0() {
    DateTimeFormatter f = DateTimeFormat.forPattern("M d").withLocale(Locale.UK);
    MutableDateTime result = new MutableDateTime(2004, 1, 1, 0, 0, 0, 0, NEWYORK);
    assertEquals(4, f.parseInto(result, "2 29", 0));
    
}

---
---
public void testParseInto_monthDay_feb29_newYork_startOfYear_catena_1() {
    DateTimeFormatter f = DateTimeFormat.forPattern("M d").withLocale(Locale.UK);
    MutableDateTime result = new MutableDateTime(2004, 1, 1, 0, 0, 0, 0, NEWYORK);
    assertEquals(new MutableDateTime(2004, 2, 29, 0, 0, 0, 0, NEWYORK), result);
    
}

---
@@@
Split test: org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_tokyo_endOfYear
file: /root/workbench/exportInfo/d4j_buggy/Time_7/src/test/java//org/joda/time/format/TestDateTimeFormatter.java
Begin: Pos(957, 12)
End: Pos(962, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Time_7/src/test/java//org/joda/time/format/TestDateTimeFormatter.java
Name: testParseInto_monthDay_feb29_tokyo_endOfYear
Childs: [StatementAssertion<Begin: Pos(960, 9), End: Pos(960, 56)>,
StatementAssertion<Begin: Pos(961, 9), End: Pos(961, 87)>,
]
---
public void testParseInto_monthDay_feb29_tokyo_endOfYear_catena_0() {
    DateTimeFormatter f = DateTimeFormat.forPattern("M d").withLocale(Locale.UK);
    MutableDateTime result = new MutableDateTime(2004, 12, 31, 23, 59, 59, 999, TOKYO);
    assertEquals(4, f.parseInto(result, "2 29", 0));
    
}

---
---
public void testParseInto_monthDay_feb29_tokyo_endOfYear_catena_1() {
    DateTimeFormatter f = DateTimeFormat.forPattern("M d").withLocale(Locale.UK);
    MutableDateTime result = new MutableDateTime(2004, 12, 31, 23, 59, 59, 999, TOKYO);
    assertEquals(new MutableDateTime(2004, 2, 29, 23, 59, 59, 999, TOKYO), result);
    
}

---
--------------------
Run: Time_20
@@@
Split test: org.joda.time.format.TestDateTimeFormatterBuilder::test_printParseZoneDawsonCreek
file: /root/workbench/exportInfo/d4j_buggy/Time_20/src/test/java//org/joda/time/format/TestDateTimeFormatterBuilder.java
Begin: Pos(255, 12)
End: Pos(263, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Time_20/src/test/java//org/joda/time/format/TestDateTimeFormatterBuilder.java
Name: test_printParseZoneDawsonCreek
Childs: [StatementAssertion<Begin: Pos(261, 9), End: Pos(261, 75)>,
StatementAssertion<Begin: Pos(262, 9), End: Pos(262, 83)>,
]
---
public void test_printParseZoneDawsonCreek_catena_0() {
    DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneId();
    DateTimeFormatter f = bld.toFormatter();
    DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, DateTimeZone.forID("America/Dawson_Creek"));
    assertEquals("2007-03-04 12:30 America/Dawson_Creek", f.print(dt));
    
}

---
---
public void test_printParseZoneDawsonCreek_catena_1() {
    DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder().appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneId();
    DateTimeFormatter f = bld.toFormatter();
    DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, DateTimeZone.forID("America/Dawson_Creek"));
    assertEquals(dt, f.parseDateTime("2007-03-04 12:30 America/Dawson_Creek"));
    
}

---
--------------------
Run: Time_5
@@@
Split test: org.joda.time.TestPeriod_Basics::testNormalizedStandard_periodType_months1
file: /root/workbench/exportInfo/d4j_buggy/Time_5/src/test/java//org/joda/time/TestPeriod_Basics.java
Begin: Pos(1520, 12)
End: Pos(1525, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Time_5/src/test/java//org/joda/time/TestPeriod_Basics.java
Name: testNormalizedStandard_periodType_months1
Childs: [StatementAssertion<Begin: Pos(1523, 9), End: Pos(1523, 64)>,
StatementAssertion<Begin: Pos(1524, 9), End: Pos(1524, 87)>,
]
---
public void testNormalizedStandard_periodType_months1_catena_0() {
    Period test = new Period(1, 15, 0, 0, 0, 0, 0, 0);
    Period result = test.normalizedStandard(PeriodType.months());
    assertEquals(new Period(1, 15, 0, 0, 0, 0, 0, 0), test);
    
}

---
---
public void testNormalizedStandard_periodType_months1_catena_1() {
    Period test = new Period(1, 15, 0, 0, 0, 0, 0, 0);
    Period result = test.normalizedStandard(PeriodType.months());
    assertEquals(new Period(0, 27, 0, 0, 0, 0, 0, 0, PeriodType.months()), result);
    
}

---
@@@
Split test: org.joda.time.TestPeriod_Basics::testNormalizedStandard_periodType_months2
file: /root/workbench/exportInfo/d4j_buggy/Time_5/src/test/java//org/joda/time/TestPeriod_Basics.java
Begin: Pos(1527, 12)
End: Pos(1532, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Time_5/src/test/java//org/joda/time/TestPeriod_Basics.java
Name: testNormalizedStandard_periodType_months2
Childs: [StatementAssertion<Begin: Pos(1530, 9), End: Pos(1530, 65)>,
StatementAssertion<Begin: Pos(1531, 9), End: Pos(1531, 87)>,
]
---
public void testNormalizedStandard_periodType_months2_catena_0() {
    Period test = new Period( - 2, 15, 0, 0, 0, 0, 0, 0);
    Period result = test.normalizedStandard(PeriodType.months());
    assertEquals(new Period( - 2, 15, 0, 0, 0, 0, 0, 0), test);
    
}

---
---
public void testNormalizedStandard_periodType_months2_catena_1() {
    Period test = new Period( - 2, 15, 0, 0, 0, 0, 0, 0);
    Period result = test.normalizedStandard(PeriodType.months());
    assertEquals(new Period(0,  - 9, 0, 0, 0, 0, 0, 0, PeriodType.months()), result);
    
}

---
@@@
Split test: org.joda.time.TestPeriod_Basics::testNormalizedStandard_periodType_monthsWeeks
file: /root/workbench/exportInfo/d4j_buggy/Time_5/src/test/java//org/joda/time/TestPeriod_Basics.java
Begin: Pos(1551, 12)
End: Pos(1560, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Time_5/src/test/java//org/joda/time/TestPeriod_Basics.java
Name: testNormalizedStandard_periodType_monthsWeeks
Childs: [StatementAssertion<Begin: Pos(1558, 9), End: Pos(1558, 63)>,
StatementAssertion<Begin: Pos(1559, 9), End: Pos(1559, 72)>,
]
---
public void testNormalizedStandard_periodType_monthsWeeks_catena_0() {
    PeriodType type = PeriodType.forFields(new DurationFieldType[] {
        DurationFieldType.months(), DurationFieldType.weeks(), DurationFieldType.days()
    });
    Period test = new Period(2, 4, 6, 0, 0, 0, 0, 0);
    Period result = test.normalizedStandard(type);
    assertEquals(new Period(2, 4, 6, 0, 0, 0, 0, 0), test);
    
}

---
---
public void testNormalizedStandard_periodType_monthsWeeks_catena_1() {
    PeriodType type = PeriodType.forFields(new DurationFieldType[] {
        DurationFieldType.months(), DurationFieldType.weeks(), DurationFieldType.days()
    });
    Period test = new Period(2, 4, 6, 0, 0, 0, 0, 0);
    Period result = test.normalizedStandard(type);
    assertEquals(new Period(0, 28, 6, 0, 0, 0, 0, 0, type), result);
    
}

---
--------------------
Run: Time_23
@@@
Split test: org.joda.time.TestDateTimeZone::testForID_String_old
file: /root/workbench/exportInfo/d4j_buggy/Time_23/src/test/java//org/joda/time/TestDateTimeZone.java
Begin: Pos(243, 12)
End: Pos(288, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Time_23/src/test/java//org/joda/time/TestDateTimeZone.java
Name: testForID_String_old
Childs: [StatementAssertion<Begin: Pos(282, 13), End: Pos(282, 46)>,
]
--------------------
Run: Time_6
@@@
Split test: org.joda.time.chrono.TestGJDate::test_cutoverPreZero
file: /root/workbench/exportInfo/d4j_buggy/Time_6/src/test/java//org/joda/time/chrono/TestGJDate.java
Begin: Pos(128, 12)
End: Pos(136, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Time_6/src/test/java//org/joda/time/chrono/TestGJDate.java
Name: test_cutoverPreZero
Childs: [StatementAssertion<Begin: Pos(132, 13), End: Pos(132, 19)>,
]
@@@
Split test: org.joda.time.chrono.TestGJDate::test_plusWeekyears_positiveToNegative_crossCutover
file: /root/workbench/exportInfo/d4j_buggy/Time_6/src/test/java//org/joda/time/chrono/TestGJDate.java
Begin: Pos(121, 12)
End: Pos(125, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Time_6/src/test/java//org/joda/time/chrono/TestGJDate.java
Name: test_plusWeekyears_positiveToNegative_crossCutover
Childs: [StatementAssertion<Begin: Pos(124, 9), End: Pos(124, 65)>,
]
@@@
Split test: org.joda.time.chrono.TestGJDate::test_plusYears_positiveToZero_crossCutover
file: /root/workbench/exportInfo/d4j_buggy/Time_6/src/test/java//org/joda/time/chrono/TestGJDate.java
Begin: Pos(96, 12)
End: Pos(100, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Time_6/src/test/java//org/joda/time/chrono/TestGJDate.java
Name: test_plusYears_positiveToZero_crossCutover
Childs: [StatementAssertion<Begin: Pos(99, 9), End: Pos(99, 54)>,
]
@@@
Split test: org.joda.time.chrono.TestGJDate::test_plusYears_positiveToNegative_crossCutover
file: /root/workbench/exportInfo/d4j_buggy/Time_6/src/test/java//org/joda/time/chrono/TestGJDate.java
Begin: Pos(102, 12)
End: Pos(106, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Time_6/src/test/java//org/joda/time/chrono/TestGJDate.java
Name: test_plusYears_positiveToNegative_crossCutover
Childs: [StatementAssertion<Begin: Pos(105, 9), End: Pos(105, 54)>,
]
@@@
Split test: org.joda.time.chrono.TestGJDate::test_plusWeekyears_positiveToZero_crossCutover
file: /root/workbench/exportInfo/d4j_buggy/Time_6/src/test/java//org/joda/time/chrono/TestGJDate.java
Begin: Pos(115, 12)
End: Pos(119, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Time_6/src/test/java//org/joda/time/chrono/TestGJDate.java
Name: test_plusWeekyears_positiveToZero_crossCutover
Childs: [StatementAssertion<Begin: Pos(118, 9), End: Pos(118, 65)>,
]
--------------------
Run: Time_2
@@@
Split test: org.joda.time.TestPartial_Basics::testWith_baseAndArgHaveNoRange
file: /root/workbench/exportInfo/d4j_buggy/Time_2/src/test/java//org/joda/time/TestPartial_Basics.java
Begin: Pos(467, 12)
End: Pos(473, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Time_2/src/test/java//org/joda/time/TestPartial_Basics.java
Name: testWith_baseAndArgHaveNoRange
Childs: [StatementAssertion<Begin: Pos(470, 9), End: Pos(470, 39)>,
StatementAssertion<Begin: Pos(471, 9), End: Pos(471, 65)>,
StatementAssertion<Begin: Pos(472, 9), End: Pos(472, 66)>,
]
---
public void testWith_baseAndArgHaveNoRange_catena_0() {
    Partial test = new Partial(DateTimeFieldType.year(), 1);
    Partial result = test.with(DateTimeFieldType.era(), 1);
    assertEquals(2, result.size());
    
}

---
---
public void testWith_baseAndArgHaveNoRange_catena_1() {
    Partial test = new Partial(DateTimeFieldType.year(), 1);
    Partial result = test.with(DateTimeFieldType.era(), 1);
    assertEquals(0, result.indexOf(DateTimeFieldType.era()));
    
}

---
---
public void testWith_baseAndArgHaveNoRange_catena_2() {
    Partial test = new Partial(DateTimeFieldType.year(), 1);
    Partial result = test.with(DateTimeFieldType.era(), 1);
    assertEquals(1, result.indexOf(DateTimeFieldType.year()));
    
}

---
--------------------
Run: Closure_25
@@@
Split test: com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew
file: /root/workbench/exportInfo/d4j_buggy/Closure_25/test//com/google/javascript/jscomp/TypeInferenceTest.java
Begin: Pos(880, 10)
End: Pos(891, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_25/test//com/google/javascript/jscomp/TypeInferenceTest.java
Name: testBackwardsInferenceNew
Childs: [StatementAssertion<Begin: Pos(881, 5), End: Pos(888, 21)>,
StatementAssertion<Begin: Pos(890, 5), End: Pos(890, 71)>,
]
---
public void testBackwardsInferenceNew_catena_0() {
    inFunction("/**\n" + " * @constructor\n" + " * @param {{foo: (number|undefined)}} x\n" + " */" + "function F(x) {}" + "var y = {};" + "new F(y);");
    
}

---
---
public void testBackwardsInferenceNew_catena_1() {
    assertEquals("{foo: (number|undefined)}", getType("y").toString());
    
}

---
--------------------
Run: Closure_89
@@@
Split test: com.google.javascript.jscomp.CollapsePropertiesTest::testAddPropertyToChildOfUncollapsibleFunctionInLocalScope
file: /root/workbench/exportInfo/d4j_buggy/Closure_89/test//com/google/javascript/jscomp/CollapsePropertiesTest.java
Begin: Pos(609, 10)
End: Pos(613, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_89/test//com/google/javascript/jscomp/CollapsePropertiesTest.java
Name: testAddPropertyToChildOfUncollapsibleFunctionInLocalScope
Childs: [StatementAssertion<Begin: Pos(610, 5), End: Pos(612, 47)>,
]
@@@
Split test: com.google.javascript.jscomp.CollapsePropertiesTest::testAliasCreatedForFunctionDepth1_1
file: /root/workbench/exportInfo/d4j_buggy/Closure_89/test//com/google/javascript/jscomp/CollapsePropertiesTest.java
Begin: Pos(278, 10)
End: Pos(280, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_89/test//com/google/javascript/jscomp/CollapsePropertiesTest.java
Name: testAliasCreatedForFunctionDepth1_1
Childs: [StatementAssertion<Begin: Pos(279, 5), End: Pos(279, 79)>,
]
@@@
Split test: com.google.javascript.jscomp.CollapsePropertiesTest::testAliasCreatedForFunctionDepth1_2
file: /root/workbench/exportInfo/d4j_buggy/Closure_89/test//com/google/javascript/jscomp/CollapsePropertiesTest.java
Begin: Pos(294, 10)
End: Pos(296, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_89/test//com/google/javascript/jscomp/CollapsePropertiesTest.java
Name: testAliasCreatedForFunctionDepth1_2
Childs: [StatementAssertion<Begin: Pos(295, 5), End: Pos(295, 58)>,
]
@@@
Split test: com.google.javascript.jscomp.CollapsePropertiesTest::testAliasCreatedForFunctionDepth1_3
file: /root/workbench/exportInfo/d4j_buggy/Closure_89/test//com/google/javascript/jscomp/CollapsePropertiesTest.java
Begin: Pos(303, 10)
End: Pos(305, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_89/test//com/google/javascript/jscomp/CollapsePropertiesTest.java
Name: testAliasCreatedForFunctionDepth1_3
Childs: [StatementAssertion<Begin: Pos(304, 5), End: Pos(304, 62)>,
]
@@@
Split test: com.google.javascript.jscomp.CollapsePropertiesTest::testAddPropertyToUncollapsibleNamedCtorInLocalScopeDepth1
file: /root/workbench/exportInfo/d4j_buggy/Closure_89/test//com/google/javascript/jscomp/CollapsePropertiesTest.java
Begin: Pos(547, 10)
End: Pos(555, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_89/test//com/google/javascript/jscomp/CollapsePropertiesTest.java
Name: testAddPropertyToUncollapsibleNamedCtorInLocalScopeDepth1
Childs: [StatementAssertion<Begin: Pos(552, 5), End: Pos(554, 45)>,
]
@@@
Split test: com.google.javascript.jscomp.CollapsePropertiesTest::testAddPropertyToUncollapsibleFunctionInLocalScopeDepth1
file: /root/workbench/exportInfo/d4j_buggy/Closure_89/test//com/google/javascript/jscomp/CollapsePropertiesTest.java
Begin: Pos(543, 10)
End: Pos(545, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_89/test//com/google/javascript/jscomp/CollapsePropertiesTest.java
Name: testAddPropertyToUncollapsibleFunctionInLocalScopeDepth1
Childs: [StatementAssertion<Begin: Pos(544, 5), End: Pos(544, 75)>,
]
@@@
Split test: com.google.javascript.jscomp.CollapsePropertiesTest::testAddPropertyToUncollapsibleFunctionInLocalScopeDepth2
file: /root/workbench/exportInfo/d4j_buggy/Closure_89/test//com/google/javascript/jscomp/CollapsePropertiesTest.java
Begin: Pos(571, 10)
End: Pos(576, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_89/test//com/google/javascript/jscomp/CollapsePropertiesTest.java
Name: testAddPropertyToUncollapsibleFunctionInLocalScopeDepth2
Childs: [StatementAssertion<Begin: Pos(572, 5), End: Pos(575, 48)>,
]
@@@
Split test: com.google.javascript.jscomp.CollapsePropertiesTest::testAliasCreatedForFunctionDepth2
file: /root/workbench/exportInfo/d4j_buggy/Closure_89/test//com/google/javascript/jscomp/CollapsePropertiesTest.java
Begin: Pos(312, 10)
End: Pos(318, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_89/test//com/google/javascript/jscomp/CollapsePropertiesTest.java
Name: testAliasCreatedForFunctionDepth2
Childs: [StatementAssertion<Begin: Pos(313, 5), End: Pos(317, 25)>,
]
--------------------
Run: Closure_103
@@@
Split test: com.google.javascript.jscomp.CheckUnreachableCodeTest::testInstanceOfThrowsException
file: /root/workbench/exportInfo/d4j_buggy/Closure_103/test//com/google/javascript/jscomp/CheckUnreachableCodeTest.java
Begin: Pos(139, 10)
End: Pos(142, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_103/test//com/google/javascript/jscomp/CheckUnreachableCodeTest.java
Name: testInstanceOfThrowsException
Childs: [StatementAssertion<Begin: Pos(140, 5), End: Pos(141, 31)>,
]
@@@
Split test: com.google.javascript.jscomp.ControlFlowAnalysisTest::testInstanceOf
file: /root/workbench/exportInfo/d4j_buggy/Closure_103/test//com/google/javascript/jscomp/ControlFlowAnalysisTest.java
Begin: Pos(1243, 10)
End: Pos(1247, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_103/test//com/google/javascript/jscomp/ControlFlowAnalysisTest.java
Name: testInstanceOf
Childs: [StatementAssertion<Begin: Pos(1246, 5), End: Pos(1246, 71)>,
]
@@@
Split test: com.google.javascript.jscomp.DisambiguatePropertiesTest::testSupertypeReferenceOfSubtypeProperty
file: /root/workbench/exportInfo/d4j_buggy/Closure_103/test//com/google/javascript/jscomp/DisambiguatePropertiesTest.java
Begin: Pos(587, 10)
End: Pos(607, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_103/test//com/google/javascript/jscomp/DisambiguatePropertiesTest.java
Name: testSupertypeReferenceOfSubtypeProperty
Childs: [StatementAssertion<Begin: Pos(606, 5), End: Pos(606, 66)>,
]
--------------------
Run: Closure_37
@@@
Split test: com.google.javascript.jscomp.IntegrationTest::testIncompleteFunction
file: /root/workbench/exportInfo/d4j_buggy/Closure_37/test//com/google/javascript/jscomp/IntegrationTest.java
Begin: Pos(1937, 10)
End: Pos(1950, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_37/test//com/google/javascript/jscomp/IntegrationTest.java
Name: testIncompleteFunction
Childs: [StatementAssertion<Begin: Pos(1945, 5), End: Pos(1949, 6)>,
]
--------------------
Run: Closure_30
@@@
Split test: com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest::testInlineAcrossSideEffect1
file: /root/workbench/exportInfo/d4j_buggy/Closure_30/test//com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java
Begin: Pos(324, 10)
End: Pos(331, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_30/test//com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java
Name: testInlineAcrossSideEffect1
Childs: [StatementAssertion<Begin: Pos(329, 5), End: Pos(329, 50)>,
]
@@@
Split test: com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest::testCanInlineAcrossNoSideEffect
file: /root/workbench/exportInfo/d4j_buggy/Closure_30/test//com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java
Begin: Pos(359, 10)
End: Pos(368, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_30/test//com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java
Name: testCanInlineAcrossNoSideEffect
Childs: [StatementAssertion<Begin: Pos(363, 5), End: Pos(364, 76)>,
]
@@@
Split test: com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest::testIssue698
file: /root/workbench/exportInfo/d4j_buggy/Closure_30/test//com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java
Begin: Pos(419, 10)
End: Pos(436, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_30/test//com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java
Name: testIssue698
Childs: [StatementAssertion<Begin: Pos(423, 5), End: Pos(435, 23)>,
]
--------------------
Run: Closure_127
@@@
Split test: com.google.javascript.jscomp.UnreachableCodeEliminationTest::testIssue4177428_return
file: /root/workbench/exportInfo/d4j_buggy/Closure_127/test//com/google/javascript/jscomp/UnreachableCodeEliminationTest.java
Begin: Pos(361, 10)
End: Pos(389, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_127/test//com/google/javascript/jscomp/UnreachableCodeEliminationTest.java
Name: testIssue4177428_return
Childs: [StatementAssertion<Begin: Pos(362, 5), End: Pos(388, 10)>,
]
@@@
Split test: com.google.javascript.jscomp.UnreachableCodeEliminationTest::testDontRemoveBreakInTryFinally
file: /root/workbench/exportInfo/d4j_buggy/Closure_127/test//com/google/javascript/jscomp/UnreachableCodeEliminationTest.java
Begin: Pos(416, 10)
End: Pos(418, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_127/test//com/google/javascript/jscomp/UnreachableCodeEliminationTest.java
Name: testDontRemoveBreakInTryFinally
Childs: [StatementAssertion<Begin: Pos(417, 5), End: Pos(417, 74)>,
]
@@@
Split test: com.google.javascript.jscomp.UnreachableCodeEliminationTest::testIssue4177428_continue
file: /root/workbench/exportInfo/d4j_buggy/Closure_127/test//com/google/javascript/jscomp/UnreachableCodeEliminationTest.java
Begin: Pos(344, 10)
End: Pos(359, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_127/test//com/google/javascript/jscomp/UnreachableCodeEliminationTest.java
Name: testIssue4177428_continue
Childs: [StatementAssertion<Begin: Pos(345, 5), End: Pos(358, 14)>,
]
@@@
Split test: com.google.javascript.jscomp.UnreachableCodeEliminationTest::testDontRemoveBreakInTryFinallySwitch
file: /root/workbench/exportInfo/d4j_buggy/Closure_127/test//com/google/javascript/jscomp/UnreachableCodeEliminationTest.java
Begin: Pos(420, 10)
End: Pos(422, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_127/test//com/google/javascript/jscomp/UnreachableCodeEliminationTest.java
Name: testDontRemoveBreakInTryFinallySwitch
Childs: [StatementAssertion<Begin: Pos(421, 5), End: Pos(421, 95)>,
]
@@@
Split test: com.google.javascript.jscomp.UnreachableCodeEliminationTest::testIssue4177428a
file: /root/workbench/exportInfo/d4j_buggy/Closure_127/test//com/google/javascript/jscomp/UnreachableCodeEliminationTest.java
Begin: Pos(287, 10)
End: Pos(302, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_127/test//com/google/javascript/jscomp/UnreachableCodeEliminationTest.java
Name: testIssue4177428a
Childs: [StatementAssertion<Begin: Pos(288, 5), End: Pos(301, 14)>,
]
@@@
Split test: com.google.javascript.jscomp.UnreachableCodeEliminationTest::testIssue4177428c
file: /root/workbench/exportInfo/d4j_buggy/Closure_127/test//com/google/javascript/jscomp/UnreachableCodeEliminationTest.java
Begin: Pos(324, 10)
End: Pos(342, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_127/test//com/google/javascript/jscomp/UnreachableCodeEliminationTest.java
Name: testIssue4177428c
Childs: [StatementAssertion<Begin: Pos(325, 5), End: Pos(341, 14)>,
]
--------------------
Run: Closure_32
@@@
Split test: com.google.javascript.jscomp.IntegrationTest::testIssue701
file: /root/workbench/exportInfo/d4j_buggy/Closure_32/test//com/google/javascript/jscomp/IntegrationTest.java
Begin: Pos(1660, 10)
End: Pos(1675, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_32/test//com/google/javascript/jscomp/IntegrationTest.java
Name: testIssue701
Childs: [StatementAssertion<Begin: Pos(1673, 5), End: Pos(1673, 45)>,
StatementAssertion<Begin: Pos(1674, 5), End: Pos(1674, 50)>,
]
---
public void testIssue701_catena_0() {
    String ascii = "/**\n" + " * @preserve\n" + "   This\n" + "     is\n" + "       ASCII    ART\n" + "*/";
    String result = "/*\n\n" + "   This\n" + "     is\n" + "       ASCII    ART\n" + "*/\n";
    testSame(createCompilerOptions(), ascii);
    
}

---
---
public void testIssue701_catena_1() {
    String ascii = "/**\n" + " * @preserve\n" + "   This\n" + "     is\n" + "       ASCII    ART\n" + "*/";
    String result = "/*\n\n" + "   This\n" + "     is\n" + "       ASCII    ART\n" + "*/\n";
    assertEquals(result, lastCompiler.toSource());
    
}

---
@@@
Split test: com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseLicense
file: /root/workbench/exportInfo/d4j_buggy/Closure_32/test//com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java
Begin: Pos(1281, 10)
End: Pos(1287, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_32/test//com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java
Name: testParseLicense
Childs: [StatementAssertion<Begin: Pos(1285, 5), End: Pos(1285, 19)>,
StatementAssertion<Begin: Pos(1286, 5), End: Pos(1286, 71)>,
]
---
public void testParseLicense_catena_0()throws Exception {
    Node node = new Node(1);
    this.fileLevelJsDocBuilder = node.getJsDocBuilderForNode();
    String comment = "@license Foo\nBar\n\nBaz*/";
    parse(comment);
    
}

---
---
public void testParseLicense_catena_1()throws Exception {
    Node node = new Node(1);
    this.fileLevelJsDocBuilder = node.getJsDocBuilderForNode();
    String comment = "@license Foo\nBar\n\nBaz*/";
    assertEquals(" Foo\nBar\n\nBaz", node.getJSDocInfo().getLicense());
    
}

---
@@@
Split test: com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParsePreserve
file: /root/workbench/exportInfo/d4j_buggy/Closure_32/test//com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java
Begin: Pos(1273, 10)
End: Pos(1279, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_32/test//com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java
Name: testParsePreserve
Childs: [StatementAssertion<Begin: Pos(1277, 5), End: Pos(1277, 19)>,
StatementAssertion<Begin: Pos(1278, 5), End: Pos(1278, 71)>,
]
---
public void testParsePreserve_catena_0()throws Exception {
    Node node = new Node(1);
    this.fileLevelJsDocBuilder = node.getJsDocBuilderForNode();
    String comment = "@preserve Foo\nBar\n\nBaz*/";
    parse(comment);
    
}

---
---
public void testParsePreserve_catena_1()throws Exception {
    Node node = new Node(1);
    this.fileLevelJsDocBuilder = node.getJsDocBuilderForNode();
    String comment = "@preserve Foo\nBar\n\nBaz*/";
    assertEquals(" Foo\nBar\n\nBaz", node.getJSDocInfo().getLicense());
    
}

---
@@@
Split test: com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseLicenseAscii
file: /root/workbench/exportInfo/d4j_buggy/Closure_32/test//com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java
Begin: Pos(1289, 10)
End: Pos(1295, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_32/test//com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java
Name: testParseLicenseAscii
Childs: [StatementAssertion<Begin: Pos(1293, 5), End: Pos(1293, 19)>,
StatementAssertion<Begin: Pos(1294, 5), End: Pos(1294, 76)>,
]
---
public void testParseLicenseAscii_catena_0()throws Exception {
    Node node = new Node(1);
    this.fileLevelJsDocBuilder = node.getJsDocBuilderForNode();
    String comment = "@license Foo\n *   Bar\n\n  Baz*/";
    parse(comment);
    
}

---
---
public void testParseLicenseAscii_catena_1()throws Exception {
    Node node = new Node(1);
    this.fileLevelJsDocBuilder = node.getJsDocBuilderForNode();
    String comment = "@license Foo\n *   Bar\n\n  Baz*/";
    assertEquals(" Foo\n   Bar\n\n  Baz", node.getJSDocInfo().getLicense());
    
}

---
--------------------
Run: Closure_173
@@@
Split test: com.google.javascript.jscomp.CodePrinterTest::testPrint
file: /root/workbench/exportInfo/d4j_buggy/Closure_173/test//com/google/javascript/jscomp/CodePrinterTest.java
Begin: Pos(166, 10)
End: Pos(370, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_173/test//com/google/javascript/jscomp/CodePrinterTest.java
Name: testPrint
Childs: [StatementAssertion<Begin: Pos(167, 5), End: Pos(167, 40)>,
StatementAssertion<Begin: Pos(168, 5), End: Pos(168, 44)>,
StatementAssertion<Begin: Pos(169, 5), End: Pos(169, 52)>,
StatementAssertion<Begin: Pos(170, 5), End: Pos(170, 40)>,
StatementAssertion<Begin: Pos(171, 5), End: Pos(171, 42)>,
StatementAssertion<Begin: Pos(172, 5), End: Pos(172, 77)>,
StatementAssertion<Begin: Pos(173, 5), End: Pos(173, 52)>,
StatementAssertion<Begin: Pos(174, 5), End: Pos(174, 41)>,
StatementAssertion<Begin: Pos(175, 5), End: Pos(177, 65)>,
StatementAssertion<Begin: Pos(180, 5), End: Pos(181, 43)>,
StatementAssertion<Begin: Pos(183, 5), End: Pos(184, 44)>,
StatementAssertion<Begin: Pos(186, 5), End: Pos(186, 68)>,
StatementAssertion<Begin: Pos(188, 5), End: Pos(188, 54)>,
StatementAssertion<Begin: Pos(189, 5), End: Pos(189, 39)>,
StatementAssertion<Begin: Pos(191, 5), End: Pos(192, 28)>,
StatementAssertion<Begin: Pos(195, 5), End: Pos(196, 39)>,
StatementAssertion<Begin: Pos(197, 5), End: Pos(198, 47)>,
StatementAssertion<Begin: Pos(199, 5), End: Pos(200, 43)>,
StatementAssertion<Begin: Pos(203, 5), End: Pos(204, 25)>,
StatementAssertion<Begin: Pos(205, 5), End: Pos(206, 33)>,
StatementAssertion<Begin: Pos(207, 5), End: Pos(208, 31)>,
StatementAssertion<Begin: Pos(209, 5), End: Pos(210, 29)>,
StatementAssertion<Begin: Pos(213, 5), End: Pos(213, 58)>,
StatementAssertion<Begin: Pos(214, 5), End: Pos(214, 54)>,
StatementAssertion<Begin: Pos(219, 5), End: Pos(219, 34)>,
StatementAssertion<Begin: Pos(220, 5), End: Pos(220, 36)>,
StatementAssertion<Begin: Pos(221, 5), End: Pos(221, 46)>,
StatementAssertion<Begin: Pos(224, 5), End: Pos(224, 46)>,
StatementAssertion<Begin: Pos(225, 5), End: Pos(225, 46)>,
StatementAssertion<Begin: Pos(228, 5), End: Pos(228, 56)>,
StatementAssertion<Begin: Pos(231, 5), End: Pos(231, 38)>,
StatementAssertion<Begin: Pos(232, 5), End: Pos(232, 40)>,
StatementAssertion<Begin: Pos(233, 5), End: Pos(233, 50)>,
StatementAssertion<Begin: Pos(236, 5), End: Pos(236, 50)>,
StatementAssertion<Begin: Pos(237, 5), End: Pos(237, 50)>,
StatementAssertion<Begin: Pos(239, 5), End: Pos(239, 60)>,
StatementAssertion<Begin: Pos(242, 5), End: Pos(242, 35)>,
StatementAssertion<Begin: Pos(243, 5), End: Pos(243, 37)>,
StatementAssertion<Begin: Pos(244, 5), End: Pos(244, 36)>,
StatementAssertion<Begin: Pos(245, 5), End: Pos(245, 36)>,
StatementAssertion<Begin: Pos(246, 5), End: Pos(246, 35)>,
StatementAssertion<Begin: Pos(249, 5), End: Pos(249, 67)>,
StatementAssertion<Begin: Pos(250, 5), End: Pos(250, 75)>,
StatementAssertion<Begin: Pos(253, 5), End: Pos(253, 32)>,
StatementAssertion<Begin: Pos(254, 5), End: Pos(254, 43)>,
StatementAssertion<Begin: Pos(255, 5), End: Pos(255, 36)>,
StatementAssertion<Begin: Pos(256, 5), End: Pos(256, 44)>,
StatementAssertion<Begin: Pos(257, 5), End: Pos(257, 67)>,
StatementAssertion<Begin: Pos(258, 5), End: Pos(258, 40)>,
StatementAssertion<Begin: Pos(259, 5), End: Pos(259, 38)>,
StatementAssertion<Begin: Pos(260, 5), End: Pos(260, 44)>,
StatementAssertion<Begin: Pos(261, 5), End: Pos(261, 42)>,
StatementAssertion<Begin: Pos(262, 5), End: Pos(262, 42)>,
StatementAssertion<Begin: Pos(263, 5), End: Pos(263, 43)>,
StatementAssertion<Begin: Pos(264, 5), End: Pos(264, 34)>,
StatementAssertion<Begin: Pos(267, 5), End: Pos(267, 52)>,
StatementAssertion<Begin: Pos(268, 5), End: Pos(268, 56)>,
StatementAssertion<Begin: Pos(269, 5), End: Pos(270, 43)>,
StatementAssertion<Begin: Pos(271, 5), End: Pos(272, 40)>,
StatementAssertion<Begin: Pos(273, 5), End: Pos(273, 65)>,
StatementAssertion<Begin: Pos(274, 5), End: Pos(274, 69)>,
StatementAssertion<Begin: Pos(275, 5), End: Pos(275, 58)>,
StatementAssertion<Begin: Pos(278, 5), End: Pos(278, 56)>,
StatementAssertion<Begin: Pos(281, 5), End: Pos(281, 52)>,
StatementAssertion<Begin: Pos(284, 5), End: Pos(284, 75)>,
StatementAssertion<Begin: Pos(285, 5), End: Pos(285, 69)>,
StatementAssertion<Begin: Pos(288, 5), End: Pos(288, 60)>,
StatementAssertion<Begin: Pos(289, 5), End: Pos(290, 39)>,
StatementAssertion<Begin: Pos(291, 5), End: Pos(291, 58)>,
StatementAssertion<Begin: Pos(293, 5), End: Pos(294, 34)>,
StatementAssertion<Begin: Pos(295, 5), End: Pos(296, 27)>,
StatementAssertion<Begin: Pos(297, 5), End: Pos(298, 43)>,
StatementAssertion<Begin: Pos(301, 5), End: Pos(301, 64)>,
StatementAssertion<Begin: Pos(304, 5), End: Pos(304, 38)>,
StatementAssertion<Begin: Pos(305, 5), End: Pos(305, 42)>,
StatementAssertion<Begin: Pos(306, 5), End: Pos(306, 64)>,
StatementAssertion<Begin: Pos(307, 5), End: Pos(307, 42)>,
StatementAssertion<Begin: Pos(308, 5), End: Pos(308, 42)>,
StatementAssertion<Begin: Pos(309, 5), End: Pos(309, 64)>,
StatementAssertion<Begin: Pos(312, 5), End: Pos(312, 38)>,
StatementAssertion<Begin: Pos(313, 5), End: Pos(313, 40)>,
StatementAssertion<Begin: Pos(314, 5), End: Pos(314, 52)>,
StatementAssertion<Begin: Pos(315, 5), End: Pos(315, 53)>,
StatementAssertion<Begin: Pos(316, 5), End: Pos(316, 45)>,
StatementAssertion<Begin: Pos(317, 5), End: Pos(317, 34)>,
StatementAssertion<Begin: Pos(318, 5), End: Pos(318, 34)>,
StatementAssertion<Begin: Pos(321, 5), End: Pos(321, 35)>,
StatementAssertion<Begin: Pos(322, 5), End: Pos(322, 34)>,
StatementAssertion<Begin: Pos(323, 5), End: Pos(323, 36)>,
StatementAssertion<Begin: Pos(326, 5), End: Pos(326, 80)>,
StatementAssertion<Begin: Pos(327, 5), End: Pos(327, 72)>,
StatementAssertion<Begin: Pos(328, 5), End: Pos(329, 44)>,
StatementAssertion<Begin: Pos(332, 5), End: Pos(332, 52)>,
StatementAssertion<Begin: Pos(333, 5), End: Pos(333, 52)>,
StatementAssertion<Begin: Pos(334, 5), End: Pos(334, 54)>,
StatementAssertion<Begin: Pos(337, 5), End: Pos(337, 60)>,
StatementAssertion<Begin: Pos(340, 5), End: Pos(340, 34)>,
StatementAssertion<Begin: Pos(341, 5), End: Pos(341, 36)>,
StatementAssertion<Begin: Pos(342, 5), End: Pos(342, 36)>,
StatementAssertion<Begin: Pos(343, 5), End: Pos(343, 38)>,
StatementAssertion<Begin: Pos(344, 5), End: Pos(344, 42)>,
StatementAssertion<Begin: Pos(345, 5), End: Pos(345, 40)>,
StatementAssertion<Begin: Pos(346, 5), End: Pos(346, 46)>,
StatementAssertion<Begin: Pos(347, 5), End: Pos(347, 50)>,
StatementAssertion<Begin: Pos(348, 5), End: Pos(348, 46)>,
StatementAssertion<Begin: Pos(349, 5), End: Pos(349, 50)>,
StatementAssertion<Begin: Pos(350, 5), End: Pos(350, 52)>,
StatementAssertion<Begin: Pos(351, 5), End: Pos(351, 50)>,
StatementAssertion<Begin: Pos(352, 5), End: Pos(352, 46)>,
StatementAssertion<Begin: Pos(353, 5), End: Pos(353, 46)>,
StatementAssertion<Begin: Pos(354, 5), End: Pos(354, 50)>,
StatementAssertion<Begin: Pos(355, 5), End: Pos(355, 54)>,
StatementAssertion<Begin: Pos(356, 5), End: Pos(356, 48)>,
StatementAssertion<Begin: Pos(357, 5), End: Pos(357, 52)>,
StatementAssertion<Begin: Pos(358, 5), End: Pos(358, 54)>,
StatementAssertion<Begin: Pos(359, 5), End: Pos(359, 62)>,
StatementAssertion<Begin: Pos(360, 5), End: Pos(360, 44)>,
StatementAssertion<Begin: Pos(361, 5), End: Pos(361, 48)>,
StatementAssertion<Begin: Pos(364, 5), End: Pos(364, 38)>,
StatementAssertion<Begin: Pos(365, 5), End: Pos(365, 36)>,
StatementAssertion<Begin: Pos(366, 5), End: Pos(366, 46)>,
StatementAssertion<Begin: Pos(367, 5), End: Pos(367, 48)>,
StatementAssertion<Begin: Pos(368, 5), End: Pos(368, 52)>,
StatementAssertion<Begin: Pos(369, 5), End: Pos(369, 70)>,
]
---
public void testPrint_catena_0() {
    assertPrint("10 + a + b", "10+a+b");
    
}

---
---
public void testPrint_catena_1() {
    assertPrint("10 + (30*50)", "10+30*50");
    
}

---
---
public void testPrint_catena_2() {
    assertPrint("with(x) { x + 3; }", "with(x)x+3");
    
}

---
---
public void testPrint_catena_3() {
    assertPrint("\"aa'a\"", "\"aa'a\"");
    
}

---
---
public void testPrint_catena_4() {
    assertPrint("\"aa\\\"a\"", "'aa\"a'");
    
}

---
---
public void testPrint_catena_5() {
    assertPrint("function foo()\n{return 10;}", "function foo(){return 10}");
    
}

---
---
public void testPrint_catena_6() {
    assertPrint("a instanceof b", "a instanceof b");
    
}

---
---
public void testPrint_catena_7() {
    assertPrint("typeof(a)", "typeof a");
    
}

---
---
public void testPrint_catena_8() {
    assertPrint("var foo = x ? { a : 1 } : {a: 3, b:4, \"default\": 5, \"foo-bar\": 6}", "var foo=x?{a:1}:{a:3,b:4,\"default\":5,\"foo-bar\":6}");
    
}

---
---
public void testPrint_catena_9() {
    assertPrint("function foo(){throw 'error';}", "function foo(){throw\"error\";}");
    
}

---
---
public void testPrint_catena_10() {
    assertPrint("if (true) function foo(){return}", "if(true){function foo(){return}}");
    
}

---
---
public void testPrint_catena_11() {
    assertPrint("var x = 10; { var y = 20; }", "var x=10;var y=20");
    
}

---
---
public void testPrint_catena_12() {
    assertPrint("while (x-- > 0);", "while(x-- >0);");
    
}

---
---
public void testPrint_catena_13() {
    assertPrint("x-- >> 1", "x-- >>1");
    
}

---
---
public void testPrint_catena_14() {
    assertPrint("(function () {})(); ", "(function(){})()");
    
}

---
---
public void testPrint_catena_15() {
    assertPrint("var a,b,c,d;a || (b&& c) && (a || d)", "var a,b,c,d;a||b&&c&&(a||d)");
    
}

---
---
public void testPrint_catena_16() {
    assertPrint("var a,b,c; a || (b || c); a * (b * c); a | (b | c)", "var a,b,c;a||(b||c);a*(b*c);a|(b|c)");
    
}

---
---
public void testPrint_catena_17() {
    assertPrint("var a,b,c; a / b / c;a / (b / c); a - (b - c);", "var a,b,c;a/b/c;a/(b/c);a-(b-c)");
    
}

---
---
public void testPrint_catena_18() {
    assertPrint("var a,b; a = b = 3;", "var a,b;a=b=3");
    
}

---
---
public void testPrint_catena_19() {
    assertPrint("var a,b,c,d; a = (b = c = (d = 3));", "var a,b,c,d;a=b=c=d=3");
    
}

---
---
public void testPrint_catena_20() {
    assertPrint("var a,b,c; a += (b = c += 3);", "var a,b,c;a+=b=c+=3");
    
}

---
---
public void testPrint_catena_21() {
    assertPrint("var a,b,c; a *= (b -= c);", "var a,b,c;a*=b-=c");
    
}

---
---
public void testPrint_catena_22() {
    assertPrint("a ? delete b[0] : 3", "a?delete b[0]:3");
    
}

---
---
public void testPrint_catena_23() {
    assertPrint("(delete a[0])/10", "delete a[0]/10");
    
}

---
---
public void testPrint_catena_24() {
    assertPrint("new A", "new A");
    
}

---
---
public void testPrint_catena_25() {
    assertPrint("new A()", "new A");
    
}

---
---
public void testPrint_catena_26() {
    assertPrint("new A('x')", "new A(\"x\")");
    
}

---
---
public void testPrint_catena_27() {
    assertPrint("new A().a()", "(new A).a()");
    
}

---
---
public void testPrint_catena_28() {
    assertPrint("(new A).a()", "(new A).a()");
    
}

---
---
public void testPrint_catena_29() {
    assertPrint("new A('y').a()", "(new A(\"y\")).a()");
    
}

---
---
public void testPrint_catena_30() {
    assertPrint("new A.B", "new A.B");
    
}

---
---
public void testPrint_catena_31() {
    assertPrint("new A.B()", "new A.B");
    
}

---
---
public void testPrint_catena_32() {
    assertPrint("new A.B('z')", "new A.B(\"z\")");
    
}

---
---
public void testPrint_catena_33() {
    assertPrint("(new A.B).a()", "(new A.B).a()");
    
}

---
---
public void testPrint_catena_34() {
    assertPrint("new A.B().a()", "(new A.B).a()");
    
}

---
---
public void testPrint_catena_35() {
    assertPrint("new A.B('w').a()", "(new A.B(\"w\")).a()");
    
}

---
---
public void testPrint_catena_36() {
    assertPrint("x + +y", "x+ +y");
    
}

---
---
public void testPrint_catena_37() {
    assertPrint("x - (-y)", "x- -y");
    
}

---
---
public void testPrint_catena_38() {
    assertPrint("x++ +y", "x++ +y");
    
}

---
---
public void testPrint_catena_39() {
    assertPrint("x-- -y", "x-- -y");
    
}

---
---
public void testPrint_catena_40() {
    assertPrint("x++ -y", "x++-y");
    
}

---
---
public void testPrint_catena_41() {
    assertPrint("foo:for(;;){break foo;}", "foo:for(;;)break foo");
    
}

---
---
public void testPrint_catena_42() {
    assertPrint("foo:while(1){continue foo;}", "foo:while(1)continue foo");
    
}

---
---
public void testPrint_catena_43() {
    assertPrint("({})", "({})");
    
}

---
---
public void testPrint_catena_44() {
    assertPrint("var x = {};", "var x={}");
    
}

---
---
public void testPrint_catena_45() {
    assertPrint("({}).x", "({}).x");
    
}

---
---
public void testPrint_catena_46() {
    assertPrint("({})['x']", "({})[\"x\"]");
    
}

---
---
public void testPrint_catena_47() {
    assertPrint("({}) instanceof Object", "({})instanceof Object");
    
}

---
---
public void testPrint_catena_48() {
    assertPrint("({}) || 1", "({})||1");
    
}

---
---
public void testPrint_catena_49() {
    assertPrint("1 || ({})", "1||{}");
    
}

---
---
public void testPrint_catena_50() {
    assertPrint("({}) ? 1 : 2", "({})?1:2");
    
}

---
---
public void testPrint_catena_51() {
    assertPrint("0 ? ({}) : 2", "0?{}:2");
    
}

---
---
public void testPrint_catena_52() {
    assertPrint("0 ? 1 : ({})", "0?1:{}");
    
}

---
---
public void testPrint_catena_53() {
    assertPrint("typeof ({})", "typeof{}");
    
}

---
---
public void testPrint_catena_54() {
    assertPrint("f({})", "f({})");
    
}

---
---
public void testPrint_catena_55() {
    assertPrint("(function(){})", "(function(){})");
    
}

---
---
public void testPrint_catena_56() {
    assertPrint("(function(){})()", "(function(){})()");
    
}

---
---
public void testPrint_catena_57() {
    assertPrint("(function(){})instanceof Object", "(function(){})instanceof Object");
    
}

---
---
public void testPrint_catena_58() {
    assertPrint("(function(){}).bind().call()", "(function(){}).bind().call()");
    
}

---
---
public void testPrint_catena_59() {
    assertPrint("var x = function() { };", "var x=function(){}");
    
}

---
---
public void testPrint_catena_60() {
    assertPrint("var x = function() { }();", "var x=function(){}()");
    
}

---
---
public void testPrint_catena_61() {
    assertPrint("(function() {}), 2", "(function(){}),2");
    
}

---
---
public void testPrint_catena_62() {
    assertPrint("(function f(){})", "(function f(){})");
    
}

---
---
public void testPrint_catena_63() {
    assertPrint("function f(){}", "function f(){}");
    
}

---
---
public void testPrint_catena_64() {
    assertPrint("({ 'a': 4, '\\u0100': 4 })", "({\"a\":4,\"\\u0100\":4})");
    
}

---
---
public void testPrint_catena_65() {
    assertPrint("({ a: 4, '\\u0100': 4 })", "({a:4,\"\\u0100\":4})");
    
}

---
---
public void testPrint_catena_66() {
    assertPrint("if (true) { alert();}", "if(true)alert()");
    
}

---
---
public void testPrint_catena_67() {
    assertPrint("if (false) {} else {alert(\"a\");}", "if(false);else alert(\"a\")");
    
}

---
---
public void testPrint_catena_68() {
    assertPrint("for(;;) { alert();};", "for(;;)alert()");
    
}

---
---
public void testPrint_catena_69() {
    assertPrint("do { alert(); } while(true);", "do alert();while(true)");
    
}

---
---
public void testPrint_catena_70() {
    assertPrint("myLabel: { alert();}", "myLabel:alert()");
    
}

---
---
public void testPrint_catena_71() {
    assertPrint("myLabel: for(;;) continue myLabel;", "myLabel:for(;;)continue myLabel");
    
}

---
---
public void testPrint_catena_72() {
    assertPrint("if (true) var x; x = 4;", "if(true)var x;x=4");
    
}

---
---
public void testPrint_catena_73() {
    assertPrint("\\u00fb", "\\u00fb");
    
}

---
---
public void testPrint_catena_74() {
    assertPrint("\\u00fa=1", "\\u00fa=1");
    
}

---
---
public void testPrint_catena_75() {
    assertPrint("function \\u00f9(){}", "function \\u00f9(){}");
    
}

---
---
public void testPrint_catena_76() {
    assertPrint("x.\\u00f8", "x.\\u00f8");
    
}

---
---
public void testPrint_catena_77() {
    assertPrint("x.\\u00f8", "x.\\u00f8");
    
}

---
---
public void testPrint_catena_78() {
    assertPrint("abc\\u4e00\\u4e01jkl", "abc\\u4e00\\u4e01jkl");
    
}

---
---
public void testPrint_catena_79() {
    assertPrint("! ! true", "!!true");
    
}

---
---
public void testPrint_catena_80() {
    assertPrint("!(!(true))", "!!true");
    
}

---
---
public void testPrint_catena_81() {
    assertPrint("typeof(void(0))", "typeof void 0");
    
}

---
---
public void testPrint_catena_82() {
    assertPrint("typeof(void(!0))", "typeof void!0");
    
}

---
---
public void testPrint_catena_83() {
    assertPrint("+ - + + - + 3", "+-+ +-+3");
    
}

---
---
public void testPrint_catena_84() {
    assertPrint("+(--x)", "+--x");
    
}

---
---
public void testPrint_catena_85() {
    assertPrint("-(++x)", "-++x");
    
}

---
---
public void testPrint_catena_86() {
    assertPrint("-(--x)", "- --x");
    
}

---
---
public void testPrint_catena_87() {
    assertPrint("!(~~5)", "!~~5");
    
}

---
---
public void testPrint_catena_88() {
    assertPrint("~(a/b)", "~(a/b)");
    
}

---
---
public void testPrint_catena_89() {
    assertPrint("new (foo.bar()).factory(baz)", "new (foo.bar().factory)(baz)");
    
}

---
---
public void testPrint_catena_90() {
    assertPrint("new (bar()).factory(baz)", "new (bar().factory)(baz)");
    
}

---
---
public void testPrint_catena_91() {
    assertPrint("new (new foobar(x)).factory(baz)", "new (new foobar(x)).factory(baz)");
    
}

---
---
public void testPrint_catena_92() {
    assertPrint("a ? b : (c ? d : e)", "a?b:c?d:e");
    
}

---
---
public void testPrint_catena_93() {
    assertPrint("a ? (b ? c : d) : e", "a?b?c:d:e");
    
}

---
---
public void testPrint_catena_94() {
    assertPrint("(a ? b : c) ? d : e", "(a?b:c)?d:e");
    
}

---
---
public void testPrint_catena_95() {
    assertPrint("if (x) if (y); else;", "if(x)if(y);else;");
    
}

---
---
public void testPrint_catena_96() {
    assertPrint("a,b,c", "a,b,c");
    
}

---
---
public void testPrint_catena_97() {
    assertPrint("(a,b),c", "a,b,c");
    
}

---
---
public void testPrint_catena_98() {
    assertPrint("a,(b,c)", "a,b,c");
    
}

---
---
public void testPrint_catena_99() {
    assertPrint("x=a,b,c", "x=a,b,c");
    
}

---
---
public void testPrint_catena_100() {
    assertPrint("x=(a,b),c", "x=(a,b),c");
    
}

---
---
public void testPrint_catena_101() {
    assertPrint("x=a,(b,c)", "x=a,b,c");
    
}

---
---
public void testPrint_catena_102() {
    assertPrint("x=a,y=b,z=c", "x=a,y=b,z=c");
    
}

---
---
public void testPrint_catena_103() {
    assertPrint("x=(a,y=b,z=c)", "x=(a,y=b,z=c)");
    
}

---
---
public void testPrint_catena_104() {
    assertPrint("x=[a,b,c,d]", "x=[a,b,c,d]");
    
}

---
---
public void testPrint_catena_105() {
    assertPrint("x=[(a,b,c),d]", "x=[(a,b,c),d]");
    
}

---
---
public void testPrint_catena_106() {
    assertPrint("x=[(a,(b,c)),d]", "x=[(a,b,c),d]");
    
}

---
---
public void testPrint_catena_107() {
    assertPrint("x=[a,(b,c,d)]", "x=[a,(b,c,d)]");
    
}

---
---
public void testPrint_catena_108() {
    assertPrint("var x=(a,b)", "var x=(a,b)");
    
}

---
---
public void testPrint_catena_109() {
    assertPrint("var x=a,b,c", "var x=a,b,c");
    
}

---
---
public void testPrint_catena_110() {
    assertPrint("var x=(a,b),c", "var x=(a,b),c");
    
}

---
---
public void testPrint_catena_111() {
    assertPrint("var x=a,b=(c,d)", "var x=a,b=(c,d)");
    
}

---
---
public void testPrint_catena_112() {
    assertPrint("foo(a,b,c,d)", "foo(a,b,c,d)");
    
}

---
---
public void testPrint_catena_113() {
    assertPrint("foo((a,b,c),d)", "foo((a,b,c),d)");
    
}

---
---
public void testPrint_catena_114() {
    assertPrint("foo((a,(b,c)),d)", "foo((a,b,c),d)");
    
}

---
---
public void testPrint_catena_115() {
    assertPrint("f(a+b,(c,d,(e,f,g)))", "f(a+b,(c,d,e,f,g))");
    
}

---
---
public void testPrint_catena_116() {
    assertPrint("({}) , 1 , 2", "({}),1,2");
    
}

---
---
public void testPrint_catena_117() {
    assertPrint("({}) , {} , {}", "({}),{},{}");
    
}

---
---
public void testPrint_catena_118() {
    assertPrint("if (x){}", "if(x);");
    
}

---
---
public void testPrint_catena_119() {
    assertPrint("if(x);", "if(x);");
    
}

---
---
public void testPrint_catena_120() {
    assertPrint("if(x)if(y);", "if(x)if(y);");
    
}

---
---
public void testPrint_catena_121() {
    assertPrint("if(x){if(y);}", "if(x)if(y);");
    
}

---
---
public void testPrint_catena_122() {
    assertPrint("if(x){if(y){};;;}", "if(x)if(y);");
    
}

---
---
public void testPrint_catena_123() {
    assertPrint("if(x){;;function y(){};;}", "if(x){function y(){}}");
    
}

---
@@@
Split test: com.google.javascript.jscomp.CodePrinterTest::testIssue1062
file: /root/workbench/exportInfo/d4j_buggy/Closure_173/test//com/google/javascript/jscomp/CodePrinterTest.java
# check: Use pattern matching: .assertPrintSame
Begin: Pos(1571, 10)
End: Pos(1573, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_173/test//com/google/javascript/jscomp/CodePrinterTest.java
Name: testIssue1062
Childs: [StatementAssertion<Begin: Pos(1572, 5), End: Pos(1572, 33)>,
]
@@@
Split test: com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest::testAssocitivity
file: /root/workbench/exportInfo/d4j_buggy/Closure_173/test//com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java
Begin: Pos(458, 10)
End: Pos(462, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_173/test//com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java
Name: testAssocitivity
Childs: [StatementAssertion<Begin: Pos(459, 5), End: Pos(460, 62)>,
StatementAssertion<Begin: Pos(461, 5), End: Pos(461, 66)>,
]
---
public void testAssocitivity_catena_0() {
    test("var a,b,c; a || (b || c); a * (b * c); a | (b | c)", "var a,b,c; (a || b) || c; (a * b) * c; (a | b) | c");
    
}

---
---
public void testAssocitivity_catena_1() {
    testSame("var a,b,c; a % (b % c); a / (b / c); a - (b - c);");
    
}

---
--------------------
Run: Closure_66
@@@
Split test: com.google.javascript.jscomp.TypeCheckTest::testGetTypedPercent5
file: /root/workbench/exportInfo/d4j_buggy/Closure_66/test//com/google/javascript/jscomp/TypeCheckTest.java
Begin: Pos(7782, 10)
End: Pos(7785, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_66/test//com/google/javascript/jscomp/TypeCheckTest.java
Name: testGetTypedPercent5
Childs: [StatementAssertion<Begin: Pos(7784, 5), End: Pos(7784, 50)>,
]
@@@
Split test: com.google.javascript.jscomp.TypeCheckTest::testGetTypedPercent6
file: /root/workbench/exportInfo/d4j_buggy/Closure_66/test//com/google/javascript/jscomp/TypeCheckTest.java
Begin: Pos(7787, 10)
End: Pos(7790, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_66/test//com/google/javascript/jscomp/TypeCheckTest.java
Name: testGetTypedPercent6
Childs: [StatementAssertion<Begin: Pos(7789, 5), End: Pos(7789, 50)>,
]
--------------------
Run: Closure_135
@@@
Split test: com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest::testRewritePrototypeMethods2
file: /root/workbench/exportInfo/d4j_buggy/Closure_135/test//com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java
# check: Use pattern matching: .enableTypeCheck
Use pattern matching: .checkTypes
Begin: Pos(141, 10)
End: Pos(147, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_135/test//com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java
Name: testRewritePrototypeMethods2
Childs: [StatementAssertion<Begin: Pos(143, 5), End: Pos(143, 38)>,
StatementAssertion<Begin: Pos(144, 5), End: Pos(146, 74)>,
]
---
public void testRewritePrototypeMethods2_catena_0()throws Exception {
    enableTypeCheck(CheckLevel.ERROR);
    
}

---
---
public void testRewritePrototypeMethods2_catena_1()throws Exception {
    checkTypes(RewritePrototypeMethodTestInput.INPUT, RewritePrototypeMethodTestInput.EXPECTED, RewritePrototypeMethodTestInput.EXPECTED_TYPE_CHECKING_ON);
    
}

---
@@@
Split test: com.google.javascript.jscomp.TypeCheckTest::testGoodExtends9
file: /root/workbench/exportInfo/d4j_buggy/Closure_135/test//com/google/javascript/jscomp/TypeCheckTest.java
Begin: Pos(2635, 10)
End: Pos(2642, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_135/test//com/google/javascript/jscomp/TypeCheckTest.java
Name: testGoodExtends9
Childs: [StatementAssertion<Begin: Pos(2636, 5), End: Pos(2641, 63)>,
]
--------------------
Run: Closure_160
@@@
Split test: com.google.javascript.jscomp.CommandLineRunnerTest::testCheckSymbolsOverrideForQuiet
file: /root/workbench/exportInfo/d4j_buggy/Closure_160/test//com/google/javascript/jscomp/CommandLineRunnerTest.java
Begin: Pos(227, 10)
End: Pos(231, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_160/test//com/google/javascript/jscomp/CommandLineRunnerTest.java
Name: testCheckSymbolsOverrideForQuiet
Childs: [StatementAssertion<Begin: Pos(230, 5), End: Pos(230, 49)>,
]
--------------------
Run: Closure_24
@@@
Split test: com.google.javascript.jscomp.ScopedAliasesTest::testNonAliasLocal
file: /root/workbench/exportInfo/d4j_buggy/Closure_24/test//com/google/javascript/jscomp/ScopedAliasesTest.java
Begin: Pos(405, 10)
End: Pos(415, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_24/test//com/google/javascript/jscomp/ScopedAliasesTest.java
Name: testNonAliasLocal
Childs: [StatementAssertion<Begin: Pos(406, 5), End: Pos(406, 78)>,
StatementAssertion<Begin: Pos(407, 5), End: Pos(408, 50)>,
StatementAssertion<Begin: Pos(409, 5), End: Pos(410, 50)>,
StatementAssertion<Begin: Pos(411, 5), End: Pos(412, 50)>,
StatementAssertion<Begin: Pos(413, 5), End: Pos(414, 50)>,
]
---
public void testNonAliasLocal_catena_0() {
    testScopedFailure("var x = 10", ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL);
    
}

---
---
public void testNonAliasLocal_catena_1() {
    testScopedFailure("var x = goog.dom + 10", ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL);
    
}

---
---
public void testNonAliasLocal_catena_2() {
    testScopedFailure("var x = goog['dom']", ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL);
    
}

---
---
public void testNonAliasLocal_catena_3() {
    testScopedFailure("var x = goog.dom, y = 10", ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL);
    
}

---
---
public void testNonAliasLocal_catena_4() {
    testScopedFailure("function f() {}", ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL);
    
}

---
--------------------
Run: Closure_162
@@@
Split test: com.google.javascript.jscomp.ScopedAliasesTest::testForwardJsDoc
file: /root/workbench/exportInfo/d4j_buggy/Closure_162/test//com/google/javascript/jscomp/ScopedAliasesTest.java
# check: Use pattern matching: .verifyTypes
Begin: Pos(311, 10)
End: Pos(330, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_162/test//com/google/javascript/jscomp/ScopedAliasesTest.java
Name: testForwardJsDoc
Childs: [StatementAssertion<Begin: Pos(312, 5), End: Pos(328, 65)>,
StatementAssertion<Begin: Pos(329, 5), End: Pos(329, 18)>,
]
---
public void testForwardJsDoc_catena_0() {
    testScoped("/**\n" + " * @constructor\n" + " */\n" + "foo.Foo = function() {};" + "/** @param {Foo.Bar} x */ function actual(x) {3}" + "var Foo = foo.Foo;" + "/** @constructor */ Foo.Bar = function() {};" + "/** @param {foo.Foo.Bar} x */ function expected(x) {}", "/**\n" + " * @constructor\n" + " */\n" + "foo.Foo = function() {};" + "/** @param {foo.Foo.Bar} x */ function actual(x) {3}" + "/** @constructor */ foo.Foo.Bar = function() {};" + "/** @param {foo.Foo.Bar} x */ function expected(x) {}");
    
}

---
---
public void testForwardJsDoc_catena_1() {
    verifyTypes();
    
}

---
--------------------
Run: Closure_153
@@@
Split test: com.google.javascript.jscomp.NormalizeTest::testDuplicateVarInExterns
file: /root/workbench/exportInfo/d4j_buggy/Closure_153/test//com/google/javascript/jscomp/NormalizeTest.java
Begin: Pos(94, 10)
End: Pos(98, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_153/test//com/google/javascript/jscomp/NormalizeTest.java
Name: testDuplicateVarInExterns
Childs: [StatementAssertion<Begin: Pos(95, 5), End: Pos(97, 21)>,
]
@@@
Split test: com.google.javascript.jscomp.NormalizeTest::testMakeLocalNamesUnique
file: /root/workbench/exportInfo/d4j_buggy/Closure_153/test//com/google/javascript/jscomp/NormalizeTest.java
Begin: Pos(225, 10)
End: Pos(268, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_153/test//com/google/javascript/jscomp/NormalizeTest.java
Name: testMakeLocalNamesUnique
Childs: [StatementAssertion<Begin: Pos(231, 5), End: Pos(231, 23)>,
StatementAssertion<Begin: Pos(234, 5), End: Pos(234, 19)>,
StatementAssertion<Begin: Pos(237, 5), End: Pos(238, 49)>,
StatementAssertion<Begin: Pos(239, 5), End: Pos(240, 68)>,
StatementAssertion<Begin: Pos(241, 5), End: Pos(244, 41)>,
StatementAssertion<Begin: Pos(247, 5), End: Pos(248, 79)>,
StatementAssertion<Begin: Pos(251, 5), End: Pos(252, 34)>,
StatementAssertion<Begin: Pos(253, 5), End: Pos(254, 63)>,
StatementAssertion<Begin: Pos(255, 5), End: Pos(256, 65)>,
StatementAssertion<Begin: Pos(259, 5), End: Pos(259, 69)>,
StatementAssertion<Begin: Pos(262, 5), End: Pos(263, 69)>,
StatementAssertion<Begin: Pos(266, 5), End: Pos(267, 41)>,
]
---
public void testMakeLocalNamesUnique_catena_0() {
    if( ! Normalize.MAKE_LOCAL_NAMES_UNIQUE) {
        return;
        
    }
    testSame("var a;");
    
}

---
---
public void testMakeLocalNamesUnique_catena_1() {
    if( ! Normalize.MAKE_LOCAL_NAMES_UNIQUE) {
        return;
        
    }
    testSame("a;");
    
}

---
---
public void testMakeLocalNamesUnique_catena_2() {
    if( ! Normalize.MAKE_LOCAL_NAMES_UNIQUE) {
        return;
        
    }
    test("var a;function foo(a){var b;a}", "var a;function foo(a$$1){var b;a$$1}");
    
}

---
---
public void testMakeLocalNamesUnique_catena_3() {
    if( ! Normalize.MAKE_LOCAL_NAMES_UNIQUE) {
        return;
        
    }
    test("var a;function foo(){var b;a}function boo(){var b;a}", "var a;function foo(){var b;a}function boo(){var b$$1;a}");
    
}

---
---
public void testMakeLocalNamesUnique_catena_4() {
    if( ! Normalize.MAKE_LOCAL_NAMES_UNIQUE) {
        return;
        
    }
    test("function foo(a){var b}" + "function boo(a){var b}", "function foo(a){var b}" + "function boo(a$$1){var b$$1}");
    
}

---
---
public void testMakeLocalNamesUnique_catena_5() {
    if( ! Normalize.MAKE_LOCAL_NAMES_UNIQUE) {
        return;
        
    }
    test("var a = function foo(){foo()};var b = function foo(){foo()};", "var a = function foo(){foo()};var b = function foo$$1(){foo$$1()};");
    
}

---
---
public void testMakeLocalNamesUnique_catena_6() {
    if( ! Normalize.MAKE_LOCAL_NAMES_UNIQUE) {
        return;
        
    }
    test("try { } catch(e) {e;}", "try { } catch(e) {e;}");
    
}

---
---
public void testMakeLocalNamesUnique_catena_7() {
    if( ! Normalize.MAKE_LOCAL_NAMES_UNIQUE) {
        return;
        
    }
    test("try { } catch(e) {e;}; try { } catch(e) {e;}", "try { } catch(e) {e;}; try { } catch(e$$1) {e$$1;}");
    
}

---
---
public void testMakeLocalNamesUnique_catena_8() {
    if( ! Normalize.MAKE_LOCAL_NAMES_UNIQUE) {
        return;
        
    }
    test("try { } catch(e) {e; try { } catch(e) {e;}};", "try { } catch(e) {e; try { } catch(e$$1) {e$$1;} }; ");
    
}

---
---
public void testMakeLocalNamesUnique_catena_9() {
    if( ! Normalize.MAKE_LOCAL_NAMES_UNIQUE) {
        return;
        
    }
    test("/** @suppress {duplicate} */\nvar window;", "var window;");
    
}

---
---
public void testMakeLocalNamesUnique_catena_10() {
    if( ! Normalize.MAKE_LOCAL_NAMES_UNIQUE) {
        return;
        
    }
    test("/** @suppress {duplicate} */\nvar window;" + "/** @suppress {duplicate} */\nvar window;", "var window;");
    
}

---
---
public void testMakeLocalNamesUnique_catena_11() {
    if( ! Normalize.MAKE_LOCAL_NAMES_UNIQUE) {
        return;
        
    }
    test("function f() {var window}", "function f() {var window$$1}");
    
}

---
--------------------
Run: Closure_56
@@@
Split test: com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest::testExceptNoNewLine
file: /root/workbench/exportInfo/d4j_buggy/Closure_56/test//com/google/javascript/jscomp/JSCompilerSourceExcerptProviderTest.java
Begin: Pos(64, 10)
End: Pos(69, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_56/test//com/google/javascript/jscomp/JSCompilerSourceExcerptProviderTest.java
Name: testExceptNoNewLine
Childs: [StatementAssertion<Begin: Pos(65, 5), End: Pos(65, 71)>,
StatementAssertion<Begin: Pos(66, 5), End: Pos(66, 72)>,
StatementAssertion<Begin: Pos(67, 5), End: Pos(67, 71)>,
StatementAssertion<Begin: Pos(68, 5), End: Pos(68, 58)>,
]
---
public void testExceptNoNewLine_catena_0()throws Exception {
    assertEquals("foo2:first line", provider.getSourceLine("foo2", 1));
    
}

---
---
public void testExceptNoNewLine_catena_1()throws Exception {
    assertEquals("foo2:second line", provider.getSourceLine("foo2", 2));
    
}

---
---
public void testExceptNoNewLine_catena_2()throws Exception {
    assertEquals("foo2:third line", provider.getSourceLine("foo2", 3));
    
}

---
---
public void testExceptNoNewLine_catena_3()throws Exception {
    assertEquals(null, provider.getSourceLine("foo2", 4));
    
}

---
@@@
Split test: com.google.javascript.jscomp.JsMessageExtractorTest::testSyntaxError1
file: /root/workbench/exportInfo/d4j_buggy/Closure_56/test//com/google/javascript/jscomp/JsMessageExtractorTest.java
# check: Use list matching: .extractMessage
StatementExpression is in safe: <.extractMessage>
Begin: Pos(54, 10)
End: Pos(64, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_56/test//com/google/javascript/jscomp/JsMessageExtractorTest.java
Name: testSyntaxError1
Childs: [StatementAssertion<Begin: Pos(57, 7), End: Pos(57, 33)>,
StatementAssertion<Begin: Pos(59, 7), End: Pos(59, 65)>,
StatementAssertion<Begin: Pos(60, 7), End: Pos(61, 62)>,
StatementAssertion<Begin: Pos(62, 7), End: Pos(62, 61)>,
]
---
public void testSyntaxError1_catena_0() {
    try {
        extractMessage("if (true) {}}");
        fail("Expected exception");
        
    }
    catch(RuntimeException e) {
        
    }
}

---
---
public void testSyntaxError1_catena_1() {
    try {
        extractMessage("if (true) {}}");
        
    }
    catch(RuntimeException e) {
        assertTrue(e.getMessage().contains("JSCompiler errors\n"));
        
    }
}

---
---
public void testSyntaxError1_catena_2() {
    try {
        extractMessage("if (true) {}}");
        
    }
    catch(RuntimeException e) {
        assertTrue(e.getMessage().contains("testcode:1: ERROR - Parse error. syntax error\n"));
        
    }
}

---
---
public void testSyntaxError1_catena_3() {
    try {
        extractMessage("if (true) {}}");
        
    }
    catch(RuntimeException e) {
        assertTrue(e.getMessage().contains("if (true) {}}\n"));
        
    }
}

---
@@@
Split test: com.google.javascript.jscomp.JsMessageExtractorTest::testSyntaxError2
file: /root/workbench/exportInfo/d4j_buggy/Closure_56/test//com/google/javascript/jscomp/JsMessageExtractorTest.java
# check: Use list matching: .extractMessage
StatementExpression is in safe: <.extractMessage>
Begin: Pos(66, 10)
End: Pos(76, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_56/test//com/google/javascript/jscomp/JsMessageExtractorTest.java
Name: testSyntaxError2
Childs: [StatementAssertion<Begin: Pos(69, 7), End: Pos(69, 33)>,
StatementAssertion<Begin: Pos(71, 7), End: Pos(71, 65)>,
StatementAssertion<Begin: Pos(72, 7), End: Pos(73, 62)>,
StatementAssertion<Begin: Pos(74, 7), End: Pos(74, 61)>,
]
---
public void testSyntaxError2_catena_0() {
    try {
        extractMessage("", "if (true) {}}");
        fail("Expected exception");
        
    }
    catch(RuntimeException e) {
        
    }
}

---
---
public void testSyntaxError2_catena_1() {
    try {
        extractMessage("", "if (true) {}}");
        
    }
    catch(RuntimeException e) {
        assertTrue(e.getMessage().contains("JSCompiler errors\n"));
        
    }
}

---
---
public void testSyntaxError2_catena_2() {
    try {
        extractMessage("", "if (true) {}}");
        
    }
    catch(RuntimeException e) {
        assertTrue(e.getMessage().contains("testcode:2: ERROR - Parse error. syntax error\n"));
        
    }
}

---
---
public void testSyntaxError2_catena_3() {
    try {
        extractMessage("", "if (true) {}}");
        
    }
    catch(RuntimeException e) {
        assertTrue(e.getMessage().contains("if (true) {}}\n"));
        
    }
}

---
--------------------
Run: Closure_158
@@@
Split test: com.google.javascript.jscomp.CommandLineRunnerTest::testWarningGuardOrdering2
file: /root/workbench/exportInfo/d4j_buggy/Closure_158/test//com/google/javascript/jscomp/CommandLineRunnerTest.java
Begin: Pos(123, 10)
End: Pos(127, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_158/test//com/google/javascript/jscomp/CommandLineRunnerTest.java
Name: testWarningGuardOrdering2
Childs: [StatementAssertion<Begin: Pos(126, 5), End: Pos(126, 70)>,
]
@@@
Split test: com.google.javascript.jscomp.CommandLineRunnerTest::testWarningGuardOrdering4
file: /root/workbench/exportInfo/d4j_buggy/Closure_158/test//com/google/javascript/jscomp/CommandLineRunnerTest.java
Begin: Pos(135, 10)
End: Pos(139, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_158/test//com/google/javascript/jscomp/CommandLineRunnerTest.java
Name: testWarningGuardOrdering4
Childs: [StatementAssertion<Begin: Pos(138, 5), End: Pos(138, 70)>,
]
--------------------
Run: Closure_154
@@@
Split test: com.google.javascript.jscomp.TypeCheckTest::testInterfaceInheritanceCheck12
file: /root/workbench/exportInfo/d4j_buggy/Closure_154/test//com/google/javascript/jscomp/TypeCheckTest.java
Begin: Pos(6716, 10)
End: Pos(6728, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_154/test//com/google/javascript/jscomp/TypeCheckTest.java
Name: testInterfaceInheritanceCheck12
Childs: [StatementAssertion<Begin: Pos(6717, 5), End: Pos(6727, 28)>,
]
--------------------
Run: Closure_148
@@@
Split test: com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldTypeof
file: /root/workbench/exportInfo/d4j_buggy/Closure_148/test//com/google/javascript/jscomp/PeepholeFoldConstantsTest.java
Begin: Pos(545, 10)
End: Pos(560, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_148/test//com/google/javascript/jscomp/PeepholeFoldConstantsTest.java
Name: testFoldTypeof
Childs: [StatementAssertion<Begin: Pos(546, 5), End: Pos(546, 43)>,
StatementAssertion<Begin: Pos(547, 5), End: Pos(547, 47)>,
StatementAssertion<Begin: Pos(548, 5), End: Pos(548, 47)>,
StatementAssertion<Begin: Pos(549, 5), End: Pos(549, 48)>,
StatementAssertion<Begin: Pos(550, 5), End: Pos(550, 46)>,
StatementAssertion<Begin: Pos(551, 5), End: Pos(551, 54)>,
StatementAssertion<Begin: Pos(552, 5), End: Pos(552, 51)>,
StatementAssertion<Begin: Pos(553, 5), End: Pos(553, 44)>,
StatementAssertion<Begin: Pos(554, 5), End: Pos(554, 45)>,
StatementAssertion<Begin: Pos(555, 5), End: Pos(555, 48)>,
StatementAssertion<Begin: Pos(556, 5), End: Pos(556, 44)>,
StatementAssertion<Begin: Pos(558, 5), End: Pos(558, 38)>,
StatementAssertion<Begin: Pos(559, 5), End: Pos(559, 45)>,
]
---
public void testFoldTypeof_catena_0() {
    fold("x = typeof 1", "x = \"number\"");
    
}

---
---
public void testFoldTypeof_catena_1() {
    fold("x = typeof 'foo'", "x = \"string\"");
    
}

---
---
public void testFoldTypeof_catena_2() {
    fold("x = typeof true", "x = \"boolean\"");
    
}

---
---
public void testFoldTypeof_catena_3() {
    fold("x = typeof false", "x = \"boolean\"");
    
}

---
---
public void testFoldTypeof_catena_4() {
    fold("x = typeof null", "x = \"object\"");
    
}

---
---
public void testFoldTypeof_catena_5() {
    fold("x = typeof undefined", "x = \"undefined\"");
    
}

---
---
public void testFoldTypeof_catena_6() {
    fold("x = typeof void 0", "x = \"undefined\"");
    
}

---
---
public void testFoldTypeof_catena_7() {
    fold("x = typeof []", "x = \"object\"");
    
}

---
---
public void testFoldTypeof_catena_8() {
    fold("x = typeof [1]", "x = \"object\"");
    
}

---
---
public void testFoldTypeof_catena_9() {
    fold("x = typeof [1,[]]", "x = \"object\"");
    
}

---
---
public void testFoldTypeof_catena_10() {
    fold("x = typeof {}", "x = \"object\"");
    
}

---
---
public void testFoldTypeof_catena_11() {
    foldSame("x = typeof[1,[foo()]]");
    
}

---
---
public void testFoldTypeof_catena_12() {
    foldSame("x = typeof{bathwater:baby()}");
    
}

---
@@@
Split test: com.google.javascript.jscomp.SourceMapTest::testGoldenOutput0
file: /root/workbench/exportInfo/d4j_buggy/Closure_148/test//com/google/javascript/jscomp/SourceMapTest.java
Begin: Pos(74, 10)
End: Pos(87, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_148/test//com/google/javascript/jscomp/SourceMapTest.java
Name: testGoldenOutput0
Childs: [StatementAssertion<Begin: Pos(76, 5), End: Pos(86, 59)>,
]
@@@
Split test: com.google.javascript.jscomp.SourceMapTest::testGoldenOutput1
file: /root/workbench/exportInfo/d4j_buggy/Closure_148/test//com/google/javascript/jscomp/SourceMapTest.java
Begin: Pos(89, 10)
End: Pos(115, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_148/test//com/google/javascript/jscomp/SourceMapTest.java
Name: testGoldenOutput1
Childs: [StatementAssertion<Begin: Pos(90, 5), End: Pos(114, 52)>,
]
@@@
Split test: com.google.javascript.jscomp.SourceMapTest::testGoldenOutput2
file: /root/workbench/exportInfo/d4j_buggy/Closure_148/test//com/google/javascript/jscomp/SourceMapTest.java
Begin: Pos(117, 10)
End: Pos(144, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_148/test//com/google/javascript/jscomp/SourceMapTest.java
Name: testGoldenOutput2
Childs: [StatementAssertion<Begin: Pos(118, 5), End: Pos(143, 51)>,
]
@@@
Split test: com.google.javascript.jscomp.SourceMapTest::testGoldenOutput3
file: /root/workbench/exportInfo/d4j_buggy/Closure_148/test//com/google/javascript/jscomp/SourceMapTest.java
Begin: Pos(146, 10)
End: Pos(159, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_148/test//com/google/javascript/jscomp/SourceMapTest.java
Name: testGoldenOutput3
Childs: [StatementAssertion<Begin: Pos(147, 5), End: Pos(158, 58)>,
]
@@@
Split test: com.google.javascript.jscomp.SourceMapTest::testGoldenOutput4
file: /root/workbench/exportInfo/d4j_buggy/Closure_148/test//com/google/javascript/jscomp/SourceMapTest.java
Begin: Pos(161, 10)
End: Pos(176, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_148/test//com/google/javascript/jscomp/SourceMapTest.java
Name: testGoldenOutput4
Childs: [StatementAssertion<Begin: Pos(162, 5), End: Pos(175, 59)>,
]
--------------------
Run: Closure_50
@@@
Split test: com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest::testStringJoinAdd
file: /root/workbench/exportInfo/d4j_buggy/Closure_50/test//com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java
Begin: Pos(82, 10)
End: Pos(127, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_50/test//com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java
Name: testStringJoinAdd
Childs: [StatementAssertion<Begin: Pos(83, 5), End: Pos(83, 56)>,
StatementAssertion<Begin: Pos(84, 5), End: Pos(84, 41)>,
StatementAssertion<Begin: Pos(85, 5), End: Pos(85, 45)>,
StatementAssertion<Begin: Pos(86, 5), End: Pos(86, 59)>,
StatementAssertion<Begin: Pos(87, 5), End: Pos(88, 42)>,
StatementAssertion<Begin: Pos(89, 5), End: Pos(90, 38)>,
StatementAssertion<Begin: Pos(91, 5), End: Pos(92, 38)>,
StatementAssertion<Begin: Pos(95, 5), End: Pos(95, 50)>,
StatementAssertion<Begin: Pos(96, 5), End: Pos(96, 50)>,
StatementAssertion<Begin: Pos(99, 5), End: Pos(99, 58)>,
StatementAssertion<Begin: Pos(100, 5), End: Pos(100, 56)>,
StatementAssertion<Begin: Pos(101, 5), End: Pos(101, 58)>,
StatementAssertion<Begin: Pos(104, 5), End: Pos(105, 74)>,
StatementAssertion<Begin: Pos(108, 5), End: Pos(108, 40)>,
StatementAssertion<Begin: Pos(109, 5), End: Pos(109, 41)>,
StatementAssertion<Begin: Pos(111, 5), End: Pos(112, 38)>,
StatementAssertion<Begin: Pos(113, 5), End: Pos(114, 39)>,
StatementAssertion<Begin: Pos(116, 5), End: Pos(117, 44)>,
StatementAssertion<Begin: Pos(119, 5), End: Pos(120, 34)>,
StatementAssertion<Begin: Pos(122, 5), End: Pos(122, 42)>,
StatementAssertion<Begin: Pos(123, 5), End: Pos(123, 58)>,
StatementAssertion<Begin: Pos(124, 5), End: Pos(124, 58)>,
StatementAssertion<Begin: Pos(126, 5), End: Pos(126, 41)>,
]
---
public void testStringJoinAdd_catena_0() {
    fold("x = ['a', 'b', 'c'].join('')", "x = \"abc\"");
    
}

---
---
public void testStringJoinAdd_catena_1() {
    fold("x = [].join(',')", "x = \"\"");
    
}

---
---
public void testStringJoinAdd_catena_2() {
    fold("x = ['a'].join(',')", "x = \"a\"");
    
}

---
---
public void testStringJoinAdd_catena_3() {
    fold("x = ['a', 'b', 'c'].join(',')", "x = \"a,b,c\"");
    
}

---
---
public void testStringJoinAdd_catena_4() {
    fold("x = ['a', foo, 'b', 'c'].join(',')", "x = [\"a\",foo,\"b,c\"].join()");
    
}

---
---
public void testStringJoinAdd_catena_5() {
    fold("x = [foo, 'a', 'b', 'c'].join(',')", "x = [foo,\"a,b,c\"].join()");
    
}

---
---
public void testStringJoinAdd_catena_6() {
    fold("x = ['a', 'b', 'c', foo].join(',')", "x = [\"a,b,c\",foo].join()");
    
}

---
---
public void testStringJoinAdd_catena_7() {
    fold("x = ['a=', 5].join('')", "x = \"a=5\"");
    
}

---
---
public void testStringJoinAdd_catena_8() {
    fold("x = ['a', '5'].join(7)", "x = \"a75\"");
    
}

---
---
public void testStringJoinAdd_catena_9() {
    fold("x = ['a=', false].join('')", "x = \"a=false\"");
    
}

---
---
public void testStringJoinAdd_catena_10() {
    fold("x = ['a', '5'].join(true)", "x = \"atrue5\"");
    
}

---
---
public void testStringJoinAdd_catena_11() {
    fold("x = ['a', '5'].join(false)", "x = \"afalse5\"");
    
}

---
---
public void testStringJoinAdd_catena_12() {
    fold("x = ['a', '5', 'c'].join('a very very very long chain')", "x = [\"a\",\"5\",\"c\"].join(\"a very very very long chain\")");
    
}

---
---
public void testStringJoinAdd_catena_13() {
    foldSame("x = ['', foo].join('-')");
    
}

---
---
public void testStringJoinAdd_catena_14() {
    foldSame("x = ['', foo, ''].join()");
    
}

---
---
public void testStringJoinAdd_catena_15() {
    fold("x = ['', '', foo, ''].join(',')", "x = [',', foo, ''].join()");
    
}

---
---
public void testStringJoinAdd_catena_16() {
    fold("x = ['', '', foo, '', ''].join(',')", "x = [',', foo, ','].join()");
    
}

---
---
public void testStringJoinAdd_catena_17() {
    fold("x = ['', '', foo, '', '', bar].join(',')", "x = [',', foo, ',', bar].join()");
    
}

---
---
public void testStringJoinAdd_catena_18() {
    fold("x = [1,2,3].join('abcdef')", "x = '1abcdef2abcdef3'");
    
}

---
---
public void testStringJoinAdd_catena_19() {
    fold("x = [1,2].join()", "x = '1,2'");
    
}

---
---
public void testStringJoinAdd_catena_20() {
    fold("x = [null,undefined,''].join(',')", "x = ',,'");
    
}

---
---
public void testStringJoinAdd_catena_21() {
    fold("x = [null,undefined,0].join(',')", "x = ',,0'");
    
}

---
---
public void testStringJoinAdd_catena_22() {
    foldSame("x = [[1,2],[3,4]].join()");
    
}

---
@@@
Split test: com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest::testNoStringJoin
file: /root/workbench/exportInfo/d4j_buggy/Closure_50/test//com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java
Begin: Pos(77, 10)
End: Pos(80, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_50/test//com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java
Name: testNoStringJoin
Childs: [StatementAssertion<Begin: Pos(78, 5), End: Pos(78, 35)>,
StatementAssertion<Begin: Pos(79, 5), End: Pos(79, 31)>,
]
---
public void testNoStringJoin_catena_0() {
    foldSame("x = [].join(',',2)");
    
}

---
---
public void testNoStringJoin_catena_1() {
    foldSame("x = [].join(f)");
    
}

---
--------------------
Run: Closure_145
@@@
Split test: com.google.javascript.jscomp.CodePrinterTest::testFunctionSafariCompatiblity
file: /root/workbench/exportInfo/d4j_buggy/Closure_145/test//com/google/javascript/jscomp/CodePrinterTest.java
Begin: Pos(944, 10)
End: Pos(960, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_145/test//com/google/javascript/jscomp/CodePrinterTest.java
Name: testFunctionSafariCompatiblity
Childs: [StatementAssertion<Begin: Pos(946, 5), End: Pos(947, 69)>,
StatementAssertion<Begin: Pos(949, 5), End: Pos(950, 69)>,
StatementAssertion<Begin: Pos(952, 5), End: Pos(953, 47)>,
StatementAssertion<Begin: Pos(955, 5), End: Pos(956, 47)>,
StatementAssertion<Begin: Pos(958, 5), End: Pos(959, 49)>,
]
---
public void testFunctionSafariCompatiblity_catena_0() {
    assertPrint("function(){if(e1){function goo(){return true}}else foo()}", "function(){if(e1){function goo(){return true}}else foo()}");
    
}

---
---
public void testFunctionSafariCompatiblity_catena_1() {
    assertPrint("function(){if(e1)function goo(){return true}else foo()}", "function(){if(e1){function goo(){return true}}else foo()}");
    
}

---
---
public void testFunctionSafariCompatiblity_catena_2() {
    assertPrint("if(e1){function goo(){return true}}", "if(e1){function goo(){return true}}");
    
}

---
---
public void testFunctionSafariCompatiblity_catena_3() {
    assertPrint("if(e1)function goo(){return true}", "if(e1){function goo(){return true}}");
    
}

---
---
public void testFunctionSafariCompatiblity_catena_4() {
    assertPrint("if(e1)A:function goo(){return true}", "if(e1){A:function goo(){return true}}");
    
}

---
@@@
Split test: com.google.javascript.jscomp.CodePrinterTest::testDoLoopIECompatiblity
file: /root/workbench/exportInfo/d4j_buggy/Closure_145/test//com/google/javascript/jscomp/CodePrinterTest.java
Begin: Pos(917, 10)
End: Pos(942, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_145/test//com/google/javascript/jscomp/CodePrinterTest.java
Name: testDoLoopIECompatiblity
Childs: [StatementAssertion<Begin: Pos(919, 5), End: Pos(920, 60)>,
StatementAssertion<Begin: Pos(922, 5), End: Pos(923, 60)>,
StatementAssertion<Begin: Pos(925, 5), End: Pos(926, 46)>,
StatementAssertion<Begin: Pos(928, 5), End: Pos(929, 46)>,
StatementAssertion<Begin: Pos(931, 5), End: Pos(932, 36)>,
StatementAssertion<Begin: Pos(934, 5), End: Pos(935, 36)>,
StatementAssertion<Begin: Pos(937, 5), End: Pos(938, 38)>,
StatementAssertion<Begin: Pos(940, 5), End: Pos(941, 59)>,
]
---
public void testDoLoopIECompatiblity_catena_0() {
    assertPrint("function(){if(e1){do foo();while(e2)}else foo()}", "function(){if(e1){do foo();while(e2)}else foo()}");
    
}

---
---
public void testDoLoopIECompatiblity_catena_1() {
    assertPrint("function(){if(e1)do foo();while(e2)else foo()}", "function(){if(e1){do foo();while(e2)}else foo()}");
    
}

---
---
public void testDoLoopIECompatiblity_catena_2() {
    assertPrint("if(x){do{foo()}while(y)}else bar()", "if(x){do foo();while(y)}else bar()");
    
}

---
---
public void testDoLoopIECompatiblity_catena_3() {
    assertPrint("if(x)do{foo()}while(y);else bar()", "if(x){do foo();while(y)}else bar()");
    
}

---
---
public void testDoLoopIECompatiblity_catena_4() {
    assertPrint("if(x){do{foo()}while(y)}", "if(x){do foo();while(y)}");
    
}

---
---
public void testDoLoopIECompatiblity_catena_5() {
    assertPrint("if(x)do{foo()}while(y);", "if(x){do foo();while(y)}");
    
}

---
---
public void testDoLoopIECompatiblity_catena_6() {
    assertPrint("if(x)A:do{foo()}while(y);", "if(x){A:do foo();while(y)}");
    
}

---
---
public void testDoLoopIECompatiblity_catena_7() {
    assertPrint("var i = 0;a: do{b: do{i++;break b;} while(0);} while(0);", "var i=0;a:do{b:do{i++;break b}while(0)}while(0)");
    
}

---
--------------------
Run: Closure_47
@@@
Split test: com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testParseSourceMetaMap
file: /root/workbench/exportInfo/d4j_buggy/Closure_47/test//com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java
Begin: Pos(422, 10)
End: Pos(456, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_47/test//com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java
Name: testParseSourceMetaMap
Childs: [StatementAssertion<Begin: Pos(450, 5), End: Pos(455, 10)>,
]
@@@
Split test: com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput0a
file: /root/workbench/exportInfo/d4j_buggy/Closure_47/test//com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java
Begin: Pos(132, 10)
End: Pos(144, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_47/test//com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java
Name: testGoldenOutput0a
Childs: [StatementAssertion<Begin: Pos(134, 5), End: Pos(143, 26)>,
]
@@@
Split test: com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testMultilineMapping
file: /root/workbench/exportInfo/d4j_buggy/Closure_47/test//com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java
Begin: Pos(92, 10)
End: Pos(97, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_47/test//com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java
Name: testMultilineMapping
Childs: [StatementAssertion<Begin: Pos(93, 5), End: Pos(96, 25)>,
]
@@@
Split test: com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testMultiFunctionMapping
file: /root/workbench/exportInfo/d4j_buggy/Closure_47/test//com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java
Begin: Pos(106, 10)
End: Pos(116, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_47/test//com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java
Name: testMultiFunctionMapping
Childs: [StatementAssertion<Begin: Pos(107, 5), End: Pos(115, 27)>,
]
@@@
Split test: com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testLiteralMappingsGoldenOutput
file: /root/workbench/exportInfo/d4j_buggy/Closure_47/test//com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java
Begin: Pos(75, 10)
End: Pos(90, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_47/test//com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java
Name: testLiteralMappingsGoldenOutput
Childs: [StatementAssertion<Begin: Pos(77, 5), End: Pos(89, 26)>,
]
@@@
Split test: com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testMultilineMapping2
file: /root/workbench/exportInfo/d4j_buggy/Closure_47/test//com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java
Begin: Pos(99, 10)
End: Pos(104, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_47/test//com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java
Name: testMultilineMapping2
Childs: [StatementAssertion<Begin: Pos(100, 5), End: Pos(103, 25)>,
]
@@@
Split test: com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testBasicMappingGoldenOutput
file: /root/workbench/exportInfo/d4j_buggy/Closure_47/test//com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java
Begin: Pos(52, 10)
End: Pos(64, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_47/test//com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java
Name: testBasicMappingGoldenOutput
Childs: [StatementAssertion<Begin: Pos(54, 5), End: Pos(63, 26)>,
]
@@@
Split test: com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testSourceMapMerging
file: /root/workbench/exportInfo/d4j_buggy/Closure_47/test//com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java
Begin: Pos(458, 10)
End: Pos(481, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_47/test//com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java
Name: testSourceMapMerging
Childs: [StatementAssertion<Begin: Pos(480, 5), End: Pos(480, 61)>,
]
@@@
Split test: com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testLiteralMappings
file: /root/workbench/exportInfo/d4j_buggy/Closure_47/test//com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java
Begin: Pos(70, 10)
End: Pos(73, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_47/test//com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java
Name: testLiteralMappings
Childs: [StatementAssertion<Begin: Pos(71, 5), End: Pos(72, 50)>,
]
@@@
Split test: com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testBasicMapping1
file: /root/workbench/exportInfo/d4j_buggy/Closure_47/test//com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java
Begin: Pos(48, 10)
End: Pos(50, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_47/test//com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java
Name: testBasicMapping1
Childs: [StatementAssertion<Begin: Pos(49, 5), End: Pos(49, 48)>,
]
@@@
Split test: com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testBasicMapping2
file: /root/workbench/exportInfo/d4j_buggy/Closure_47/test//com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java
Begin: Pos(66, 10)
End: Pos(68, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_47/test//com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java
Name: testBasicMapping2
Childs: [StatementAssertion<Begin: Pos(67, 5), End: Pos(67, 57)>,
]
@@@
Split test: com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput1
file: /root/workbench/exportInfo/d4j_buggy/Closure_47/test//com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java
Begin: Pos(146, 10)
End: Pos(176, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_47/test//com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java
Name: testGoldenOutput1
Childs: [StatementAssertion<Begin: Pos(149, 5), End: Pos(160, 26)>,
StatementAssertion<Begin: Pos(164, 5), End: Pos(175, 26)>,
]
---
public void testGoldenOutput1_catena_0()throws Exception {
    detailLevel = SourceMap.DetailLevel.ALL;
    checkSourceMap("function f(foo, bar) { foo = foo + bar + 2; return foo; }", "{\n" + "\"version\":3,\n" + "\"file\":\"testcode\",\n" + "\"lineCount\":1,\n" + "\"mappings\":\"AAAAA,QAASA,EAAC,CAACC,GAAD,CAAMC,GAAN," + "CAAW,CAAED,GAAA,CAAMA,GAAN,CAAYC,GAAZ,CAAkB,CAAG," + "OAAOD,IAA9B;\",\n" + "\"sources\":[\"testcode\"],\n" + "\"names\":[\"f\",\"foo\",\"bar\"]\n" + "}\n");
    detailLevel = SourceMap.DetailLevel.SYMBOLS;
    
}

---
---
public void testGoldenOutput1_catena_1()throws Exception {
    detailLevel = SourceMap.DetailLevel.ALL;
    detailLevel = SourceMap.DetailLevel.SYMBOLS;
    checkSourceMap("function f(foo, bar) { foo = foo + bar + 2; return foo; }", "{\n" + "\"version\":3,\n" + "\"file\":\"testcode\",\n" + "\"lineCount\":1,\n" + "\"mappings\":\"AAAAA,QAASA,EAATA,CAAWC,GAAXD,CAAgBE," + "GAAhBF,EAAuBC,GAAvBD,CAA6BC,GAA7BD,CAAmCE,GAAnCF," + "SAAmDC,IAAnDD;\",\n" + "\"sources\":[\"testcode\"],\n" + "\"names\":[\"f\",\"foo\",\"bar\"]\n" + "}\n");
    
}

---
@@@
Split test: com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput2
file: /root/workbench/exportInfo/d4j_buggy/Closure_47/test//com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java
Begin: Pos(178, 10)
End: Pos(192, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_47/test//com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java
Name: testGoldenOutput2
Childs: [StatementAssertion<Begin: Pos(179, 5), End: Pos(191, 26)>,
]
@@@
Split test: com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput3
file: /root/workbench/exportInfo/d4j_buggy/Closure_47/test//com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java
Begin: Pos(194, 10)
End: Pos(206, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_47/test//com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java
Name: testGoldenOutput3
Childs: [StatementAssertion<Begin: Pos(195, 5), End: Pos(205, 26)>,
]
@@@
Split test: com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput4
file: /root/workbench/exportInfo/d4j_buggy/Closure_47/test//com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java
Begin: Pos(208, 10)
End: Pos(220, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_47/test//com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java
Name: testGoldenOutput4
Childs: [StatementAssertion<Begin: Pos(209, 5), End: Pos(219, 26)>,
]
@@@
Split test: com.google.debugging.sourcemap.SourceMapGeneratorV3Test::testGoldenOutput5
file: /root/workbench/exportInfo/d4j_buggy/Closure_47/test//com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java
Begin: Pos(222, 10)
End: Pos(311, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_47/test//com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java
Name: testGoldenOutput5
Childs: [StatementAssertion<Begin: Pos(225, 5), End: Pos(266, 15)>,
StatementAssertion<Begin: Pos(270, 5), End: Pos(310, 15)>,
]
---
public void testGoldenOutput5_catena_0()throws Exception {
    detailLevel = SourceMap.DetailLevel.ALL;
    checkSourceMap("c:\\myfile.js", "/** @preserve\n" + " * this is a test.\n" + " */\n" + "var foo=a + 'this is a really long line that will force the" + " mapping to span multiple linesc + d + e;", "{\n" + "\"version\":3,\n" + "\"file\":\"testcode\",\n" + "\"lineCount\":6,\n" + "\"mappings\":\"A;;;;AAGA,IAAIA,IAAIC,CAAJD,CAAQ,mxCAARA;AAA8xCE," + "CAA9xCF,CAAkyCG,CAAlyCH,CAAsyCI;\",\n" + "\"sources\":[\"c:\\\\myfile.js\"],\n" + "\"names\":[\"foo\",\"a\",\"c\",\"d\",\"e\"]\n" + "}\n");
    detailLevel = SourceMap.DetailLevel.SYMBOLS;
    
}

---
---
public void testGoldenOutput5_catena_1()throws Exception {
    detailLevel = SourceMap.DetailLevel.ALL;
    detailLevel = SourceMap.DetailLevel.SYMBOLS;
    checkSourceMap("c:\\myfile.js", "/** @preserve\n" + " * this is a test.\n" + " */\n" + "var foo=a + 'this is a really long line that will force the" + " mapping to span multiple linesc + d + e;", "{\n" + "\"version\":3,\n" + "\"file\":\"testcode\",\n" + "\"lineCount\":6,\n" + "\"mappings\":\"A;;;;IAGIA,IAAIC,CAAJD;AAA8xCE,CAA9xCF,CAAkyCG," + "CAAlyCH,CAAsyCI;\",\n" + "\"sources\":[\"c:\\\\myfile.js\"],\n" + "\"names\":[\"foo\",\"a\",\"c\",\"d\",\"e\"]\n" + "}\n");
    
}

---
--------------------
Run: Closure_45
@@@
Split test: com.google.javascript.jscomp.RemoveUnusedVarsTest::testIssue618_1
file: /root/workbench/exportInfo/d4j_buggy/Closure_45/test//com/google/javascript/jscomp/RemoveUnusedVarsTest.java
Begin: Pos(739, 10)
End: Pos(748, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_45/test//com/google/javascript/jscomp/RemoveUnusedVarsTest.java
Name: testIssue618_1
Childs: [StatementAssertion<Begin: Pos(741, 5), End: Pos(747, 13)>,
]
--------------------
Run: Closure_108
@@@
Split test: com.google.javascript.jscomp.ScopedAliasesTest::testIssue1144
file: /root/workbench/exportInfo/d4j_buggy/Closure_108/test//com/google/javascript/jscomp/ScopedAliasesTest.java
Begin: Pos(569, 10)
End: Pos(583, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_108/test//com/google/javascript/jscomp/ScopedAliasesTest.java
Name: testIssue1144
Childs: [StatementAssertion<Begin: Pos(570, 5), End: Pos(582, 36)>,
]
--------------------
Run: Closure_43
@@@
Split test: com.google.javascript.jscomp.TypeCheckTest::testLends10
file: /root/workbench/exportInfo/d4j_buggy/Closure_43/test//com/google/javascript/jscomp/TypeCheckTest.java
Begin: Pos(8780, 10)
End: Pos(8790, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_43/test//com/google/javascript/jscomp/TypeCheckTest.java
Name: testLends10
Childs: [StatementAssertion<Begin: Pos(8781, 5), End: Pos(8789, 28)>,
]
@@@
Split test: com.google.javascript.jscomp.TypeCheckTest::testLends11
file: /root/workbench/exportInfo/d4j_buggy/Closure_43/test//com/google/javascript/jscomp/TypeCheckTest.java
Begin: Pos(8792, 10)
End: Pos(8809, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_43/test//com/google/javascript/jscomp/TypeCheckTest.java
Name: testLends11
Childs: [StatementAssertion<Begin: Pos(8793, 5), End: Pos(8808, 28)>,
]
--------------------
Run: Closure_53
@@@
Split test: com.google.javascript.jscomp.InlineObjectLiteralsTest::testBug545
file: /root/workbench/exportInfo/d4j_buggy/Closure_53/test//com/google/javascript/jscomp/InlineObjectLiteralsTest.java
Begin: Pos(359, 10)
End: Pos(362, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_53/test//com/google/javascript/jscomp/InlineObjectLiteralsTest.java
Name: testBug545
Childs: [StatementAssertion<Begin: Pos(360, 5), End: Pos(360, 32)>,
StatementAssertion<Begin: Pos(361, 5), End: Pos(361, 39)>,
]
---
public void testBug545_catena_0() {
    testLocal("var a = {}", "");
    
}

---
---
public void testBug545_catena_1() {
    testLocal("var a; a = {}", "true");
    
}

---
--------------------
Run: Closure_85
@@@
Split test: com.google.javascript.jscomp.UnreachableCodeEliminationTest::testCascadedRemovalOfUnlessUnconditonalJumps
file: /root/workbench/exportInfo/d4j_buggy/Closure_85/test//com/google/javascript/jscomp/UnreachableCodeEliminationTest.java
Begin: Pos(234, 10)
End: Pos(250, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_85/test//com/google/javascript/jscomp/UnreachableCodeEliminationTest.java
Name: testCascadedRemovalOfUnlessUnconditonalJumps
Childs: [StatementAssertion<Begin: Pos(235, 5), End: Pos(236, 64)>,
StatementAssertion<Begin: Pos(238, 5), End: Pos(239, 57)>,
StatementAssertion<Begin: Pos(241, 5), End: Pos(243, 79)>,
StatementAssertion<Begin: Pos(244, 5), End: Pos(246, 72)>,
StatementAssertion<Begin: Pos(248, 5), End: Pos(249, 68)>,
]
---
public void testCascadedRemovalOfUnlessUnconditonalJumps_catena_0() {
    test("switch (a) { case 'a': break; case 'b': break; case 'c': break }", "switch (a) { case 'a': break; case 'b': case 'c': }");
    
}

---
---
public void testCascadedRemovalOfUnlessUnconditonalJumps_catena_1() {
    test("switch (a) { case 'a': break; case 'b': case 'c': }", "switch (a) { case 'a': case 'b': case 'c': }");
    
}

---
---
public void testCascadedRemovalOfUnlessUnconditonalJumps_catena_2() {
    test("function foo() {" + "  switch (a) { case 'a':return; case 'b':return; case 'c':return }}", "function foo() { switch (a) { case 'a':return; case 'b': case 'c': }}");
    
}

---
---
public void testCascadedRemovalOfUnlessUnconditonalJumps_catena_3() {
    test("function foo() {" + "  switch (a) { case 'a':return; case 'b': case 'c': }}", "function foo() { switch (a) { case 'a': case 'b': case 'c': }}");
    
}

---
---
public void testCascadedRemovalOfUnlessUnconditonalJumps_catena_4() {
    testSame("function foo() {" + "switch (a) { case 'a':return 2; case 'b':return 1}}");
    
}

---
@@@
Split test: com.google.javascript.jscomp.UnreachableCodeEliminationTest::testIssue311
file: /root/workbench/exportInfo/d4j_buggy/Closure_85/test//com/google/javascript/jscomp/UnreachableCodeEliminationTest.java
Begin: Pos(252, 10)
End: Pos(273, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_85/test//com/google/javascript/jscomp/UnreachableCodeEliminationTest.java
Name: testIssue311
Childs: [StatementAssertion<Begin: Pos(253, 5), End: Pos(272, 14)>,
]
--------------------
Run: Closure_174
@@@
Split test: com.google.javascript.jscomp.ScopedAliasesTest::testIssue1103a
file: /root/workbench/exportInfo/d4j_buggy/Closure_174/test//com/google/javascript/jscomp/ScopedAliasesTest.java
Begin: Pos(525, 10)
End: Pos(531, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_174/test//com/google/javascript/jscomp/ScopedAliasesTest.java
Name: testIssue1103a
Childs: [StatementAssertion<Begin: Pos(526, 5), End: Pos(530, 77)>,
]
@@@
Split test: com.google.javascript.jscomp.ScopedAliasesTest::testIssue1103b
file: /root/workbench/exportInfo/d4j_buggy/Closure_174/test//com/google/javascript/jscomp/ScopedAliasesTest.java
Begin: Pos(533, 10)
End: Pos(538, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_174/test//com/google/javascript/jscomp/ScopedAliasesTest.java
Name: testIssue1103b
Childs: [StatementAssertion<Begin: Pos(534, 5), End: Pos(537, 48)>,
]
@@@
Split test: com.google.javascript.jscomp.ScopedAliasesTest::testIssue1103c
file: /root/workbench/exportInfo/d4j_buggy/Closure_174/test//com/google/javascript/jscomp/ScopedAliasesTest.java
Begin: Pos(540, 10)
End: Pos(545, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_174/test//com/google/javascript/jscomp/ScopedAliasesTest.java
Name: testIssue1103c
Childs: [StatementAssertion<Begin: Pos(541, 5), End: Pos(544, 69)>,
]
--------------------
Run: Closure_88
@@@
Split test: com.google.javascript.jscomp.CommandLineRunnerTest::testIssue297
file: /root/workbench/exportInfo/d4j_buggy/Closure_88/test//com/google/javascript/jscomp/CommandLineRunnerTest.java
Begin: Pos(250, 10)
End: Pos(260, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_88/test//com/google/javascript/jscomp/CommandLineRunnerTest.java
Name: testIssue297
Childs: [StatementAssertion<Begin: Pos(252, 5), End: Pos(259, 14)>,
]
@@@
Split test: com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue297a
file: /root/workbench/exportInfo/d4j_buggy/Closure_88/test//com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java
Begin: Pos(367, 10)
End: Pos(372, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_88/test//com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java
Name: testIssue297a
Childs: [StatementAssertion<Begin: Pos(368, 5), End: Pos(371, 22)>,
]
@@@
Split test: com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue297b
file: /root/workbench/exportInfo/d4j_buggy/Closure_88/test//com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java
Begin: Pos(374, 10)
End: Pos(383, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_88/test//com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java
Name: testIssue297b
Childs: [StatementAssertion<Begin: Pos(375, 5), End: Pos(382, 15)>,
]
@@@
Split test: com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue297c
file: /root/workbench/exportInfo/d4j_buggy/Closure_88/test//com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java
Begin: Pos(385, 10)
End: Pos(394, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_88/test//com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java
Name: testIssue297c
Childs: [StatementAssertion<Begin: Pos(386, 5), End: Pos(393, 15)>,
]
@@@
Split test: com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue297d
file: /root/workbench/exportInfo/d4j_buggy/Closure_88/test//com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java
Begin: Pos(396, 10)
End: Pos(403, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_88/test//com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java
Name: testIssue297d
Childs: [StatementAssertion<Begin: Pos(397, 5), End: Pos(402, 15)>,
]
@@@
Split test: com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue297e
file: /root/workbench/exportInfo/d4j_buggy/Closure_88/test//com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java
Begin: Pos(405, 10)
End: Pos(412, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_88/test//com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java
Name: testIssue297e
Childs: [StatementAssertion<Begin: Pos(406, 5), End: Pos(411, 15)>,
]
@@@
Split test: com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue297f
file: /root/workbench/exportInfo/d4j_buggy/Closure_88/test//com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java
Begin: Pos(414, 10)
End: Pos(421, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_88/test//com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java
Name: testIssue297f
Childs: [StatementAssertion<Begin: Pos(415, 5), End: Pos(420, 15)>,
]
--------------------
Run: Closure_165
@@@
Split test: com.google.javascript.jscomp.TypeCheckTest::testIssue725
file: /root/workbench/exportInfo/d4j_buggy/Closure_165/test//com/google/javascript/jscomp/TypeCheckTest.java
Begin: Pos(5851, 10)
End: Pos(5859, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_165/test//com/google/javascript/jscomp/TypeCheckTest.java
Name: testIssue725
Childs: [StatementAssertion<Begin: Pos(5852, 5), End: Pos(5858, 47)>,
]
--------------------
Run: Closure_74
@@@
Split test: com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3
file: /root/workbench/exportInfo/d4j_buggy/Closure_74/test//com/google/javascript/jscomp/PeepholeFoldConstantsTest.java
Begin: Pos(699, 10)
End: Pos(723, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_74/test//com/google/javascript/jscomp/PeepholeFoldConstantsTest.java
Name: testFoldComparison3
Childs: [StatementAssertion<Begin: Pos(700, 5), End: Pos(700, 38)>,
StatementAssertion<Begin: Pos(702, 5), End: Pos(702, 37)>,
StatementAssertion<Begin: Pos(703, 5), End: Pos(703, 37)>,
StatementAssertion<Begin: Pos(704, 5), End: Pos(704, 40)>,
StatementAssertion<Begin: Pos(705, 5), End: Pos(705, 38)>,
StatementAssertion<Begin: Pos(706, 5), End: Pos(706, 40)>,
StatementAssertion<Begin: Pos(708, 5), End: Pos(708, 29)>,
StatementAssertion<Begin: Pos(709, 5), End: Pos(709, 32)>,
StatementAssertion<Begin: Pos(710, 5), End: Pos(710, 30)>,
StatementAssertion<Begin: Pos(711, 5), End: Pos(711, 32)>,
StatementAssertion<Begin: Pos(713, 5), End: Pos(713, 38)>,
StatementAssertion<Begin: Pos(714, 5), End: Pos(714, 38)>,
StatementAssertion<Begin: Pos(715, 5), End: Pos(715, 41)>,
StatementAssertion<Begin: Pos(716, 5), End: Pos(716, 39)>,
StatementAssertion<Begin: Pos(717, 5), End: Pos(717, 41)>,
StatementAssertion<Begin: Pos(719, 5), End: Pos(719, 30)>,
StatementAssertion<Begin: Pos(720, 5), End: Pos(720, 33)>,
StatementAssertion<Begin: Pos(721, 5), End: Pos(721, 31)>,
StatementAssertion<Begin: Pos(722, 5), End: Pos(722, 33)>,
]
---
public void testFoldComparison3_catena_0() {
    fold("x = !1 == !0", "x = false");
    
}

---
---
public void testFoldComparison3_catena_1() {
    fold("x = !0 == !0", "x = true");
    
}

---
---
public void testFoldComparison3_catena_2() {
    fold("x = !1 == !1", "x = true");
    
}

---
---
public void testFoldComparison3_catena_3() {
    fold("x = !1 == null", "x = false");
    
}

---
---
public void testFoldComparison3_catena_4() {
    fold("x = !1 == !0", "x = false");
    
}

---
---
public void testFoldComparison3_catena_5() {
    fold("x = !0 == null", "x = false");
    
}

---
---
public void testFoldComparison3_catena_6() {
    fold("!0 == !0", "true");
    
}

---
---
public void testFoldComparison3_catena_7() {
    fold("!1 == null", "false");
    
}

---
---
public void testFoldComparison3_catena_8() {
    fold("!1 == !0", "false");
    
}

---
---
public void testFoldComparison3_catena_9() {
    fold("!0 == null", "false");
    
}

---
---
public void testFoldComparison3_catena_10() {
    fold("x = !0 === !0", "x = true");
    
}

---
---
public void testFoldComparison3_catena_11() {
    fold("x = !1 === !1", "x = true");
    
}

---
---
public void testFoldComparison3_catena_12() {
    fold("x = !1 === null", "x = false");
    
}

---
---
public void testFoldComparison3_catena_13() {
    fold("x = !1 === !0", "x = false");
    
}

---
---
public void testFoldComparison3_catena_14() {
    fold("x = !0 === null", "x = false");
    
}

---
---
public void testFoldComparison3_catena_15() {
    fold("!0 === !0", "true");
    
}

---
---
public void testFoldComparison3_catena_16() {
    fold("!1 === null", "false");
    
}

---
---
public void testFoldComparison3_catena_17() {
    fold("!1 === !0", "false");
    
}

---
---
public void testFoldComparison3_catena_18() {
    fold("!0 === null", "false");
    
}

---
@@@
Split test: com.google.javascript.jscomp.PeepholeFoldConstantsTest::testInvertibleOperators
file: /root/workbench/exportInfo/d4j_buggy/Closure_74/test//com/google/javascript/jscomp/PeepholeFoldConstantsTest.java
Begin: Pos(1094, 10)
End: Pos(1138, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_74/test//com/google/javascript/jscomp/PeepholeFoldConstantsTest.java
Name: testInvertibleOperators
Childs: [StatementAssertion<Begin: Pos(1122, 13), End: Pos(1122, 55)>,
StatementAssertion<Begin: Pos(1123, 13), End: Pos(1123, 60)>,
StatementAssertion<Begin: Pos(1126, 15), End: Pos(1126, 39)>,
StatementAssertion<Begin: Pos(1127, 15), End: Pos(1127, 44)>,
StatementAssertion<Begin: Pos(1129, 15), End: Pos(1129, 56)>,
StatementAssertion<Begin: Pos(1130, 15), End: Pos(1130, 62)>,
StatementAssertion<Begin: Pos(1133, 13), End: Pos(1133, 70)>,
]
---
public void testInvertibleOperators_catena_0() {
    Map < String, String > inverses = ImmutableMap. < String, String > builder().put("==", "!=").put("===", "!==").put("<=", ">").put("<", ">=").put(">=", "<").put(">", "<=").put("!=", "==").put("!==", "===").build();
    Set < String > comparators = ImmutableSet.of("<=", "<", ">=", ">");
    Set < String > equalitors = ImmutableSet.of("==", "===");
    Set < String > uncomparables = ImmutableSet.of("undefined", "void 0");
    List < String > operators = ImmutableList.copyOf(inverses.values());
    for(int iOperandA = 0;
    iOperandA < LITERAL_OPERANDS.size();
    iOperandA ++ ) {
        for(int iOperandB = 0;
        iOperandB < LITERAL_OPERANDS.size();
        iOperandB ++ ) {
            for(int iOp = 0;
            iOp < operators.size();
            iOp ++ ) {
                String a = LITERAL_OPERANDS.get(iOperandA);
                String b = LITERAL_OPERANDS.get(iOperandB);
                String op = operators.get(iOp);
                String inverse = inverses.get(op);
                if(comparators.contains(op) && (uncomparables.contains(a) || uncomparables.contains(b))) {
                    assertSameResults(join(a, op, b), "false");
                    
                }
                else if(a.equals(b) && equalitors.contains(op)) {
                    if(a.equals("NaN") || a.equals("Infinity")) {
                        
                    }
                    else {
                        
                    }
                }
                else {
                    
                }
            }
        }
    }
}

---
---
public void testInvertibleOperators_catena_1() {
    Map < String, String > inverses = ImmutableMap. < String, String > builder().put("==", "!=").put("===", "!==").put("<=", ">").put("<", ">=").put(">=", "<").put(">", "<=").put("!=", "==").put("!==", "===").build();
    Set < String > comparators = ImmutableSet.of("<=", "<", ">=", ">");
    Set < String > equalitors = ImmutableSet.of("==", "===");
    Set < String > uncomparables = ImmutableSet.of("undefined", "void 0");
    List < String > operators = ImmutableList.copyOf(inverses.values());
    for(int iOperandA = 0;
    iOperandA < LITERAL_OPERANDS.size();
    iOperandA ++ ) {
        for(int iOperandB = 0;
        iOperandB < LITERAL_OPERANDS.size();
        iOperandB ++ ) {
            for(int iOp = 0;
            iOp < operators.size();
            iOp ++ ) {
                String a = LITERAL_OPERANDS.get(iOperandA);
                String b = LITERAL_OPERANDS.get(iOperandB);
                String op = operators.get(iOp);
                String inverse = inverses.get(op);
                if(comparators.contains(op) && (uncomparables.contains(a) || uncomparables.contains(b))) {
                    assertSameResults(join(a, inverse, b), "false");
                    
                }
                else if(a.equals(b) && equalitors.contains(op)) {
                    if(a.equals("NaN") || a.equals("Infinity")) {
                        
                    }
                    else {
                        
                    }
                }
                else {
                    
                }
            }
        }
    }
}

---
---
public void testInvertibleOperators_catena_2() {
    Map < String, String > inverses = ImmutableMap. < String, String > builder().put("==", "!=").put("===", "!==").put("<=", ">").put("<", ">=").put(">=", "<").put(">", "<=").put("!=", "==").put("!==", "===").build();
    Set < String > comparators = ImmutableSet.of("<=", "<", ">=", ">");
    Set < String > equalitors = ImmutableSet.of("==", "===");
    Set < String > uncomparables = ImmutableSet.of("undefined", "void 0");
    List < String > operators = ImmutableList.copyOf(inverses.values());
    for(int iOperandA = 0;
    iOperandA < LITERAL_OPERANDS.size();
    iOperandA ++ ) {
        for(int iOperandB = 0;
        iOperandB < LITERAL_OPERANDS.size();
        iOperandB ++ ) {
            for(int iOp = 0;
            iOp < operators.size();
            iOp ++ ) {
                String a = LITERAL_OPERANDS.get(iOperandA);
                String b = LITERAL_OPERANDS.get(iOperandB);
                String op = operators.get(iOp);
                String inverse = inverses.get(op);
                if(comparators.contains(op) && (uncomparables.contains(a) || uncomparables.contains(b))) {
                    
                }
                else if(a.equals(b) && equalitors.contains(op)) {
                    if(a.equals("NaN") || a.equals("Infinity")) {
                        foldSame(join(a, op, b));
                        
                    }
                    else {
                        
                    }
                }
                else {
                    
                }
            }
        }
    }
}

---
---
public void testInvertibleOperators_catena_3() {
    Map < String, String > inverses = ImmutableMap. < String, String > builder().put("==", "!=").put("===", "!==").put("<=", ">").put("<", ">=").put(">=", "<").put(">", "<=").put("!=", "==").put("!==", "===").build();
    Set < String > comparators = ImmutableSet.of("<=", "<", ">=", ">");
    Set < String > equalitors = ImmutableSet.of("==", "===");
    Set < String > uncomparables = ImmutableSet.of("undefined", "void 0");
    List < String > operators = ImmutableList.copyOf(inverses.values());
    for(int iOperandA = 0;
    iOperandA < LITERAL_OPERANDS.size();
    iOperandA ++ ) {
        for(int iOperandB = 0;
        iOperandB < LITERAL_OPERANDS.size();
        iOperandB ++ ) {
            for(int iOp = 0;
            iOp < operators.size();
            iOp ++ ) {
                String a = LITERAL_OPERANDS.get(iOperandA);
                String b = LITERAL_OPERANDS.get(iOperandB);
                String op = operators.get(iOp);
                String inverse = inverses.get(op);
                if(comparators.contains(op) && (uncomparables.contains(a) || uncomparables.contains(b))) {
                    
                }
                else if(a.equals(b) && equalitors.contains(op)) {
                    if(a.equals("NaN") || a.equals("Infinity")) {
                        foldSame(join(a, inverse, b));
                        
                    }
                    else {
                        
                    }
                }
                else {
                    
                }
            }
        }
    }
}

---
---
public void testInvertibleOperators_catena_4() {
    Map < String, String > inverses = ImmutableMap. < String, String > builder().put("==", "!=").put("===", "!==").put("<=", ">").put("<", ">=").put(">=", "<").put(">", "<=").put("!=", "==").put("!==", "===").build();
    Set < String > comparators = ImmutableSet.of("<=", "<", ">=", ">");
    Set < String > equalitors = ImmutableSet.of("==", "===");
    Set < String > uncomparables = ImmutableSet.of("undefined", "void 0");
    List < String > operators = ImmutableList.copyOf(inverses.values());
    for(int iOperandA = 0;
    iOperandA < LITERAL_OPERANDS.size();
    iOperandA ++ ) {
        for(int iOperandB = 0;
        iOperandB < LITERAL_OPERANDS.size();
        iOperandB ++ ) {
            for(int iOp = 0;
            iOp < operators.size();
            iOp ++ ) {
                String a = LITERAL_OPERANDS.get(iOperandA);
                String b = LITERAL_OPERANDS.get(iOperandB);
                String op = operators.get(iOp);
                String inverse = inverses.get(op);
                if(comparators.contains(op) && (uncomparables.contains(a) || uncomparables.contains(b))) {
                    
                }
                else if(a.equals(b) && equalitors.contains(op)) {
                    if(a.equals("NaN") || a.equals("Infinity")) {
                        
                    }
                    else {
                        assertSameResults(join(a, op, b), "true");
                        
                    }
                }
                else {
                    
                }
            }
        }
    }
}

---
---
public void testInvertibleOperators_catena_5() {
    Map < String, String > inverses = ImmutableMap. < String, String > builder().put("==", "!=").put("===", "!==").put("<=", ">").put("<", ">=").put(">=", "<").put(">", "<=").put("!=", "==").put("!==", "===").build();
    Set < String > comparators = ImmutableSet.of("<=", "<", ">=", ">");
    Set < String > equalitors = ImmutableSet.of("==", "===");
    Set < String > uncomparables = ImmutableSet.of("undefined", "void 0");
    List < String > operators = ImmutableList.copyOf(inverses.values());
    for(int iOperandA = 0;
    iOperandA < LITERAL_OPERANDS.size();
    iOperandA ++ ) {
        for(int iOperandB = 0;
        iOperandB < LITERAL_OPERANDS.size();
        iOperandB ++ ) {
            for(int iOp = 0;
            iOp < operators.size();
            iOp ++ ) {
                String a = LITERAL_OPERANDS.get(iOperandA);
                String b = LITERAL_OPERANDS.get(iOperandB);
                String op = operators.get(iOp);
                String inverse = inverses.get(op);
                if(comparators.contains(op) && (uncomparables.contains(a) || uncomparables.contains(b))) {
                    
                }
                else if(a.equals(b) && equalitors.contains(op)) {
                    if(a.equals("NaN") || a.equals("Infinity")) {
                        
                    }
                    else {
                        assertSameResults(join(a, inverse, b), "false");
                        
                    }
                }
                else {
                    
                }
            }
        }
    }
}

---
---
public void testInvertibleOperators_catena_6() {
    Map < String, String > inverses = ImmutableMap. < String, String > builder().put("==", "!=").put("===", "!==").put("<=", ">").put("<", ">=").put(">=", "<").put(">", "<=").put("!=", "==").put("!==", "===").build();
    Set < String > comparators = ImmutableSet.of("<=", "<", ">=", ">");
    Set < String > equalitors = ImmutableSet.of("==", "===");
    Set < String > uncomparables = ImmutableSet.of("undefined", "void 0");
    List < String > operators = ImmutableList.copyOf(inverses.values());
    for(int iOperandA = 0;
    iOperandA < LITERAL_OPERANDS.size();
    iOperandA ++ ) {
        for(int iOperandB = 0;
        iOperandB < LITERAL_OPERANDS.size();
        iOperandB ++ ) {
            for(int iOp = 0;
            iOp < operators.size();
            iOp ++ ) {
                String a = LITERAL_OPERANDS.get(iOperandA);
                String b = LITERAL_OPERANDS.get(iOperandB);
                String op = operators.get(iOp);
                String inverse = inverses.get(op);
                if(comparators.contains(op) && (uncomparables.contains(a) || uncomparables.contains(b))) {
                    
                }
                else if(a.equals(b) && equalitors.contains(op)) {
                    if(a.equals("NaN") || a.equals("Infinity")) {
                        
                    }
                    else {
                        
                    }
                }
                else {
                    assertNotSameResults(join(a, op, b), join(a, inverse, b));
                    
                }
            }
        }
    }
}

---
@@@
Split test: com.google.javascript.jscomp.PeepholeFoldConstantsTest::testCommutativeOperators
file: /root/workbench/exportInfo/d4j_buggy/Closure_74/test//com/google/javascript/jscomp/PeepholeFoldConstantsTest.java
Begin: Pos(1140, 10)
End: Pos(1166, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_74/test//com/google/javascript/jscomp/PeepholeFoldConstantsTest.java
Name: testCommutativeOperators
Childs: [StatementAssertion<Begin: Pos(1162, 11), End: Pos(1162, 73)>,
]
--------------------
Run: Closure_90
@@@
Split test: com.google.javascript.jscomp.TypeCheckTest::testBackwardsTypedefUse8
file: /root/workbench/exportInfo/d4j_buggy/Closure_90/test//com/google/javascript/jscomp/TypeCheckTest.java
Begin: Pos(2667, 10)
End: Pos(2675, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_90/test//com/google/javascript/jscomp/TypeCheckTest.java
Name: testBackwardsTypedefUse8
Childs: [StatementAssertion<Begin: Pos(2670, 5), End: Pos(2674, 68)>,
]
@@@
Split test: com.google.javascript.jscomp.TypeCheckTest::testBackwardsTypedefUse9
file: /root/workbench/exportInfo/d4j_buggy/Closure_90/test//com/google/javascript/jscomp/TypeCheckTest.java
Begin: Pos(2677, 10)
End: Pos(2686, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_90/test//com/google/javascript/jscomp/TypeCheckTest.java
Name: testBackwardsTypedefUse9
Childs: [StatementAssertion<Begin: Pos(2678, 5), End: Pos(2685, 27)>,
]
--------------------
Run: Closure_106
@@@
Split test: com.google.javascript.jscomp.CheckSideEffectsTest::testJSDocComments
file: /root/workbench/exportInfo/d4j_buggy/Closure_106/test//com/google/javascript/jscomp/CheckSideEffectsTest.java
Begin: Pos(85, 10)
End: Pos(88, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_106/test//com/google/javascript/jscomp/CheckSideEffectsTest.java
Name: testJSDocComments
Childs: [StatementAssertion<Begin: Pos(86, 5), End: Pos(86, 74)>,
StatementAssertion<Begin: Pos(87, 5), End: Pos(87, 73)>,
]
---
public void testJSDocComments_catena_0() {
    test("function A() { /** This is a jsdoc comment */ this.foo; }", ok);
    
}

---
---
public void testJSDocComments_catena_1() {
    test("function A() { /* This is a normal comment */ this.foo; }", e);
    
}

---
@@@
Split test: com.google.javascript.jscomp.CollapsePropertiesTest::testTwinReferenceCancelsChildCollapsing
file: /root/workbench/exportInfo/d4j_buggy/Closure_106/test//com/google/javascript/jscomp/CollapsePropertiesTest.java
Begin: Pos(1110, 10)
End: Pos(1113, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_106/test//com/google/javascript/jscomp/CollapsePropertiesTest.java
Name: testTwinReferenceCancelsChildCollapsing
Childs: [StatementAssertion<Begin: Pos(1111, 5), End: Pos(1112, 73)>,
]
@@@
Split test: com.google.javascript.jscomp.CollapsePropertiesTest::testCrashInNestedAssign
file: /root/workbench/exportInfo/d4j_buggy/Closure_106/test//com/google/javascript/jscomp/CollapsePropertiesTest.java
Begin: Pos(1105, 10)
End: Pos(1108, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_106/test//com/google/javascript/jscomp/CollapsePropertiesTest.java
Name: testCrashInNestedAssign
Childs: [StatementAssertion<Begin: Pos(1106, 5), End: Pos(1107, 55)>,
]
@@@
Split test: com.google.javascript.jscomp.CollapsePropertiesTest::testCrashInCommaOperator
file: /root/workbench/exportInfo/d4j_buggy/Closure_106/test//com/google/javascript/jscomp/CollapsePropertiesTest.java
Begin: Pos(1100, 10)
End: Pos(1103, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_106/test//com/google/javascript/jscomp/CollapsePropertiesTest.java
Name: testCrashInCommaOperator
Childs: [StatementAssertion<Begin: Pos(1101, 5), End: Pos(1102, 46)>,
]
--------------------
Run: Closure_9
@@@
Split test: com.google.javascript.jscomp.ProcessCommonJSModulesTest::testGuessModuleName
file: /root/workbench/exportInfo/d4j_buggy/Closure_9/test//com/google/javascript/jscomp/ProcessCommonJSModulesTest.java
Begin: Pos(128, 10)
End: Pos(136, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_9/test//com/google/javascript/jscomp/ProcessCommonJSModulesTest.java
Name: testGuessModuleName
Childs: [StatementAssertion<Begin: Pos(130, 5), End: Pos(131, 47)>,
StatementAssertion<Begin: Pos(132, 5), End: Pos(133, 48)>,
StatementAssertion<Begin: Pos(134, 5), End: Pos(135, 53)>,
]
---
public void testGuessModuleName_catena_0() {
    ProcessCommonJSModules pass = new ProcessCommonJSModules(null, "foo");
    assertEquals("module$baz", pass.guessCJSModuleName("foo/baz.js"));
    
}

---
---
public void testGuessModuleName_catena_1() {
    ProcessCommonJSModules pass = new ProcessCommonJSModules(null, "foo");
    assertEquals("module$baz", pass.guessCJSModuleName("foo\\baz.js"));
    
}

---
---
public void testGuessModuleName_catena_2() {
    ProcessCommonJSModules pass = new ProcessCommonJSModules(null, "foo");
    assertEquals("module$bar$baz", pass.guessCJSModuleName("foo\\bar\\baz.js"));
    
}

---
--------------------
Run: Closure_22
@@@
Split test: com.google.javascript.jscomp.CheckSideEffectsTest::testUselessCode
file: /root/workbench/exportInfo/d4j_buggy/Closure_22/test//com/google/javascript/jscomp/CheckSideEffectsTest.java
Begin: Pos(49, 10)
End: Pos(80, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_22/test//com/google/javascript/jscomp/CheckSideEffectsTest.java
Name: testUselessCode
Childs: [StatementAssertion<Begin: Pos(50, 5), End: Pos(50, 48)>,
StatementAssertion<Begin: Pos(51, 5), End: Pos(51, 68)>,
StatementAssertion<Begin: Pos(53, 5), End: Pos(53, 29)>,
StatementAssertion<Begin: Pos(54, 5), End: Pos(54, 75)>,
StatementAssertion<Begin: Pos(56, 5), End: Pos(56, 23)>,
StatementAssertion<Begin: Pos(57, 5), End: Pos(57, 55)>,
StatementAssertion<Begin: Pos(59, 5), End: Pos(59, 31)>,
StatementAssertion<Begin: Pos(60, 5), End: Pos(61, 58)>,
StatementAssertion<Begin: Pos(63, 5), End: Pos(63, 17)>,
StatementAssertion<Begin: Pos(64, 5), End: Pos(64, 35)>,
StatementAssertion<Begin: Pos(66, 5), End: Pos(66, 39)>,
StatementAssertion<Begin: Pos(67, 5), End: Pos(68, 60)>,
StatementAssertion<Begin: Pos(69, 5), End: Pos(70, 57)>,
StatementAssertion<Begin: Pos(71, 5), End: Pos(72, 64)>,
StatementAssertion<Begin: Pos(73, 5), End: Pos(74, 71)>,
StatementAssertion<Begin: Pos(75, 5), End: Pos(75, 41)>,
StatementAssertion<Begin: Pos(76, 5), End: Pos(76, 67)>,
StatementAssertion<Begin: Pos(77, 5), End: Pos(79, 49)>,
]
---
public void testUselessCode_catena_0() {
    test("function f(x) { if(x) return; }", ok);
    
}

---
---
public void testUselessCode_catena_1() {
    test("function f(x) { if(x); }", "function f(x) { if(x); }", e);
    
}

---
---
public void testUselessCode_catena_2() {
    test("if(x) x = y;", ok);
    
}

---
---
public void testUselessCode_catena_3() {
    test("if(x) x == bar();", "if(x) JSCOMPILER_PRESERVE(x == bar());", e);
    
}

---
---
public void testUselessCode_catena_4() {
    test("x = 3;", ok);
    
}

---
---
public void testUselessCode_catena_5() {
    test("x == 3;", "JSCOMPILER_PRESERVE(x == 3);", e);
    
}

---
---
public void testUselessCode_catena_6() {
    test("var x = 'test'", ok);
    
}

---
---
public void testUselessCode_catena_7() {
    test("var x = 'test'\n'str'", "var x = 'test'\nJSCOMPILER_PRESERVE('str')", e);
    
}

---
---
public void testUselessCode_catena_8() {
    test("", ok);
    
}

---
---
public void testUselessCode_catena_9() {
    test("foo();;;;bar();;;;", ok);
    
}

---
---
public void testUselessCode_catena_10() {
    test("var a, b; a = 5, b = 6", ok);
    
}

---
---
public void testUselessCode_catena_11() {
    test("var a, b; a = 5, b == 6", "var a, b; a = 5, JSCOMPILER_PRESERVE(b == 6)", e);
    
}

---
---
public void testUselessCode_catena_12() {
    test("var a, b; a = (5, 6)", "var a, b; a = (JSCOMPILER_PRESERVE(5), 6)", e);
    
}

---
---
public void testUselessCode_catena_13() {
    test("var a, b; a = (bar(), 6, 7)", "var a, b; a = (bar(), JSCOMPILER_PRESERVE(6), 7)", e);
    
}

---
---
public void testUselessCode_catena_14() {
    test("var a, b; a = (bar(), bar(), 7, 8)", "var a, b; a = (bar(), bar(), JSCOMPILER_PRESERVE(7), 8)", e);
    
}

---
---
public void testUselessCode_catena_15() {
    test("var a, b; a = (b = 7, 6)", ok);
    
}

---
---
public void testUselessCode_catena_16() {
    test("function x(){}\nfunction f(a, b){}\nf(1,(x(), 2));", ok);
    
}

---
---
public void testUselessCode_catena_17() {
    test("function x(){}\nfunction f(a, b){}\nf(1,(2, 3));", "function x(){}\nfunction f(a, b){}\n" + "f(1,(JSCOMPILER_PRESERVE(2), 3));", e);
    
}

---
--------------------
Run: Closure_171
@@@
Split test: com.google.javascript.jscomp.TypeCheckTest::testIssue1023
file: /root/workbench/exportInfo/d4j_buggy/Closure_171/test//com/google/javascript/jscomp/TypeCheckTest.java
Begin: Pos(6755, 10)
End: Pos(6769, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_171/test//com/google/javascript/jscomp/TypeCheckTest.java
Name: testIssue1023
Childs: [StatementAssertion<Begin: Pos(6756, 5), End: Pos(6768, 28)>,
]
@@@
Split test: com.google.javascript.jscomp.TypedScopeCreatorTest::testMethodBeforeFunction2
file: /root/workbench/exportInfo/d4j_buggy/Closure_171/test//com/google/javascript/jscomp/TypedScopeCreatorTest.java
Begin: Pos(437, 10)
End: Pos(454, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_171/test//com/google/javascript/jscomp/TypedScopeCreatorTest.java
Name: testMethodBeforeFunction2
Childs: [StatementAssertion<Begin: Pos(438, 5), End: Pos(443, 27)>,
StatementAssertion<Begin: Pos(445, 5), End: Pos(445, 41)>,
StatementAssertion<Begin: Pos(446, 5), End: Pos(446, 65)>,
StatementAssertion<Begin: Pos(447, 5), End: Pos(448, 47)>,
StatementAssertion<Begin: Pos(449, 5), End: Pos(449, 51)>,
StatementAssertion<Begin: Pos(452, 5), End: Pos(453, 47)>,
]
---
public void testMethodBeforeFunction2_catena_0()throws Exception {
    testSame("var y = Window.prototype;" + "Window.prototype = {alert: function(message) {}};" + "/** @constructor */ function Window() {}\n" + "var window = new Window(); \n" + "var x = window;");
    ObjectType x = (ObjectType)findNameType("x", globalScope);
    ObjectType y = (ObjectType)findNameType("y", globalScope);
    
}

---
---
public void testMethodBeforeFunction2_catena_1()throws Exception {
    ObjectType x = (ObjectType)findNameType("x", globalScope);
    assertEquals("Window", x.toString());
    ObjectType y = (ObjectType)findNameType("y", globalScope);
    
}

---
---
public void testMethodBeforeFunction2_catena_2()throws Exception {
    ObjectType x = (ObjectType)findNameType("x", globalScope);
    assertTrue(x.getImplicitPrototype().hasOwnProperty("alert"));
    ObjectType y = (ObjectType)findNameType("y", globalScope);
    
}

---
---
public void testMethodBeforeFunction2_catena_3()throws Exception {
    ObjectType x = (ObjectType)findNameType("x", globalScope);
    assertEquals("function (this:Window, ?): undefined", x.getPropertyType("alert").toString());
    ObjectType y = (ObjectType)findNameType("y", globalScope);
    
}

---
---
public void testMethodBeforeFunction2_catena_4()throws Exception {
    ObjectType x = (ObjectType)findNameType("x", globalScope);
    assertFalse(x.isPropertyTypeDeclared("alert"));
    ObjectType y = (ObjectType)findNameType("y", globalScope);
    
}

---
---
public void testMethodBeforeFunction2_catena_5()throws Exception {
    ObjectType x = (ObjectType)findNameType("x", globalScope);
    ObjectType y = (ObjectType)findNameType("y", globalScope);
    assertEquals("function (this:Window, ?): undefined", y.getPropertyType("alert").toString());
    
}

---
@@@
Split test: com.google.javascript.jscomp.TypedScopeCreatorTest::testPropertiesOnInterface2
file: /root/workbench/exportInfo/d4j_buggy/Closure_171/test//com/google/javascript/jscomp/TypedScopeCreatorTest.java
Begin: Pos(532, 10)
End: Pos(552, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_171/test//com/google/javascript/jscomp/TypedScopeCreatorTest.java
Name: testPropertiesOnInterface2
Childs: [StatementAssertion<Begin: Pos(533, 5), End: Pos(535, 50)>,
StatementAssertion<Begin: Pos(538, 5), End: Pos(538, 65)>,
StatementAssertion<Begin: Pos(539, 5), End: Pos(539, 42)>,
StatementAssertion<Begin: Pos(543, 5), End: Pos(543, 55)>,
StatementAssertion<Begin: Pos(544, 5), End: Pos(544, 53)>,
StatementAssertion<Begin: Pos(546, 5), End: Pos(546, 73)>,
StatementAssertion<Begin: Pos(548, 5), End: Pos(549, 54)>,
StatementAssertion<Begin: Pos(551, 5), End: Pos(551, 74)>,
]
---
public void testPropertiesOnInterface2_catena_0()throws Exception {
    testSame("/** @interface */ var I = function() {};" + "I.prototype = {baz: function(){}};" + "/** @type {number} */ I.prototype.bar;");
    Var i = globalScope.getVar("I");
    ObjectType iPrototype = (ObjectType)((ObjectType)i.getType()).getPropertyType("prototype");
    
}

---
---
public void testPropertiesOnInterface2_catena_1()throws Exception {
    Var i = globalScope.getVar("I");
    assertEquals("function (this:I): ?", i.getType().toString());
    ObjectType iPrototype = (ObjectType)((ObjectType)i.getType()).getPropertyType("prototype");
    
}

---
---
public void testPropertiesOnInterface2_catena_2()throws Exception {
    Var i = globalScope.getVar("I");
    assertTrue(i.getType().isInterface());
    ObjectType iPrototype = (ObjectType)((ObjectType)i.getType()).getPropertyType("prototype");
    
}

---
---
public void testPropertiesOnInterface2_catena_3()throws Exception {
    Var i = globalScope.getVar("I");
    ObjectType iPrototype = (ObjectType)((ObjectType)i.getType()).getPropertyType("prototype");
    assertEquals("I.prototype", iPrototype.toString());
    
}

---
---
public void testPropertiesOnInterface2_catena_4()throws Exception {
    Var i = globalScope.getVar("I");
    ObjectType iPrototype = (ObjectType)((ObjectType)i.getType()).getPropertyType("prototype");
    assertTrue(iPrototype.isFunctionPrototypeType());
    
}

---
---
public void testPropertiesOnInterface2_catena_5()throws Exception {
    Var i = globalScope.getVar("I");
    ObjectType iPrototype = (ObjectType)((ObjectType)i.getType()).getPropertyType("prototype");
    assertEquals("number", iPrototype.getPropertyType("bar").toString());
    
}

---
---
public void testPropertiesOnInterface2_catena_6()throws Exception {
    Var i = globalScope.getVar("I");
    ObjectType iPrototype = (ObjectType)((ObjectType)i.getType()).getPropertyType("prototype");
    assertEquals("function (this:I): undefined", iPrototype.getPropertyType("baz").toString());
    
}

---
---
public void testPropertiesOnInterface2_catena_7()throws Exception {
    Var i = globalScope.getVar("I");
    ObjectType iPrototype = (ObjectType)((ObjectType)i.getType()).getPropertyType("prototype");
    assertEquals(iPrototype, globalScope.getVar("I.prototype").getType());
    
}

---
--------------------
Run: Closure_140
@@@
Split test: com.google.javascript.jscomp.CrossModuleCodeMotionTest::testEmptyModule
file: /root/workbench/exportInfo/d4j_buggy/Closure_140/test//com/google/javascript/jscomp/CrossModuleCodeMotionTest.java
Begin: Pos(657, 10)
End: Pos(685, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_140/test//com/google/javascript/jscomp/CrossModuleCodeMotionTest.java
Name: testEmptyModule
Childs: [StatementAssertion<Begin: Pos(678, 5), End: Pos(684, 7)>,
]
--------------------
Run: Closure_131
@@@
Split test: com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps
file: /root/workbench/exportInfo/d4j_buggy/Closure_131/test//com/google/javascript/jscomp/ConvertToDottedPropertiesTest.java
Begin: Pos(68, 10)
End: Pos(73, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_131/test//com/google/javascript/jscomp/ConvertToDottedPropertiesTest.java
Name: testQuotedProps
Childs: [StatementAssertion<Begin: Pos(69, 5), End: Pos(69, 25)>,
StatementAssertion<Begin: Pos(70, 5), End: Pos(70, 28)>,
StatementAssertion<Begin: Pos(71, 5), End: Pos(71, 27)>,
StatementAssertion<Begin: Pos(72, 5), End: Pos(72, 28)>,
]
---
public void testQuotedProps_catena_0() {
    testSame("({'':0})");
    
}

---
---
public void testQuotedProps_catena_1() {
    testSame("({'1.0':0})");
    
}

---
---
public void testQuotedProps_catena_2() {
    testSame("({'ᴗA':0})");
    
}

---
---
public void testQuotedProps_catena_3() {
    testSame("({'ab':0})");
    
}

---
@@@
Split test: com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert
file: /root/workbench/exportInfo/d4j_buggy/Closure_131/test//com/google/javascript/jscomp/ConvertToDottedPropertiesTest.java
Begin: Pos(41, 10)
End: Pos(65, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_131/test//com/google/javascript/jscomp/ConvertToDottedPropertiesTest.java
Name: testDoNotConvert
Childs: [StatementAssertion<Begin: Pos(42, 5), End: Pos(42, 21)>,
StatementAssertion<Begin: Pos(43, 5), End: Pos(43, 22)>,
StatementAssertion<Begin: Pos(44, 5), End: Pos(44, 23)>,
StatementAssertion<Begin: Pos(45, 5), End: Pos(45, 23)>,
StatementAssertion<Begin: Pos(46, 5), End: Pos(46, 23)>,
StatementAssertion<Begin: Pos(47, 5), End: Pos(47, 23)>,
StatementAssertion<Begin: Pos(48, 5), End: Pos(48, 23)>,
StatementAssertion<Begin: Pos(49, 5), End: Pos(49, 23)>,
StatementAssertion<Begin: Pos(50, 5), End: Pos(50, 24)>,
StatementAssertion<Begin: Pos(51, 5), End: Pos(51, 28)>,
StatementAssertion<Begin: Pos(52, 5), End: Pos(52, 21)>,
StatementAssertion<Begin: Pos(53, 5), End: Pos(53, 21)>,
StatementAssertion<Begin: Pos(54, 5), End: Pos(54, 21)>,
StatementAssertion<Begin: Pos(55, 5), End: Pos(55, 23)>,
StatementAssertion<Begin: Pos(56, 5), End: Pos(56, 29)>,
StatementAssertion<Begin: Pos(58, 5), End: Pos(58, 24)>,
StatementAssertion<Begin: Pos(61, 5), End: Pos(61, 31)>,
StatementAssertion<Begin: Pos(64, 5), End: Pos(64, 49)>,
]
---
public void testDoNotConvert_catena_0() {
    testSame("a[0]");
    
}

---
---
public void testDoNotConvert_catena_1() {
    testSame("a['']");
    
}

---
---
public void testDoNotConvert_catena_2() {
    testSame("a[' ']");
    
}

---
---
public void testDoNotConvert_catena_3() {
    testSame("a[',']");
    
}

---
---
public void testDoNotConvert_catena_4() {
    testSame("a[';']");
    
}

---
---
public void testDoNotConvert_catena_5() {
    testSame("a[':']");
    
}

---
---
public void testDoNotConvert_catena_6() {
    testSame("a['.']");
    
}

---
---
public void testDoNotConvert_catena_7() {
    testSame("a['0']");
    
}

---
---
public void testDoNotConvert_catena_8() {
    testSame("a['p ']");
    
}

---
---
public void testDoNotConvert_catena_9() {
    testSame("a['p' + '']");
    
}

---
---
public void testDoNotConvert_catena_10() {
    testSame("a[p]");
    
}

---
---
public void testDoNotConvert_catena_11() {
    testSame("a[P]");
    
}

---
---
public void testDoNotConvert_catena_12() {
    testSame("a[$]");
    
}

---
---
public void testDoNotConvert_catena_13() {
    testSame("a[p()]");
    
}

---
---
public void testDoNotConvert_catena_14() {
    testSame("a['default']");
    
}

---
---
public void testDoNotConvert_catena_15() {
    testSame("a['A']");
    
}

---
---
public void testDoNotConvert_catena_16() {
    test("a['ᴗA']", "a['ᴗA']");
    
}

---
---
public void testDoNotConvert_catena_17() {
    test("a['ÑStuffAfter']", "a['ÑStuffAfter']");
    
}

---
--------------------
Run: Closure_121
@@@
Split test: com.google.javascript.jscomp.InlineVariablesTest::testExternalIssue1053
file: /root/workbench/exportInfo/d4j_buggy/Closure_121/test//com/google/javascript/jscomp/InlineVariablesTest.java
Begin: Pos(1068, 10)
End: Pos(1071, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_121/test//com/google/javascript/jscomp/InlineVariablesTest.java
Name: testExternalIssue1053
Childs: [StatementAssertion<Begin: Pos(1069, 5), End: Pos(1070, 77)>,
]
--------------------
Run: Closure_48
@@@
Split test: com.google.javascript.jscomp.TypeCheckTest::testIssue586
file: /root/workbench/exportInfo/d4j_buggy/Closure_48/test//com/google/javascript/jscomp/TypeCheckTest.java
Begin: Pos(5442, 10)
End: Pos(5455, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_48/test//com/google/javascript/jscomp/TypeCheckTest.java
Name: testIssue586
Childs: [StatementAssertion<Begin: Pos(5443, 5), End: Pos(5454, 43)>,
]
--------------------
Run: Closure_17
@@@
Split test: com.google.javascript.jscomp.TypeCheckTest::testIssue688
file: /root/workbench/exportInfo/d4j_buggy/Closure_17/test//com/google/javascript/jscomp/TypeCheckTest.java
Begin: Pos(5905, 10)
End: Pos(5922, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_17/test//com/google/javascript/jscomp/TypeCheckTest.java
Name: testIssue688
Childs: [StatementAssertion<Begin: Pos(5906, 5), End: Pos(5921, 28)>,
]
--------------------
Run: Closure_170
@@@
Split test: com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest::testVarAssinInsideHookIssue965
file: /root/workbench/exportInfo/d4j_buggy/Closure_170/test//com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java
Begin: Pos(577, 10)
End: Pos(582, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_170/test//com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java
Name: testVarAssinInsideHookIssue965
Childs: [StatementAssertion<Begin: Pos(578, 5), End: Pos(578, 54)>,
StatementAssertion<Begin: Pos(579, 5), End: Pos(579, 61)>,
StatementAssertion<Begin: Pos(580, 5), End: Pos(580, 58)>,
StatementAssertion<Begin: Pos(581, 5), End: Pos(581, 57)>,
]
---
public void testVarAssinInsideHookIssue965_catena_0() {
    noInline("var i = 0; return 1 ? (i = 5) : 0, i;");
    
}

---
---
public void testVarAssinInsideHookIssue965_catena_1() {
    noInline("var i = 0; return (1 ? (i = 5) : 0) ? i : 0;");
    
}

---
---
public void testVarAssinInsideHookIssue965_catena_2() {
    noInline("var i = 0; return (1 ? (i = 5) : 0) || i;");
    
}

---
---
public void testVarAssinInsideHookIssue965_catena_3() {
    noInline("var i = 0; return (1 ? (i = 5) : 0) * i;");
    
}

---
--------------------
Run: Closure_79
@@@
Split test: com.google.javascript.jscomp.NormalizeTest::testIssue
file: /root/workbench/exportInfo/d4j_buggy/Closure_79/test//com/google/javascript/jscomp/NormalizeTest.java
Begin: Pos(384, 10)
End: Pos(387, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_79/test//com/google/javascript/jscomp/NormalizeTest.java
Name: testIssue
Childs: [StatementAssertion<Begin: Pos(386, 5), End: Pos(386, 67)>,
]
@@@
Split test: com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns1
file: /root/workbench/exportInfo/d4j_buggy/Closure_79/test//com/google/javascript/jscomp/VarCheckTest.java
Begin: Pos(140, 10)
End: Pos(143, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_79/test//com/google/javascript/jscomp/VarCheckTest.java
Name: testPropReferenceInExterns1
Childs: [StatementAssertion<Begin: Pos(141, 5), End: Pos(142, 45)>,
]
@@@
Split test: com.google.javascript.jscomp.VarCheckTest::testPropReferenceInExterns3
file: /root/workbench/exportInfo/d4j_buggy/Closure_79/test//com/google/javascript/jscomp/VarCheckTest.java
Begin: Pos(150, 10)
End: Pos(161, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_79/test//com/google/javascript/jscomp/VarCheckTest.java
Name: testPropReferenceInExterns3
Childs: [StatementAssertion<Begin: Pos(151, 5), End: Pos(152, 45)>,
StatementAssertion<Begin: Pos(155, 5), End: Pos(157, 52)>,
StatementAssertion<Begin: Pos(160, 5), End: Pos(160, 60)>,
]
---
public void testPropReferenceInExterns3_catena_0() {
    testSame("asdf.foo;", "var asdf;", VarCheck.UNDEFINED_EXTERN_VAR_ERROR);
    externValidationErrorLevel = CheckLevel.ERROR;
    externValidationErrorLevel = CheckLevel.OFF;
    
}

---
---
public void testPropReferenceInExterns3_catena_1() {
    externValidationErrorLevel = CheckLevel.ERROR;
    test("asdf.foo;", "var asdf;", "", VarCheck.UNDEFINED_EXTERN_VAR_ERROR, null);
    externValidationErrorLevel = CheckLevel.OFF;
    
}

---
---
public void testPropReferenceInExterns3_catena_2() {
    externValidationErrorLevel = CheckLevel.ERROR;
    externValidationErrorLevel = CheckLevel.OFF;
    test("asdf.foo;", "var asdf;", "var asdf;", null, null);
    
}

---
@@@
Split test: com.google.javascript.jscomp.VarCheckTest::testVarReferenceInExterns
file: /root/workbench/exportInfo/d4j_buggy/Closure_79/test//com/google/javascript/jscomp/VarCheckTest.java
Begin: Pos(130, 10)
End: Pos(133, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_79/test//com/google/javascript/jscomp/VarCheckTest.java
Name: testVarReferenceInExterns
Childs: [StatementAssertion<Begin: Pos(131, 5), End: Pos(132, 50)>,
]
@@@
Split test: com.google.javascript.jscomp.VarCheckTest::testCallInExterns
file: /root/workbench/exportInfo/d4j_buggy/Closure_79/test//com/google/javascript/jscomp/VarCheckTest.java
Begin: Pos(135, 10)
End: Pos(138, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_79/test//com/google/javascript/jscomp/VarCheckTest.java
Name: testCallInExterns
Childs: [StatementAssertion<Begin: Pos(136, 5), End: Pos(137, 50)>,
]
--------------------
Run: Closure_4
@@@
Split test: com.google.javascript.jscomp.TypeCheckTest::testImplementsExtendsLoop
file: /root/workbench/exportInfo/d4j_buggy/Closure_4/test//com/google/javascript/jscomp/TypeCheckTest.java
Begin: Pos(9231, 10)
End: Pos(9239, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_4/test//com/google/javascript/jscomp/TypeCheckTest.java
Name: testImplementsExtendsLoop
Childs: [StatementAssertion<Begin: Pos(9232, 5), End: Pos(9238, 75)>,
]
@@@
Split test: com.google.javascript.jscomp.TypeCheckTest::testImplementsLoop
file: /root/workbench/exportInfo/d4j_buggy/Closure_4/test//com/google/javascript/jscomp/TypeCheckTest.java
Begin: Pos(9222, 10)
End: Pos(9229, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_4/test//com/google/javascript/jscomp/TypeCheckTest.java
Name: testImplementsLoop
Childs: [StatementAssertion<Begin: Pos(9223, 5), End: Pos(9228, 75)>,
]
@@@
Split test: com.google.javascript.jscomp.TypeCheckTest::testConversionFromInterfaceToRecursiveConstructor
file: /root/workbench/exportInfo/d4j_buggy/Closure_4/test//com/google/javascript/jscomp/TypeCheckTest.java
Begin: Pos(9252, 10)
End: Pos(9266, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_4/test//com/google/javascript/jscomp/TypeCheckTest.java
Name: testConversionFromInterfaceToRecursiveConstructor
Childs: [StatementAssertion<Begin: Pos(9254, 5), End: Pos(9265, 40)>,
]
--------------------
Run: Closure_139
@@@
Split test: com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations
file: /root/workbench/exportInfo/d4j_buggy/Closure_139/test//com/google/javascript/jscomp/NormalizeTest.java
# check: Use pattern matching: .testSameInFunction
Use pattern matching: .testInFunction
Use pattern matching: .testInFunction
Use pattern matching: .testInFunction
Use pattern matching: .testInFunction
Begin: Pos(161, 10)
End: Pos(190, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_139/test//com/google/javascript/jscomp/NormalizeTest.java
Name: testNormalizeFunctionDeclarations
Childs: [StatementAssertion<Begin: Pos(162, 5), End: Pos(162, 32)>,
StatementAssertion<Begin: Pos(163, 5), End: Pos(163, 39)>,
StatementAssertion<Begin: Pos(164, 5), End: Pos(165, 39)>,
StatementAssertion<Begin: Pos(166, 5), End: Pos(166, 40)>,
StatementAssertion<Begin: Pos(167, 5), End: Pos(168, 41)>,
StatementAssertion<Begin: Pos(169, 5), End: Pos(170, 37)>,
StatementAssertion<Begin: Pos(171, 5), End: Pos(171, 40)>,
StatementAssertion<Begin: Pos(172, 5), End: Pos(173, 47)>,
StatementAssertion<Begin: Pos(174, 5), End: Pos(175, 55)>,
StatementAssertion<Begin: Pos(176, 5), End: Pos(176, 44)>,
StatementAssertion<Begin: Pos(177, 5), End: Pos(178, 57)>,
StatementAssertion<Begin: Pos(181, 5), End: Pos(181, 42)>,
StatementAssertion<Begin: Pos(182, 5), End: Pos(183, 56)>,
StatementAssertion<Begin: Pos(184, 5), End: Pos(185, 52)>,
StatementAssertion<Begin: Pos(186, 5), End: Pos(187, 62)>,
StatementAssertion<Begin: Pos(188, 5), End: Pos(189, 65)>,
]
---
public void testNormalizeFunctionDeclarations_catena_0()throws Exception {
    testSame("function f() {}");
    
}

---
---
public void testNormalizeFunctionDeclarations_catena_1()throws Exception {
    testSame("var f = function () {}");
    
}

---
---
public void testNormalizeFunctionDeclarations_catena_2()throws Exception {
    test("var f = function f() {}", "var f = function f$$1() {}");
    
}

---
---
public void testNormalizeFunctionDeclarations_catena_3()throws Exception {
    testSame("var f = function g() {}");
    
}

---
---
public void testNormalizeFunctionDeclarations_catena_4()throws Exception {
    test("a:function g() {}", "a:{ var g = function () {} }");
    
}

---
---
public void testNormalizeFunctionDeclarations_catena_5()throws Exception {
    test("{function g() {}}", "{var g = function () {}}");
    
}

---
---
public void testNormalizeFunctionDeclarations_catena_6()throws Exception {
    testSame("if (function g() {}) {}");
    
}

---
---
public void testNormalizeFunctionDeclarations_catena_7()throws Exception {
    test("if (true) {function g() {}}", "if (true) {var g = function () {}}");
    
}

---
---
public void testNormalizeFunctionDeclarations_catena_8()throws Exception {
    test("if (true) {} else {function g() {}}", "if (true) {} else {var g = function () {}}");
    
}

---
---
public void testNormalizeFunctionDeclarations_catena_9()throws Exception {
    testSame("switch (function g() {}) {}");
    
}

---
---
public void testNormalizeFunctionDeclarations_catena_10()throws Exception {
    test("switch (1) { case 1: function g() {}}", "switch (1) { case 1: var g = function () {}}");
    
}

---
---
public void testNormalizeFunctionDeclarations_catena_11()throws Exception {
    testSameInFunction("function f() {}");
    
}

---
---
public void testNormalizeFunctionDeclarations_catena_12()throws Exception {
    testInFunction("f(); a:function g() {}", "f(); a:{ var g = function () {} }");
    
}

---
---
public void testNormalizeFunctionDeclarations_catena_13()throws Exception {
    testInFunction("f(); {function g() {}}", "f(); {var g = function () {}}");
    
}

---
---
public void testNormalizeFunctionDeclarations_catena_14()throws Exception {
    testInFunction("f(); if (true) {function g() {}}", "f(); if (true) {var g = function () {}}");
    
}

---
---
public void testNormalizeFunctionDeclarations_catena_15()throws Exception {
    testInFunction("if (true) {} else {function g() {}}", "if (true) {} else {var g = function () {}}");
    
}

---
@@@
Split test: com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3
file: /root/workbench/exportInfo/d4j_buggy/Closure_139/test//com/google/javascript/jscomp/NormalizeTest.java
Begin: Pos(254, 10)
End: Pos(276, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_139/test//com/google/javascript/jscomp/NormalizeTest.java
Name: testRemoveDuplicateVarDeclarations3
Childs: [StatementAssertion<Begin: Pos(255, 5), End: Pos(256, 34)>,
StatementAssertion<Begin: Pos(257, 5), End: Pos(258, 27)>,
StatementAssertion<Begin: Pos(259, 5), End: Pos(260, 61)>,
StatementAssertion<Begin: Pos(262, 5), End: Pos(263, 34)>,
StatementAssertion<Begin: Pos(264, 5), End: Pos(265, 27)>,
StatementAssertion<Begin: Pos(266, 5), End: Pos(267, 61)>,
StatementAssertion<Begin: Pos(271, 5), End: Pos(273, 60)>,
StatementAssertion<Begin: Pos(274, 5), End: Pos(275, 72)>,
]
---
public void testRemoveDuplicateVarDeclarations3_catena_0() {
    test("var f = 1; function f(){}", "f = 1; function f(){}");
    
}

---
---
public void testRemoveDuplicateVarDeclarations3_catena_1() {
    test("var f; function f(){}", "function f(){}");
    
}

---
---
public void testRemoveDuplicateVarDeclarations3_catena_2() {
    test("if (a) { var f = 1; } else { function f(){} }", "if (a) { var f = 1; } else { f = function (){} }");
    
}

---
---
public void testRemoveDuplicateVarDeclarations3_catena_3() {
    test("function f(){} var f = 1;", "function f(){} f = 1;");
    
}

---
---
public void testRemoveDuplicateVarDeclarations3_catena_4() {
    test("function f(){} var f;", "function f(){}");
    
}

---
---
public void testRemoveDuplicateVarDeclarations3_catena_5() {
    test("if (a) { function f(){} } else { var f = 1; }", "if (a) { var f = function (){} } else { f = 1; }");
    
}

---
---
public void testRemoveDuplicateVarDeclarations3_catena_6() {
    test("function f(){} function f(){}", "function f(){} function f(){}", SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR);
    
}

---
---
public void testRemoveDuplicateVarDeclarations3_catena_7() {
    test("if (a) { function f(){} } else { function f(){} }", "if (a) { var f = function (){} } else { f = function (){} }");
    
}

---
@@@
Split test: com.google.javascript.jscomp.NormalizeTest::testMoveFunctions2
file: /root/workbench/exportInfo/d4j_buggy/Closure_139/test//com/google/javascript/jscomp/NormalizeTest.java
Begin: Pos(139, 10)
End: Pos(147, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_139/test//com/google/javascript/jscomp/NormalizeTest.java
Name: testMoveFunctions2
Childs: [StatementAssertion<Begin: Pos(140, 5), End: Pos(140, 51)>,
StatementAssertion<Begin: Pos(141, 5), End: Pos(142, 64)>,
StatementAssertion<Begin: Pos(143, 5), End: Pos(144, 60)>,
StatementAssertion<Begin: Pos(145, 5), End: Pos(146, 70)>,
]
---
public void testMoveFunctions2_catena_0()throws Exception {
    testSame("function f() { function foo() {} }");
    
}

---
---
public void testMoveFunctions2_catena_1()throws Exception {
    test("function f() { f(); a:function bar() {} }", "function f() { f(); a:{ var bar = function () {} }}");
    
}

---
---
public void testMoveFunctions2_catena_2()throws Exception {
    test("function f() { f(); {function bar() {}}}", "function f() { f(); {var bar = function () {}}}");
    
}

---
---
public void testMoveFunctions2_catena_3()throws Exception {
    test("function f() { f(); if (true) {function bar() {}}}", "function f() { f(); if (true) {var bar = function () {}}}");
    
}

---
--------------------
Run: Closure_134
@@@
Split test: com.google.javascript.jscomp.AmbiguatePropertiesTest::testImplementsAndExtends
file: /root/workbench/exportInfo/d4j_buggy/Closure_134/test//com/google/javascript/jscomp/AmbiguatePropertiesTest.java
Begin: Pos(408, 10)
End: Pos(432, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_134/test//com/google/javascript/jscomp/AmbiguatePropertiesTest.java
Name: testImplementsAndExtends
Childs: [StatementAssertion<Begin: Pos(431, 5), End: Pos(431, 21)>,
]
@@@
Split test: com.google.javascript.jscomp.TypeCheckTest::testIssue86
file: /root/workbench/exportInfo/d4j_buggy/Closure_134/test//com/google/javascript/jscomp/TypeCheckTest.java
Begin: Pos(3906, 10)
End: Pos(3915, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_134/test//com/google/javascript/jscomp/TypeCheckTest.java
Name: testIssue86
Childs: [StatementAssertion<Begin: Pos(3907, 5), End: Pos(3914, 28)>,
]
--------------------
Run: Closure_169
@@@
Split test: com.google.javascript.jscomp.TypeCheckTest::testIssue791
file: /root/workbench/exportInfo/d4j_buggy/Closure_169/test//com/google/javascript/jscomp/TypeCheckTest.java
Begin: Pos(6422, 10)
End: Pos(6429, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_169/test//com/google/javascript/jscomp/TypeCheckTest.java
Name: testIssue791
Childs: [StatementAssertion<Begin: Pos(6423, 5), End: Pos(6428, 28)>,
]
@@@
Split test: com.google.javascript.rhino.jstype.RecordTypeTest::testSubtypeWithUnknowns2
file: /root/workbench/exportInfo/d4j_buggy/Closure_169/test//com/google/javascript/rhino/jstype/RecordTypeTest.java
Begin: Pos(124, 10)
End: Pos(141, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_169/test//com/google/javascript/rhino/jstype/RecordTypeTest.java
Name: testSubtypeWithUnknowns2
Childs: [StatementAssertion<Begin: Pos(139, 5), End: Pos(139, 43)>,
StatementAssertion<Begin: Pos(140, 5), End: Pos(140, 43)>,
]
---
public void testSubtypeWithUnknowns2_catena_0()throws Exception {
    JSType recordA = new RecordTypeBuilder(registry).addProperty("a", new FunctionBuilder(registry).withReturnType(NUMBER_TYPE).build(), null).build();
    JSType recordB = new RecordTypeBuilder(registry).addProperty("a", new FunctionBuilder(registry).withReturnType(UNKNOWN_TYPE).build(), null).build();
    assertTrue(recordA.isSubtype(recordB));
    
}

---
---
public void testSubtypeWithUnknowns2_catena_1()throws Exception {
    JSType recordA = new RecordTypeBuilder(registry).addProperty("a", new FunctionBuilder(registry).withReturnType(NUMBER_TYPE).build(), null).build();
    JSType recordB = new RecordTypeBuilder(registry).addProperty("a", new FunctionBuilder(registry).withReturnType(UNKNOWN_TYPE).build(), null).build();
    assertTrue(recordB.isSubtype(recordA));
    
}

---
--------------------
Run: Closure_116
@@@
Split test: com.google.javascript.jscomp.FunctionInjectorTest::testIssue1101a
file: /root/workbench/exportInfo/d4j_buggy/Closure_116/test//com/google/javascript/jscomp/FunctionInjectorTest.java
Begin: Pos(1346, 10)
End: Pos(1350, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_116/test//com/google/javascript/jscomp/FunctionInjectorTest.java
Name: testIssue1101a
Childs: [StatementAssertion<Begin: Pos(1347, 5), End: Pos(1349, 23)>,
]
@@@
Split test: com.google.javascript.jscomp.FunctionInjectorTest::testIssue1101b
file: /root/workbench/exportInfo/d4j_buggy/Closure_116/test//com/google/javascript/jscomp/FunctionInjectorTest.java
Begin: Pos(1352, 10)
End: Pos(1356, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_116/test//com/google/javascript/jscomp/FunctionInjectorTest.java
Name: testIssue1101b
Childs: [StatementAssertion<Begin: Pos(1353, 5), End: Pos(1355, 23)>,
]
@@@
Split test: com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
file: /root/workbench/exportInfo/d4j_buggy/Closure_116/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Begin: Pos(2062, 10)
End: Pos(2098, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_116/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Name: testBug4944818
Childs: [StatementAssertion<Begin: Pos(2063, 5), End: Pos(2097, 13)>,
]
@@@
Split test: com.google.javascript.jscomp.InlineFunctionsTest::testDoubleInlining2
file: /root/workbench/exportInfo/d4j_buggy/Closure_116/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Begin: Pos(1108, 10)
End: Pos(1113, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_116/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Name: testDoubleInlining2
Childs: [StatementAssertion<Begin: Pos(1109, 5), End: Pos(1112, 27)>,
]
@@@
Split test: com.google.javascript.jscomp.InlineFunctionsTest::testIssue1101
file: /root/workbench/exportInfo/d4j_buggy/Closure_116/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Begin: Pos(2370, 10)
End: Pos(2379, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_116/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Name: testIssue1101
Childs: [StatementAssertion<Begin: Pos(2371, 5), End: Pos(2378, 13)>,
]
@@@
Split test: com.google.javascript.jscomp.InlineFunctionsTest::testInlineIfParametersModified8
file: /root/workbench/exportInfo/d4j_buggy/Closure_116/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Begin: Pos(599, 10)
End: Pos(602, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_116/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Name: testInlineIfParametersModified8
Childs: [StatementAssertion<Begin: Pos(601, 5), End: Pos(601, 55)>,
]
@@@
Split test: com.google.javascript.jscomp.InlineFunctionsTest::testInlineIfParametersModified9
file: /root/workbench/exportInfo/d4j_buggy/Closure_116/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Begin: Pos(604, 10)
End: Pos(607, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_116/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Name: testInlineIfParametersModified9
Childs: [StatementAssertion<Begin: Pos(606, 5), End: Pos(606, 57)>,
]
@@@
Split test: com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions6
file: /root/workbench/exportInfo/d4j_buggy/Closure_116/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Begin: Pos(155, 10)
End: Pos(164, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_116/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Name: testInlineFunctions6
Childs: [StatementAssertion<Begin: Pos(157, 5), End: Pos(163, 66)>,
]
--------------------
Run: Closure_141
@@@
Split test: com.google.javascript.jscomp.ExpresssionDecomposerTest::testCanExposeExpression2
file: /root/workbench/exportInfo/d4j_buggy/Closure_141/test//com/google/javascript/jscomp/ExpresssionDecomposerTest.java
# check: Use list matching: .helperCanExposeExpression
Use list matching: .helperCanExposeExpression
Use list matching: .helperCanExposeExpression
Use list matching: .helperCanExposeExpression
Use list matching: .helperCanExposeExpression
Use list matching: .helperCanExposeExpression
Use list matching: .helperCanExposeExpression
Use list matching: .helperCanExposeExpression
Use list matching: .helperCanExposeExpression
Use list matching: .helperCanExposeExpression
Use list matching: .helperCanExposeExpression
Begin: Pos(63, 10)
End: Pos(87, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_141/test//com/google/javascript/jscomp/ExpresssionDecomposerTest.java
Name: testCanExposeExpression2
Childs: [StatementAssertion<Begin: Pos(64, 5), End: Pos(65, 51)>,
StatementAssertion<Begin: Pos(66, 5), End: Pos(67, 55)>,
StatementAssertion<Begin: Pos(68, 5), End: Pos(69, 59)>,
StatementAssertion<Begin: Pos(70, 5), End: Pos(71, 57)>,
StatementAssertion<Begin: Pos(72, 5), End: Pos(73, 61)>,
StatementAssertion<Begin: Pos(74, 5), End: Pos(75, 61)>,
StatementAssertion<Begin: Pos(76, 5), End: Pos(77, 73)>,
StatementAssertion<Begin: Pos(79, 5), End: Pos(80, 60)>,
StatementAssertion<Begin: Pos(81, 5), End: Pos(82, 60)>,
StatementAssertion<Begin: Pos(83, 5), End: Pos(84, 63)>,
StatementAssertion<Begin: Pos(85, 5), End: Pos(86, 73)>,
]
---
public void testCanExposeExpression2_catena_0() {
    helperCanExposeExpression(DecompositionType.MOVABLE, "foo()", "foo");
    
}

---
---
public void testCanExposeExpression2_catena_1() {
    helperCanExposeExpression(DecompositionType.MOVABLE, "x = foo()", "foo");
    
}

---
---
public void testCanExposeExpression2_catena_2() {
    helperCanExposeExpression(DecompositionType.MOVABLE, "var x = foo()", "foo");
    
}

---
---
public void testCanExposeExpression2_catena_3() {
    helperCanExposeExpression(DecompositionType.MOVABLE, "if(foo()){}", "foo");
    
}

---
---
public void testCanExposeExpression2_catena_4() {
    helperCanExposeExpression(DecompositionType.MOVABLE, "switch(foo()){}", "foo");
    
}

---
---
public void testCanExposeExpression2_catena_5() {
    helperCanExposeExpression(DecompositionType.MOVABLE, "switch(foo()){}", "foo");
    
}

---
---
public void testCanExposeExpression2_catena_6() {
    helperCanExposeExpression(DecompositionType.MOVABLE, "function (){ return foo();}", "foo");
    
}

---
---
public void testCanExposeExpression2_catena_7() {
    helperCanExposeExpression(DecompositionType.MOVABLE, "x = foo() && 1", "foo");
    
}

---
---
public void testCanExposeExpression2_catena_8() {
    helperCanExposeExpression(DecompositionType.MOVABLE, "x = foo() || 1", "foo");
    
}

---
---
public void testCanExposeExpression2_catena_9() {
    helperCanExposeExpression(DecompositionType.MOVABLE, "x = foo() ? 0 : 1", "foo");
    
}

---
---
public void testCanExposeExpression2_catena_10() {
    helperCanExposeExpression(DecompositionType.MOVABLE, "(function(a){b = a})(foo())", "foo");
    
}

---
@@@
Split test: com.google.javascript.jscomp.ExpresssionDecomposerTest::testCanExposeExpression7
file: /root/workbench/exportInfo/d4j_buggy/Closure_141/test//com/google/javascript/jscomp/ExpresssionDecomposerTest.java
# check: Use list matching: .helperCanExposeAnonymousFunctionExpression
Begin: Pos(136, 10)
End: Pos(148, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_141/test//com/google/javascript/jscomp/ExpresssionDecomposerTest.java
Name: testCanExposeExpression7
Childs: [StatementAssertion<Begin: Pos(138, 5), End: Pos(147, 17)>,
]
@@@
Split test: com.google.javascript.jscomp.InlineFunctionsTest::testDecomposeAnonymousInCall
file: /root/workbench/exportInfo/d4j_buggy/Closure_141/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Begin: Pos(1336, 10)
End: Pos(1357, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_141/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Name: testDecomposeAnonymousInCall
Childs: [StatementAssertion<Begin: Pos(1337, 5), End: Pos(1356, 10)>,
]
@@@
Split test: com.google.javascript.jscomp.PureFunctionIdentifierTest::testCallFunctionFOrGViaHookWithSideEffects
file: /root/workbench/exportInfo/d4j_buggy/Closure_141/test//com/google/javascript/jscomp/PureFunctionIdentifierTest.java
# check: Use pattern matching: .checkMarkedCalls
Begin: Pos(644, 10)
End: Pos(655, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_141/test//com/google/javascript/jscomp/PureFunctionIdentifierTest.java
Name: testCallFunctionFOrGViaHookWithSideEffects
Childs: [StatementAssertion<Begin: Pos(654, 5), End: Pos(654, 71)>,
]
@@@
Split test: com.google.javascript.jscomp.PureFunctionIdentifierTest::testCallFunctionForGorH
file: /root/workbench/exportInfo/d4j_buggy/Closure_141/test//com/google/javascript/jscomp/PureFunctionIdentifierTest.java
# check: Use pattern matching: .checkMarkedCalls
Begin: Pos(621, 10)
End: Pos(629, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_141/test//com/google/javascript/jscomp/PureFunctionIdentifierTest.java
Name: testCallFunctionForGorH
Childs: [StatementAssertion<Begin: Pos(628, 5), End: Pos(628, 78)>,
]
@@@
Split test: com.google.javascript.jscomp.PureFunctionIdentifierTest::testCallFunctionFOrG
file: /root/workbench/exportInfo/d4j_buggy/Closure_141/test//com/google/javascript/jscomp/PureFunctionIdentifierTest.java
# check: Use pattern matching: .checkMarkedCalls
Begin: Pos(603, 10)
End: Pos(610, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_141/test//com/google/javascript/jscomp/PureFunctionIdentifierTest.java
Name: testCallFunctionFOrG
Childs: [StatementAssertion<Begin: Pos(609, 5), End: Pos(609, 72)>,
]
@@@
Split test: com.google.javascript.jscomp.PureFunctionIdentifierTest::testCallFunctionFOrGViaHook
file: /root/workbench/exportInfo/d4j_buggy/Closure_141/test//com/google/javascript/jscomp/PureFunctionIdentifierTest.java
# check: Use pattern matching: .checkMarkedCalls
Begin: Pos(612, 10)
End: Pos(619, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_141/test//com/google/javascript/jscomp/PureFunctionIdentifierTest.java
Name: testCallFunctionFOrGViaHook
Childs: [StatementAssertion<Begin: Pos(618, 5), End: Pos(618, 71)>,
]
@@@
Split test: com.google.javascript.jscomp.PureFunctionIdentifierTest::testCallFunctionFOrGWithSideEffects
file: /root/workbench/exportInfo/d4j_buggy/Closure_141/test//com/google/javascript/jscomp/PureFunctionIdentifierTest.java
# check: Use pattern matching: .checkMarkedCalls
Begin: Pos(631, 10)
End: Pos(642, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_141/test//com/google/javascript/jscomp/PureFunctionIdentifierTest.java
Name: testCallFunctionFOrGWithSideEffects
Childs: [StatementAssertion<Begin: Pos(641, 5), End: Pos(641, 72)>,
]
--------------------
Run: Closure_100
@@@
Split test: com.google.javascript.jscomp.CheckGlobalThisTest::testStaticFunction6
file: /root/workbench/exportInfo/d4j_buggy/Closure_100/test//com/google/javascript/jscomp/CheckGlobalThisTest.java
Begin: Pos(87, 10)
End: Pos(89, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_100/test//com/google/javascript/jscomp/CheckGlobalThisTest.java
Name: testStaticFunction6
Childs: [StatementAssertion<Begin: Pos(88, 5), End: Pos(88, 65)>,
]
@@@
Split test: com.google.javascript.jscomp.CheckGlobalThisTest::testStaticFunction7
file: /root/workbench/exportInfo/d4j_buggy/Closure_100/test//com/google/javascript/jscomp/CheckGlobalThisTest.java
Begin: Pos(91, 10)
End: Pos(93, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_100/test//com/google/javascript/jscomp/CheckGlobalThisTest.java
Name: testStaticFunction7
Childs: [StatementAssertion<Begin: Pos(92, 5), End: Pos(92, 71)>,
]
@@@
Split test: com.google.javascript.jscomp.CheckGlobalThisTest::testStaticFunction8
file: /root/workbench/exportInfo/d4j_buggy/Closure_100/test//com/google/javascript/jscomp/CheckGlobalThisTest.java
Begin: Pos(95, 10)
End: Pos(97, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_100/test//com/google/javascript/jscomp/CheckGlobalThisTest.java
Name: testStaticFunction8
Childs: [StatementAssertion<Begin: Pos(96, 5), End: Pos(96, 60)>,
]
@@@
Split test: com.google.javascript.jscomp.CheckGlobalThisTest::testGlobalThis7
file: /root/workbench/exportInfo/d4j_buggy/Closure_100/test//com/google/javascript/jscomp/CheckGlobalThisTest.java
Begin: Pos(63, 10)
End: Pos(65, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_100/test//com/google/javascript/jscomp/CheckGlobalThisTest.java
Name: testGlobalThis7
Childs: [StatementAssertion<Begin: Pos(64, 5), End: Pos(64, 37)>,
]
@@@
Split test: com.google.javascript.jscomp.CheckGlobalThisTest::testStaticMethod2
file: /root/workbench/exportInfo/d4j_buggy/Closure_100/test//com/google/javascript/jscomp/CheckGlobalThisTest.java
Begin: Pos(147, 10)
End: Pos(149, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_100/test//com/google/javascript/jscomp/CheckGlobalThisTest.java
Name: testStaticMethod2
Childs: [StatementAssertion<Begin: Pos(148, 5), End: Pos(148, 72)>,
]
@@@
Split test: com.google.javascript.jscomp.CheckGlobalThisTest::testStaticMethod3
file: /root/workbench/exportInfo/d4j_buggy/Closure_100/test//com/google/javascript/jscomp/CheckGlobalThisTest.java
Begin: Pos(151, 10)
End: Pos(153, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_100/test//com/google/javascript/jscomp/CheckGlobalThisTest.java
Name: testStaticMethod3
Childs: [StatementAssertion<Begin: Pos(152, 5), End: Pos(152, 74)>,
]
@@@
Split test: com.google.javascript.jscomp.CheckGlobalThisTest::testInnerFunction1
file: /root/workbench/exportInfo/d4j_buggy/Closure_100/test//com/google/javascript/jscomp/CheckGlobalThisTest.java
Begin: Pos(170, 10)
End: Pos(172, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_100/test//com/google/javascript/jscomp/CheckGlobalThisTest.java
Name: testInnerFunction1
Childs: [StatementAssertion<Begin: Pos(171, 5), End: Pos(171, 68)>,
]
@@@
Split test: com.google.javascript.jscomp.CheckGlobalThisTest::testInnerFunction2
file: /root/workbench/exportInfo/d4j_buggy/Closure_100/test//com/google/javascript/jscomp/CheckGlobalThisTest.java
Begin: Pos(174, 10)
End: Pos(176, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_100/test//com/google/javascript/jscomp/CheckGlobalThisTest.java
Name: testInnerFunction2
Childs: [StatementAssertion<Begin: Pos(175, 5), End: Pos(175, 74)>,
]
@@@
Split test: com.google.javascript.jscomp.CheckGlobalThisTest::testInnerFunction3
file: /root/workbench/exportInfo/d4j_buggy/Closure_100/test//com/google/javascript/jscomp/CheckGlobalThisTest.java
Begin: Pos(178, 10)
End: Pos(181, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_100/test//com/google/javascript/jscomp/CheckGlobalThisTest.java
Name: testInnerFunction3
Childs: [StatementAssertion<Begin: Pos(179, 5), End: Pos(180, 76)>,
]
--------------------
Run: Closure_99
@@@
Split test: com.google.javascript.jscomp.CheckGlobalThisTest::testPropertyOfMethod
file: /root/workbench/exportInfo/d4j_buggy/Closure_99/test//com/google/javascript/jscomp/CheckGlobalThisTest.java
Begin: Pos(157, 10)
End: Pos(160, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_99/test//com/google/javascript/jscomp/CheckGlobalThisTest.java
Name: testPropertyOfMethod
Childs: [StatementAssertion<Begin: Pos(158, 5), End: Pos(159, 59)>,
]
@@@
Split test: com.google.javascript.jscomp.CheckGlobalThisTest::testMethod4
file: /root/workbench/exportInfo/d4j_buggy/Closure_99/test//com/google/javascript/jscomp/CheckGlobalThisTest.java
Begin: Pos(153, 10)
End: Pos(155, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_99/test//com/google/javascript/jscomp/CheckGlobalThisTest.java
Name: testMethod4
Childs: [StatementAssertion<Begin: Pos(154, 5), End: Pos(154, 72)>,
]
@@@
Split test: com.google.javascript.jscomp.CheckGlobalThisTest::testInterface1
file: /root/workbench/exportInfo/d4j_buggy/Closure_99/test//com/google/javascript/jscomp/CheckGlobalThisTest.java
Begin: Pos(111, 10)
End: Pos(114, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_99/test//com/google/javascript/jscomp/CheckGlobalThisTest.java
Name: testInterface1
Childs: [StatementAssertion<Begin: Pos(112, 5), End: Pos(113, 76)>,
]
--------------------
Run: Closure_39
@@@
Split test: com.google.javascript.rhino.jstype.RecordTypeTest::testRecursiveRecord
file: /root/workbench/exportInfo/d4j_buggy/Closure_39/test//com/google/javascript/rhino/jstype/RecordTypeTest.java
Begin: Pos(46, 10)
End: Pos(63, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_39/test//com/google/javascript/rhino/jstype/RecordTypeTest.java
Name: testRecursiveRecord
Childs: [StatementAssertion<Begin: Pos(53, 5), End: Pos(54, 27)>,
StatementAssertion<Begin: Pos(57, 5), End: Pos(58, 27)>,
StatementAssertion<Begin: Pos(59, 5), End: Pos(60, 37)>,
StatementAssertion<Begin: Pos(62, 5), End: Pos(62, 54)>,
]
---
public void testRecursiveRecord_catena_0() {
    ProxyObjectType loop = new ProxyObjectType(registry, NUMBER_TYPE);
    JSType record = new RecordTypeBuilder(registry).addProperty("loop", loop, null).addProperty("number", NUMBER_TYPE, null).addProperty("string", STRING_TYPE, null).build();
    assertEquals("{loop: number, number: number, string: string}", record.toString());
    loop.setReferencedType(record);
    
}

---
---
public void testRecursiveRecord_catena_1() {
    ProxyObjectType loop = new ProxyObjectType(registry, NUMBER_TYPE);
    JSType record = new RecordTypeBuilder(registry).addProperty("loop", loop, null).addProperty("number", NUMBER_TYPE, null).addProperty("string", STRING_TYPE, null).build();
    loop.setReferencedType(record);
    assertEquals("{loop: {...}, number: number, string: string}", record.toString());
    
}

---
---
public void testRecursiveRecord_catena_2() {
    ProxyObjectType loop = new ProxyObjectType(registry, NUMBER_TYPE);
    JSType record = new RecordTypeBuilder(registry).addProperty("loop", loop, null).addProperty("number", NUMBER_TYPE, null).addProperty("string", STRING_TYPE, null).build();
    loop.setReferencedType(record);
    assertEquals("{loop: ?, number: number, string: string}", record.toAnnotationString());
    
}

---
---
public void testRecursiveRecord_catena_3() {
    ProxyObjectType loop = new ProxyObjectType(registry, NUMBER_TYPE);
    JSType record = new RecordTypeBuilder(registry).addProperty("loop", loop, null).addProperty("number", NUMBER_TYPE, null).addProperty("string", STRING_TYPE, null).build();
    loop.setReferencedType(record);
    Asserts.assertEquivalenceOperations(record, loop);
    
}

---
@@@
Split test: com.google.javascript.rhino.jstype.RecordTypeTest::testLongToString
file: /root/workbench/exportInfo/d4j_buggy/Closure_39/test//com/google/javascript/rhino/jstype/RecordTypeTest.java
Begin: Pos(65, 10)
End: Pos(80, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_39/test//com/google/javascript/rhino/jstype/RecordTypeTest.java
Name: testLongToString
Childs: [StatementAssertion<Begin: Pos(74, 5), End: Pos(75, 27)>,
StatementAssertion<Begin: Pos(76, 5), End: Pos(79, 37)>,
]
---
public void testLongToString_catena_0() {
    JSType record = new RecordTypeBuilder(registry).addProperty("a1", NUMBER_TYPE, null).addProperty("a2", NUMBER_TYPE, null).addProperty("a3", NUMBER_TYPE, null).addProperty("a4", NUMBER_TYPE, null).addProperty("a5", NUMBER_TYPE, null).addProperty("a6", NUMBER_TYPE, null).build();
    assertEquals("{a1: number, a2: number, a3: number, a4: number, ...}", record.toString());
    
}

---
---
public void testLongToString_catena_1() {
    JSType record = new RecordTypeBuilder(registry).addProperty("a1", NUMBER_TYPE, null).addProperty("a2", NUMBER_TYPE, null).addProperty("a3", NUMBER_TYPE, null).addProperty("a4", NUMBER_TYPE, null).addProperty("a5", NUMBER_TYPE, null).addProperty("a6", NUMBER_TYPE, null).build();
    assertEquals("{a1: number, a2: number, a3: number, a4: number," + " a5: number, a6: number}", record.toAnnotationString());
    
}

---
--------------------
Run: Closure_3
@@@
Split test: com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest::testDoNotInlineCatchExpression1a
file: /root/workbench/exportInfo/d4j_buggy/Closure_3/test//com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java
Begin: Pos(156, 10)
End: Pos(165, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_3/test//com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java
Name: testDoNotInlineCatchExpression1a
Childs: [StatementAssertion<Begin: Pos(157, 5), End: Pos(164, 28)>,
]
@@@
Split test: com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest::testDoNotInlineCatchExpression1
file: /root/workbench/exportInfo/d4j_buggy/Closure_3/test//com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java
Begin: Pos(145, 10)
End: Pos(154, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_3/test//com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java
Name: testDoNotInlineCatchExpression1
Childs: [StatementAssertion<Begin: Pos(146, 5), End: Pos(153, 28)>,
]
@@@
Split test: com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest::testDoNotInlineCatchExpression3
file: /root/workbench/exportInfo/d4j_buggy/Closure_3/test//com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java
Begin: Pos(178, 10)
End: Pos(188, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_3/test//com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java
Name: testDoNotInlineCatchExpression3
Childs: [StatementAssertion<Begin: Pos(179, 5), End: Pos(187, 28)>,
]
--------------------
Run: Closure_27
@@@
Split test: com.google.javascript.rhino.IRTest::testIssue727_1
file: /root/workbench/exportInfo/d4j_buggy/Closure_27/test//com/google/javascript/rhino/IRTest.java
Begin: Pos(47, 10)
End: Pos(56, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_27/test//com/google/javascript/rhino/IRTest.java
Name: testIssue727_1
Childs: [StatementAssertion<Begin: Pos(48, 5), End: Pos(55, 23)>,
]
@@@
Split test: com.google.javascript.rhino.IRTest::testIssue727_2
file: /root/workbench/exportInfo/d4j_buggy/Closure_27/test//com/google/javascript/rhino/IRTest.java
Begin: Pos(58, 10)
End: Pos(71, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_27/test//com/google/javascript/rhino/IRTest.java
Name: testIssue727_2
Childs: [StatementAssertion<Begin: Pos(59, 5), End: Pos(70, 31)>,
]
@@@
Split test: com.google.javascript.rhino.IRTest::testIssue727_3
file: /root/workbench/exportInfo/d4j_buggy/Closure_27/test//com/google/javascript/rhino/IRTest.java
Begin: Pos(73, 10)
End: Pos(86, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_27/test//com/google/javascript/rhino/IRTest.java
Name: testIssue727_3
Childs: [StatementAssertion<Begin: Pos(74, 5), End: Pos(85, 23)>,
]
--------------------
Run: Closure_21
@@@
Split test: com.google.javascript.jscomp.CheckSideEffectsTest::testUselessCode
file: /root/workbench/exportInfo/d4j_buggy/Closure_21/test//com/google/javascript/jscomp/CheckSideEffectsTest.java
Begin: Pos(49, 10)
End: Pos(80, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_21/test//com/google/javascript/jscomp/CheckSideEffectsTest.java
Name: testUselessCode
Childs: [StatementAssertion<Begin: Pos(50, 5), End: Pos(50, 48)>,
StatementAssertion<Begin: Pos(51, 5), End: Pos(51, 68)>,
StatementAssertion<Begin: Pos(53, 5), End: Pos(53, 29)>,
StatementAssertion<Begin: Pos(54, 5), End: Pos(54, 75)>,
StatementAssertion<Begin: Pos(56, 5), End: Pos(56, 23)>,
StatementAssertion<Begin: Pos(57, 5), End: Pos(57, 55)>,
StatementAssertion<Begin: Pos(59, 5), End: Pos(59, 31)>,
StatementAssertion<Begin: Pos(60, 5), End: Pos(61, 58)>,
StatementAssertion<Begin: Pos(63, 5), End: Pos(63, 17)>,
StatementAssertion<Begin: Pos(64, 5), End: Pos(64, 35)>,
StatementAssertion<Begin: Pos(66, 5), End: Pos(66, 39)>,
StatementAssertion<Begin: Pos(67, 5), End: Pos(68, 60)>,
StatementAssertion<Begin: Pos(69, 5), End: Pos(70, 57)>,
StatementAssertion<Begin: Pos(71, 5), End: Pos(72, 64)>,
StatementAssertion<Begin: Pos(73, 5), End: Pos(74, 71)>,
StatementAssertion<Begin: Pos(75, 5), End: Pos(75, 41)>,
StatementAssertion<Begin: Pos(76, 5), End: Pos(76, 67)>,
StatementAssertion<Begin: Pos(77, 5), End: Pos(79, 49)>,
]
---
public void testUselessCode_catena_0() {
    test("function f(x) { if(x) return; }", ok);
    
}

---
---
public void testUselessCode_catena_1() {
    test("function f(x) { if(x); }", "function f(x) { if(x); }", e);
    
}

---
---
public void testUselessCode_catena_2() {
    test("if(x) x = y;", ok);
    
}

---
---
public void testUselessCode_catena_3() {
    test("if(x) x == bar();", "if(x) JSCOMPILER_PRESERVE(x == bar());", e);
    
}

---
---
public void testUselessCode_catena_4() {
    test("x = 3;", ok);
    
}

---
---
public void testUselessCode_catena_5() {
    test("x == 3;", "JSCOMPILER_PRESERVE(x == 3);", e);
    
}

---
---
public void testUselessCode_catena_6() {
    test("var x = 'test'", ok);
    
}

---
---
public void testUselessCode_catena_7() {
    test("var x = 'test'\n'str'", "var x = 'test'\nJSCOMPILER_PRESERVE('str')", e);
    
}

---
---
public void testUselessCode_catena_8() {
    test("", ok);
    
}

---
---
public void testUselessCode_catena_9() {
    test("foo();;;;bar();;;;", ok);
    
}

---
---
public void testUselessCode_catena_10() {
    test("var a, b; a = 5, b = 6", ok);
    
}

---
---
public void testUselessCode_catena_11() {
    test("var a, b; a = 5, b == 6", "var a, b; a = 5, JSCOMPILER_PRESERVE(b == 6)", e);
    
}

---
---
public void testUselessCode_catena_12() {
    test("var a, b; a = (5, 6)", "var a, b; a = (JSCOMPILER_PRESERVE(5), 6)", e);
    
}

---
---
public void testUselessCode_catena_13() {
    test("var a, b; a = (bar(), 6, 7)", "var a, b; a = (bar(), JSCOMPILER_PRESERVE(6), 7)", e);
    
}

---
---
public void testUselessCode_catena_14() {
    test("var a, b; a = (bar(), bar(), 7, 8)", "var a, b; a = (bar(), bar(), JSCOMPILER_PRESERVE(7), 8)", e);
    
}

---
---
public void testUselessCode_catena_15() {
    test("var a, b; a = (b = 7, 6)", ok);
    
}

---
---
public void testUselessCode_catena_16() {
    test("function x(){}\nfunction f(a, b){}\nf(1,(x(), 2));", ok);
    
}

---
---
public void testUselessCode_catena_17() {
    test("function x(){}\nfunction f(a, b){}\nf(1,(2, 3));", "function x(){}\nfunction f(a, b){}\n" + "f(1,(JSCOMPILER_PRESERVE(2), 3));", e);
    
}

---
--------------------
Run: Closure_76
@@@
Split test: com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testInExpression2
file: /root/workbench/exportInfo/d4j_buggy/Closure_76/test//com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java
Begin: Pos(456, 10)
End: Pos(488, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_76/test//com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java
Name: testInExpression2
Childs: [StatementAssertion<Begin: Pos(459, 5), End: Pos(461, 59)>,
StatementAssertion<Begin: Pos(463, 5), End: Pos(465, 25)>,
StatementAssertion<Begin: Pos(467, 5), End: Pos(467, 54)>,
StatementAssertion<Begin: Pos(469, 5), End: Pos(471, 40)>,
StatementAssertion<Begin: Pos(473, 5), End: Pos(473, 56)>,
StatementAssertion<Begin: Pos(475, 5), End: Pos(477, 36)>,
StatementAssertion<Begin: Pos(479, 5), End: Pos(479, 55)>,
StatementAssertion<Begin: Pos(481, 5), End: Pos(483, 43)>,
StatementAssertion<Begin: Pos(487, 5), End: Pos(487, 59)>,
]
---
public void testInExpression2_catena_0() {
    inFunction("var a; a = 1; if ((a = 2) || (a = 3) || (a)) {}", "var a; a = 1; if ((    2) || (a = 3) || (a)) {}");
    
}

---
---
public void testInExpression2_catena_1() {
    inFunction("var a; (a = 1) || (a = 2)", "var a; 1 || 2");
    
}

---
---
public void testInExpression2_catena_2() {
    inFunction("var a; (a = 1) || (a = 2); return a");
    
}

---
---
public void testInExpression2_catena_3() {
    inFunction("var a; a = 1; a ? a = 2 : a;", "var a; a = 1; a ?     2 : a;");
    
}

---
---
public void testInExpression2_catena_4() {
    inFunction("var a; a = 1; a ? a = 2 : a; return a");
    
}

---
---
public void testInExpression2_catena_5() {
    inFunction("var a; a = 1; a ? a : a = 2;", "var a; a = 1; a ? a : 2;");
    
}

---
---
public void testInExpression2_catena_6() {
    inFunction("var a; a = 1; a ? a : a =2; return a");
    
}

---
---
public void testInExpression2_catena_7() {
    inFunction("var a; (a = 1) ? a = 2 : a = 3;", "var a;      1  ?     2 :     3;");
    
}

---
---
public void testInExpression2_catena_8() {
    inFunction("var a; (a = 1) ? a = 2 : a = 3; return a");
    
}

---
@@@
Split test: com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue384b
file: /root/workbench/exportInfo/d4j_buggy/Closure_76/test//com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java
Begin: Pos(500, 10)
End: Pos(505, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_76/test//com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java
Name: testIssue384b
Childs: [StatementAssertion<Begin: Pos(501, 5), End: Pos(504, 26)>,
]
@@@
Split test: com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue384c
file: /root/workbench/exportInfo/d4j_buggy/Closure_76/test//com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java
Begin: Pos(507, 10)
End: Pos(512, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_76/test//com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java
Name: testIssue384c
Childs: [StatementAssertion<Begin: Pos(508, 5), End: Pos(511, 26)>,
]
@@@
Split test: com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue384d
file: /root/workbench/exportInfo/d4j_buggy/Closure_76/test//com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java
Begin: Pos(514, 10)
End: Pos(519, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_76/test//com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java
Name: testIssue384d
Childs: [StatementAssertion<Begin: Pos(515, 5), End: Pos(518, 26)>,
]
--------------------
Run: Closure_167
@@@
Split test: com.google.javascript.jscomp.TypeCheckTest::testIssue783
file: /root/workbench/exportInfo/d4j_buggy/Closure_167/test//com/google/javascript/jscomp/TypeCheckTest.java
Begin: Pos(5996, 10)
End: Pos(6008, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_167/test//com/google/javascript/jscomp/TypeCheckTest.java
Name: testIssue783
Childs: [StatementAssertion<Begin: Pos(5997, 5), End: Pos(6007, 54)>,
]
@@@
Split test: com.google.javascript.jscomp.TypeCheckTest::testMissingProperty20
file: /root/workbench/exportInfo/d4j_buggy/Closure_167/test//com/google/javascript/jscomp/TypeCheckTest.java
Begin: Pos(9114, 10)
End: Pos(9119, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_167/test//com/google/javascript/jscomp/TypeCheckTest.java
Name: testMissingProperty20
Childs: [StatementAssertion<Begin: Pos(9115, 5), End: Pos(9118, 48)>,
]
@@@
Split test: com.google.javascript.rhino.jstype.JSTypeTest::testRestrictedTypeGivenToBoolean
file: /root/workbench/exportInfo/d4j_buggy/Closure_167/test//com/google/javascript/rhino/jstype/JSTypeTest.java
# check: Use pattern matching: .assertTypeEquals
Use pattern matching: .assertTypeEquals
Use pattern matching: .assertTypeEquals
Use pattern matching: .assertTypeEquals
Use pattern matching: .assertTypeEquals
Use pattern matching: .assertTypeEquals
Use pattern matching: .assertTypeEquals
Use pattern matching: .assertTypeEquals
Use pattern matching: .assertTypeEquals
Use pattern matching: .assertTypeEquals
Use pattern matching: .assertTypeEquals
Use pattern matching: .assertTypeEquals
Use pattern matching: .assertTypeEquals
Use pattern matching: .assertTypeEquals
Use pattern matching: .assertTypeEquals
Use pattern matching: .assertTypeEquals
Use pattern matching: .assertTypeEquals
Use pattern matching: .assertTypeEquals
Use pattern matching: .assertTypeEquals
Use pattern matching: .assertTypeEquals
Use pattern matching: .assertTypeEquals
Use pattern matching: .assertTypeEquals
Use pattern matching: .assertTypeEquals
Use pattern matching: .assertTypeEquals
Begin: Pos(5215, 3)
End: Pos(5282, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_167/test//com/google/javascript/rhino/jstype/JSTypeTest.java
Name: testRestrictedTypeGivenToBoolean
Childs: [StatementAssertion<Begin: Pos(5218, 5), End: Pos(5219, 67)>,
StatementAssertion<Begin: Pos(5220, 5), End: Pos(5221, 68)>,
StatementAssertion<Begin: Pos(5223, 5), End: Pos(5224, 64)>,
StatementAssertion<Begin: Pos(5225, 5), End: Pos(5226, 65)>,
StatementAssertion<Begin: Pos(5228, 5), End: Pos(5229, 66)>,
StatementAssertion<Begin: Pos(5230, 5), End: Pos(5231, 67)>,
StatementAssertion<Begin: Pos(5233, 5), End: Pos(5234, 66)>,
StatementAssertion<Begin: Pos(5235, 5), End: Pos(5236, 67)>,
StatementAssertion<Begin: Pos(5238, 5), End: Pos(5239, 73)>,
StatementAssertion<Begin: Pos(5240, 5), End: Pos(5241, 74)>,
StatementAssertion<Begin: Pos(5243, 5), End: Pos(5244, 64)>,
StatementAssertion<Begin: Pos(5245, 5), End: Pos(5246, 65)>,
StatementAssertion<Begin: Pos(5248, 5), End: Pos(5249, 69)>,
StatementAssertion<Begin: Pos(5250, 5), End: Pos(5251, 70)>,
StatementAssertion<Begin: Pos(5253, 5), End: Pos(5254, 62)>,
StatementAssertion<Begin: Pos(5255, 5), End: Pos(5256, 63)>,
StatementAssertion<Begin: Pos(5258, 5), End: Pos(5259, 63)>,
StatementAssertion<Begin: Pos(5260, 5), End: Pos(5261, 64)>,
StatementAssertion<Begin: Pos(5263, 5), End: Pos(5264, 67)>,
StatementAssertion<Begin: Pos(5265, 5), End: Pos(5266, 68)>,
StatementAssertion<Begin: Pos(5271, 5), End: Pos(5272, 74)>,
StatementAssertion<Begin: Pos(5273, 5), End: Pos(5274, 75)>,
StatementAssertion<Begin: Pos(5278, 5), End: Pos(5279, 75)>,
StatementAssertion<Begin: Pos(5280, 5), End: Pos(5281, 76)>,
]
---
@SuppressWarnings("checked")public void testRestrictedTypeGivenToBoolean_catena_0() {
    assertTypeEquals(BOOLEAN_TYPE, BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));
    UnionType nullableStringValue = (UnionType)createNullableType(STRING_TYPE);
    UnionType nullableStringObject = (UnionType)createNullableType(STRING_OBJECT_TYPE);
    
}

---
---
@SuppressWarnings("checked")public void testRestrictedTypeGivenToBoolean_catena_1() {
    assertTypeEquals(BOOLEAN_TYPE, BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));
    UnionType nullableStringValue = (UnionType)createNullableType(STRING_TYPE);
    UnionType nullableStringObject = (UnionType)createNullableType(STRING_OBJECT_TYPE);
    
}

---
---
@SuppressWarnings("checked")public void testRestrictedTypeGivenToBoolean_catena_2() {
    assertTypeEquals(NO_TYPE, NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));
    UnionType nullableStringValue = (UnionType)createNullableType(STRING_TYPE);
    UnionType nullableStringObject = (UnionType)createNullableType(STRING_OBJECT_TYPE);
    
}

---
---
@SuppressWarnings("checked")public void testRestrictedTypeGivenToBoolean_catena_3() {
    assertTypeEquals(NULL_TYPE, NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));
    UnionType nullableStringValue = (UnionType)createNullableType(STRING_TYPE);
    UnionType nullableStringObject = (UnionType)createNullableType(STRING_OBJECT_TYPE);
    
}

---
---
@SuppressWarnings("checked")public void testRestrictedTypeGivenToBoolean_catena_4() {
    assertTypeEquals(NUMBER_TYPE, NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));
    UnionType nullableStringValue = (UnionType)createNullableType(STRING_TYPE);
    UnionType nullableStringObject = (UnionType)createNullableType(STRING_OBJECT_TYPE);
    
}

---
---
@SuppressWarnings("checked")public void testRestrictedTypeGivenToBoolean_catena_5() {
    assertTypeEquals(NUMBER_TYPE, NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));
    UnionType nullableStringValue = (UnionType)createNullableType(STRING_TYPE);
    UnionType nullableStringObject = (UnionType)createNullableType(STRING_OBJECT_TYPE);
    
}

---
---
@SuppressWarnings("checked")public void testRestrictedTypeGivenToBoolean_catena_6() {
    assertTypeEquals(STRING_TYPE, STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));
    UnionType nullableStringValue = (UnionType)createNullableType(STRING_TYPE);
    UnionType nullableStringObject = (UnionType)createNullableType(STRING_OBJECT_TYPE);
    
}

---
---
@SuppressWarnings("checked")public void testRestrictedTypeGivenToBoolean_catena_7() {
    assertTypeEquals(STRING_TYPE, STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));
    UnionType nullableStringValue = (UnionType)createNullableType(STRING_TYPE);
    UnionType nullableStringObject = (UnionType)createNullableType(STRING_OBJECT_TYPE);
    
}

---
---
@SuppressWarnings("checked")public void testRestrictedTypeGivenToBoolean_catena_8() {
    assertTypeEquals(STRING_OBJECT_TYPE, STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));
    UnionType nullableStringValue = (UnionType)createNullableType(STRING_TYPE);
    UnionType nullableStringObject = (UnionType)createNullableType(STRING_OBJECT_TYPE);
    
}

---
---
@SuppressWarnings("checked")public void testRestrictedTypeGivenToBoolean_catena_9() {
    assertTypeEquals(NO_TYPE, STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));
    UnionType nullableStringValue = (UnionType)createNullableType(STRING_TYPE);
    UnionType nullableStringObject = (UnionType)createNullableType(STRING_OBJECT_TYPE);
    
}

---
---
@SuppressWarnings("checked")public void testRestrictedTypeGivenToBoolean_catena_10() {
    assertTypeEquals(NO_TYPE, VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));
    UnionType nullableStringValue = (UnionType)createNullableType(STRING_TYPE);
    UnionType nullableStringObject = (UnionType)createNullableType(STRING_OBJECT_TYPE);
    
}

---
---
@SuppressWarnings("checked")public void testRestrictedTypeGivenToBoolean_catena_11() {
    assertTypeEquals(VOID_TYPE, VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));
    UnionType nullableStringValue = (UnionType)createNullableType(STRING_TYPE);
    UnionType nullableStringObject = (UnionType)createNullableType(STRING_OBJECT_TYPE);
    
}

---
---
@SuppressWarnings("checked")public void testRestrictedTypeGivenToBoolean_catena_12() {
    assertTypeEquals(NO_OBJECT_TYPE, NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));
    UnionType nullableStringValue = (UnionType)createNullableType(STRING_TYPE);
    UnionType nullableStringObject = (UnionType)createNullableType(STRING_OBJECT_TYPE);
    
}

---
---
@SuppressWarnings("checked")public void testRestrictedTypeGivenToBoolean_catena_13() {
    assertTypeEquals(NO_TYPE, NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));
    UnionType nullableStringValue = (UnionType)createNullableType(STRING_TYPE);
    UnionType nullableStringObject = (UnionType)createNullableType(STRING_OBJECT_TYPE);
    
}

---
---
@SuppressWarnings("checked")public void testRestrictedTypeGivenToBoolean_catena_14() {
    assertTypeEquals(NO_TYPE, NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));
    UnionType nullableStringValue = (UnionType)createNullableType(STRING_TYPE);
    UnionType nullableStringObject = (UnionType)createNullableType(STRING_OBJECT_TYPE);
    
}

---
---
@SuppressWarnings("checked")public void testRestrictedTypeGivenToBoolean_catena_15() {
    assertTypeEquals(NO_TYPE, NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));
    UnionType nullableStringValue = (UnionType)createNullableType(STRING_TYPE);
    UnionType nullableStringObject = (UnionType)createNullableType(STRING_OBJECT_TYPE);
    
}

---
---
@SuppressWarnings("checked")public void testRestrictedTypeGivenToBoolean_catena_16() {
    assertTypeEquals(ALL_TYPE, ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));
    UnionType nullableStringValue = (UnionType)createNullableType(STRING_TYPE);
    UnionType nullableStringObject = (UnionType)createNullableType(STRING_OBJECT_TYPE);
    
}

---
---
@SuppressWarnings("checked")public void testRestrictedTypeGivenToBoolean_catena_17() {
    assertTypeEquals(ALL_TYPE, ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));
    UnionType nullableStringValue = (UnionType)createNullableType(STRING_TYPE);
    UnionType nullableStringObject = (UnionType)createNullableType(STRING_OBJECT_TYPE);
    
}

---
---
@SuppressWarnings("checked")public void testRestrictedTypeGivenToBoolean_catena_18() {
    assertTypeEquals(CHECKED_UNKNOWN_TYPE, UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));
    UnionType nullableStringValue = (UnionType)createNullableType(STRING_TYPE);
    UnionType nullableStringObject = (UnionType)createNullableType(STRING_OBJECT_TYPE);
    
}

---
---
@SuppressWarnings("checked")public void testRestrictedTypeGivenToBoolean_catena_19() {
    assertTypeEquals(UNKNOWN_TYPE, UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));
    UnionType nullableStringValue = (UnionType)createNullableType(STRING_TYPE);
    UnionType nullableStringObject = (UnionType)createNullableType(STRING_OBJECT_TYPE);
    
}

---
---
@SuppressWarnings("checked")public void testRestrictedTypeGivenToBoolean_catena_20() {
    UnionType nullableStringValue = (UnionType)createNullableType(STRING_TYPE);
    assertTypeEquals(STRING_TYPE, nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(true));
    UnionType nullableStringObject = (UnionType)createNullableType(STRING_OBJECT_TYPE);
    
}

---
---
@SuppressWarnings("checked")public void testRestrictedTypeGivenToBoolean_catena_21() {
    UnionType nullableStringValue = (UnionType)createNullableType(STRING_TYPE);
    assertTypeEquals(nullableStringValue, nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(false));
    UnionType nullableStringObject = (UnionType)createNullableType(STRING_OBJECT_TYPE);
    
}

---
---
@SuppressWarnings("checked")public void testRestrictedTypeGivenToBoolean_catena_22() {
    UnionType nullableStringValue = (UnionType)createNullableType(STRING_TYPE);
    UnionType nullableStringObject = (UnionType)createNullableType(STRING_OBJECT_TYPE);
    assertTypeEquals(STRING_OBJECT_TYPE, nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(true));
    
}

---
---
@SuppressWarnings("checked")public void testRestrictedTypeGivenToBoolean_catena_23() {
    UnionType nullableStringValue = (UnionType)createNullableType(STRING_TYPE);
    UnionType nullableStringObject = (UnionType)createNullableType(STRING_OBJECT_TYPE);
    assertTypeEquals(NULL_TYPE, nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(false));
    
}

---
--------------------
Run: Closure_102
@@@
Split test: com.google.javascript.jscomp.CompilerRunnerTest::testIssue115
file: /root/workbench/exportInfo/d4j_buggy/Closure_102/test//com/google/javascript/jscomp/CompilerRunnerTest.java
# check: Use pattern matching: CompilerRunner.FLAG_compilation_level.setForTest
Use pattern matching: CompilerRunner.FLAG_warning_level.setForTest
Begin: Pos(181, 10)
End: Pos(194, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_102/test//com/google/javascript/jscomp/CompilerRunnerTest.java
Name: testIssue115
Childs: [StatementAssertion<Begin: Pos(182, 5), End: Pos(183, 47)>,
StatementAssertion<Begin: Pos(184, 5), End: Pos(185, 30)>,
StatementAssertion<Begin: Pos(186, 5), End: Pos(193, 14)>,
]
---
public void testIssue115_catena_0() {
    CompilerRunner.FLAG_compilation_level.setForTest(CompilationLevel.SIMPLE_OPTIMIZATIONS);
    
}

---
---
public void testIssue115_catena_1() {
    CompilerRunner.FLAG_warning_level.setForTest(WarningLevel.VERBOSE);
    
}

---
---
public void testIssue115_catena_2() {
    test("function f() { " + "  var arguments = Array.prototype.slice.call(arguments, 0);" + "  return arguments[0]; " + "}", "function f() { " + "  arguments = Array.prototype.slice.call(arguments, 0);" + "  return arguments[0]; " + "}");
    
}

---
--------------------
Run: Closure_151
@@@
Split test: com.google.javascript.jscomp.CommandLineRunnerTest::testVersionFlag
file: /root/workbench/exportInfo/d4j_buggy/Closure_151/test//com/google/javascript/jscomp/CommandLineRunnerTest.java
Begin: Pos(449, 10)
End: Pos(458, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_151/test//com/google/javascript/jscomp/CommandLineRunnerTest.java
Name: testVersionFlag
Childs: [StatementAssertion<Begin: Pos(451, 5), End: Pos(451, 17)>,
StatementAssertion<Begin: Pos(452, 5), End: Pos(457, 26)>,
]
---
public void testVersionFlag_catena_0() {
    args.add("--version");
    testSame("");
    
}

---
---
public void testVersionFlag_catena_1() {
    args.add("--version");
    assertEquals(0, new String(errReader.toByteArray()).indexOf("Closure Compiler (http://code.google.com/p/closure/compiler)\n" + "Version: HEAD\n" + "Built on:"));
    
}

---
--------------------
Run: Closure_44
@@@
Split test: com.google.javascript.jscomp.CodePrinterTest::testIssue620
file: /root/workbench/exportInfo/d4j_buggy/Closure_44/test//com/google/javascript/jscomp/CodePrinterTest.java
Begin: Pos(1282, 10)
End: Pos(1285, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_44/test//com/google/javascript/jscomp/CodePrinterTest.java
Name: testIssue620
Childs: [StatementAssertion<Begin: Pos(1283, 5), End: Pos(1283, 56)>,
StatementAssertion<Begin: Pos(1284, 5), End: Pos(1284, 55)>,
]
---
public void testIssue620_catena_0() {
    assertPrint("alert(/ / / / /);", "alert(/ // / /)");
    
}

---
---
public void testIssue620_catena_1() {
    assertPrint("alert(/ // / /);", "alert(/ // / /)");
    
}

---
--------------------
Run: Closure_98
@@@
Split test: com.google.javascript.jscomp.InlineVariablesTest::testNoInlineAliasesInLoop
file: /root/workbench/exportInfo/d4j_buggy/Closure_98/test//com/google/javascript/jscomp/InlineVariablesTest.java
Begin: Pos(616, 10)
End: Pos(626, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_98/test//com/google/javascript/jscomp/InlineVariablesTest.java
Name: testNoInlineAliasesInLoop
Childs: [StatementAssertion<Begin: Pos(617, 5), End: Pos(625, 13)>,
]
--------------------
Run: Closure_143
@@@
Split test: com.google.javascript.jscomp.CommandLineRunnerTest::testDefineFlag3
file: /root/workbench/exportInfo/d4j_buggy/Closure_143/test//com/google/javascript/jscomp/CommandLineRunnerTest.java
Begin: Pos(141, 10)
End: Pos(145, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_143/test//com/google/javascript/jscomp/CommandLineRunnerTest.java
Name: testDefineFlag3
Childs: [StatementAssertion<Begin: Pos(143, 5), End: Pos(144, 30)>,
]
@@@
Split test: com.google.javascript.jscomp.RemoveConstantExpressionsTest::testCall1
file: /root/workbench/exportInfo/d4j_buggy/Closure_143/test//com/google/javascript/jscomp/RemoveConstantExpressionsTest.java
Begin: Pos(281, 10)
End: Pos(283, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_143/test//com/google/javascript/jscomp/RemoveConstantExpressionsTest.java
Name: testCall1
Childs: [StatementAssertion<Begin: Pos(282, 5), End: Pos(282, 29)>,
]
@@@
Split test: com.google.javascript.jscomp.RemoveConstantExpressionsTest::testNew1
file: /root/workbench/exportInfo/d4j_buggy/Closure_143/test//com/google/javascript/jscomp/RemoveConstantExpressionsTest.java
Begin: Pos(289, 10)
End: Pos(291, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_143/test//com/google/javascript/jscomp/RemoveConstantExpressionsTest.java
Name: testNew1
Childs: [StatementAssertion<Begin: Pos(290, 5), End: Pos(290, 26)>,
]
--------------------
Run: Closure_155
@@@
Split test: com.google.javascript.jscomp.InlineVariablesTest::testArgumentsModifiedInInnerFunction
file: /root/workbench/exportInfo/d4j_buggy/Closure_155/test//com/google/javascript/jscomp/InlineVariablesTest.java
Begin: Pos(1034, 10)
End: Pos(1053, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_155/test//com/google/javascript/jscomp/InlineVariablesTest.java
Name: testArgumentsModifiedInInnerFunction
Childs: [StatementAssertion<Begin: Pos(1035, 5), End: Pos(1052, 11)>,
]
@@@
Split test: com.google.javascript.jscomp.InlineVariablesTest::testArgumentsModifiedInOuterFunction
file: /root/workbench/exportInfo/d4j_buggy/Closure_155/test//com/google/javascript/jscomp/InlineVariablesTest.java
Begin: Pos(1013, 10)
End: Pos(1032, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_155/test//com/google/javascript/jscomp/InlineVariablesTest.java
Name: testArgumentsModifiedInOuterFunction
Childs: [StatementAssertion<Begin: Pos(1014, 5), End: Pos(1031, 11)>,
]
@@@
Split test: com.google.javascript.jscomp.InlineVariablesTest::testIssue378ModifiedArguments1
file: /root/workbench/exportInfo/d4j_buggy/Closure_155/test//com/google/javascript/jscomp/InlineVariablesTest.java
Begin: Pos(914, 10)
End: Pos(921, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_155/test//com/google/javascript/jscomp/InlineVariablesTest.java
Name: testIssue378ModifiedArguments1
Childs: [StatementAssertion<Begin: Pos(915, 5), End: Pos(920, 13)>,
]
@@@
Split test: com.google.javascript.jscomp.InlineVariablesTest::testIssue378ModifiedArguments2
file: /root/workbench/exportInfo/d4j_buggy/Closure_155/test//com/google/javascript/jscomp/InlineVariablesTest.java
Begin: Pos(923, 10)
End: Pos(931, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_155/test//com/google/javascript/jscomp/InlineVariablesTest.java
Name: testIssue378ModifiedArguments2
Childs: [StatementAssertion<Begin: Pos(924, 5), End: Pos(930, 13)>,
]
@@@
Split test: com.google.javascript.jscomp.InlineVariablesTest::testIssue378EscapedArguments1
file: /root/workbench/exportInfo/d4j_buggy/Closure_155/test//com/google/javascript/jscomp/InlineVariablesTest.java
Begin: Pos(933, 10)
End: Pos(943, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_155/test//com/google/javascript/jscomp/InlineVariablesTest.java
Name: testIssue378EscapedArguments1
Childs: [StatementAssertion<Begin: Pos(934, 5), End: Pos(942, 13)>,
]
@@@
Split test: com.google.javascript.jscomp.InlineVariablesTest::testIssue378EscapedArguments2
file: /root/workbench/exportInfo/d4j_buggy/Closure_155/test//com/google/javascript/jscomp/InlineVariablesTest.java
Begin: Pos(945, 10)
End: Pos(956, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_155/test//com/google/javascript/jscomp/InlineVariablesTest.java
Name: testIssue378EscapedArguments2
Childs: [StatementAssertion<Begin: Pos(946, 5), End: Pos(955, 13)>,
]
@@@
Split test: com.google.javascript.jscomp.InlineVariablesTest::testIssue378EscapedArguments4
file: /root/workbench/exportInfo/d4j_buggy/Closure_155/test//com/google/javascript/jscomp/InlineVariablesTest.java
Begin: Pos(969, 10)
End: Pos(979, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_155/test//com/google/javascript/jscomp/InlineVariablesTest.java
Name: testIssue378EscapedArguments4
Childs: [StatementAssertion<Begin: Pos(970, 5), End: Pos(978, 13)>,
]
--------------------
Run: Closure_156
@@@
Split test: com.google.javascript.jscomp.CollapsePropertiesTest::testAliasedTopLevelEnum
file: /root/workbench/exportInfo/d4j_buggy/Closure_156/test//com/google/javascript/jscomp/CollapsePropertiesTest.java
Begin: Pos(1308, 10)
End: Pos(1330, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_156/test//com/google/javascript/jscomp/CollapsePropertiesTest.java
Name: testAliasedTopLevelEnum
Childs: [StatementAssertion<Begin: Pos(1309, 5), End: Pos(1329, 53)>,
]
@@@
Split test: com.google.javascript.jscomp.CollapsePropertiesTest::testIssue389
file: /root/workbench/exportInfo/d4j_buggy/Closure_156/test//com/google/javascript/jscomp/CollapsePropertiesTest.java
Begin: Pos(1274, 10)
End: Pos(1294, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_156/test//com/google/javascript/jscomp/CollapsePropertiesTest.java
Name: testIssue389
Childs: [StatementAssertion<Begin: Pos(1275, 5), End: Pos(1293, 53)>,
]
--------------------
Run: Closure_115
@@@
Split test: com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
file: /root/workbench/exportInfo/d4j_buggy/Closure_115/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Begin: Pos(2059, 10)
End: Pos(2094, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_115/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Name: testBug4944818
Childs: [StatementAssertion<Begin: Pos(2060, 5), End: Pos(2093, 13)>,
]
@@@
Split test: com.google.javascript.jscomp.InlineFunctionsTest::testDoubleInlining1
file: /root/workbench/exportInfo/d4j_buggy/Closure_115/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Begin: Pos(1097, 10)
End: Pos(1103, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_115/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Name: testDoubleInlining1
Childs: [StatementAssertion<Begin: Pos(1099, 5), End: Pos(1102, 25)>,
]
@@@
Split test: com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified8
file: /root/workbench/exportInfo/d4j_buggy/Closure_115/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Begin: Pos(596, 10)
End: Pos(599, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_115/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Name: testNoInlineIfParametersModified8
Childs: [StatementAssertion<Begin: Pos(598, 5), End: Pos(598, 53)>,
]
@@@
Split test: com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified9
file: /root/workbench/exportInfo/d4j_buggy/Closure_115/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Begin: Pos(601, 10)
End: Pos(604, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_115/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Name: testNoInlineIfParametersModified9
Childs: [StatementAssertion<Begin: Pos(603, 5), End: Pos(603, 55)>,
]
@@@
Split test: com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions6
file: /root/workbench/exportInfo/d4j_buggy/Closure_115/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Begin: Pos(150, 10)
End: Pos(156, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_115/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Name: testInlineFunctions6
Childs: [StatementAssertion<Begin: Pos(152, 5), End: Pos(155, 33)>,
]
--------------------
Run: Closure_51
@@@
Split test: com.google.javascript.jscomp.CodePrinterTest::testIssue582
file: /root/workbench/exportInfo/d4j_buggy/Closure_51/test//com/google/javascript/jscomp/CodePrinterTest.java
Begin: Pos(1272, 10)
End: Pos(1274, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_51/test//com/google/javascript/jscomp/CodePrinterTest.java
Name: testIssue582
Childs: [StatementAssertion<Begin: Pos(1273, 5), End: Pos(1273, 47)>,
]
--------------------
Run: Closure_164
@@@
Split test: com.google.javascript.jscomp.LooseTypeCheckTest::testMethodInference7
file: /root/workbench/exportInfo/d4j_buggy/Closure_164/test//com/google/javascript/jscomp/LooseTypeCheckTest.java
Begin: Pos(1781, 10)
End: Pos(1792, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_164/test//com/google/javascript/jscomp/LooseTypeCheckTest.java
Name: testMethodInference7
Childs: [StatementAssertion<Begin: Pos(1782, 5), End: Pos(1791, 56)>,
]
@@@
Split test: com.google.javascript.jscomp.TypeCheckTest::testMethodInference7
file: /root/workbench/exportInfo/d4j_buggy/Closure_164/test//com/google/javascript/jscomp/TypeCheckTest.java
Begin: Pos(2047, 10)
End: Pos(2058, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_164/test//com/google/javascript/jscomp/TypeCheckTest.java
Name: testMethodInference7
Childs: [StatementAssertion<Begin: Pos(2048, 5), End: Pos(2057, 56)>,
]
@@@
Split test: com.google.javascript.rhino.jstype.FunctionTypeTest::testSupAndInfOfReturnTypesWithNumOfParams
file: /root/workbench/exportInfo/d4j_buggy/Closure_164/test//com/google/javascript/rhino/jstype/FunctionTypeTest.java
# check: Use pattern matching: .assertLeastSupertype
Use pattern matching: .assertGreatestSubtype
Begin: Pos(141, 10)
End: Pos(153, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_164/test//com/google/javascript/rhino/jstype/FunctionTypeTest.java
Name: testSupAndInfOfReturnTypesWithNumOfParams
Childs: [StatementAssertion<Begin: Pos(149, 5), End: Pos(150, 69)>,
StatementAssertion<Begin: Pos(151, 5), End: Pos(152, 61)>,
]
---
public void testSupAndInfOfReturnTypesWithNumOfParams_catena_0() {
    FunctionType twoNumbers = new FunctionBuilder(registry).withParamsNode(registry.createParameters(NUMBER_TYPE, NUMBER_TYPE)).withReturnType(BOOLEAN_TYPE).build();
    FunctionType oneNumber = new FunctionBuilder(registry).withParamsNode(registry.createParameters(NUMBER_TYPE)).withReturnType(BOOLEAN_TYPE).build();
    assertLeastSupertype("function (number, number): boolean", twoNumbers, oneNumber);
    
}

---
---
public void testSupAndInfOfReturnTypesWithNumOfParams_catena_1() {
    FunctionType twoNumbers = new FunctionBuilder(registry).withParamsNode(registry.createParameters(NUMBER_TYPE, NUMBER_TYPE)).withReturnType(BOOLEAN_TYPE).build();
    FunctionType oneNumber = new FunctionBuilder(registry).withParamsNode(registry.createParameters(NUMBER_TYPE)).withReturnType(BOOLEAN_TYPE).build();
    assertGreatestSubtype("function (number): boolean", twoNumbers, oneNumber);
    
}

---
--------------------
Run: Closure_163
@@@
Split test: com.google.javascript.jscomp.CrossModuleMethodMotionTest::testIssue600b
file: /root/workbench/exportInfo/d4j_buggy/Closure_163/test//com/google/javascript/jscomp/CrossModuleMethodMotionTest.java
Begin: Pos(457, 10)
End: Pos(474, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_163/test//com/google/javascript/jscomp/CrossModuleMethodMotionTest.java
Name: testIssue600b
Childs: [StatementAssertion<Begin: Pos(458, 5), End: Pos(473, 22)>,
]
@@@
Split test: com.google.javascript.jscomp.CrossModuleMethodMotionTest::testIssue600e
file: /root/workbench/exportInfo/d4j_buggy/Closure_163/test//com/google/javascript/jscomp/CrossModuleMethodMotionTest.java
Begin: Pos(538, 10)
End: Pos(555, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_163/test//com/google/javascript/jscomp/CrossModuleMethodMotionTest.java
Name: testIssue600e
Childs: [StatementAssertion<Begin: Pos(539, 5), End: Pos(554, 22)>,
]
@@@
Split test: com.google.javascript.jscomp.CrossModuleMethodMotionTest::testIssue600
file: /root/workbench/exportInfo/d4j_buggy/Closure_163/test//com/google/javascript/jscomp/CrossModuleMethodMotionTest.java
Begin: Pos(437, 10)
End: Pos(455, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_163/test//com/google/javascript/jscomp/CrossModuleMethodMotionTest.java
Name: testIssue600
Childs: [StatementAssertion<Begin: Pos(438, 5), End: Pos(454, 22)>,
]
--------------------
Run: Closure_80
@@@
Split test: com.google.javascript.jscomp.NodeUtilTest::testIsBooleanResult
file: /root/workbench/exportInfo/d4j_buggy/Closure_80/test//com/google/javascript/jscomp/NodeUtilTest.java
Begin: Pos(1467, 10)
End: Pos(1517, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_80/test//com/google/javascript/jscomp/NodeUtilTest.java
Name: testIsBooleanResult
Childs: [StatementAssertion<Begin: Pos(1468, 5), End: Pos(1468, 56)>,
StatementAssertion<Begin: Pos(1469, 5), End: Pos(1469, 58)>,
StatementAssertion<Begin: Pos(1470, 5), End: Pos(1470, 60)>,
StatementAssertion<Begin: Pos(1471, 5), End: Pos(1471, 57)>,
StatementAssertion<Begin: Pos(1472, 5), End: Pos(1472, 57)>,
StatementAssertion<Begin: Pos(1473, 5), End: Pos(1473, 64)>,
StatementAssertion<Begin: Pos(1474, 5), End: Pos(1474, 63)>,
StatementAssertion<Begin: Pos(1475, 5), End: Pos(1475, 58)>,
StatementAssertion<Begin: Pos(1476, 5), End: Pos(1476, 64)>,
StatementAssertion<Begin: Pos(1477, 5), End: Pos(1477, 61)>,
StatementAssertion<Begin: Pos(1479, 5), End: Pos(1479, 61)>,
StatementAssertion<Begin: Pos(1480, 5), End: Pos(1480, 61)>,
StatementAssertion<Begin: Pos(1481, 5), End: Pos(1481, 62)>,
StatementAssertion<Begin: Pos(1483, 5), End: Pos(1483, 60)>,
StatementAssertion<Begin: Pos(1484, 5), End: Pos(1484, 60)>,
StatementAssertion<Begin: Pos(1485, 5), End: Pos(1485, 61)>,
StatementAssertion<Begin: Pos(1486, 5), End: Pos(1486, 61)>,
StatementAssertion<Begin: Pos(1487, 5), End: Pos(1487, 59)>,
StatementAssertion<Begin: Pos(1488, 5), End: Pos(1488, 59)>,
StatementAssertion<Begin: Pos(1489, 5), End: Pos(1489, 60)>,
StatementAssertion<Begin: Pos(1490, 5), End: Pos(1490, 60)>,
StatementAssertion<Begin: Pos(1491, 5), End: Pos(1491, 60)>,
StatementAssertion<Begin: Pos(1492, 5), End: Pos(1492, 68)>,
StatementAssertion<Begin: Pos(1494, 5), End: Pos(1494, 58)>,
StatementAssertion<Begin: Pos(1495, 5), End: Pos(1495, 60)>,
StatementAssertion<Begin: Pos(1496, 5), End: Pos(1496, 60)>,
StatementAssertion<Begin: Pos(1497, 5), End: Pos(1497, 58)>,
StatementAssertion<Begin: Pos(1498, 5), End: Pos(1498, 58)>,
StatementAssertion<Begin: Pos(1499, 5), End: Pos(1499, 59)>,
StatementAssertion<Begin: Pos(1500, 5), End: Pos(1500, 58)>,
StatementAssertion<Begin: Pos(1501, 5), End: Pos(1501, 60)>,
StatementAssertion<Begin: Pos(1502, 5), End: Pos(1502, 62)>,
StatementAssertion<Begin: Pos(1503, 5), End: Pos(1503, 62)>,
StatementAssertion<Begin: Pos(1504, 5), End: Pos(1504, 62)>,
StatementAssertion<Begin: Pos(1507, 5), End: Pos(1507, 69)>,
StatementAssertion<Begin: Pos(1508, 5), End: Pos(1508, 65)>,
StatementAssertion<Begin: Pos(1511, 5), End: Pos(1511, 67)>,
StatementAssertion<Begin: Pos(1512, 5), End: Pos(1512, 67)>,
StatementAssertion<Begin: Pos(1513, 5), End: Pos(1513, 70)>,
StatementAssertion<Begin: Pos(1514, 5), End: Pos(1514, 60)>,
StatementAssertion<Begin: Pos(1515, 5), End: Pos(1515, 60)>,
StatementAssertion<Begin: Pos(1516, 5), End: Pos(1516, 58)>,
]
---
public void testIsBooleanResult_catena_0() {
    assertFalse(NodeUtil.isBooleanResult(getNode("1")));
    
}

---
---
public void testIsBooleanResult_catena_1() {
    assertTrue(NodeUtil.isBooleanResult(getNode("true")));
    
}

---
---
public void testIsBooleanResult_catena_2() {
    assertFalse(NodeUtil.isBooleanResult(getNode("+true")));
    
}

---
---
public void testIsBooleanResult_catena_3() {
    assertFalse(NodeUtil.isBooleanResult(getNode("+1")));
    
}

---
---
public void testIsBooleanResult_catena_4() {
    assertFalse(NodeUtil.isBooleanResult(getNode("-1")));
    
}

---
---
public void testIsBooleanResult_catena_5() {
    assertFalse(NodeUtil.isBooleanResult(getNode("-Infinity")));
    
}

---
---
public void testIsBooleanResult_catena_6() {
    assertFalse(NodeUtil.isBooleanResult(getNode("Infinity")));
    
}

---
---
public void testIsBooleanResult_catena_7() {
    assertFalse(NodeUtil.isBooleanResult(getNode("NaN")));
    
}

---
---
public void testIsBooleanResult_catena_8() {
    assertFalse(NodeUtil.isBooleanResult(getNode("undefined")));
    
}

---
---
public void testIsBooleanResult_catena_9() {
    assertFalse(NodeUtil.isBooleanResult(getNode("void 0")));
    
}

---
---
public void testIsBooleanResult_catena_10() {
    assertFalse(NodeUtil.isBooleanResult(getNode("a << b")));
    
}

---
---
public void testIsBooleanResult_catena_11() {
    assertFalse(NodeUtil.isBooleanResult(getNode("a >> b")));
    
}

---
---
public void testIsBooleanResult_catena_12() {
    assertFalse(NodeUtil.isBooleanResult(getNode("a >>> b")));
    
}

---
---
public void testIsBooleanResult_catena_13() {
    assertTrue(NodeUtil.isBooleanResult(getNode("a == b")));
    
}

---
---
public void testIsBooleanResult_catena_14() {
    assertTrue(NodeUtil.isBooleanResult(getNode("a != b")));
    
}

---
---
public void testIsBooleanResult_catena_15() {
    assertTrue(NodeUtil.isBooleanResult(getNode("a === b")));
    
}

---
---
public void testIsBooleanResult_catena_16() {
    assertTrue(NodeUtil.isBooleanResult(getNode("a !== b")));
    
}

---
---
public void testIsBooleanResult_catena_17() {
    assertTrue(NodeUtil.isBooleanResult(getNode("a < b")));
    
}

---
---
public void testIsBooleanResult_catena_18() {
    assertTrue(NodeUtil.isBooleanResult(getNode("a > b")));
    
}

---
---
public void testIsBooleanResult_catena_19() {
    assertTrue(NodeUtil.isBooleanResult(getNode("a <= b")));
    
}

---
---
public void testIsBooleanResult_catena_20() {
    assertTrue(NodeUtil.isBooleanResult(getNode("a >= b")));
    
}

---
---
public void testIsBooleanResult_catena_21() {
    assertTrue(NodeUtil.isBooleanResult(getNode("a in b")));
    
}

---
---
public void testIsBooleanResult_catena_22() {
    assertTrue(NodeUtil.isBooleanResult(getNode("a instanceof b")));
    
}

---
---
public void testIsBooleanResult_catena_23() {
    assertFalse(NodeUtil.isBooleanResult(getNode("'a'")));
    
}

---
---
public void testIsBooleanResult_catena_24() {
    assertFalse(NodeUtil.isBooleanResult(getNode("'a'+b")));
    
}

---
---
public void testIsBooleanResult_catena_25() {
    assertFalse(NodeUtil.isBooleanResult(getNode("a+'b'")));
    
}

---
---
public void testIsBooleanResult_catena_26() {
    assertFalse(NodeUtil.isBooleanResult(getNode("a+b")));
    
}

---
---
public void testIsBooleanResult_catena_27() {
    assertFalse(NodeUtil.isBooleanResult(getNode("a()")));
    
}

---
---
public void testIsBooleanResult_catena_28() {
    assertFalse(NodeUtil.isBooleanResult(getNode("''.a")));
    
}

---
---
public void testIsBooleanResult_catena_29() {
    assertFalse(NodeUtil.isBooleanResult(getNode("a.b")));
    
}

---
---
public void testIsBooleanResult_catena_30() {
    assertFalse(NodeUtil.isBooleanResult(getNode("a.b()")));
    
}

---
---
public void testIsBooleanResult_catena_31() {
    assertFalse(NodeUtil.isBooleanResult(getNode("a().b()")));
    
}

---
---
public void testIsBooleanResult_catena_32() {
    assertFalse(NodeUtil.isBooleanResult(getNode("new a()")));
    
}

---
---
public void testIsBooleanResult_catena_33() {
    assertTrue(NodeUtil.isBooleanResult(getNode("delete a")));
    
}

---
---
public void testIsBooleanResult_catena_34() {
    assertFalse(NodeUtil.isBooleanResult(getNode("([true,false])")));
    
}

---
---
public void testIsBooleanResult_catena_35() {
    assertFalse(NodeUtil.isBooleanResult(getNode("({a:true})")));
    
}

---
---
public void testIsBooleanResult_catena_36() {
    assertTrue(NodeUtil.isBooleanResult(getNode("true && false")));
    
}

---
---
public void testIsBooleanResult_catena_37() {
    assertTrue(NodeUtil.isBooleanResult(getNode("true || false")));
    
}

---
---
public void testIsBooleanResult_catena_38() {
    assertTrue(NodeUtil.isBooleanResult(getNode("a ? true : false")));
    
}

---
---
public void testIsBooleanResult_catena_39() {
    assertTrue(NodeUtil.isBooleanResult(getNode("a,true")));
    
}

---
---
public void testIsBooleanResult_catena_40() {
    assertTrue(NodeUtil.isBooleanResult(getNode("a=true")));
    
}

---
---
public void testIsBooleanResult_catena_41() {
    assertFalse(NodeUtil.isBooleanResult(getNode("a=1")));
    
}

---
@@@
Split test: com.google.javascript.jscomp.NodeUtilTest::testLocalValue1
file: /root/workbench/exportInfo/d4j_buggy/Closure_80/test//com/google/javascript/jscomp/NodeUtilTest.java
Begin: Pos(1073, 10)
End: Pos(1170, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_80/test//com/google/javascript/jscomp/NodeUtilTest.java
Name: testLocalValue1
Childs: [StatementAssertion<Begin: Pos(1075, 5), End: Pos(1075, 37)>,
StatementAssertion<Begin: Pos(1076, 5), End: Pos(1076, 39)>,
StatementAssertion<Begin: Pos(1077, 5), End: Pos(1077, 40)>,
StatementAssertion<Begin: Pos(1078, 5), End: Pos(1078, 45)>,
StatementAssertion<Begin: Pos(1082, 5), End: Pos(1082, 43)>,
StatementAssertion<Begin: Pos(1085, 5), End: Pos(1085, 47)>,
StatementAssertion<Begin: Pos(1086, 5), End: Pos(1086, 50)>,
StatementAssertion<Begin: Pos(1089, 5), End: Pos(1089, 39)>,
StatementAssertion<Begin: Pos(1090, 5), End: Pos(1090, 44)>,
StatementAssertion<Begin: Pos(1091, 5), End: Pos(1091, 43)>,
StatementAssertion<Begin: Pos(1092, 5), End: Pos(1092, 38)>,
StatementAssertion<Begin: Pos(1093, 5), End: Pos(1093, 36)>,
StatementAssertion<Begin: Pos(1094, 5), End: Pos(1094, 38)>,
StatementAssertion<Begin: Pos(1095, 5), End: Pos(1095, 39)>,
StatementAssertion<Begin: Pos(1096, 5), End: Pos(1096, 40)>,
StatementAssertion<Begin: Pos(1097, 5), End: Pos(1097, 37)>,
StatementAssertion<Begin: Pos(1098, 5), End: Pos(1098, 37)>,
StatementAssertion<Begin: Pos(1101, 5), End: Pos(1101, 38)>,
StatementAssertion<Begin: Pos(1102, 5), End: Pos(1102, 42)>,
StatementAssertion<Begin: Pos(1105, 5), End: Pos(1105, 38)>,
StatementAssertion<Begin: Pos(1106, 5), End: Pos(1106, 38)>,
StatementAssertion<Begin: Pos(1109, 5), End: Pos(1109, 39)>,
StatementAssertion<Begin: Pos(1110, 5), End: Pos(1110, 39)>,
StatementAssertion<Begin: Pos(1113, 5), End: Pos(1113, 38)>,
StatementAssertion<Begin: Pos(1114, 5), End: Pos(1114, 40)>,
StatementAssertion<Begin: Pos(1115, 5), End: Pos(1115, 39)>,
StatementAssertion<Begin: Pos(1118, 5), End: Pos(1118, 39)>,
StatementAssertion<Begin: Pos(1119, 5), End: Pos(1119, 39)>,
StatementAssertion<Begin: Pos(1122, 5), End: Pos(1122, 39)>,
StatementAssertion<Begin: Pos(1123, 5), End: Pos(1123, 39)>,
StatementAssertion<Begin: Pos(1124, 5), End: Pos(1124, 38)>,
StatementAssertion<Begin: Pos(1126, 5), End: Pos(1126, 40)>,
StatementAssertion<Begin: Pos(1127, 5), End: Pos(1127, 40)>,
StatementAssertion<Begin: Pos(1128, 5), End: Pos(1128, 41)>,
StatementAssertion<Begin: Pos(1131, 5), End: Pos(1131, 39)>,
StatementAssertion<Begin: Pos(1132, 5), End: Pos(1132, 40)>,
StatementAssertion<Begin: Pos(1133, 5), End: Pos(1133, 40)>,
StatementAssertion<Begin: Pos(1134, 5), End: Pos(1134, 40)>,
StatementAssertion<Begin: Pos(1137, 5), End: Pos(1137, 39)>,
StatementAssertion<Begin: Pos(1138, 5), End: Pos(1138, 40)>,
StatementAssertion<Begin: Pos(1139, 5), End: Pos(1139, 40)>,
StatementAssertion<Begin: Pos(1140, 5), End: Pos(1140, 40)>,
StatementAssertion<Begin: Pos(1143, 5), End: Pos(1143, 40)>,
StatementAssertion<Begin: Pos(1144, 5), End: Pos(1144, 41)>,
StatementAssertion<Begin: Pos(1145, 5), End: Pos(1145, 41)>,
StatementAssertion<Begin: Pos(1146, 5), End: Pos(1146, 41)>,
StatementAssertion<Begin: Pos(1149, 5), End: Pos(1149, 37)>,
StatementAssertion<Begin: Pos(1150, 5), End: Pos(1150, 37)>,
StatementAssertion<Begin: Pos(1151, 5), End: Pos(1151, 40)>,
StatementAssertion<Begin: Pos(1152, 5), End: Pos(1152, 40)>,
StatementAssertion<Begin: Pos(1153, 5), End: Pos(1153, 40)>,
StatementAssertion<Begin: Pos(1155, 5), End: Pos(1155, 43)>,
StatementAssertion<Begin: Pos(1156, 5), End: Pos(1156, 43)>,
StatementAssertion<Begin: Pos(1157, 5), End: Pos(1157, 49)>,
StatementAssertion<Begin: Pos(1159, 5), End: Pos(1159, 41)>,
StatementAssertion<Begin: Pos(1160, 5), End: Pos(1160, 41)>,
StatementAssertion<Begin: Pos(1162, 5), End: Pos(1162, 40)>,
StatementAssertion<Begin: Pos(1164, 5), End: Pos(1164, 48)>,
StatementAssertion<Begin: Pos(1165, 5), End: Pos(1165, 47)>,
StatementAssertion<Begin: Pos(1167, 5), End: Pos(1167, 47)>,
StatementAssertion<Begin: Pos(1169, 5), End: Pos(1169, 45)>,
]
---
public void testLocalValue1_catena_0()throws Exception {
    assertFalse(testLocalValue("x"));
    
}

---
---
public void testLocalValue1_catena_1()throws Exception {
    assertFalse(testLocalValue("x()"));
    
}

---
---
public void testLocalValue1_catena_2()throws Exception {
    assertFalse(testLocalValue("this"));
    
}

---
---
public void testLocalValue1_catena_3()throws Exception {
    assertFalse(testLocalValue("arguments"));
    
}

---
---
public void testLocalValue1_catena_4()throws Exception {
    assertFalse(testLocalValue("new x()"));
    
}

---
---
public void testLocalValue1_catena_5()throws Exception {
    assertFalse(testLocalValue("(new x()).y"));
    
}

---
---
public void testLocalValue1_catena_6()throws Exception {
    assertFalse(testLocalValue("(new x())['y']"));
    
}

---
---
public void testLocalValue1_catena_7()throws Exception {
    assertTrue(testLocalValue("null"));
    
}

---
---
public void testLocalValue1_catena_8()throws Exception {
    assertTrue(testLocalValue("undefined"));
    
}

---
---
public void testLocalValue1_catena_9()throws Exception {
    assertTrue(testLocalValue("Infinity"));
    
}

---
---
public void testLocalValue1_catena_10()throws Exception {
    assertTrue(testLocalValue("NaN"));
    
}

---
---
public void testLocalValue1_catena_11()throws Exception {
    assertTrue(testLocalValue("1"));
    
}

---
---
public void testLocalValue1_catena_12()throws Exception {
    assertTrue(testLocalValue("'a'"));
    
}

---
---
public void testLocalValue1_catena_13()throws Exception {
    assertTrue(testLocalValue("true"));
    
}

---
---
public void testLocalValue1_catena_14()throws Exception {
    assertTrue(testLocalValue("false"));
    
}

---
---
public void testLocalValue1_catena_15()throws Exception {
    assertTrue(testLocalValue("[]"));
    
}

---
---
public void testLocalValue1_catena_16()throws Exception {
    assertTrue(testLocalValue("{}"));
    
}

---
---
public void testLocalValue1_catena_17()throws Exception {
    assertTrue(testLocalValue("[x]"));
    
}

---
---
public void testLocalValue1_catena_18()throws Exception {
    assertTrue(testLocalValue("{'a':x}"));
    
}

---
---
public void testLocalValue1_catena_19()throws Exception {
    assertTrue(testLocalValue("++x"));
    
}

---
---
public void testLocalValue1_catena_20()throws Exception {
    assertTrue(testLocalValue("--x"));
    
}

---
---
public void testLocalValue1_catena_21()throws Exception {
    assertFalse(testLocalValue("x++"));
    
}

---
---
public void testLocalValue1_catena_22()throws Exception {
    assertFalse(testLocalValue("x--"));
    
}

---
---
public void testLocalValue1_catena_23()throws Exception {
    assertTrue(testLocalValue("x=1"));
    
}

---
---
public void testLocalValue1_catena_24()throws Exception {
    assertFalse(testLocalValue("x=[]"));
    
}

---
---
public void testLocalValue1_catena_25()throws Exception {
    assertFalse(testLocalValue("x=y"));
    
}

---
---
public void testLocalValue1_catena_26()throws Exception {
    assertTrue(testLocalValue("x+=y"));
    
}

---
---
public void testLocalValue1_catena_27()throws Exception {
    assertTrue(testLocalValue("x*=y"));
    
}

---
---
public void testLocalValue1_catena_28()throws Exception {
    assertTrue(testLocalValue("x==y"));
    
}

---
---
public void testLocalValue1_catena_29()throws Exception {
    assertTrue(testLocalValue("x!=y"));
    
}

---
---
public void testLocalValue1_catena_30()throws Exception {
    assertTrue(testLocalValue("x>y"));
    
}

---
---
public void testLocalValue1_catena_31()throws Exception {
    assertTrue(testLocalValue("(1,2)"));
    
}

---
---
public void testLocalValue1_catena_32()throws Exception {
    assertTrue(testLocalValue("(x,1)"));
    
}

---
---
public void testLocalValue1_catena_33()throws Exception {
    assertFalse(testLocalValue("(x,y)"));
    
}

---
---
public void testLocalValue1_catena_34()throws Exception {
    assertTrue(testLocalValue("1||2"));
    
}

---
---
public void testLocalValue1_catena_35()throws Exception {
    assertFalse(testLocalValue("x||1"));
    
}

---
---
public void testLocalValue1_catena_36()throws Exception {
    assertFalse(testLocalValue("x||y"));
    
}

---
---
public void testLocalValue1_catena_37()throws Exception {
    assertFalse(testLocalValue("1||y"));
    
}

---
---
public void testLocalValue1_catena_38()throws Exception {
    assertTrue(testLocalValue("1&&2"));
    
}

---
---
public void testLocalValue1_catena_39()throws Exception {
    assertFalse(testLocalValue("x&&1"));
    
}

---
---
public void testLocalValue1_catena_40()throws Exception {
    assertFalse(testLocalValue("x&&y"));
    
}

---
---
public void testLocalValue1_catena_41()throws Exception {
    assertFalse(testLocalValue("1&&y"));
    
}

---
---
public void testLocalValue1_catena_42()throws Exception {
    assertTrue(testLocalValue("x?1:2"));
    
}

---
---
public void testLocalValue1_catena_43()throws Exception {
    assertFalse(testLocalValue("x?x:2"));
    
}

---
---
public void testLocalValue1_catena_44()throws Exception {
    assertFalse(testLocalValue("x?1:x"));
    
}

---
---
public void testLocalValue1_catena_45()throws Exception {
    assertFalse(testLocalValue("x?x:y"));
    
}

---
---
public void testLocalValue1_catena_46()throws Exception {
    assertTrue(testLocalValue("!y"));
    
}

---
---
public void testLocalValue1_catena_47()throws Exception {
    assertTrue(testLocalValue("~y"));
    
}

---
---
public void testLocalValue1_catena_48()throws Exception {
    assertTrue(testLocalValue("y + 1"));
    
}

---
---
public void testLocalValue1_catena_49()throws Exception {
    assertTrue(testLocalValue("y + z"));
    
}

---
---
public void testLocalValue1_catena_50()throws Exception {
    assertTrue(testLocalValue("y * z"));
    
}

---
---
public void testLocalValue1_catena_51()throws Exception {
    assertTrue(testLocalValue("'a' in x"));
    
}

---
---
public void testLocalValue1_catena_52()throws Exception {
    assertTrue(testLocalValue("typeof x"));
    
}

---
---
public void testLocalValue1_catena_53()throws Exception {
    assertTrue(testLocalValue("x instanceof y"));
    
}

---
---
public void testLocalValue1_catena_54()throws Exception {
    assertTrue(testLocalValue("void x"));
    
}

---
---
public void testLocalValue1_catena_55()throws Exception {
    assertTrue(testLocalValue("void 0"));
    
}

---
---
public void testLocalValue1_catena_56()throws Exception {
    assertFalse(testLocalValue("{}.x"));
    
}

---
---
public void testLocalValue1_catena_57()throws Exception {
    assertTrue(testLocalValue("{}.toString()"));
    
}

---
---
public void testLocalValue1_catena_58()throws Exception {
    assertTrue(testLocalValue("o.toString()"));
    
}

---
---
public void testLocalValue1_catena_59()throws Exception {
    assertFalse(testLocalValue("o.valueOf()"));
    
}

---
---
public void testLocalValue1_catena_60()throws Exception {
    assertTrue(testLocalValue("delete a.b"));
    
}

---
--------------------
Run: Closure_8
@@@
Split test: com.google.javascript.jscomp.CollapseVariableDeclarationsTest::testIssue820
file: /root/workbench/exportInfo/d4j_buggy/Closure_8/test//com/google/javascript/jscomp/CollapseVariableDeclarationsTest.java
Begin: Pos(45, 10)
End: Pos(49, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_8/test//com/google/javascript/jscomp/CollapseVariableDeclarationsTest.java
Name: testIssue820
Childs: [StatementAssertion<Begin: Pos(48, 5), End: Pos(48, 54)>,
]
--------------------
Run: Closure_13
@@@
Split test: com.google.javascript.jscomp.IntegrationTest::testIssue787
file: /root/workbench/exportInfo/d4j_buggy/Closure_13/test//com/google/javascript/jscomp/IntegrationTest.java
Begin: Pos(2217, 10)
End: Pos(2263, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_13/test//com/google/javascript/jscomp/IntegrationTest.java
Name: testIssue787
Childs: [StatementAssertion<Begin: Pos(2262, 5), End: Pos(2262, 32)>,
]
--------------------
Run: Closure_142
@@@
Split test: com.google.javascript.jscomp.CoalesceVariableNamesTest::testParameter4
file: /root/workbench/exportInfo/d4j_buggy/Closure_142/test//com/google/javascript/jscomp/CoalesceVariableNamesTest.java
Begin: Pos(188, 10)
End: Pos(193, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_142/test//com/google/javascript/jscomp/CoalesceVariableNamesTest.java
Name: testParameter4
Childs: [StatementAssertion<Begin: Pos(191, 5), End: Pos(192, 62)>,
]
@@@
Split test: com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseLicenseWithAnnotation
file: /root/workbench/exportInfo/d4j_buggy/Closure_142/test//com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java
Begin: Pos(1073, 10)
End: Pos(1080, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_142/test//com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java
Name: testParseLicenseWithAnnotation
Childs: [StatementAssertion<Begin: Pos(1077, 5), End: Pos(1077, 19)>,
StatementAssertion<Begin: Pos(1078, 5), End: Pos(1079, 42)>,
]
---
public void testParseLicenseWithAnnotation_catena_0()throws Exception {
    Node node = new Node(1);
    this.fileLevelJsDocBuilder = node.getJsDocBuilderForNode();
    String comment = "@license Foo \n * @author Charlie Brown */";
    parse(comment);
    
}

---
---
public void testParseLicenseWithAnnotation_catena_1()throws Exception {
    Node node = new Node(1);
    this.fileLevelJsDocBuilder = node.getJsDocBuilderForNode();
    String comment = "@license Foo \n * @author Charlie Brown */";
    assertEquals(" Foo \n @author Charlie Brown ", node.getJSDocInfo().getLicense());
    
}

---
--------------------
Run: Closure_34
@@@
Split test: com.google.javascript.jscomp.CodePrinterTest::testManyAdds
file: /root/workbench/exportInfo/d4j_buggy/Closure_34/test//com/google/javascript/jscomp/CodePrinterTest.java
Begin: Pos(1382, 10)
End: Pos(1398, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_34/test//com/google/javascript/jscomp/CodePrinterTest.java
Name: testManyAdds
Childs: [StatementAssertion<Begin: Pos(1397, 5), End: Pos(1397, 35)>,
]
--------------------
Run: Closure_72
@@@
Split test: com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions31
file: /root/workbench/exportInfo/d4j_buggy/Closure_72/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Begin: Pos(386, 10)
End: Pos(391, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_72/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Name: testInlineFunctions31
Childs: [StatementAssertion<Begin: Pos(388, 5), End: Pos(390, 49)>,
]
--------------------
Run: Closure_124
@@@
Split test: com.google.javascript.jscomp.ExploitAssignsTest::testIssue1017
file: /root/workbench/exportInfo/d4j_buggy/Closure_124/test//com/google/javascript/jscomp/ExploitAssignsTest.java
Begin: Pos(160, 10)
End: Pos(162, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_124/test//com/google/javascript/jscomp/ExploitAssignsTest.java
Name: testIssue1017
Childs: [StatementAssertion<Begin: Pos(161, 5), End: Pos(161, 74)>,
]
--------------------
Run: Closure_96
@@@
Split test: com.google.javascript.jscomp.TypeCheckTest::testFunctionArguments16
file: /root/workbench/exportInfo/d4j_buggy/Closure_96/test//com/google/javascript/jscomp/TypeCheckTest.java
Begin: Pos(1361, 10)
End: Pos(1368, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_96/test//com/google/javascript/jscomp/TypeCheckTest.java
Name: testFunctionArguments16
Childs: [StatementAssertion<Begin: Pos(1362, 5), End: Pos(1367, 40)>,
]
--------------------
Run: Closure_110
@@@
Split test: com.google.javascript.jscomp.ScopedAliasesTest::testHoistedFunctionDeclaration
file: /root/workbench/exportInfo/d4j_buggy/Closure_110/test//com/google/javascript/jscomp/ScopedAliasesTest.java
Begin: Pos(521, 10)
End: Pos(526, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_110/test//com/google/javascript/jscomp/ScopedAliasesTest.java
Name: testHoistedFunctionDeclaration
Childs: [StatementAssertion<Begin: Pos(522, 5), End: Pos(525, 39)>,
]
@@@
Split test: com.google.javascript.jscomp.ScopedAliasesTest::testFunctionDeclaration
file: /root/workbench/exportInfo/d4j_buggy/Closure_110/test//com/google/javascript/jscomp/ScopedAliasesTest.java
Begin: Pos(514, 10)
End: Pos(519, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_110/test//com/google/javascript/jscomp/ScopedAliasesTest.java
Name: testFunctionDeclaration
Childs: [StatementAssertion<Begin: Pos(515, 5), End: Pos(518, 39)>,
]
--------------------
Run: Closure_149
@@@
Split test: com.google.javascript.jscomp.CommandLineRunnerTest::testCharSetExpansion
file: /root/workbench/exportInfo/d4j_buggy/Closure_149/test//com/google/javascript/jscomp/CommandLineRunnerTest.java
Begin: Pos(383, 10)
End: Pos(389, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_149/test//com/google/javascript/jscomp/CommandLineRunnerTest.java
Name: testCharSetExpansion
Childs: [StatementAssertion<Begin: Pos(384, 5), End: Pos(384, 17)>,
StatementAssertion<Begin: Pos(385, 5), End: Pos(385, 70)>,
StatementAssertion<Begin: Pos(387, 5), End: Pos(387, 17)>,
StatementAssertion<Begin: Pos(388, 5), End: Pos(388, 67)>,
]
---
public void testCharSetExpansion_catena_0() {
    testSame("");
    args.add("--charset=UTF-8");
    
}

---
---
public void testCharSetExpansion_catena_1() {
    assertEquals("US-ASCII", lastCompiler.getOptions().outputCharset);
    args.add("--charset=UTF-8");
    
}

---
---
public void testCharSetExpansion_catena_2() {
    args.add("--charset=UTF-8");
    testSame("");
    
}

---
---
public void testCharSetExpansion_catena_3() {
    args.add("--charset=UTF-8");
    assertEquals("UTF-8", lastCompiler.getOptions().outputCharset);
    
}

---
--------------------
Run: Closure_58
@@@
Split test: com.google.javascript.jscomp.LiveVariableAnalysisTest::testExpressionInForIn
file: /root/workbench/exportInfo/d4j_buggy/Closure_58/test//com/google/javascript/jscomp/LiveVariableAnalysisTest.java
# check: Use pattern matching: .assertLiveBeforeX
Begin: Pos(209, 10)
End: Pos(211, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_58/test//com/google/javascript/jscomp/LiveVariableAnalysisTest.java
Name: testExpressionInForIn
Childs: [StatementAssertion<Begin: Pos(210, 5), End: Pos(210, 67)>,
]
--------------------
Run: Closure_84
@@@
Split test: com.google.javascript.jscomp.parsing.ParserTest::testDestructuringAssignForbidden4
file: /root/workbench/exportInfo/d4j_buggy/Closure_84/test//com/google/javascript/jscomp/parsing/ParserTest.java
Begin: Pos(624, 10)
End: Pos(628, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_84/test//com/google/javascript/jscomp/parsing/ParserTest.java
Name: testDestructuringAssignForbidden4
Childs: [StatementAssertion<Begin: Pos(625, 5), End: Pos(627, 37)>,
]
--------------------
Run: Closure_87
@@@
Split test: com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest::testIssue291
file: /root/workbench/exportInfo/d4j_buggy/Closure_87/test//com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java
Begin: Pos(566, 10)
End: Pos(572, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_87/test//com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java
Name: testIssue291
Childs: [StatementAssertion<Begin: Pos(567, 5), End: Pos(567, 64)>,
StatementAssertion<Begin: Pos(568, 5), End: Pos(568, 41)>,
StatementAssertion<Begin: Pos(569, 5), End: Pos(569, 59)>,
StatementAssertion<Begin: Pos(570, 5), End: Pos(570, 61)>,
StatementAssertion<Begin: Pos(571, 5), End: Pos(571, 37)>,
]
---
public void testIssue291_catena_0() {
    fold("if (true) { f.onchange(); }", "if (1) f.onchange();");
    
}

---
---
public void testIssue291_catena_1() {
    foldSame("if (f) { f.onchange(); }");
    
}

---
---
public void testIssue291_catena_2() {
    foldSame("if (f) { f.bar(); } else { f.onchange(); }");
    
}

---
---
public void testIssue291_catena_3() {
    fold("if (f) { f.bonchange(); }", "f && f.bonchange();");
    
}

---
---
public void testIssue291_catena_4() {
    foldSame("if (f) { f['x'](); }");
    
}

---
--------------------
Run: Closure_157
@@@
Split test: com.google.javascript.jscomp.CodePrinterTest::testObjectLit2
file: /root/workbench/exportInfo/d4j_buggy/Closure_157/test//com/google/javascript/jscomp/CodePrinterTest.java
Begin: Pos(1125, 10)
End: Pos(1131, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_157/test//com/google/javascript/jscomp/CodePrinterTest.java
Name: testObjectLit2
Childs: [StatementAssertion<Begin: Pos(1126, 5), End: Pos(1126, 46)>,
StatementAssertion<Begin: Pos(1127, 5), End: Pos(1127, 48)>,
StatementAssertion<Begin: Pos(1128, 5), End: Pos(1128, 56)>,
StatementAssertion<Begin: Pos(1129, 5), End: Pos(1129, 54)>,
]
---
public void testObjectLit2_catena_0() {
    assertPrint("var x={1:1}", "var x={1:1}");
    
}

---
---
public void testObjectLit2_catena_1() {
    assertPrint("var x={'1':1}", "var x={1:1}");
    
}

---
---
public void testObjectLit2_catena_2() {
    assertPrint("var x={'1.0':1}", "var x={\"1.0\":1}");
    
}

---
---
public void testObjectLit2_catena_3() {
    assertPrint("var x={1.5:1}", "var x={\"1.5\":1}");
    
}

---
@@@
Split test: com.google.javascript.jscomp.CodePrinterTest::testObjectLit3
file: /root/workbench/exportInfo/d4j_buggy/Closure_157/test//com/google/javascript/jscomp/CodePrinterTest.java
Begin: Pos(1133, 10)
End: Pos(1144, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_157/test//com/google/javascript/jscomp/CodePrinterTest.java
Name: testObjectLit3
Childs: [StatementAssertion<Begin: Pos(1134, 5), End: Pos(1135, 33)>,
StatementAssertion<Begin: Pos(1136, 5), End: Pos(1137, 33)>,
StatementAssertion<Begin: Pos(1138, 5), End: Pos(1139, 40)>,
StatementAssertion<Begin: Pos(1140, 5), End: Pos(1141, 40)>,
StatementAssertion<Begin: Pos(1142, 5), End: Pos(1143, 51)>,
]
---
public void testObjectLit3_catena_0() {
    assertPrint("var x={3E9:1}", "var x={3E9:1}");
    
}

---
---
public void testObjectLit3_catena_1() {
    assertPrint("var x={'3000000000':1}", "var x={3E9:1}");
    
}

---
---
public void testObjectLit3_catena_2() {
    assertPrint("var x={'3000000001':1}", "var x={3000000001:1}");
    
}

---
---
public void testObjectLit3_catena_3() {
    assertPrint("var x={'6000000001':1}", "var x={6000000001:1}");
    
}

---
---
public void testObjectLit3_catena_4() {
    assertPrint("var x={\"12345678901234567\":1}", "var x={\"12345678901234567\":1}");
    
}

---
@@@
Split test: com.google.javascript.jscomp.CodePrinterTest::testGetter
file: /root/workbench/exportInfo/d4j_buggy/Closure_157/test//com/google/javascript/jscomp/CodePrinterTest.java
Begin: Pos(1146, 10)
End: Pos(1164, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_157/test//com/google/javascript/jscomp/CodePrinterTest.java
Name: testGetter
Childs: [StatementAssertion<Begin: Pos(1147, 5), End: Pos(1147, 42)>,
StatementAssertion<Begin: Pos(1148, 5), End: Pos(1148, 77)>,
StatementAssertion<Begin: Pos(1149, 5), End: Pos(1151, 37)>,
StatementAssertion<Begin: Pos(1153, 5), End: Pos(1155, 39)>,
StatementAssertion<Begin: Pos(1157, 5), End: Pos(1159, 35)>,
StatementAssertion<Begin: Pos(1161, 5), End: Pos(1163, 40)>,
]
---
public void testGetter_catena_0() {
    assertPrint("var x = {}", "var x={}");
    
}

---
---
public void testGetter_catena_1() {
    assertPrint("var x = {get a() {return 1}}", "var x={get a(){return 1}}");
    
}

---
---
public void testGetter_catena_2() {
    assertPrint("var x = {get a() {}, get b(){}}", "var x={get a(){},get b(){}}");
    
}

---
---
public void testGetter_catena_3() {
    assertPrint("var x = {get 'a'() {return 1}}", "var x={get \"a\"(){return 1}}");
    
}

---
---
public void testGetter_catena_4() {
    assertPrint("var x = {get 1() {return 1}}", "var x={get 1(){return 1}}");
    
}

---
---
public void testGetter_catena_5() {
    assertPrint("var x = {get \"()\"() {return 1}}", "var x={get \"()\"(){return 1}}");
    
}

---
@@@
Split test: com.google.javascript.jscomp.CodePrinterTest::testSetter
file: /root/workbench/exportInfo/d4j_buggy/Closure_157/test//com/google/javascript/jscomp/CodePrinterTest.java
Begin: Pos(1166, 10)
End: Pos(1183, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_157/test//com/google/javascript/jscomp/CodePrinterTest.java
Name: testSetter
Childs: [StatementAssertion<Begin: Pos(1167, 5), End: Pos(1167, 42)>,
StatementAssertion<Begin: Pos(1168, 5), End: Pos(1170, 37)>,
StatementAssertion<Begin: Pos(1172, 5), End: Pos(1174, 39)>,
StatementAssertion<Begin: Pos(1176, 5), End: Pos(1178, 36)>,
StatementAssertion<Begin: Pos(1180, 5), End: Pos(1182, 42)>,
]
---
public void testSetter_catena_0() {
    assertPrint("var x = {}", "var x={}");
    
}

---
---
public void testSetter_catena_1() {
    assertPrint("var x = {set a(y) {return 1}}", "var x={set a(y){return 1}}");
    
}

---
---
public void testSetter_catena_2() {
    assertPrint("var x = {get 'a'() {return 1}}", "var x={get \"a\"(){return 1}}");
    
}

---
---
public void testSetter_catena_3() {
    assertPrint("var x = {set 1(y) {return 1}}", "var x={set 1(y){return 1}}");
    
}

---
---
public void testSetter_catena_4() {
    assertPrint("var x = {set \"(x)\"(y) {return 1}}", "var x={set \"(x)\"(y){return 1}}");
    
}

---
@@@
Split test: com.google.javascript.jscomp.FunctionNamesTest::testFunctionsNamesAndIds
file: /root/workbench/exportInfo/d4j_buggy/Closure_157/test//com/google/javascript/jscomp/FunctionNamesTest.java
Begin: Pos(40, 10)
End: Pos(93, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_157/test//com/google/javascript/jscomp/FunctionNamesTest.java
Name: testFunctionsNamesAndIds
Childs: [StatementAssertion<Begin: Pos(60, 5), End: Pos(60, 23)>,
StatementAssertion<Begin: Pos(71, 5), End: Pos(71, 62)>,
StatementAssertion<Begin: Pos(91, 5), End: Pos(92, 41)>,
]
---
public void testFunctionsNamesAndIds_catena_0() {
    final String jsSource = "goog.widget = function(str) {\n" + "  this.member_fn = function() {};\n" + "  local_fn = function() {};\n" + "  (function(a){})(1);\n" + "}\n" + "function foo() {\n" + "  function bar() {}\n" + "}\n" + "literal = {f1 : function(){}, f2 : function(){}};\n" + "goog.array.map(arr, function named(){});\n" + "goog.array.map(arr, function(){});\n" + "named_twice = function quax(){};\n" + "recliteral = {l1 : {l2 : function(){}}};\n" + "namedliteral = {n1 : function litnamed(){}};\n" + "namedrecliteral = {n1 : {n2 : function reclitnamed(){}}};\n" + "numliteral = {1 : function(){}};\n" + "recnumliteral = {1 : {a : function(){}}};\n";
    testSame(jsSource);
    final Map < Integer, String > idNameMap = Maps.newLinkedHashMap();
    int count = 0;
    for(Node f : functionNames.getFunctionNodeList()) {
        int id = functionNames.getFunctionId(f);
        String name = functionNames.getFunctionName(f);
        idNameMap.put(id, name);
        count ++ ;
        
    }
    final Map < Integer, String > expectedMap = Maps.newLinkedHashMap();
    expectedMap.put(0, "goog.widget.member_fn");
    expectedMap.put(1, "goog.widget::local_fn");
    expectedMap.put(2, "goog.widget::<anonymous>");
    expectedMap.put(3, "goog.widget");
    expectedMap.put(4, "foo::bar");
    expectedMap.put(5, "foo");
    expectedMap.put(6, "literal.f1");
    expectedMap.put(7, "literal.f2");
    expectedMap.put(8, "named");
    expectedMap.put(9, "<anonymous>");
    expectedMap.put(10, "quax");
    expectedMap.put(11, "recliteral.l1.l2");
    expectedMap.put(12, "litnamed");
    expectedMap.put(13, "reclitnamed");
    expectedMap.put(14, "numliteral.__2");
    expectedMap.put(15, "recnumliteral.__3.a");
    
}

---
---
public void testFunctionsNamesAndIds_catena_1() {
    final String jsSource = "goog.widget = function(str) {\n" + "  this.member_fn = function() {};\n" + "  local_fn = function() {};\n" + "  (function(a){})(1);\n" + "}\n" + "function foo() {\n" + "  function bar() {}\n" + "}\n" + "literal = {f1 : function(){}, f2 : function(){}};\n" + "goog.array.map(arr, function named(){});\n" + "goog.array.map(arr, function(){});\n" + "named_twice = function quax(){};\n" + "recliteral = {l1 : {l2 : function(){}}};\n" + "namedliteral = {n1 : function litnamed(){}};\n" + "namedrecliteral = {n1 : {n2 : function reclitnamed(){}}};\n" + "numliteral = {1 : function(){}};\n" + "recnumliteral = {1 : {a : function(){}}};\n";
    final Map < Integer, String > idNameMap = Maps.newLinkedHashMap();
    int count = 0;
    for(Node f : functionNames.getFunctionNodeList()) {
        int id = functionNames.getFunctionId(f);
        String name = functionNames.getFunctionName(f);
        idNameMap.put(id, name);
        count ++ ;
        
    }
    assertEquals("Unexpected number of functions", 16, count);
    final Map < Integer, String > expectedMap = Maps.newLinkedHashMap();
    expectedMap.put(0, "goog.widget.member_fn");
    expectedMap.put(1, "goog.widget::local_fn");
    expectedMap.put(2, "goog.widget::<anonymous>");
    expectedMap.put(3, "goog.widget");
    expectedMap.put(4, "foo::bar");
    expectedMap.put(5, "foo");
    expectedMap.put(6, "literal.f1");
    expectedMap.put(7, "literal.f2");
    expectedMap.put(8, "named");
    expectedMap.put(9, "<anonymous>");
    expectedMap.put(10, "quax");
    expectedMap.put(11, "recliteral.l1.l2");
    expectedMap.put(12, "litnamed");
    expectedMap.put(13, "reclitnamed");
    expectedMap.put(14, "numliteral.__2");
    expectedMap.put(15, "recnumliteral.__3.a");
    
}

---
---
public void testFunctionsNamesAndIds_catena_2() {
    final String jsSource = "goog.widget = function(str) {\n" + "  this.member_fn = function() {};\n" + "  local_fn = function() {};\n" + "  (function(a){})(1);\n" + "}\n" + "function foo() {\n" + "  function bar() {}\n" + "}\n" + "literal = {f1 : function(){}, f2 : function(){}};\n" + "goog.array.map(arr, function named(){});\n" + "goog.array.map(arr, function(){});\n" + "named_twice = function quax(){};\n" + "recliteral = {l1 : {l2 : function(){}}};\n" + "namedliteral = {n1 : function litnamed(){}};\n" + "namedrecliteral = {n1 : {n2 : function reclitnamed(){}}};\n" + "numliteral = {1 : function(){}};\n" + "recnumliteral = {1 : {a : function(){}}};\n";
    final Map < Integer, String > idNameMap = Maps.newLinkedHashMap();
    int count = 0;
    for(Node f : functionNames.getFunctionNodeList()) {
        int id = functionNames.getFunctionId(f);
        String name = functionNames.getFunctionName(f);
        idNameMap.put(id, name);
        count ++ ;
        
    }
    final Map < Integer, String > expectedMap = Maps.newLinkedHashMap();
    expectedMap.put(0, "goog.widget.member_fn");
    expectedMap.put(1, "goog.widget::local_fn");
    expectedMap.put(2, "goog.widget::<anonymous>");
    expectedMap.put(3, "goog.widget");
    expectedMap.put(4, "foo::bar");
    expectedMap.put(5, "foo");
    expectedMap.put(6, "literal.f1");
    expectedMap.put(7, "literal.f2");
    expectedMap.put(8, "named");
    expectedMap.put(9, "<anonymous>");
    expectedMap.put(10, "quax");
    expectedMap.put(11, "recliteral.l1.l2");
    expectedMap.put(12, "litnamed");
    expectedMap.put(13, "reclitnamed");
    expectedMap.put(14, "numliteral.__2");
    expectedMap.put(15, "recnumliteral.__3.a");
    assertEquals("Function id/name mismatch", expectedMap, idNameMap);
    
}

---
@@@
Split test: com.google.javascript.jscomp.RenamePropertiesTest::testPrototypePropertiesAsObjLitKeys2
file: /root/workbench/exportInfo/d4j_buggy/Closure_157/test//com/google/javascript/jscomp/RenamePropertiesTest.java
Begin: Pos(70, 10)
End: Pos(77, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_157/test//com/google/javascript/jscomp/RenamePropertiesTest.java
Name: testPrototypePropertiesAsObjLitKeys2
Childs: [StatementAssertion<Begin: Pos(71, 5), End: Pos(71, 53)>,
StatementAssertion<Begin: Pos(73, 5), End: Pos(73, 57)>,
StatementAssertion<Begin: Pos(75, 5), End: Pos(76, 48)>,
]
---
public void testPrototypePropertiesAsObjLitKeys2_catena_0() {
    testSame("Bar.prototype = {get 2(){}}; bar[2];");
    
}

---
---
public void testPrototypePropertiesAsObjLitKeys2_catena_1() {
    testSame("Bar.prototype = {get 'a'(){}}; bar['a'];");
    
}

---
---
public void testPrototypePropertiesAsObjLitKeys2_catena_2() {
    test("Bar.prototype = {get getA(){}}; bar.getA;", "Bar.prototype = {get a(){}}; bar.a;");
    
}

---
@@@
Split test: com.google.javascript.jscomp.RenamePropertiesTest::testPrototypePropertiesAsObjLitKeys3
file: /root/workbench/exportInfo/d4j_buggy/Closure_157/test//com/google/javascript/jscomp/RenamePropertiesTest.java
Begin: Pos(79, 10)
End: Pos(86, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_157/test//com/google/javascript/jscomp/RenamePropertiesTest.java
Name: testPrototypePropertiesAsObjLitKeys3
Childs: [StatementAssertion<Begin: Pos(80, 5), End: Pos(80, 54)>,
StatementAssertion<Begin: Pos(82, 5), End: Pos(82, 58)>,
StatementAssertion<Begin: Pos(84, 5), End: Pos(85, 49)>,
]
---
public void testPrototypePropertiesAsObjLitKeys3_catena_0() {
    testSame("Bar.prototype = {set 2(x){}}; bar[2];");
    
}

---
---
public void testPrototypePropertiesAsObjLitKeys3_catena_1() {
    testSame("Bar.prototype = {set 'a'(x){}}; bar['a'];");
    
}

---
---
public void testPrototypePropertiesAsObjLitKeys3_catena_2() {
    test("Bar.prototype = {set getA(x){}}; bar.getA;", "Bar.prototype = {set a(x){}}; bar.a;");
    
}

---
@@@
Split test: com.google.javascript.jscomp.SimpleDefinitionFinderTest::testDefineNumber
file: /root/workbench/exportInfo/d4j_buggy/Closure_157/test//com/google/javascript/jscomp/SimpleDefinitionFinderTest.java
# check: Use pattern matching: .checkDefinitionsInJs
Use pattern matching: .checkDefinitionsInJs
Use pattern matching: .checkDefinitionsInJs
Use pattern matching: .checkDefinitionsInJs
Use pattern matching: .checkDefinitionsInJs
Use pattern matching: .checkDefinitionsInJs
Use pattern matching: .checkDefinitionsInJs
Use pattern matching: .checkDefinitionsInJs
Use pattern matching: .checkDefinitionsInJs
Begin: Pos(50, 10)
End: Pos(92, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_157/test//com/google/javascript/jscomp/SimpleDefinitionFinderTest.java
Name: testDefineNumber
Childs: [StatementAssertion<Begin: Pos(51, 5), End: Pos(53, 49)>,
StatementAssertion<Begin: Pos(55, 5), End: Pos(57, 49)>,
StatementAssertion<Begin: Pos(59, 5), End: Pos(61, 54)>,
StatementAssertion<Begin: Pos(64, 5), End: Pos(66, 35)>,
StatementAssertion<Begin: Pos(68, 5), End: Pos(70, 55)>,
StatementAssertion<Begin: Pos(72, 5), End: Pos(75, 56)>,
StatementAssertion<Begin: Pos(78, 5), End: Pos(80, 60)>,
StatementAssertion<Begin: Pos(82, 5), End: Pos(84, 60)>,
StatementAssertion<Begin: Pos(86, 5), End: Pos(91, 56)>,
]
---
public void testDefineNumber_catena_0()throws Exception {
    checkDefinitionsInJs("var a = 1", ImmutableSet.of("DEF NAME a -> NUMBER"));
    
}

---
---
public void testDefineNumber_catena_1()throws Exception {
    checkDefinitionsInJs("a = 1", ImmutableSet.of("DEF NAME a -> NUMBER"));
    
}

---
---
public void testDefineNumber_catena_2()throws Exception {
    checkDefinitionsInJs("a.b = 1", ImmutableSet.of("DEF GETPROP a.b -> NUMBER"));
    
}

---
---
public void testDefineNumber_catena_3()throws Exception {
    checkDefinitionsInJs("a[\"b\"] = 1", ImmutableSet. < String > of());
    
}

---
---
public void testDefineNumber_catena_4()throws Exception {
    checkDefinitionsInJs("f().b = 1", ImmutableSet.of("DEF GETPROP null -> NUMBER"));
    
}

---
---
public void testDefineNumber_catena_5()throws Exception {
    checkDefinitionsInJs("({a : 1}); o.a", ImmutableSet.of("DEF STRING null -> NUMBER", "USE GETPROP o.a -> [NUMBER]"));
    
}

---
---
public void testDefineNumber_catena_6()throws Exception {
    checkDefinitionsInJs("({'a' : 1}); o['a']", ImmutableSet. < String > of("DEF STRING null -> NUMBER"));
    
}

---
---
public void testDefineNumber_catena_7()throws Exception {
    checkDefinitionsInJs("({1 : 1}); o[1]", ImmutableSet. < String > of("DEF STRING null -> NUMBER"));
    
}

---
---
public void testDefineNumber_catena_8()throws Exception {
    checkDefinitionsInJs("var a = {b : 1}; a.b", ImmutableSet.of("DEF NAME a -> <null>", "DEF STRING null -> NUMBER", "USE NAME a -> [<null>]", "USE GETPROP a.b -> [NUMBER]"));
    
}

---
@@@
Split test: com.google.javascript.jscomp.parsing.IRFactoryTest::testObjectLiteral6
file: /root/workbench/exportInfo/d4j_buggy/Closure_157/test//com/google/javascript/jscomp/parsing/IRFactoryTest.java
# check: Use pattern matching: .testNewParser
Begin: Pos(264, 10)
End: Pos(271, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_157/test//com/google/javascript/jscomp/parsing/IRFactoryTest.java
Name: testObjectLiteral6
Childs: [StatementAssertion<Begin: Pos(265, 5), End: Pos(270, 34)>,
]
@@@
Split test: com.google.javascript.jscomp.parsing.IRFactoryTest::testObjectLiteral7
file: /root/workbench/exportInfo/d4j_buggy/Closure_157/test//com/google/javascript/jscomp/parsing/IRFactoryTest.java
# check: Use pattern matching: .testNewParser
Begin: Pos(273, 10)
End: Pos(285, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_157/test//com/google/javascript/jscomp/parsing/IRFactoryTest.java
Name: testObjectLiteral7
Childs: [StatementAssertion<Begin: Pos(276, 5), End: Pos(284, 39)>,
]
@@@
Split test: com.google.javascript.jscomp.parsing.IRFactoryTest::testObjectLiteral8
file: /root/workbench/exportInfo/d4j_buggy/Closure_157/test//com/google/javascript/jscomp/parsing/IRFactoryTest.java
# check: Use pattern matching: .testNewParser
Begin: Pos(287, 10)
End: Pos(300, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_157/test//com/google/javascript/jscomp/parsing/IRFactoryTest.java
Name: testObjectLiteral8
Childs: [StatementAssertion<Begin: Pos(290, 5), End: Pos(299, 39)>,
]
@@@
Split test: com.google.javascript.jscomp.parsing.ParserTest::testObjectLiteralDoc1
file: /root/workbench/exportInfo/d4j_buggy/Closure_157/test//com/google/javascript/jscomp/parsing/ParserTest.java
Begin: Pos(733, 10)
End: Pos(742, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_157/test//com/google/javascript/jscomp/parsing/ParserTest.java
Name: testObjectLiteralDoc1
Childs: [StatementAssertion<Begin: Pos(737, 5), End: Pos(737, 55)>,
StatementAssertion<Begin: Pos(740, 5), End: Pos(740, 49)>,
StatementAssertion<Begin: Pos(741, 5), End: Pos(741, 41)>,
]
---
public void testObjectLiteralDoc1_catena_0() {
    Node n = parse("var x = {/** @type {number} */ 1: 2};");
    Node objectLit = n.getFirstChild().getFirstChild().getFirstChild();
    assertEquals(Token.OBJECTLIT, objectLit.getType());
    Node number = objectLit.getFirstChild();
    
}

---
---
public void testObjectLiteralDoc1_catena_1() {
    Node n = parse("var x = {/** @type {number} */ 1: 2};");
    Node objectLit = n.getFirstChild().getFirstChild().getFirstChild();
    Node number = objectLit.getFirstChild();
    assertEquals(Token.STRING, number.getType());
    
}

---
---
public void testObjectLiteralDoc1_catena_2() {
    Node n = parse("var x = {/** @type {number} */ 1: 2};");
    Node objectLit = n.getFirstChild().getFirstChild().getFirstChild();
    Node number = objectLit.getFirstChild();
    assertNotNull(number.getJSDocInfo());
    
}

---
--------------------
Run: Closure_68
@@@
Split test: com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testIssue477
file: /root/workbench/exportInfo/d4j_buggy/Closure_68/test//com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java
Begin: Pos(508, 10)
End: Pos(511, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_68/test//com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java
Name: testIssue477
Childs: [StatementAssertion<Begin: Pos(509, 5), End: Pos(510, 50)>,
]
--------------------
Run: Closure_16
@@@
Split test: com.google.javascript.jscomp.IntegrationTest::testIssue772
file: /root/workbench/exportInfo/d4j_buggy/Closure_16/test//com/google/javascript/jscomp/IntegrationTest.java
Begin: Pos(1864, 10)
End: Pos(1886, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_16/test//com/google/javascript/jscomp/IntegrationTest.java
Name: testIssue772
Childs: [StatementAssertion<Begin: Pos(1868, 5), End: Pos(1885, 42)>,
]
@@@
Split test: com.google.javascript.jscomp.ScopedAliasesTest::testIssue772
file: /root/workbench/exportInfo/d4j_buggy/Closure_16/test//com/google/javascript/jscomp/ScopedAliasesTest.java
Begin: Pos(406, 10)
End: Pos(412, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_16/test//com/google/javascript/jscomp/ScopedAliasesTest.java
Name: testIssue772
Childs: [StatementAssertion<Begin: Pos(407, 5), End: Pos(411, 58)>,
]
--------------------
Run: Closure_175
@@@
Split test: com.google.javascript.jscomp.FunctionInjectorTest::testIssue1101a
file: /root/workbench/exportInfo/d4j_buggy/Closure_175/test//com/google/javascript/jscomp/FunctionInjectorTest.java
Begin: Pos(1345, 10)
End: Pos(1349, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_175/test//com/google/javascript/jscomp/FunctionInjectorTest.java
Name: testIssue1101a
Childs: [StatementAssertion<Begin: Pos(1346, 5), End: Pos(1348, 23)>,
]
@@@
Split test: com.google.javascript.jscomp.FunctionInjectorTest::testIssue1101b
file: /root/workbench/exportInfo/d4j_buggy/Closure_175/test//com/google/javascript/jscomp/FunctionInjectorTest.java
Begin: Pos(1351, 10)
End: Pos(1355, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_175/test//com/google/javascript/jscomp/FunctionInjectorTest.java
Name: testIssue1101b
Childs: [StatementAssertion<Begin: Pos(1352, 5), End: Pos(1354, 23)>,
]
@@@
Split test: com.google.javascript.jscomp.InlineFunctionsTest::testCostBasedInlining10
file: /root/workbench/exportInfo/d4j_buggy/Closure_175/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Begin: Pos(1020, 10)
End: Pos(1026, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_175/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Name: testCostBasedInlining10
Childs: [StatementAssertion<Begin: Pos(1023, 5), End: Pos(1025, 58)>,
]
@@@
Split test: com.google.javascript.jscomp.InlineFunctionsTest::testIssue1101
file: /root/workbench/exportInfo/d4j_buggy/Closure_175/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Begin: Pos(2400, 10)
End: Pos(2410, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_175/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Name: testIssue1101
Childs: [StatementAssertion<Begin: Pos(2401, 5), End: Pos(2409, 13)>,
]
@@@
Split test: com.google.javascript.jscomp.InlineFunctionsTest::testInlineMutableArgsReferencedOnce
file: /root/workbench/exportInfo/d4j_buggy/Closure_175/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Begin: Pos(628, 10)
End: Pos(634, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_175/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Name: testInlineMutableArgsReferencedOnce
Childs: [StatementAssertion<Begin: Pos(629, 5), End: Pos(633, 13)>,
]
--------------------
Run: Closure_75
@@@
Split test: com.google.javascript.jscomp.PeepholeFoldConstantsTest::testIEString
file: /root/workbench/exportInfo/d4j_buggy/Closure_75/test//com/google/javascript/jscomp/PeepholeFoldConstantsTest.java
Begin: Pos(991, 10)
End: Pos(993, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_75/test//com/google/javascript/jscomp/PeepholeFoldConstantsTest.java
Name: testIEString
Childs: [StatementAssertion<Begin: Pos(992, 5), End: Pos(992, 25)>,
]
--------------------
Run: Closure_95
@@@
Split test: com.google.javascript.jscomp.TypeCheckTest::testQualifiedNameInference5
file: /root/workbench/exportInfo/d4j_buggy/Closure_95/test//com/google/javascript/jscomp/TypeCheckTest.java
Begin: Pos(4760, 10)
End: Pos(4769, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_95/test//com/google/javascript/jscomp/TypeCheckTest.java
Name: testQualifiedNameInference5
Childs: [StatementAssertion<Begin: Pos(4761, 5), End: Pos(4768, 28)>,
]
@@@
Split test: com.google.javascript.jscomp.TypedScopeCreatorTest::testGlobalQualifiedNameInLocalScope
file: /root/workbench/exportInfo/d4j_buggy/Closure_95/test//com/google/javascript/jscomp/TypedScopeCreatorTest.java
Begin: Pos(775, 10)
End: Pos(785, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_95/test//com/google/javascript/jscomp/TypedScopeCreatorTest.java
Name: testGlobalQualifiedNameInLocalScope
Childs: [StatementAssertion<Begin: Pos(776, 5), End: Pos(780, 42)>,
StatementAssertion<Begin: Pos(781, 5), End: Pos(781, 48)>,
StatementAssertion<Begin: Pos(782, 5), End: Pos(784, 59)>,
]
---
public void testGlobalQualifiedNameInLocalScope_catena_0() {
    testSame("var ns = {}; " + "(function() { " + "    /** @param {number} x */ ns.foo = function(x) {}; })();" + "(function() { ns.foo(3); })();");
    
}

---
---
public void testGlobalQualifiedNameInLocalScope_catena_1() {
    assertNotNull(globalScope.getVar("ns.foo"));
    
}

---
---
public void testGlobalQualifiedNameInLocalScope_catena_2() {
    assertEquals("function (number): undefined", globalScope.getVar("ns.foo").getType().toString());
    
}

---
--------------------
Run: Closure_137
@@@
Split test: com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest::testOnlyInversion3
file: /root/workbench/exportInfo/d4j_buggy/Closure_137/test//com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java
Begin: Pos(280, 10)
End: Pos(301, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_137/test//com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java
Name: testOnlyInversion3
Childs: [StatementAssertion<Begin: Pos(282, 5), End: Pos(300, 13)>,
]
@@@
Split test: com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest::testOnlyInversion4
file: /root/workbench/exportInfo/d4j_buggy/Closure_137/test//com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java
Begin: Pos(303, 10)
End: Pos(318, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_137/test//com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java
Name: testOnlyInversion4
Childs: [StatementAssertion<Begin: Pos(305, 5), End: Pos(317, 13)>,
]
@@@
Split test: com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest::testArguments
file: /root/workbench/exportInfo/d4j_buggy/Closure_137/test//com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java
# check: Use pattern matching: .testSameWithInversion
Use pattern matching: .testSameWithInversion
Begin: Pos(204, 10)
End: Pos(215, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_137/test//com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java
Name: testArguments
Childs: [StatementAssertion<Begin: Pos(210, 5), End: Pos(211, 72)>,
StatementAssertion<Begin: Pos(213, 5), End: Pos(214, 45)>,
]
---
public void testArguments_catena_0() {
    this.useDefaultRenamer = true;
    invert = true;
    testSameWithInversion("function foo(){var arguments;function bar(){var arguments;}}");
    
}

---
---
public void testArguments_catena_1() {
    this.useDefaultRenamer = true;
    invert = true;
    testSameWithInversion("function foo(){var arguments$$1;}");
    
}

---
@@@
Split test: com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest::testMakeLocalNamesUniqueWithContext1
file: /root/workbench/exportInfo/d4j_buggy/Closure_137/test//com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java
Begin: Pos(104, 10)
End: Pos(115, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_137/test//com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java
Name: testMakeLocalNamesUniqueWithContext1
Childs: [StatementAssertion<Begin: Pos(109, 5), End: Pos(111, 56)>,
StatementAssertion<Begin: Pos(112, 5), End: Pos(114, 40)>,
]
---
public void testMakeLocalNamesUniqueWithContext1_catena_0() {
    this.useDefaultRenamer = true;
    invert = true;
    test("var a;function foo(){var a$$inline_1; a = 1}", "var a;function foo(){var a$$inline_1; a = 1}");
    
}

---
---
public void testMakeLocalNamesUniqueWithContext1_catena_1() {
    this.useDefaultRenamer = true;
    invert = true;
    test("var a;function foo(){var a$$inline_1;}", "var a;function foo(){var a;}");
    
}

---
@@@
Split test: com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations2
file: /root/workbench/exportInfo/d4j_buggy/Closure_137/test//com/google/javascript/jscomp/NormalizeTest.java
Begin: Pos(203, 10)
End: Pos(206, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_137/test//com/google/javascript/jscomp/NormalizeTest.java
Name: testRemoveDuplicateVarDeclarations2
Childs: [StatementAssertion<Begin: Pos(204, 5), End: Pos(205, 75)>,
]
--------------------
Run: Closure_19
@@@
Split test: com.google.javascript.jscomp.TypeInferenceTest::testNoThisInference
file: /root/workbench/exportInfo/d4j_buggy/Closure_19/test//com/google/javascript/jscomp/TypeInferenceTest.java
Begin: Pos(1000, 10)
End: Pos(1005, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_19/test//com/google/javascript/jscomp/TypeInferenceTest.java
Name: testNoThisInference
Childs: [StatementAssertion<Begin: Pos(1003, 5), End: Pos(1003, 66)>,
StatementAssertion<Begin: Pos(1004, 5), End: Pos(1004, 61)>,
]
---
public void testNoThisInference_catena_0() {
    JSType thisType = createNullableType(OBJECT_TYPE);
    assumingThisType(thisType);
    inFunction("var out = 3; if (goog.isNull(this)) out = this;");
    
}

---
---
public void testNoThisInference_catena_1() {
    JSType thisType = createNullableType(OBJECT_TYPE);
    assumingThisType(thisType);
    verify("out", createUnionType(OBJECT_TYPE, NUMBER_TYPE));
    
}

---
--------------------
Run: Closure_49
@@@
Split test: com.google.javascript.jscomp.FunctionInjectorTest::testInline19b
file: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/FunctionInjectorTest.java
Begin: Pos(944, 10)
End: Pos(957, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/FunctionInjectorTest.java
Name: testInline19b
Childs: [StatementAssertion<Begin: Pos(945, 5), End: Pos(956, 29)>,
]
@@@
Split test: com.google.javascript.jscomp.FunctionInjectorTest::testInlineIntoLoop
file: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/FunctionInjectorTest.java
Begin: Pos(959, 10)
End: Pos(985, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/FunctionInjectorTest.java
Name: testInlineIntoLoop
Childs: [StatementAssertion<Begin: Pos(960, 5), End: Pos(966, 29)>,
StatementAssertion<Begin: Pos(968, 5), End: Pos(974, 29)>,
StatementAssertion<Begin: Pos(976, 5), End: Pos(984, 29)>,
]
---
public void testInlineIntoLoop_catena_0() {
    helperInlineReferenceToFunction("function foo(a){var b;return a;}; " + "for(;1;){ foo(1); }", "function foo(a){var b;return a;}; " + "for(;1;){ {" + "var b$$inline_1=void 0;1}}", "foo", INLINE_BLOCK);
    
}

---
---
public void testInlineIntoLoop_catena_1() {
    helperInlineReferenceToFunction("function foo(a){var b;return a;}; " + "do{ foo(1); } while(1)", "function foo(a){var b;return a;}; " + "do{ {" + "var b$$inline_1=void 0;1}}while(1)", "foo", INLINE_BLOCK);
    
}

---
---
public void testInlineIntoLoop_catena_2() {
    helperInlineReferenceToFunction("function foo(a){for(var b in c)return a;}; " + "for(;1;){ foo(1); }", "function foo(a){var b;for(b in c)return a;}; " + "for(;1;){ {JSCompiler_inline_label_foo_2:{" + "var b$$inline_1=void 0;for(b$$inline_1 in c){" + "1;break JSCompiler_inline_label_foo_2" + "}}}}", "foo", INLINE_BLOCK);
    
}

---
@@@
Split test: com.google.javascript.jscomp.FunctionInjectorTest::testInline13
file: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/FunctionInjectorTest.java
Begin: Pos(864, 10)
End: Pos(873, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/FunctionInjectorTest.java
Name: testInline13
Childs: [StatementAssertion<Begin: Pos(866, 5), End: Pos(872, 29)>,
]
@@@
Split test: com.google.javascript.jscomp.FunctionInjectorTest::testInline14
file: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/FunctionInjectorTest.java
Begin: Pos(875, 10)
End: Pos(884, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/FunctionInjectorTest.java
Name: testInline14
Childs: [StatementAssertion<Begin: Pos(877, 5), End: Pos(883, 29)>,
]
@@@
Split test: com.google.javascript.jscomp.FunctionInjectorTest::testInline15
file: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/FunctionInjectorTest.java
Begin: Pos(886, 10)
End: Pos(895, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/FunctionInjectorTest.java
Name: testInline15
Childs: [StatementAssertion<Begin: Pos(888, 5), End: Pos(894, 29)>,
]
@@@
Split test: com.google.javascript.jscomp.FunctionInjectorTest::testInline16
file: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/FunctionInjectorTest.java
Begin: Pos(897, 10)
End: Pos(906, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/FunctionInjectorTest.java
Name: testInline16
Childs: [StatementAssertion<Begin: Pos(899, 5), End: Pos(905, 29)>,
]
@@@
Split test: com.google.javascript.jscomp.FunctionInjectorTest::testInline17
file: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/FunctionInjectorTest.java
Begin: Pos(908, 10)
End: Pos(915, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/FunctionInjectorTest.java
Name: testInline17
Childs: [StatementAssertion<Begin: Pos(910, 5), End: Pos(914, 29)>,
]
@@@
Split test: com.google.javascript.jscomp.FunctionInjectorTest::testInline18
file: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/FunctionInjectorTest.java
Begin: Pos(917, 10)
End: Pos(926, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/FunctionInjectorTest.java
Name: testInline18
Childs: [StatementAssertion<Begin: Pos(919, 5), End: Pos(925, 29)>,
]
@@@
Split test: com.google.javascript.jscomp.FunctionInjectorTest::testInline19
file: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/FunctionInjectorTest.java
Begin: Pos(928, 10)
End: Pos(942, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/FunctionInjectorTest.java
Name: testInline19
Childs: [StatementAssertion<Begin: Pos(930, 5), End: Pos(941, 29)>,
]
@@@
Split test: com.google.javascript.jscomp.FunctionInjectorTest::testBug1897706
file: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/FunctionInjectorTest.java
Begin: Pos(1314, 10)
End: Pos(1330, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/FunctionInjectorTest.java
Name: testBug1897706
Childs: [StatementAssertion<Begin: Pos(1315, 5), End: Pos(1318, 29)>,
StatementAssertion<Begin: Pos(1320, 5), End: Pos(1323, 29)>,
StatementAssertion<Begin: Pos(1325, 5), End: Pos(1329, 29)>,
]
---
public void testBug1897706_catena_0() {
    helperInlineReferenceToFunction("function foo(a){}; foo(x())", "function foo(a){}; {var a$$inline_0=x()}", "foo", INLINE_BLOCK);
    
}

---
---
public void testBug1897706_catena_1() {
    helperInlineReferenceToFunction("function foo(a){bar()}; foo(x())", "function foo(a){bar()}; {var a$$inline_0=x();bar()}", "foo", INLINE_BLOCK);
    
}

---
---
public void testBug1897706_catena_2() {
    helperInlineReferenceToFunction("function foo(a,b){bar()}; foo(x(),y())", "function foo(a,b){bar()};" + "{var a$$inline_0=x();var b$$inline_1=y();bar()}", "foo", INLINE_BLOCK);
    
}

---
@@@
Split test: com.google.javascript.jscomp.FunctionInjectorTest::testInlineFunctionWithInnerFunction5
file: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/FunctionInjectorTest.java
Begin: Pos(1023, 10)
End: Pos(1031, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/FunctionInjectorTest.java
Name: testInlineFunctionWithInnerFunction5
Childs: [StatementAssertion<Begin: Pos(1025, 5), End: Pos(1030, 29)>,
]
@@@
Split test: com.google.javascript.jscomp.FunctionToBlockMutatorTest::testMutateWithParameters3
file: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/FunctionToBlockMutatorTest.java
Begin: Pos(110, 10)
End: Pos(117, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/FunctionToBlockMutatorTest.java
Name: testMutateWithParameters3
Childs: [StatementAssertion<Begin: Pos(112, 5), End: Pos(116, 21)>,
]
@@@
Split test: com.google.javascript.jscomp.FunctionToBlockMutatorTest::testMutateCallInLoopVars1
file: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/FunctionToBlockMutatorTest.java
Begin: Pos(148, 10)
End: Pos(162, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/FunctionToBlockMutatorTest.java
Name: testMutateCallInLoopVars1
Childs: [StatementAssertion<Begin: Pos(151, 5), End: Pos(154, 40)>,
StatementAssertion<Begin: Pos(158, 5), End: Pos(161, 40)>,
]
---
public void testMutateCallInLoopVars1_catena_0() {
    boolean callInLoop = false;
    helperMutate("function foo(a){var B = bar(); a;}; foo(1);", "{var B$$inline_1=bar(); 1;}", "foo", null, false, callInLoop);
    callInLoop = true;
    
}

---
---
public void testMutateCallInLoopVars1_catena_1() {
    boolean callInLoop = false;
    callInLoop = true;
    helperMutate("function foo(a){var B = bar(); a;}; foo(1);", "{var B$$inline_1 = bar(); 1;}", "foo", null, false, callInLoop);
    
}

---
@@@
Split test: com.google.javascript.jscomp.FunctionToBlockMutatorTest::testMutateInitializeUninitializedVars1
file: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/FunctionToBlockMutatorTest.java
Begin: Pos(128, 10)
End: Pos(133, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/FunctionToBlockMutatorTest.java
Name: testMutateInitializeUninitializedVars1
Childs: [StatementAssertion<Begin: Pos(129, 5), End: Pos(132, 34)>,
]
@@@
Split test: com.google.javascript.jscomp.FunctionToBlockMutatorTest::testMutateInitializeUninitializedVars2
file: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/FunctionToBlockMutatorTest.java
Begin: Pos(135, 10)
End: Pos(146, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/FunctionToBlockMutatorTest.java
Name: testMutateInitializeUninitializedVars2
Childs: [StatementAssertion<Begin: Pos(136, 5), End: Pos(145, 21)>,
]
@@@
Split test: com.google.javascript.jscomp.FunctionToBlockMutatorTest::testMutateFunctionDefinition
file: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/FunctionToBlockMutatorTest.java
Begin: Pos(164, 10)
End: Pos(171, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/FunctionToBlockMutatorTest.java
Name: testMutateFunctionDefinition
Childs: [StatementAssertion<Begin: Pos(167, 6), End: Pos(170, 21)>,
]
@@@
Split test: com.google.javascript.jscomp.FunctionToBlockMutatorTest::testMutate8
file: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/FunctionToBlockMutatorTest.java
Begin: Pos(119, 10)
End: Pos(126, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/FunctionToBlockMutatorTest.java
Name: testMutate8
Childs: [StatementAssertion<Begin: Pos(121, 5), End: Pos(125, 21)>,
]
@@@
Split test: com.google.javascript.jscomp.InlineFunctionsTest::testLoopWithFunctionWithFunction
file: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Begin: Pos(2199, 10)
End: Pos(2232, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Name: testLoopWithFunctionWithFunction
Childs: [StatementAssertion<Begin: Pos(2201, 5), End: Pos(2231, 13)>,
]
@@@
Split test: com.google.javascript.jscomp.InlineFunctionsTest::testShadowVariables16
file: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Begin: Pos(842, 10)
End: Pos(861, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Name: testShadowVariables16
Childs: [StatementAssertion<Begin: Pos(845, 5), End: Pos(850, 11)>,
StatementAssertion<Begin: Pos(854, 5), End: Pos(859, 11)>,
]
---
public void testShadowVariables16_catena_0() {
    assumeMinimumCapture = false;
    test("var a=3;" + "function foo(){return a}" + "(function(){var a=5;(function(){foo()})()})()", "var a=3;" + "{var a$$inline_0=5;{a}}");
    assumeMinimumCapture = true;
    
}

---
---
public void testShadowVariables16_catena_1() {
    assumeMinimumCapture = false;
    assumeMinimumCapture = true;
    test("var a=3;" + "function foo(){return a}" + "(function(){var a=5;(function(){foo()})()})()", "var a=3;" + "{var a$$inline_1=5;{a}}");
    
}

---
@@@
Split test: com.google.javascript.jscomp.InlineFunctionsTest::testShadowVariables18
file: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Begin: Pos(873, 10)
End: Pos(882, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Name: testShadowVariables18
Childs: [StatementAssertion<Begin: Pos(874, 5), End: Pos(881, 38)>,
]
@@@
Split test: com.google.javascript.jscomp.InlineFunctionsTest::testCostBasedInlining11
file: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Begin: Pos(994, 10)
End: Pos(1001, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Name: testCostBasedInlining11
Childs: [StatementAssertion<Begin: Pos(996, 5), End: Pos(1000, 39)>,
]
@@@
Split test: com.google.javascript.jscomp.InlineFunctionsTest::testMixedModeInliningCosting3
file: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Begin: Pos(527, 10)
End: Pos(537, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Name: testMixedModeInliningCosting3
Childs: [StatementAssertion<Begin: Pos(529, 5), End: Pos(536, 41)>,
]
@@@
Split test: com.google.javascript.jscomp.InlineFunctionsTest::testInlineNeverMutateConstants
file: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Begin: Pos(616, 10)
End: Pos(620, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Name: testInlineNeverMutateConstants
Childs: [StatementAssertion<Begin: Pos(617, 5), End: Pos(619, 27)>,
]
@@@
Split test: com.google.javascript.jscomp.InlineFunctionsTest::testInlineWithThis7
file: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Begin: Pos(1892, 10)
End: Pos(1899, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Name: testInlineWithThis7
Childs: [StatementAssertion<Begin: Pos(1895, 5), End: Pos(1896, 61)>,
StatementAssertion<Begin: Pos(1897, 5), End: Pos(1898, 51)>,
]
---
public void testInlineWithThis7_catena_0() {
    assumeStrictThis = true;
    test("function f(a){a=1;this} f.call();", "{var a$$inline_0=void 0; a$$inline_0=1; void 0;}");
    
}

---
---
public void testInlineWithThis7_catena_1() {
    assumeStrictThis = true;
    test("function f(a){a=1;this} f.call(x, x);", "{var a$$inline_0=x; a$$inline_0=1; x;}");
    
}

---
@@@
Split test: com.google.javascript.jscomp.InlineFunctionsTest::testAnonymous1
file: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Begin: Pos(2167, 10)
End: Pos(2179, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Name: testAnonymous1
Childs: [StatementAssertion<Begin: Pos(2169, 5), End: Pos(2172, 47)>,
StatementAssertion<Begin: Pos(2175, 5), End: Pos(2178, 46)>,
]
---
public void testAnonymous1_catena_0() {
    assumeMinimumCapture = false;
    test("(function(){var a=10;(function(){var b=a;a++;alert(b)})()})();", "{var a$$inline_0=10;" + "{var b$$inline_1=a$$inline_0;" + "a$$inline_0++;alert(b$$inline_1)}}");
    assumeMinimumCapture = true;
    
}

---
---
public void testAnonymous1_catena_1() {
    assumeMinimumCapture = false;
    assumeMinimumCapture = true;
    test("(function(){var a=10;(function(){var b=a;a++;alert(b)})()})();", "{var a$$inline_2=10;" + "{var b$$inline_0=a$$inline_2;" + "a$$inline_2++;alert(b$$inline_0)}}");
    
}

---
@@@
Split test: com.google.javascript.jscomp.InlineFunctionsTest::testAnonymous3
file: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Begin: Pos(2185, 10)
End: Pos(2196, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Name: testAnonymous3
Childs: [StatementAssertion<Begin: Pos(2188, 5), End: Pos(2188, 69)>,
StatementAssertion<Begin: Pos(2191, 5), End: Pos(2192, 61)>,
StatementAssertion<Begin: Pos(2194, 5), End: Pos(2195, 40)>,
]
---
public void testAnonymous3_catena_0() {
    assumeMinimumCapture = false;
    testSame("(function(){var a=10;(function(){arguments;})()})();");
    assumeMinimumCapture = true;
    
}

---
---
public void testAnonymous3_catena_1() {
    assumeMinimumCapture = false;
    assumeMinimumCapture = true;
    test("(function(){var a=10;(function(){arguments;})()})();", "{var a$$inline_0=10;(function(){arguments;})();}");
    
}

---
---
public void testAnonymous3_catena_2() {
    assumeMinimumCapture = false;
    assumeMinimumCapture = true;
    test("(function(){(function(){arguments;})()})();", "{(function(){arguments;})()}");
    
}

---
@@@
Split test: com.google.javascript.jscomp.InlineFunctionsTest::testShadowVariables1
file: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Begin: Pos(676, 10)
End: Pos(689, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Name: testShadowVariables1
Childs: [StatementAssertion<Begin: Pos(682, 5), End: Pos(688, 34)>,
]
@@@
Split test: com.google.javascript.jscomp.InlineFunctionsTest::testShadowVariables3
file: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Begin: Pos(704, 10)
End: Pos(713, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Name: testShadowVariables3
Childs: [StatementAssertion<Begin: Pos(706, 5), End: Pos(712, 29)>,
]
@@@
Split test: com.google.javascript.jscomp.InlineFunctionsTest::testShadowVariables6
file: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Begin: Pos(736, 10)
End: Pos(744, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Name: testShadowVariables6
Childs: [StatementAssertion<Begin: Pos(737, 5), End: Pos(743, 32)>,
]
@@@
Split test: com.google.javascript.jscomp.InlineFunctionsTest::testShadowVariables7
file: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Begin: Pos(746, 10)
End: Pos(762, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Name: testShadowVariables7
Childs: [StatementAssertion<Begin: Pos(748, 5), End: Pos(753, 11)>,
StatementAssertion<Begin: Pos(756, 5), End: Pos(761, 11)>,
]
---
public void testShadowVariables7_catena_0() {
    assumeMinimumCapture = false;
    test("var a=3;" + "function foo(){return a}" + "(function(){var a=5;(function(){foo()})()})()", "var a=3;" + "{var a$$inline_0=5;{a}}");
    assumeMinimumCapture = true;
    
}

---
---
public void testShadowVariables7_catena_1() {
    assumeMinimumCapture = false;
    assumeMinimumCapture = true;
    test("var a=3;" + "function foo(){return a}" + "(function(){var a=5;(function(){foo()})()})()", "var a=3;" + "{var a$$inline_1=5;{a}}");
    
}

---
@@@
Split test: com.google.javascript.jscomp.InlineFunctionsTest::testFunctionExpressionCallInlining11b
file: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Begin: Pos(1676, 10)
End: Pos(1690, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Name: testFunctionExpressionCallInlining11b
Childs: [StatementAssertion<Begin: Pos(1679, 5), End: Pos(1679, 69)>,
StatementAssertion<Begin: Pos(1682, 5), End: Pos(1688, 41)>,
]
---
public void testFunctionExpressionCallInlining11b_catena_0() {
    assumeMinimumCapture = false;
    testSame("((function(){var a; return function(){foo()}})())();");
    assumeMinimumCapture = true;
    
}

---
---
public void testFunctionExpressionCallInlining11b_catena_1() {
    assumeMinimumCapture = false;
    assumeMinimumCapture = true;
    test("((function(){var a; return function(){foo()}})())();", "{var JSCompiler_inline_result$$0;" + "var a$$inline_1;" + "JSCompiler_inline_result$$0=function(){foo()};}" + "JSCompiler_inline_result$$0()");
    
}

---
@@@
Split test: com.google.javascript.jscomp.InlineFunctionsTest::testComplexInlineNoResultNoParamCall3
file: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Begin: Pos(1206, 10)
End: Pos(1215, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Name: testComplexInlineNoResultNoParamCall3
Childs: [StatementAssertion<Begin: Pos(1212, 5), End: Pos(1213, 59)>,
]
@@@
Split test: com.google.javascript.jscomp.InlineFunctionsTest::testCostBasedInlining9
file: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Begin: Pos(973, 10)
End: Pos(982, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Name: testCostBasedInlining9
Childs: [StatementAssertion<Begin: Pos(977, 5), End: Pos(981, 41)>,
]
@@@
Split test: com.google.javascript.jscomp.InlineFunctionsTest::testMethodWithFunctionWithFunction
file: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Begin: Pos(2234, 10)
End: Pos(2258, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Name: testMethodWithFunctionWithFunction
Childs: [StatementAssertion<Begin: Pos(2236, 5), End: Pos(2257, 13)>,
]
@@@
Split test: com.google.javascript.jscomp.InlineFunctionsTest::testFunctionExpressionYCombinator
file: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Begin: Pos(1902, 10)
End: Pos(1971, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Name: testFunctionExpressionYCombinator
Childs: [StatementAssertion<Begin: Pos(1904, 5), End: Pos(1926, 26)>,
StatementAssertion<Begin: Pos(1929, 5), End: Pos(1970, 24)>,
]
---
public void testFunctionExpressionYCombinator_catena_0() {
    assumeMinimumCapture = false;
    testSame("var factorial = ((function(M) {\n" + "      return ((function(f) {\n" + "                 return M(function(arg) {\n" + "                            return (f(f))(arg);\n" + "                            })\n" + "               })\n" + "              (function(f) {\n" + "                 return M(function(arg) {\n" + "                            return (f(f))(arg);\n" + "                           })\n" + "                 }));\n" + "     })\n" + "    (function(f) {\n" + "       return function(n) {\n" + "        if (n === 0)\n" + "          return 1;\n" + "        else\n" + "          return n * f(n - 1);\n" + "       };\n" + "     }));\n" + "\n" + "factorial(5)\n");
    assumeMinimumCapture = true;
    
}

---
---
public void testFunctionExpressionYCombinator_catena_1() {
    assumeMinimumCapture = false;
    assumeMinimumCapture = true;
    test("var factorial = ((function(M) {\n" + "      return ((function(f) {\n" + "                 return M(function(arg) {\n" + "                            return (f(f))(arg);\n" + "                            })\n" + "               })\n" + "              (function(f) {\n" + "                 return M(function(arg) {\n" + "                            return (f(f))(arg);\n" + "                           })\n" + "                 }));\n" + "     })\n" + "    (function(f) {\n" + "       return function(n) {\n" + "        if (n === 0)\n" + "          return 1;\n" + "        else\n" + "          return n * f(n - 1);\n" + "       };\n" + "     }));\n" + "\n" + "factorial(5)\n", "var factorial;\n" + "{\n" + "var M$$inline_4 = function(f$$2) {\n" + "  return function(n){if(n===0)return 1;else return n*f$$2(n-1)}\n" + "};\n" + "{\n" + "var f$$inline_0=function(f$$inline_7){\n" + "  return M$$inline_4(\n" + "    function(arg$$inline_8){\n" + "      return f$$inline_7(f$$inline_7)(arg$$inline_8)\n" + "     })\n" + "};\n" + "factorial=M$$inline_4(\n" + "  function(arg$$inline_1){\n" + "    return f$$inline_0(f$$inline_0)(arg$$inline_1)\n" + "});\n" + "}\n" + "}" + "factorial(5)");
    
}

---
@@@
Split test: com.google.javascript.jscomp.InlineFunctionsTest::testComplexInlineVars7
file: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Begin: Pos(1318, 10)
End: Pos(1326, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Name: testComplexInlineVars7
Childs: [StatementAssertion<Begin: Pos(1319, 5), End: Pos(1325, 64)>,
]
@@@
Split test: com.google.javascript.jscomp.InlineFunctionsTest::testComplexFunctionWithFunctionDefinition2a
file: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Begin: Pos(1516, 10)
End: Pos(1528, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Name: testComplexFunctionWithFunctionDefinition2a
Childs: [StatementAssertion<Begin: Pos(1520, 5), End: Pos(1521, 67)>,
StatementAssertion<Begin: Pos(1525, 5), End: Pos(1527, 76)>,
]
---
public void testComplexFunctionWithFunctionDefinition2a_catena_0() {
    assumeMinimumCapture = false;
    testSame("(function(){" + "var f = function(a){call(function(){return a})};f()})()");
    assumeMinimumCapture = true;
    
}

---
---
public void testComplexFunctionWithFunctionDefinition2a_catena_1() {
    assumeMinimumCapture = false;
    assumeMinimumCapture = true;
    test("(function(){" + "var f = function(a){call(function(){return a})};f()})()", "{{var a$$inline_0=void 0;call(function(){return a$$inline_0})}}");
    
}

---
@@@
Split test: com.google.javascript.jscomp.InlineFunctionsTest::testComplexInline7
file: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Begin: Pos(1268, 10)
End: Pos(1274, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Name: testComplexInline7
Childs: [StatementAssertion<Begin: Pos(1269, 5), End: Pos(1273, 57)>,
]
@@@
Split test: com.google.javascript.jscomp.InlineFunctionsTest::testFunctionExpressionOmega
file: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Begin: Pos(1756, 10)
End: Pos(1761, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Name: testFunctionExpressionOmega
Childs: [StatementAssertion<Begin: Pos(1758, 5), End: Pos(1760, 43)>,
]
@@@
Split test: com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions15b
file: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Begin: Pos(233, 10)
End: Pos(258, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Name: testInlineFunctions15b
Childs: [StatementAssertion<Begin: Pos(237, 5), End: Pos(242, 26)>,
StatementAssertion<Begin: Pos(246, 5), End: Pos(257, 73)>,
]
---
public void testInlineFunctions15b_catena_0() {
    assumeMinimumCapture = false;
    test("function foo(){var x;return function(a){return a+1}}" + "var b=function(){return c};" + "var d=b()+foo()", "function foo(){var x;return function(a){return a+1}}" + "var d=c+foo()");
    assumeMinimumCapture = true;
    
}

---
---
public void testInlineFunctions15b_catena_1() {
    assumeMinimumCapture = false;
    assumeMinimumCapture = true;
    test("function foo(){var x;return function(a){return a+1}}" + "var b=function(){return c};" + "var d=b()+foo()", "var JSCompiler_temp_const$$0 = c;\n" + "{\n" + "var JSCompiler_inline_result$$1;\n" + "var x$$inline_2;\n" + "JSCompiler_inline_result$$1 = " + "    function(a$$inline_3){ return a$$inline_3+1 };\n" + "}" + "var d=JSCompiler_temp_const$$0 + JSCompiler_inline_result$$1");
    
}

---
@@@
Split test: com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions15d
file: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Begin: Pos(282, 10)
End: Pos(310, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Name: testInlineFunctions15d
Childs: [StatementAssertion<Begin: Pos(286, 5), End: Pos(291, 43)>,
StatementAssertion<Begin: Pos(296, 5), End: Pos(309, 14)>,
]
---
public void testInlineFunctions15d_catena_0() {
    assumeMinimumCapture = false;
    test("function foo(){var x; return function(a){return a+1}}" + "var b=function(){return c};" + "function _x(){ var d=b()+foo() }", "function foo(){var x; return function(a){return a+1}}" + "function _x(){ var d=c+foo() }");
    assumeMinimumCapture = true;
    
}

---
---
public void testInlineFunctions15d_catena_1() {
    assumeMinimumCapture = false;
    assumeMinimumCapture = true;
    test("function foo(){var x; return function(a){return a+1}}" + "var b=function(){return c};" + "function _x(){ var d=b()+foo() }", "function _x() { \n" + "  var JSCompiler_temp_const$$0 = c;\n" + "  {\n" + "  var JSCompiler_inline_result$$1;\n" + "  var x$$inline_2;\n" + "  JSCompiler_inline_result$$1 = " + "      function(a$$inline_3) {return a$$inline_3+1};\n" + "  }\n" + "  var d = JSCompiler_temp_const$$0+JSCompiler_inline_result$$1\n" + "}");
    
}

---
@@@
Split test: com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions16a
file: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Begin: Pos(312, 10)
End: Pos(325, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Name: testInlineFunctions16a
Childs: [StatementAssertion<Begin: Pos(315, 5), End: Pos(316, 25)>,
StatementAssertion<Begin: Pos(320, 5), End: Pos(324, 53)>,
]
---
public void testInlineFunctions16a_catena_0() {
    assumeMinimumCapture = false;
    testSame("function foo(b){return window.bar(function(){c(b)})}" + "var d=foo(e)");
    assumeMinimumCapture = true;
    
}

---
---
public void testInlineFunctions16a_catena_1() {
    assumeMinimumCapture = false;
    assumeMinimumCapture = true;
    test("function foo(b){return window.bar(function(){c(b)})}" + "var d=foo(e)", "var d;{var b$$inline_0=e;" + "d=window.bar(function(){c(b$$inline_0)})}");
    
}

---
@@@
Split test: com.google.javascript.jscomp.InlineFunctionsTest::testBug4944818
file: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Begin: Pos(2076, 10)
End: Pos(2111, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Name: testBug4944818
Childs: [StatementAssertion<Begin: Pos(2077, 5), End: Pos(2110, 13)>,
]
@@@
Split test: com.google.javascript.jscomp.InlineFunctionsTest::testComplexSample
file: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Begin: Pos(1391, 10)
End: Pos(1439, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Name: testComplexSample
Childs: [StatementAssertion<Begin: Pos(1418, 5), End: Pos(1438, 13)>,
]
@@@
Split test: com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified1
file: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Begin: Pos(547, 10)
End: Pos(552, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Name: testNoInlineIfParametersModified1
Childs: [StatementAssertion<Begin: Pos(549, 5), End: Pos(551, 27)>,
]
@@@
Split test: com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified2
file: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Begin: Pos(554, 10)
End: Pos(558, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Name: testNoInlineIfParametersModified2
Childs: [StatementAssertion<Begin: Pos(555, 5), End: Pos(557, 27)>,
]
@@@
Split test: com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified3
file: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Begin: Pos(560, 10)
End: Pos(565, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Name: testNoInlineIfParametersModified3
Childs: [StatementAssertion<Begin: Pos(562, 5), End: Pos(564, 28)>,
]
@@@
Split test: com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified4
file: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Begin: Pos(567, 10)
End: Pos(573, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Name: testNoInlineIfParametersModified4
Childs: [StatementAssertion<Begin: Pos(569, 5), End: Pos(572, 30)>,
]
@@@
Split test: com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified5
file: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Begin: Pos(575, 10)
End: Pos(580, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Name: testNoInlineIfParametersModified5
Childs: [StatementAssertion<Begin: Pos(577, 5), End: Pos(579, 30)>,
]
@@@
Split test: com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified6
file: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Begin: Pos(582, 10)
End: Pos(586, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Name: testNoInlineIfParametersModified6
Childs: [StatementAssertion<Begin: Pos(583, 5), End: Pos(585, 30)>,
]
@@@
Split test: com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineIfParametersModified7
file: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Begin: Pos(588, 10)
End: Pos(594, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Name: testNoInlineIfParametersModified7
Childs: [StatementAssertion<Begin: Pos(590, 5), End: Pos(593, 27)>,
]
@@@
Split test: com.google.javascript.jscomp.InlineFunctionsTest::testIssue423
file: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Begin: Pos(2113, 10)
End: Pos(2165, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Name: testIssue423
Childs: [StatementAssertion<Begin: Pos(2115, 5), End: Pos(2139, 22)>,
StatementAssertion<Begin: Pos(2142, 5), End: Pos(2164, 13)>,
]
---
public void testIssue423_catena_0() {
    assumeMinimumCapture = false;
    test("(function($) {\n" + "  $.fn.multicheck = function(options) {\n" + "    initialize.call(this, options);\n" + "  };\n" + "\n" + "  function initialize(options) {\n" + "    options.checkboxes = $(this).siblings(':checkbox');\n" + "    preload_check_all.call(this);\n" + "  }\n" + "\n" + "  function preload_check_all() {\n" + "    $(this).data('checkboxes');\n" + "  }\n" + "})(jQuery)", "(function($){" + "  $.fn.multicheck=function(options$$1){" + "    {" + "     options$$1.checkboxes=$(this).siblings(\":checkbox\");" + "     {" + "       $(this).data(\"checkboxes\")" + "     }" + "    }" + "  }" + "})(jQuery)");
    assumeMinimumCapture = true;
    
}

---
---
public void testIssue423_catena_1() {
    assumeMinimumCapture = false;
    assumeMinimumCapture = true;
    test("(function($) {\n" + "  $.fn.multicheck = function(options) {\n" + "    initialize.call(this, options);\n" + "  };\n" + "\n" + "  function initialize(options) {\n" + "    options.checkboxes = $(this).siblings(':checkbox');\n" + "    preload_check_all.call(this);\n" + "  }\n" + "\n" + "  function preload_check_all() {\n" + "    $(this).data('checkboxes');\n" + "  }\n" + "})(jQuery)", "{var $$$inline_0=jQuery;\n" + "$$$inline_0.fn.multicheck=function(options$$inline_4){\n" + "  {options$$inline_4.checkboxes=" + "$$$inline_0(this).siblings(\":checkbox\");\n" + "  {$$$inline_0(this).data(\"checkboxes\")}" + "  }\n" + "}\n" + "}");
    
}

---
@@@
Split test: com.google.javascript.jscomp.InlineFunctionsTest::testComplexFunctionWithFunctionDefinition2
file: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Begin: Pos(1503, 10)
End: Pos(1514, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Name: testComplexFunctionWithFunctionDefinition2
Childs: [StatementAssertion<Begin: Pos(1507, 5), End: Pos(1507, 59)>,
StatementAssertion<Begin: Pos(1511, 5), End: Pos(1513, 76)>,
]
---
public void testComplexFunctionWithFunctionDefinition2_catena_0() {
    assumeMinimumCapture = false;
    testSame("function f(a){call(function(){return})}f()");
    assumeMinimumCapture = true;
    
}

---
---
public void testComplexFunctionWithFunctionDefinition2_catena_1() {
    assumeMinimumCapture = false;
    assumeMinimumCapture = true;
    test("(function(){" + "var f = function(a){call(function(){return a})};f()})()", "{{var a$$inline_0=void 0;call(function(){return a$$inline_0})}}");
    
}

---
@@@
Split test: com.google.javascript.jscomp.InlineFunctionsTest::testComplexFunctionWithFunctionDefinition3
file: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Begin: Pos(1530, 10)
End: Pos(1541, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Name: testComplexFunctionWithFunctionDefinition3
Childs: [StatementAssertion<Begin: Pos(1534, 5), End: Pos(1534, 67)>,
StatementAssertion<Begin: Pos(1538, 5), End: Pos(1539, 67)>,
]
---
public void testComplexFunctionWithFunctionDefinition3_catena_0() {
    assumeMinimumCapture = false;
    testSame("function f(){var a; call(function(){return a})}f()");
    assumeMinimumCapture = true;
    
}

---
---
public void testComplexFunctionWithFunctionDefinition3_catena_1() {
    assumeMinimumCapture = false;
    assumeMinimumCapture = true;
    test("function f(){var a; call(function(){return a})}f()", "{var a$$inline_0;call(function(){return a$$inline_0})}");
    
}

---
@@@
Split test: com.google.javascript.jscomp.InlineFunctionsTest::testDecomposeFunctionExpressionInCall
file: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Begin: Pos(1552, 10)
End: Pos(1573, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Name: testDecomposeFunctionExpressionInCall
Childs: [StatementAssertion<Begin: Pos(1553, 5), End: Pos(1572, 10)>,
]
@@@
Split test: com.google.javascript.jscomp.InlineFunctionsTest::testInlineNeverOverrideNewValues
file: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Begin: Pos(622, 10)
End: Pos(626, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Name: testInlineNeverOverrideNewValues
Childs: [StatementAssertion<Begin: Pos(623, 5), End: Pos(625, 40)>,
]
@@@
Split test: com.google.javascript.jscomp.InlineFunctionsTest::testInlineBlockMutableArgs1
file: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Begin: Pos(652, 10)
End: Pos(656, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Name: testInlineBlockMutableArgs1
Childs: [StatementAssertion<Begin: Pos(653, 5), End: Pos(655, 37)>,
]
@@@
Split test: com.google.javascript.jscomp.InlineFunctionsTest::testInlineBlockMutableArgs2
file: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Begin: Pos(658, 10)
End: Pos(662, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Name: testInlineBlockMutableArgs2
Childs: [StatementAssertion<Begin: Pos(659, 5), End: Pos(661, 37)>,
]
@@@
Split test: com.google.javascript.jscomp.InlineFunctionsTest::testInlineBlockMutableArgs3
file: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Begin: Pos(664, 10)
End: Pos(668, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Name: testInlineBlockMutableArgs3
Childs: [StatementAssertion<Begin: Pos(665, 5), End: Pos(667, 37)>,
]
@@@
Split test: com.google.javascript.jscomp.InlineFunctionsTest::testInlineBlockMutableArgs4
file: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Begin: Pos(670, 10)
End: Pos(674, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Name: testInlineBlockMutableArgs4
Childs: [StatementAssertion<Begin: Pos(671, 5), End: Pos(673, 37)>,
]
@@@
Split test: com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions10
file: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Begin: Pos(182, 10)
End: Pos(190, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Name: testInlineFunctions10
Childs: [StatementAssertion<Begin: Pos(183, 5), End: Pos(189, 29)>,
]
@@@
Split test: com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions13
file: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Begin: Pos(208, 10)
End: Pos(213, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Name: testInlineFunctions13
Childs: [StatementAssertion<Begin: Pos(210, 5), End: Pos(212, 54)>,
]
@@@
Split test: com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions22
file: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Begin: Pos(373, 10)
End: Pos(385, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Name: testInlineFunctions22
Childs: [StatementAssertion<Begin: Pos(375, 5), End: Pos(384, 64)>,
]
@@@
Split test: com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions23
file: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Begin: Pos(387, 10)
End: Pos(400, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Name: testInlineFunctions23
Childs: [StatementAssertion<Begin: Pos(389, 5), End: Pos(399, 24)>,
]
@@@
Split test: com.google.javascript.jscomp.InlineFunctionsTest::testInlineFunctions9
file: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Begin: Pos(174, 10)
End: Pos(180, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
Name: testInlineFunctions9
Childs: [StatementAssertion<Begin: Pos(176, 5), End: Pos(179, 29)>,
]
@@@
Split test: com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest::testMakeLocalNamesUniqueWithContext5
file: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java
Begin: Pos(208, 10)
End: Pos(231, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java
Name: testMakeLocalNamesUniqueWithContext5
Childs: [StatementAssertion<Begin: Pos(212, 5), End: Pos(214, 44)>,
StatementAssertion<Begin: Pos(215, 5), End: Pos(217, 38)>,
StatementAssertion<Begin: Pos(218, 5), End: Pos(220, 48)>,
StatementAssertion<Begin: Pos(222, 5), End: Pos(224, 53)>,
StatementAssertion<Begin: Pos(225, 5), End: Pos(227, 47)>,
StatementAssertion<Begin: Pos(228, 5), End: Pos(230, 57)>,
]
---
public void testMakeLocalNamesUniqueWithContext5_catena_0() {
    this.useDefaultRenamer = true;
    testWithInversion("function f(){var f; f = 1}", "function f(){var f$$1; f$$1 = 1}");
    
}

---
---
public void testMakeLocalNamesUniqueWithContext5_catena_1() {
    this.useDefaultRenamer = true;
    testWithInversion("function f(f){f = 1}", "function f(f$$1){f$$1 = 1}");
    
}

---
---
public void testMakeLocalNamesUniqueWithContext5_catena_2() {
    this.useDefaultRenamer = true;
    testWithInversion("function f(f){var f; f = 1}", "function f(f$$1){var f$$1; f$$1 = 1}");
    
}

---
---
public void testMakeLocalNamesUniqueWithContext5_catena_3() {
    this.useDefaultRenamer = true;
    test("var fn = function f(){var f; f = 1}", "var fn = function f(){var f$$1; f$$1 = 1}");
    
}

---
---
public void testMakeLocalNamesUniqueWithContext5_catena_4() {
    this.useDefaultRenamer = true;
    test("var fn = function f(f){f = 1}", "var fn = function f(f$$1){f$$1 = 1}");
    
}

---
---
public void testMakeLocalNamesUniqueWithContext5_catena_5() {
    this.useDefaultRenamer = true;
    test("var fn = function f(f){var f; f = 1}", "var fn = function f(f$$1){var f$$1; f$$1 = 1}");
    
}

---
--------------------
Run: Closure_101
@@@
Split test: com.google.javascript.jscomp.CommandLineRunnerTest::testProcessClosurePrimitives
file: /root/workbench/exportInfo/d4j_buggy/Closure_101/test//com/google/javascript/jscomp/CommandLineRunnerTest.java
Begin: Pos(154, 10)
End: Pos(159, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_101/test//com/google/javascript/jscomp/CommandLineRunnerTest.java
Name: testProcessClosurePrimitives
Childs: [StatementAssertion<Begin: Pos(155, 5), End: Pos(156, 42)>,
StatementAssertion<Begin: Pos(158, 5), End: Pos(158, 57)>,
]
---
public void testProcessClosurePrimitives_catena_0() {
    test("var goog = {}; goog.provide('goog.dom');", "var goog = {}; goog.dom = {};");
    args.add("--process_closure_primitives=false");
    
}

---
---
public void testProcessClosurePrimitives_catena_1() {
    args.add("--process_closure_primitives=false");
    testSame("var goog = {}; goog.provide('goog.dom');");
    
}

---
--------------------
Run: Closure_26
@@@
Split test: com.google.javascript.jscomp.CommandLineRunnerTest::testTransformAMDAndProcessCJS
file: /root/workbench/exportInfo/d4j_buggy/Closure_26/test//com/google/javascript/jscomp/CommandLineRunnerTest.java
Begin: Pos(1052, 10)
End: Pos(1059, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_26/test//com/google/javascript/jscomp/CommandLineRunnerTest.java
Name: testTransformAMDAndProcessCJS
Childs: [StatementAssertion<Begin: Pos(1057, 5), End: Pos(1058, 58)>,
]
@@@
Split test: com.google.javascript.jscomp.CommandLineRunnerTest::testProcessCJS
file: /root/workbench/exportInfo/d4j_buggy/Closure_26/test//com/google/javascript/jscomp/CommandLineRunnerTest.java
Begin: Pos(1044, 10)
End: Pos(1050, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_26/test//com/google/javascript/jscomp/CommandLineRunnerTest.java
Name: testProcessCJS
Childs: [StatementAssertion<Begin: Pos(1048, 5), End: Pos(1049, 40)>,
]
@@@
Split test: com.google.javascript.jscomp.ProcessCommonJSModulesTest::testExports
file: /root/workbench/exportInfo/d4j_buggy/Closure_26/test//com/google/javascript/jscomp/ProcessCommonJSModulesTest.java
Begin: Pos(58, 10)
End: Pos(78, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_26/test//com/google/javascript/jscomp/ProcessCommonJSModulesTest.java
Name: testExports
Childs: [StatementAssertion<Begin: Pos(60, 5), End: Pos(67, 32)>,
StatementAssertion<Begin: Pos(68, 5), End: Pos(77, 50)>,
]
---
public void testExports_catena_0() {
    setFilename("test");
    test("var name = require('name');" + "exports.foo = 1;", "goog.provide('module$test');" + "var module$test = {};" + "goog.require('module$name');" + "var name$$module$test = module$name;" + "module$test.foo = 1;");
    
}

---
---
public void testExports_catena_1() {
    setFilename("test");
    test("var name = require('name');" + "module.exports = function() {};", "goog.provide('module$test');" + "var module$test = {};" + "goog.require('module$name');" + "var name$$module$test = module$name;" + "module$test.module$exports = function() {};" + "if(module$test.module$exports)" + "module$test=module$test.module$exports");
    
}

---
@@@
Split test: com.google.javascript.jscomp.ProcessCommonJSModulesTest::testModuleName
file: /root/workbench/exportInfo/d4j_buggy/Closure_26/test//com/google/javascript/jscomp/ProcessCommonJSModulesTest.java
Begin: Pos(102, 10)
End: Pos(126, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_26/test//com/google/javascript/jscomp/ProcessCommonJSModulesTest.java
Name: testModuleName
Childs: [StatementAssertion<Begin: Pos(103, 5), End: Pos(104, 71)>,
StatementAssertion<Begin: Pos(105, 5), End: Pos(106, 75)>,
StatementAssertion<Begin: Pos(107, 5), End: Pos(108, 72)>,
StatementAssertion<Begin: Pos(109, 5), End: Pos(110, 79)>,
StatementAssertion<Begin: Pos(111, 5), End: Pos(112, 50)>,
StatementAssertion<Begin: Pos(114, 5), End: Pos(118, 51)>,
StatementAssertion<Begin: Pos(119, 5), End: Pos(124, 55)>,
]
---
public void testModuleName_catena_0() {
    assertEquals("module$foo$baz", ProcessCommonJSModules.toModuleName("./baz.js", "foo/bar.js"));
    setFilename("foo/bar");
    
}

---
---
public void testModuleName_catena_1() {
    assertEquals("module$foo$baz_bar", ProcessCommonJSModules.toModuleName("./baz-bar.js", "foo/bar.js"));
    setFilename("foo/bar");
    
}

---
---
public void testModuleName_catena_2() {
    assertEquals("module$baz", ProcessCommonJSModules.toModuleName("../baz.js", "foo/bar.js"));
    setFilename("foo/bar");
    
}

---
---
public void testModuleName_catena_3() {
    assertEquals("module$baz", ProcessCommonJSModules.toModuleName("../../baz.js", "foo/bar/abc.js"));
    setFilename("foo/bar");
    
}

---
---
public void testModuleName_catena_4() {
    assertEquals("module$baz", ProcessCommonJSModules.toModuleName("../../../baz.js", "foo/bar/abc/xyz.js"));
    setFilename("foo/bar");
    
}

---
---
public void testModuleName_catena_5() {
    setFilename("foo/bar");
    test("var name = require('name');", "goog.provide('module$foo$bar'); var module$foo$bar = {};" + "goog.require('module$name');" + "var name$$module$foo$bar = module$name;");
    
}

---
---
public void testModuleName_catena_6() {
    setFilename("foo/bar");
    test("var name = require('./name');", "goog.provide('module$foo$bar');" + "var module$foo$bar = {};" + "goog.require('module$foo$name');" + "var name$$module$foo$bar = module$foo$name;");
    
}

---
@@@
Split test: com.google.javascript.jscomp.ProcessCommonJSModulesTest::testDash
file: /root/workbench/exportInfo/d4j_buggy/Closure_26/test//com/google/javascript/jscomp/ProcessCommonJSModulesTest.java
Begin: Pos(91, 10)
End: Pos(100, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_26/test//com/google/javascript/jscomp/ProcessCommonJSModulesTest.java
Name: testDash
Childs: [StatementAssertion<Begin: Pos(93, 5), End: Pos(99, 37)>,
]
@@@
Split test: com.google.javascript.jscomp.ProcessCommonJSModulesTest::testVarRenaming
file: /root/workbench/exportInfo/d4j_buggy/Closure_26/test//com/google/javascript/jscomp/ProcessCommonJSModulesTest.java
Begin: Pos(80, 10)
End: Pos(89, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_26/test//com/google/javascript/jscomp/ProcessCommonJSModulesTest.java
Name: testVarRenaming
Childs: [StatementAssertion<Begin: Pos(82, 5), End: Pos(88, 56)>,
]
@@@
Split test: com.google.javascript.jscomp.ProcessCommonJSModulesTest::testWithoutExports
file: /root/workbench/exportInfo/d4j_buggy/Closure_26/test//com/google/javascript/jscomp/ProcessCommonJSModulesTest.java
Begin: Pos(37, 10)
End: Pos(56, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_26/test//com/google/javascript/jscomp/ProcessCommonJSModulesTest.java
Name: testWithoutExports
Childs: [StatementAssertion<Begin: Pos(39, 5), End: Pos(46, 32)>,
StatementAssertion<Begin: Pos(48, 5), End: Pos(55, 56)>,
]
---
public void testWithoutExports_catena_0() {
    setFilename("test");
    test("var name = require('name');" + "name()", "goog.provide('module$test');" + "var module$test = {};" + "goog.require('module$name');" + "var name$$module$test = module$name;" + "name$$module$test();");
    setFilename("test/sub");
    
}

---
---
public void testWithoutExports_catena_1() {
    setFilename("test");
    setFilename("test/sub");
    test("var name = require('mod/name');" + "(function() { name(); })();", "goog.provide('module$test$sub');" + "var module$test$sub = {};" + "goog.require('module$mod$name');" + "var name$$module$test$sub = module$mod$name;" + "(function() { name$$module$test$sub(); })();");
    
}

---
--------------------
Run: Closure_29
@@@
Split test: com.google.javascript.jscomp.InlineObjectLiteralsTest::testObject10
file: /root/workbench/exportInfo/d4j_buggy/Closure_29/test//com/google/javascript/jscomp/InlineObjectLiteralsTest.java
Begin: Pos(167, 10)
End: Pos(207, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_29/test//com/google/javascript/jscomp/InlineObjectLiteralsTest.java
Name: testObject10
Childs: [StatementAssertion<Begin: Pos(168, 5), End: Pos(173, 77)>,
StatementAssertion<Begin: Pos(174, 5), End: Pos(175, 74)>,
StatementAssertion<Begin: Pos(176, 5), End: Pos(185, 78)>,
StatementAssertion<Begin: Pos(186, 5), End: Pos(192, 76)>,
StatementAssertion<Begin: Pos(193, 5), End: Pos(206, 74)>,
]
---
public void testObject10_catena_0() {
    testLocal("var x; var b = f(); x = {a:a, b:b}; if(x.a) g(x.b);", "var JSCompiler_object_inline_a_0;" + "var JSCompiler_object_inline_b_1;" + "var b = f();" + "JSCompiler_object_inline_a_0=a,JSCompiler_object_inline_b_1=b,true;" + "if(JSCompiler_object_inline_a_0) g(JSCompiler_object_inline_b_1)");
    
}

---
---
public void testObject10_catena_1() {
    testLocal("var x = {}; var b = f(); x = {a:a, b:b}; if(x.a) g(x.b) + x.c", "var x = {}; var b = f(); x = {a:a, b:b}; if(x.a) g(x.b) + x.c");
    
}

---
---
public void testObject10_catena_2() {
    testLocal("var x; var b = f(); x = {a:a, b:b}; x.c = c; if(x.a) g(x.b) + x.c", "var JSCompiler_object_inline_a_0;" + "var JSCompiler_object_inline_b_1;" + "var JSCompiler_object_inline_c_2;" + "var b = f();" + "JSCompiler_object_inline_a_0 = a,JSCompiler_object_inline_b_1 = b, " + "  JSCompiler_object_inline_c_2=void 0,true;" + "JSCompiler_object_inline_c_2 = c;" + "if (JSCompiler_object_inline_a_0)" + "  g(JSCompiler_object_inline_b_1) + JSCompiler_object_inline_c_2;");
    
}

---
---
public void testObject10_catena_3() {
    testLocal("var x = {a:a}; if (b) x={b:b}; f(x.a||x.b);", "var JSCompiler_object_inline_a_0 = a;" + "var JSCompiler_object_inline_b_1;" + "if(b) JSCompiler_object_inline_b_1 = b," + "      JSCompiler_object_inline_a_0 = void 0," + "      true;" + "f(JSCompiler_object_inline_a_0 || JSCompiler_object_inline_b_1)");
    
}

---
---
public void testObject10_catena_4() {
    testLocal("var x; var y = 5; x = {a:a, b:b, c:c}; if (b) x={b:b}; f(x.a||x.b);", "var JSCompiler_object_inline_a_0;" + "var JSCompiler_object_inline_b_1;" + "var JSCompiler_object_inline_c_2;" + "var y=5;" + "JSCompiler_object_inline_a_0=a," + "JSCompiler_object_inline_b_1=b," + "JSCompiler_object_inline_c_2=c," + "true;" + "if (b) JSCompiler_object_inline_b_1=b," + "       JSCompiler_object_inline_a_0=void 0," + "       JSCompiler_object_inline_c_2=void 0," + "       true;" + "f(JSCompiler_object_inline_a_0||JSCompiler_object_inline_b_1)");
    
}

---
@@@
Split test: com.google.javascript.jscomp.InlineObjectLiteralsTest::testObject12
file: /root/workbench/exportInfo/d4j_buggy/Closure_29/test//com/google/javascript/jscomp/InlineObjectLiteralsTest.java
Begin: Pos(214, 10)
End: Pos(217, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_29/test//com/google/javascript/jscomp/InlineObjectLiteralsTest.java
Name: testObject12
Childs: [StatementAssertion<Begin: Pos(215, 5), End: Pos(216, 48)>,
]
@@@
Split test: com.google.javascript.jscomp.InlineObjectLiteralsTest::testObject22
file: /root/workbench/exportInfo/d4j_buggy/Closure_29/test//com/google/javascript/jscomp/InlineObjectLiteralsTest.java
Begin: Pos(279, 10)
End: Pos(290, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_29/test//com/google/javascript/jscomp/InlineObjectLiteralsTest.java
Name: testObject22
Childs: [StatementAssertion<Begin: Pos(280, 5), End: Pos(286, 11)>,
StatementAssertion<Begin: Pos(288, 5), End: Pos(289, 60)>,
]
---
public void testObject22_catena_0() {
    testLocal("while(1) { var a = {y:1}; if (b) a.x = 2; f(a.y, a.x);}", "for(;1;){" + " var JSCompiler_object_inline_y_0=1;" + " var JSCompiler_object_inline_x_1;" + " if(b) JSCompiler_object_inline_x_1=2;" + " f(JSCompiler_object_inline_y_0,JSCompiler_object_inline_x_1)" + "}");
    
}

---
---
public void testObject22_catena_1() {
    testLocal("var a; while (1) { f(a.x, a.y); a = {x:1, y:1};}", "var a; while (1) { f(a.x, a.y); a = {x:1, y:1};}");
    
}

---
@@@
Split test: com.google.javascript.jscomp.InlineObjectLiteralsTest::testIssue724
file: /root/workbench/exportInfo/d4j_buggy/Closure_29/test//com/google/javascript/jscomp/InlineObjectLiteralsTest.java
Begin: Pos(343, 10)
End: Pos(349, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_29/test//com/google/javascript/jscomp/InlineObjectLiteralsTest.java
Name: testIssue724
Childs: [StatementAssertion<Begin: Pos(344, 5), End: Pos(348, 35)>,
]
@@@
Split test: com.google.javascript.jscomp.IntegrationTest::testIssue724
file: /root/workbench/exportInfo/d4j_buggy/Closure_29/test//com/google/javascript/jscomp/IntegrationTest.java
Begin: Pos(1672, 10)
End: Pos(1688, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_29/test//com/google/javascript/jscomp/IntegrationTest.java
Name: testIssue724
Childs: [StatementAssertion<Begin: Pos(1687, 5), End: Pos(1687, 32)>,
]
--------------------
Run: Closure_78
@@@
Split test: com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldArithmetic
file: /root/workbench/exportInfo/d4j_buggy/Closure_78/test//com/google/javascript/jscomp/PeepholeFoldConstantsTest.java
Begin: Pos(552, 10)
End: Pos(563, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_78/test//com/google/javascript/jscomp/PeepholeFoldConstantsTest.java
Name: testFoldArithmetic
Childs: [StatementAssertion<Begin: Pos(553, 5), End: Pos(553, 34)>,
StatementAssertion<Begin: Pos(554, 5), End: Pos(554, 33)>,
StatementAssertion<Begin: Pos(555, 5), End: Pos(555, 37)>,
StatementAssertion<Begin: Pos(556, 5), End: Pos(556, 35)>,
StatementAssertion<Begin: Pos(557, 5), End: Pos(557, 35)>,
StatementAssertion<Begin: Pos(558, 5), End: Pos(558, 35)>,
StatementAssertion<Begin: Pos(559, 5), End: Pos(559, 31)>,
StatementAssertion<Begin: Pos(560, 5), End: Pos(560, 32)>,
StatementAssertion<Begin: Pos(561, 5), End: Pos(561, 33)>,
StatementAssertion<Begin: Pos(562, 5), End: Pos(562, 35)>,
]
---
public void testFoldArithmetic_catena_0() {
    fold("x = 10 + 20", "x = 30");
    
}

---
---
public void testFoldArithmetic_catena_1() {
    fold("x = 2 / 4", "x = 0.5");
    
}

---
---
public void testFoldArithmetic_catena_2() {
    fold("x = 2.25 * 3", "x = 6.75");
    
}

---
---
public void testFoldArithmetic_catena_3() {
    fold("z = x * y", "z = x * y");
    
}

---
---
public void testFoldArithmetic_catena_4() {
    fold("x = y * 5", "x = y * 5");
    
}

---
---
public void testFoldArithmetic_catena_5() {
    fold("x = 1 / 0", "x = 1 / 0");
    
}

---
---
public void testFoldArithmetic_catena_6() {
    fold("x = 3 % 2", "x = 1");
    
}

---
---
public void testFoldArithmetic_catena_7() {
    fold("x = 3 % -2", "x = 1");
    
}

---
---
public void testFoldArithmetic_catena_8() {
    fold("x = -1 % 3", "x = -1");
    
}

---
---
public void testFoldArithmetic_catena_9() {
    fold("x = 1 % 0", "x = 1 % 0");
    
}

---
--------------------
Run: Closure_7
@@@
Split test: com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest::testGoogIsFunction2
file: /root/workbench/exportInfo/d4j_buggy/Closure_7/test//com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java
# check: Use pattern matching: .testClosureFunction
Begin: Pos(120, 10)
End: Pos(125, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_7/test//com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java
Name: testGoogIsFunction2
Childs: [StatementAssertion<Begin: Pos(121, 5), End: Pos(124, 38)>,
]
@@@
Split test: com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest::testTypeof3
file: /root/workbench/exportInfo/d4j_buggy/Closure_7/test//com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java
# check: Use pattern matching: .testBinop
Begin: Pos(462, 3)
End: Pos(474, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_7/test//com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java
Name: testTypeof3
Childs: [StatementAssertion<Begin: Pos(465, 5), End: Pos(473, 63)>,
]
--------------------
Run: Closure_138
@@@
Split test: com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest::testGoogIsArrayOnNull
file: /root/workbench/exportInfo/d4j_buggy/Closure_138/test//com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java
# check: Use pattern matching: .testClosureFunction
Begin: Pos(124, 10)
End: Pos(129, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_138/test//com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java
Name: testGoogIsArrayOnNull
Childs: [StatementAssertion<Begin: Pos(125, 5), End: Pos(128, 14)>,
]
@@@
Split test: com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest::testGoogIsFunctionOnNull
file: /root/workbench/exportInfo/d4j_buggy/Closure_138/test//com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java
# check: Use pattern matching: .testClosureFunction
Begin: Pos(131, 10)
End: Pos(136, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_138/test//com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java
Name: testGoogIsFunctionOnNull
Childs: [StatementAssertion<Begin: Pos(132, 5), End: Pos(135, 14)>,
]
@@@
Split test: com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest::testGoogIsObjectOnNull
file: /root/workbench/exportInfo/d4j_buggy/Closure_138/test//com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java
# check: Use pattern matching: .testClosureFunction
Begin: Pos(138, 10)
End: Pos(143, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_138/test//com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java
Name: testGoogIsObjectOnNull
Childs: [StatementAssertion<Begin: Pos(139, 5), End: Pos(142, 14)>,
]
@@@
Split test: com.google.javascript.jscomp.TypeCheckTest::testIssue124b
file: /root/workbench/exportInfo/d4j_buggy/Closure_138/test//com/google/javascript/jscomp/TypeCheckTest.java
Begin: Pos(4154, 10)
End: Pos(4164, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_138/test//com/google/javascript/jscomp/TypeCheckTest.java
Name: testIssue124b
Childs: [StatementAssertion<Begin: Pos(4155, 5), End: Pos(4163, 23)>,
]
@@@
Split test: com.google.javascript.jscomp.TypeCheckTest::testIssue124
file: /root/workbench/exportInfo/d4j_buggy/Closure_138/test//com/google/javascript/jscomp/TypeCheckTest.java
Begin: Pos(4145, 10)
End: Pos(4152, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_138/test//com/google/javascript/jscomp/TypeCheckTest.java
Name: testIssue124
Childs: [StatementAssertion<Begin: Pos(4146, 5), End: Pos(4151, 13)>,
]
--------------------
Run: Closure_105
@@@
Split test: com.google.javascript.jscomp.FoldConstantsTest::testStringJoinAdd
file: /root/workbench/exportInfo/d4j_buggy/Closure_105/test//com/google/javascript/jscomp/FoldConstantsTest.java
Begin: Pos(623, 10)
End: Pos(658, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_105/test//com/google/javascript/jscomp/FoldConstantsTest.java
Name: testStringJoinAdd
Childs: [StatementAssertion<Begin: Pos(624, 5), End: Pos(624, 56)>,
StatementAssertion<Begin: Pos(625, 5), End: Pos(625, 41)>,
StatementAssertion<Begin: Pos(626, 5), End: Pos(626, 45)>,
StatementAssertion<Begin: Pos(627, 5), End: Pos(627, 59)>,
StatementAssertion<Begin: Pos(628, 5), End: Pos(628, 86)>,
StatementAssertion<Begin: Pos(629, 5), End: Pos(629, 82)>,
StatementAssertion<Begin: Pos(630, 5), End: Pos(630, 82)>,
StatementAssertion<Begin: Pos(633, 5), End: Pos(633, 50)>,
StatementAssertion<Begin: Pos(634, 5), End: Pos(634, 50)>,
StatementAssertion<Begin: Pos(637, 5), End: Pos(637, 58)>,
StatementAssertion<Begin: Pos(638, 5), End: Pos(638, 56)>,
StatementAssertion<Begin: Pos(639, 5), End: Pos(639, 58)>,
StatementAssertion<Begin: Pos(642, 5), End: Pos(643, 74)>,
StatementAssertion<Begin: Pos(646, 5), End: Pos(646, 40)>,
StatementAssertion<Begin: Pos(647, 5), End: Pos(647, 44)>,
StatementAssertion<Begin: Pos(649, 5), End: Pos(649, 76)>,
StatementAssertion<Begin: Pos(650, 5), End: Pos(651, 42)>,
StatementAssertion<Begin: Pos(653, 5), End: Pos(654, 47)>,
StatementAssertion<Begin: Pos(656, 5), End: Pos(657, 34)>,
]
---
public void testStringJoinAdd_catena_0() {
    fold("x = ['a', 'b', 'c'].join('')", "x = \"abc\"");
    
}

---
---
public void testStringJoinAdd_catena_1() {
    fold("x = [].join(',')", "x = \"\"");
    
}

---
---
public void testStringJoinAdd_catena_2() {
    fold("x = ['a'].join(',')", "x = \"a\"");
    
}

---
---
public void testStringJoinAdd_catena_3() {
    fold("x = ['a', 'b', 'c'].join(',')", "x = \"a,b,c\"");
    
}

---
---
public void testStringJoinAdd_catena_4() {
    fold("x = ['a', foo, 'b', 'c'].join(',')", "x = [\"a\",foo,\"b,c\"].join(\",\")");
    
}

---
---
public void testStringJoinAdd_catena_5() {
    fold("x = [foo, 'a', 'b', 'c'].join(',')", "x = [foo,\"a,b,c\"].join(\",\")");
    
}

---
---
public void testStringJoinAdd_catena_6() {
    fold("x = ['a', 'b', 'c', foo].join(',')", "x = [\"a,b,c\",foo].join(\",\")");
    
}

---
---
public void testStringJoinAdd_catena_7() {
    fold("x = ['a=', 5].join('')", "x = \"a=5\"");
    
}

---
---
public void testStringJoinAdd_catena_8() {
    fold("x = ['a', '5'].join(7)", "x = \"a75\"");
    
}

---
---
public void testStringJoinAdd_catena_9() {
    fold("x = ['a=', false].join('')", "x = \"a=false\"");
    
}

---
---
public void testStringJoinAdd_catena_10() {
    fold("x = ['a', '5'].join(true)", "x = \"atrue5\"");
    
}

---
---
public void testStringJoinAdd_catena_11() {
    fold("x = ['a', '5'].join(false)", "x = \"afalse5\"");
    
}

---
---
public void testStringJoinAdd_catena_12() {
    fold("x = ['a', '5', 'c'].join('a very very very long chain')", "x = [\"a\",\"5\",\"c\"].join(\"a very very very long chain\")");
    
}

---
---
public void testStringJoinAdd_catena_13() {
    foldSame("x = ['', foo].join(',')");
    
}

---
---
public void testStringJoinAdd_catena_14() {
    foldSame("x = ['', foo, ''].join(',')");
    
}

---
---
public void testStringJoinAdd_catena_15() {
    fold("x = ['', '', foo, ''].join(',')", "x = [',', foo, ''].join(',')");
    
}

---
---
public void testStringJoinAdd_catena_16() {
    fold("x = ['', '', foo, '', ''].join(',')", "x = [',', foo, ','].join(',')");
    
}

---
---
public void testStringJoinAdd_catena_17() {
    fold("x = ['', '', foo, '', '', bar].join(',')", "x = [',', foo, ',', bar].join(',')");
    
}

---
---
public void testStringJoinAdd_catena_18() {
    fold("x = [1,2,3].join('abcdef')", "x = '1abcdef2abcdef3'");
    
}

---
--------------------
Run: Closure_136
@@@
Split test: com.google.javascript.jscomp.InlineGettersTest::testIssue2508576_1
file: /root/workbench/exportInfo/d4j_buggy/Closure_136/test//com/google/javascript/jscomp/InlineGettersTest.java
Begin: Pos(235, 10)
End: Pos(239, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_136/test//com/google/javascript/jscomp/InlineGettersTest.java
Name: testIssue2508576_1
Childs: [StatementAssertion<Begin: Pos(238, 5), End: Pos(238, 60)>,
]
@@@
Split test: com.google.javascript.jscomp.InlineGettersTest::testIssue2508576_3
file: /root/workbench/exportInfo/d4j_buggy/Closure_136/test//com/google/javascript/jscomp/InlineGettersTest.java
Begin: Pos(246, 10)
End: Pos(249, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_136/test//com/google/javascript/jscomp/InlineGettersTest.java
Name: testIssue2508576_3
Childs: [StatementAssertion<Begin: Pos(248, 5), End: Pos(248, 52)>,
]
@@@
Split test: com.google.javascript.jscomp.MethodCheckTest::testSeparateMethods
file: /root/workbench/exportInfo/d4j_buggy/Closure_136/test//com/google/javascript/jscomp/MethodCheckTest.java
Begin: Pos(94, 10)
End: Pos(104, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_136/test//com/google/javascript/jscomp/MethodCheckTest.java
Name: testSeparateMethods
Childs: [StatementAssertion<Begin: Pos(95, 5), End: Pos(95, 53)>,
StatementAssertion<Begin: Pos(96, 5), End: Pos(96, 56)>,
StatementAssertion<Begin: Pos(97, 5), End: Pos(97, 38)>,
StatementAssertion<Begin: Pos(98, 5), End: Pos(98, 41)>,
StatementAssertion<Begin: Pos(101, 5), End: Pos(101, 59)>,
StatementAssertion<Begin: Pos(102, 5), End: Pos(102, 41)>,
StatementAssertion<Begin: Pos(103, 5), End: Pos(103, 38)>,
]
---
public void testSeparateMethods_catena_0() {
    testSame("var f = new Foo();f.oneOrTwoArg2(1);");
    
}

---
---
public void testSeparateMethods_catena_1() {
    testSame("var f = new Baz();f.oneOrTwoArg2(1, 2);");
    
}

---
---
public void testSeparateMethods_catena_2() {
    testSame("Boz.staticMethod1(1);");
    
}

---
---
public void testSeparateMethods_catena_3() {
    testSame("Boz.staticMethod2(1, 2);");
    
}

---
---
public void testSeparateMethods_catena_4() {
    testSame("var f = new Bar();f.oneOrTwoArg2(1, 2, 3);");
    
}

---
---
public void testSeparateMethods_catena_5() {
    testSame("Boz.staticMethod1(1, 2);");
    
}

---
---
public void testSeparateMethods_catena_6() {
    testSame("Boz.staticMethod2(1);");
    
}

---
@@@
Split test: com.google.javascript.jscomp.RenameVarsTest::testDollarSignSuperExport2
file: /root/workbench/exportInfo/d4j_buggy/Closure_136/test//com/google/javascript/jscomp/RenameVarsTest.java
Begin: Pos(459, 10)
End: Pos(480, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_136/test//com/google/javascript/jscomp/RenameVarsTest.java
Name: testDollarSignSuperExport2
Childs: [StatementAssertion<Begin: Pos(465, 5), End: Pos(468, 49)>,
StatementAssertion<Begin: Pos(471, 5), End: Pos(471, 40)>,
StatementAssertion<Begin: Pos(474, 5), End: Pos(477, 49)>,
]
---
public void testDollarSignSuperExport2_catena_0() {
    boolean normalizedExpectedJs = false;
    super.enableNormalize(false);
    useGoogleCodingConvention = false;
    test("var x = function($super,duper,$fantastic){};" + "var y = function($super,duper){};", "var c = function($super,    a,         b){};" + "var d = function($super,    a){};");
    localRenamingOnly = false;
    useGoogleCodingConvention = true;
    super.disableNormalize();
    
}

---
---
public void testDollarSignSuperExport2_catena_1() {
    boolean normalizedExpectedJs = false;
    super.enableNormalize(false);
    useGoogleCodingConvention = false;
    localRenamingOnly = false;
    test("var $super = 1", "var a = 1");
    useGoogleCodingConvention = true;
    super.disableNormalize();
    
}

---
---
public void testDollarSignSuperExport2_catena_2() {
    boolean normalizedExpectedJs = false;
    super.enableNormalize(false);
    useGoogleCodingConvention = false;
    localRenamingOnly = false;
    useGoogleCodingConvention = true;
    test("var x = function($super,duper,$fantastic){};" + "var y = function($super,duper){};", "var d = function(a,     b,    c         ){};" + "var e = function(     a,    b){};");
    super.disableNormalize();
    
}

---
--------------------
Run: Closure_42
@@@
Split test: com.google.javascript.jscomp.parsing.ParserTest::testForEach
file: /root/workbench/exportInfo/d4j_buggy/Closure_42/test//com/google/javascript/jscomp/parsing/ParserTest.java
Begin: Pos(961, 10)
End: Pos(972, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_42/test//com/google/javascript/jscomp/parsing/ParserTest.java
Name: testForEach
Childs: [StatementAssertion<Begin: Pos(962, 5), End: Pos(971, 52)>,
]
--------------------
Run: Closure_64
@@@
Split test: com.google.javascript.jscomp.CommandLineRunnerTest::testES5StrictUseStrictMultipleInputs
file: /root/workbench/exportInfo/d4j_buggy/Closure_64/test//com/google/javascript/jscomp/CommandLineRunnerTest.java
Begin: Pos(797, 10)
End: Pos(804, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_64/test//com/google/javascript/jscomp/CommandLineRunnerTest.java
Name: testES5StrictUseStrictMultipleInputs
Childs: [StatementAssertion<Begin: Pos(802, 5), End: Pos(802, 64)>,
StatementAssertion<Begin: Pos(803, 5), End: Pos(803, 73)>,
]
---
public void testES5StrictUseStrictMultipleInputs_catena_0() {
    args.add("--language_in=ECMASCRIPT5_STRICT");
    Compiler compiler = compile(new String[] {
        "var x = f.function", "var y = f.function", "var z = f.function"
    });
    String outputSource = compiler.toSource();
    assertEquals("'use strict'", outputSource.substring(0, 12));
    
}

---
---
public void testES5StrictUseStrictMultipleInputs_catena_1() {
    args.add("--language_in=ECMASCRIPT5_STRICT");
    Compiler compiler = compile(new String[] {
        "var x = f.function", "var y = f.function", "var z = f.function"
    });
    String outputSource = compiler.toSource();
    assertEquals(outputSource.substring(13).indexOf("'use strict'"),  - 1);
    
}

---
--------------------
Run: Closure_23
@@@
Split test: com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldGetElem
file: /root/workbench/exportInfo/d4j_buggy/Closure_23/test//com/google/javascript/jscomp/PeepholeFoldConstantsTest.java
Begin: Pos(764, 10)
End: Pos(778, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_23/test//com/google/javascript/jscomp/PeepholeFoldConstantsTest.java
Name: testFoldGetElem
Childs: [StatementAssertion<Begin: Pos(765, 5), End: Pos(765, 39)>,
StatementAssertion<Begin: Pos(766, 5), End: Pos(766, 38)>,
StatementAssertion<Begin: Pos(767, 5), End: Pos(767, 38)>,
StatementAssertion<Begin: Pos(768, 5), End: Pos(769, 59)>,
StatementAssertion<Begin: Pos(770, 5), End: Pos(771, 57)>,
StatementAssertion<Begin: Pos(772, 5), End: Pos(773, 57)>,
StatementAssertion<Begin: Pos(775, 5), End: Pos(775, 34)>,
StatementAssertion<Begin: Pos(776, 5), End: Pos(776, 43)>,
StatementAssertion<Begin: Pos(777, 5), End: Pos(777, 34)>,
]
---
public void testFoldGetElem_catena_0() {
    fold("x = [,10][0]", "x = void 0");
    
}

---
---
public void testFoldGetElem_catena_1() {
    fold("x = [10, 20][0]", "x = 10");
    
}

---
---
public void testFoldGetElem_catena_2() {
    fold("x = [10, 20][1]", "x = 20");
    
}

---
---
public void testFoldGetElem_catena_3() {
    fold("x = [10, 20][0.5]", "", PeepholeFoldConstants.INVALID_GETELEM_INDEX_ERROR);
    
}

---
---
public void testFoldGetElem_catena_4() {
    fold("x = [10, 20][-1]", "", PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);
    
}

---
---
public void testFoldGetElem_catena_5() {
    fold("x = [10, 20][2]", "", PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);
    
}

---
---
public void testFoldGetElem_catena_6() {
    foldSame("x = [foo(), 0][1]");
    
}

---
---
public void testFoldGetElem_catena_7() {
    fold("x = [0, foo()][1]", "x = foo()");
    
}

---
---
public void testFoldGetElem_catena_8() {
    foldSame("x = [0, foo()][0]");
    
}

---
--------------------
Run: Closure_60
@@@
Split test: com.google.javascript.jscomp.CommandLineRunnerTest::testIssue504
file: /root/workbench/exportInfo/d4j_buggy/Closure_60/test//com/google/javascript/jscomp/CommandLineRunnerTest.java
Begin: Pos(363, 10)
End: Pos(367, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_60/test//com/google/javascript/jscomp/CommandLineRunnerTest.java
Name: testIssue504
Childs: [StatementAssertion<Begin: Pos(365, 5), End: Pos(366, 62)>,
]
@@@
Split test: com.google.javascript.jscomp.NodeUtilTest::testGetBooleanValue
file: /root/workbench/exportInfo/d4j_buggy/Closure_60/test//com/google/javascript/jscomp/NodeUtilTest.java
Begin: Pos(91, 10)
End: Pos(111, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_60/test//com/google/javascript/jscomp/NodeUtilTest.java
Name: testGetBooleanValue
Childs: [StatementAssertion<Begin: Pos(92, 5), End: Pos(92, 34)>,
StatementAssertion<Begin: Pos(93, 5), End: Pos(93, 32)>,
StatementAssertion<Begin: Pos(94, 5), End: Pos(94, 33)>,
StatementAssertion<Begin: Pos(95, 5), End: Pos(95, 33)>,
StatementAssertion<Begin: Pos(96, 5), End: Pos(96, 32)>,
StatementAssertion<Begin: Pos(97, 5), End: Pos(97, 32)>,
StatementAssertion<Begin: Pos(98, 5), End: Pos(98, 36)>,
StatementAssertion<Begin: Pos(99, 5), End: Pos(99, 35)>,
StatementAssertion<Begin: Pos(100, 5), End: Pos(100, 32)>,
StatementAssertion<Begin: Pos(101, 5), End: Pos(101, 33)>,
StatementAssertion<Begin: Pos(102, 5), End: Pos(102, 40)>,
StatementAssertion<Begin: Pos(103, 5), End: Pos(103, 37)>,
StatementAssertion<Begin: Pos(104, 5), End: Pos(104, 43)>,
StatementAssertion<Begin: Pos(105, 5), End: Pos(105, 34)>,
StatementAssertion<Begin: Pos(106, 5), End: Pos(106, 39)>,
StatementAssertion<Begin: Pos(109, 5), End: Pos(109, 42)>,
StatementAssertion<Begin: Pos(110, 5), End: Pos(110, 40)>,
]
---
public void testGetBooleanValue_catena_0() {
    assertPureBooleanTrue("true");
    
}

---
---
public void testGetBooleanValue_catena_1() {
    assertPureBooleanTrue("10");
    
}

---
---
public void testGetBooleanValue_catena_2() {
    assertPureBooleanTrue("'0'");
    
}

---
---
public void testGetBooleanValue_catena_3() {
    assertPureBooleanTrue("/a/");
    
}

---
---
public void testGetBooleanValue_catena_4() {
    assertPureBooleanTrue("{}");
    
}

---
---
public void testGetBooleanValue_catena_5() {
    assertPureBooleanTrue("[]");
    
}

---
---
public void testGetBooleanValue_catena_6() {
    assertPureBooleanFalse("false");
    
}

---
---
public void testGetBooleanValue_catena_7() {
    assertPureBooleanFalse("null");
    
}

---
---
public void testGetBooleanValue_catena_8() {
    assertPureBooleanFalse("0");
    
}

---
---
public void testGetBooleanValue_catena_9() {
    assertPureBooleanFalse("''");
    
}

---
---
public void testGetBooleanValue_catena_10() {
    assertPureBooleanFalse("undefined");
    
}

---
---
public void testGetBooleanValue_catena_11() {
    assertPureBooleanFalse("void 0");
    
}

---
---
public void testGetBooleanValue_catena_12() {
    assertPureBooleanUnknown("void foo()");
    
}

---
---
public void testGetBooleanValue_catena_13() {
    assertPureBooleanUnknown("b");
    
}

---
---
public void testGetBooleanValue_catena_14() {
    assertPureBooleanUnknown("-'0.0'");
    
}

---
---
public void testGetBooleanValue_catena_15() {
    assertPureBooleanUnknown("{a:foo()}");
    
}

---
---
public void testGetBooleanValue_catena_16() {
    assertPureBooleanUnknown("[foo()]");
    
}

---
--------------------
Run: Closure_144
@@@
Split test: com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsAssign
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/CodePrinterTest.java
# check: Use pattern matching: .assertTypeAnnotations
Begin: Pos(612, 10)
End: Pos(616, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/CodePrinterTest.java
Name: testTypeAnnotationsAssign
Childs: [StatementAssertion<Begin: Pos(613, 5), End: Pos(615, 39)>,
]
@@@
Split test: com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsMember
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/CodePrinterTest.java
# check: Use pattern matching: .assertTypeAnnotations
Begin: Pos(650, 10)
End: Pos(668, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/CodePrinterTest.java
Name: testTypeAnnotationsMember
Childs: [StatementAssertion<Begin: Pos(651, 5), End: Pos(667, 40)>,
]
@@@
Split test: com.google.javascript.jscomp.CodePrinterTest::testOptionalTypesAnnotation
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/CodePrinterTest.java
# check: Use pattern matching: .assertTypeAnnotations
Begin: Pos(752, 10)
End: Pos(763, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/CodePrinterTest.java
Name: testOptionalTypesAnnotation
Childs: [StatementAssertion<Begin: Pos(753, 5), End: Pos(762, 36)>,
]
@@@
Split test: com.google.javascript.jscomp.CodePrinterTest::testTempConstructor
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/CodePrinterTest.java
# check: Use pattern matching: .assertTypeAnnotations
Begin: Pos(778, 10)
End: Pos(790, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/CodePrinterTest.java
Name: testTempConstructor
Childs: [StatementAssertion<Begin: Pos(779, 5), End: Pos(789, 6)>,
]
@@@
Split test: com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsDispatcher1
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/CodePrinterTest.java
# check: Use pattern matching: .assertTypeAnnotations
Begin: Pos(691, 10)
End: Pos(707, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/CodePrinterTest.java
Name: testTypeAnnotationsDispatcher1
Childs: [StatementAssertion<Begin: Pos(692, 5), End: Pos(706, 13)>,
]
@@@
Split test: com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsDispatcher2
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/CodePrinterTest.java
# check: Use pattern matching: .assertTypeAnnotations
Begin: Pos(709, 10)
End: Pos(734, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/CodePrinterTest.java
Name: testTypeAnnotationsDispatcher2
Childs: [StatementAssertion<Begin: Pos(710, 5), End: Pos(733, 13)>,
]
@@@
Split test: com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsImplements
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/CodePrinterTest.java
# check: Use pattern matching: .assertTypeAnnotations
Begin: Pos(670, 10)
End: Pos(689, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/CodePrinterTest.java
Name: testTypeAnnotationsImplements
Childs: [StatementAssertion<Begin: Pos(671, 5), End: Pos(688, 37)>,
]
@@@
Split test: com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsNamespace
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/CodePrinterTest.java
# check: Use pattern matching: .assertTypeAnnotations
Begin: Pos(618, 10)
End: Pos(624, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/CodePrinterTest.java
Name: testTypeAnnotationsNamespace
Childs: [StatementAssertion<Begin: Pos(619, 5), End: Pos(623, 37)>,
]
@@@
Split test: com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotations
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/CodePrinterTest.java
# check: Use pattern matching: .assertTypeAnnotations
Begin: Pos(605, 10)
End: Pos(610, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/CodePrinterTest.java
Name: testTypeAnnotations
Childs: [StatementAssertion<Begin: Pos(606, 5), End: Pos(609, 35)>,
]
@@@
Split test: com.google.javascript.jscomp.CodePrinterTest::testVariableArgumentsTypesAnnotation
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/CodePrinterTest.java
# check: Use pattern matching: .assertTypeAnnotations
Begin: Pos(765, 10)
End: Pos(776, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/CodePrinterTest.java
Name: testVariableArgumentsTypesAnnotation
Childs: [StatementAssertion<Begin: Pos(766, 5), End: Pos(775, 36)>,
]
@@@
Split test: com.google.javascript.jscomp.CodePrinterTest::testEmitUnknownParamTypesAsAllType
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/CodePrinterTest.java
# check: Use pattern matching: .assertTypeAnnotations
Begin: Pos(742, 10)
End: Pos(750, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/CodePrinterTest.java
Name: testEmitUnknownParamTypesAsAllType
Childs: [StatementAssertion<Begin: Pos(743, 5), End: Pos(749, 36)>,
]
@@@
Split test: com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsMemberSubclass
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/CodePrinterTest.java
# check: Use pattern matching: .assertTypeAnnotations
Begin: Pos(626, 10)
End: Pos(636, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/CodePrinterTest.java
Name: testTypeAnnotationsMemberSubclass
Childs: [StatementAssertion<Begin: Pos(627, 5), End: Pos(635, 37)>,
]
@@@
Split test: com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest::testRewritePrototypeMethods2
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java
# check: Use pattern matching: .enableTypeCheck
Use pattern matching: .checkTypes
Begin: Pos(142, 10)
End: Pos(148, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java
Name: testRewritePrototypeMethods2
Childs: [StatementAssertion<Begin: Pos(144, 5), End: Pos(144, 38)>,
StatementAssertion<Begin: Pos(145, 5), End: Pos(147, 74)>,
]
---
public void testRewritePrototypeMethods2_catena_0()throws Exception {
    enableTypeCheck(CheckLevel.ERROR);
    
}

---
---
public void testRewritePrototypeMethods2_catena_1()throws Exception {
    checkTypes(RewritePrototypeMethodTestInput.INPUT, RewritePrototypeMethodTestInput.EXPECTED, RewritePrototypeMethodTestInput.EXPECTED_TYPE_CHECKING_ON);
    
}

---
@@@
Split test: com.google.javascript.jscomp.DisambiguatePropertiesTest::testStaticProperty
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/DisambiguatePropertiesTest.java
Begin: Pos(289, 10)
End: Pos(304, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/DisambiguatePropertiesTest.java
Name: testStaticProperty
Childs: [StatementAssertion<Begin: Pos(301, 5), End: Pos(303, 47)>,
]
@@@
Split test: com.google.javascript.jscomp.ExternExportsPassTest::testExportDontEmitPrototypePathPrefix
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/ExternExportsPassTest.java
Begin: Pos(292, 10)
End: Pos(314, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/ExternExportsPassTest.java
Name: testExportDontEmitPrototypePathPrefix
Childs: [StatementAssertion<Begin: Pos(293, 5), End: Pos(313, 6)>,
]
@@@
Split test: com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/ExternExportsPassTest.java
Begin: Pos(87, 10)
End: Pos(115, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/ExternExportsPassTest.java
Name: testExportMultiple
Childs: [StatementAssertion<Begin: Pos(88, 5), End: Pos(114, 64)>,
]
@@@
Split test: com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbolWithConstructor
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/ExternExportsPassTest.java
Begin: Pos(222, 10)
End: Pos(235, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/ExternExportsPassTest.java
Name: testExportSymbolWithConstructor
Childs: [StatementAssertion<Begin: Pos(223, 5), End: Pos(234, 58)>,
]
@@@
Split test: com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbolDefinedInVar
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/ExternExportsPassTest.java
Begin: Pos(61, 10)
End: Pos(71, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/ExternExportsPassTest.java
Name: testExportSymbolDefinedInVar
Childs: [StatementAssertion<Begin: Pos(62, 5), End: Pos(70, 59)>,
]
@@@
Split test: com.google.javascript.jscomp.ExternExportsPassTest::testExportSymbol
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/ExternExportsPassTest.java
Begin: Pos(49, 10)
End: Pos(59, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/ExternExportsPassTest.java
Name: testExportSymbol
Childs: [StatementAssertion<Begin: Pos(50, 5), End: Pos(58, 59)>,
]
@@@
Split test: com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple2
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/ExternExportsPassTest.java
Begin: Pos(117, 10)
End: Pos(141, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/ExternExportsPassTest.java
Name: testExportMultiple2
Childs: [StatementAssertion<Begin: Pos(118, 5), End: Pos(140, 68)>,
]
@@@
Split test: com.google.javascript.jscomp.ExternExportsPassTest::testExportMultiple3
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/ExternExportsPassTest.java
Begin: Pos(143, 10)
End: Pos(162, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/ExternExportsPassTest.java
Name: testExportMultiple3
Childs: [StatementAssertion<Begin: Pos(144, 5), End: Pos(161, 57)>,
]
@@@
Split test: com.google.javascript.jscomp.ExternExportsPassTest::testExportProperty
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/ExternExportsPassTest.java
Begin: Pos(73, 10)
End: Pos(85, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/ExternExportsPassTest.java
Name: testExportProperty
Childs: [StatementAssertion<Begin: Pos(74, 5), End: Pos(84, 58)>,
]
@@@
Split test: com.google.javascript.jscomp.LooseTypeCheckTest::testNestedFunctionInference1
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/LooseTypeCheckTest.java
# check: Use pattern matching: .testFunctionType
Begin: Pos(2062, 10)
End: Pos(2068, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/LooseTypeCheckTest.java
Name: testNestedFunctionInference1
Childs: [StatementAssertion<Begin: Pos(2066, 5), End: Pos(2067, 40)>,
]
@@@
Split test: com.google.javascript.jscomp.LooseTypeCheckTest::testScoping10
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/LooseTypeCheckTest.java
Begin: Pos(1244, 10)
End: Pos(1254, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/LooseTypeCheckTest.java
Name: testScoping10
Childs: [StatementAssertion<Begin: Pos(1248, 5), End: Pos(1248, 47)>,
StatementAssertion<Begin: Pos(1249, 5), End: Pos(1249, 48)>,
StatementAssertion<Begin: Pos(1252, 5), End: Pos(1253, 50)>,
]
---
public void testScoping10_catena_0()throws Exception {
    TypeCheckResult p = parseAndTypeCheckWithScope("var a = function b(){};");
    assertTrue(p.scope.isDeclared("a", false));
    
}

---
---
public void testScoping10_catena_1()throws Exception {
    TypeCheckResult p = parseAndTypeCheckWithScope("var a = function b(){};");
    assertFalse(p.scope.isDeclared("b", false));
    
}

---
---
public void testScoping10_catena_2()throws Exception {
    TypeCheckResult p = parseAndTypeCheckWithScope("var a = function b(){};");
    assertEquals("function (): undefined", p.scope.getVar("a").getType().toString());
    
}

---
@@@
Split test: com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateOldTypeDef
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/LooseTypeCheckTest.java
Begin: Pos(6350, 10)
End: Pos(6358, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/LooseTypeCheckTest.java
Name: testDuplicateOldTypeDef
Childs: [StatementAssertion<Begin: Pos(6351, 5), End: Pos(6357, 57)>,
]
@@@
Split test: com.google.javascript.jscomp.LooseTypeCheckTest::testBadConstructorCall
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/LooseTypeCheckTest.java
Begin: Pos(4997, 10)
End: Pos(5003, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/LooseTypeCheckTest.java
Name: testBadConstructorCall
Childs: [StatementAssertion<Begin: Pos(4998, 5), End: Pos(5002, 36)>,
]
@@@
Split test: com.google.javascript.jscomp.LooseTypeCheckTest::testDontAddMethodsIfNoConstructor
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/LooseTypeCheckTest.java
Begin: Pos(5309, 10)
End: Pos(5321, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/LooseTypeCheckTest.java
Name: testDontAddMethodsIfNoConstructor
Childs: [StatementAssertion<Begin: Pos(5316, 5), End: Pos(5316, 69)>,
StatementAssertion<Begin: Pos(5317, 5), End: Pos(5318, 49)>,
StatementAssertion<Begin: Pos(5319, 5), End: Pos(5320, 49)>,
]
---
public void testDontAddMethodsIfNoConstructor_catena_0()throws Exception {
    Node js1Node = parseAndTypeCheck("function A() {}" + "A.prototype = {m1: 5, m2: true}");
    JSType functionAType = js1Node.getFirstChild().getJSType();
    assertEquals("function (): undefined", functionAType.toString());
    
}

---
---
public void testDontAddMethodsIfNoConstructor_catena_1()throws Exception {
    Node js1Node = parseAndTypeCheck("function A() {}" + "A.prototype = {m1: 5, m2: true}");
    JSType functionAType = js1Node.getFirstChild().getJSType();
    assertEquals(UNKNOWN_TYPE, U2U_FUNCTION_TYPE.getPropertyType("m1"));
    
}

---
---
public void testDontAddMethodsIfNoConstructor_catena_2()throws Exception {
    Node js1Node = parseAndTypeCheck("function A() {}" + "A.prototype = {m1: 5, m2: true}");
    JSType functionAType = js1Node.getFirstChild().getJSType();
    assertEquals(UNKNOWN_TYPE, U2U_FUNCTION_TYPE.getPropertyType("m2"));
    
}

---
@@@
Split test: com.google.javascript.jscomp.LooseTypeCheckTest::testInterfaceInheritanceCheck11
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/LooseTypeCheckTest.java
Begin: Pos(5566, 10)
End: Pos(5577, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/LooseTypeCheckTest.java
Name: testInterfaceInheritanceCheck11
Childs: [StatementAssertion<Begin: Pos(5567, 5), End: Pos(5576, 60)>,
]
@@@
Split test: com.google.javascript.jscomp.LooseTypeCheckTest::testErrorMismatchingPropertyOnInterface5
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/LooseTypeCheckTest.java
Begin: Pos(5959, 10)
End: Pos(5965, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/LooseTypeCheckTest.java
Name: testErrorMismatchingPropertyOnInterface5
Childs: [StatementAssertion<Begin: Pos(5960, 5), End: Pos(5964, 28)>,
]
@@@
Split test: com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateTypeDef
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/LooseTypeCheckTest.java
Begin: Pos(6398, 10)
End: Pos(6406, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/LooseTypeCheckTest.java
Name: testDuplicateTypeDef
Childs: [StatementAssertion<Begin: Pos(6399, 5), End: Pos(6405, 57)>,
]
@@@
Split test: com.google.javascript.jscomp.LooseTypeCheckTest::testBug911118
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/LooseTypeCheckTest.java
Begin: Pos(4266, 10)
End: Pos(4277, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/LooseTypeCheckTest.java
Name: testBug911118
Childs: [StatementAssertion<Begin: Pos(4270, 5), End: Pos(4270, 60)>,
StatementAssertion<Begin: Pos(4273, 5), End: Pos(4276, 18)>,
]
---
public void testBug911118_catena_0()throws Exception {
    Scope s = parseAndTypeCheckWithScope("var a = function(){};").scope;
    JSType type = s.getVar("a").getType();
    assertEquals("function (): undefined", type.toString());
    
}

---
---
public void testBug911118_catena_1()throws Exception {
    Scope s = parseAndTypeCheckWithScope("var a = function(){};").scope;
    JSType type = s.getVar("a").getType();
    testTypes("function nullFunction() {};" + "var foo = nullFunction;" + "foo = function() {};" + "foo();");
    
}

---
@@@
Split test: com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference12
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/LooseTypeCheckTest.java
# check: Use pattern matching: .testFunctionType
Begin: Pos(1462, 10)
End: Pos(1468, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/LooseTypeCheckTest.java
Name: testFunctionInference12
Childs: [StatementAssertion<Begin: Pos(1463, 5), End: Pos(1467, 34)>,
]
@@@
Split test: com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference13
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/LooseTypeCheckTest.java
# check: Use pattern matching: .testFunctionType
Begin: Pos(1470, 10)
End: Pos(1477, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/LooseTypeCheckTest.java
Name: testFunctionInference13
Childs: [StatementAssertion<Begin: Pos(1471, 5), End: Pos(1476, 42)>,
]
@@@
Split test: com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference15
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/LooseTypeCheckTest.java
# check: Use pattern matching: .testFunctionType
Begin: Pos(1488, 10)
End: Pos(1494, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/LooseTypeCheckTest.java
Name: testFunctionInference15
Childs: [StatementAssertion<Begin: Pos(1489, 5), End: Pos(1493, 40)>,
]
@@@
Split test: com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference16
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/LooseTypeCheckTest.java
# check: Use pattern matching: .testFunctionType
Begin: Pos(1496, 10)
End: Pos(1502, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/LooseTypeCheckTest.java
Name: testFunctionInference16
Childs: [StatementAssertion<Begin: Pos(1497, 5), End: Pos(1501, 40)>,
]
@@@
Split test: com.google.javascript.jscomp.LooseTypeCheckTest::testPrototypePropertyReference
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/LooseTypeCheckTest.java
Begin: Pos(6489, 10)
End: Pos(6506, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/LooseTypeCheckTest.java
Name: testPrototypePropertyReference
Childs: [StatementAssertion<Begin: Pos(6499, 5), End: Pos(6499, 46)>,
StatementAssertion<Begin: Pos(6500, 5), End: Pos(6500, 48)>,
StatementAssertion<Begin: Pos(6502, 5), End: Pos(6502, 72)>,
StatementAssertion<Begin: Pos(6504, 5), End: Pos(6505, 75)>,
]
---
public void testPrototypePropertyReference_catena_0()throws Exception {
    TypeCheckResult p = parseAndTypeCheckWithScope("" + "/** @constructor */\n" + "function Foo() {}\n" + "/** @param {number} a */\n" + "Foo.prototype.bar = function(a){};\n" + "/** @param {Foo} f */\n" + "function baz(f) {\n" + "  Foo.prototype.bar.call(f, 3);\n" + "}");
    assertEquals(0, compiler.getErrorCount());
    FunctionType fooType = (FunctionType)p.scope.getVar("Foo").getType();
    
}

---
---
public void testPrototypePropertyReference_catena_1()throws Exception {
    TypeCheckResult p = parseAndTypeCheckWithScope("" + "/** @constructor */\n" + "function Foo() {}\n" + "/** @param {number} a */\n" + "Foo.prototype.bar = function(a){};\n" + "/** @param {Foo} f */\n" + "function baz(f) {\n" + "  Foo.prototype.bar.call(f, 3);\n" + "}");
    assertEquals(0, compiler.getWarningCount());
    FunctionType fooType = (FunctionType)p.scope.getVar("Foo").getType();
    
}

---
---
public void testPrototypePropertyReference_catena_2()throws Exception {
    TypeCheckResult p = parseAndTypeCheckWithScope("" + "/** @constructor */\n" + "function Foo() {}\n" + "/** @param {number} a */\n" + "Foo.prototype.bar = function(a){};\n" + "/** @param {Foo} f */\n" + "function baz(f) {\n" + "  Foo.prototype.bar.call(f, 3);\n" + "}");
    assertTrue(p.scope.getVar("Foo").getType()instanceof FunctionType);
    FunctionType fooType = (FunctionType)p.scope.getVar("Foo").getType();
    
}

---
---
public void testPrototypePropertyReference_catena_3()throws Exception {
    TypeCheckResult p = parseAndTypeCheckWithScope("" + "/** @constructor */\n" + "function Foo() {}\n" + "/** @param {number} a */\n" + "Foo.prototype.bar = function(a){};\n" + "/** @param {Foo} f */\n" + "function baz(f) {\n" + "  Foo.prototype.bar.call(f, 3);\n" + "}");
    FunctionType fooType = (FunctionType)p.scope.getVar("Foo").getType();
    assertEquals("function (this:Foo, number): undefined", fooType.getPrototype().getPropertyType("bar").toString());
    
}

---
@@@
Split test: com.google.javascript.jscomp.LooseTypeCheckTest::testGoodExtends7
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/LooseTypeCheckTest.java
# check: Use pattern matching: .testFunctionType
Begin: Pos(2670, 10)
End: Pos(2678, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/LooseTypeCheckTest.java
Name: testGoodExtends7
Childs: [StatementAssertion<Begin: Pos(2671, 5), End: Pos(2677, 46)>,
]
@@@
Split test: com.google.javascript.jscomp.LooseTypeCheckTest::testTypeRedefinition
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/LooseTypeCheckTest.java
Begin: Pos(2094, 10)
End: Pos(2099, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/LooseTypeCheckTest.java
Name: testTypeRedefinition
Childs: [StatementAssertion<Begin: Pos(2095, 5), End: Pos(2098, 67)>,
]
@@@
Split test: com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference1
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/LooseTypeCheckTest.java
# check: Use pattern matching: .testFunctionType
Begin: Pos(1393, 10)
End: Pos(1397, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/LooseTypeCheckTest.java
Name: testFunctionInference1
Childs: [StatementAssertion<Begin: Pos(1394, 5), End: Pos(1396, 35)>,
]
@@@
Split test: com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference2
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/LooseTypeCheckTest.java
# check: Use pattern matching: .testFunctionType
Begin: Pos(1399, 10)
End: Pos(1403, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/LooseTypeCheckTest.java
Name: testFunctionInference2
Childs: [StatementAssertion<Begin: Pos(1400, 5), End: Pos(1402, 38)>,
]
@@@
Split test: com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference3
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/LooseTypeCheckTest.java
# check: Use pattern matching: .testFunctionType
Begin: Pos(1405, 10)
End: Pos(1409, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/LooseTypeCheckTest.java
Name: testFunctionInference3
Childs: [StatementAssertion<Begin: Pos(1406, 5), End: Pos(1408, 40)>,
]
@@@
Split test: com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference4
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/LooseTypeCheckTest.java
# check: Use pattern matching: .testFunctionType
Begin: Pos(1411, 10)
End: Pos(1415, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/LooseTypeCheckTest.java
Name: testFunctionInference4
Childs: [StatementAssertion<Begin: Pos(1412, 5), End: Pos(1414, 49)>,
]
@@@
Split test: com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference7
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/LooseTypeCheckTest.java
# check: Use pattern matching: .testFunctionType
Begin: Pos(1429, 10)
End: Pos(1433, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/LooseTypeCheckTest.java
Name: testFunctionInference7
Childs: [StatementAssertion<Begin: Pos(1430, 5), End: Pos(1432, 60)>,
]
@@@
Split test: com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference8
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/LooseTypeCheckTest.java
# check: Use pattern matching: .testFunctionType
Begin: Pos(1435, 10)
End: Pos(1439, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/LooseTypeCheckTest.java
Name: testFunctionInference8
Childs: [StatementAssertion<Begin: Pos(1436, 5), End: Pos(1438, 34)>,
]
@@@
Split test: com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference9
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/LooseTypeCheckTest.java
# check: Use pattern matching: .testFunctionType
Begin: Pos(1441, 10)
End: Pos(1445, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/LooseTypeCheckTest.java
Name: testFunctionInference9
Childs: [StatementAssertion<Begin: Pos(1442, 5), End: Pos(1444, 34)>,
]
@@@
Split test: com.google.javascript.jscomp.LooseTypeCheckTest::testInterfaceInheritanceCheck7
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/LooseTypeCheckTest.java
Begin: Pos(5706, 10)
End: Pos(5717, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/LooseTypeCheckTest.java
Name: testInterfaceInheritanceCheck7
Childs: [StatementAssertion<Begin: Pos(5707, 5), End: Pos(5716, 60)>,
]
@@@
Split test: com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateStaticMethodDecl1
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/LooseTypeCheckTest.java
Begin: Pos(1850, 10)
End: Pos(1858, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/LooseTypeCheckTest.java
Name: testDuplicateStaticMethodDecl1
Childs: [StatementAssertion<Begin: Pos(1851, 5), End: Pos(1857, 50)>,
]
@@@
Split test: com.google.javascript.jscomp.LooseTypeCheckTest::testDuplicateStaticMethodDecl5
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/LooseTypeCheckTest.java
Begin: Pos(1882, 10)
End: Pos(1890, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/LooseTypeCheckTest.java
Name: testDuplicateStaticMethodDecl5
Childs: [StatementAssertion<Begin: Pos(1883, 5), End: Pos(1889, 35)>,
]
@@@
Split test: com.google.javascript.jscomp.TypeCheckTest::testNestedFunctionInference1
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/TypeCheckTest.java
# check: Use pattern matching: .testFunctionType
Begin: Pos(2038, 10)
End: Pos(2044, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/TypeCheckTest.java
Name: testNestedFunctionInference1
Childs: [StatementAssertion<Begin: Pos(2042, 5), End: Pos(2043, 40)>,
]
@@@
Split test: com.google.javascript.jscomp.TypeCheckTest::testScoping10
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/TypeCheckTest.java
Begin: Pos(1224, 10)
End: Pos(1234, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/TypeCheckTest.java
Name: testScoping10
Childs: [StatementAssertion<Begin: Pos(1228, 5), End: Pos(1228, 47)>,
StatementAssertion<Begin: Pos(1229, 5), End: Pos(1229, 48)>,
StatementAssertion<Begin: Pos(1232, 5), End: Pos(1233, 50)>,
]
---
public void testScoping10_catena_0()throws Exception {
    TypeCheckResult p = parseAndTypeCheckWithScope("var a = function b(){};");
    assertTrue(p.scope.isDeclared("a", false));
    
}

---
---
public void testScoping10_catena_1()throws Exception {
    TypeCheckResult p = parseAndTypeCheckWithScope("var a = function b(){};");
    assertFalse(p.scope.isDeclared("b", false));
    
}

---
---
public void testScoping10_catena_2()throws Exception {
    TypeCheckResult p = parseAndTypeCheckWithScope("var a = function b(){};");
    assertEquals("function (): undefined", p.scope.getVar("a").getType().toString());
    
}

---
@@@
Split test: com.google.javascript.jscomp.TypeCheckTest::testDuplicateOldTypeDef
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/TypeCheckTest.java
Begin: Pos(6420, 10)
End: Pos(6428, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/TypeCheckTest.java
Name: testDuplicateOldTypeDef
Childs: [StatementAssertion<Begin: Pos(6421, 5), End: Pos(6427, 57)>,
]
@@@
Split test: com.google.javascript.jscomp.TypeCheckTest::testInferredReturn1
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/TypeCheckTest.java
Begin: Pos(3694, 10)
End: Pos(3701, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/TypeCheckTest.java
Name: testInferredReturn1
Childs: [StatementAssertion<Begin: Pos(3695, 5), End: Pos(3700, 28)>,
]
@@@
Split test: com.google.javascript.jscomp.TypeCheckTest::testInferredReturn2
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/TypeCheckTest.java
Begin: Pos(3703, 10)
End: Pos(3712, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/TypeCheckTest.java
Name: testInferredReturn2
Childs: [StatementAssertion<Begin: Pos(3704, 5), End: Pos(3711, 28)>,
]
@@@
Split test: com.google.javascript.jscomp.TypeCheckTest::testInferredReturn3
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/TypeCheckTest.java
Begin: Pos(3714, 10)
End: Pos(3725, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/TypeCheckTest.java
Name: testInferredReturn3
Childs: [StatementAssertion<Begin: Pos(3715, 5), End: Pos(3724, 52)>,
]
@@@
Split test: com.google.javascript.jscomp.TypeCheckTest::testInferredReturn4
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/TypeCheckTest.java
Begin: Pos(3727, 10)
End: Pos(3737, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/TypeCheckTest.java
Name: testInferredReturn4
Childs: [StatementAssertion<Begin: Pos(3731, 5), End: Pos(3736, 44)>,
]
@@@
Split test: com.google.javascript.jscomp.TypeCheckTest::testInferredReturn6
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/TypeCheckTest.java
Begin: Pos(3753, 10)
End: Pos(3766, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/TypeCheckTest.java
Name: testInferredReturn6
Childs: [StatementAssertion<Begin: Pos(3754, 5), End: Pos(3765, 28)>,
]
@@@
Split test: com.google.javascript.jscomp.TypeCheckTest::testBadConstructorCall
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/TypeCheckTest.java
Begin: Pos(5067, 10)
End: Pos(5073, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/TypeCheckTest.java
Name: testBadConstructorCall
Childs: [StatementAssertion<Begin: Pos(5068, 5), End: Pos(5072, 36)>,
]
@@@
Split test: com.google.javascript.jscomp.TypeCheckTest::testDontAddMethodsIfNoConstructor
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/TypeCheckTest.java
Begin: Pos(5379, 10)
End: Pos(5391, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/TypeCheckTest.java
Name: testDontAddMethodsIfNoConstructor
Childs: [StatementAssertion<Begin: Pos(5386, 5), End: Pos(5386, 69)>,
StatementAssertion<Begin: Pos(5387, 5), End: Pos(5388, 49)>,
StatementAssertion<Begin: Pos(5389, 5), End: Pos(5390, 49)>,
]
---
public void testDontAddMethodsIfNoConstructor_catena_0()throws Exception {
    Node js1Node = parseAndTypeCheck("function A() {}" + "A.prototype = {m1: 5, m2: true}");
    JSType functionAType = js1Node.getFirstChild().getJSType();
    assertEquals("function (): undefined", functionAType.toString());
    
}

---
---
public void testDontAddMethodsIfNoConstructor_catena_1()throws Exception {
    Node js1Node = parseAndTypeCheck("function A() {}" + "A.prototype = {m1: 5, m2: true}");
    JSType functionAType = js1Node.getFirstChild().getJSType();
    assertEquals(UNKNOWN_TYPE, U2U_FUNCTION_TYPE.getPropertyType("m1"));
    
}

---
---
public void testDontAddMethodsIfNoConstructor_catena_2()throws Exception {
    Node js1Node = parseAndTypeCheck("function A() {}" + "A.prototype = {m1: 5, m2: true}");
    JSType functionAType = js1Node.getFirstChild().getJSType();
    assertEquals(UNKNOWN_TYPE, U2U_FUNCTION_TYPE.getPropertyType("m2"));
    
}

---
@@@
Split test: com.google.javascript.jscomp.TypeCheckTest::testInterfaceInheritanceCheck11
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/TypeCheckTest.java
Begin: Pos(5636, 10)
End: Pos(5647, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/TypeCheckTest.java
Name: testInterfaceInheritanceCheck11
Childs: [StatementAssertion<Begin: Pos(5637, 5), End: Pos(5646, 60)>,
]
@@@
Split test: com.google.javascript.jscomp.TypeCheckTest::testErrorMismatchingPropertyOnInterface5
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/TypeCheckTest.java
Begin: Pos(6029, 10)
End: Pos(6035, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/TypeCheckTest.java
Name: testErrorMismatchingPropertyOnInterface5
Childs: [StatementAssertion<Begin: Pos(6030, 5), End: Pos(6034, 28)>,
]
@@@
Split test: com.google.javascript.jscomp.TypeCheckTest::testDuplicateTypeDef
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/TypeCheckTest.java
Begin: Pos(6468, 10)
End: Pos(6476, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/TypeCheckTest.java
Name: testDuplicateTypeDef
Childs: [StatementAssertion<Begin: Pos(6469, 5), End: Pos(6475, 57)>,
]
@@@
Split test: com.google.javascript.jscomp.TypeCheckTest::testBug911118
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/TypeCheckTest.java
Begin: Pos(4336, 10)
End: Pos(4347, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/TypeCheckTest.java
Name: testBug911118
Childs: [StatementAssertion<Begin: Pos(4340, 5), End: Pos(4340, 60)>,
StatementAssertion<Begin: Pos(4343, 5), End: Pos(4346, 18)>,
]
---
public void testBug911118_catena_0()throws Exception {
    Scope s = parseAndTypeCheckWithScope("var a = function(){};").scope;
    JSType type = s.getVar("a").getType();
    assertEquals("function (): undefined", type.toString());
    
}

---
---
public void testBug911118_catena_1()throws Exception {
    Scope s = parseAndTypeCheckWithScope("var a = function(){};").scope;
    JSType type = s.getVar("a").getType();
    testTypes("function nullFunction() {};" + "var foo = nullFunction;" + "foo = function() {};" + "foo();");
    
}

---
@@@
Split test: com.google.javascript.jscomp.TypeCheckTest::testFunctionInference12
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/TypeCheckTest.java
# check: Use pattern matching: .testFunctionType
Begin: Pos(1442, 10)
End: Pos(1448, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/TypeCheckTest.java
Name: testFunctionInference12
Childs: [StatementAssertion<Begin: Pos(1443, 5), End: Pos(1447, 34)>,
]
@@@
Split test: com.google.javascript.jscomp.TypeCheckTest::testFunctionInference13
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/TypeCheckTest.java
# check: Use pattern matching: .testFunctionType
Begin: Pos(1450, 10)
End: Pos(1457, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/TypeCheckTest.java
Name: testFunctionInference13
Childs: [StatementAssertion<Begin: Pos(1451, 5), End: Pos(1456, 42)>,
]
@@@
Split test: com.google.javascript.jscomp.TypeCheckTest::testFunctionInference15
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/TypeCheckTest.java
# check: Use pattern matching: .testFunctionType
Begin: Pos(1468, 10)
End: Pos(1474, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/TypeCheckTest.java
Name: testFunctionInference15
Childs: [StatementAssertion<Begin: Pos(1469, 5), End: Pos(1473, 40)>,
]
@@@
Split test: com.google.javascript.jscomp.TypeCheckTest::testFunctionInference16
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/TypeCheckTest.java
# check: Use pattern matching: .testFunctionType
Begin: Pos(1476, 10)
End: Pos(1482, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/TypeCheckTest.java
Name: testFunctionInference16
Childs: [StatementAssertion<Begin: Pos(1477, 5), End: Pos(1481, 40)>,
]
@@@
Split test: com.google.javascript.jscomp.TypeCheckTest::testPrototypePropertyReference
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/TypeCheckTest.java
Begin: Pos(6559, 10)
End: Pos(6576, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/TypeCheckTest.java
Name: testPrototypePropertyReference
Childs: [StatementAssertion<Begin: Pos(6569, 5), End: Pos(6569, 46)>,
StatementAssertion<Begin: Pos(6570, 5), End: Pos(6570, 48)>,
StatementAssertion<Begin: Pos(6572, 5), End: Pos(6572, 72)>,
StatementAssertion<Begin: Pos(6574, 5), End: Pos(6575, 75)>,
]
---
public void testPrototypePropertyReference_catena_0()throws Exception {
    TypeCheckResult p = parseAndTypeCheckWithScope("" + "/** @constructor */\n" + "function Foo() {}\n" + "/** @param {number} a */\n" + "Foo.prototype.bar = function(a){};\n" + "/** @param {Foo} f */\n" + "function baz(f) {\n" + "  Foo.prototype.bar.call(f, 3);\n" + "}");
    assertEquals(0, compiler.getErrorCount());
    FunctionType fooType = (FunctionType)p.scope.getVar("Foo").getType();
    
}

---
---
public void testPrototypePropertyReference_catena_1()throws Exception {
    TypeCheckResult p = parseAndTypeCheckWithScope("" + "/** @constructor */\n" + "function Foo() {}\n" + "/** @param {number} a */\n" + "Foo.prototype.bar = function(a){};\n" + "/** @param {Foo} f */\n" + "function baz(f) {\n" + "  Foo.prototype.bar.call(f, 3);\n" + "}");
    assertEquals(0, compiler.getWarningCount());
    FunctionType fooType = (FunctionType)p.scope.getVar("Foo").getType();
    
}

---
---
public void testPrototypePropertyReference_catena_2()throws Exception {
    TypeCheckResult p = parseAndTypeCheckWithScope("" + "/** @constructor */\n" + "function Foo() {}\n" + "/** @param {number} a */\n" + "Foo.prototype.bar = function(a){};\n" + "/** @param {Foo} f */\n" + "function baz(f) {\n" + "  Foo.prototype.bar.call(f, 3);\n" + "}");
    assertTrue(p.scope.getVar("Foo").getType()instanceof FunctionType);
    FunctionType fooType = (FunctionType)p.scope.getVar("Foo").getType();
    
}

---
---
public void testPrototypePropertyReference_catena_3()throws Exception {
    TypeCheckResult p = parseAndTypeCheckWithScope("" + "/** @constructor */\n" + "function Foo() {}\n" + "/** @param {number} a */\n" + "Foo.prototype.bar = function(a){};\n" + "/** @param {Foo} f */\n" + "function baz(f) {\n" + "  Foo.prototype.bar.call(f, 3);\n" + "}");
    FunctionType fooType = (FunctionType)p.scope.getVar("Foo").getType();
    assertEquals("function (this:Foo, number): undefined", fooType.getPrototype().getPropertyType("bar").toString());
    
}

---
@@@
Split test: com.google.javascript.jscomp.TypeCheckTest::testGoodExtends7
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/TypeCheckTest.java
# check: Use pattern matching: .testFunctionType
Begin: Pos(2646, 10)
End: Pos(2654, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/TypeCheckTest.java
Name: testGoodExtends7
Childs: [StatementAssertion<Begin: Pos(2647, 5), End: Pos(2653, 46)>,
]
@@@
Split test: com.google.javascript.jscomp.TypeCheckTest::testTypeRedefinition
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/TypeCheckTest.java
Begin: Pos(2070, 10)
End: Pos(2075, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/TypeCheckTest.java
Name: testTypeRedefinition
Childs: [StatementAssertion<Begin: Pos(2071, 5), End: Pos(2074, 67)>,
]
@@@
Split test: com.google.javascript.jscomp.TypeCheckTest::testFunctionInference1
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/TypeCheckTest.java
# check: Use pattern matching: .testFunctionType
Begin: Pos(1373, 10)
End: Pos(1377, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/TypeCheckTest.java
Name: testFunctionInference1
Childs: [StatementAssertion<Begin: Pos(1374, 5), End: Pos(1376, 35)>,
]
@@@
Split test: com.google.javascript.jscomp.TypeCheckTest::testFunctionInference2
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/TypeCheckTest.java
# check: Use pattern matching: .testFunctionType
Begin: Pos(1379, 10)
End: Pos(1383, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/TypeCheckTest.java
Name: testFunctionInference2
Childs: [StatementAssertion<Begin: Pos(1380, 5), End: Pos(1382, 38)>,
]
@@@
Split test: com.google.javascript.jscomp.TypeCheckTest::testFunctionInference3
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/TypeCheckTest.java
# check: Use pattern matching: .testFunctionType
Begin: Pos(1385, 10)
End: Pos(1389, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/TypeCheckTest.java
Name: testFunctionInference3
Childs: [StatementAssertion<Begin: Pos(1386, 5), End: Pos(1388, 40)>,
]
@@@
Split test: com.google.javascript.jscomp.TypeCheckTest::testFunctionInference4
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/TypeCheckTest.java
# check: Use pattern matching: .testFunctionType
Begin: Pos(1391, 10)
End: Pos(1395, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/TypeCheckTest.java
Name: testFunctionInference4
Childs: [StatementAssertion<Begin: Pos(1392, 5), End: Pos(1394, 49)>,
]
@@@
Split test: com.google.javascript.jscomp.TypeCheckTest::testFunctionInference7
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/TypeCheckTest.java
# check: Use pattern matching: .testFunctionType
Begin: Pos(1409, 10)
End: Pos(1413, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/TypeCheckTest.java
Name: testFunctionInference7
Childs: [StatementAssertion<Begin: Pos(1410, 5), End: Pos(1412, 60)>,
]
@@@
Split test: com.google.javascript.jscomp.TypeCheckTest::testFunctionInference8
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/TypeCheckTest.java
# check: Use pattern matching: .testFunctionType
Begin: Pos(1415, 10)
End: Pos(1419, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/TypeCheckTest.java
Name: testFunctionInference8
Childs: [StatementAssertion<Begin: Pos(1416, 5), End: Pos(1418, 34)>,
]
@@@
Split test: com.google.javascript.jscomp.TypeCheckTest::testFunctionInference9
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/TypeCheckTest.java
# check: Use pattern matching: .testFunctionType
Begin: Pos(1421, 10)
End: Pos(1425, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/TypeCheckTest.java
Name: testFunctionInference9
Childs: [StatementAssertion<Begin: Pos(1422, 5), End: Pos(1424, 34)>,
]
@@@
Split test: com.google.javascript.jscomp.TypeCheckTest::testInterfaceInheritanceCheck7
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/TypeCheckTest.java
Begin: Pos(5776, 10)
End: Pos(5787, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/TypeCheckTest.java
Name: testInterfaceInheritanceCheck7
Childs: [StatementAssertion<Begin: Pos(5777, 5), End: Pos(5786, 60)>,
]
@@@
Split test: com.google.javascript.jscomp.TypeCheckTest::testDuplicateStaticMethodDecl1
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/TypeCheckTest.java
Begin: Pos(1830, 10)
End: Pos(1837, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/TypeCheckTest.java
Name: testDuplicateStaticMethodDecl1
Childs: [StatementAssertion<Begin: Pos(1831, 5), End: Pos(1836, 86)>,
]
@@@
Split test: com.google.javascript.jscomp.TypeCheckTest::testDuplicateStaticMethodDecl5
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/TypeCheckTest.java
Begin: Pos(1861, 10)
End: Pos(1869, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/TypeCheckTest.java
Name: testDuplicateStaticMethodDecl5
Childs: [StatementAssertion<Begin: Pos(1862, 5), End: Pos(1868, 35)>,
]
@@@
Split test: com.google.javascript.jscomp.TypedScopeCreatorTest::testConstructorNode
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/TypedScopeCreatorTest.java
Begin: Pos(549, 10)
End: Pos(556, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/TypedScopeCreatorTest.java
Name: testConstructorNode
Childs: [StatementAssertion<Begin: Pos(550, 5), End: Pos(550, 77)>,
StatementAssertion<Begin: Pos(553, 5), End: Pos(553, 24)>,
StatementAssertion<Begin: Pos(554, 5), End: Pos(554, 37)>,
StatementAssertion<Begin: Pos(555, 5), End: Pos(555, 73)>,
]
---
public void testConstructorNode_catena_0() {
    testSame("var goog = {}; /** @constructor */ goog.Foo = function() {};");
    ObjectType ctor = (ObjectType)(findNameType("goog.Foo", globalScope));
    
}

---
---
public void testConstructorNode_catena_1() {
    ObjectType ctor = (ObjectType)(findNameType("goog.Foo", globalScope));
    assertNotNull(ctor);
    
}

---
---
public void testConstructorNode_catena_2() {
    ObjectType ctor = (ObjectType)(findNameType("goog.Foo", globalScope));
    assertTrue(ctor.isConstructor());
    
}

---
---
public void testConstructorNode_catena_3() {
    ObjectType ctor = (ObjectType)(findNameType("goog.Foo", globalScope));
    assertEquals("function (this:goog.Foo): undefined", ctor.toString());
    
}

---
@@@
Split test: com.google.javascript.jscomp.TypedScopeCreatorTest::testPropertiesOnInterface
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/TypedScopeCreatorTest.java
Begin: Pos(330, 10)
End: Pos(349, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/TypedScopeCreatorTest.java
Name: testPropertiesOnInterface
Childs: [StatementAssertion<Begin: Pos(331, 5), End: Pos(333, 43)>,
StatementAssertion<Begin: Pos(336, 5), End: Pos(336, 65)>,
StatementAssertion<Begin: Pos(337, 5), End: Pos(337, 42)>,
StatementAssertion<Begin: Pos(341, 5), End: Pos(341, 55)>,
StatementAssertion<Begin: Pos(342, 5), End: Pos(342, 53)>,
StatementAssertion<Begin: Pos(344, 5), End: Pos(344, 73)>,
StatementAssertion<Begin: Pos(345, 5), End: Pos(346, 54)>,
StatementAssertion<Begin: Pos(348, 5), End: Pos(348, 74)>,
]
---
public void testPropertiesOnInterface_catena_0()throws Exception {
    testSame("/** @interface */ var I = function() {};" + "/** @type {number} */ I.prototype.bar;" + "I.prototype.baz = function(){};");
    Var i = globalScope.getVar("I");
    ObjectType iPrototype = (ObjectType)((ObjectType)i.getType()).getPropertyType("prototype");
    
}

---
---
public void testPropertiesOnInterface_catena_1()throws Exception {
    Var i = globalScope.getVar("I");
    assertEquals("function (this:I): ?", i.getType().toString());
    ObjectType iPrototype = (ObjectType)((ObjectType)i.getType()).getPropertyType("prototype");
    
}

---
---
public void testPropertiesOnInterface_catena_2()throws Exception {
    Var i = globalScope.getVar("I");
    assertTrue(i.getType().isInterface());
    ObjectType iPrototype = (ObjectType)((ObjectType)i.getType()).getPropertyType("prototype");
    
}

---
---
public void testPropertiesOnInterface_catena_3()throws Exception {
    Var i = globalScope.getVar("I");
    ObjectType iPrototype = (ObjectType)((ObjectType)i.getType()).getPropertyType("prototype");
    assertEquals("I.prototype", iPrototype.toString());
    
}

---
---
public void testPropertiesOnInterface_catena_4()throws Exception {
    Var i = globalScope.getVar("I");
    ObjectType iPrototype = (ObjectType)((ObjectType)i.getType()).getPropertyType("prototype");
    assertTrue(iPrototype.isFunctionPrototypeType());
    
}

---
---
public void testPropertiesOnInterface_catena_5()throws Exception {
    Var i = globalScope.getVar("I");
    ObjectType iPrototype = (ObjectType)((ObjectType)i.getType()).getPropertyType("prototype");
    assertEquals("number", iPrototype.getPropertyType("bar").toString());
    
}

---
---
public void testPropertiesOnInterface_catena_6()throws Exception {
    Var i = globalScope.getVar("I");
    ObjectType iPrototype = (ObjectType)((ObjectType)i.getType()).getPropertyType("prototype");
    assertEquals("function (this:I): undefined", iPrototype.getPropertyType("baz").toString());
    
}

---
---
public void testPropertiesOnInterface_catena_7()throws Exception {
    Var i = globalScope.getVar("I");
    ObjectType iPrototype = (ObjectType)((ObjectType)i.getType()).getPropertyType("prototype");
    assertEquals(iPrototype, globalScope.getVar("I.prototype").getType());
    
}

---
@@@
Split test: com.google.javascript.jscomp.TypedScopeCreatorTest::testMethodBeforeFunction
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/TypedScopeCreatorTest.java
Begin: Pos(254, 10)
End: Pos(271, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/TypedScopeCreatorTest.java
Name: testMethodBeforeFunction
Childs: [StatementAssertion<Begin: Pos(255, 5), End: Pos(260, 27)>,
StatementAssertion<Begin: Pos(262, 5), End: Pos(262, 41)>,
StatementAssertion<Begin: Pos(263, 5), End: Pos(263, 65)>,
StatementAssertion<Begin: Pos(264, 5), End: Pos(265, 47)>,
StatementAssertion<Begin: Pos(266, 5), End: Pos(266, 50)>,
StatementAssertion<Begin: Pos(269, 5), End: Pos(270, 47)>,
]
---
public void testMethodBeforeFunction_catena_0()throws Exception {
    testSame("var y = Window.prototype;" + "Window.prototype.alert = function(message) {};" + "/** @constructor */ function Window() {}\n" + "var window = new Window(); \n" + "var x = window;");
    ObjectType x = (ObjectType)findNameType("x", globalScope);
    ObjectType y = (ObjectType)findNameType("y", globalScope);
    
}

---
---
public void testMethodBeforeFunction_catena_1()throws Exception {
    ObjectType x = (ObjectType)findNameType("x", globalScope);
    assertEquals("Window", x.toString());
    ObjectType y = (ObjectType)findNameType("y", globalScope);
    
}

---
---
public void testMethodBeforeFunction_catena_2()throws Exception {
    ObjectType x = (ObjectType)findNameType("x", globalScope);
    assertTrue(x.getImplicitPrototype().hasOwnProperty("alert"));
    ObjectType y = (ObjectType)findNameType("y", globalScope);
    
}

---
---
public void testMethodBeforeFunction_catena_3()throws Exception {
    ObjectType x = (ObjectType)findNameType("x", globalScope);
    assertEquals("function (this:Window, ?): undefined", x.getPropertyType("alert").toString());
    ObjectType y = (ObjectType)findNameType("y", globalScope);
    
}

---
---
public void testMethodBeforeFunction_catena_4()throws Exception {
    ObjectType x = (ObjectType)findNameType("x", globalScope);
    assertTrue(x.isPropertyTypeDeclared("alert"));
    ObjectType y = (ObjectType)findNameType("y", globalScope);
    
}

---
---
public void testMethodBeforeFunction_catena_5()throws Exception {
    ObjectType x = (ObjectType)findNameType("x", globalScope);
    ObjectType y = (ObjectType)findNameType("y", globalScope);
    assertEquals("function (this:Window, ?): undefined", y.getPropertyType("alert").toString());
    
}

---
@@@
Split test: com.google.javascript.jscomp.TypedScopeCreatorTest::testConstructorProperty
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/TypedScopeCreatorTest.java
Begin: Pos(96, 10)
End: Pos(105, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/TypedScopeCreatorTest.java
Name: testConstructorProperty
Childs: [StatementAssertion<Begin: Pos(97, 5), End: Pos(97, 75)>,
StatementAssertion<Begin: Pos(99, 5), End: Pos(99, 39)>,
StatementAssertion<Begin: Pos(100, 5), End: Pos(100, 51)>,
StatementAssertion<Begin: Pos(103, 5), End: Pos(103, 74)>,
StatementAssertion<Begin: Pos(104, 5), End: Pos(104, 77)>,
]
---
public void testConstructorProperty_catena_0() {
    testSame("var foo = {}; /** @constructor */ foo.Bar = function() {};");
    ObjectType foo = (ObjectType)findNameType("foo", globalScope);
    JSType fooBar = foo.getPropertyType("Bar");
    
}

---
---
public void testConstructorProperty_catena_1() {
    ObjectType foo = (ObjectType)findNameType("foo", globalScope);
    assertTrue(foo.hasProperty("Bar"));
    JSType fooBar = foo.getPropertyType("Bar");
    
}

---
---
public void testConstructorProperty_catena_2() {
    ObjectType foo = (ObjectType)findNameType("foo", globalScope);
    assertFalse(foo.isPropertyTypeInferred("Bar"));
    JSType fooBar = foo.getPropertyType("Bar");
    
}

---
---
public void testConstructorProperty_catena_3() {
    ObjectType foo = (ObjectType)findNameType("foo", globalScope);
    JSType fooBar = foo.getPropertyType("Bar");
    assertEquals("function (this:foo.Bar): undefined", fooBar.toString());
    
}

---
---
public void testConstructorProperty_catena_4() {
    ObjectType foo = (ObjectType)findNameType("foo", globalScope);
    JSType fooBar = foo.getPropertyType("Bar");
    assertEquals(Sets.newHashSet(foo), registry.getTypesWithProperty("Bar"));
    
}

---
@@@
Split test: com.google.javascript.jscomp.TypedScopeCreatorTest::testReturnTypeInference1
file: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/TypedScopeCreatorTest.java
Begin: Pos(688, 10)
End: Pos(693, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_144/test//com/google/javascript/jscomp/TypedScopeCreatorTest.java
Name: testReturnTypeInference1
Childs: [StatementAssertion<Begin: Pos(689, 5), End: Pos(689, 32)>,
StatementAssertion<Begin: Pos(690, 5), End: Pos(692, 51)>,
]
---
public void testReturnTypeInference1_catena_0() {
    testSame("function f() {}");
    
}

---
---
public void testReturnTypeInference1_catena_1() {
    assertEquals("function (): undefined", findNameType("f", globalScope).toString());
    
}

---
--------------------
Run: Closure_128
@@@
Split test: com.google.javascript.jscomp.CodePrinterTest::testIssue942
file: /root/workbench/exportInfo/d4j_buggy/Closure_128/test//com/google/javascript/jscomp/CodePrinterTest.java
Begin: Pos(1422, 10)
End: Pos(1424, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_128/test//com/google/javascript/jscomp/CodePrinterTest.java
Name: testIssue942
Childs: [StatementAssertion<Begin: Pos(1423, 5), End: Pos(1423, 50)>,
]
--------------------
Run: Closure_172
@@@
Split test: com.google.javascript.jscomp.TypeCheckTest::testIssue1024
file: /root/workbench/exportInfo/d4j_buggy/Closure_172/test//com/google/javascript/jscomp/TypeCheckTest.java
Begin: Pos(11992, 10)
End: Pos(12021, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_172/test//com/google/javascript/jscomp/TypeCheckTest.java
Name: testIssue1024
Childs: [StatementAssertion<Begin: Pos(11993, 6), End: Pos(12003, 15)>,
StatementAssertion<Begin: Pos(12008, 6), End: Pos(12020, 44)>,
]
---
public void testIssue1024_catena_0()throws Exception {
    testTypes("/** @param {Object} a */\n" + "function f(a) {\n" + "  a.prototype = '__proto'\n" + "}\n" + "/** @param {Object} b\n" + " *  @return {!Object}\n" + " */\n" + "function g(b) {\n" + "  return b.prototype\n" + "}\n");
    
}

---
---
public void testIssue1024_catena_1()throws Exception {
    testTypes("/** @param {Object} a */\n" + "function f(a) {\n" + "  a.prototype = {foo:3};\n" + "}\n" + "/** @param {Object} b\n" + " */\n" + "function g(b) {\n" + "  b.prototype = function(){};\n" + "}\n", "assignment to property prototype of Object\n" + "found   : {foo: number}\n" + "required: function (): undefined");
    
}

---
--------------------
Run: Closure_6
@@@
Split test: com.google.javascript.jscomp.LooseTypeCheckTest::testTypeRedefinition
file: /root/workbench/exportInfo/d4j_buggy/Closure_6/test//com/google/javascript/jscomp/LooseTypeCheckTest.java
Begin: Pos(2120, 10)
End: Pos(2130, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_6/test//com/google/javascript/jscomp/LooseTypeCheckTest.java
Name: testTypeRedefinition
Childs: [StatementAssertion<Begin: Pos(2121, 5), End: Pos(2129, 36)>,
]
@@@
Split test: com.google.javascript.jscomp.TypeCheckTest::testIssue635b
file: /root/workbench/exportInfo/d4j_buggy/Closure_6/test//com/google/javascript/jscomp/TypeCheckTest.java
Begin: Pos(6341, 10)
End: Pos(6351, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_6/test//com/google/javascript/jscomp/TypeCheckTest.java
Name: testIssue635b
Childs: [StatementAssertion<Begin: Pos(6342, 5), End: Pos(6350, 41)>,
]
@@@
Split test: com.google.javascript.jscomp.TypeCheckTest::testTypeRedefinition
file: /root/workbench/exportInfo/d4j_buggy/Closure_6/test//com/google/javascript/jscomp/TypeCheckTest.java
Begin: Pos(2515, 10)
End: Pos(2524, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_6/test//com/google/javascript/jscomp/TypeCheckTest.java
Name: testTypeRedefinition
Childs: [StatementAssertion<Begin: Pos(2516, 5), End: Pos(2523, 36)>,
]
--------------------
Run: Closure_94
@@@
Split test: com.google.javascript.jscomp.NodeUtilTest::testValidDefine
file: /root/workbench/exportInfo/d4j_buggy/Closure_94/test//com/google/javascript/jscomp/NodeUtilTest.java
Begin: Pos(1071, 10)
End: Pos(1090, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_94/test//com/google/javascript/jscomp/NodeUtilTest.java
Name: testValidDefine
Childs: [StatementAssertion<Begin: Pos(1072, 5), End: Pos(1072, 42)>,
StatementAssertion<Begin: Pos(1073, 5), End: Pos(1073, 43)>,
StatementAssertion<Begin: Pos(1074, 5), End: Pos(1074, 45)>,
StatementAssertion<Begin: Pos(1075, 5), End: Pos(1075, 46)>,
StatementAssertion<Begin: Pos(1076, 5), End: Pos(1076, 46)>,
StatementAssertion<Begin: Pos(1078, 5), End: Pos(1078, 43)>,
StatementAssertion<Begin: Pos(1079, 5), End: Pos(1079, 46)>,
StatementAssertion<Begin: Pos(1080, 5), End: Pos(1080, 51)>,
StatementAssertion<Begin: Pos(1081, 5), End: Pos(1081, 45)>,
StatementAssertion<Begin: Pos(1083, 5), End: Pos(1083, 46)>,
StatementAssertion<Begin: Pos(1084, 5), End: Pos(1084, 46)>,
StatementAssertion<Begin: Pos(1085, 5), End: Pos(1085, 46)>,
StatementAssertion<Begin: Pos(1086, 5), End: Pos(1086, 46)>,
StatementAssertion<Begin: Pos(1087, 5), End: Pos(1087, 50)>,
StatementAssertion<Begin: Pos(1089, 5), End: Pos(1089, 49)>,
]
---
public void testValidDefine_catena_0() {
    assertTrue(testValidDefineValue("1"));
    
}

---
---
public void testValidDefine_catena_1() {
    assertTrue(testValidDefineValue("-3"));
    
}

---
---
public void testValidDefine_catena_2() {
    assertTrue(testValidDefineValue("true"));
    
}

---
---
public void testValidDefine_catena_3() {
    assertTrue(testValidDefineValue("false"));
    
}

---
---
public void testValidDefine_catena_4() {
    assertTrue(testValidDefineValue("'foo'"));
    
}

---
---
public void testValidDefine_catena_5() {
    assertFalse(testValidDefineValue("x"));
    
}

---
---
public void testValidDefine_catena_6() {
    assertFalse(testValidDefineValue("null"));
    
}

---
---
public void testValidDefine_catena_7() {
    assertFalse(testValidDefineValue("undefined"));
    
}

---
---
public void testValidDefine_catena_8() {
    assertFalse(testValidDefineValue("NaN"));
    
}

---
---
public void testValidDefine_catena_9() {
    assertTrue(testValidDefineValue("!true"));
    
}

---
---
public void testValidDefine_catena_10() {
    assertTrue(testValidDefineValue("-true"));
    
}

---
---
public void testValidDefine_catena_11() {
    assertTrue(testValidDefineValue("1 & 8"));
    
}

---
---
public void testValidDefine_catena_12() {
    assertTrue(testValidDefineValue("1 + 8"));
    
}

---
---
public void testValidDefine_catena_13() {
    assertTrue(testValidDefineValue("'a' + 'b'"));
    
}

---
---
public void testValidDefine_catena_14() {
    assertFalse(testValidDefineValue("1 & foo"));
    
}

---
@@@
Split test: com.google.javascript.jscomp.ProcessDefinesTest::testOverridingString1
file: /root/workbench/exportInfo/d4j_buggy/Closure_94/test//com/google/javascript/jscomp/ProcessDefinesTest.java
Begin: Pos(146, 10)
End: Pos(150, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_94/test//com/google/javascript/jscomp/ProcessDefinesTest.java
Name: testOverridingString1
Childs: [StatementAssertion<Begin: Pos(147, 5), End: Pos(149, 49)>,
]
@@@
Split test: com.google.javascript.jscomp.ProcessDefinesTest::testOverridingString3
file: /root/workbench/exportInfo/d4j_buggy/Closure_94/test//com/google/javascript/jscomp/ProcessDefinesTest.java
Begin: Pos(159, 10)
End: Pos(164, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_94/test//com/google/javascript/jscomp/ProcessDefinesTest.java
Name: testOverridingString3
Childs: [StatementAssertion<Begin: Pos(161, 5), End: Pos(163, 43)>,
]
--------------------
Run: Closure_41
@@@
Split test: com.google.javascript.jscomp.LooseTypeCheckTest::testMethodInference6
file: /root/workbench/exportInfo/d4j_buggy/Closure_41/test//com/google/javascript/jscomp/LooseTypeCheckTest.java
Begin: Pos(1771, 10)
End: Pos(1779, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_41/test//com/google/javascript/jscomp/LooseTypeCheckTest.java
Name: testMethodInference6
Childs: [StatementAssertion<Begin: Pos(1772, 5), End: Pos(1778, 29)>,
]
@@@
Split test: com.google.javascript.jscomp.TypeCheckTest::testIssue368
file: /root/workbench/exportInfo/d4j_buggy/Closure_41/test//com/google/javascript/jscomp/TypeCheckTest.java
Begin: Pos(5325, 10)
End: Pos(5344, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_41/test//com/google/javascript/jscomp/TypeCheckTest.java
Name: testIssue368
Childs: [StatementAssertion<Begin: Pos(5326, 5), End: Pos(5343, 28)>,
]
@@@
Split test: com.google.javascript.jscomp.TypeCheckTest::testMethodInference6
file: /root/workbench/exportInfo/d4j_buggy/Closure_41/test//com/google/javascript/jscomp/TypeCheckTest.java
Begin: Pos(2026, 10)
End: Pos(2034, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_41/test//com/google/javascript/jscomp/TypeCheckTest.java
Name: testMethodInference6
Childs: [StatementAssertion<Begin: Pos(2027, 5), End: Pos(2033, 29)>,
]
--------------------
Run: Closure_40
@@@
Split test: com.google.javascript.jscomp.IntegrationTest::testIssue284
file: /root/workbench/exportInfo/d4j_buggy/Closure_40/test//com/google/javascript/jscomp/IntegrationTest.java
Begin: Pos(1766, 10)
End: Pos(1782, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_40/test//com/google/javascript/jscomp/IntegrationTest.java
Name: testIssue284
Childs: [StatementAssertion<Begin: Pos(1769, 5), End: Pos(1781, 12)>,
]
@@@
Split test: com.google.javascript.jscomp.NameAnalyzerTest::testIssue284
file: /root/workbench/exportInfo/d4j_buggy/Closure_40/test//com/google/javascript/jscomp/NameAnalyzerTest.java
Begin: Pos(1643, 10)
End: Pos(1657, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_40/test//com/google/javascript/jscomp/NameAnalyzerTest.java
Name: testIssue284
Childs: [StatementAssertion<Begin: Pos(1644, 5), End: Pos(1656, 12)>,
]
--------------------
Run: Closure_54
@@@
Split test: com.google.javascript.jscomp.TypeCheckTest::testIssue537a
file: /root/workbench/exportInfo/d4j_buggy/Closure_54/test//com/google/javascript/jscomp/TypeCheckTest.java
Begin: Pos(5263, 10)
End: Pos(5284, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_54/test//com/google/javascript/jscomp/TypeCheckTest.java
Name: testIssue537a
Childs: [StatementAssertion<Begin: Pos(5264, 5), End: Pos(5283, 43)>,
]
@@@
Split test: com.google.javascript.jscomp.TypeCheckTest::testIssue537b
file: /root/workbench/exportInfo/d4j_buggy/Closure_54/test//com/google/javascript/jscomp/TypeCheckTest.java
Begin: Pos(5286, 10)
End: Pos(5307, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_54/test//com/google/javascript/jscomp/TypeCheckTest.java
Name: testIssue537b
Childs: [StatementAssertion<Begin: Pos(5287, 5), End: Pos(5306, 43)>,
]
@@@
Split test: com.google.javascript.jscomp.TypedScopeCreatorTest::testPropertyOnUnknownSuperClass2
file: /root/workbench/exportInfo/d4j_buggy/Closure_54/test//com/google/javascript/jscomp/TypedScopeCreatorTest.java
Begin: Pos(365, 10)
End: Pos(379, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_54/test//com/google/javascript/jscomp/TypedScopeCreatorTest.java
Name: testPropertyOnUnknownSuperClass2
Childs: [StatementAssertion<Begin: Pos(366, 5), End: Pos(372, 45)>,
StatementAssertion<Begin: Pos(374, 5), End: Pos(374, 38)>,
StatementAssertion<Begin: Pos(375, 5), End: Pos(375, 71)>,
StatementAssertion<Begin: Pos(376, 5), End: Pos(376, 63)>,
StatementAssertion<Begin: Pos(377, 5), End: Pos(377, 59)>,
StatementAssertion<Begin: Pos(378, 5), End: Pos(378, 48)>,
]
---
public void testPropertyOnUnknownSuperClass2_catena_0() {
    testSame("var goog = this.foo();" + "/** @constructor \n * @extends {goog.Unknown} */" + "function Foo() {}" + "Foo.prototype = {bar: 1};" + "var x = new Foo();", RhinoErrorReporter.TYPE_PARSE_ERROR);
    ObjectType x = (ObjectType)findNameType("x", globalScope);
    
}

---
---
public void testPropertyOnUnknownSuperClass2_catena_1() {
    ObjectType x = (ObjectType)findNameType("x", globalScope);
    assertEquals("Foo", x.toString());
    
}

---
---
public void testPropertyOnUnknownSuperClass2_catena_2() {
    ObjectType x = (ObjectType)findNameType("x", globalScope);
    assertEquals("Foo.prototype", x.getImplicitPrototype().toString());
    
}

---
---
public void testPropertyOnUnknownSuperClass2_catena_3() {
    ObjectType x = (ObjectType)findNameType("x", globalScope);
    assertTrue(x.getImplicitPrototype().hasOwnProperty("bar"));
    
}

---
---
public void testPropertyOnUnknownSuperClass2_catena_4() {
    ObjectType x = (ObjectType)findNameType("x", globalScope);
    assertEquals("?", x.getPropertyType("bar").toString());
    
}

---
---
public void testPropertyOnUnknownSuperClass2_catena_5() {
    ObjectType x = (ObjectType)findNameType("x", globalScope);
    assertTrue(x.isPropertyTypeInferred("bar"));
    
}

---
--------------------
Run: Closure_147
@@@
Split test: com.google.javascript.jscomp.CheckGlobalThisTest::testIssue182a
file: /root/workbench/exportInfo/d4j_buggy/Closure_147/test//com/google/javascript/jscomp/CheckGlobalThisTest.java
Begin: Pos(207, 10)
End: Pos(209, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_147/test//com/google/javascript/jscomp/CheckGlobalThisTest.java
Name: testIssue182a
Childs: [StatementAssertion<Begin: Pos(208, 5), End: Pos(208, 69)>,
]
@@@
Split test: com.google.javascript.jscomp.CheckGlobalThisTest::testIssue182b
file: /root/workbench/exportInfo/d4j_buggy/Closure_147/test//com/google/javascript/jscomp/CheckGlobalThisTest.java
Begin: Pos(211, 10)
End: Pos(213, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_147/test//com/google/javascript/jscomp/CheckGlobalThisTest.java
Name: testIssue182b
Childs: [StatementAssertion<Begin: Pos(212, 5), End: Pos(212, 67)>,
]
@@@
Split test: com.google.javascript.jscomp.RuntimeTypeCheckTest::testValueWithInnerFn
file: /root/workbench/exportInfo/d4j_buggy/Closure_147/test//com/google/javascript/jscomp/RuntimeTypeCheckTest.java
# check: Use pattern matching: .testChecks
Begin: Pos(61, 10)
End: Pos(68, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_147/test//com/google/javascript/jscomp/RuntimeTypeCheckTest.java
Name: testValueWithInnerFn
Childs: [StatementAssertion<Begin: Pos(62, 5), End: Pos(67, 13)>,
]
--------------------
Run: Closure_117
@@@
Split test: com.google.javascript.jscomp.TypeCheckTest::testIssue1047
file: /root/workbench/exportInfo/d4j_buggy/Closure_117/test//com/google/javascript/jscomp/TypeCheckTest.java
Begin: Pos(6851, 10)
End: Pos(6871, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_117/test//com/google/javascript/jscomp/TypeCheckTest.java
Name: testIssue1047
Childs: [StatementAssertion<Begin: Pos(6852, 5), End: Pos(6870, 45)>,
]
--------------------
Run: Closure_176
@@@
Split test: com.google.javascript.jscomp.TypeCheckTest::testIssue1056
file: /root/workbench/exportInfo/d4j_buggy/Closure_176/test//com/google/javascript/jscomp/TypeCheckTest.java
Begin: Pos(6910, 10)
End: Pos(6917, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_176/test//com/google/javascript/jscomp/TypeCheckTest.java
Name: testIssue1056
Childs: [StatementAssertion<Begin: Pos(6911, 5), End: Pos(6916, 28)>,
]
--------------------
Run: Closure_2
@@@
Split test: com.google.javascript.jscomp.TypeCheckTest::testBadInterfaceExtendsNonExistentInterfaces
file: /root/workbench/exportInfo/d4j_buggy/Closure_2/test//com/google/javascript/jscomp/TypeCheckTest.java
Begin: Pos(3771, 10)
End: Pos(3781, 3)
Source: /root/workbench/exportInfo/d4j_buggy/Closure_2/test//com/google/javascript/jscomp/TypeCheckTest.java
Name: testBadInterfaceExtendsNonExistentInterfaces
Childs: [StatementAssertion<Begin: Pos(3780, 5), End: Pos(3780, 36)>,
]
--------------------
Run: Mockito_25
@@@
Split test: org.mockito.internal.stubbing.defaultanswers.ReturnsGenericDeepStubsTest::will_return_default_value_on_non_mockable_nested_generic
file: /root/workbench/exportInfo/d4j_buggy/Mockito_25/test//org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java
Begin: Pos(92, 5)
End: Pos(99, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Mockito_25/test//org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java
Name: will_return_default_value_on_non_mockable_nested_generic
Childs: [StatementAssertion<Begin: Pos(97, 9), End: Pos(97, 105)>,
StatementAssertion<Begin: Pos(98, 9), End: Pos(98, 55)>,
]
---
@Test public void will_return_default_value_on_non_mockable_nested_generic_catena_0()throws Exception {
    GenericsNest <  ?  > genericsNest = mock(GenericsNest.class, RETURNS_DEEP_STUBS);
    ListOfInteger listOfInteger = mock(ListOfInteger.class, RETURNS_DEEP_STUBS);
    assertThat(genericsNest.returningNonMockableNestedGeneric().keySet().iterator().next()).isNull();
    
}

---
---
@Test public void will_return_default_value_on_non_mockable_nested_generic_catena_1()throws Exception {
    GenericsNest <  ?  > genericsNest = mock(GenericsNest.class, RETURNS_DEEP_STUBS);
    ListOfInteger listOfInteger = mock(ListOfInteger.class, RETURNS_DEEP_STUBS);
    assertThat(listOfInteger.get(25)).isEqualTo(0);
    
}

---
@@@
Split test: org.mockito.internal.stubbing.defaultanswers.ReturnsGenericDeepStubsTest::can_create_mock_from_multiple_type_variable_bounds_when_return_type_of_parameterized_method_is_a_typevar_that_is_referencing_a_typevar_on_class
file: /root/workbench/exportInfo/d4j_buggy/Mockito_25/test//org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java
Begin: Pos(67, 5)
End: Pos(73, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Mockito_25/test//org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java
Name: can_create_mock_from_multiple_type_variable_bounds_when_return_type_of_parameterized_method_is_a_typevar_that_is_referencing_a_typevar_on_class
Childs: []
@@@
Split test: org.mockito.internal.stubbing.defaultanswers.ReturnsGenericDeepStubsTest::can_create_mock_from_return_types_declared_with_a_bounded_wildcard
file: /root/workbench/exportInfo/d4j_buggy/Mockito_25/test//org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java
Begin: Pos(75, 5)
End: Pos(82, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Mockito_25/test//org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java
Name: can_create_mock_from_return_types_declared_with_a_bounded_wildcard
Childs: []
@@@
Split test: org.mockito.internal.stubbing.defaultanswers.ReturnsGenericDeepStubsTest::can_create_mock_from_multiple_type_variable_bounds_when_return_type_of_parameterized_method_is_a_parameterizedtype_that_is_referencing_a_typevar_on_class
file: /root/workbench/exportInfo/d4j_buggy/Mockito_25/test//org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java
Begin: Pos(49, 5)
End: Pos(57, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Mockito_25/test//org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java
Name: can_create_mock_from_multiple_type_variable_bounds_when_return_type_of_parameterized_method_is_a_parameterizedtype_that_is_referencing_a_typevar_on_class
Childs: []
@@@
Split test: org.mockito.internal.stubbing.defaultanswers.ReturnsGenericDeepStubsTest::generic_deep_mock_frenzy__look_at_these_chained_calls
file: /root/workbench/exportInfo/d4j_buggy/Mockito_25/test//org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java
Begin: Pos(33, 5)
End: Pos(47, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Mockito_25/test//org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java
Name: generic_deep_mock_frenzy__look_at_these_chained_calls
Childs: []
@@@
Split test: org.mockito.internal.stubbing.defaultanswers.ReturnsGenericDeepStubsTest::can_create_mock_from_multiple_type_variable_bounds_when_method_return_type_is_referencing_a_typevar_on_class
file: /root/workbench/exportInfo/d4j_buggy/Mockito_25/test//org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java
Begin: Pos(59, 5)
End: Pos(65, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Mockito_25/test//org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java
Name: can_create_mock_from_multiple_type_variable_bounds_when_method_return_type_is_referencing_a_typevar_on_class
Childs: []
--------------------
Run: Mockito_37
@@@
Split test: org.mockito.internal.stubbing.answers.AnswersValidatorTest::shouldFailWhenCallingRealMethodOnIterface
file: /root/workbench/exportInfo/d4j_buggy/Mockito_37/test//org/mockito/internal/stubbing/answers/AnswersValidatorTest.java
# check: StatementExpression is in safe: <validator.validate>
Begin: Pos(91, 5)
End: Pos(101, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Mockito_37/test//org/mockito/internal/stubbing/answers/AnswersValidatorTest.java
Name: shouldFailWhenCallingRealMethodOnIterface
Childs: [StatementAssertion<Begin: Pos(99, 13), End: Pos(99, 19)>,
]
@@@
Split test: org.mockitousage.spies.SpyingOnInterfacesTest::shouldFailFastWhenCallingRealMethodOnInterface
file: /root/workbench/exportInfo/d4j_buggy/Mockito_37/test//org/mockitousage/spies/SpyingOnInterfacesTest.java
Begin: Pos(21, 5)
End: Pos(30, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Mockito_37/test//org/mockitousage/spies/SpyingOnInterfacesTest.java
Name: shouldFailFastWhenCallingRealMethodOnInterface
Childs: [StatementAssertion<Begin: Pos(28, 13), End: Pos(28, 19)>,
]
--------------------
Run: Mockito_30
@@@
Split test: org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNullsTest::shouldPrintTheParametersOnSmartNullPointerExceptionMessage
file: /root/workbench/exportInfo/d4j_buggy/Mockito_30/test//org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNullsTest.java
Begin: Pos(60, 5)
End: Pos(74, 2)
Source: /root/workbench/exportInfo/d4j_buggy/Mockito_30/test//org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNullsTest.java
Name: shouldPrintTheParametersOnSmartNullPointerExceptionMessage
Childs: [StatementAssertion<Begin: Pos(68, 13), End: Pos(68, 19)>,
StatementAssertion<Begin: Pos(71, 10), End: Pos(72, 45)>,
]
---
@Test public void shouldPrintTheParametersOnSmartNullPointerExceptionMessage_catena_0()throws Throwable {
    Answer < Object > answer = new ReturnsSmartNulls();
    Foo smartNull = (Foo)answer.answer(invocationOf(Foo.class, "withArgs", "oompa", "lumpa"));
    try {
        smartNull.get();
        fail();
        
    }
    catch(SmartNullPointerException ex) {
        String message = ex.getMessage();
        
    }
}

---
---
@Test public void shouldPrintTheParametersOnSmartNullPointerExceptionMessage_catena_1()throws Throwable {
    Answer < Object > answer = new ReturnsSmartNulls();
    Foo smartNull = (Foo)answer.answer(invocationOf(Foo.class, "withArgs", "oompa", "lumpa"));
    try {
        smartNull.get();
        
    }
    catch(SmartNullPointerException ex) {
        String message = ex.getMessage();
        assertTrue("Exception message should include oompa and lumpa, but was: " + message, message.contains("oompa, lumpa"));
        
    }
}

---
--------------------
Run: Mockito_32
@@@
Split test: org.mockitousage.bugs.SpyShouldHaveNiceNameTest::shouldPrintNiceName
file: /root/workbench/exportInfo/d4j_buggy/Mockito_32/test//org/mockitousage/bugs/SpyShouldHaveNiceNameTest.java
# check: StatementExpression is in safe: <.verify>
Selector contains assertion
Begin: Pos(22, 5)
End: Pos(33, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Mockito_32/test//org/mockitousage/bugs/SpyShouldHaveNiceNameTest.java
Name: shouldPrintNiceName
Childs: [StatementAssertion<Begin: Pos(29, 13), End: Pos(29, 19)>,
StatementAssertion<Begin: Pos(31, 13), End: Pos(31, 74)>,
]
---
@Test public void shouldPrintNiceName_catena_0() {
    veryCoolSpy.add(1);
    try {
        verify(veryCoolSpy).add(2);
        fail();
        
    }
    catch(AssertionError e) {
        
    }
}

---
---
@Test public void shouldPrintNiceName_catena_1() {
    veryCoolSpy.add(1);
    try {
        verify(veryCoolSpy).add(2);
        
    }
    catch(AssertionError e) {
        Assertions.assertThat(e.getMessage()).contains("veryCoolSpy");
        
    }
}

---
--------------------
Run: Mockito_36
@@@
Split test: org.mockito.internal.invocation.InvocationTest::shouldScreamWhenCallingRealMethodOnInterface
file: /root/workbench/exportInfo/d4j_buggy/Mockito_36/test//org/mockito/internal/invocation/InvocationTest.java
Begin: Pos(168, 5)
End: Pos(179, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Mockito_36/test//org/mockito/internal/invocation/InvocationTest.java
Name: shouldScreamWhenCallingRealMethodOnInterface
Childs: [StatementAssertion<Begin: Pos(177, 13), End: Pos(177, 19)>,
]
@@@
Split test: org.mockitousage.spies.SpyingOnInterfacesTest::shouldFailInRuntimeWhenCallingRealMethodOnInterface
file: /root/workbench/exportInfo/d4j_buggy/Mockito_36/test//org/mockitousage/spies/SpyingOnInterfacesTest.java
Begin: Pos(31, 5)
End: Pos(48, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Mockito_36/test//org/mockitousage/spies/SpyingOnInterfacesTest.java
Name: shouldFailInRuntimeWhenCallingRealMethodOnInterface
Childs: [StatementAssertion<Begin: Pos(46, 13), End: Pos(46, 19)>,
]
--------------------
Run: Mockito_10
@@@
Split test: org.mockitousage.bugs.DeepStubsWronglyReportsSerializationProblemsTest::should_not_raise_a_mockito_exception_about_serialization_when_accessing_deep_stub
file: /root/workbench/exportInfo/d4j_buggy/Mockito_10/test//org/mockitousage/bugs/DeepStubsWronglyReportsSerializationProblemsTest.java
Begin: Pos(14, 5)
End: Pos(18, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Mockito_10/test//org/mockitousage/bugs/DeepStubsWronglyReportsSerializationProblemsTest.java
Name: should_not_raise_a_mockito_exception_about_serialization_when_accessing_deep_stub
Childs: [StatementAssertion<Begin: Pos(17, 9), End: Pos(17, 46)>,
]
--------------------
Run: Mockito_9
@@@
Split test: org.mockitousage.constructor.CreatingMocksWithConstructorTest::abstractMethodStubbed
file: /root/workbench/exportInfo/d4j_buggy/Mockito_9/test//org/mockitousage/constructor/CreatingMocksWithConstructorTest.java
Begin: Pos(116, 5)
End: Pos(121, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Mockito_9/test//org/mockitousage/constructor/CreatingMocksWithConstructorTest.java
Name: abstractMethodStubbed
Childs: [StatementAssertion<Begin: Pos(120, 6), End: Pos(120, 51)>,
]
@@@
Split test: org.mockitousage.constructor.CreatingMocksWithConstructorTest::testCallsRealInterfaceMethod
file: /root/workbench/exportInfo/d4j_buggy/Mockito_9/test//org/mockitousage/constructor/CreatingMocksWithConstructorTest.java
Begin: Pos(123, 5)
End: Pos(127, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Mockito_9/test//org/mockitousage/constructor/CreatingMocksWithConstructorTest.java
Name: testCallsRealInterfaceMethod
Childs: [StatementAssertion<Begin: Pos(126, 6), End: Pos(126, 29)>,
]
@@@
Split test: org.mockitousage.constructor.CreatingMocksWithConstructorTest::abstractMethodReturnsDefault
file: /root/workbench/exportInfo/d4j_buggy/Mockito_9/test//org/mockitousage/constructor/CreatingMocksWithConstructorTest.java
Begin: Pos(110, 5)
End: Pos(114, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Mockito_9/test//org/mockitousage/constructor/CreatingMocksWithConstructorTest.java
Name: abstractMethodReturnsDefault
Childs: [StatementAssertion<Begin: Pos(113, 6), End: Pos(113, 53)>,
]
--------------------
Run: Mockito_17
@@@
Split test: org.mockitousage.basicapi.MocksSerializationTest::shouldBeSerializeAndHaveExtraInterfaces
file: /root/workbench/exportInfo/d4j_buggy/Mockito_17/test//org/mockitousage/basicapi/MocksSerializationTest.java
Begin: Pos(305, 5)
End: Pos(314, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Mockito_17/test//org/mockitousage/basicapi/MocksSerializationTest.java
Name: shouldBeSerializeAndHaveExtraInterfaces
Childs: [StatementAssertion<Begin: Pos(312, 9), End: Pos(312, 38)>,
StatementAssertion<Begin: Pos(313, 9), End: Pos(313, 41)>,
]
---
@Test public void shouldBeSerializeAndHaveExtraInterfaces_catena_0()throws Exception {
    IMethods mock = mock(IMethods.class, withSettings().serializable().extraInterfaces(List.class));
    IMethods mockTwo = mock(IMethods.class, withSettings().extraInterfaces(List.class).serializable());
    serializeAndBack((List)mock);
    
}

---
---
@Test public void shouldBeSerializeAndHaveExtraInterfaces_catena_1()throws Exception {
    IMethods mock = mock(IMethods.class, withSettings().serializable().extraInterfaces(List.class));
    IMethods mockTwo = mock(IMethods.class, withSettings().extraInterfaces(List.class).serializable());
    serializeAndBack((List)mockTwo);
    
}

---
--------------------
Run: Mockito_4
@@@
Split test: org.mockito.exceptions.ReporterTest::can_use_print_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_no_more_interaction_wanted_in_order
file: /root/workbench/exportInfo/d4j_buggy/Mockito_4/test//org/mockito/exceptions/ReporterTest.java
Begin: Pos(44, 5)
End: Pos(48, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Mockito_4/test//org/mockito/exceptions/ReporterTest.java
Name: can_use_print_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_no_more_interaction_wanted_in_order
Childs: []
@@@
Split test: org.mockito.exceptions.ReporterTest::can_use_print_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_injection_failure
file: /root/workbench/exportInfo/d4j_buggy/Mockito_4/test//org/mockito/exceptions/ReporterTest.java
Begin: Pos(76, 5)
End: Pos(80, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Mockito_4/test//org/mockito/exceptions/ReporterTest.java
Name: can_use_print_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_injection_failure
Childs: []
@@@
Split test: org.mockito.exceptions.ReporterTest::can_use_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_no_more_interaction_wanted
file: /root/workbench/exportInfo/d4j_buggy/Mockito_4/test//org/mockito/exceptions/ReporterTest.java
Begin: Pos(38, 5)
End: Pos(42, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Mockito_4/test//org/mockito/exceptions/ReporterTest.java
Name: can_use_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_no_more_interaction_wanted
Childs: []
@@@
Split test: org.mockitousage.bugs.ClassCastExOnVerifyZeroInteractionsTest::should_not_throw_a_ClassCastException
file: /root/workbench/exportInfo/d4j_buggy/Mockito_4/test//org/mockitousage/bugs/ClassCastExOnVerifyZeroInteractionsTest.java
Begin: Pos(16, 5)
End: Pos(25, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Mockito_4/test//org/mockitousage/bugs/ClassCastExOnVerifyZeroInteractionsTest.java
Name: should_not_throw_a_ClassCastException
Childs: [StatementAssertion<Begin: Pos(24, 9), End: Pos(24, 37)>,
]
--------------------
Run: Mockito_12
@@@
Split test: org.mockito.internal.util.reflection.GenericMasterTest::shouldDealWithNestedGenerics
file: /root/workbench/exportInfo/d4j_buggy/Mockito_12/test//org/mockito/internal/util/reflection/GenericMasterTest.java
Begin: Pos(36, 5)
End: Pos(40, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Mockito_12/test//org/mockito/internal/util/reflection/GenericMasterTest.java
Name: shouldDealWithNestedGenerics
Childs: [StatementAssertion<Begin: Pos(38, 9), End: Pos(38, 67)>,
StatementAssertion<Begin: Pos(39, 9), End: Pos(39, 72)>,
]
---
@Test public void shouldDealWithNestedGenerics_catena_0()throws Exception {
    assertEquals(Set.class, m.getGenericType(field("nested")));
    
}

---
---
@Test public void shouldDealWithNestedGenerics_catena_1()throws Exception {
    assertEquals(Set.class, m.getGenericType(field("multiNested")));
    
}

---
@@@
Split test: org.mockitousage.annotation.CaptorAnnotationBasicTest::shouldUseAnnotatedCaptor
file: /root/workbench/exportInfo/d4j_buggy/Mockito_12/test//org/mockitousage/annotation/CaptorAnnotationBasicTest.java
Begin: Pos(64, 5)
End: Pos(73, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Mockito_12/test//org/mockitousage/annotation/CaptorAnnotationBasicTest.java
Name: shouldUseAnnotatedCaptor
Childs: [StatementAssertion<Begin: Pos(70, 9), End: Pos(70, 56)>,
StatementAssertion<Begin: Pos(71, 9), End: Pos(71, 57)>,
StatementAssertion<Begin: Pos(72, 9), End: Pos(72, 65)>,
]
---
@Test public void shouldUseAnnotatedCaptor_catena_0() {
    createPerson("Wes", "Williams");
    verify(peopleRepository).save(captor.capture());
    
}

---
---
@Test public void shouldUseAnnotatedCaptor_catena_1() {
    createPerson("Wes", "Williams");
    assertEquals("Wes", captor.getValue().getName());
    
}

---
---
@Test public void shouldUseAnnotatedCaptor_catena_2() {
    createPerson("Wes", "Williams");
    assertEquals("Williams", captor.getValue().getSurname());
    
}

---
@@@
Split test: org.mockitousage.annotation.CaptorAnnotationBasicTest::shouldUseCaptorInOrdinaryWay
file: /root/workbench/exportInfo/d4j_buggy/Mockito_12/test//org/mockitousage/annotation/CaptorAnnotationBasicTest.java
Begin: Pos(50, 5)
End: Pos(60, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Mockito_12/test//org/mockitousage/annotation/CaptorAnnotationBasicTest.java
Name: shouldUseCaptorInOrdinaryWay
Childs: [StatementAssertion<Begin: Pos(57, 9), End: Pos(57, 56)>,
StatementAssertion<Begin: Pos(58, 9), End: Pos(58, 57)>,
StatementAssertion<Begin: Pos(59, 9), End: Pos(59, 65)>,
]
---
@Test public void shouldUseCaptorInOrdinaryWay_catena_0() {
    createPerson("Wes", "Williams");
    ArgumentCaptor < Person > captor = ArgumentCaptor.forClass(Person.class);
    verify(peopleRepository).save(captor.capture());
    
}

---
---
@Test public void shouldUseCaptorInOrdinaryWay_catena_1() {
    createPerson("Wes", "Williams");
    ArgumentCaptor < Person > captor = ArgumentCaptor.forClass(Person.class);
    assertEquals("Wes", captor.getValue().getName());
    
}

---
---
@Test public void shouldUseCaptorInOrdinaryWay_catena_2() {
    createPerson("Wes", "Williams");
    ArgumentCaptor < Person > captor = ArgumentCaptor.forClass(Person.class);
    assertEquals("Williams", captor.getValue().getSurname());
    
}

---
@@@
Split test: org.mockitousage.annotation.CaptorAnnotationBasicTest::shouldCaptureGenericList
file: /root/workbench/exportInfo/d4j_buggy/Mockito_12/test//org/mockitousage/annotation/CaptorAnnotationBasicTest.java
Begin: Pos(91, 5)
End: Pos(102, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Mockito_12/test//org/mockitousage/annotation/CaptorAnnotationBasicTest.java
Name: shouldCaptureGenericList
Childs: [StatementAssertion<Begin: Pos(98, 9), End: Pos(98, 64)>,
StatementAssertion<Begin: Pos(101, 9), End: Pos(101, 55)>,
]
---
@Test public void shouldCaptureGenericList_catena_0() {
    List < String > list = new LinkedList < String > ();
    mock.listArgMethod(list);
    verify(mock).listArgMethod(genericListCaptor.capture());
    
}

---
---
@Test public void shouldCaptureGenericList_catena_1() {
    List < String > list = new LinkedList < String > ();
    mock.listArgMethod(list);
    assertSame(list, genericListCaptor.getValue());
    
}

---
@@@
Split test: org.mockitousage.annotation.CaptorAnnotationBasicTest::shouldUseGenericlessAnnotatedCaptor
file: /root/workbench/exportInfo/d4j_buggy/Mockito_12/test//org/mockitousage/annotation/CaptorAnnotationBasicTest.java
Begin: Pos(77, 5)
End: Pos(86, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Mockito_12/test//org/mockitousage/annotation/CaptorAnnotationBasicTest.java
Name: shouldUseGenericlessAnnotatedCaptor
Childs: [StatementAssertion<Begin: Pos(83, 9), End: Pos(83, 76)>,
StatementAssertion<Begin: Pos(84, 9), End: Pos(84, 79)>,
StatementAssertion<Begin: Pos(85, 9), End: Pos(85, 87)>,
]
---
@Test public void shouldUseGenericlessAnnotatedCaptor_catena_0() {
    createPerson("Wes", "Williams");
    verify(peopleRepository).save((Person)genericLessCaptor.capture());
    
}

---
---
@Test public void shouldUseGenericlessAnnotatedCaptor_catena_1() {
    createPerson("Wes", "Williams");
    assertEquals("Wes", ((Person)genericLessCaptor.getValue()).getName());
    
}

---
---
@Test public void shouldUseGenericlessAnnotatedCaptor_catena_2() {
    createPerson("Wes", "Williams");
    assertEquals("Williams", ((Person)genericLessCaptor.getValue()).getSurname());
    
}

---
@@@
Split test: org.mockitousage.annotation.CaptorAnnotationTest::shouldScreamWhenWrongTypeForCaptor
file: /root/workbench/exportInfo/d4j_buggy/Mockito_12/test//org/mockitousage/annotation/CaptorAnnotationTest.java
Begin: Pos(78, 5)
End: Pos(84, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Mockito_12/test//org/mockitousage/annotation/CaptorAnnotationTest.java
Name: shouldScreamWhenWrongTypeForCaptor
Childs: [StatementAssertion<Begin: Pos(82, 13), End: Pos(82, 19)>,
]
@@@
Split test: org.mockitousage.annotation.CaptorAnnotationTest::testNormalUsage
file: /root/workbench/exportInfo/d4j_buggy/Mockito_12/test//org/mockitousage/annotation/CaptorAnnotationTest.java
# check: Use pattern matching: mockInterface.testMe
Use pattern matching: None.testMe
Selector contains assertion
Begin: Pos(49, 5)
End: Pos(71, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Mockito_12/test//org/mockitousage/annotation/CaptorAnnotationTest.java
Name: testNormalUsage
Childs: [StatementAssertion<Begin: Pos(55, 9), End: Pos(55, 35)>,
StatementAssertion<Begin: Pos(56, 9), End: Pos(56, 38)>,
StatementAssertion<Begin: Pos(57, 9), End: Pos(57, 49)>,
StatementAssertion<Begin: Pos(58, 9), End: Pos(58, 29)>,
StatementAssertion<Begin: Pos(64, 9), End: Pos(64, 70)>,
StatementAssertion<Begin: Pos(66, 9), End: Pos(66, 94)>,
StatementAssertion<Begin: Pos(68, 9), End: Pos(68, 64)>,
StatementAssertion<Begin: Pos(69, 9), End: Pos(69, 70)>,
]
---
@Test public void testNormalUsage_catena_0() {
    MockitoAnnotations.initMocks(this);
    assertNotNull(finalCaptor);
    String argForFinalCaptor = "Hello";
    ArrayList < List < String >  > argForGenericsCaptor = new ArrayList < List < String >  > ();
    
}

---
---
@Test public void testNormalUsage_catena_1() {
    MockitoAnnotations.initMocks(this);
    assertNotNull(genericsCaptor);
    String argForFinalCaptor = "Hello";
    ArrayList < List < String >  > argForGenericsCaptor = new ArrayList < List < String >  > ();
    
}

---
---
@Test public void testNormalUsage_catena_2() {
    MockitoAnnotations.initMocks(this);
    assertNotNull(nonGenericCaptorIsAllowed);
    String argForFinalCaptor = "Hello";
    ArrayList < List < String >  > argForGenericsCaptor = new ArrayList < List < String >  > ();
    
}

---
---
@Test public void testNormalUsage_catena_3() {
    MockitoAnnotations.initMocks(this);
    assertNull(notAMock);
    String argForFinalCaptor = "Hello";
    ArrayList < List < String >  > argForGenericsCaptor = new ArrayList < List < String >  > ();
    
}

---
---
@Test public void testNormalUsage_catena_4() {
    MockitoAnnotations.initMocks(this);
    String argForFinalCaptor = "Hello";
    ArrayList < List < String >  > argForGenericsCaptor = new ArrayList < List < String >  > ();
    mockInterface.testMe(argForFinalCaptor, argForGenericsCaptor);
    
}

---
---
@Test public void testNormalUsage_catena_5() {
    MockitoAnnotations.initMocks(this);
    String argForFinalCaptor = "Hello";
    ArrayList < List < String >  > argForGenericsCaptor = new ArrayList < List < String >  > ();
    Mockito.verify(mockInterface).testMe(finalCaptor.capture(), genericsCaptor.capture());
    
}

---
---
@Test public void testNormalUsage_catena_6() {
    MockitoAnnotations.initMocks(this);
    String argForFinalCaptor = "Hello";
    ArrayList < List < String >  > argForGenericsCaptor = new ArrayList < List < String >  > ();
    assertEquals(argForFinalCaptor, finalCaptor.getValue());
    
}

---
---
@Test public void testNormalUsage_catena_7() {
    MockitoAnnotations.initMocks(this);
    String argForFinalCaptor = "Hello";
    ArrayList < List < String >  > argForGenericsCaptor = new ArrayList < List < String >  > ();
    assertEquals(argForGenericsCaptor, genericsCaptor.getValue());
    
}

---
@@@
Split test: org.mockitousage.annotation.CaptorAnnotationTest::shouldScreamWhenMoreThanOneMockitoAnnotaton
file: /root/workbench/exportInfo/d4j_buggy/Mockito_12/test//org/mockitousage/annotation/CaptorAnnotationTest.java
Begin: Pos(92, 5)
End: Pos(101, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Mockito_12/test//org/mockitousage/annotation/CaptorAnnotationTest.java
Name: shouldScreamWhenMoreThanOneMockitoAnnotaton
Childs: [StatementAssertion<Begin: Pos(96, 13), End: Pos(96, 19)>,
StatementAssertion<Begin: Pos(98, 13), End: Pos(98, 67)>,
StatementAssertion<Begin: Pos(99, 13), End: Pos(99, 75)>,
]
---
@Test public void shouldScreamWhenMoreThanOneMockitoAnnotaton_catena_0() {
    try {
        MockitoAnnotations.initMocks(new ToManyAnnotations());
        fail();
        
    }
    catch(MockitoException e) {
        
    }
}

---
---
@Test public void shouldScreamWhenMoreThanOneMockitoAnnotaton_catena_1() {
    try {
        MockitoAnnotations.initMocks(new ToManyAnnotations());
        
    }
    catch(MockitoException e) {
        assertContains("missingGenericsField", e.getMessage());
        
    }
}

---
---
@Test public void shouldScreamWhenMoreThanOneMockitoAnnotaton_catena_2() {
    try {
        MockitoAnnotations.initMocks(new ToManyAnnotations());
        
    }
    catch(MockitoException e) {
        assertContains("multiple Mockito annotations", e.getMessage());
        
    }
}

---
@@@
Split test: org.mockitousage.annotation.CaptorAnnotationTest::shouldScreamWhenInitializingCaptorsForNullClass
file: /root/workbench/exportInfo/d4j_buggy/Mockito_12/test//org/mockitousage/annotation/CaptorAnnotationTest.java
Begin: Pos(103, 5)
End: Pos(110, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Mockito_12/test//org/mockitousage/annotation/CaptorAnnotationTest.java
Name: shouldScreamWhenInitializingCaptorsForNullClass
Childs: [StatementAssertion<Begin: Pos(107, 13), End: Pos(107, 19)>,
]
@@@
Split test: org.mockitousage.annotation.CaptorAnnotationTest::shouldLookForAnnotatedCaptorsInSuperClasses
file: /root/workbench/exportInfo/d4j_buggy/Mockito_12/test//org/mockitousage/annotation/CaptorAnnotationTest.java
Begin: Pos(112, 5)
End: Pos(120, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Mockito_12/test//org/mockitousage/annotation/CaptorAnnotationTest.java
Name: shouldLookForAnnotatedCaptorsInSuperClasses
Childs: [StatementAssertion<Begin: Pos(117, 9), End: Pos(117, 39)>,
StatementAssertion<Begin: Pos(118, 9), End: Pos(118, 43)>,
StatementAssertion<Begin: Pos(119, 9), End: Pos(119, 48)>,
]
---
@Test public void shouldLookForAnnotatedCaptorsInSuperClasses_catena_0()throws Exception {
    Sub sub = new Sub();
    MockitoAnnotations.initMocks(sub);
    assertNotNull(sub.getCaptor());
    
}

---
---
@Test public void shouldLookForAnnotatedCaptorsInSuperClasses_catena_1()throws Exception {
    Sub sub = new Sub();
    MockitoAnnotations.initMocks(sub);
    assertNotNull(sub.getBaseCaptor());
    
}

---
---
@Test public void shouldLookForAnnotatedCaptorsInSuperClasses_catena_2()throws Exception {
    Sub sub = new Sub();
    MockitoAnnotations.initMocks(sub);
    assertNotNull(sub.getSuperBaseCaptor());
    
}

---
--------------------
Run: Mockito_3
@@@
Split test: org.mockito.internal.invocation.InvocationMatcherTest::should_capture_varargs_as_vararg
file: /root/workbench/exportInfo/d4j_buggy/Mockito_3/test//org/mockito/internal/invocation/InvocationMatcherTest.java
# check: Selector contains assertion
Begin: Pos(142, 5)
End: Pos(155, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Mockito_3/test//org/mockito/internal/invocation/InvocationMatcherTest.java
Name: should_capture_varargs_as_vararg
Childs: [StatementAssertion<Begin: Pos(154, 9), End: Pos(154, 74)>,
]
@@@
Split test: org.mockitousage.bugs.varargs.VarargsAndAnyObjectPicksUpExtraInvocationsTest::shouldVerifyCorrectlyNumberOfInvocationsWithVarargs
file: /root/workbench/exportInfo/d4j_buggy/Mockito_3/test//org/mockitousage/bugs/varargs/VarargsAndAnyObjectPicksUpExtraInvocationsTest.java
Begin: Pos(43, 5)
End: Pos(52, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Mockito_3/test//org/mockitousage/bugs/varargs/VarargsAndAnyObjectPicksUpExtraInvocationsTest.java
Name: shouldVerifyCorrectlyNumberOfInvocationsWithVarargs
Childs: [StatementAssertion<Begin: Pos(50, 9), End: Pos(50, 79)>,
StatementAssertion<Begin: Pos(51, 9), End: Pos(51, 55)>,
]
---
@Test public void shouldVerifyCorrectlyNumberOfInvocationsWithVarargs_catena_0() {
    table.newRow("qux", "foo", "bar", "baz");
    table.newRow("abc", "def");
    verify(table).newRow(anyString(), eq("foo"), anyString(), anyString());
    
}

---
---
@Test public void shouldVerifyCorrectlyNumberOfInvocationsWithVarargs_catena_1() {
    table.newRow("qux", "foo", "bar", "baz");
    table.newRow("abc", "def");
    verify(table).newRow(anyString(), anyString());
    
}

---
@@@
Split test: org.mockitousage.bugs.varargs.VarargsNotPlayingWithAnyObjectTest::shouldMatchAnyVararg
file: /root/workbench/exportInfo/d4j_buggy/Mockito_3/test//org/mockitousage/bugs/varargs/VarargsNotPlayingWithAnyObjectTest.java
Begin: Pos(24, 5)
End: Pos(35, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Mockito_3/test//org/mockitousage/bugs/varargs/VarargsNotPlayingWithAnyObjectTest.java
Name: shouldMatchAnyVararg
Childs: [StatementAssertion<Begin: Pos(28, 9), End: Pos(28, 51)>,
StatementAssertion<Begin: Pos(29, 9), End: Pos(29, 69)>,
StatementAssertion<Begin: Pos(31, 9), End: Pos(31, 49)>,
StatementAssertion<Begin: Pos(33, 9), End: Pos(33, 36)>,
StatementAssertion<Begin: Pos(34, 9), End: Pos(34, 56)>,
]
---
@Test public void shouldMatchAnyVararg_catena_0() {
    mock.run("a", "b");
    verify(mock).run(anyString(), anyString());
    
}

---
---
@Test public void shouldMatchAnyVararg_catena_1() {
    mock.run("a", "b");
    verify(mock).run((String)anyObject(), (String)anyObject());
    
}

---
---
@Test public void shouldMatchAnyVararg_catena_2() {
    mock.run("a", "b");
    verify(mock).run((String[])anyVararg());
    
}

---
---
@Test public void shouldMatchAnyVararg_catena_3() {
    mock.run("a", "b");
    verify(mock, never()).run();
    
}

---
---
@Test public void shouldMatchAnyVararg_catena_4() {
    mock.run("a", "b");
    verify(mock, never()).run(anyString(), eq("f"));
    
}

---
@@@
Split test: org.mockitousage.matchers.CapturingArgumentsTest::should_capture_all_vararg
file: /root/workbench/exportInfo/d4j_buggy/Mockito_3/test//org/mockitousage/matchers/CapturingArgumentsTest.java
# check: Selector contains assertion
Begin: Pos(266, 5)
End: Pos(279, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Mockito_3/test//org/mockitousage/matchers/CapturingArgumentsTest.java
Name: should_capture_all_vararg
Childs: [StatementAssertion<Begin: Pos(276, 9), End: Pos(276, 77)>,
StatementAssertion<Begin: Pos(278, 9), End: Pos(278, 104)>,
]
---
@Test public void should_capture_all_vararg_catena_0()throws Exception {
    ArgumentCaptor < String > argumentCaptor = ArgumentCaptor.forClass(String.class);
    mock.mixedVarargs(42, "a", "b", "c");
    mock.mixedVarargs(42, "again ?!");
    verify(mock, times(2)).mixedVarargs(any(), argumentCaptor.capture());
    
}

---
---
@Test public void should_capture_all_vararg_catena_1()throws Exception {
    ArgumentCaptor < String > argumentCaptor = ArgumentCaptor.forClass(String.class);
    mock.mixedVarargs(42, "a", "b", "c");
    mock.mixedVarargs(42, "again ?!");
    Assertions.assertThat(argumentCaptor.getAllValues()).containsExactly("a", "b", "c", "again ?!");
    
}

---
@@@
Split test: org.mockitousage.matchers.CapturingArgumentsTest::captures_correctly_when_captor_used_multiple_times
file: /root/workbench/exportInfo/d4j_buggy/Mockito_3/test//org/mockitousage/matchers/CapturingArgumentsTest.java
# check: Selector contains assertion
Begin: Pos(294, 5)
End: Pos(306, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Mockito_3/test//org/mockitousage/matchers/CapturingArgumentsTest.java
Name: captures_correctly_when_captor_used_multiple_times
Childs: [StatementAssertion<Begin: Pos(304, 9), End: Pos(304, 119)>,
StatementAssertion<Begin: Pos(305, 9), End: Pos(305, 92)>,
]
---
@Test public void captures_correctly_when_captor_used_multiple_times_catena_0()throws Exception {
    ArgumentCaptor < String > argumentCaptor = ArgumentCaptor.forClass(String.class);
    mock.mixedVarargs(42, "a", "b", "c");
    verify(mock).mixedVarargs(any(), argumentCaptor.capture(), argumentCaptor.capture(), argumentCaptor.capture());
    
}

---
---
@Test public void captures_correctly_when_captor_used_multiple_times_catena_1()throws Exception {
    ArgumentCaptor < String > argumentCaptor = ArgumentCaptor.forClass(String.class);
    mock.mixedVarargs(42, "a", "b", "c");
    Assertions.assertThat(argumentCaptor.getAllValues()).containsExactly("a", "b", "c");
    
}

---
@@@
Split test: org.mockitousage.matchers.CapturingArgumentsTest::should_capture_vararg
file: /root/workbench/exportInfo/d4j_buggy/Mockito_3/test//org/mockitousage/matchers/CapturingArgumentsTest.java
# check: Selector contains assertion
Begin: Pos(253, 5)
End: Pos(264, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Mockito_3/test//org/mockitousage/matchers/CapturingArgumentsTest.java
Name: should_capture_vararg
Childs: [StatementAssertion<Begin: Pos(262, 9), End: Pos(262, 67)>,
StatementAssertion<Begin: Pos(263, 9), End: Pos(263, 92)>,
]
---
@Test public void should_capture_vararg_catena_0()throws Exception {
    ArgumentCaptor < String > argumentCaptor = ArgumentCaptor.forClass(String.class);
    mock.mixedVarargs(42, "a", "b", "c");
    verify(mock).mixedVarargs(any(), argumentCaptor.capture());
    
}

---
---
@Test public void should_capture_vararg_catena_1()throws Exception {
    ArgumentCaptor < String > argumentCaptor = ArgumentCaptor.forClass(String.class);
    mock.mixedVarargs(42, "a", "b", "c");
    Assertions.assertThat(argumentCaptor.getAllValues()).containsExactly("a", "b", "c");
    
}

---
@@@
Split test: org.mockitousage.matchers.CapturingArgumentsTest::captures_correctly_when_captor_used_on_pure_vararg_method
file: /root/workbench/exportInfo/d4j_buggy/Mockito_3/test//org/mockitousage/matchers/CapturingArgumentsTest.java
# check: Selector contains assertion
Begin: Pos(308, 5)
End: Pos(319, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Mockito_3/test//org/mockitousage/matchers/CapturingArgumentsTest.java
Name: captures_correctly_when_captor_used_on_pure_vararg_method
Childs: [StatementAssertion<Begin: Pos(317, 9), End: Pos(317, 63)>,
StatementAssertion<Begin: Pos(318, 9), End: Pos(318, 83)>,
]
---
@Test public void captures_correctly_when_captor_used_on_pure_vararg_method_catena_0()throws Exception {
    ArgumentCaptor < String > argumentCaptor = ArgumentCaptor.forClass(String.class);
    mock.varargs(42, "capturedValue");
    verify(mock).varargs(eq(42), argumentCaptor.capture());
    
}

---
---
@Test public void captures_correctly_when_captor_used_on_pure_vararg_method_catena_1()throws Exception {
    ArgumentCaptor < String > argumentCaptor = ArgumentCaptor.forClass(String.class);
    mock.varargs(42, "capturedValue");
    Assertions.assertThat(argumentCaptor.getValue()).contains("capturedValue");
    
}

---
@@@
Split test: org.mockitousage.matchers.CapturingArgumentsTest::should_capture_byte_vararg_by_creating_captor_with_primitive_wrapper
file: /root/workbench/exportInfo/d4j_buggy/Mockito_3/test//org/mockitousage/matchers/CapturingArgumentsTest.java
# check: Selector contains assertion
Begin: Pos(239, 5)
End: Pos(251, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Mockito_3/test//org/mockitousage/matchers/CapturingArgumentsTest.java
Name: should_capture_byte_vararg_by_creating_captor_with_primitive_wrapper
Childs: [StatementAssertion<Begin: Pos(248, 9), End: Pos(248, 59)>,
StatementAssertion<Begin: Pos(249, 9), End: Pos(249, 65)>,
StatementAssertion<Begin: Pos(250, 9), End: Pos(250, 97)>,
]
---
@Test public void should_capture_byte_vararg_by_creating_captor_with_primitive_wrapper_catena_0()throws Exception {
    ArgumentCaptor < Byte > argumentCaptor = ArgumentCaptor.forClass(Byte.class);
    mock.varargsbyte((byte)1, (byte)2);
    verify(mock).varargsbyte(argumentCaptor.capture());
    
}

---
---
@Test public void should_capture_byte_vararg_by_creating_captor_with_primitive_wrapper_catena_1()throws Exception {
    ArgumentCaptor < Byte > argumentCaptor = ArgumentCaptor.forClass(Byte.class);
    mock.varargsbyte((byte)1, (byte)2);
    assertEquals((byte)2, (byte)argumentCaptor.getValue());
    
}

---
---
@Test public void should_capture_byte_vararg_by_creating_captor_with_primitive_wrapper_catena_2()throws Exception {
    ArgumentCaptor < Byte > argumentCaptor = ArgumentCaptor.forClass(Byte.class);
    mock.varargsbyte((byte)1, (byte)2);
    Assertions.assertThat(argumentCaptor.getAllValues()).containsExactly((byte)1, (byte)2);
    
}

---
@@@
Split test: org.mockitousage.matchers.CapturingArgumentsTest::should_capture_byte_vararg_by_creating_captor_with_primitive
file: /root/workbench/exportInfo/d4j_buggy/Mockito_3/test//org/mockitousage/matchers/CapturingArgumentsTest.java
# check: Selector contains assertion
Begin: Pos(225, 5)
End: Pos(237, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Mockito_3/test//org/mockitousage/matchers/CapturingArgumentsTest.java
Name: should_capture_byte_vararg_by_creating_captor_with_primitive
Childs: [StatementAssertion<Begin: Pos(234, 9), End: Pos(234, 59)>,
StatementAssertion<Begin: Pos(235, 9), End: Pos(235, 65)>,
StatementAssertion<Begin: Pos(236, 9), End: Pos(236, 97)>,
]
---
@Test public void should_capture_byte_vararg_by_creating_captor_with_primitive_catena_0()throws Exception {
    ArgumentCaptor < Byte > argumentCaptor = ArgumentCaptor.forClass(byte.class);
    mock.varargsbyte((byte)1, (byte)2);
    verify(mock).varargsbyte(argumentCaptor.capture());
    
}

---
---
@Test public void should_capture_byte_vararg_by_creating_captor_with_primitive_catena_1()throws Exception {
    ArgumentCaptor < Byte > argumentCaptor = ArgumentCaptor.forClass(byte.class);
    mock.varargsbyte((byte)1, (byte)2);
    assertEquals((byte)2, (byte)argumentCaptor.getValue());
    
}

---
---
@Test public void should_capture_byte_vararg_by_creating_captor_with_primitive_catena_2()throws Exception {
    ArgumentCaptor < Byte > argumentCaptor = ArgumentCaptor.forClass(byte.class);
    mock.varargsbyte((byte)1, (byte)2);
    Assertions.assertThat(argumentCaptor.getAllValues()).containsExactly((byte)1, (byte)2);
    
}

---
--------------------
Run: Mockito_33
@@@
Split test: org.mockitousage.bugs.InheritedGenericsPolimorphicCallTest::shouldStubbingWork
file: /root/workbench/exportInfo/d4j_buggy/Mockito_33/test//org/mockitousage/bugs/InheritedGenericsPolimorphicCallTest.java
Begin: Pos(36, 5)
End: Pos(41, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Mockito_33/test//org/mockitousage/bugs/InheritedGenericsPolimorphicCallTest.java
Name: shouldStubbingWork
Childs: [StatementAssertion<Begin: Pos(39, 9), End: Pos(39, 63)>,
StatementAssertion<Begin: Pos(40, 9), End: Pos(40, 50)>,
]
---
@Test public void shouldStubbingWork_catena_0() {
    Mockito.when(iterable.iterator()).thenReturn(myIterator);
    Assert.assertNotNull(((Iterable)iterable).iterator());
    
}

---
---
@Test public void shouldStubbingWork_catena_1() {
    Mockito.when(iterable.iterator()).thenReturn(myIterator);
    Assert.assertNotNull(iterable.iterator());
    
}

---
@@@
Split test: org.mockitousage.bugs.InheritedGenericsPolimorphicCallTest::shouldVerificationWorks
file: /root/workbench/exportInfo/d4j_buggy/Mockito_33/test//org/mockitousage/bugs/InheritedGenericsPolimorphicCallTest.java
Begin: Pos(43, 5)
End: Pos(49, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Mockito_33/test//org/mockitousage/bugs/InheritedGenericsPolimorphicCallTest.java
Name: shouldVerificationWorks
Childs: [StatementAssertion<Begin: Pos(47, 9), End: Pos(47, 36)>,
StatementAssertion<Begin: Pos(48, 9), End: Pos(48, 47)>,
]
---
@Test public void shouldVerificationWorks_catena_0() {
    iterable.iterator();
    verify(iterable).iterator();
    
}

---
---
@Test public void shouldVerificationWorks_catena_1() {
    iterable.iterator();
    verify((Iterable)iterable).iterator();
    
}

---
--------------------
Run: Mockito_21
@@@
Split test: org.mockito.internal.creation.instance.ConstructorInstantiatorTest::creates_instances_of_inner_classes
file: /root/workbench/exportInfo/d4j_buggy/Mockito_21/test//org/mockito/internal/creation/instance/ConstructorInstantiatorTest.java
Begin: Pos(19, 5)
End: Pos(22, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Mockito_21/test//org/mockito/internal/creation/instance/ConstructorInstantiatorTest.java
Name: creates_instances_of_inner_classes
Childs: [StatementAssertion<Begin: Pos(20, 9), End: Pos(20, 123)>,
StatementAssertion<Begin: Pos(21, 9), End: Pos(21, 136)>,
]
---
@Test public void creates_instances_of_inner_classes_catena_0() {
    assertEquals(new ConstructorInstantiator(this).newInstance(SomeInnerClass.class).getClass(), SomeInnerClass.class);
    
}

---
---
@Test public void creates_instances_of_inner_classes_catena_1() {
    assertEquals(new ConstructorInstantiator(new ChildOfThis()).newInstance(SomeInnerClass.class).getClass(), SomeInnerClass.class);
    
}

---
--------------------
Run: Mockito_11
@@@
Split test: org.mockito.internal.creation.DelegatingMethodTest::equals_should_return_true_when_equal
file: /root/workbench/exportInfo/d4j_buggy/Mockito_11/test//org/mockito/internal/creation/DelegatingMethodTest.java
Begin: Pos(27, 5)
End: Pos(31, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Mockito_11/test//org/mockito/internal/creation/DelegatingMethodTest.java
Name: equals_should_return_true_when_equal
Childs: [StatementAssertion<Begin: Pos(30, 9), End: Pos(30, 51)>,
]
@@@
Split test: org.mockito.internal.creation.DelegatingMethodTest::equals_should_return_true_when_self
file: /root/workbench/exportInfo/d4j_buggy/Mockito_11/test//org/mockito/internal/creation/DelegatingMethodTest.java
Begin: Pos(33, 5)
End: Pos(36, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Mockito_11/test//org/mockito/internal/creation/DelegatingMethodTest.java
Name: equals_should_return_true_when_self
Childs: [StatementAssertion<Begin: Pos(35, 9), End: Pos(35, 62)>,
]
--------------------
Run: Mockito_31
@@@
Split test: org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNullsTest::shouldPrintTheParametersWhenCallingAMethodWithArgs
file: /root/workbench/exportInfo/d4j_buggy/Mockito_31/test//org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNullsTest.java
Begin: Pos(51, 5)
End: Pos(58, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Mockito_31/test//org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNullsTest.java
Name: shouldPrintTheParametersWhenCallingAMethodWithArgs
Childs: [StatementAssertion<Begin: Pos(57, 6), End: Pos(57, 107)>,
]
--------------------
Run: Mockito_14
@@@
Split test: org.mockitousage.bugs.VerifyingWithAnExtraCallToADifferentMockTest::shouldAllowVerifyingWhenOtherMockCallIsInTheSameLine
file: /root/workbench/exportInfo/d4j_buggy/Mockito_14/test//org/mockitousage/bugs/VerifyingWithAnExtraCallToADifferentMockTest.java
Begin: Pos(20, 5)
End: Pos(30, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Mockito_14/test//org/mockitousage/bugs/VerifyingWithAnExtraCallToADifferentMockTest.java
Name: shouldAllowVerifyingWhenOtherMockCallIsInTheSameLine
Childs: [StatementAssertion<Begin: Pos(29, 9), End: Pos(29, 57)>,
]
--------------------
Run: Mockito_13
@@@
Split test: org.mockitousage.bugs.VerifyingWithAnExtraCallToADifferentMockTest::shouldAllowVerifyingWhenOtherMockCallIsInTheSameLine
file: /root/workbench/exportInfo/d4j_buggy/Mockito_13/test//org/mockitousage/bugs/VerifyingWithAnExtraCallToADifferentMockTest.java
# check: StatementExpression is in safe: <.verify>
Begin: Pos(21, 5)
End: Pos(35, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Mockito_13/test//org/mockitousage/bugs/VerifyingWithAnExtraCallToADifferentMockTest.java
Name: shouldAllowVerifyingWhenOtherMockCallIsInTheSameLine
Childs: [StatementAssertion<Begin: Pos(30, 9), End: Pos(30, 57)>,
StatementAssertion<Begin: Pos(33, 13), End: Pos(33, 19)>,
]
---
@Test public void shouldAllowVerifyingWhenOtherMockCallIsInTheSameLine_catena_0() {
    when(mock.otherMethod()).thenReturn("foo");
    mockTwo.simpleMethod("foo");
    verify(mockTwo).simpleMethod(mock.otherMethod());
    try {
        verify(mockTwo, never()).simpleMethod(mock.otherMethod());
        
    }
    catch(NeverWantedButInvoked e) {
        
    }
}

---
---
@Test public void shouldAllowVerifyingWhenOtherMockCallIsInTheSameLine_catena_1() {
    when(mock.otherMethod()).thenReturn("foo");
    mockTwo.simpleMethod("foo");
    try {
        verify(mockTwo, never()).simpleMethod(mock.otherMethod());
        fail();
        
    }
    catch(NeverWantedButInvoked e) {
        
    }
}

---
--------------------
Run: Mockito_35
@@@
Split test: org.mockitousage.bugs.NPEWithCertainMatchersTest::shouldNotThrowNPEWhenIntPassed
file: /root/workbench/exportInfo/d4j_buggy/Mockito_35/test//org/mockitousage/bugs/NPEWithCertainMatchersTest.java
Begin: Pos(34, 5)
End: Pos(39, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Mockito_35/test//org/mockitousage/bugs/NPEWithCertainMatchersTest.java
Name: shouldNotThrowNPEWhenIntPassed
Childs: [StatementAssertion<Begin: Pos(38, 9), End: Pos(38, 59)>,
]
@@@
Split test: org.mockitousage.bugs.NPEWithCertainMatchersTest::shouldNotThrowNPEWhenIntegerPassed
file: /root/workbench/exportInfo/d4j_buggy/Mockito_35/test//org/mockitousage/bugs/NPEWithCertainMatchersTest.java
Begin: Pos(27, 5)
End: Pos(32, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Mockito_35/test//org/mockitousage/bugs/NPEWithCertainMatchersTest.java
Name: shouldNotThrowNPEWhenIntegerPassed
Childs: [StatementAssertion<Begin: Pos(31, 9), End: Pos(31, 59)>,
]
@@@
Split test: org.mockitousage.bugs.NPEWithCertainMatchersTest::shouldNotThrowNPEWhenIntegerPassedToEq
file: /root/workbench/exportInfo/d4j_buggy/Mockito_35/test//org/mockitousage/bugs/NPEWithCertainMatchersTest.java
Begin: Pos(41, 5)
End: Pos(46, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Mockito_35/test//org/mockitousage/bugs/NPEWithCertainMatchersTest.java
Name: shouldNotThrowNPEWhenIntegerPassedToEq
Childs: [StatementAssertion<Begin: Pos(45, 9), End: Pos(45, 61)>,
]
@@@
Split test: org.mockitousage.bugs.NPEWithCertainMatchersTest::shouldNotThrowNPEWhenIntegerPassedToSame
file: /root/workbench/exportInfo/d4j_buggy/Mockito_35/test//org/mockitousage/bugs/NPEWithCertainMatchersTest.java
Begin: Pos(48, 5)
End: Pos(53, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Mockito_35/test//org/mockitousage/bugs/NPEWithCertainMatchersTest.java
Name: shouldNotThrowNPEWhenIntegerPassedToSame
Childs: [StatementAssertion<Begin: Pos(52, 9), End: Pos(52, 72)>,
]
--------------------
Run: Mockito_16
@@@
Split test: org.mockitousage.bugs.StubbingMocksThatAreConfiguredToReturnMocksTest::shouldAllowStubbingMocksConfiguredWithRETURNS_MOCKS
file: /root/workbench/exportInfo/d4j_buggy/Mockito_16/test//org/mockitousage/bugs/StubbingMocksThatAreConfiguredToReturnMocksTest.java
Begin: Pos(16, 5)
End: Pos(20, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Mockito_16/test//org/mockitousage/bugs/StubbingMocksThatAreConfiguredToReturnMocksTest.java
Name: shouldAllowStubbingMocksConfiguredWithRETURNS_MOCKS
Childs: []
--------------------
Run: Mockito_19
@@@
Split test: org.mockitousage.annotation.MockInjectionUsingSetterOrPropertyTest::shouldInsertFieldWithCorrectNameWhenMultipleTypesAvailable
file: /root/workbench/exportInfo/d4j_buggy/Mockito_19/test//org/mockitousage/annotation/MockInjectionUsingSetterOrPropertyTest.java
Begin: Pos(112, 5)
End: Pos(117, 2)
Source: /root/workbench/exportInfo/d4j_buggy/Mockito_19/test//org/mockitousage/annotation/MockInjectionUsingSetterOrPropertyTest.java
Name: shouldInsertFieldWithCorrectNameWhenMultipleTypesAvailable
Childs: [StatementAssertion<Begin: Pos(115, 3), End: Pos(115, 48)>,
StatementAssertion<Begin: Pos(116, 3), End: Pos(116, 51)>,
]
---
@Test public void shouldInsertFieldWithCorrectNameWhenMultipleTypesAvailable_catena_0() {
    MockitoAnnotations.initMocks(this);
    assertNull(otherSuperUnderTesting.candidate1);
    
}

---
---
@Test public void shouldInsertFieldWithCorrectNameWhenMultipleTypesAvailable_catena_1() {
    MockitoAnnotations.initMocks(this);
    assertNotNull(otherSuperUnderTesting.candidate2);
    
}

---
--------------------
Run: Mockito_20
@@@
Split test: org.mockitousage.annotation.SpyAnnotationTest::should_spy_inner_class
file: /root/workbench/exportInfo/d4j_buggy/Mockito_20/test//org/mockitousage/annotation/SpyAnnotationTest.java
Begin: Pos(123, 5)
End: Pos(151, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Mockito_20/test//org/mockitousage/annotation/SpyAnnotationTest.java
Name: should_spy_inner_class
Childs: [StatementAssertion<Begin: Pos(135, 15), End: Pos(135, 34)>,
StatementAssertion<Begin: Pos(150, 9), End: Pos(150, 70)>,
]
---
@Test public void should_spy_inner_class_catena_0()throws Exception {
    class WithMockAndSpy {
        @Spy private InnerStrength strength;
        @Mock private List < String > list;
        abstract class InnerStrength {
            private final String name;
            InnerStrength() {
                assertNotNull(list);
                this.name = "inner";
                
            }
            abstract String strength();
            String fullStrength() {
                return name + " " + strength();
                
            }
        }
    }
    WithMockAndSpy outer = new WithMockAndSpy();
    MockitoAnnotations.initMocks(outer);
    when(outer.strength.strength()).thenReturn("strength");
    
}

---
---
@Test public void should_spy_inner_class_catena_1()throws Exception {
    class WithMockAndSpy {
        @Spy private InnerStrength strength;
        @Mock private List < String > list;
        abstract class InnerStrength {
            private final String name;
            InnerStrength() {
                this.name = "inner";
                
            }
            abstract String strength();
            String fullStrength() {
                return name + " " + strength();
                
            }
        }
    }
    WithMockAndSpy outer = new WithMockAndSpy();
    MockitoAnnotations.initMocks(outer);
    when(outer.strength.strength()).thenReturn("strength");
    assertEquals("inner strength", outer.strength.fullStrength());
    
}

---
@@@
Split test: org.mockitousage.annotation.SpyAnnotationTest::should_report_when_constructor_is_explosive
file: /root/workbench/exportInfo/d4j_buggy/Mockito_20/test//org/mockitousage/annotation/SpyAnnotationTest.java
# check: Selector contains assertion
Begin: Pos(92, 5)
End: Pos(105, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Mockito_20/test//org/mockitousage/annotation/SpyAnnotationTest.java
Name: should_report_when_constructor_is_explosive
Childs: [StatementAssertion<Begin: Pos(101, 13), End: Pos(101, 19)>,
StatementAssertion<Begin: Pos(103, 13), End: Pos(103, 93)>,
]
---
@Test public void should_report_when_constructor_is_explosive_catena_0()throws Exception {
    class FailingSpy {
        @Spy ThrowingConstructor throwingConstructor;
        
    }
    try {
        MockitoAnnotations.initMocks(new FailingSpy());
        fail();
        
    }
    catch(MockitoException e) {
        
    }
}

---
---
@Test public void should_report_when_constructor_is_explosive_catena_1()throws Exception {
    class FailingSpy {
        @Spy ThrowingConstructor throwingConstructor;
        
    }
    try {
        MockitoAnnotations.initMocks(new FailingSpy());
        
    }
    catch(MockitoException e) {
        Assertions.assertThat(e.getMessage()).contains("Unable to create mock instance");
        
    }
}

---
@@@
Split test: org.mockitousage.constructor.CreatingMocksWithConstructorTest::can_spy_abstract_classes
file: /root/workbench/exportInfo/d4j_buggy/Mockito_20/test//org/mockitousage/constructor/CreatingMocksWithConstructorTest.java
Begin: Pos(43, 5)
End: Pos(47, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Mockito_20/test//org/mockitousage/constructor/CreatingMocksWithConstructorTest.java
Name: can_spy_abstract_classes
Childs: [StatementAssertion<Begin: Pos(46, 9), End: Pos(46, 48)>,
]
@@@
Split test: org.mockitousage.constructor.CreatingMocksWithConstructorTest::exception_message_when_constructor_not_found
file: /root/workbench/exportInfo/d4j_buggy/Mockito_20/test//org/mockitousage/constructor/CreatingMocksWithConstructorTest.java
Begin: Pos(59, 5)
End: Pos(70, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Mockito_20/test//org/mockitousage/constructor/CreatingMocksWithConstructorTest.java
Name: exception_message_when_constructor_not_found
Childs: [StatementAssertion<Begin: Pos(65, 13), End: Pos(65, 19)>,
StatementAssertion<Begin: Pos(67, 13), End: Pos(67, 100)>,
StatementAssertion<Begin: Pos(68, 13), End: Pos(68, 75)>,
]
---
@Test public void exception_message_when_constructor_not_found_catena_0() {
    try {
        spy(HasConstructor.class);
        fail();
        
    }
    catch(MockitoException e) {
        
    }
}

---
---
@Test public void exception_message_when_constructor_not_found_catena_1() {
    try {
        spy(HasConstructor.class);
        
    }
    catch(MockitoException e) {
        assertEquals("Unable to create mock instance of type 'HasConstructor'", e.getMessage());
        
    }
}

---
---
@Test public void exception_message_when_constructor_not_found_catena_2() {
    try {
        spy(HasConstructor.class);
        
    }
    catch(MockitoException e) {
        assertContains("0-arg constructor", e.getCause().getMessage());
        
    }
}

---
@@@
Split test: org.mockitousage.constructor.CreatingMocksWithConstructorTest::can_create_mock_with_constructor
file: /root/workbench/exportInfo/d4j_buggy/Mockito_20/test//org/mockitousage/constructor/CreatingMocksWithConstructorTest.java
Begin: Pos(30, 5)
End: Pos(35, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Mockito_20/test//org/mockitousage/constructor/CreatingMocksWithConstructorTest.java
Name: can_create_mock_with_constructor
Childs: [StatementAssertion<Begin: Pos(34, 9), End: Pos(34, 48)>,
]
@@@
Split test: org.mockitousage.constructor.CreatingMocksWithConstructorTest::can_mock_inner_classes
file: /root/workbench/exportInfo/d4j_buggy/Mockito_20/test//org/mockitousage/constructor/CreatingMocksWithConstructorTest.java
Begin: Pos(49, 5)
End: Pos(53, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Mockito_20/test//org/mockitousage/constructor/CreatingMocksWithConstructorTest.java
Name: can_mock_inner_classes
Childs: [StatementAssertion<Begin: Pos(52, 9), End: Pos(52, 48)>,
]
@@@
Split test: org.mockitousage.constructor.CreatingMocksWithConstructorTest::mocking_inner_classes_with_wrong_outer_instance
file: /root/workbench/exportInfo/d4j_buggy/Mockito_20/test//org/mockitousage/constructor/CreatingMocksWithConstructorTest.java
Begin: Pos(72, 5)
End: Pos(83, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Mockito_20/test//org/mockitousage/constructor/CreatingMocksWithConstructorTest.java
Name: mocking_inner_classes_with_wrong_outer_instance
Childs: [StatementAssertion<Begin: Pos(78, 13), End: Pos(78, 19)>,
StatementAssertion<Begin: Pos(80, 13), End: Pos(80, 96)>,
StatementAssertion<Begin: Pos(81, 13), End: Pos(81, 161)>,
]
---
@Test public void mocking_inner_classes_with_wrong_outer_instance_catena_0() {
    try {
        mock(InnerClass.class, withSettings().useConstructor().outerInstance("foo").defaultAnswer(CALLS_REAL_METHODS));
        fail();
        
    }
    catch(MockitoException e) {
        
    }
}

---
---
@Test public void mocking_inner_classes_with_wrong_outer_instance_catena_1() {
    try {
        mock(InnerClass.class, withSettings().useConstructor().outerInstance("foo").defaultAnswer(CALLS_REAL_METHODS));
        
    }
    catch(MockitoException e) {
        assertEquals("Unable to create mock instance of type 'InnerClass'", e.getMessage());
        
    }
}

---
---
@Test public void mocking_inner_classes_with_wrong_outer_instance_catena_2() {
    try {
        mock(InnerClass.class, withSettings().useConstructor().outerInstance("foo").defaultAnswer(CALLS_REAL_METHODS));
        
    }
    catch(MockitoException e) {
        assertContains("Please ensure that the outer instance has correct type and that the target class has 0-arg constructor.", e.getCause().getMessage());
        
    }
}

---
@@@
Split test: org.mockitousage.constructor.CreatingMocksWithConstructorTest::can_mock_abstract_classes
file: /root/workbench/exportInfo/d4j_buggy/Mockito_20/test//org/mockitousage/constructor/CreatingMocksWithConstructorTest.java
Begin: Pos(37, 5)
End: Pos(41, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Mockito_20/test//org/mockitousage/constructor/CreatingMocksWithConstructorTest.java
Name: can_mock_abstract_classes
Childs: [StatementAssertion<Begin: Pos(40, 9), End: Pos(40, 48)>,
]
--------------------
Run: Mockito_23
@@@
Split test: org.mockitousage.stubbing.DeepStubsSerializableTest::should_serialize_and_deserialize_mock_created_by_deep_stubs
file: /root/workbench/exportInfo/d4j_buggy/Mockito_23/test//org/mockitousage/stubbing/DeepStubsSerializableTest.java
Begin: Pos(17, 5)
End: Pos(32, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Mockito_23/test//org/mockitousage/stubbing/DeepStubsSerializableTest.java
Name: should_serialize_and_deserialize_mock_created_by_deep_stubs
Childs: [StatementAssertion<Begin: Pos(28, 9), End: Pos(28, 54)>,
StatementAssertion<Begin: Pos(30, 9), End: Pos(30, 92)>,
StatementAssertion<Begin: Pos(31, 9), End: Pos(31, 96)>,
]
---
@Test public void should_serialize_and_deserialize_mock_created_by_deep_stubs_catena_0()throws Exception {
    SampleClass sampleClass = mock(SampleClass.class, withSettings().defaultAnswer(Mockito.RETURNS_DEEP_STUBS).serializable());
    when(sampleClass.getSample().isSth()).thenReturn(STUBBED_BOOLEAN_VALUE);
    when(sampleClass.getSample().getNumber()).thenReturn(STUBBED_INTEGER_VALUE);
    Object o = SimpleSerializationUtil.serializeAndBack(sampleClass);
    assertThat(o).isInstanceOf(SampleClass.class);
    SampleClass deserializedSample = (SampleClass)o;
    
}

---
---
@Test public void should_serialize_and_deserialize_mock_created_by_deep_stubs_catena_1()throws Exception {
    SampleClass sampleClass = mock(SampleClass.class, withSettings().defaultAnswer(Mockito.RETURNS_DEEP_STUBS).serializable());
    when(sampleClass.getSample().isSth()).thenReturn(STUBBED_BOOLEAN_VALUE);
    when(sampleClass.getSample().getNumber()).thenReturn(STUBBED_INTEGER_VALUE);
    Object o = SimpleSerializationUtil.serializeAndBack(sampleClass);
    SampleClass deserializedSample = (SampleClass)o;
    assertThat(deserializedSample.getSample().isSth()).isEqualTo(STUBBED_BOOLEAN_VALUE);
    
}

---
---
@Test public void should_serialize_and_deserialize_mock_created_by_deep_stubs_catena_2()throws Exception {
    SampleClass sampleClass = mock(SampleClass.class, withSettings().defaultAnswer(Mockito.RETURNS_DEEP_STUBS).serializable());
    when(sampleClass.getSample().isSth()).thenReturn(STUBBED_BOOLEAN_VALUE);
    when(sampleClass.getSample().getNumber()).thenReturn(STUBBED_INTEGER_VALUE);
    Object o = SimpleSerializationUtil.serializeAndBack(sampleClass);
    SampleClass deserializedSample = (SampleClass)o;
    assertThat(deserializedSample.getSample().getNumber()).isEqualTo(STUBBED_INTEGER_VALUE);
    
}

---
--------------------
Run: Mockito_15
@@@
Split test: org.mockitousage.bugs.InjectMocksShouldTryPropertySettersFirstBeforeFieldAccessTest::shouldInjectUsingPropertySetterIfAvailable
file: /root/workbench/exportInfo/d4j_buggy/Mockito_15/test//org/mockitousage/bugs/InjectMocksShouldTryPropertySettersFirstBeforeFieldAccessTest.java
Begin: Pos(23, 5)
End: Pos(26, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Mockito_15/test//org/mockitousage/bugs/InjectMocksShouldTryPropertySettersFirstBeforeFieldAccessTest.java
Name: shouldInjectUsingPropertySetterIfAvailable
Childs: [StatementAssertion<Begin: Pos(25, 9), End: Pos(25, 57)>,
]
--------------------
Run: Mockito_6
@@@
Split test: org.mockitousage.matchers.AnyXMatchersAcceptNullsTest::shouldNotAcceptNullInAllAnyPrimitiveWrapperMatchers
file: /root/workbench/exportInfo/d4j_buggy/Mockito_6/test//org/mockitousage/matchers/AnyXMatchersAcceptNullsTest.java
Begin: Pos(43, 5)
End: Pos(62, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Mockito_6/test//org/mockitousage/matchers/AnyXMatchersAcceptNullsTest.java
Name: shouldNotAcceptNullInAllAnyPrimitiveWrapperMatchers
Childs: [StatementAssertion<Begin: Pos(54, 9), End: Pos(54, 50)>,
StatementAssertion<Begin: Pos(55, 9), End: Pos(55, 52)>,
StatementAssertion<Begin: Pos(56, 9), End: Pos(56, 48)>,
StatementAssertion<Begin: Pos(57, 9), End: Pos(57, 47)>,
StatementAssertion<Begin: Pos(58, 9), End: Pos(58, 50)>,
StatementAssertion<Begin: Pos(59, 9), End: Pos(59, 47)>,
StatementAssertion<Begin: Pos(60, 9), End: Pos(60, 48)>,
StatementAssertion<Begin: Pos(61, 9), End: Pos(61, 49)>,
]
---
@Test public void shouldNotAcceptNullInAllAnyPrimitiveWrapperMatchers_catena_0() {
    when(mock.forInteger(anyInt())).thenReturn("0");
    when(mock.forCharacter(anyChar())).thenReturn("1");
    when(mock.forShort(anyShort())).thenReturn("2");
    when(mock.forByte(anyByte())).thenReturn("3");
    when(mock.forBoolean(anyBoolean())).thenReturn("4");
    when(mock.forLong(anyLong())).thenReturn("5");
    when(mock.forFloat(anyFloat())).thenReturn("6");
    when(mock.forDouble(anyDouble())).thenReturn("7");
    assertEquals(null, mock.forInteger(null));
    
}

---
---
@Test public void shouldNotAcceptNullInAllAnyPrimitiveWrapperMatchers_catena_1() {
    when(mock.forInteger(anyInt())).thenReturn("0");
    when(mock.forCharacter(anyChar())).thenReturn("1");
    when(mock.forShort(anyShort())).thenReturn("2");
    when(mock.forByte(anyByte())).thenReturn("3");
    when(mock.forBoolean(anyBoolean())).thenReturn("4");
    when(mock.forLong(anyLong())).thenReturn("5");
    when(mock.forFloat(anyFloat())).thenReturn("6");
    when(mock.forDouble(anyDouble())).thenReturn("7");
    assertEquals(null, mock.forCharacter(null));
    
}

---
---
@Test public void shouldNotAcceptNullInAllAnyPrimitiveWrapperMatchers_catena_2() {
    when(mock.forInteger(anyInt())).thenReturn("0");
    when(mock.forCharacter(anyChar())).thenReturn("1");
    when(mock.forShort(anyShort())).thenReturn("2");
    when(mock.forByte(anyByte())).thenReturn("3");
    when(mock.forBoolean(anyBoolean())).thenReturn("4");
    when(mock.forLong(anyLong())).thenReturn("5");
    when(mock.forFloat(anyFloat())).thenReturn("6");
    when(mock.forDouble(anyDouble())).thenReturn("7");
    assertEquals(null, mock.forShort(null));
    
}

---
---
@Test public void shouldNotAcceptNullInAllAnyPrimitiveWrapperMatchers_catena_3() {
    when(mock.forInteger(anyInt())).thenReturn("0");
    when(mock.forCharacter(anyChar())).thenReturn("1");
    when(mock.forShort(anyShort())).thenReturn("2");
    when(mock.forByte(anyByte())).thenReturn("3");
    when(mock.forBoolean(anyBoolean())).thenReturn("4");
    when(mock.forLong(anyLong())).thenReturn("5");
    when(mock.forFloat(anyFloat())).thenReturn("6");
    when(mock.forDouble(anyDouble())).thenReturn("7");
    assertEquals(null, mock.forByte(null));
    
}

---
---
@Test public void shouldNotAcceptNullInAllAnyPrimitiveWrapperMatchers_catena_4() {
    when(mock.forInteger(anyInt())).thenReturn("0");
    when(mock.forCharacter(anyChar())).thenReturn("1");
    when(mock.forShort(anyShort())).thenReturn("2");
    when(mock.forByte(anyByte())).thenReturn("3");
    when(mock.forBoolean(anyBoolean())).thenReturn("4");
    when(mock.forLong(anyLong())).thenReturn("5");
    when(mock.forFloat(anyFloat())).thenReturn("6");
    when(mock.forDouble(anyDouble())).thenReturn("7");
    assertEquals(null, mock.forBoolean(null));
    
}

---
---
@Test public void shouldNotAcceptNullInAllAnyPrimitiveWrapperMatchers_catena_5() {
    when(mock.forInteger(anyInt())).thenReturn("0");
    when(mock.forCharacter(anyChar())).thenReturn("1");
    when(mock.forShort(anyShort())).thenReturn("2");
    when(mock.forByte(anyByte())).thenReturn("3");
    when(mock.forBoolean(anyBoolean())).thenReturn("4");
    when(mock.forLong(anyLong())).thenReturn("5");
    when(mock.forFloat(anyFloat())).thenReturn("6");
    when(mock.forDouble(anyDouble())).thenReturn("7");
    assertEquals(null, mock.forLong(null));
    
}

---
---
@Test public void shouldNotAcceptNullInAllAnyPrimitiveWrapperMatchers_catena_6() {
    when(mock.forInteger(anyInt())).thenReturn("0");
    when(mock.forCharacter(anyChar())).thenReturn("1");
    when(mock.forShort(anyShort())).thenReturn("2");
    when(mock.forByte(anyByte())).thenReturn("3");
    when(mock.forBoolean(anyBoolean())).thenReturn("4");
    when(mock.forLong(anyLong())).thenReturn("5");
    when(mock.forFloat(anyFloat())).thenReturn("6");
    when(mock.forDouble(anyDouble())).thenReturn("7");
    assertEquals(null, mock.forFloat(null));
    
}

---
---
@Test public void shouldNotAcceptNullInAllAnyPrimitiveWrapperMatchers_catena_7() {
    when(mock.forInteger(anyInt())).thenReturn("0");
    when(mock.forCharacter(anyChar())).thenReturn("1");
    when(mock.forShort(anyShort())).thenReturn("2");
    when(mock.forByte(anyByte())).thenReturn("3");
    when(mock.forBoolean(anyBoolean())).thenReturn("4");
    when(mock.forLong(anyLong())).thenReturn("5");
    when(mock.forFloat(anyFloat())).thenReturn("6");
    when(mock.forDouble(anyDouble())).thenReturn("7");
    assertEquals(null, mock.forDouble(null));
    
}

---
@@@
Split test: org.mockitousage.matchers.AnyXMatchersAcceptNullsTest::shouldNotAcceptNullInAnyXMatchers
file: /root/workbench/exportInfo/d4j_buggy/Mockito_6/test//org/mockitousage/matchers/AnyXMatchersAcceptNullsTest.java
Begin: Pos(26, 5)
End: Pos(41, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Mockito_6/test//org/mockitousage/matchers/AnyXMatchersAcceptNullsTest.java
Name: shouldNotAcceptNullInAnyXMatchers
Childs: [StatementAssertion<Begin: Pos(35, 9), End: Pos(35, 55)>,
StatementAssertion<Begin: Pos(36, 9), End: Pos(36, 55)>,
StatementAssertion<Begin: Pos(37, 9), End: Pos(37, 47)>,
StatementAssertion<Begin: Pos(38, 9), End: Pos(38, 46)>,
StatementAssertion<Begin: Pos(39, 9), End: Pos(39, 53)>,
StatementAssertion<Begin: Pos(40, 9), End: Pos(40, 46)>,
]
---
@Test public void shouldNotAcceptNullInAnyXMatchers_catena_0() {
    when(mock.oneArg(anyObject())).thenReturn("0");
    when(mock.oneArg(anyString())).thenReturn("1");
    when(mock.forList(anyList())).thenReturn("2");
    when(mock.forMap(anyMap())).thenReturn("3");
    when(mock.forCollection(anyCollection())).thenReturn("4");
    when(mock.forSet(anySet())).thenReturn("5");
    assertEquals(null, mock.oneArg((Object)null));
    
}

---
---
@Test public void shouldNotAcceptNullInAnyXMatchers_catena_1() {
    when(mock.oneArg(anyObject())).thenReturn("0");
    when(mock.oneArg(anyString())).thenReturn("1");
    when(mock.forList(anyList())).thenReturn("2");
    when(mock.forMap(anyMap())).thenReturn("3");
    when(mock.forCollection(anyCollection())).thenReturn("4");
    when(mock.forSet(anySet())).thenReturn("5");
    assertEquals(null, mock.oneArg((String)null));
    
}

---
---
@Test public void shouldNotAcceptNullInAnyXMatchers_catena_2() {
    when(mock.oneArg(anyObject())).thenReturn("0");
    when(mock.oneArg(anyString())).thenReturn("1");
    when(mock.forList(anyList())).thenReturn("2");
    when(mock.forMap(anyMap())).thenReturn("3");
    when(mock.forCollection(anyCollection())).thenReturn("4");
    when(mock.forSet(anySet())).thenReturn("5");
    assertEquals(null, mock.forList(null));
    
}

---
---
@Test public void shouldNotAcceptNullInAnyXMatchers_catena_3() {
    when(mock.oneArg(anyObject())).thenReturn("0");
    when(mock.oneArg(anyString())).thenReturn("1");
    when(mock.forList(anyList())).thenReturn("2");
    when(mock.forMap(anyMap())).thenReturn("3");
    when(mock.forCollection(anyCollection())).thenReturn("4");
    when(mock.forSet(anySet())).thenReturn("5");
    assertEquals(null, mock.forMap(null));
    
}

---
---
@Test public void shouldNotAcceptNullInAnyXMatchers_catena_4() {
    when(mock.oneArg(anyObject())).thenReturn("0");
    when(mock.oneArg(anyString())).thenReturn("1");
    when(mock.forList(anyList())).thenReturn("2");
    when(mock.forMap(anyMap())).thenReturn("3");
    when(mock.forCollection(anyCollection())).thenReturn("4");
    when(mock.forSet(anySet())).thenReturn("5");
    assertEquals(null, mock.forCollection(null));
    
}

---
---
@Test public void shouldNotAcceptNullInAnyXMatchers_catena_5() {
    when(mock.oneArg(anyObject())).thenReturn("0");
    when(mock.oneArg(anyString())).thenReturn("1");
    when(mock.forList(anyList())).thenReturn("2");
    when(mock.forMap(anyMap())).thenReturn("3");
    when(mock.forCollection(anyCollection())).thenReturn("4");
    when(mock.forSet(anySet())).thenReturn("5");
    assertEquals(null, mock.forSet(null));
    
}

---
@@@
Split test: org.mockitousage.matchers.MatchersTest::anyStringMatcher
file: /root/workbench/exportInfo/d4j_buggy/Mockito_6/test//org/mockitousage/matchers/MatchersTest.java
Begin: Pos(226, 5)
End: Pos(233, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Mockito_6/test//org/mockitousage/matchers/MatchersTest.java
Name: anyStringMatcher
Childs: [StatementAssertion<Begin: Pos(230, 9), End: Pos(230, 49)>,
StatementAssertion<Begin: Pos(231, 9), End: Pos(231, 59)>,
StatementAssertion<Begin: Pos(232, 9), End: Pos(232, 55)>,
]
---
@Test public void anyStringMatcher_catena_0() {
    when(mock.oneArg(anyString())).thenReturn("matched");
    assertEquals("matched", mock.oneArg(""));
    
}

---
---
@Test public void anyStringMatcher_catena_1() {
    when(mock.oneArg(anyString())).thenReturn("matched");
    assertEquals("matched", mock.oneArg("any string"));
    
}

---
---
@Test public void anyStringMatcher_catena_2() {
    when(mock.oneArg(anyString())).thenReturn("matched");
    assertEquals(null, mock.oneArg((String)null));
    
}

---
@@@
Split test: org.mockitousage.matchers.NewMatchersTest::shouldAllowAnyCollection
file: /root/workbench/exportInfo/d4j_buggy/Mockito_6/test//org/mockitousage/matchers/NewMatchersTest.java
Begin: Pos(40, 5)
End: Pos(48, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Mockito_6/test//org/mockitousage/matchers/NewMatchersTest.java
Name: shouldAllowAnyCollection
Childs: [StatementAssertion<Begin: Pos(44, 9), End: Pos(44, 77)>,
StatementAssertion<Begin: Pos(45, 9), End: Pos(45, 53)>,
StatementAssertion<Begin: Pos(47, 9), End: Pos(47, 62)>,
]
---
@Test public void shouldAllowAnyCollection_catena_0() {
    when(mock.forCollection(anyCollection())).thenReturn("matched");
    assertEquals("matched", mock.forCollection(Arrays.asList("x", "y")));
    
}

---
---
@Test public void shouldAllowAnyCollection_catena_1() {
    when(mock.forCollection(anyCollection())).thenReturn("matched");
    assertEquals(null, mock.forCollection(null));
    
}

---
---
@Test public void shouldAllowAnyCollection_catena_2() {
    when(mock.forCollection(anyCollection())).thenReturn("matched");
    verify(mock, times(1)).forCollection(anyCollection());
    
}

---
@@@
Split test: org.mockitousage.matchers.NewMatchersTest::shouldAllowAnyList
file: /root/workbench/exportInfo/d4j_buggy/Mockito_6/test//org/mockitousage/matchers/NewMatchersTest.java
Begin: Pos(30, 5)
End: Pos(38, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Mockito_6/test//org/mockitousage/matchers/NewMatchersTest.java
Name: shouldAllowAnyList
Childs: [StatementAssertion<Begin: Pos(34, 9), End: Pos(34, 71)>,
StatementAssertion<Begin: Pos(35, 9), End: Pos(35, 47)>,
StatementAssertion<Begin: Pos(37, 9), End: Pos(37, 50)>,
]
---
@Test public void shouldAllowAnyList_catena_0() {
    when(mock.forList(anyList())).thenReturn("matched");
    assertEquals("matched", mock.forList(Arrays.asList("x", "y")));
    
}

---
---
@Test public void shouldAllowAnyList_catena_1() {
    when(mock.forList(anyList())).thenReturn("matched");
    assertEquals(null, mock.forList(null));
    
}

---
---
@Test public void shouldAllowAnyList_catena_2() {
    when(mock.forList(anyList())).thenReturn("matched");
    verify(mock, times(1)).forList(anyList());
    
}

---
@@@
Split test: org.mockitousage.matchers.NewMatchersTest::shouldAllowAnyMap
file: /root/workbench/exportInfo/d4j_buggy/Mockito_6/test//org/mockitousage/matchers/NewMatchersTest.java
Begin: Pos(50, 5)
End: Pos(58, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Mockito_6/test//org/mockitousage/matchers/NewMatchersTest.java
Name: shouldAllowAnyMap
Childs: [StatementAssertion<Begin: Pos(54, 9), End: Pos(54, 76)>,
StatementAssertion<Begin: Pos(55, 9), End: Pos(55, 46)>,
StatementAssertion<Begin: Pos(57, 9), End: Pos(57, 48)>,
]
---
@Test public void shouldAllowAnyMap_catena_0() {
    when(mock.forMap(anyMap())).thenReturn("matched");
    assertEquals("matched", mock.forMap(new HashMap < String, String > ()));
    
}

---
---
@Test public void shouldAllowAnyMap_catena_1() {
    when(mock.forMap(anyMap())).thenReturn("matched");
    assertEquals(null, mock.forMap(null));
    
}

---
---
@Test public void shouldAllowAnyMap_catena_2() {
    when(mock.forMap(anyMap())).thenReturn("matched");
    verify(mock, times(1)).forMap(anyMap());
    
}

---
@@@
Split test: org.mockitousage.matchers.NewMatchersTest::shouldAllowAnySet
file: /root/workbench/exportInfo/d4j_buggy/Mockito_6/test//org/mockitousage/matchers/NewMatchersTest.java
Begin: Pos(60, 5)
End: Pos(68, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Mockito_6/test//org/mockitousage/matchers/NewMatchersTest.java
Name: shouldAllowAnySet
Childs: [StatementAssertion<Begin: Pos(64, 9), End: Pos(64, 68)>,
StatementAssertion<Begin: Pos(65, 9), End: Pos(65, 46)>,
StatementAssertion<Begin: Pos(67, 9), End: Pos(67, 48)>,
]
---
@Test public void shouldAllowAnySet_catena_0() {
    when(mock.forSet(anySet())).thenReturn("matched");
    assertEquals("matched", mock.forSet(new HashSet < String > ()));
    
}

---
---
@Test public void shouldAllowAnySet_catena_1() {
    when(mock.forSet(anySet())).thenReturn("matched");
    assertEquals(null, mock.forSet(null));
    
}

---
---
@Test public void shouldAllowAnySet_catena_2() {
    when(mock.forSet(anySet())).thenReturn("matched");
    verify(mock, times(1)).forSet(anySet());
    
}

---
--------------------
Run: Mockito_2
@@@
Split test: org.mockito.internal.util.TimerTest::should_throw_friendly_reminder_exception_when_duration_is_negative
file: /root/workbench/exportInfo/d4j_buggy/Mockito_2/test//org/mockito/internal/util/TimerTest.java
Begin: Pos(44, 5)
End: Pos(52, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Mockito_2/test//org/mockito/internal/util/TimerTest.java
Name: should_throw_friendly_reminder_exception_when_duration_is_negative
Childs: [StatementAssertion<Begin: Pos(48, 13), End: Pos(48, 100)>,
StatementAssertion<Begin: Pos(50, 13), End: Pos(50, 36)>,
]
---
@Test public void should_throw_friendly_reminder_exception_when_duration_is_negative_catena_0() {
    try {
        new Timer( - 1);
        Assert.fail("It is forbidden to create timer with negative value of timer's duration.");
        
    }
    catch(FriendlyReminderException e) {
        
    }
}

---
---
@Test public void should_throw_friendly_reminder_exception_when_duration_is_negative_catena_1() {
    try {
        new Timer( - 1);
        
    }
    catch(FriendlyReminderException e) {
        Assert.assertTrue(true);
        
    }
}

---
@@@
Split test: org.mockito.verification.NegativeDurationTest::should_throw_exception_when_duration_is_negative_for_timeout_method
file: /root/workbench/exportInfo/d4j_buggy/Mockito_2/test//org/mockito/verification/NegativeDurationTest.java
Begin: Pos(10, 5)
End: Pos(18, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Mockito_2/test//org/mockito/verification/NegativeDurationTest.java
Name: should_throw_exception_when_duration_is_negative_for_timeout_method
Childs: [StatementAssertion<Begin: Pos(14, 13), End: Pos(14, 92)>,
StatementAssertion<Begin: Pos(16, 13), End: Pos(16, 36)>,
]
---
@Test public void should_throw_exception_when_duration_is_negative_for_timeout_method_catena_0() {
    try {
        Mockito.timeout( - 1);
        Assert.fail("It is forbidden to invoke Mockito.timeout() with negative value.");
        
    }
    catch(FriendlyReminderException e) {
        
    }
}

---
---
@Test public void should_throw_exception_when_duration_is_negative_for_timeout_method_catena_1() {
    try {
        Mockito.timeout( - 1);
        
    }
    catch(FriendlyReminderException e) {
        Assert.assertTrue(true);
        
    }
}

---
@@@
Split test: org.mockito.verification.NegativeDurationTest::should_throw_exception_when_duration_is_negative_for_after_method
file: /root/workbench/exportInfo/d4j_buggy/Mockito_2/test//org/mockito/verification/NegativeDurationTest.java
Begin: Pos(20, 5)
End: Pos(28, 5)
Source: /root/workbench/exportInfo/d4j_buggy/Mockito_2/test//org/mockito/verification/NegativeDurationTest.java
Name: should_throw_exception_when_duration_is_negative_for_after_method
Childs: [StatementAssertion<Begin: Pos(24, 13), End: Pos(24, 90)>,
StatementAssertion<Begin: Pos(26, 13), End: Pos(26, 36)>,
]
---
@Test public void should_throw_exception_when_duration_is_negative_for_after_method_catena_0() {
    try {
        Mockito.after( - 1);
        Assert.fail("It is forbidden to invoke Mockito.after() with negative value.");
        
    }
    catch(FriendlyReminderException e) {
        
    }
}

---
---
@Test public void should_throw_exception_when_duration_is_negative_for_after_method_catena_1() {
    try {
        Mockito.after( - 1);
        
    }
    catch(FriendlyReminderException e) {
        Assert.assertTrue(true);
        
    }
}

---
---
check list:
Lang_34@org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionHierarchy
Lang_34@org.apache.commons.lang3.builder.ToStringBuilderTest::testSelfInstanceTwoVarsReflectionObjectCycle
Lang_34@org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionArrayCycle
Lang_34@org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionLongArrayArray
Lang_34@org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionArrayArrayCycle
Lang_34@org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionFloatArray
Lang_34@org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionDoubleArrayArray
Lang_34@org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionBooleanArray
Lang_34@org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionyteArray
Lang_34@org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionDoubleArray
Lang_34@org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionIntArrayArray
Lang_34@org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionLongArray
Lang_34@org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionhortArrayArray
Lang_34@org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionObjectArray
Lang_34@org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionObjectCycle
Lang_34@org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionBooleanArrayArray
Lang_34@org.apache.commons.lang3.builder.ToStringBuilderTest::testSimpleReflectionObjectCycle
Lang_34@org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionByteArrayArray
Lang_34@org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionArrayCycleLevel2
Lang_34@org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionArrayAndObjectCycle
Lang_34@org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionCharArrayArray
Lang_34@org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionShortArray
Lang_34@org.apache.commons.lang3.builder.ToStringBuilderTest::testSelfInstanceVarReflectionObjectCycle
Lang_34@org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionIntArray
Lang_34@org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionCharArray
Lang_34@org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionFloatArrayArray
Lang_5@org.apache.commons.lang3.LocaleUtilsTest::testLang865
Math_102@org.apache.commons.math.stat.inference.ChiSquareTestTest::testChiSquare
Math_102@org.apache.commons.math.stat.inference.TestUtilsTest::testChiSquare
Math_55@org.apache.commons.math.geometry.Vector3DTest::testCrossProductCancellation
Closure_173@com.google.javascript.jscomp.CodePrinterTest::testIssue1062
Closure_135@com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest::testRewritePrototypeMethods2
Closure_162@com.google.javascript.jscomp.ScopedAliasesTest::testForwardJsDoc
Closure_56@com.google.javascript.jscomp.JsMessageExtractorTest::testSyntaxError1
Closure_56@com.google.javascript.jscomp.JsMessageExtractorTest::testSyntaxError2
Closure_139@com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations
Closure_141@com.google.javascript.jscomp.ExpresssionDecomposerTest::testCanExposeExpression2
Closure_141@com.google.javascript.jscomp.ExpresssionDecomposerTest::testCanExposeExpression7
Closure_141@com.google.javascript.jscomp.PureFunctionIdentifierTest::testCallFunctionFOrGViaHookWithSideEffects
Closure_141@com.google.javascript.jscomp.PureFunctionIdentifierTest::testCallFunctionForGorH
Closure_141@com.google.javascript.jscomp.PureFunctionIdentifierTest::testCallFunctionFOrG
Closure_141@com.google.javascript.jscomp.PureFunctionIdentifierTest::testCallFunctionFOrGViaHook
Closure_141@com.google.javascript.jscomp.PureFunctionIdentifierTest::testCallFunctionFOrGWithSideEffects
Closure_167@com.google.javascript.rhino.jstype.JSTypeTest::testRestrictedTypeGivenToBoolean
Closure_102@com.google.javascript.jscomp.CompilerRunnerTest::testIssue115
Closure_164@com.google.javascript.rhino.jstype.FunctionTypeTest::testSupAndInfOfReturnTypesWithNumOfParams
Closure_58@com.google.javascript.jscomp.LiveVariableAnalysisTest::testExpressionInForIn
Closure_157@com.google.javascript.jscomp.SimpleDefinitionFinderTest::testDefineNumber
Closure_157@com.google.javascript.jscomp.parsing.IRFactoryTest::testObjectLiteral6
Closure_157@com.google.javascript.jscomp.parsing.IRFactoryTest::testObjectLiteral7
Closure_157@com.google.javascript.jscomp.parsing.IRFactoryTest::testObjectLiteral8
Closure_137@com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest::testArguments
Closure_7@com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest::testGoogIsFunction2
Closure_7@com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest::testTypeof3
Closure_138@com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest::testGoogIsArrayOnNull
Closure_138@com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest::testGoogIsFunctionOnNull
Closure_138@com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest::testGoogIsObjectOnNull
Closure_144@com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsAssign
Closure_144@com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsMember
Closure_144@com.google.javascript.jscomp.CodePrinterTest::testOptionalTypesAnnotation
Closure_144@com.google.javascript.jscomp.CodePrinterTest::testTempConstructor
Closure_144@com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsDispatcher1
Closure_144@com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsDispatcher2
Closure_144@com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsImplements
Closure_144@com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsNamespace
Closure_144@com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotations
Closure_144@com.google.javascript.jscomp.CodePrinterTest::testVariableArgumentsTypesAnnotation
Closure_144@com.google.javascript.jscomp.CodePrinterTest::testEmitUnknownParamTypesAsAllType
Closure_144@com.google.javascript.jscomp.CodePrinterTest::testTypeAnnotationsMemberSubclass
Closure_144@com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest::testRewritePrototypeMethods2
Closure_144@com.google.javascript.jscomp.LooseTypeCheckTest::testNestedFunctionInference1
Closure_144@com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference12
Closure_144@com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference13
Closure_144@com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference15
Closure_144@com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference16
Closure_144@com.google.javascript.jscomp.LooseTypeCheckTest::testGoodExtends7
Closure_144@com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference1
Closure_144@com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference2
Closure_144@com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference3
Closure_144@com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference4
Closure_144@com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference7
Closure_144@com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference8
Closure_144@com.google.javascript.jscomp.LooseTypeCheckTest::testFunctionInference9
Closure_144@com.google.javascript.jscomp.TypeCheckTest::testNestedFunctionInference1
Closure_144@com.google.javascript.jscomp.TypeCheckTest::testFunctionInference12
Closure_144@com.google.javascript.jscomp.TypeCheckTest::testFunctionInference13
Closure_144@com.google.javascript.jscomp.TypeCheckTest::testFunctionInference15
Closure_144@com.google.javascript.jscomp.TypeCheckTest::testFunctionInference16
Closure_144@com.google.javascript.jscomp.TypeCheckTest::testGoodExtends7
Closure_144@com.google.javascript.jscomp.TypeCheckTest::testFunctionInference1
Closure_144@com.google.javascript.jscomp.TypeCheckTest::testFunctionInference2
Closure_144@com.google.javascript.jscomp.TypeCheckTest::testFunctionInference3
Closure_144@com.google.javascript.jscomp.TypeCheckTest::testFunctionInference4
Closure_144@com.google.javascript.jscomp.TypeCheckTest::testFunctionInference7
Closure_144@com.google.javascript.jscomp.TypeCheckTest::testFunctionInference8
Closure_144@com.google.javascript.jscomp.TypeCheckTest::testFunctionInference9
Closure_147@com.google.javascript.jscomp.RuntimeTypeCheckTest::testValueWithInnerFn
Mockito_37@org.mockito.internal.stubbing.answers.AnswersValidatorTest::shouldFailWhenCallingRealMethodOnIterface
Mockito_32@org.mockitousage.bugs.SpyShouldHaveNiceNameTest::shouldPrintNiceName
Mockito_12@org.mockitousage.annotation.CaptorAnnotationTest::testNormalUsage
Mockito_3@org.mockito.internal.invocation.InvocationMatcherTest::should_capture_varargs_as_vararg
Mockito_3@org.mockitousage.matchers.CapturingArgumentsTest::should_capture_all_vararg
Mockito_3@org.mockitousage.matchers.CapturingArgumentsTest::captures_correctly_when_captor_used_multiple_times
Mockito_3@org.mockitousage.matchers.CapturingArgumentsTest::should_capture_vararg
Mockito_3@org.mockitousage.matchers.CapturingArgumentsTest::captures_correctly_when_captor_used_on_pure_vararg_method
Mockito_3@org.mockitousage.matchers.CapturingArgumentsTest::should_capture_byte_vararg_by_creating_captor_with_primitive_wrapper
Mockito_3@org.mockitousage.matchers.CapturingArgumentsTest::should_capture_byte_vararg_by_creating_captor_with_primitive
Mockito_13@org.mockitousage.bugs.VerifyingWithAnExtraCallToADifferentMockTest::shouldAllowVerifyingWhenOtherMockCallIsInTheSameLine
Mockito_20@org.mockitousage.annotation.SpyAnnotationTest::should_report_when_constructor_is_explosive
---
exception list:
Lang_10@org.apache.commons.lang3.time.FastDateFormat_ParserTest::testLANG_831
Lang_8@org.apache.commons.lang3.time.FastDateFormat_PrinterTest::testCalendarTimezoneRespected
Math_43@org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest::testOverrideMeanWithMathClass
Math_43@org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest::testOverrideGeoMeanWithMathClass
Math_43@org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest::testOverrideVarianceWithMathClass
Math_22@org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive
Math_22@org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive
Math_12@org.apache.commons.math3.distribution.GammaDistributionTest::testDistributionClone
Math_12@org.apache.commons.math3.distribution.LogNormalDistributionTest::testDistributionClone
Math_12@org.apache.commons.math3.distribution.NormalDistributionTest::testDistributionClone
Math_102@org.apache.commons.math.stat.inference.ChiSquareFactoryTest::testChiSquareLargeTestStatistic
Math_102@org.apache.commons.math.stat.inference.ChiSquareFactoryTest::testChiSquare
Math_29@org.apache.commons.math3.linear.SparseRealVectorTest::testEbeDivideMixedTypes
Math_29@org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplyMixedTypes
Math_29@org.apache.commons.math3.linear.SparseRealVectorTest::testEbeMultiplySameType
Math_6@org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
Math_6@org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
