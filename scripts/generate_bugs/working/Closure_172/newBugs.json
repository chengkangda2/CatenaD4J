{
    "original": {
        "num_of_hunks": 2,
        "0": {
            "file_name": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
            "replaced_with": "        String className = qName.substring(0, qName.lastIndexOf(\".prototype\"));\n        Var slot = scope.getSlot(className);\n        JSType classType = slot == null ? null : slot.getType();\n        if (classType != null\n            && (classType.isConstructor() || classType.isInterface())) {\n",
            "patch_type": "insert",
            "next_line_no": 1670
        },
        "1": {
            "file_name": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
            "replaced_with": "        }\n",
            "patch_type": "insert",
            "next_line_no": 1671
        }
    },
    "method": {
        "failing_tests": [
            "com.google.javascript.jscomp.TypeCheckTest::testIssue1024"
        ],
        "com.google.javascript.jscomp.TypeCheckTest::testIssue1024": {
            "file_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
            "Instance": "Begin: Pos(11992, 10)\nEnd: Pos(12021, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Closure_172/test//com/google/javascript/jscomp/TypeCheckTest.java\nName: testIssue1024\nChilds: [StatementAssertion<Begin: Pos(11993, 6), End: Pos(12003, 15)>,\nStatementAssertion<Begin: Pos(12008, 6), End: Pos(12020, 44)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Closure_172/test//com/google/javascript/jscomp/TypeCheckTest.java",
            "name": "testIssue1024",
            "begin": "Pos(11992, 10)",
            "end": "Pos(12021, 3)",
            "begin_line_no": 11992,
            "end_line_no": 12021,
            "child": [
                "Begin: Pos(11993, 6)\nEnd: Pos(12003, 15)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(12008, 6)\nEnd: Pos(12020, 44)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "  public void testIssue1024$catena_0() throws Exception {\n     testTypes(\n        \"/** @param {Object} a */\\n\" +\n        \"function f(a) {\\n\" +\n        \"  a.prototype = '__proto'\\n\" +\n        \"}\\n\" +\n        \"/** @param {Object} b\\n\" +\n        \" *  @return {!Object}\\n\" +\n        \" */\\n\" +\n        \"function g(b) {\\n\" +\n        \"  return b.prototype\\n\" +\n        \"}\\n\");                                                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n     /* TODO(blickly): Make this warning go away.\n      * This is old behavior, but it doesn't make sense to warn about since\n      * both assignments are inferred.\n      */\n     try{ testTypes(\n        \"/** @param {Object} a */\\n\" +\n        \"function f(a) {\\n\" +\n        \"  a.prototype = {foo:3};\\n\" +\n        \"}\\n\" +\n        \"/** @param {Object} b\\n\" +\n        \" */\\n\" +\n        \"function g(b) {\\n\" +\n        \"  b.prototype = function(){};\\n\" +\n        \"}\\n\",\n        \"assignment to property prototype of Object\\n\" +\n        \"found   : {foo: number}\\n\" +\n        \"required: function (): undefined\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testIssue1024$catena_1() throws Exception {\n     try{ testTypes(\n        \"/** @param {Object} a */\\n\" +\n        \"function f(a) {\\n\" +\n        \"  a.prototype = '__proto'\\n\" +\n        \"}\\n\" +\n        \"/** @param {Object} b\\n\" +\n        \" *  @return {!Object}\\n\" +\n        \" */\\n\" +\n        \"function g(b) {\\n\" +\n        \"  return b.prototype\\n\" +\n        \"}\\n\");                                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n     /* TODO(blickly): Make this warning go away.\n      * This is old behavior, but it doesn't make sense to warn about since\n      * both assignments are inferred.\n      */\n     testTypes(\n        \"/** @param {Object} a */\\n\" +\n        \"function f(a) {\\n\" +\n        \"  a.prototype = {foo:3};\\n\" +\n        \"}\\n\" +\n        \"/** @param {Object} b\\n\" +\n        \" */\\n\" +\n        \"function g(b) {\\n\" +\n        \"  b.prototype = function(){};\\n\" +\n        \"}\\n\",\n        \"assignment to property prototype of Object\\n\" +\n        \"found   : {foo: number}\\n\" +\n        \"required: function (): undefined\");                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            ],
            "func": {
                "0": "  public void testIssue1024$catena_0() throws Exception {\n     testTypes(\n        \"/** @param {Object} a */\\n\" +\n        \"function f(a) {\\n\" +\n        \"  a.prototype = '__proto'\\n\" +\n        \"}\\n\" +\n        \"/** @param {Object} b\\n\" +\n        \" *  @return {!Object}\\n\" +\n        \" */\\n\" +\n        \"function g(b) {\\n\" +\n        \"  return b.prototype\\n\" +\n        \"}\\n\");                                                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n     /* TODO(blickly): Make this warning go away.\n      * This is old behavior, but it doesn't make sense to warn about since\n      * both assignments are inferred.\n      */\n     try{ testTypes(\n        \"/** @param {Object} a */\\n\" +\n        \"function f(a) {\\n\" +\n        \"  a.prototype = {foo:3};\\n\" +\n        \"}\\n\" +\n        \"/** @param {Object} b\\n\" +\n        \" */\\n\" +\n        \"function g(b) {\\n\" +\n        \"  b.prototype = function(){};\\n\" +\n        \"}\\n\",\n        \"assignment to property prototype of Object\\n\" +\n        \"found   : {foo: number}\\n\" +\n        \"required: function (): undefined\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "1": "  public void testIssue1024$catena_1() throws Exception {\n     try{ testTypes(\n        \"/** @param {Object} a */\\n\" +\n        \"function f(a) {\\n\" +\n        \"  a.prototype = '__proto'\\n\" +\n        \"}\\n\" +\n        \"/** @param {Object} b\\n\" +\n        \" *  @return {!Object}\\n\" +\n        \" */\\n\" +\n        \"function g(b) {\\n\" +\n        \"  return b.prototype\\n\" +\n        \"}\\n\");                                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n     /* TODO(blickly): Make this warning go away.\n      * This is old behavior, but it doesn't make sense to warn about since\n      * both assignments are inferred.\n      */\n     testTypes(\n        \"/** @param {Object} a */\\n\" +\n        \"function f(a) {\\n\" +\n        \"  a.prototype = {foo:3};\\n\" +\n        \"}\\n\" +\n        \"/** @param {Object} b\\n\" +\n        \" */\\n\" +\n        \"function g(b) {\\n\" +\n        \"  b.prototype = function(){};\\n\" +\n        \"}\\n\",\n        \"assignment to property prototype of Object\\n\" +\n        \"found   : {foo: number}\\n\" +\n        \"required: function (): undefined\");                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            }
        }
    },
    "11": {
        "failing_tests": [
            "com.google.javascript.jscomp.TypeCheckTest::testIssue1024$catena_0",
            "com.google.javascript.jscomp.TypeCheckTest::testIssue1024$catena_1"
        ]
    }
}