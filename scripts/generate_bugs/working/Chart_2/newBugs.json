{
    "original": {
        "num_of_hunks": 8,
        "0": {
            "file_name": "source/org/jfree/data/general/DatasetUtilities.java",
            "replaced_with": "                    double value = intervalXYData.getXValue(series, item);\n",
            "patch_type": "insert",
            "next_line_no": 755
        },
        "1": {
            "file_name": "source/org/jfree/data/general/DatasetUtilities.java",
            "replaced_with": "                    if (!Double.isNaN(value)) {\n                        minimum = Math.min(minimum, value);\n                        maximum = Math.max(maximum, value);\n                    }\n",
            "patch_type": "insert",
            "next_line_no": 757
        },
        "2": {
            "file_name": "source/org/jfree/data/general/DatasetUtilities.java",
            "replaced_with": "                        maximum = Math.max(maximum, lvalue);\n",
            "patch_type": "insert",
            "next_line_no": 759
        },
        "3": {
            "file_name": "source/org/jfree/data/general/DatasetUtilities.java",
            "replaced_with": "                        minimum = Math.min(minimum, uvalue);\n",
            "patch_type": "insert",
            "next_line_no": 761
        },
        "4": {
            "file_name": "source/org/jfree/data/general/DatasetUtilities.java",
            "replaced_with": "                    double value = ixyd.getYValue(series, item);\n",
            "patch_type": "insert",
            "next_line_no": 1242
        },
        "5": {
            "file_name": "source/org/jfree/data/general/DatasetUtilities.java",
            "replaced_with": "                    if (!Double.isNaN(value)) {\n                        minimum = Math.min(minimum, value);\n                        maximum = Math.max(maximum, value);\n                    }\n",
            "patch_type": "insert",
            "next_line_no": 1244
        },
        "6": {
            "file_name": "source/org/jfree/data/general/DatasetUtilities.java",
            "replaced_with": "                        maximum = Math.max(maximum, lvalue);\n",
            "patch_type": "insert",
            "next_line_no": 1246
        },
        "7": {
            "file_name": "source/org/jfree/data/general/DatasetUtilities.java",
            "replaced_with": "                        minimum = Math.min(minimum, uvalue);\n",
            "patch_type": "insert",
            "next_line_no": 1248
        }
    },
    "method": {
        "failing_tests": [
            "org.jfree.data.general.junit.DatasetUtilitiesTests::testBug2849731_2",
            "org.jfree.data.general.junit.DatasetUtilitiesTests::testBug2849731_3"
        ],
        "org.jfree.data.general.junit.DatasetUtilitiesTests::testBug2849731_2": {
            "file_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
            "Instance": "Begin: Pos(1270, 12)\nEnd: Pos(1288, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Chart_2/tests//org/jfree/data/general/junit/DatasetUtilitiesTests.java\nName: testBug2849731_2\nChilds: [StatementAssertion<Begin: Pos(1276, 9), End: Pos(1276, 54)>,\nStatementAssertion<Begin: Pos(1277, 9), End: Pos(1277, 54)>,\nStatementAssertion<Begin: Pos(1281, 9), End: Pos(1281, 54)>,\nStatementAssertion<Begin: Pos(1282, 9), End: Pos(1282, 54)>,\nStatementAssertion<Begin: Pos(1286, 9), End: Pos(1286, 54)>,\nStatementAssertion<Begin: Pos(1287, 9), End: Pos(1287, 54)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Chart_2/tests//org/jfree/data/general/junit/DatasetUtilitiesTests.java",
            "name": "testBug2849731_2",
            "begin": "Pos(1270, 12)",
            "end": "Pos(1288, 5)",
            "begin_line_no": 1270,
            "end_line_no": 1288,
            "child": [
                "Begin: Pos(1276, 9)\nEnd: Pos(1276, 54)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1277, 9)\nEnd: Pos(1277, 54)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1281, 9)\nEnd: Pos(1281, 54)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1282, 9)\nEnd: Pos(1282, 54)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1286, 9)\nEnd: Pos(1286, 54)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1287, 9)\nEnd: Pos(1287, 54)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testBug2849731_2$catena_0() {\n        XYIntervalSeriesCollection d = new XYIntervalSeriesCollection();\n        XYIntervalSeries s = new XYIntervalSeries(\"S1\");\n        s.add(1.0, Double.NaN, Double.NaN, Double.NaN, 1.5, Double.NaN);\n        d.addSeries(s);\n        Range r = DatasetUtilities.iterateDomainBounds(d);\n        assertEquals(1.0, r.getLowerBound(), EPSILON);                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(1.0, r.getUpperBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s.add(1.0, 1.5, Double.NaN, Double.NaN, 1.5, Double.NaN);\n        r = DatasetUtilities.iterateDomainBounds(d);\n        try{ assertEquals(1.0, r.getLowerBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1.5, r.getUpperBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s.add(1.0, Double.NaN, 0.5, Double.NaN, 1.5, Double.NaN);\n        r = DatasetUtilities.iterateDomainBounds(d);\n        try{ assertEquals(0.5, r.getLowerBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1.5, r.getUpperBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testBug2849731_2$catena_1() {\n        XYIntervalSeriesCollection d = new XYIntervalSeriesCollection();\n        XYIntervalSeries s = new XYIntervalSeries(\"S1\");\n        s.add(1.0, Double.NaN, Double.NaN, Double.NaN, 1.5, Double.NaN);\n        d.addSeries(s);\n        Range r = DatasetUtilities.iterateDomainBounds(d);\n        try{ assertEquals(1.0, r.getLowerBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(1.0, r.getUpperBound(), EPSILON);                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n\n        s.add(1.0, 1.5, Double.NaN, Double.NaN, 1.5, Double.NaN);\n        r = DatasetUtilities.iterateDomainBounds(d);\n        try{ assertEquals(1.0, r.getLowerBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1.5, r.getUpperBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s.add(1.0, Double.NaN, 0.5, Double.NaN, 1.5, Double.NaN);\n        r = DatasetUtilities.iterateDomainBounds(d);\n        try{ assertEquals(0.5, r.getLowerBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1.5, r.getUpperBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testBug2849731_2$catena_2() {\n        XYIntervalSeriesCollection d = new XYIntervalSeriesCollection();\n        XYIntervalSeries s = new XYIntervalSeries(\"S1\");\n        s.add(1.0, Double.NaN, Double.NaN, Double.NaN, 1.5, Double.NaN);\n        d.addSeries(s);\n        Range r = DatasetUtilities.iterateDomainBounds(d);\n        try{ assertEquals(1.0, r.getLowerBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1.0, r.getUpperBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s.add(1.0, 1.5, Double.NaN, Double.NaN, 1.5, Double.NaN);\n        r = DatasetUtilities.iterateDomainBounds(d);\n        assertEquals(1.0, r.getLowerBound(), EPSILON);                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(1.5, r.getUpperBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s.add(1.0, Double.NaN, 0.5, Double.NaN, 1.5, Double.NaN);\n        r = DatasetUtilities.iterateDomainBounds(d);\n        try{ assertEquals(0.5, r.getLowerBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1.5, r.getUpperBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testBug2849731_2$catena_3() {\n        XYIntervalSeriesCollection d = new XYIntervalSeriesCollection();\n        XYIntervalSeries s = new XYIntervalSeries(\"S1\");\n        s.add(1.0, Double.NaN, Double.NaN, Double.NaN, 1.5, Double.NaN);\n        d.addSeries(s);\n        Range r = DatasetUtilities.iterateDomainBounds(d);\n        try{ assertEquals(1.0, r.getLowerBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1.0, r.getUpperBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s.add(1.0, 1.5, Double.NaN, Double.NaN, 1.5, Double.NaN);\n        r = DatasetUtilities.iterateDomainBounds(d);\n        try{ assertEquals(1.0, r.getLowerBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(1.5, r.getUpperBound(), EPSILON);                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n\n        s.add(1.0, Double.NaN, 0.5, Double.NaN, 1.5, Double.NaN);\n        r = DatasetUtilities.iterateDomainBounds(d);\n        try{ assertEquals(0.5, r.getLowerBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1.5, r.getUpperBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testBug2849731_2$catena_4() {\n        XYIntervalSeriesCollection d = new XYIntervalSeriesCollection();\n        XYIntervalSeries s = new XYIntervalSeries(\"S1\");\n        s.add(1.0, Double.NaN, Double.NaN, Double.NaN, 1.5, Double.NaN);\n        d.addSeries(s);\n        Range r = DatasetUtilities.iterateDomainBounds(d);\n        try{ assertEquals(1.0, r.getLowerBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1.0, r.getUpperBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s.add(1.0, 1.5, Double.NaN, Double.NaN, 1.5, Double.NaN);\n        r = DatasetUtilities.iterateDomainBounds(d);\n        try{ assertEquals(1.0, r.getLowerBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1.5, r.getUpperBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s.add(1.0, Double.NaN, 0.5, Double.NaN, 1.5, Double.NaN);\n        r = DatasetUtilities.iterateDomainBounds(d);\n        assertEquals(0.5, r.getLowerBound(), EPSILON);                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(1.5, r.getUpperBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testBug2849731_2$catena_5() {\n        XYIntervalSeriesCollection d = new XYIntervalSeriesCollection();\n        XYIntervalSeries s = new XYIntervalSeries(\"S1\");\n        s.add(1.0, Double.NaN, Double.NaN, Double.NaN, 1.5, Double.NaN);\n        d.addSeries(s);\n        Range r = DatasetUtilities.iterateDomainBounds(d);\n        try{ assertEquals(1.0, r.getLowerBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1.0, r.getUpperBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s.add(1.0, 1.5, Double.NaN, Double.NaN, 1.5, Double.NaN);\n        r = DatasetUtilities.iterateDomainBounds(d);\n        try{ assertEquals(1.0, r.getLowerBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1.5, r.getUpperBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s.add(1.0, Double.NaN, 0.5, Double.NaN, 1.5, Double.NaN);\n        r = DatasetUtilities.iterateDomainBounds(d);\n        try{ assertEquals(0.5, r.getLowerBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(1.5, r.getUpperBound(), EPSILON);                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void testBug2849731_2$catena_0() {\n        XYIntervalSeriesCollection d = new XYIntervalSeriesCollection();\n        XYIntervalSeries s = new XYIntervalSeries(\"S1\");\n        s.add(1.0, Double.NaN, Double.NaN, Double.NaN, 1.5, Double.NaN);\n        d.addSeries(s);\n        Range r = DatasetUtilities.iterateDomainBounds(d);\n        assertEquals(1.0, r.getLowerBound(), EPSILON);                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(1.0, r.getUpperBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s.add(1.0, 1.5, Double.NaN, Double.NaN, 1.5, Double.NaN);\n        r = DatasetUtilities.iterateDomainBounds(d);\n        try{ assertEquals(1.0, r.getLowerBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1.5, r.getUpperBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s.add(1.0, Double.NaN, 0.5, Double.NaN, 1.5, Double.NaN);\n        r = DatasetUtilities.iterateDomainBounds(d);\n        try{ assertEquals(0.5, r.getLowerBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1.5, r.getUpperBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void testBug2849731_2$catena_1() {\n        XYIntervalSeriesCollection d = new XYIntervalSeriesCollection();\n        XYIntervalSeries s = new XYIntervalSeries(\"S1\");\n        s.add(1.0, Double.NaN, Double.NaN, Double.NaN, 1.5, Double.NaN);\n        d.addSeries(s);\n        Range r = DatasetUtilities.iterateDomainBounds(d);\n        try{ assertEquals(1.0, r.getLowerBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(1.0, r.getUpperBound(), EPSILON);                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n\n        s.add(1.0, 1.5, Double.NaN, Double.NaN, 1.5, Double.NaN);\n        r = DatasetUtilities.iterateDomainBounds(d);\n        try{ assertEquals(1.0, r.getLowerBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1.5, r.getUpperBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s.add(1.0, Double.NaN, 0.5, Double.NaN, 1.5, Double.NaN);\n        r = DatasetUtilities.iterateDomainBounds(d);\n        try{ assertEquals(0.5, r.getLowerBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1.5, r.getUpperBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "2": "    public void testBug2849731_2$catena_2() {\n        XYIntervalSeriesCollection d = new XYIntervalSeriesCollection();\n        XYIntervalSeries s = new XYIntervalSeries(\"S1\");\n        s.add(1.0, Double.NaN, Double.NaN, Double.NaN, 1.5, Double.NaN);\n        d.addSeries(s);\n        Range r = DatasetUtilities.iterateDomainBounds(d);\n        try{ assertEquals(1.0, r.getLowerBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1.0, r.getUpperBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s.add(1.0, 1.5, Double.NaN, Double.NaN, 1.5, Double.NaN);\n        r = DatasetUtilities.iterateDomainBounds(d);\n        assertEquals(1.0, r.getLowerBound(), EPSILON);                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(1.5, r.getUpperBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s.add(1.0, Double.NaN, 0.5, Double.NaN, 1.5, Double.NaN);\n        r = DatasetUtilities.iterateDomainBounds(d);\n        try{ assertEquals(0.5, r.getLowerBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1.5, r.getUpperBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "3": "    public void testBug2849731_2$catena_3() {\n        XYIntervalSeriesCollection d = new XYIntervalSeriesCollection();\n        XYIntervalSeries s = new XYIntervalSeries(\"S1\");\n        s.add(1.0, Double.NaN, Double.NaN, Double.NaN, 1.5, Double.NaN);\n        d.addSeries(s);\n        Range r = DatasetUtilities.iterateDomainBounds(d);\n        try{ assertEquals(1.0, r.getLowerBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1.0, r.getUpperBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s.add(1.0, 1.5, Double.NaN, Double.NaN, 1.5, Double.NaN);\n        r = DatasetUtilities.iterateDomainBounds(d);\n        try{ assertEquals(1.0, r.getLowerBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(1.5, r.getUpperBound(), EPSILON);                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n\n        s.add(1.0, Double.NaN, 0.5, Double.NaN, 1.5, Double.NaN);\n        r = DatasetUtilities.iterateDomainBounds(d);\n        try{ assertEquals(0.5, r.getLowerBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1.5, r.getUpperBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "4": "    public void testBug2849731_2$catena_4() {\n        XYIntervalSeriesCollection d = new XYIntervalSeriesCollection();\n        XYIntervalSeries s = new XYIntervalSeries(\"S1\");\n        s.add(1.0, Double.NaN, Double.NaN, Double.NaN, 1.5, Double.NaN);\n        d.addSeries(s);\n        Range r = DatasetUtilities.iterateDomainBounds(d);\n        try{ assertEquals(1.0, r.getLowerBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1.0, r.getUpperBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s.add(1.0, 1.5, Double.NaN, Double.NaN, 1.5, Double.NaN);\n        r = DatasetUtilities.iterateDomainBounds(d);\n        try{ assertEquals(1.0, r.getLowerBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1.5, r.getUpperBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s.add(1.0, Double.NaN, 0.5, Double.NaN, 1.5, Double.NaN);\n        r = DatasetUtilities.iterateDomainBounds(d);\n        assertEquals(0.5, r.getLowerBound(), EPSILON);                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(1.5, r.getUpperBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "5": "    public void testBug2849731_2$catena_5() {\n        XYIntervalSeriesCollection d = new XYIntervalSeriesCollection();\n        XYIntervalSeries s = new XYIntervalSeries(\"S1\");\n        s.add(1.0, Double.NaN, Double.NaN, Double.NaN, 1.5, Double.NaN);\n        d.addSeries(s);\n        Range r = DatasetUtilities.iterateDomainBounds(d);\n        try{ assertEquals(1.0, r.getLowerBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1.0, r.getUpperBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s.add(1.0, 1.5, Double.NaN, Double.NaN, 1.5, Double.NaN);\n        r = DatasetUtilities.iterateDomainBounds(d);\n        try{ assertEquals(1.0, r.getLowerBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1.5, r.getUpperBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s.add(1.0, Double.NaN, 0.5, Double.NaN, 1.5, Double.NaN);\n        r = DatasetUtilities.iterateDomainBounds(d);\n        try{ assertEquals(0.5, r.getLowerBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(1.5, r.getUpperBound(), EPSILON);                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.jfree.data.general.junit.DatasetUtilitiesTests::testBug2849731_3": {
            "file_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
            "Instance": "Begin: Pos(1293, 12)\nEnd: Pos(1311, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Chart_2/tests//org/jfree/data/general/junit/DatasetUtilitiesTests.java\nName: testBug2849731_3\nChilds: [StatementAssertion<Begin: Pos(1299, 9), End: Pos(1299, 54)>,\nStatementAssertion<Begin: Pos(1300, 9), End: Pos(1300, 54)>,\nStatementAssertion<Begin: Pos(1304, 9), End: Pos(1304, 54)>,\nStatementAssertion<Begin: Pos(1305, 9), End: Pos(1305, 54)>,\nStatementAssertion<Begin: Pos(1309, 9), End: Pos(1309, 54)>,\nStatementAssertion<Begin: Pos(1310, 9), End: Pos(1310, 54)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Chart_2/tests//org/jfree/data/general/junit/DatasetUtilitiesTests.java",
            "name": "testBug2849731_3",
            "begin": "Pos(1293, 12)",
            "end": "Pos(1311, 5)",
            "begin_line_no": 1293,
            "end_line_no": 1311,
            "child": [
                "Begin: Pos(1299, 9)\nEnd: Pos(1299, 54)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1300, 9)\nEnd: Pos(1300, 54)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1304, 9)\nEnd: Pos(1304, 54)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1305, 9)\nEnd: Pos(1305, 54)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1309, 9)\nEnd: Pos(1309, 54)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1310, 9)\nEnd: Pos(1310, 54)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testBug2849731_3$catena_0() {\n        XYIntervalSeriesCollection d = new XYIntervalSeriesCollection();\n        XYIntervalSeries s = new XYIntervalSeries(\"S1\");\n        s.add(1.0, Double.NaN, Double.NaN, 1.5, Double.NaN, Double.NaN);\n        d.addSeries(s);\n        Range r = DatasetUtilities.iterateRangeBounds(d);\n        assertEquals(1.5, r.getLowerBound(), EPSILON);                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(1.5, r.getUpperBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s.add(1.0, 1.5, Double.NaN, Double.NaN, Double.NaN, 2.5);\n        r = DatasetUtilities.iterateRangeBounds(d);\n        try{ assertEquals(1.5, r.getLowerBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2.5, r.getUpperBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s.add(1.0, Double.NaN, 0.5, Double.NaN, 3.5, Double.NaN);\n        r = DatasetUtilities.iterateRangeBounds(d);\n        try{ assertEquals(1.5, r.getLowerBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3.5, r.getUpperBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testBug2849731_3$catena_1() {\n        XYIntervalSeriesCollection d = new XYIntervalSeriesCollection();\n        XYIntervalSeries s = new XYIntervalSeries(\"S1\");\n        s.add(1.0, Double.NaN, Double.NaN, 1.5, Double.NaN, Double.NaN);\n        d.addSeries(s);\n        Range r = DatasetUtilities.iterateRangeBounds(d);\n        try{ assertEquals(1.5, r.getLowerBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(1.5, r.getUpperBound(), EPSILON);                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n\n        s.add(1.0, 1.5, Double.NaN, Double.NaN, Double.NaN, 2.5);\n        r = DatasetUtilities.iterateRangeBounds(d);\n        try{ assertEquals(1.5, r.getLowerBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2.5, r.getUpperBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s.add(1.0, Double.NaN, 0.5, Double.NaN, 3.5, Double.NaN);\n        r = DatasetUtilities.iterateRangeBounds(d);\n        try{ assertEquals(1.5, r.getLowerBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3.5, r.getUpperBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testBug2849731_3$catena_2() {\n        XYIntervalSeriesCollection d = new XYIntervalSeriesCollection();\n        XYIntervalSeries s = new XYIntervalSeries(\"S1\");\n        s.add(1.0, Double.NaN, Double.NaN, 1.5, Double.NaN, Double.NaN);\n        d.addSeries(s);\n        Range r = DatasetUtilities.iterateRangeBounds(d);\n        try{ assertEquals(1.5, r.getLowerBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1.5, r.getUpperBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s.add(1.0, 1.5, Double.NaN, Double.NaN, Double.NaN, 2.5);\n        r = DatasetUtilities.iterateRangeBounds(d);\n        assertEquals(1.5, r.getLowerBound(), EPSILON);                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(2.5, r.getUpperBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s.add(1.0, Double.NaN, 0.5, Double.NaN, 3.5, Double.NaN);\n        r = DatasetUtilities.iterateRangeBounds(d);\n        try{ assertEquals(1.5, r.getLowerBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3.5, r.getUpperBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testBug2849731_3$catena_3() {\n        XYIntervalSeriesCollection d = new XYIntervalSeriesCollection();\n        XYIntervalSeries s = new XYIntervalSeries(\"S1\");\n        s.add(1.0, Double.NaN, Double.NaN, 1.5, Double.NaN, Double.NaN);\n        d.addSeries(s);\n        Range r = DatasetUtilities.iterateRangeBounds(d);\n        try{ assertEquals(1.5, r.getLowerBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1.5, r.getUpperBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s.add(1.0, 1.5, Double.NaN, Double.NaN, Double.NaN, 2.5);\n        r = DatasetUtilities.iterateRangeBounds(d);\n        try{ assertEquals(1.5, r.getLowerBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(2.5, r.getUpperBound(), EPSILON);                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n\n        s.add(1.0, Double.NaN, 0.5, Double.NaN, 3.5, Double.NaN);\n        r = DatasetUtilities.iterateRangeBounds(d);\n        try{ assertEquals(1.5, r.getLowerBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3.5, r.getUpperBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testBug2849731_3$catena_4() {\n        XYIntervalSeriesCollection d = new XYIntervalSeriesCollection();\n        XYIntervalSeries s = new XYIntervalSeries(\"S1\");\n        s.add(1.0, Double.NaN, Double.NaN, 1.5, Double.NaN, Double.NaN);\n        d.addSeries(s);\n        Range r = DatasetUtilities.iterateRangeBounds(d);\n        try{ assertEquals(1.5, r.getLowerBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1.5, r.getUpperBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s.add(1.0, 1.5, Double.NaN, Double.NaN, Double.NaN, 2.5);\n        r = DatasetUtilities.iterateRangeBounds(d);\n        try{ assertEquals(1.5, r.getLowerBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2.5, r.getUpperBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s.add(1.0, Double.NaN, 0.5, Double.NaN, 3.5, Double.NaN);\n        r = DatasetUtilities.iterateRangeBounds(d);\n        assertEquals(1.5, r.getLowerBound(), EPSILON);                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(3.5, r.getUpperBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testBug2849731_3$catena_5() {\n        XYIntervalSeriesCollection d = new XYIntervalSeriesCollection();\n        XYIntervalSeries s = new XYIntervalSeries(\"S1\");\n        s.add(1.0, Double.NaN, Double.NaN, 1.5, Double.NaN, Double.NaN);\n        d.addSeries(s);\n        Range r = DatasetUtilities.iterateRangeBounds(d);\n        try{ assertEquals(1.5, r.getLowerBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1.5, r.getUpperBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s.add(1.0, 1.5, Double.NaN, Double.NaN, Double.NaN, 2.5);\n        r = DatasetUtilities.iterateRangeBounds(d);\n        try{ assertEquals(1.5, r.getLowerBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2.5, r.getUpperBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s.add(1.0, Double.NaN, 0.5, Double.NaN, 3.5, Double.NaN);\n        r = DatasetUtilities.iterateRangeBounds(d);\n        try{ assertEquals(1.5, r.getLowerBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(3.5, r.getUpperBound(), EPSILON);                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void testBug2849731_3$catena_0() {\n        XYIntervalSeriesCollection d = new XYIntervalSeriesCollection();\n        XYIntervalSeries s = new XYIntervalSeries(\"S1\");\n        s.add(1.0, Double.NaN, Double.NaN, 1.5, Double.NaN, Double.NaN);\n        d.addSeries(s);\n        Range r = DatasetUtilities.iterateRangeBounds(d);\n        assertEquals(1.5, r.getLowerBound(), EPSILON);                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(1.5, r.getUpperBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s.add(1.0, 1.5, Double.NaN, Double.NaN, Double.NaN, 2.5);\n        r = DatasetUtilities.iterateRangeBounds(d);\n        try{ assertEquals(1.5, r.getLowerBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2.5, r.getUpperBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s.add(1.0, Double.NaN, 0.5, Double.NaN, 3.5, Double.NaN);\n        r = DatasetUtilities.iterateRangeBounds(d);\n        try{ assertEquals(1.5, r.getLowerBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3.5, r.getUpperBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void testBug2849731_3$catena_1() {\n        XYIntervalSeriesCollection d = new XYIntervalSeriesCollection();\n        XYIntervalSeries s = new XYIntervalSeries(\"S1\");\n        s.add(1.0, Double.NaN, Double.NaN, 1.5, Double.NaN, Double.NaN);\n        d.addSeries(s);\n        Range r = DatasetUtilities.iterateRangeBounds(d);\n        try{ assertEquals(1.5, r.getLowerBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(1.5, r.getUpperBound(), EPSILON);                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n\n        s.add(1.0, 1.5, Double.NaN, Double.NaN, Double.NaN, 2.5);\n        r = DatasetUtilities.iterateRangeBounds(d);\n        try{ assertEquals(1.5, r.getLowerBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2.5, r.getUpperBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s.add(1.0, Double.NaN, 0.5, Double.NaN, 3.5, Double.NaN);\n        r = DatasetUtilities.iterateRangeBounds(d);\n        try{ assertEquals(1.5, r.getLowerBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3.5, r.getUpperBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "2": "    public void testBug2849731_3$catena_2() {\n        XYIntervalSeriesCollection d = new XYIntervalSeriesCollection();\n        XYIntervalSeries s = new XYIntervalSeries(\"S1\");\n        s.add(1.0, Double.NaN, Double.NaN, 1.5, Double.NaN, Double.NaN);\n        d.addSeries(s);\n        Range r = DatasetUtilities.iterateRangeBounds(d);\n        try{ assertEquals(1.5, r.getLowerBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1.5, r.getUpperBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s.add(1.0, 1.5, Double.NaN, Double.NaN, Double.NaN, 2.5);\n        r = DatasetUtilities.iterateRangeBounds(d);\n        assertEquals(1.5, r.getLowerBound(), EPSILON);                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(2.5, r.getUpperBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s.add(1.0, Double.NaN, 0.5, Double.NaN, 3.5, Double.NaN);\n        r = DatasetUtilities.iterateRangeBounds(d);\n        try{ assertEquals(1.5, r.getLowerBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3.5, r.getUpperBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "3": "    public void testBug2849731_3$catena_3() {\n        XYIntervalSeriesCollection d = new XYIntervalSeriesCollection();\n        XYIntervalSeries s = new XYIntervalSeries(\"S1\");\n        s.add(1.0, Double.NaN, Double.NaN, 1.5, Double.NaN, Double.NaN);\n        d.addSeries(s);\n        Range r = DatasetUtilities.iterateRangeBounds(d);\n        try{ assertEquals(1.5, r.getLowerBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1.5, r.getUpperBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s.add(1.0, 1.5, Double.NaN, Double.NaN, Double.NaN, 2.5);\n        r = DatasetUtilities.iterateRangeBounds(d);\n        try{ assertEquals(1.5, r.getLowerBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(2.5, r.getUpperBound(), EPSILON);                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n\n        s.add(1.0, Double.NaN, 0.5, Double.NaN, 3.5, Double.NaN);\n        r = DatasetUtilities.iterateRangeBounds(d);\n        try{ assertEquals(1.5, r.getLowerBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3.5, r.getUpperBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "4": "    public void testBug2849731_3$catena_4() {\n        XYIntervalSeriesCollection d = new XYIntervalSeriesCollection();\n        XYIntervalSeries s = new XYIntervalSeries(\"S1\");\n        s.add(1.0, Double.NaN, Double.NaN, 1.5, Double.NaN, Double.NaN);\n        d.addSeries(s);\n        Range r = DatasetUtilities.iterateRangeBounds(d);\n        try{ assertEquals(1.5, r.getLowerBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1.5, r.getUpperBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s.add(1.0, 1.5, Double.NaN, Double.NaN, Double.NaN, 2.5);\n        r = DatasetUtilities.iterateRangeBounds(d);\n        try{ assertEquals(1.5, r.getLowerBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2.5, r.getUpperBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s.add(1.0, Double.NaN, 0.5, Double.NaN, 3.5, Double.NaN);\n        r = DatasetUtilities.iterateRangeBounds(d);\n        assertEquals(1.5, r.getLowerBound(), EPSILON);                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(3.5, r.getUpperBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "5": "    public void testBug2849731_3$catena_5() {\n        XYIntervalSeriesCollection d = new XYIntervalSeriesCollection();\n        XYIntervalSeries s = new XYIntervalSeries(\"S1\");\n        s.add(1.0, Double.NaN, Double.NaN, 1.5, Double.NaN, Double.NaN);\n        d.addSeries(s);\n        Range r = DatasetUtilities.iterateRangeBounds(d);\n        try{ assertEquals(1.5, r.getLowerBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1.5, r.getUpperBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s.add(1.0, 1.5, Double.NaN, Double.NaN, Double.NaN, 2.5);\n        r = DatasetUtilities.iterateRangeBounds(d);\n        try{ assertEquals(1.5, r.getLowerBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2.5, r.getUpperBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        s.add(1.0, Double.NaN, 0.5, Double.NaN, 3.5, Double.NaN);\n        r = DatasetUtilities.iterateRangeBounds(d);\n        try{ assertEquals(1.5, r.getLowerBound(), EPSILON);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(3.5, r.getUpperBound(), EPSILON);                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        }
    },
    "00000001": {
        "failing_tests": [
            "org.jfree.data.general.junit.DatasetUtilitiesTests::testBug2849731_3$catena_3"
        ]
    },
    "00000010": {
        "failing_tests": [
            "org.jfree.data.general.junit.DatasetUtilitiesTests::testBug2849731_3$catena_5"
        ]
    },
    "00010000": {
        "failing_tests": [
            "org.jfree.data.general.junit.DatasetUtilitiesTests::testBug2849731_2$catena_4"
        ]
    },
    "00100000": {
        "failing_tests": [
            "org.jfree.data.general.junit.DatasetUtilitiesTests::testBug2849731_2$catena_5",
            "org.jfree.data.general.junit.DatasetUtilitiesTests::testBug2849731_2$catena_3"
        ]
    },
    "00001100": {
        "failing_tests": [
            "org.jfree.data.general.junit.DatasetUtilitiesTests::testBug2849731_3$catena_1",
            "org.jfree.data.general.junit.DatasetUtilitiesTests::testBug2849731_3$catena_4",
            "org.jfree.data.general.junit.DatasetUtilitiesTests::testBug2849731_3$catena_2",
            "org.jfree.data.general.junit.DatasetUtilitiesTests::testBug2849731_3$catena_0",
            "org.jfree.data.general.junit.DatasetUtilitiesTests::testBug2849731_3$catena_3"
        ]
    },
    "11000000": {
        "failing_tests": [
            "org.jfree.data.general.junit.DatasetUtilitiesTests::testBug2849731_2$catena_0",
            "org.jfree.data.general.junit.DatasetUtilitiesTests::testBug2849731_2$catena_1",
            "org.jfree.data.general.junit.DatasetUtilitiesTests::testBug2849731_2$catena_2"
        ]
    }
}