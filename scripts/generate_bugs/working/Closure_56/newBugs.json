{
    "original": {
        "num_of_hunks": 2,
        "0": {
            "file_name": "src/com/google/javascript/jscomp/SourceFile.java",
            "replaced_with": "      if (pos >= js.length()) {\n",
            "patch_type": "insert",
            "next_line_no": 242
        },
        "1": {
            "file_name": "src/com/google/javascript/jscomp/SourceFile.java",
            "replaced_with": "      } else {\n        return js.substring(pos, js.length());\n      }\n",
            "patch_type": "insert",
            "next_line_no": 243
        }
    },
    "method": {
        "failing_tests": [
            "com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest::testExceptNoNewLine",
            "com.google.javascript.jscomp.JsMessageExtractorTest::testSyntaxError1",
            "com.google.javascript.jscomp.JsMessageExtractorTest::testSyntaxError2"
        ],
        "com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest::testExceptNoNewLine": {
            "file_path": "test/com/google/javascript/jscomp/JSCompilerSourceExcerptProviderTest.java",
            "Instance": "Begin: Pos(64, 10)\nEnd: Pos(69, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Closure_56/test//com/google/javascript/jscomp/JSCompilerSourceExcerptProviderTest.java\nName: testExceptNoNewLine\nChilds: [StatementAssertion<Begin: Pos(65, 5), End: Pos(65, 71)>,\nStatementAssertion<Begin: Pos(66, 5), End: Pos(66, 72)>,\nStatementAssertion<Begin: Pos(67, 5), End: Pos(67, 71)>,\nStatementAssertion<Begin: Pos(68, 5), End: Pos(68, 58)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Closure_56/test//com/google/javascript/jscomp/JSCompilerSourceExcerptProviderTest.java",
            "name": "testExceptNoNewLine",
            "begin": "Pos(64, 10)",
            "end": "Pos(69, 3)",
            "begin_line_no": 64,
            "end_line_no": 69,
            "child": [
                "Begin: Pos(65, 5)\nEnd: Pos(65, 71)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(66, 5)\nEnd: Pos(66, 72)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(67, 5)\nEnd: Pos(67, 71)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(68, 5)\nEnd: Pos(68, 58)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "  public void testExceptNoNewLine$catena_0() throws Exception {\n    assertEquals(\"foo2:first line\", provider.getSourceLine(\"foo2\", 1));                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertEquals(\"foo2:second line\", provider.getSourceLine(\"foo2\", 2));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"foo2:third line\", provider.getSourceLine(\"foo2\", 3));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(null, provider.getSourceLine(\"foo2\", 4));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testExceptNoNewLine$catena_1() throws Exception {\n    try{ assertEquals(\"foo2:first line\", provider.getSourceLine(\"foo2\", 1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertEquals(\"foo2:second line\", provider.getSourceLine(\"foo2\", 2));                                    /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertEquals(\"foo2:third line\", provider.getSourceLine(\"foo2\", 3));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(null, provider.getSourceLine(\"foo2\", 4));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testExceptNoNewLine$catena_2() throws Exception {\n    try{ assertEquals(\"foo2:first line\", provider.getSourceLine(\"foo2\", 1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"foo2:second line\", provider.getSourceLine(\"foo2\", 2));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertEquals(\"foo2:third line\", provider.getSourceLine(\"foo2\", 3));                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertEquals(null, provider.getSourceLine(\"foo2\", 4));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testExceptNoNewLine$catena_3() throws Exception {\n    try{ assertEquals(\"foo2:first line\", provider.getSourceLine(\"foo2\", 1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"foo2:second line\", provider.getSourceLine(\"foo2\", 2));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"foo2:third line\", provider.getSourceLine(\"foo2\", 3));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertEquals(null, provider.getSourceLine(\"foo2\", 4));                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            ],
            "func": {
                "0": "  public void testExceptNoNewLine$catena_0() throws Exception {\n    assertEquals(\"foo2:first line\", provider.getSourceLine(\"foo2\", 1));                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertEquals(\"foo2:second line\", provider.getSourceLine(\"foo2\", 2));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"foo2:third line\", provider.getSourceLine(\"foo2\", 3));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(null, provider.getSourceLine(\"foo2\", 4));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "1": "  public void testExceptNoNewLine$catena_1() throws Exception {\n    try{ assertEquals(\"foo2:first line\", provider.getSourceLine(\"foo2\", 1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertEquals(\"foo2:second line\", provider.getSourceLine(\"foo2\", 2));                                    /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertEquals(\"foo2:third line\", provider.getSourceLine(\"foo2\", 3));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(null, provider.getSourceLine(\"foo2\", 4));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "2": "  public void testExceptNoNewLine$catena_2() throws Exception {\n    try{ assertEquals(\"foo2:first line\", provider.getSourceLine(\"foo2\", 1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"foo2:second line\", provider.getSourceLine(\"foo2\", 2));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertEquals(\"foo2:third line\", provider.getSourceLine(\"foo2\", 3));                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertEquals(null, provider.getSourceLine(\"foo2\", 4));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "3": "  public void testExceptNoNewLine$catena_3() throws Exception {\n    try{ assertEquals(\"foo2:first line\", provider.getSourceLine(\"foo2\", 1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"foo2:second line\", provider.getSourceLine(\"foo2\", 2));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"foo2:third line\", provider.getSourceLine(\"foo2\", 3));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertEquals(null, provider.getSourceLine(\"foo2\", 4));                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            }
        },
        "com.google.javascript.jscomp.JsMessageExtractorTest::testSyntaxError1": {
            "file_path": "test/com/google/javascript/jscomp/JsMessageExtractorTest.java",
            "check": [
                "Use list matching: .extractMessage",
                "StatementExpression is in safe: <.extractMessage>"
            ],
            "Instance": "Begin: Pos(54, 10)\nEnd: Pos(64, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Closure_56/test//com/google/javascript/jscomp/JsMessageExtractorTest.java\nName: testSyntaxError1\nChilds: [StatementAssertion<Begin: Pos(57, 7), End: Pos(57, 33)>,\nStatementAssertion<Begin: Pos(59, 7), End: Pos(59, 65)>,\nStatementAssertion<Begin: Pos(60, 7), End: Pos(61, 62)>,\nStatementAssertion<Begin: Pos(62, 7), End: Pos(62, 61)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Closure_56/test//com/google/javascript/jscomp/JsMessageExtractorTest.java",
            "name": "testSyntaxError1",
            "begin": "Pos(54, 10)",
            "end": "Pos(64, 3)",
            "begin_line_no": 54,
            "end_line_no": 64,
            "child": [
                "Begin: Pos(57, 7)\nEnd: Pos(57, 33)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(59, 7)\nEnd: Pos(59, 65)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(60, 7)\nEnd: Pos(61, 62)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(62, 7)\nEnd: Pos(62, 61)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "  public void testSyntaxError1$catena_0() {\n    try {\n      extractMessage(\"if (true) {}}\");\n      fail(\"Expected exception\");                                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    } catch (RuntimeException e) {\n      try{ assertTrue(e.getMessage().contains(\"JSCompiler errors\\n\"));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ assertTrue(e.getMessage().contains(\n          \"testcode:1: ERROR - Parse error. syntax error\\n\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ assertTrue(e.getMessage().contains(\"if (true) {}}\\n\"));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    }\n  }",
                "  public void testSyntaxError1$catena_1() {\n    try {\n      extractMessage(\"if (true) {}}\");\n      try{ fail(\"Expected exception\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    } catch (RuntimeException e) {\n      assertTrue(e.getMessage().contains(\"JSCompiler errors\\n\"));                                           /***** ORIGINAL ASSERTION IS HERE *****/\n      try{ assertTrue(e.getMessage().contains(\n          \"testcode:1: ERROR - Parse error. syntax error\\n\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ assertTrue(e.getMessage().contains(\"if (true) {}}\\n\"));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    }\n  }",
                "  public void testSyntaxError1$catena_2() {\n    try {\n      extractMessage(\"if (true) {}}\");\n      try{ fail(\"Expected exception\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    } catch (RuntimeException e) {\n      try{ assertTrue(e.getMessage().contains(\"JSCompiler errors\\n\"));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n      assertTrue(e.getMessage().contains(\n          \"testcode:1: ERROR - Parse error. syntax error\\n\"));                                              /***** ORIGINAL ASSERTION IS HERE *****/\n      try{ assertTrue(e.getMessage().contains(\"if (true) {}}\\n\"));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    }\n  }",
                "  public void testSyntaxError1$catena_3() {\n    try {\n      extractMessage(\"if (true) {}}\");\n      try{ fail(\"Expected exception\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    } catch (RuntimeException e) {\n      try{ assertTrue(e.getMessage().contains(\"JSCompiler errors\\n\"));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ assertTrue(e.getMessage().contains(\n          \"testcode:1: ERROR - Parse error. syntax error\\n\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n      assertTrue(e.getMessage().contains(\"if (true) {}}\\n\"));                                               /***** ORIGINAL ASSERTION IS HERE *****/\n    }\n  }"
            ],
            "func": {
                "0": "  public void testSyntaxError1$catena_0() {\n    try {\n      extractMessage(\"if (true) {}}\");\n      fail(\"Expected exception\");                                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    } catch (RuntimeException e) {\n      try{ assertTrue(e.getMessage().contains(\"JSCompiler errors\\n\"));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ assertTrue(e.getMessage().contains(\n          \"testcode:1: ERROR - Parse error. syntax error\\n\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ assertTrue(e.getMessage().contains(\"if (true) {}}\\n\"));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    }\n  }",
                "1": "  public void testSyntaxError1$catena_1() {\n    try {\n      extractMessage(\"if (true) {}}\");\n      try{ fail(\"Expected exception\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    } catch (RuntimeException e) {\n      assertTrue(e.getMessage().contains(\"JSCompiler errors\\n\"));                                           /***** ORIGINAL ASSERTION IS HERE *****/\n      try{ assertTrue(e.getMessage().contains(\n          \"testcode:1: ERROR - Parse error. syntax error\\n\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ assertTrue(e.getMessage().contains(\"if (true) {}}\\n\"));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    }\n  }",
                "2": "  public void testSyntaxError1$catena_2() {\n    try {\n      extractMessage(\"if (true) {}}\");\n      try{ fail(\"Expected exception\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    } catch (RuntimeException e) {\n      try{ assertTrue(e.getMessage().contains(\"JSCompiler errors\\n\"));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n      assertTrue(e.getMessage().contains(\n          \"testcode:1: ERROR - Parse error. syntax error\\n\"));                                              /***** ORIGINAL ASSERTION IS HERE *****/\n      try{ assertTrue(e.getMessage().contains(\"if (true) {}}\\n\"));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    }\n  }",
                "3": "  public void testSyntaxError1$catena_3() {\n    try {\n      extractMessage(\"if (true) {}}\");\n      try{ fail(\"Expected exception\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    } catch (RuntimeException e) {\n      try{ assertTrue(e.getMessage().contains(\"JSCompiler errors\\n\"));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ assertTrue(e.getMessage().contains(\n          \"testcode:1: ERROR - Parse error. syntax error\\n\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n      assertTrue(e.getMessage().contains(\"if (true) {}}\\n\"));                                               /***** ORIGINAL ASSERTION IS HERE *****/\n    }\n  }"
            }
        },
        "com.google.javascript.jscomp.JsMessageExtractorTest::testSyntaxError2": {
            "file_path": "test/com/google/javascript/jscomp/JsMessageExtractorTest.java",
            "check": [
                "Use list matching: .extractMessage",
                "StatementExpression is in safe: <.extractMessage>"
            ],
            "Instance": "Begin: Pos(66, 10)\nEnd: Pos(76, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Closure_56/test//com/google/javascript/jscomp/JsMessageExtractorTest.java\nName: testSyntaxError2\nChilds: [StatementAssertion<Begin: Pos(69, 7), End: Pos(69, 33)>,\nStatementAssertion<Begin: Pos(71, 7), End: Pos(71, 65)>,\nStatementAssertion<Begin: Pos(72, 7), End: Pos(73, 62)>,\nStatementAssertion<Begin: Pos(74, 7), End: Pos(74, 61)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Closure_56/test//com/google/javascript/jscomp/JsMessageExtractorTest.java",
            "name": "testSyntaxError2",
            "begin": "Pos(66, 10)",
            "end": "Pos(76, 3)",
            "begin_line_no": 66,
            "end_line_no": 76,
            "child": [
                "Begin: Pos(69, 7)\nEnd: Pos(69, 33)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(71, 7)\nEnd: Pos(71, 65)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(72, 7)\nEnd: Pos(73, 62)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(74, 7)\nEnd: Pos(74, 61)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "  public void testSyntaxError2$catena_0() {\n    try {\n      extractMessage(\"\", \"if (true) {}}\");\n      fail(\"Expected exception\");                                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    } catch (RuntimeException e) {\n      try{ assertTrue(e.getMessage().contains(\"JSCompiler errors\\n\"));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ assertTrue(e.getMessage().contains(\n          \"testcode:2: ERROR - Parse error. syntax error\\n\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ assertTrue(e.getMessage().contains(\"if (true) {}}\\n\"));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    }\n  }",
                "  public void testSyntaxError2$catena_1() {\n    try {\n      extractMessage(\"\", \"if (true) {}}\");\n      try{ fail(\"Expected exception\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    } catch (RuntimeException e) {\n      assertTrue(e.getMessage().contains(\"JSCompiler errors\\n\"));                                           /***** ORIGINAL ASSERTION IS HERE *****/\n      try{ assertTrue(e.getMessage().contains(\n          \"testcode:2: ERROR - Parse error. syntax error\\n\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ assertTrue(e.getMessage().contains(\"if (true) {}}\\n\"));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    }\n  }",
                "  public void testSyntaxError2$catena_2() {\n    try {\n      extractMessage(\"\", \"if (true) {}}\");\n      try{ fail(\"Expected exception\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    } catch (RuntimeException e) {\n      try{ assertTrue(e.getMessage().contains(\"JSCompiler errors\\n\"));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n      assertTrue(e.getMessage().contains(\n          \"testcode:2: ERROR - Parse error. syntax error\\n\"));                                              /***** ORIGINAL ASSERTION IS HERE *****/\n      try{ assertTrue(e.getMessage().contains(\"if (true) {}}\\n\"));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    }\n  }",
                "  public void testSyntaxError2$catena_3() {\n    try {\n      extractMessage(\"\", \"if (true) {}}\");\n      try{ fail(\"Expected exception\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    } catch (RuntimeException e) {\n      try{ assertTrue(e.getMessage().contains(\"JSCompiler errors\\n\"));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ assertTrue(e.getMessage().contains(\n          \"testcode:2: ERROR - Parse error. syntax error\\n\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n      assertTrue(e.getMessage().contains(\"if (true) {}}\\n\"));                                               /***** ORIGINAL ASSERTION IS HERE *****/\n    }\n  }"
            ],
            "func": {
                "0": "  public void testSyntaxError2$catena_0() {\n    try {\n      extractMessage(\"\", \"if (true) {}}\");\n      fail(\"Expected exception\");                                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    } catch (RuntimeException e) {\n      try{ assertTrue(e.getMessage().contains(\"JSCompiler errors\\n\"));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ assertTrue(e.getMessage().contains(\n          \"testcode:2: ERROR - Parse error. syntax error\\n\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ assertTrue(e.getMessage().contains(\"if (true) {}}\\n\"));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    }\n  }",
                "1": "  public void testSyntaxError2$catena_1() {\n    try {\n      extractMessage(\"\", \"if (true) {}}\");\n      try{ fail(\"Expected exception\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    } catch (RuntimeException e) {\n      assertTrue(e.getMessage().contains(\"JSCompiler errors\\n\"));                                           /***** ORIGINAL ASSERTION IS HERE *****/\n      try{ assertTrue(e.getMessage().contains(\n          \"testcode:2: ERROR - Parse error. syntax error\\n\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ assertTrue(e.getMessage().contains(\"if (true) {}}\\n\"));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    }\n  }",
                "2": "  public void testSyntaxError2$catena_2() {\n    try {\n      extractMessage(\"\", \"if (true) {}}\");\n      try{ fail(\"Expected exception\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    } catch (RuntimeException e) {\n      try{ assertTrue(e.getMessage().contains(\"JSCompiler errors\\n\"));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n      assertTrue(e.getMessage().contains(\n          \"testcode:2: ERROR - Parse error. syntax error\\n\"));                                              /***** ORIGINAL ASSERTION IS HERE *****/\n      try{ assertTrue(e.getMessage().contains(\"if (true) {}}\\n\"));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    }\n  }",
                "3": "  public void testSyntaxError2$catena_3() {\n    try {\n      extractMessage(\"\", \"if (true) {}}\");\n      try{ fail(\"Expected exception\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    } catch (RuntimeException e) {\n      try{ assertTrue(e.getMessage().contains(\"JSCompiler errors\\n\"));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ assertTrue(e.getMessage().contains(\n          \"testcode:2: ERROR - Parse error. syntax error\\n\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n      assertTrue(e.getMessage().contains(\"if (true) {}}\\n\"));                                               /***** ORIGINAL ASSERTION IS HERE *****/\n    }\n  }"
            }
        }
    },
    "11": {
        "failing_tests": [
            "com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest::testExceptNoNewLine$catena_2",
            "com.google.javascript.jscomp.JsMessageExtractorTest::testSyntaxError2$catena_3",
            "com.google.javascript.jscomp.JsMessageExtractorTest::testSyntaxError1$catena_3"
        ]
    }
}