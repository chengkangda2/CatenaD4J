---
Begin generate bug_id: Closure_29
num_of_hunks: 3
timeout for running: 3600
use working dir: ./working/data/Closure_29
Try to checkout Closure_29
build dir: ['./working/data/Closure_29/build/classes', './working/data/Closure_29/build/test']
init FileManager
trace file: src/com/google/javascript/jscomp/InlineObjectLiterals.java
trying to replace old failing tests
edit: replace from 167 range 41 at test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java
to
  public void testObject10$catena_0() {
    testLocal("var x; var b = f(); x = {a:a, b:b}; if(x.a) g(x.b);",
         "var JSCompiler_object_inline_a_0;" +
         "var JSCompiler_object_inline_b_1;" +
         "var b = f();" +
         "JSCompiler_object_inline_a_0=a,JSCompiler_object_inline_b_1=b,true;" +
         "if(JSCompiler_object_inline_a_0) g(JSCompiler_object_inline_b_1)");                               /***** ORIGINAL ASSERTION IS HERE *****/
    try{ testLocal("var x = {}; var b = f(); x = {a:a, b:b}; if(x.a) g(x.b) + x.c",
         "var x = {}; var b = f(); x = {a:a, b:b}; if(x.a) g(x.b) + x.c");                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testLocal("var x; var b = f(); x = {a:a, b:b}; x.c = c; if(x.a) g(x.b) + x.c",
         "var JSCompiler_object_inline_a_0;" +
         "var JSCompiler_object_inline_b_1;" +
         "var JSCompiler_object_inline_c_2;" +
         "var b = f();" +
         "JSCompiler_object_inline_a_0 = a,JSCompiler_object_inline_b_1 = b, " +
         "  JSCompiler_object_inline_c_2=void 0,true;" +
         "JSCompiler_object_inline_c_2 = c;" +
         "if (JSCompiler_object_inline_a_0)" +
         "  g(JSCompiler_object_inline_b_1) + JSCompiler_object_inline_c_2;");                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testLocal("var x = {a:a}; if (b) x={b:b}; f(x.a||x.b);",
         "var JSCompiler_object_inline_a_0 = a;" +
         "var JSCompiler_object_inline_b_1;" +
         "if(b) JSCompiler_object_inline_b_1 = b," +
         "      JSCompiler_object_inline_a_0 = void 0," +
         "      true;" +
         "f(JSCompiler_object_inline_a_0 || JSCompiler_object_inline_b_1)");                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testLocal("var x; var y = 5; x = {a:a, b:b, c:c}; if (b) x={b:b}; f(x.a||x.b);",
         "var JSCompiler_object_inline_a_0;" +
         "var JSCompiler_object_inline_b_1;" +
         "var JSCompiler_object_inline_c_2;" +
         "var y=5;" +
         "JSCompiler_object_inline_a_0=a," +
         "JSCompiler_object_inline_b_1=b," +
         "JSCompiler_object_inline_c_2=c," +
         "true;" +
         "if (b) JSCompiler_object_inline_b_1=b," +
         "       JSCompiler_object_inline_a_0=void 0," +
         "       JSCompiler_object_inline_c_2=void 0," +
         "       true;" +
         "f(JSCompiler_object_inline_a_0||JSCompiler_object_inline_b_1)");                                  }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testObject10$catena_1() {
    try{ testLocal("var x; var b = f(); x = {a:a, b:b}; if(x.a) g(x.b);",
         "var JSCompiler_object_inline_a_0;" +
         "var JSCompiler_object_inline_b_1;" +
         "var b = f();" +
         "JSCompiler_object_inline_a_0=a,JSCompiler_object_inline_b_1=b,true;" +
         "if(JSCompiler_object_inline_a_0) g(JSCompiler_object_inline_b_1)");                               }catch(Throwable __SHOULD_BE_IGNORED){}
    testLocal("var x = {}; var b = f(); x = {a:a, b:b}; if(x.a) g(x.b) + x.c",
         "var x = {}; var b = f(); x = {a:a, b:b}; if(x.a) g(x.b) + x.c");                                  /***** ORIGINAL ASSERTION IS HERE *****/
    try{ testLocal("var x; var b = f(); x = {a:a, b:b}; x.c = c; if(x.a) g(x.b) + x.c",
         "var JSCompiler_object_inline_a_0;" +
         "var JSCompiler_object_inline_b_1;" +
         "var JSCompiler_object_inline_c_2;" +
         "var b = f();" +
         "JSCompiler_object_inline_a_0 = a,JSCompiler_object_inline_b_1 = b, " +
         "  JSCompiler_object_inline_c_2=void 0,true;" +
         "JSCompiler_object_inline_c_2 = c;" +
         "if (JSCompiler_object_inline_a_0)" +
         "  g(JSCompiler_object_inline_b_1) + JSCompiler_object_inline_c_2;");                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testLocal("var x = {a:a}; if (b) x={b:b}; f(x.a||x.b);",
         "var JSCompiler_object_inline_a_0 = a;" +
         "var JSCompiler_object_inline_b_1;" +
         "if(b) JSCompiler_object_inline_b_1 = b," +
         "      JSCompiler_object_inline_a_0 = void 0," +
         "      true;" +
         "f(JSCompiler_object_inline_a_0 || JSCompiler_object_inline_b_1)");                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testLocal("var x; var y = 5; x = {a:a, b:b, c:c}; if (b) x={b:b}; f(x.a||x.b);",
         "var JSCompiler_object_inline_a_0;" +
         "var JSCompiler_object_inline_b_1;" +
         "var JSCompiler_object_inline_c_2;" +
         "var y=5;" +
         "JSCompiler_object_inline_a_0=a," +
         "JSCompiler_object_inline_b_1=b," +
         "JSCompiler_object_inline_c_2=c," +
         "true;" +
         "if (b) JSCompiler_object_inline_b_1=b," +
         "       JSCompiler_object_inline_a_0=void 0," +
         "       JSCompiler_object_inline_c_2=void 0," +
         "       true;" +
         "f(JSCompiler_object_inline_a_0||JSCompiler_object_inline_b_1)");                                  }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testObject10$catena_2() {
    try{ testLocal("var x; var b = f(); x = {a:a, b:b}; if(x.a) g(x.b);",
         "var JSCompiler_object_inline_a_0;" +
         "var JSCompiler_object_inline_b_1;" +
         "var b = f();" +
         "JSCompiler_object_inline_a_0=a,JSCompiler_object_inline_b_1=b,true;" +
         "if(JSCompiler_object_inline_a_0) g(JSCompiler_object_inline_b_1)");                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testLocal("var x = {}; var b = f(); x = {a:a, b:b}; if(x.a) g(x.b) + x.c",
         "var x = {}; var b = f(); x = {a:a, b:b}; if(x.a) g(x.b) + x.c");                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    testLocal("var x; var b = f(); x = {a:a, b:b}; x.c = c; if(x.a) g(x.b) + x.c",
         "var JSCompiler_object_inline_a_0;" +
         "var JSCompiler_object_inline_b_1;" +
         "var JSCompiler_object_inline_c_2;" +
         "var b = f();" +
         "JSCompiler_object_inline_a_0 = a,JSCompiler_object_inline_b_1 = b, " +
         "  JSCompiler_object_inline_c_2=void 0,true;" +
         "JSCompiler_object_inline_c_2 = c;" +
         "if (JSCompiler_object_inline_a_0)" +
         "  g(JSCompiler_object_inline_b_1) + JSCompiler_object_inline_c_2;");                              /***** ORIGINAL ASSERTION IS HERE *****/
    try{ testLocal("var x = {a:a}; if (b) x={b:b}; f(x.a||x.b);",
         "var JSCompiler_object_inline_a_0 = a;" +
         "var JSCompiler_object_inline_b_1;" +
         "if(b) JSCompiler_object_inline_b_1 = b," +
         "      JSCompiler_object_inline_a_0 = void 0," +
         "      true;" +
         "f(JSCompiler_object_inline_a_0 || JSCompiler_object_inline_b_1)");                                }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testLocal("var x; var y = 5; x = {a:a, b:b, c:c}; if (b) x={b:b}; f(x.a||x.b);",
         "var JSCompiler_object_inline_a_0;" +
         "var JSCompiler_object_inline_b_1;" +
         "var JSCompiler_object_inline_c_2;" +
         "var y=5;" +
         "JSCompiler_object_inline_a_0=a," +
         "JSCompiler_object_inline_b_1=b," +
         "JSCompiler_object_inline_c_2=c," +
         "true;" +
         "if (b) JSCompiler_object_inline_b_1=b," +
         "       JSCompiler_object_inline_a_0=void 0," +
         "       JSCompiler_object_inline_c_2=void 0," +
         "       true;" +
         "f(JSCompiler_object_inline_a_0||JSCompiler_object_inline_b_1)");                                  }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testObject10$catena_3() {
    try{ testLocal("var x; var b = f(); x = {a:a, b:b}; if(x.a) g(x.b);",
         "var JSCompiler_object_inline_a_0;" +
         "var JSCompiler_object_inline_b_1;" +
         "var b = f();" +
         "JSCompiler_object_inline_a_0=a,JSCompiler_object_inline_b_1=b,true;" +
         "if(JSCompiler_object_inline_a_0) g(JSCompiler_object_inline_b_1)");                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testLocal("var x = {}; var b = f(); x = {a:a, b:b}; if(x.a) g(x.b) + x.c",
         "var x = {}; var b = f(); x = {a:a, b:b}; if(x.a) g(x.b) + x.c");                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testLocal("var x; var b = f(); x = {a:a, b:b}; x.c = c; if(x.a) g(x.b) + x.c",
         "var JSCompiler_object_inline_a_0;" +
         "var JSCompiler_object_inline_b_1;" +
         "var JSCompiler_object_inline_c_2;" +
         "var b = f();" +
         "JSCompiler_object_inline_a_0 = a,JSCompiler_object_inline_b_1 = b, " +
         "  JSCompiler_object_inline_c_2=void 0,true;" +
         "JSCompiler_object_inline_c_2 = c;" +
         "if (JSCompiler_object_inline_a_0)" +
         "  g(JSCompiler_object_inline_b_1) + JSCompiler_object_inline_c_2;");                              }catch(Throwable __SHOULD_BE_IGNORED){}
    testLocal("var x = {a:a}; if (b) x={b:b}; f(x.a||x.b);",
         "var JSCompiler_object_inline_a_0 = a;" +
         "var JSCompiler_object_inline_b_1;" +
         "if(b) JSCompiler_object_inline_b_1 = b," +
         "      JSCompiler_object_inline_a_0 = void 0," +
         "      true;" +
         "f(JSCompiler_object_inline_a_0 || JSCompiler_object_inline_b_1)");                                /***** ORIGINAL ASSERTION IS HERE *****/
    try{ testLocal("var x; var y = 5; x = {a:a, b:b, c:c}; if (b) x={b:b}; f(x.a||x.b);",
         "var JSCompiler_object_inline_a_0;" +
         "var JSCompiler_object_inline_b_1;" +
         "var JSCompiler_object_inline_c_2;" +
         "var y=5;" +
         "JSCompiler_object_inline_a_0=a," +
         "JSCompiler_object_inline_b_1=b," +
         "JSCompiler_object_inline_c_2=c," +
         "true;" +
         "if (b) JSCompiler_object_inline_b_1=b," +
         "       JSCompiler_object_inline_a_0=void 0," +
         "       JSCompiler_object_inline_c_2=void 0," +
         "       true;" +
         "f(JSCompiler_object_inline_a_0||JSCompiler_object_inline_b_1)");                                  }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testObject10$catena_4() {
    try{ testLocal("var x; var b = f(); x = {a:a, b:b}; if(x.a) g(x.b);",
         "var JSCompiler_object_inline_a_0;" +
         "var JSCompiler_object_inline_b_1;" +
         "var b = f();" +
         "JSCompiler_object_inline_a_0=a,JSCompiler_object_inline_b_1=b,true;" +
         "if(JSCompiler_object_inline_a_0) g(JSCompiler_object_inline_b_1)");                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testLocal("var x = {}; var b = f(); x = {a:a, b:b}; if(x.a) g(x.b) + x.c",
         "var x = {}; var b = f(); x = {a:a, b:b}; if(x.a) g(x.b) + x.c");                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testLocal("var x; var b = f(); x = {a:a, b:b}; x.c = c; if(x.a) g(x.b) + x.c",
         "var JSCompiler_object_inline_a_0;" +
         "var JSCompiler_object_inline_b_1;" +
         "var JSCompiler_object_inline_c_2;" +
         "var b = f();" +
         "JSCompiler_object_inline_a_0 = a,JSCompiler_object_inline_b_1 = b, " +
         "  JSCompiler_object_inline_c_2=void 0,true;" +
         "JSCompiler_object_inline_c_2 = c;" +
         "if (JSCompiler_object_inline_a_0)" +
         "  g(JSCompiler_object_inline_b_1) + JSCompiler_object_inline_c_2;");                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ testLocal("var x = {a:a}; if (b) x={b:b}; f(x.a||x.b);",
         "var JSCompiler_object_inline_a_0 = a;" +
         "var JSCompiler_object_inline_b_1;" +
         "if(b) JSCompiler_object_inline_b_1 = b," +
         "      JSCompiler_object_inline_a_0 = void 0," +
         "      true;" +
         "f(JSCompiler_object_inline_a_0 || JSCompiler_object_inline_b_1)");                                }catch(Throwable __SHOULD_BE_IGNORED){}
    testLocal("var x; var y = 5; x = {a:a, b:b, c:c}; if (b) x={b:b}; f(x.a||x.b);",
         "var JSCompiler_object_inline_a_0;" +
         "var JSCompiler_object_inline_b_1;" +
         "var JSCompiler_object_inline_c_2;" +
         "var y=5;" +
         "JSCompiler_object_inline_a_0=a," +
         "JSCompiler_object_inline_b_1=b," +
         "JSCompiler_object_inline_c_2=c," +
         "true;" +
         "if (b) JSCompiler_object_inline_b_1=b," +
         "       JSCompiler_object_inline_a_0=void 0," +
         "       JSCompiler_object_inline_c_2=void 0," +
         "       true;" +
         "f(JSCompiler_object_inline_a_0||JSCompiler_object_inline_b_1)");                                  /***** ORIGINAL ASSERTION IS HERE *****/
  }
edit: replace from 279 range 12 at test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java
to
  public void testObject22$catena_0() {
    testLocal("while(1) { var a = {y:1}; if (b) a.x = 2; f(a.y, a.x);}",
      "for(;1;){" +
      " var JSCompiler_object_inline_y_0=1;" +
      " var JSCompiler_object_inline_x_1;" +
      " if(b) JSCompiler_object_inline_x_1=2;" +
      " f(JSCompiler_object_inline_y_0,JSCompiler_object_inline_x_1)" +
      "}");                                                                                                 /***** ORIGINAL ASSERTION IS HERE *****/

    try{ testLocal("var a; while (1) { f(a.x, a.y); a = {x:1, y:1};}",
        "var a; while (1) { f(a.x, a.y); a = {x:1, y:1};}");                                                }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testObject22$catena_1() {
    try{ testLocal("while(1) { var a = {y:1}; if (b) a.x = 2; f(a.y, a.x);}",
      "for(;1;){" +
      " var JSCompiler_object_inline_y_0=1;" +
      " var JSCompiler_object_inline_x_1;" +
      " if(b) JSCompiler_object_inline_x_1=2;" +
      " f(JSCompiler_object_inline_y_0,JSCompiler_object_inline_x_1)" +
      "}");                                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}

    testLocal("var a; while (1) { f(a.x, a.y); a = {x:1, y:1};}",
        "var a; while (1) { f(a.x, a.y); a = {x:1, y:1};}");                                                /***** ORIGINAL ASSERTION IS HERE *****/
  }
trace file: test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java
new test num: 7
ori test num: 3
pattern: 000
patches are written to file
running tests...
used time: Finished in 247.04 seconds
Failing tests: 5
	com.google.javascript.jscomp.InlineObjectLiteralsTest::testObject10$catena_1
	com.google.javascript.jscomp.InlineObjectLiteralsTest::testObject12
	com.google.javascript.jscomp.InlineObjectLiteralsTest::testIssue724
	com.google.javascript.jscomp.InlineObjectLiteralsTest::testObject22$catena_1
	com.google.javascript.jscomp.IntegrationTest::testIssue724
processed: 000
pattern: 001
try to fix hunk: 2
insert before 216 with           validProperties.add(child.getString());

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001
pattern: 010
try to fix hunk: 1
insert before 181 with           String propName = parent.getLastChild().getString();
          if (!validProperties.contains(propName)) {
            if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) {
              validProperties.add(propName);
            } else {
              return false;
            }
          }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010
pattern: 100
try to fix hunk: 0
insert before 157 with       Set<String> validProperties = Sets.newHashSet();

patches are written to file
running tests...
used time: Finished in 236.60 seconds
Failing tests: 5
	com.google.javascript.jscomp.InlineObjectLiteralsTest::testObject10$catena_1
	com.google.javascript.jscomp.InlineObjectLiteralsTest::testObject12
	com.google.javascript.jscomp.InlineObjectLiteralsTest::testIssue724
	com.google.javascript.jscomp.InlineObjectLiteralsTest::testObject22$catena_1
	com.google.javascript.jscomp.IntegrationTest::testIssue724
No new failing tests but only 1 hunk
processed: 100
pattern: 011
try to fix hunk: 1
insert before 181 with           String propName = parent.getLastChild().getString();
          if (!validProperties.contains(propName)) {
            if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) {
              validProperties.add(propName);
            } else {
              return false;
            }
          }

try to fix hunk: 2
insert before 216 with           validProperties.add(child.getString());

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011
pattern: 101
try to fix hunk: 0
insert before 157 with       Set<String> validProperties = Sets.newHashSet();

try to fix hunk: 2
insert before 216 with           validProperties.add(child.getString());

patches are written to file
running tests...
used time: Finished in 233.13 seconds
Failing tests: 5
	com.google.javascript.jscomp.InlineObjectLiteralsTest::testObject10$catena_1
	com.google.javascript.jscomp.InlineObjectLiteralsTest::testObject12
	com.google.javascript.jscomp.InlineObjectLiteralsTest::testIssue724
	com.google.javascript.jscomp.InlineObjectLiteralsTest::testObject22$catena_1
	com.google.javascript.jscomp.IntegrationTest::testIssue724
Can independently fix []
Could not fix independently
processed: 101
pattern: 110
try to fix hunk: 0
insert before 157 with       Set<String> validProperties = Sets.newHashSet();

try to fix hunk: 1
insert before 181 with           String propName = parent.getLastChild().getString();
          if (!validProperties.contains(propName)) {
            if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) {
              validProperties.add(propName);
            } else {
              return false;
            }
          }

patches are written to file
running tests...
used time: Finished in 233.63 seconds
Failing tests: 16
	com.google.javascript.jscomp.InlineObjectLiteralsTest::testObject1
	com.google.javascript.jscomp.InlineObjectLiteralsTest::testObject2
	com.google.javascript.jscomp.InlineObjectLiteralsTest::testObject5
	com.google.javascript.jscomp.InlineObjectLiteralsTest::testObject6
	com.google.javascript.jscomp.InlineObjectLiteralsTest::testObject7
	com.google.javascript.jscomp.InlineObjectLiteralsTest::testObject8
	com.google.javascript.jscomp.InlineObjectLiteralsTest::testObject9
	com.google.javascript.jscomp.InlineObjectLiteralsTest::testObject10$catena_0
	com.google.javascript.jscomp.InlineObjectLiteralsTest::testObject10$catena_2
	com.google.javascript.jscomp.InlineObjectLiteralsTest::testObject10$catena_3
	com.google.javascript.jscomp.InlineObjectLiteralsTest::testObject10$catena_4
	com.google.javascript.jscomp.InlineObjectLiteralsTest::testObject16
	com.google.javascript.jscomp.InlineObjectLiteralsTest::testObject23
	com.google.javascript.jscomp.InlineObjectLiteralsTest::testObject25
	com.google.javascript.jscomp.InlineObjectLiteralsTest::testObject1a
	com.google.javascript.jscomp.InlineObjectLiteralsTest::testObject22$catena_0
Includes new failing tests, set to unusable
processed: 110
pattern: 111
try to fix hunk: 0
insert before 157 with       Set<String> validProperties = Sets.newHashSet();

try to fix hunk: 1
insert before 181 with           String propName = parent.getLastChild().getString();
          if (!validProperties.contains(propName)) {
            if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) {
              validProperties.add(propName);
            } else {
              return false;
            }
          }

try to fix hunk: 2
insert before 216 with           validProperties.add(child.getString());

patches are written to file
running tests...
used time: Finished in 228.52 seconds
Failing tests: 0
Can independently fix ['com.google.javascript.jscomp.IntegrationTest::testIssue724', 'com.google.javascript.jscomp.InlineObjectLiteralsTest::testObject12', 'com.google.javascript.jscomp.InlineObjectLiteralsTest::testObject22$catena_1', 'com.google.javascript.jscomp.InlineObjectLiteralsTest::testObject10$catena_1', 'com.google.javascript.jscomp.InlineObjectLiteralsTest::testIssue724']
select new bug
Pattern: 111
new failing tests:
com.google.javascript.jscomp.IntegrationTest::testIssue724
com.google.javascript.jscomp.InlineObjectLiteralsTest::testObject12
com.google.javascript.jscomp.InlineObjectLiteralsTest::testObject22$catena_1
com.google.javascript.jscomp.InlineObjectLiteralsTest::testObject10$catena_1
com.google.javascript.jscomp.InlineObjectLiteralsTest::testIssue724
Save found bug
processed: 111
Find 1 new bugs
