---
Begin generate bug_id: Lang_4
num_of_hunks: 4
timeout for running: 3600
use working dir: ./working/data/Lang_4
Try to checkout Lang_4
build dir: ['./working/data/Lang_4/target/classes', './working/data/Lang_4/target/tests']
init FileManager
trace file: src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java
trying to replace old failing tests
edit: replace from 43 range 8 at src/test/java/org/apache/commons/lang3/text/translate/LookupTranslatorTest.java
to
    @Test
    public void testLang882$catena_0() throws IOException {
        final LookupTranslator lt = new LookupTranslator(new CharSequence[][] { { new StringBuffer("one"), new StringBuffer("two") } });
        final StringWriter out = new StringWriter();
        final int result = lt.translate(new StringBuffer("one"), 0, out);
        assertEquals("Incorrect codepoint consumption", 3, result);                                         /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("Incorrect value", "two", out.toString());                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testLang882$catena_1() throws IOException {
        final LookupTranslator lt = new LookupTranslator(new CharSequence[][] { { new StringBuffer("one"), new StringBuffer("two") } });
        final StringWriter out = new StringWriter();
        final int result = lt.translate(new StringBuffer("one"), 0, out);
        try{ assertEquals("Incorrect codepoint consumption", 3, result);                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("Incorrect value", "two", out.toString());                                             /***** ORIGINAL ASSERTION IS HERE *****/
    }
trace file: src/test/java/org/apache/commons/lang3/text/translate/LookupTranslatorTest.java
new test num: 2
ori test num: 0
pattern: 0000
patches are written to file
running tests...
used time: Finished in 43.77 seconds
Failing tests: 2
	org.apache.commons.lang3.text.translate.LookupTranslatorTest::testLang882$catena_0
	org.apache.commons.lang3.text.translate.LookupTranslatorTest::testLang882$catena_1
processed: 0000
pattern: 0001
try to fix hunk: 3
replace from 77 with range 1 to
            final CharSequence result = lookupMap.get(subSeq.toString());

patches are written to file
running tests...
used time: Finished in 36.52 seconds
Failing tests: 2
	org.apache.commons.lang3.text.translate.LookupTranslatorTest::testLang882$catena_0
	org.apache.commons.lang3.text.translate.LookupTranslatorTest::testLang882$catena_1
No new failing tests but only 1 hunk
processed: 0001
pattern: 0010
try to fix hunk: 2
replace from 51 with range 1 to
                this.lookupMap.put(seq[0].toString(), seq[1]);

patches are written to file
running tests...
used time: Finished in 34.91 seconds
Failing tests: 0
select new bug
Pattern: 0010
new failing tests:
org.apache.commons.lang3.text.translate.LookupTranslatorTest::testLang882$catena_0
org.apache.commons.lang3.text.translate.LookupTranslatorTest::testLang882$catena_1
Save found bug
processed: 0010
pattern: 0100
try to fix hunk: 1
replace from 46 with range 1 to
        lookupMap = new HashMap<String, CharSequence>();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100
pattern: 1000
try to fix hunk: 0
replace from 31 with range 1 to
    private final HashMap<String, CharSequence> lookupMap;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000
pattern: 0011
try to fix hunk: 2
replace from 51 with range 1 to
                this.lookupMap.put(seq[0].toString(), seq[1]);

try to fix hunk: 3
replace from 77 with range 1 to
            final CharSequence result = lookupMap.get(subSeq.toString());

patches are written to file
running tests...
used time: Finished in 40.48 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 0011
pattern: 0101
try to fix hunk: 1
replace from 46 with range 1 to
        lookupMap = new HashMap<String, CharSequence>();

try to fix hunk: 3
replace from 77 with range 1 to
            final CharSequence result = lookupMap.get(subSeq.toString());

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0101
pattern: 0110
try to fix hunk: 1
replace from 46 with range 1 to
        lookupMap = new HashMap<String, CharSequence>();

try to fix hunk: 2
replace from 51 with range 1 to
                this.lookupMap.put(seq[0].toString(), seq[1]);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0110
pattern: 1001
try to fix hunk: 0
replace from 31 with range 1 to
    private final HashMap<String, CharSequence> lookupMap;

try to fix hunk: 3
replace from 77 with range 1 to
            final CharSequence result = lookupMap.get(subSeq.toString());

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1001
pattern: 1010
try to fix hunk: 0
replace from 31 with range 1 to
    private final HashMap<String, CharSequence> lookupMap;

try to fix hunk: 2
replace from 51 with range 1 to
                this.lookupMap.put(seq[0].toString(), seq[1]);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1010
pattern: 1100
try to fix hunk: 0
replace from 31 with range 1 to
    private final HashMap<String, CharSequence> lookupMap;

try to fix hunk: 1
replace from 46 with range 1 to
        lookupMap = new HashMap<String, CharSequence>();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1100
pattern: 0111
try to fix hunk: 1
replace from 46 with range 1 to
        lookupMap = new HashMap<String, CharSequence>();

try to fix hunk: 2
replace from 51 with range 1 to
                this.lookupMap.put(seq[0].toString(), seq[1]);

try to fix hunk: 3
replace from 77 with range 1 to
            final CharSequence result = lookupMap.get(subSeq.toString());

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0111
pattern: 1011
try to fix hunk: 0
replace from 31 with range 1 to
    private final HashMap<String, CharSequence> lookupMap;

try to fix hunk: 2
replace from 51 with range 1 to
                this.lookupMap.put(seq[0].toString(), seq[1]);

try to fix hunk: 3
replace from 77 with range 1 to
            final CharSequence result = lookupMap.get(subSeq.toString());

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1011
pattern: 1101
try to fix hunk: 0
replace from 31 with range 1 to
    private final HashMap<String, CharSequence> lookupMap;

try to fix hunk: 1
replace from 46 with range 1 to
        lookupMap = new HashMap<String, CharSequence>();

try to fix hunk: 3
replace from 77 with range 1 to
            final CharSequence result = lookupMap.get(subSeq.toString());

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1101
pattern: 1110
try to fix hunk: 0
replace from 31 with range 1 to
    private final HashMap<String, CharSequence> lookupMap;

try to fix hunk: 1
replace from 46 with range 1 to
        lookupMap = new HashMap<String, CharSequence>();

try to fix hunk: 2
replace from 51 with range 1 to
                this.lookupMap.put(seq[0].toString(), seq[1]);

patches are written to file
running tests...
used time: Finished in 34.23 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 1110
pattern: 1111
try to fix hunk: 0
replace from 31 with range 1 to
    private final HashMap<String, CharSequence> lookupMap;

try to fix hunk: 1
replace from 46 with range 1 to
        lookupMap = new HashMap<String, CharSequence>();

try to fix hunk: 2
replace from 51 with range 1 to
                this.lookupMap.put(seq[0].toString(), seq[1]);

try to fix hunk: 3
replace from 77 with range 1 to
            final CharSequence result = lookupMap.get(subSeq.toString());

patches are written to file
running tests...
used time: Finished in 36.07 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 1111
Find 1 new bugs
