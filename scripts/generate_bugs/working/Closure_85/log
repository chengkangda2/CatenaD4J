---
Begin generate bug_id: Closure_85
num_of_hunks: 4
timeout for running: 3600
use working dir: ./working/data/Closure_85
Try to checkout Closure_85
build dir: ['./working/data/Closure_85/build/classes', './working/data/Closure_85/build/test']
init FileManager
trace file: src/com/google/javascript/jscomp/UnreachableCodeElimination.java
trying to replace old failing tests
edit: replace from 234 range 17 at test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java
to
  public void testCascadedRemovalOfUnlessUnconditonalJumps$catena_0() {
    test("switch (a) { case 'a': break; case 'b': break; case 'c': break }",
         "switch (a) { case 'a': break; case 'b': case 'c': }");                                            /***** ORIGINAL ASSERTION IS HERE *****/
    // Only one break removed per pass.
    try{ test("switch (a) { case 'a': break; case 'b': case 'c': }",
         "switch (a) { case 'a': case 'b': case 'c': }");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("function foo() {" +
      "  switch (a) { case 'a':return; case 'b':return; case 'c':return }}",
      "function foo() { switch (a) { case 'a':return; case 'b': case 'c': }}");                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("function foo() {" +
      "  switch (a) { case 'a':return; case 'b': case 'c': }}",
      "function foo() { switch (a) { case 'a': case 'b': case 'c': }}");                                    }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ testSame("function foo() {" +
             "switch (a) { case 'a':return 2; case 'b':return 1}}");                                        }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testCascadedRemovalOfUnlessUnconditonalJumps$catena_1() {
    try{ test("switch (a) { case 'a': break; case 'b': break; case 'c': break }",
         "switch (a) { case 'a': break; case 'b': case 'c': }");                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    // Only one break removed per pass.
    test("switch (a) { case 'a': break; case 'b': case 'c': }",
         "switch (a) { case 'a': case 'b': case 'c': }");                                                   /***** ORIGINAL ASSERTION IS HERE *****/

    try{ test("function foo() {" +
      "  switch (a) { case 'a':return; case 'b':return; case 'c':return }}",
      "function foo() { switch (a) { case 'a':return; case 'b': case 'c': }}");                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("function foo() {" +
      "  switch (a) { case 'a':return; case 'b': case 'c': }}",
      "function foo() { switch (a) { case 'a': case 'b': case 'c': }}");                                    }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ testSame("function foo() {" +
             "switch (a) { case 'a':return 2; case 'b':return 1}}");                                        }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testCascadedRemovalOfUnlessUnconditonalJumps$catena_2() {
    try{ test("switch (a) { case 'a': break; case 'b': break; case 'c': break }",
         "switch (a) { case 'a': break; case 'b': case 'c': }");                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    // Only one break removed per pass.
    try{ test("switch (a) { case 'a': break; case 'b': case 'c': }",
         "switch (a) { case 'a': case 'b': case 'c': }");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

    test("function foo() {" +
      "  switch (a) { case 'a':return; case 'b':return; case 'c':return }}",
      "function foo() { switch (a) { case 'a':return; case 'b': case 'c': }}");                             /***** ORIGINAL ASSERTION IS HERE *****/
    try{ test("function foo() {" +
      "  switch (a) { case 'a':return; case 'b': case 'c': }}",
      "function foo() { switch (a) { case 'a': case 'b': case 'c': }}");                                    }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ testSame("function foo() {" +
             "switch (a) { case 'a':return 2; case 'b':return 1}}");                                        }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testCascadedRemovalOfUnlessUnconditonalJumps$catena_3() {
    try{ test("switch (a) { case 'a': break; case 'b': break; case 'c': break }",
         "switch (a) { case 'a': break; case 'b': case 'c': }");                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    // Only one break removed per pass.
    try{ test("switch (a) { case 'a': break; case 'b': case 'c': }",
         "switch (a) { case 'a': case 'b': case 'c': }");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("function foo() {" +
      "  switch (a) { case 'a':return; case 'b':return; case 'c':return }}",
      "function foo() { switch (a) { case 'a':return; case 'b': case 'c': }}");                             }catch(Throwable __SHOULD_BE_IGNORED){}
    test("function foo() {" +
      "  switch (a) { case 'a':return; case 'b': case 'c': }}",
      "function foo() { switch (a) { case 'a': case 'b': case 'c': }}");                                    /***** ORIGINAL ASSERTION IS HERE *****/

    try{ testSame("function foo() {" +
             "switch (a) { case 'a':return 2; case 'b':return 1}}");                                        }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testCascadedRemovalOfUnlessUnconditonalJumps$catena_4() {
    try{ test("switch (a) { case 'a': break; case 'b': break; case 'c': break }",
         "switch (a) { case 'a': break; case 'b': case 'c': }");                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    // Only one break removed per pass.
    try{ test("switch (a) { case 'a': break; case 'b': case 'c': }",
         "switch (a) { case 'a': case 'b': case 'c': }");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ test("function foo() {" +
      "  switch (a) { case 'a':return; case 'b':return; case 'c':return }}",
      "function foo() { switch (a) { case 'a':return; case 'b': case 'c': }}");                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ test("function foo() {" +
      "  switch (a) { case 'a':return; case 'b': case 'c': }}",
      "function foo() { switch (a) { case 'a': case 'b': case 'c': }}");                                    }catch(Throwable __SHOULD_BE_IGNORED){}

    testSame("function foo() {" +
             "switch (a) { case 'a':return 2; case 'b':return 1}}");                                        /***** ORIGINAL ASSERTION IS HERE *****/
  }
trace file: test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java
new test num: 5
ori test num: 1
pattern: 0000
patches are written to file
running tests...
used time: Finished in 177.07 seconds
Failing tests: 3
	com.google.javascript.jscomp.UnreachableCodeEliminationTest::testCascadedRemovalOfUnlessUnconditonalJumps$catena_0
	com.google.javascript.jscomp.UnreachableCodeEliminationTest::testCascadedRemovalOfUnlessUnconditonalJumps$catena_2
	com.google.javascript.jscomp.UnreachableCodeEliminationTest::testIssue311
processed: 0000
pattern: 0001
try to fix hunk: 3
insert before 196 with     while (next != null && next.getType() == Token.BLOCK) {
      if (next.hasChildren()) {
        next = next.getFirstChild();
      } else {
        next = computeFollowing(next);
      }
    }

patches are written to file
running tests...
used time: Finished in 161.54 seconds
Failing tests: 3
	com.google.javascript.jscomp.UnreachableCodeEliminationTest::testCascadedRemovalOfUnlessUnconditonalJumps$catena_0
	com.google.javascript.jscomp.UnreachableCodeEliminationTest::testCascadedRemovalOfUnlessUnconditonalJumps$catena_2
	com.google.javascript.jscomp.UnreachableCodeEliminationTest::testIssue311
No new failing tests but only 1 hunk
processed: 0001
pattern: 0010
try to fix hunk: 2
replace from 183 with range 1 to
          Node fallThrough = computeFollowing(n);

patches are written to file
running tests...
used time: Finished in 164.49 seconds
Failing tests: 6
	com.google.javascript.jscomp.UnreachableCodeEliminationTest::testRemoveUnreachableCode
	com.google.javascript.jscomp.UnreachableCodeEliminationTest::testCascadedRemovalOfUnlessUnconditonalJumps$catena_0
	com.google.javascript.jscomp.UnreachableCodeEliminationTest::testCascadedRemovalOfUnlessUnconditonalJumps$catena_1
	com.google.javascript.jscomp.UnreachableCodeEliminationTest::testCascadedRemovalOfUnlessUnconditonalJumps$catena_2
	com.google.javascript.jscomp.UnreachableCodeEliminationTest::testCascadedRemovalOfUnlessUnconditonalJumps$catena_3
	com.google.javascript.jscomp.UnreachableCodeEliminationTest::testUnlessUnconditonalBreak
Includes new failing tests, set to unusable
processed: 0010
pattern: 0100
try to fix hunk: 1
delete from 160 with range 7
patches are written to file
running tests...
used time: Finished in 162.69 seconds
Failing tests: 7
	com.google.javascript.jscomp.UnreachableCodeEliminationTest::testRemoveUnreachableCode
	com.google.javascript.jscomp.UnreachableCodeEliminationTest::testCascadedRemovalOfUnlessUnconditonalJumps$catena_0
	com.google.javascript.jscomp.UnreachableCodeEliminationTest::testCascadedRemovalOfUnlessUnconditonalJumps$catena_1
	com.google.javascript.jscomp.UnreachableCodeEliminationTest::testCascadedRemovalOfUnlessUnconditonalJumps$catena_2
	com.google.javascript.jscomp.UnreachableCodeEliminationTest::testCascadedRemovalOfUnlessUnconditonalJumps$catena_3
	com.google.javascript.jscomp.UnreachableCodeEliminationTest::testIssue311
	com.google.javascript.jscomp.UnreachableCodeEliminationTest::testUnlessUnconditonalBreak
Includes new failing tests, set to unusable
processed: 0100
pattern: 1000
try to fix hunk: 0
delete from 153 with range 6
patches are written to file
running tests...
used time: Finished in 155.77 seconds
Failing tests: 3
	com.google.javascript.jscomp.UnreachableCodeEliminationTest::testCascadedRemovalOfUnlessUnconditonalJumps$catena_0
	com.google.javascript.jscomp.UnreachableCodeEliminationTest::testCascadedRemovalOfUnlessUnconditonalJumps$catena_2
	com.google.javascript.jscomp.UnreachableCodeEliminationTest::testIssue311
No new failing tests but only 1 hunk
processed: 1000
pattern: 0011
try to fix hunk: 2
replace from 183 with range 1 to
          Node fallThrough = computeFollowing(n);

try to fix hunk: 3
insert before 196 with     while (next != null && next.getType() == Token.BLOCK) {
      if (next.hasChildren()) {
        next = next.getFirstChild();
      } else {
        next = computeFollowing(next);
      }
    }

patches are written to file
running tests...
used time: Finished in 155.93 seconds
Failing tests: 0
Can independently fix ['com.google.javascript.jscomp.UnreachableCodeEliminationTest::testCascadedRemovalOfUnlessUnconditonalJumps$catena_0', 'com.google.javascript.jscomp.UnreachableCodeEliminationTest::testIssue311', 'com.google.javascript.jscomp.UnreachableCodeEliminationTest::testCascadedRemovalOfUnlessUnconditonalJumps$catena_2']
select new bug
Pattern: 0011
new failing tests:
com.google.javascript.jscomp.UnreachableCodeEliminationTest::testCascadedRemovalOfUnlessUnconditonalJumps$catena_0
com.google.javascript.jscomp.UnreachableCodeEliminationTest::testIssue311
com.google.javascript.jscomp.UnreachableCodeEliminationTest::testCascadedRemovalOfUnlessUnconditonalJumps$catena_2
Save found bug
processed: 0011
pattern: 0101
try to fix hunk: 1
delete from 160 with range 7
try to fix hunk: 3
insert before 196 with     while (next != null && next.getType() == Token.BLOCK) {
      if (next.hasChildren()) {
        next = next.getFirstChild();
      } else {
        next = computeFollowing(next);
      }
    }

patches are written to file
running tests...
used time: Finished in 165.40 seconds
Failing tests: 3
	com.google.javascript.jscomp.UnreachableCodeEliminationTest::testCascadedRemovalOfUnlessUnconditonalJumps$catena_0
	com.google.javascript.jscomp.UnreachableCodeEliminationTest::testCascadedRemovalOfUnlessUnconditonalJumps$catena_2
	com.google.javascript.jscomp.UnreachableCodeEliminationTest::testIssue311
Can independently fix []
Could not fix independently
processed: 0101
pattern: 0110
try to fix hunk: 1
delete from 160 with range 7
try to fix hunk: 2
replace from 183 with range 1 to
          Node fallThrough = computeFollowing(n);

patches are written to file
running tests...
used time: Finished in 173.64 seconds
Failing tests: 6
	com.google.javascript.jscomp.UnreachableCodeEliminationTest::testRemoveUnreachableCode
	com.google.javascript.jscomp.UnreachableCodeEliminationTest::testCascadedRemovalOfUnlessUnconditonalJumps$catena_0
	com.google.javascript.jscomp.UnreachableCodeEliminationTest::testCascadedRemovalOfUnlessUnconditonalJumps$catena_1
	com.google.javascript.jscomp.UnreachableCodeEliminationTest::testCascadedRemovalOfUnlessUnconditonalJumps$catena_2
	com.google.javascript.jscomp.UnreachableCodeEliminationTest::testCascadedRemovalOfUnlessUnconditonalJumps$catena_3
	com.google.javascript.jscomp.UnreachableCodeEliminationTest::testUnlessUnconditonalBreak
Includes new failing tests, set to unusable
processed: 0110
pattern: 1001
try to fix hunk: 0
delete from 153 with range 6
try to fix hunk: 3
insert before 196 with     while (next != null && next.getType() == Token.BLOCK) {
      if (next.hasChildren()) {
        next = next.getFirstChild();
      } else {
        next = computeFollowing(next);
      }
    }

patches are written to file
running tests...
used time: Finished in 166.98 seconds
Failing tests: 3
	com.google.javascript.jscomp.UnreachableCodeEliminationTest::testCascadedRemovalOfUnlessUnconditonalJumps$catena_0
	com.google.javascript.jscomp.UnreachableCodeEliminationTest::testCascadedRemovalOfUnlessUnconditonalJumps$catena_2
	com.google.javascript.jscomp.UnreachableCodeEliminationTest::testIssue311
Can independently fix []
Could not fix independently
processed: 1001
pattern: 1010
try to fix hunk: 0
delete from 153 with range 6
try to fix hunk: 2
replace from 183 with range 1 to
          Node fallThrough = computeFollowing(n);

patches are written to file
running tests...
used time: Finished in 158.07 seconds
Failing tests: 6
	com.google.javascript.jscomp.UnreachableCodeEliminationTest::testRemoveUnreachableCode
	com.google.javascript.jscomp.UnreachableCodeEliminationTest::testCascadedRemovalOfUnlessUnconditonalJumps$catena_0
	com.google.javascript.jscomp.UnreachableCodeEliminationTest::testCascadedRemovalOfUnlessUnconditonalJumps$catena_1
	com.google.javascript.jscomp.UnreachableCodeEliminationTest::testCascadedRemovalOfUnlessUnconditonalJumps$catena_2
	com.google.javascript.jscomp.UnreachableCodeEliminationTest::testCascadedRemovalOfUnlessUnconditonalJumps$catena_3
	com.google.javascript.jscomp.UnreachableCodeEliminationTest::testUnlessUnconditonalBreak
Includes new failing tests, set to unusable
processed: 1010
pattern: 1100
try to fix hunk: 0
delete from 153 with range 6
try to fix hunk: 1
delete from 160 with range 7
patches are written to file
running tests...
used time: Finished in 158.98 seconds
Failing tests: 7
	com.google.javascript.jscomp.UnreachableCodeEliminationTest::testRemoveUnreachableCode
	com.google.javascript.jscomp.UnreachableCodeEliminationTest::testCascadedRemovalOfUnlessUnconditonalJumps$catena_0
	com.google.javascript.jscomp.UnreachableCodeEliminationTest::testCascadedRemovalOfUnlessUnconditonalJumps$catena_1
	com.google.javascript.jscomp.UnreachableCodeEliminationTest::testCascadedRemovalOfUnlessUnconditonalJumps$catena_2
	com.google.javascript.jscomp.UnreachableCodeEliminationTest::testCascadedRemovalOfUnlessUnconditonalJumps$catena_3
	com.google.javascript.jscomp.UnreachableCodeEliminationTest::testIssue311
	com.google.javascript.jscomp.UnreachableCodeEliminationTest::testUnlessUnconditonalBreak
Includes new failing tests, set to unusable
processed: 1100
pattern: 0111
try to fix hunk: 1
delete from 160 with range 7
try to fix hunk: 2
replace from 183 with range 1 to
          Node fallThrough = computeFollowing(n);

try to fix hunk: 3
insert before 196 with     while (next != null && next.getType() == Token.BLOCK) {
      if (next.hasChildren()) {
        next = next.getFirstChild();
      } else {
        next = computeFollowing(next);
      }
    }

patches are written to file
running tests...
used time: Finished in 161.98 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 0111
pattern: 1011
try to fix hunk: 0
delete from 153 with range 6
try to fix hunk: 2
replace from 183 with range 1 to
          Node fallThrough = computeFollowing(n);

try to fix hunk: 3
insert before 196 with     while (next != null && next.getType() == Token.BLOCK) {
      if (next.hasChildren()) {
        next = next.getFirstChild();
      } else {
        next = computeFollowing(next);
      }
    }

patches are written to file
running tests...
used time: Finished in 178.98 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 1011
pattern: 1101
try to fix hunk: 0
delete from 153 with range 6
try to fix hunk: 1
delete from 160 with range 7
try to fix hunk: 3
insert before 196 with     while (next != null && next.getType() == Token.BLOCK) {
      if (next.hasChildren()) {
        next = next.getFirstChild();
      } else {
        next = computeFollowing(next);
      }
    }

patches are written to file
running tests...
used time: Finished in 184.22 seconds
Failing tests: 3
	com.google.javascript.jscomp.UnreachableCodeEliminationTest::testCascadedRemovalOfUnlessUnconditonalJumps$catena_0
	com.google.javascript.jscomp.UnreachableCodeEliminationTest::testCascadedRemovalOfUnlessUnconditonalJumps$catena_2
	com.google.javascript.jscomp.UnreachableCodeEliminationTest::testIssue311
Can independently fix []
Could not fix independently
processed: 1101
pattern: 1110
try to fix hunk: 0
delete from 153 with range 6
try to fix hunk: 1
delete from 160 with range 7
try to fix hunk: 2
replace from 183 with range 1 to
          Node fallThrough = computeFollowing(n);

patches are written to file
running tests...
used time: Finished in 171.56 seconds
Failing tests: 6
	com.google.javascript.jscomp.UnreachableCodeEliminationTest::testRemoveUnreachableCode
	com.google.javascript.jscomp.UnreachableCodeEliminationTest::testCascadedRemovalOfUnlessUnconditonalJumps$catena_0
	com.google.javascript.jscomp.UnreachableCodeEliminationTest::testCascadedRemovalOfUnlessUnconditonalJumps$catena_1
	com.google.javascript.jscomp.UnreachableCodeEliminationTest::testCascadedRemovalOfUnlessUnconditonalJumps$catena_2
	com.google.javascript.jscomp.UnreachableCodeEliminationTest::testCascadedRemovalOfUnlessUnconditonalJumps$catena_3
	com.google.javascript.jscomp.UnreachableCodeEliminationTest::testUnlessUnconditonalBreak
Includes new failing tests, set to unusable
processed: 1110
pattern: 1111
try to fix hunk: 0
delete from 153 with range 6
try to fix hunk: 1
delete from 160 with range 7
try to fix hunk: 2
replace from 183 with range 1 to
          Node fallThrough = computeFollowing(n);

try to fix hunk: 3
insert before 196 with     while (next != null && next.getType() == Token.BLOCK) {
      if (next.hasChildren()) {
        next = next.getFirstChild();
      } else {
        next = computeFollowing(next);
      }
    }

patches are written to file
running tests...
used time: Finished in 167.30 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 1111
Find 1 new bugs
