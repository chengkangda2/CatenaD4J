---
Begin generate bug_id: Closure_76
num_of_hunks: 11
timeout for running: 3600
use working dir: ./working/data/Closure_76
Try to checkout Closure_76
build dir: ['./working/data/Closure_76/build/classes', './working/data/Closure_76/build/test']
init FileManager
trace file: src/com/google/javascript/jscomp/DeadAssignmentsElimination.java
trying to replace old failing tests
edit: replace from 456 range 33 at test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java
to
  public void testInExpression2$catena_0() {
    // This can be improved.  "a = 1" is dead but "a" is read in the following
    // expression.
    inFunction(
        "var a; a = 1; if ((a = 2) || (a = 3) || (a)) {}",
        "var a; a = 1; if ((    2) || (a = 3) || (a)) {}");                                                 /***** ORIGINAL ASSERTION IS HERE *****/

    try{ inFunction(
        "var a; (a = 1) || (a = 2)",
        "var a; 1 || 2");                                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ inFunction("var a; (a = 1) || (a = 2); return a");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ inFunction(
        "var a; a = 1; a ? a = 2 : a;",
        "var a; a = 1; a ?     2 : a;");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ inFunction("var a; a = 1; a ? a = 2 : a; return a");                                               }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ inFunction(
        "var a; a = 1; a ? a : a = 2;",
        "var a; a = 1; a ? a : 2;");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ inFunction("var a; a = 1; a ? a : a =2; return a");                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ inFunction(
        "var a; (a = 1) ? a = 2 : a = 3;",
        "var a;      1  ?     2 :     3;");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}

    // This can be improved.  "a = 1" is dead but "a" is read in the following
    // expression.
    try{ inFunction("var a; (a = 1) ? a = 2 : a = 3; return a");                                            }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testInExpression2$catena_1() {
    // This can be improved.  "a = 1" is dead but "a" is read in the following
    // expression.
    try{ inFunction(
        "var a; a = 1; if ((a = 2) || (a = 3) || (a)) {}",
        "var a; a = 1; if ((    2) || (a = 3) || (a)) {}");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}

    inFunction(
        "var a; (a = 1) || (a = 2)",
        "var a; 1 || 2");                                                                                   /***** ORIGINAL ASSERTION IS HERE *****/

    try{ inFunction("var a; (a = 1) || (a = 2); return a");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ inFunction(
        "var a; a = 1; a ? a = 2 : a;",
        "var a; a = 1; a ?     2 : a;");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ inFunction("var a; a = 1; a ? a = 2 : a; return a");                                               }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ inFunction(
        "var a; a = 1; a ? a : a = 2;",
        "var a; a = 1; a ? a : 2;");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ inFunction("var a; a = 1; a ? a : a =2; return a");                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ inFunction(
        "var a; (a = 1) ? a = 2 : a = 3;",
        "var a;      1  ?     2 :     3;");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}

    // This can be improved.  "a = 1" is dead but "a" is read in the following
    // expression.
    try{ inFunction("var a; (a = 1) ? a = 2 : a = 3; return a");                                            }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testInExpression2$catena_2() {
    // This can be improved.  "a = 1" is dead but "a" is read in the following
    // expression.
    try{ inFunction(
        "var a; a = 1; if ((a = 2) || (a = 3) || (a)) {}",
        "var a; a = 1; if ((    2) || (a = 3) || (a)) {}");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ inFunction(
        "var a; (a = 1) || (a = 2)",
        "var a; 1 || 2");                                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

    inFunction("var a; (a = 1) || (a = 2); return a");                                                      /***** ORIGINAL ASSERTION IS HERE *****/

    try{ inFunction(
        "var a; a = 1; a ? a = 2 : a;",
        "var a; a = 1; a ?     2 : a;");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ inFunction("var a; a = 1; a ? a = 2 : a; return a");                                               }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ inFunction(
        "var a; a = 1; a ? a : a = 2;",
        "var a; a = 1; a ? a : 2;");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ inFunction("var a; a = 1; a ? a : a =2; return a");                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ inFunction(
        "var a; (a = 1) ? a = 2 : a = 3;",
        "var a;      1  ?     2 :     3;");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}

    // This can be improved.  "a = 1" is dead but "a" is read in the following
    // expression.
    try{ inFunction("var a; (a = 1) ? a = 2 : a = 3; return a");                                            }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testInExpression2$catena_3() {
    // This can be improved.  "a = 1" is dead but "a" is read in the following
    // expression.
    try{ inFunction(
        "var a; a = 1; if ((a = 2) || (a = 3) || (a)) {}",
        "var a; a = 1; if ((    2) || (a = 3) || (a)) {}");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ inFunction(
        "var a; (a = 1) || (a = 2)",
        "var a; 1 || 2");                                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ inFunction("var a; (a = 1) || (a = 2); return a");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}

    inFunction(
        "var a; a = 1; a ? a = 2 : a;",
        "var a; a = 1; a ?     2 : a;");                                                                    /***** ORIGINAL ASSERTION IS HERE *****/

    try{ inFunction("var a; a = 1; a ? a = 2 : a; return a");                                               }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ inFunction(
        "var a; a = 1; a ? a : a = 2;",
        "var a; a = 1; a ? a : 2;");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ inFunction("var a; a = 1; a ? a : a =2; return a");                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ inFunction(
        "var a; (a = 1) ? a = 2 : a = 3;",
        "var a;      1  ?     2 :     3;");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}

    // This can be improved.  "a = 1" is dead but "a" is read in the following
    // expression.
    try{ inFunction("var a; (a = 1) ? a = 2 : a = 3; return a");                                            }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testInExpression2$catena_4() {
    // This can be improved.  "a = 1" is dead but "a" is read in the following
    // expression.
    try{ inFunction(
        "var a; a = 1; if ((a = 2) || (a = 3) || (a)) {}",
        "var a; a = 1; if ((    2) || (a = 3) || (a)) {}");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ inFunction(
        "var a; (a = 1) || (a = 2)",
        "var a; 1 || 2");                                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ inFunction("var a; (a = 1) || (a = 2); return a");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ inFunction(
        "var a; a = 1; a ? a = 2 : a;",
        "var a; a = 1; a ?     2 : a;");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}

    inFunction("var a; a = 1; a ? a = 2 : a; return a");                                                    /***** ORIGINAL ASSERTION IS HERE *****/

    try{ inFunction(
        "var a; a = 1; a ? a : a = 2;",
        "var a; a = 1; a ? a : 2;");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ inFunction("var a; a = 1; a ? a : a =2; return a");                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ inFunction(
        "var a; (a = 1) ? a = 2 : a = 3;",
        "var a;      1  ?     2 :     3;");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}

    // This can be improved.  "a = 1" is dead but "a" is read in the following
    // expression.
    try{ inFunction("var a; (a = 1) ? a = 2 : a = 3; return a");                                            }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testInExpression2$catena_5() {
    // This can be improved.  "a = 1" is dead but "a" is read in the following
    // expression.
    try{ inFunction(
        "var a; a = 1; if ((a = 2) || (a = 3) || (a)) {}",
        "var a; a = 1; if ((    2) || (a = 3) || (a)) {}");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ inFunction(
        "var a; (a = 1) || (a = 2)",
        "var a; 1 || 2");                                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ inFunction("var a; (a = 1) || (a = 2); return a");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ inFunction(
        "var a; a = 1; a ? a = 2 : a;",
        "var a; a = 1; a ?     2 : a;");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ inFunction("var a; a = 1; a ? a = 2 : a; return a");                                               }catch(Throwable __SHOULD_BE_IGNORED){}

    inFunction(
        "var a; a = 1; a ? a : a = 2;",
        "var a; a = 1; a ? a : 2;");                                                                        /***** ORIGINAL ASSERTION IS HERE *****/

    try{ inFunction("var a; a = 1; a ? a : a =2; return a");                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ inFunction(
        "var a; (a = 1) ? a = 2 : a = 3;",
        "var a;      1  ?     2 :     3;");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}

    // This can be improved.  "a = 1" is dead but "a" is read in the following
    // expression.
    try{ inFunction("var a; (a = 1) ? a = 2 : a = 3; return a");                                            }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testInExpression2$catena_6() {
    // This can be improved.  "a = 1" is dead but "a" is read in the following
    // expression.
    try{ inFunction(
        "var a; a = 1; if ((a = 2) || (a = 3) || (a)) {}",
        "var a; a = 1; if ((    2) || (a = 3) || (a)) {}");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ inFunction(
        "var a; (a = 1) || (a = 2)",
        "var a; 1 || 2");                                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ inFunction("var a; (a = 1) || (a = 2); return a");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ inFunction(
        "var a; a = 1; a ? a = 2 : a;",
        "var a; a = 1; a ?     2 : a;");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ inFunction("var a; a = 1; a ? a = 2 : a; return a");                                               }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ inFunction(
        "var a; a = 1; a ? a : a = 2;",
        "var a; a = 1; a ? a : 2;");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

    inFunction("var a; a = 1; a ? a : a =2; return a");                                                     /***** ORIGINAL ASSERTION IS HERE *****/

    try{ inFunction(
        "var a; (a = 1) ? a = 2 : a = 3;",
        "var a;      1  ?     2 :     3;");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}

    // This can be improved.  "a = 1" is dead but "a" is read in the following
    // expression.
    try{ inFunction("var a; (a = 1) ? a = 2 : a = 3; return a");                                            }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testInExpression2$catena_7() {
    // This can be improved.  "a = 1" is dead but "a" is read in the following
    // expression.
    try{ inFunction(
        "var a; a = 1; if ((a = 2) || (a = 3) || (a)) {}",
        "var a; a = 1; if ((    2) || (a = 3) || (a)) {}");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ inFunction(
        "var a; (a = 1) || (a = 2)",
        "var a; 1 || 2");                                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ inFunction("var a; (a = 1) || (a = 2); return a");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ inFunction(
        "var a; a = 1; a ? a = 2 : a;",
        "var a; a = 1; a ?     2 : a;");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ inFunction("var a; a = 1; a ? a = 2 : a; return a");                                               }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ inFunction(
        "var a; a = 1; a ? a : a = 2;",
        "var a; a = 1; a ? a : 2;");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ inFunction("var a; a = 1; a ? a : a =2; return a");                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    inFunction(
        "var a; (a = 1) ? a = 2 : a = 3;",
        "var a;      1  ?     2 :     3;");                                                                 /***** ORIGINAL ASSERTION IS HERE *****/

    // This can be improved.  "a = 1" is dead but "a" is read in the following
    // expression.
    try{ inFunction("var a; (a = 1) ? a = 2 : a = 3; return a");                                            }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testInExpression2$catena_8() {
    // This can be improved.  "a = 1" is dead but "a" is read in the following
    // expression.
    try{ inFunction(
        "var a; a = 1; if ((a = 2) || (a = 3) || (a)) {}",
        "var a; a = 1; if ((    2) || (a = 3) || (a)) {}");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ inFunction(
        "var a; (a = 1) || (a = 2)",
        "var a; 1 || 2");                                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ inFunction("var a; (a = 1) || (a = 2); return a");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ inFunction(
        "var a; a = 1; a ? a = 2 : a;",
        "var a; a = 1; a ?     2 : a;");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ inFunction("var a; a = 1; a ? a = 2 : a; return a");                                               }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ inFunction(
        "var a; a = 1; a ? a : a = 2;",
        "var a; a = 1; a ? a : 2;");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ inFunction("var a; a = 1; a ? a : a =2; return a");                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ inFunction(
        "var a; (a = 1) ? a = 2 : a = 3;",
        "var a;      1  ?     2 :     3;");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}

    // This can be improved.  "a = 1" is dead but "a" is read in the following
    // expression.
    inFunction("var a; (a = 1) ? a = 2 : a = 3; return a");                                                 /***** ORIGINAL ASSERTION IS HERE *****/
  }
trace file: test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java
new test num: 9
ori test num: 3
pattern: 00000000000
patches are written to file
running tests...
used time: Finished in 197.75 seconds
Failing tests: 5
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testInExpression2$catena_0
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testInExpression2$catena_3
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue384b
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue384c
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue384d
processed: 00000000000
pattern: 00000000001
try to fix hunk: 10
delete from 378 with range 1
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000000001
pattern: 00000000010
try to fix hunk: 9
delete from 372 with range 1
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000000010
pattern: 00000000100
try to fix hunk: 8
insert before 365 with         VariableLiveness first = isVariableReadBeforeKill(
            n.getFirstChild(), variable);
        if (first != VariableLiveness.MAYBE_LIVE) {
          return first;
        }

patches are written to file
running tests...
used time: Finished in 177.35 seconds
Failing tests: 4
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testInExpression2$catena_3
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue384b
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue384c
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue384d
select new bug
Pattern: 00000000100
new failing tests:
com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testInExpression2$catena_0
Save found bug
processed: 00000000100
pattern: 00000001000
try to fix hunk: 7
insert before 364 with         if (v1 != VariableLiveness.MAYBE_LIVE) {
          return v1;
        } else if (v2 == VariableLiveness.READ) {
          return VariableLiveness.READ;
        } else {
          return VariableLiveness.MAYBE_LIVE;
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000001000
pattern: 00000010000
try to fix hunk: 6
insert before 362 with         VariableLiveness v1 = isVariableReadBeforeKill(
          n.getFirstChild(), variable);
        VariableLiveness v2 = isVariableReadBeforeKill(
          n.getLastChild(), variable);

patches are written to file
running tests...
used time: Finished in 187.16 seconds
Failing tests: 5
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testInExpression2$catena_0
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testInExpression2$catena_3
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue384b
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue384c
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue384d
No new failing tests but only 1 hunk
processed: 00000010000
pattern: 00000100000
try to fix hunk: 5
insert before 340 with     if (ControlFlowGraph.isEnteringNewCfgNode(n)) { // Not a FUNCTION
      return VariableLiveness.MAYBE_LIVE;
    }

patches are written to file
running tests...
used time: Finished in 186.48 seconds
Failing tests: 5
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testInExpression2$catena_0
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testInExpression2$catena_3
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue384b
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue384c
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue384d
No new failing tests but only 1 hunk
processed: 00000100000
pattern: 00001000000
try to fix hunk: 4
delete from 317 with range 3
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001000000
pattern: 00010000000
try to fix hunk: 3
insert before 311 with             if (state != VariableLiveness.MAYBE_LIVE) {
              break;
            }
          }
      }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010000000
pattern: 00100000000
try to fix hunk: 2
delete from 309 with range 1
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100000000
pattern: 01000000000
try to fix hunk: 1
insert before 305 with           if (n.getNext() != null && n.getNext().getNext() != null) {
            state = checkHookBranchReadBeforeKill(
                n.getNext(), n.getNext().getNext(), variable);
          }
          break;

patches are written to file
running tests...
used time: Finished in 178.89 seconds
Failing tests: 10
	com.google.javascript.jscomp.CommandLineRunnerTest::testIssue297
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testAssignAndReadInCondition
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testInExpression2$catena_0
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue297a
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue297b
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue297c
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue297d
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue384b
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue384c
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue384d
Includes new failing tests, set to unusable
processed: 01000000000
pattern: 10000000000
try to fix hunk: 0
insert before 300 with           if (n.getNext() != null) {
            state = isVariableReadBeforeKill(
                n.getNext(), variable);
            if (state == VariableLiveness.KILL) {
              state = VariableLiveness.MAYBE_LIVE;
            }
          }
          break;

patches are written to file
running tests...
used time: Finished in 177.80 seconds
Failing tests: 10
	com.google.javascript.jscomp.CommandLineRunnerTest::testIssue297
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testAssignAndReadInCondition
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testInExpression2$catena_0
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testInExpression2$catena_3
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue297a
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue297b
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue297c
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue297d
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue384c
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue384d
Includes new failing tests, set to unusable
processed: 10000000000
pattern: 00000000011
try to fix hunk: 9
delete from 372 with range 1
try to fix hunk: 10
delete from 378 with range 1
patches are written to file
running tests...
used time: Finished in 180.43 seconds
Failing tests: 5
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testInExpression2$catena_0
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testInExpression2$catena_3
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue384b
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue384c
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue384d
Can independently fix []
Could not fix independently
processed: 00000000011
pattern: 00000000101
try to fix hunk: 8
insert before 365 with         VariableLiveness first = isVariableReadBeforeKill(
            n.getFirstChild(), variable);
        if (first != VariableLiveness.MAYBE_LIVE) {
          return first;
        }

try to fix hunk: 10
delete from 378 with range 1
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000000101
pattern: 00000000110
try to fix hunk: 8
insert before 365 with         VariableLiveness first = isVariableReadBeforeKill(
            n.getFirstChild(), variable);
        if (first != VariableLiveness.MAYBE_LIVE) {
          return first;
        }

try to fix hunk: 9
delete from 372 with range 1
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000000110
pattern: 00000001001
try to fix hunk: 7
insert before 364 with         if (v1 != VariableLiveness.MAYBE_LIVE) {
          return v1;
        } else if (v2 == VariableLiveness.READ) {
          return VariableLiveness.READ;
        } else {
          return VariableLiveness.MAYBE_LIVE;
        }

try to fix hunk: 10
delete from 378 with range 1
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000001001
pattern: 00000001010
try to fix hunk: 7
insert before 364 with         if (v1 != VariableLiveness.MAYBE_LIVE) {
          return v1;
        } else if (v2 == VariableLiveness.READ) {
          return VariableLiveness.READ;
        } else {
          return VariableLiveness.MAYBE_LIVE;
        }

try to fix hunk: 9
delete from 372 with range 1
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000001010
pattern: 00000001100
try to fix hunk: 7
insert before 364 with         if (v1 != VariableLiveness.MAYBE_LIVE) {
          return v1;
        } else if (v2 == VariableLiveness.READ) {
          return VariableLiveness.READ;
        } else {
          return VariableLiveness.MAYBE_LIVE;
        }

try to fix hunk: 8
insert before 365 with         VariableLiveness first = isVariableReadBeforeKill(
            n.getFirstChild(), variable);
        if (first != VariableLiveness.MAYBE_LIVE) {
          return first;
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000001100
pattern: 00000010001
try to fix hunk: 6
insert before 362 with         VariableLiveness v1 = isVariableReadBeforeKill(
          n.getFirstChild(), variable);
        VariableLiveness v2 = isVariableReadBeforeKill(
          n.getLastChild(), variable);

try to fix hunk: 10
delete from 378 with range 1
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000010001
pattern: 00000010010
try to fix hunk: 6
insert before 362 with         VariableLiveness v1 = isVariableReadBeforeKill(
          n.getFirstChild(), variable);
        VariableLiveness v2 = isVariableReadBeforeKill(
          n.getLastChild(), variable);

try to fix hunk: 9
delete from 372 with range 1
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000010010
pattern: 00000010100
try to fix hunk: 6
insert before 362 with         VariableLiveness v1 = isVariableReadBeforeKill(
          n.getFirstChild(), variable);
        VariableLiveness v2 = isVariableReadBeforeKill(
          n.getLastChild(), variable);

try to fix hunk: 8
insert before 365 with         VariableLiveness first = isVariableReadBeforeKill(
            n.getFirstChild(), variable);
        if (first != VariableLiveness.MAYBE_LIVE) {
          return first;
        }

patches are written to file
running tests...
used time: Finished in 180.26 seconds
Failing tests: 4
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testInExpression2$catena_3
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue384b
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue384c
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue384d
Can independently fix []
Could not fix independently
processed: 00000010100
pattern: 00000011000
try to fix hunk: 6
insert before 362 with         VariableLiveness v1 = isVariableReadBeforeKill(
          n.getFirstChild(), variable);
        VariableLiveness v2 = isVariableReadBeforeKill(
          n.getLastChild(), variable);

try to fix hunk: 7
insert before 364 with         if (v1 != VariableLiveness.MAYBE_LIVE) {
          return v1;
        } else if (v2 == VariableLiveness.READ) {
          return VariableLiveness.READ;
        } else {
          return VariableLiveness.MAYBE_LIVE;
        }

patches are written to file
running tests...
used time: Finished in 170.73 seconds
Failing tests: 4
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testInExpression2$catena_3
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue384b
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue384c
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue384d
Can independently fix ['com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testInExpression2$catena_0']
select new bug
Pattern: 00000011000
new failing tests:
com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testInExpression2$catena_0
Save found bug
processed: 00000011000
pattern: 00000100001
try to fix hunk: 5
insert before 340 with     if (ControlFlowGraph.isEnteringNewCfgNode(n)) { // Not a FUNCTION
      return VariableLiveness.MAYBE_LIVE;
    }

try to fix hunk: 10
delete from 378 with range 1
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000100001
pattern: 00000100010
try to fix hunk: 5
insert before 340 with     if (ControlFlowGraph.isEnteringNewCfgNode(n)) { // Not a FUNCTION
      return VariableLiveness.MAYBE_LIVE;
    }

try to fix hunk: 9
delete from 372 with range 1
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000100010
pattern: 00000100100
try to fix hunk: 5
insert before 340 with     if (ControlFlowGraph.isEnteringNewCfgNode(n)) { // Not a FUNCTION
      return VariableLiveness.MAYBE_LIVE;
    }

try to fix hunk: 8
insert before 365 with         VariableLiveness first = isVariableReadBeforeKill(
            n.getFirstChild(), variable);
        if (first != VariableLiveness.MAYBE_LIVE) {
          return first;
        }

patches are written to file
running tests...
used time: Finished in 168.58 seconds
Failing tests: 4
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testInExpression2$catena_3
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue384b
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue384c
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue384d
Can independently fix []
Could not fix independently
processed: 00000100100
pattern: 00000101000
try to fix hunk: 5
insert before 340 with     if (ControlFlowGraph.isEnteringNewCfgNode(n)) { // Not a FUNCTION
      return VariableLiveness.MAYBE_LIVE;
    }

try to fix hunk: 7
insert before 364 with         if (v1 != VariableLiveness.MAYBE_LIVE) {
          return v1;
        } else if (v2 == VariableLiveness.READ) {
          return VariableLiveness.READ;
        } else {
          return VariableLiveness.MAYBE_LIVE;
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000101000
pattern: 00000110000
try to fix hunk: 5
insert before 340 with     if (ControlFlowGraph.isEnteringNewCfgNode(n)) { // Not a FUNCTION
      return VariableLiveness.MAYBE_LIVE;
    }

try to fix hunk: 6
insert before 362 with         VariableLiveness v1 = isVariableReadBeforeKill(
          n.getFirstChild(), variable);
        VariableLiveness v2 = isVariableReadBeforeKill(
          n.getLastChild(), variable);

patches are written to file
running tests...
used time: Finished in 177.21 seconds
Failing tests: 5
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testInExpression2$catena_0
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testInExpression2$catena_3
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue384b
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue384c
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue384d
Can independently fix []
Could not fix independently
processed: 00000110000
pattern: 00001000001
try to fix hunk: 4
delete from 317 with range 3
try to fix hunk: 10
delete from 378 with range 1
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001000001
pattern: 00001000010
try to fix hunk: 4
delete from 317 with range 3
try to fix hunk: 9
delete from 372 with range 1
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001000010
pattern: 00001000100
try to fix hunk: 4
delete from 317 with range 3
try to fix hunk: 8
insert before 365 with         VariableLiveness first = isVariableReadBeforeKill(
            n.getFirstChild(), variable);
        if (first != VariableLiveness.MAYBE_LIVE) {
          return first;
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001000100
pattern: 00001001000
try to fix hunk: 4
delete from 317 with range 3
try to fix hunk: 7
insert before 364 with         if (v1 != VariableLiveness.MAYBE_LIVE) {
          return v1;
        } else if (v2 == VariableLiveness.READ) {
          return VariableLiveness.READ;
        } else {
          return VariableLiveness.MAYBE_LIVE;
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001001000
pattern: 00001010000
try to fix hunk: 4
delete from 317 with range 3
try to fix hunk: 6
insert before 362 with         VariableLiveness v1 = isVariableReadBeforeKill(
          n.getFirstChild(), variable);
        VariableLiveness v2 = isVariableReadBeforeKill(
          n.getLastChild(), variable);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001010000
pattern: 00001100000
try to fix hunk: 4
delete from 317 with range 3
try to fix hunk: 5
insert before 340 with     if (ControlFlowGraph.isEnteringNewCfgNode(n)) { // Not a FUNCTION
      return VariableLiveness.MAYBE_LIVE;
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001100000
pattern: 00010000001
try to fix hunk: 3
insert before 311 with             if (state != VariableLiveness.MAYBE_LIVE) {
              break;
            }
          }
      }

try to fix hunk: 10
delete from 378 with range 1
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010000001
pattern: 00010000010
try to fix hunk: 3
insert before 311 with             if (state != VariableLiveness.MAYBE_LIVE) {
              break;
            }
          }
      }

try to fix hunk: 9
delete from 372 with range 1
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010000010
pattern: 00010000100
try to fix hunk: 3
insert before 311 with             if (state != VariableLiveness.MAYBE_LIVE) {
              break;
            }
          }
      }

try to fix hunk: 8
insert before 365 with         VariableLiveness first = isVariableReadBeforeKill(
            n.getFirstChild(), variable);
        if (first != VariableLiveness.MAYBE_LIVE) {
          return first;
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010000100
pattern: 00010001000
try to fix hunk: 3
insert before 311 with             if (state != VariableLiveness.MAYBE_LIVE) {
              break;
            }
          }
      }

try to fix hunk: 7
insert before 364 with         if (v1 != VariableLiveness.MAYBE_LIVE) {
          return v1;
        } else if (v2 == VariableLiveness.READ) {
          return VariableLiveness.READ;
        } else {
          return VariableLiveness.MAYBE_LIVE;
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010001000
pattern: 00010010000
try to fix hunk: 3
insert before 311 with             if (state != VariableLiveness.MAYBE_LIVE) {
              break;
            }
          }
      }

try to fix hunk: 6
insert before 362 with         VariableLiveness v1 = isVariableReadBeforeKill(
          n.getFirstChild(), variable);
        VariableLiveness v2 = isVariableReadBeforeKill(
          n.getLastChild(), variable);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010010000
pattern: 00010100000
try to fix hunk: 3
insert before 311 with             if (state != VariableLiveness.MAYBE_LIVE) {
              break;
            }
          }
      }

try to fix hunk: 5
insert before 340 with     if (ControlFlowGraph.isEnteringNewCfgNode(n)) { // Not a FUNCTION
      return VariableLiveness.MAYBE_LIVE;
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010100000
pattern: 00011000000
try to fix hunk: 3
insert before 311 with             if (state != VariableLiveness.MAYBE_LIVE) {
              break;
            }
          }
      }

try to fix hunk: 4
delete from 317 with range 3
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00011000000
pattern: 00100000001
try to fix hunk: 2
delete from 309 with range 1
try to fix hunk: 10
delete from 378 with range 1
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100000001
pattern: 00100000010
try to fix hunk: 2
delete from 309 with range 1
try to fix hunk: 9
delete from 372 with range 1
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100000010
pattern: 00100000100
try to fix hunk: 2
delete from 309 with range 1
try to fix hunk: 8
insert before 365 with         VariableLiveness first = isVariableReadBeforeKill(
            n.getFirstChild(), variable);
        if (first != VariableLiveness.MAYBE_LIVE) {
          return first;
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100000100
pattern: 00100001000
try to fix hunk: 2
delete from 309 with range 1
try to fix hunk: 7
insert before 364 with         if (v1 != VariableLiveness.MAYBE_LIVE) {
          return v1;
        } else if (v2 == VariableLiveness.READ) {
          return VariableLiveness.READ;
        } else {
          return VariableLiveness.MAYBE_LIVE;
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100001000
pattern: 00100010000
try to fix hunk: 2
delete from 309 with range 1
try to fix hunk: 6
insert before 362 with         VariableLiveness v1 = isVariableReadBeforeKill(
          n.getFirstChild(), variable);
        VariableLiveness v2 = isVariableReadBeforeKill(
          n.getLastChild(), variable);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100010000
pattern: 00100100000
try to fix hunk: 2
delete from 309 with range 1
try to fix hunk: 5
insert before 340 with     if (ControlFlowGraph.isEnteringNewCfgNode(n)) { // Not a FUNCTION
      return VariableLiveness.MAYBE_LIVE;
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100100000
pattern: 00101000000
try to fix hunk: 2
delete from 309 with range 1
try to fix hunk: 4
delete from 317 with range 3
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00101000000
pattern: 00110000000
try to fix hunk: 2
delete from 309 with range 1
try to fix hunk: 3
insert before 311 with             if (state != VariableLiveness.MAYBE_LIVE) {
              break;
            }
          }
      }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00110000000
pattern: 01000000001
try to fix hunk: 1
insert before 305 with           if (n.getNext() != null && n.getNext().getNext() != null) {
            state = checkHookBranchReadBeforeKill(
                n.getNext(), n.getNext().getNext(), variable);
          }
          break;

try to fix hunk: 10
delete from 378 with range 1
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01000000001
pattern: 01000000010
try to fix hunk: 1
insert before 305 with           if (n.getNext() != null && n.getNext().getNext() != null) {
            state = checkHookBranchReadBeforeKill(
                n.getNext(), n.getNext().getNext(), variable);
          }
          break;

try to fix hunk: 9
delete from 372 with range 1
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01000000010
pattern: 01000000100
try to fix hunk: 1
insert before 305 with           if (n.getNext() != null && n.getNext().getNext() != null) {
            state = checkHookBranchReadBeforeKill(
                n.getNext(), n.getNext().getNext(), variable);
          }
          break;

try to fix hunk: 8
insert before 365 with         VariableLiveness first = isVariableReadBeforeKill(
            n.getFirstChild(), variable);
        if (first != VariableLiveness.MAYBE_LIVE) {
          return first;
        }

patches are written to file
running tests...
used time: Finished in 173.93 seconds
Failing tests: 10
	com.google.javascript.jscomp.CommandLineRunnerTest::testIssue297
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testAssignAndReadInCondition
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testInExpression2$catena_0
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue297a
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue297b
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue297c
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue297d
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue384b
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue384c
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue384d
Includes new failing tests, set to unusable
processed: 01000000100
pattern: 01000001000
try to fix hunk: 1
insert before 305 with           if (n.getNext() != null && n.getNext().getNext() != null) {
            state = checkHookBranchReadBeforeKill(
                n.getNext(), n.getNext().getNext(), variable);
          }
          break;

try to fix hunk: 7
insert before 364 with         if (v1 != VariableLiveness.MAYBE_LIVE) {
          return v1;
        } else if (v2 == VariableLiveness.READ) {
          return VariableLiveness.READ;
        } else {
          return VariableLiveness.MAYBE_LIVE;
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01000001000
pattern: 01000010000
try to fix hunk: 1
insert before 305 with           if (n.getNext() != null && n.getNext().getNext() != null) {
            state = checkHookBranchReadBeforeKill(
                n.getNext(), n.getNext().getNext(), variable);
          }
          break;

try to fix hunk: 6
insert before 362 with         VariableLiveness v1 = isVariableReadBeforeKill(
          n.getFirstChild(), variable);
        VariableLiveness v2 = isVariableReadBeforeKill(
          n.getLastChild(), variable);

patches are written to file
running tests...
used time: Finished in 172.63 seconds
Failing tests: 10
	com.google.javascript.jscomp.CommandLineRunnerTest::testIssue297
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testAssignAndReadInCondition
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testInExpression2$catena_0
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue297a
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue297b
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue297c
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue297d
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue384b
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue384c
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue384d
Includes new failing tests, set to unusable
processed: 01000010000
pattern: 01000100000
try to fix hunk: 1
insert before 305 with           if (n.getNext() != null && n.getNext().getNext() != null) {
            state = checkHookBranchReadBeforeKill(
                n.getNext(), n.getNext().getNext(), variable);
          }
          break;

try to fix hunk: 5
insert before 340 with     if (ControlFlowGraph.isEnteringNewCfgNode(n)) { // Not a FUNCTION
      return VariableLiveness.MAYBE_LIVE;
    }

patches are written to file
running tests...
used time: Finished in 180.37 seconds
Failing tests: 10
	com.google.javascript.jscomp.CommandLineRunnerTest::testIssue297
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testAssignAndReadInCondition
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testInExpression2$catena_0
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue297a
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue297b
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue297c
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue297d
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue384b
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue384c
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue384d
Includes new failing tests, set to unusable
processed: 01000100000
pattern: 01001000000
try to fix hunk: 1
insert before 305 with           if (n.getNext() != null && n.getNext().getNext() != null) {
            state = checkHookBranchReadBeforeKill(
                n.getNext(), n.getNext().getNext(), variable);
          }
          break;

try to fix hunk: 4
delete from 317 with range 3
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01001000000
pattern: 01010000000
try to fix hunk: 1
insert before 305 with           if (n.getNext() != null && n.getNext().getNext() != null) {
            state = checkHookBranchReadBeforeKill(
                n.getNext(), n.getNext().getNext(), variable);
          }
          break;

try to fix hunk: 3
insert before 311 with             if (state != VariableLiveness.MAYBE_LIVE) {
              break;
            }
          }
      }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01010000000
pattern: 01100000000
try to fix hunk: 1
insert before 305 with           if (n.getNext() != null && n.getNext().getNext() != null) {
            state = checkHookBranchReadBeforeKill(
                n.getNext(), n.getNext().getNext(), variable);
          }
          break;

try to fix hunk: 2
delete from 309 with range 1
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01100000000
pattern: 10000000001
try to fix hunk: 0
insert before 300 with           if (n.getNext() != null) {
            state = isVariableReadBeforeKill(
                n.getNext(), variable);
            if (state == VariableLiveness.KILL) {
              state = VariableLiveness.MAYBE_LIVE;
            }
          }
          break;

try to fix hunk: 10
delete from 378 with range 1
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10000000001
pattern: 10000000010
try to fix hunk: 0
insert before 300 with           if (n.getNext() != null) {
            state = isVariableReadBeforeKill(
                n.getNext(), variable);
            if (state == VariableLiveness.KILL) {
              state = VariableLiveness.MAYBE_LIVE;
            }
          }
          break;

try to fix hunk: 9
delete from 372 with range 1
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10000000010
pattern: 10000000100
try to fix hunk: 0
insert before 300 with           if (n.getNext() != null) {
            state = isVariableReadBeforeKill(
                n.getNext(), variable);
            if (state == VariableLiveness.KILL) {
              state = VariableLiveness.MAYBE_LIVE;
            }
          }
          break;

try to fix hunk: 8
insert before 365 with         VariableLiveness first = isVariableReadBeforeKill(
            n.getFirstChild(), variable);
        if (first != VariableLiveness.MAYBE_LIVE) {
          return first;
        }

patches are written to file
running tests...
used time: Finished in 187.21 seconds
Failing tests: 10
	com.google.javascript.jscomp.CommandLineRunnerTest::testIssue297
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testAssignAndReadInCondition
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testInExpression2$catena_0
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testInExpression2$catena_3
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue297a
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue297b
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue297c
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue297d
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue384c
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue384d
Includes new failing tests, set to unusable
processed: 10000000100
pattern: 10000001000
try to fix hunk: 0
insert before 300 with           if (n.getNext() != null) {
            state = isVariableReadBeforeKill(
                n.getNext(), variable);
            if (state == VariableLiveness.KILL) {
              state = VariableLiveness.MAYBE_LIVE;
            }
          }
          break;

try to fix hunk: 7
insert before 364 with         if (v1 != VariableLiveness.MAYBE_LIVE) {
          return v1;
        } else if (v2 == VariableLiveness.READ) {
          return VariableLiveness.READ;
        } else {
          return VariableLiveness.MAYBE_LIVE;
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10000001000
pattern: 10000010000
try to fix hunk: 0
insert before 300 with           if (n.getNext() != null) {
            state = isVariableReadBeforeKill(
                n.getNext(), variable);
            if (state == VariableLiveness.KILL) {
              state = VariableLiveness.MAYBE_LIVE;
            }
          }
          break;

try to fix hunk: 6
insert before 362 with         VariableLiveness v1 = isVariableReadBeforeKill(
          n.getFirstChild(), variable);
        VariableLiveness v2 = isVariableReadBeforeKill(
          n.getLastChild(), variable);

patches are written to file
running tests...
used time: Finished in 178.60 seconds
Failing tests: 10
	com.google.javascript.jscomp.CommandLineRunnerTest::testIssue297
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testAssignAndReadInCondition
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testInExpression2$catena_0
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testInExpression2$catena_3
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue297a
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue297b
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue297c
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue297d
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue384c
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue384d
Includes new failing tests, set to unusable
processed: 10000010000
pattern: 10000100000
try to fix hunk: 0
insert before 300 with           if (n.getNext() != null) {
            state = isVariableReadBeforeKill(
                n.getNext(), variable);
            if (state == VariableLiveness.KILL) {
              state = VariableLiveness.MAYBE_LIVE;
            }
          }
          break;

try to fix hunk: 5
insert before 340 with     if (ControlFlowGraph.isEnteringNewCfgNode(n)) { // Not a FUNCTION
      return VariableLiveness.MAYBE_LIVE;
    }

patches are written to file
running tests...
used time: Finished in 168.99 seconds
Failing tests: 10
	com.google.javascript.jscomp.CommandLineRunnerTest::testIssue297
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testAssignAndReadInCondition
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testInExpression2$catena_0
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testInExpression2$catena_3
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue297a
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue297b
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue297c
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue297d
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue384c
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue384d
Includes new failing tests, set to unusable
processed: 10000100000
pattern: 10001000000
try to fix hunk: 0
insert before 300 with           if (n.getNext() != null) {
            state = isVariableReadBeforeKill(
                n.getNext(), variable);
            if (state == VariableLiveness.KILL) {
              state = VariableLiveness.MAYBE_LIVE;
            }
          }
          break;

try to fix hunk: 4
delete from 317 with range 3
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10001000000
pattern: 10010000000
try to fix hunk: 0
insert before 300 with           if (n.getNext() != null) {
            state = isVariableReadBeforeKill(
                n.getNext(), variable);
            if (state == VariableLiveness.KILL) {
              state = VariableLiveness.MAYBE_LIVE;
            }
          }
          break;

try to fix hunk: 3
insert before 311 with             if (state != VariableLiveness.MAYBE_LIVE) {
              break;
            }
          }
      }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10010000000
pattern: 10100000000
try to fix hunk: 0
insert before 300 with           if (n.getNext() != null) {
            state = isVariableReadBeforeKill(
                n.getNext(), variable);
            if (state == VariableLiveness.KILL) {
              state = VariableLiveness.MAYBE_LIVE;
            }
          }
          break;

try to fix hunk: 2
delete from 309 with range 1
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10100000000
pattern: 11000000000
try to fix hunk: 0
insert before 300 with           if (n.getNext() != null) {
            state = isVariableReadBeforeKill(
                n.getNext(), variable);
            if (state == VariableLiveness.KILL) {
              state = VariableLiveness.MAYBE_LIVE;
            }
          }
          break;

try to fix hunk: 1
insert before 305 with           if (n.getNext() != null && n.getNext().getNext() != null) {
            state = checkHookBranchReadBeforeKill(
                n.getNext(), n.getNext().getNext(), variable);
          }
          break;

patches are written to file
running tests...
used time: Finished in 178.36 seconds
Failing tests: 10
	com.google.javascript.jscomp.CommandLineRunnerTest::testIssue297
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testAssignAndReadInCondition
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testInExpression2$catena_0
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue297a
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue297b
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue297c
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue297d
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue384b
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue384c
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue384d
Includes new failing tests, set to unusable
processed: 11000000000
pattern: 00000000111
try to fix hunk: 8
insert before 365 with         VariableLiveness first = isVariableReadBeforeKill(
            n.getFirstChild(), variable);
        if (first != VariableLiveness.MAYBE_LIVE) {
          return first;
        }

try to fix hunk: 9
delete from 372 with range 1
try to fix hunk: 10
delete from 378 with range 1
patches are written to file
running tests...
used time: Finished in 179.66 seconds
Failing tests: 4
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testInExpression2$catena_3
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue384b
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue384c
	com.google.javascript.jscomp.DeadAssignmentsEliminationTest::testIssue384d
Can independently fix []
Could not fix independently
processed: 00000000111
pattern: 00000001011
try to fix hunk: 7
insert before 364 with         if (v1 != VariableLiveness.MAYBE_LIVE) {
          return v1;
        } else if (v2 == VariableLiveness.READ) {
          return VariableLiveness.READ;
        } else {
          return VariableLiveness.MAYBE_LIVE;
        }

try to fix hunk: 9
delete from 372 with range 1
try to fix hunk: 10
delete from 378 with range 1
patches are written to file
running tests...
EXCEPTION: Inside Exception generator.run() timeout
Traceback (most recent call last):
  File "run.py", line 30, in task
    generator.run()
  File "/root/workbench/CatenaD4j/scripts/generateBugs/timeout_decorator/timeout_decorator.py", line 82, in new_function
    return function(*args, **kwargs)
  File "/root/workbench/CatenaD4j/scripts/generateBugs/runner.py", line 83, in run
    self._run()
  File "/root/workbench/CatenaD4j/scripts/generateBugs/runner.py", line 109, in _run
    self.taskSingleHunk(task)
  File "/root/workbench/CatenaD4j/scripts/generateBugs/runner.py", line 138, in taskSingleHunk
    failure = util.get_failing_tests(self.path, self.build_dir)
  File "/root/workbench/CatenaD4j/scripts/generateBugs/util.py", line 46, in get_failing_tests
    result = runCommand(['defects4j', 'test', '-w', '{}'.format(path)], timeout=timeout)
  File "/root/workbench/CatenaD4j/scripts/generateBugs/util.py", line 9, in runCommand
    finished = subprocess.run(cmd, capture_output=True, cwd=cwd, timeout=timeout)
  File "/usr/lib/python3.8/subprocess.py", line 495, in run
    stdout, stderr = process.communicate(input, timeout=timeout)
  File "/usr/lib/python3.8/subprocess.py", line 1028, in communicate
    stdout, stderr = self._communicate(input, endtime, timeout)
  File "/usr/lib/python3.8/subprocess.py", line 1868, in _communicate
    ready = selector.select(timeout)
  File "/usr/lib/python3.8/selectors.py", line 415, in select
    fd_event_list = self._selector.poll(timeout)
  File "/root/workbench/CatenaD4j/scripts/generateBugs/timeout_decorator/timeout_decorator.py", line 69, in handler
    _raise_exception(timeout_exception, exception_message)
  File "/root/workbench/CatenaD4j/scripts/generateBugs/timeout_decorator/timeout_decorator.py", line 47, in _raise_exception
    raise exception(exception_message)
TimeoutError: generator.run() timeout

