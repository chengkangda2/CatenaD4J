{
    "original": {
        "num_of_hunks": 4,
        "0": {
            "file_name": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java",
            "replaced_with": "            if(numDecimals <= 7){// If number has 7 or fewer digits past the decimal point then make it a float\n",
            "patch_type": "insert",
            "next_line_no": 593
        },
        "1": {
            "file_name": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java",
            "replaced_with": "            }\n",
            "patch_type": "insert",
            "next_line_no": 597
        },
        "2": {
            "file_name": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java",
            "replaced_with": "            if(numDecimals <= 16){// If number has between 8 and 16 digits past the decimal point then make it a double\n",
            "patch_type": "insert",
            "next_line_no": 601
        },
        "3": {
            "file_name": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java",
            "replaced_with": "            }\n",
            "patch_type": "insert",
            "next_line_no": 605
        }
    },
    "method": {
        "failing_tests": [
            "org.apache.commons.lang3.math.NumberUtilsTest::testStringCreateNumberEnsureNoPrecisionLoss"
        ],
        "org.apache.commons.lang3.math.NumberUtilsTest::testStringCreateNumberEnsureNoPrecisionLoss": {
            "file_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
            "Instance": "Begin: Pos(122, 5)\nEnd: Pos(131, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Lang_3/src/test/java//org/apache/commons/lang3/math/NumberUtilsTest.java\nName: testStringCreateNumberEnsureNoPrecisionLoss\nChilds: [StatementAssertion<Begin: Pos(128, 9), End: Pos(128, 77)>,\nStatementAssertion<Begin: Pos(129, 9), End: Pos(129, 79)>,\nStatementAssertion<Begin: Pos(130, 9), End: Pos(130, 87)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Lang_3/src/test/java//org/apache/commons/lang3/math/NumberUtilsTest.java",
            "name": "testStringCreateNumberEnsureNoPrecisionLoss",
            "begin": "Pos(122, 5)",
            "end": "Pos(131, 5)",
            "begin_line_no": 122,
            "end_line_no": 131,
            "child": [
                "Begin: Pos(128, 9)\nEnd: Pos(128, 77)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(129, 9)\nEnd: Pos(129, 79)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(130, 9)\nEnd: Pos(130, 87)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    @Test\n    public void testStringCreateNumberEnsureNoPrecisionLoss$catena_0(){\n        String shouldBeFloat = \"1.23\";\n        String shouldBeDouble = \"3.40282354e+38\";\n        String shouldBeBigDecimal = \"1.797693134862315759e+308\";\n        \n        assertTrue(NumberUtils.createNumber(shouldBeFloat) instanceof Float);                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(NumberUtils.createNumber(shouldBeDouble) instanceof Double);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(NumberUtils.createNumber(shouldBeBigDecimal) instanceof BigDecimal);                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testStringCreateNumberEnsureNoPrecisionLoss$catena_1(){\n        String shouldBeFloat = \"1.23\";\n        String shouldBeDouble = \"3.40282354e+38\";\n        String shouldBeBigDecimal = \"1.797693134862315759e+308\";\n        \n        try{ assertTrue(NumberUtils.createNumber(shouldBeFloat) instanceof Float);                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(NumberUtils.createNumber(shouldBeDouble) instanceof Double);                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(NumberUtils.createNumber(shouldBeBigDecimal) instanceof BigDecimal);                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testStringCreateNumberEnsureNoPrecisionLoss$catena_2(){\n        String shouldBeFloat = \"1.23\";\n        String shouldBeDouble = \"3.40282354e+38\";\n        String shouldBeBigDecimal = \"1.797693134862315759e+308\";\n        \n        try{ assertTrue(NumberUtils.createNumber(shouldBeFloat) instanceof Float);                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(NumberUtils.createNumber(shouldBeDouble) instanceof Double);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(NumberUtils.createNumber(shouldBeBigDecimal) instanceof BigDecimal);                     /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    @Test\n    public void testStringCreateNumberEnsureNoPrecisionLoss$catena_0(){\n        String shouldBeFloat = \"1.23\";\n        String shouldBeDouble = \"3.40282354e+38\";\n        String shouldBeBigDecimal = \"1.797693134862315759e+308\";\n        \n        assertTrue(NumberUtils.createNumber(shouldBeFloat) instanceof Float);                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(NumberUtils.createNumber(shouldBeDouble) instanceof Double);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(NumberUtils.createNumber(shouldBeBigDecimal) instanceof BigDecimal);                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    @Test\n    public void testStringCreateNumberEnsureNoPrecisionLoss$catena_1(){\n        String shouldBeFloat = \"1.23\";\n        String shouldBeDouble = \"3.40282354e+38\";\n        String shouldBeBigDecimal = \"1.797693134862315759e+308\";\n        \n        try{ assertTrue(NumberUtils.createNumber(shouldBeFloat) instanceof Float);                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(NumberUtils.createNumber(shouldBeDouble) instanceof Double);                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(NumberUtils.createNumber(shouldBeBigDecimal) instanceof BigDecimal);                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "2": "    @Test\n    public void testStringCreateNumberEnsureNoPrecisionLoss$catena_2(){\n        String shouldBeFloat = \"1.23\";\n        String shouldBeDouble = \"3.40282354e+38\";\n        String shouldBeBigDecimal = \"1.797693134862315759e+308\";\n        \n        try{ assertTrue(NumberUtils.createNumber(shouldBeFloat) instanceof Float);                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(NumberUtils.createNumber(shouldBeDouble) instanceof Double);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(NumberUtils.createNumber(shouldBeBigDecimal) instanceof BigDecimal);                     /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        }
    },
    "0011": {
        "failing_tests": [
            "org.apache.commons.lang3.math.NumberUtilsTest::testStringCreateNumberEnsureNoPrecisionLoss$catena_2"
        ]
    },
    "1100": {
        "failing_tests": [
            "org.apache.commons.lang3.math.NumberUtilsTest::testStringCreateNumberEnsureNoPrecisionLoss$catena_1"
        ]
    }
}