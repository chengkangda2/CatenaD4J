{
    "original": {
        "num_of_hunks": 3,
        "0": {
            "file_name": "src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java",
            "replaced_with": "        double sumExpected = 0d;\n        double sumObserved = 0d;\n        for (int i = 0; i < observed.length; i++) {\n            sumExpected += expected[i];\n            sumObserved += observed[i];\n        }\n        double ratio = 1.0d;\n        boolean rescale = false;\n        if (Math.abs(sumExpected - sumObserved) > 10E-6) {\n            ratio = sumObserved / sumExpected;\n            rescale = true;\n        }\n",
            "patch_type": "insert",
            "next_line_no": 74
        },
        "1": {
            "file_name": "src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java",
            "replaced_with": "            if (rescale) {\n                dev = ((double) observed[i] - ratio * expected[i]);\n                sumSq += dev * dev / (ratio * expected[i]);\n            } else {\n",
            "patch_type": "insert",
            "next_line_no": 77
        },
        "2": {
            "file_name": "src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java",
            "replaced_with": "            }\n",
            "patch_type": "insert",
            "next_line_no": 79
        }
    },
    "method": {
        "failing_tests": [
            "org.apache.commons.math.stat.inference.ChiSquareFactoryTest::testChiSquareLargeTestStatistic",
            "org.apache.commons.math.stat.inference.ChiSquareFactoryTest::testChiSquare",
            "org.apache.commons.math.stat.inference.ChiSquareTestTest::testChiSquareLargeTestStatistic",
            "org.apache.commons.math.stat.inference.ChiSquareTestTest::testChiSquare",
            "org.apache.commons.math.stat.inference.TestUtilsTest::testChiSquareLargeTestStatistic",
            "org.apache.commons.math.stat.inference.TestUtilsTest::testChiSquare"
        ],
        "org.apache.commons.math.stat.inference.ChiSquareTestTest::testChiSquareLargeTestStatistic": {
            "file_path": "src/test/org/apache/commons/math/stat/inference/ChiSquareTestTest.java",
            "Instance": "Begin: Pos(170, 12)\nEnd: Pos(185, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Math_102/src/test//org/apache/commons/math/stat/inference/ChiSquareTestTest.java\nName: testChiSquareLargeTestStatistic\nChilds: [StatementAssertion<Begin: Pos(182, 9), End: Pos(182, 59)>,\nStatementAssertion<Begin: Pos(183, 9), End: Pos(184, 77)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Math_102/src/test//org/apache/commons/math/stat/inference/ChiSquareTestTest.java",
            "name": "testChiSquareLargeTestStatistic",
            "begin": "Pos(170, 12)",
            "end": "Pos(185, 5)",
            "begin_line_no": 170,
            "end_line_no": 185,
            "child": [
                "Begin: Pos(182, 9)\nEnd: Pos(182, 59)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(183, 9)\nEnd: Pos(184, 77)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testChiSquareLargeTestStatistic$catena_0() throws Exception {\n        double[] exp = new double[] {\n            3389119.5, 649136.6, 285745.4, 25357364.76, 11291189.78, 543628.0, \n            232921.0, 437665.75\n        };\n\n        long[] obs = new long[] {\n            2372383, 584222, 257170, 17750155, 7903832, 489265, 209628, 393899\n        };\n        org.apache.commons.math.stat.inference.ChiSquareTestImpl csti =\n            new org.apache.commons.math.stat.inference.ChiSquareTestImpl(); \n        double cst = csti.chiSquareTest(exp, obs); \n        assertEquals(\"chi-square p-value\", 0.0, cst, 1E-3);                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals( \"chi-square test statistic\", \n                114875.90421929007, testStatistic.chiSquare(exp, obs), 1E-9);                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testChiSquareLargeTestStatistic$catena_1() throws Exception {\n        double[] exp = new double[] {\n            3389119.5, 649136.6, 285745.4, 25357364.76, 11291189.78, 543628.0, \n            232921.0, 437665.75\n        };\n\n        long[] obs = new long[] {\n            2372383, 584222, 257170, 17750155, 7903832, 489265, 209628, 393899\n        };\n        org.apache.commons.math.stat.inference.ChiSquareTestImpl csti =\n            new org.apache.commons.math.stat.inference.ChiSquareTestImpl(); \n        double cst = csti.chiSquareTest(exp, obs); \n        try{ assertEquals(\"chi-square p-value\", 0.0, cst, 1E-3);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals( \"chi-square test statistic\", \n                114875.90421929007, testStatistic.chiSquare(exp, obs), 1E-9);                               /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void testChiSquareLargeTestStatistic$catena_0() throws Exception {\n        double[] exp = new double[] {\n            3389119.5, 649136.6, 285745.4, 25357364.76, 11291189.78, 543628.0, \n            232921.0, 437665.75\n        };\n\n        long[] obs = new long[] {\n            2372383, 584222, 257170, 17750155, 7903832, 489265, 209628, 393899\n        };\n        org.apache.commons.math.stat.inference.ChiSquareTestImpl csti =\n            new org.apache.commons.math.stat.inference.ChiSquareTestImpl(); \n        double cst = csti.chiSquareTest(exp, obs); \n        assertEquals(\"chi-square p-value\", 0.0, cst, 1E-3);                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals( \"chi-square test statistic\", \n                114875.90421929007, testStatistic.chiSquare(exp, obs), 1E-9);                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void testChiSquareLargeTestStatistic$catena_1() throws Exception {\n        double[] exp = new double[] {\n            3389119.5, 649136.6, 285745.4, 25357364.76, 11291189.78, 543628.0, \n            232921.0, 437665.75\n        };\n\n        long[] obs = new long[] {\n            2372383, 584222, 257170, 17750155, 7903832, 489265, 209628, 393899\n        };\n        org.apache.commons.math.stat.inference.ChiSquareTestImpl csti =\n            new org.apache.commons.math.stat.inference.ChiSquareTestImpl(); \n        double cst = csti.chiSquareTest(exp, obs); \n        try{ assertEquals(\"chi-square p-value\", 0.0, cst, 1E-3);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals( \"chi-square test statistic\", \n                114875.90421929007, testStatistic.chiSquare(exp, obs), 1E-9);                               /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.apache.commons.math.stat.inference.ChiSquareTestTest::testChiSquare": {
            "file_path": "src/test/org/apache/commons/math/stat/inference/ChiSquareTestTest.java",
            "check": [
                "Use pattern matching: testStatistic.chiSquareTest",
                "StatementExpression is in safe: <testStatistic.chiSquareTest>",
                "Use pattern matching: testStatistic.chiSquareTest",
                "StatementExpression is in safe: <testStatistic.chiSquareTest>",
                "Use pattern matching: testStatistic.chiSquareTest",
                "StatementExpression is in safe: <testStatistic.chiSquareTest>"
            ],
            "Instance": "Begin: Pos(46, 12)\nEnd: Pos(110, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Math_102/src/test//org/apache/commons/math/stat/inference/ChiSquareTestTest.java\nName: testChiSquare\nChilds: [StatementAssertion<Begin: Pos(55, 9), End: Pos(55, 104)>,\nStatementAssertion<Begin: Pos(56, 9), End: Pos(56, 115)>,\nStatementAssertion<Begin: Pos(60, 9), End: Pos(60, 124)>,\nStatementAssertion<Begin: Pos(61, 9), End: Pos(61, 121)>,\nStatementAssertion<Begin: Pos(62, 9), End: Pos(62, 102)>,\nStatementAssertion<Begin: Pos(63, 9), End: Pos(63, 103)>,\nStatementAssertion<Begin: Pos(67, 13), End: Pos(67, 74)>,\nStatementAssertion<Begin: Pos(76, 13), End: Pos(76, 75)>,\nStatementAssertion<Begin: Pos(86, 13), End: Pos(86, 85)>,\nStatementAssertion<Begin: Pos(95, 13), End: Pos(95, 74)>,\nStatementAssertion<Begin: Pos(105, 13), End: Pos(105, 74)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Math_102/src/test//org/apache/commons/math/stat/inference/ChiSquareTestTest.java",
            "name": "testChiSquare",
            "begin": "Pos(46, 12)",
            "end": "Pos(110, 5)",
            "begin_line_no": 46,
            "end_line_no": 110,
            "child": [
                "Begin: Pos(55, 9)\nEnd: Pos(55, 104)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(56, 9)\nEnd: Pos(56, 115)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(60, 9)\nEnd: Pos(60, 124)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(61, 9)\nEnd: Pos(61, 121)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(62, 9)\nEnd: Pos(62, 102)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(63, 9)\nEnd: Pos(63, 103)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(67, 13)\nEnd: Pos(67, 74)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(76, 13)\nEnd: Pos(76, 75)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(86, 13)\nEnd: Pos(86, 85)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(95, 13)\nEnd: Pos(95, 74)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(105, 13)\nEnd: Pos(105, 74)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testChiSquare$catena_0() throws Exception {\n \n        // Target values computed using R version 1.8.1 \n        // Some assembly required ;-)  \n        //      Use sum((obs - exp)^2/exp) for the chi-square statistic and\n        //      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n        \n        long[] observed = {10, 9, 11};\n        double[] expected = {10, 10, 10};\n        assertEquals(\"chi-square statistic\", 0.2,  testStatistic.chiSquare(expected, observed), 10E-12);                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"chi-square p-value\", 0.904837418036, testStatistic.chiSquareTest(expected, observed), 1E-10);             }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        long[] observed1 = { 500, 623, 72, 70, 31 };\n        double[] expected1 = { 485, 541, 82, 61, 37 };\n        try{ assertEquals( \"chi-square test statistic\", 9.023307936427388, testStatistic.chiSquare(expected1, observed1), 1E-10);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.06051952647453607, testStatistic.chiSquareTest(expected1, observed1), 1E-9);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test reject\", testStatistic.chiSquareTest(expected1, observed1, 0.08));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test accept\", !testStatistic.chiSquareTest(expected1, observed1, 0.05));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            testStatistic.chiSquareTest(expected1, observed1, 95);\n            try{ fail(\"alpha out of range, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }  \n        \n        long[] tooShortObs = { 0 };\n        double[] tooShortEx = { 1 };\n        try {\n            testStatistic.chiSquare(tooShortEx, tooShortObs);\n            try{ fail(\"arguments too short, IllegalArgumentException expected\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        // unmatched arrays\n        long[] unMatchedObs = { 0, 1, 2, 3 };\n        double[] unMatchedEx = { 1, 1, 2 };\n        try {\n            testStatistic.chiSquare(unMatchedEx, unMatchedObs);\n            try{ fail(\"arrays have different lengths, IllegalArgumentException expected\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        \n        // 0 expected count\n        expected[0] = 0;\n        try {\n            testStatistic.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n        // negative observed count\n        expected[0] = 1;\n        observed[0] = -1;\n        try {\n            testStatistic.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n    }",
                "    public void testChiSquare$catena_1() throws Exception {\n \n        // Target values computed using R version 1.8.1 \n        // Some assembly required ;-)  \n        //      Use sum((obs - exp)^2/exp) for the chi-square statistic and\n        //      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n        \n        long[] observed = {10, 9, 11};\n        double[] expected = {10, 10, 10};\n        try{ assertEquals(\"chi-square statistic\", 0.2,  testStatistic.chiSquare(expected, observed), 10E-12);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"chi-square p-value\", 0.904837418036, testStatistic.chiSquareTest(expected, observed), 1E-10);                  /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        long[] observed1 = { 500, 623, 72, 70, 31 };\n        double[] expected1 = { 485, 541, 82, 61, 37 };\n        try{ assertEquals( \"chi-square test statistic\", 9.023307936427388, testStatistic.chiSquare(expected1, observed1), 1E-10);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.06051952647453607, testStatistic.chiSquareTest(expected1, observed1), 1E-9);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test reject\", testStatistic.chiSquareTest(expected1, observed1, 0.08));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test accept\", !testStatistic.chiSquareTest(expected1, observed1, 0.05));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            testStatistic.chiSquareTest(expected1, observed1, 95);\n            try{ fail(\"alpha out of range, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }  \n        \n        long[] tooShortObs = { 0 };\n        double[] tooShortEx = { 1 };\n        try {\n            testStatistic.chiSquare(tooShortEx, tooShortObs);\n            try{ fail(\"arguments too short, IllegalArgumentException expected\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        // unmatched arrays\n        long[] unMatchedObs = { 0, 1, 2, 3 };\n        double[] unMatchedEx = { 1, 1, 2 };\n        try {\n            testStatistic.chiSquare(unMatchedEx, unMatchedObs);\n            try{ fail(\"arrays have different lengths, IllegalArgumentException expected\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        \n        // 0 expected count\n        expected[0] = 0;\n        try {\n            testStatistic.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n        // negative observed count\n        expected[0] = 1;\n        observed[0] = -1;\n        try {\n            testStatistic.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n    }",
                "    public void testChiSquare$catena_2() throws Exception {\n \n        // Target values computed using R version 1.8.1 \n        // Some assembly required ;-)  \n        //      Use sum((obs - exp)^2/exp) for the chi-square statistic and\n        //      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n        \n        long[] observed = {10, 9, 11};\n        double[] expected = {10, 10, 10};\n        try{ assertEquals(\"chi-square statistic\", 0.2,  testStatistic.chiSquare(expected, observed), 10E-12);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.904837418036, testStatistic.chiSquareTest(expected, observed), 1E-10);             }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        long[] observed1 = { 500, 623, 72, 70, 31 };\n        double[] expected1 = { 485, 541, 82, 61, 37 };\n        assertEquals( \"chi-square test statistic\", 9.023307936427388, testStatistic.chiSquare(expected1, observed1), 1E-10);         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"chi-square p-value\", 0.06051952647453607, testStatistic.chiSquareTest(expected1, observed1), 1E-9);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test reject\", testStatistic.chiSquareTest(expected1, observed1, 0.08));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test accept\", !testStatistic.chiSquareTest(expected1, observed1, 0.05));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            testStatistic.chiSquareTest(expected1, observed1, 95);\n            try{ fail(\"alpha out of range, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }  \n        \n        long[] tooShortObs = { 0 };\n        double[] tooShortEx = { 1 };\n        try {\n            testStatistic.chiSquare(tooShortEx, tooShortObs);\n            try{ fail(\"arguments too short, IllegalArgumentException expected\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        // unmatched arrays\n        long[] unMatchedObs = { 0, 1, 2, 3 };\n        double[] unMatchedEx = { 1, 1, 2 };\n        try {\n            testStatistic.chiSquare(unMatchedEx, unMatchedObs);\n            try{ fail(\"arrays have different lengths, IllegalArgumentException expected\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        \n        // 0 expected count\n        expected[0] = 0;\n        try {\n            testStatistic.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n        // negative observed count\n        expected[0] = 1;\n        observed[0] = -1;\n        try {\n            testStatistic.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n    }",
                "    public void testChiSquare$catena_3() throws Exception {\n \n        // Target values computed using R version 1.8.1 \n        // Some assembly required ;-)  \n        //      Use sum((obs - exp)^2/exp) for the chi-square statistic and\n        //      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n        \n        long[] observed = {10, 9, 11};\n        double[] expected = {10, 10, 10};\n        try{ assertEquals(\"chi-square statistic\", 0.2,  testStatistic.chiSquare(expected, observed), 10E-12);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.904837418036, testStatistic.chiSquareTest(expected, observed), 1E-10);             }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        long[] observed1 = { 500, 623, 72, 70, 31 };\n        double[] expected1 = { 485, 541, 82, 61, 37 };\n        try{ assertEquals( \"chi-square test statistic\", 9.023307936427388, testStatistic.chiSquare(expected1, observed1), 1E-10);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"chi-square p-value\", 0.06051952647453607, testStatistic.chiSquareTest(expected1, observed1), 1E-9);            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(\"chi-square test reject\", testStatistic.chiSquareTest(expected1, observed1, 0.08));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test accept\", !testStatistic.chiSquareTest(expected1, observed1, 0.05));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            testStatistic.chiSquareTest(expected1, observed1, 95);\n            try{ fail(\"alpha out of range, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }  \n        \n        long[] tooShortObs = { 0 };\n        double[] tooShortEx = { 1 };\n        try {\n            testStatistic.chiSquare(tooShortEx, tooShortObs);\n            try{ fail(\"arguments too short, IllegalArgumentException expected\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        // unmatched arrays\n        long[] unMatchedObs = { 0, 1, 2, 3 };\n        double[] unMatchedEx = { 1, 1, 2 };\n        try {\n            testStatistic.chiSquare(unMatchedEx, unMatchedObs);\n            try{ fail(\"arrays have different lengths, IllegalArgumentException expected\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        \n        // 0 expected count\n        expected[0] = 0;\n        try {\n            testStatistic.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n        // negative observed count\n        expected[0] = 1;\n        observed[0] = -1;\n        try {\n            testStatistic.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n    }",
                "    public void testChiSquare$catena_4() throws Exception {\n \n        // Target values computed using R version 1.8.1 \n        // Some assembly required ;-)  \n        //      Use sum((obs - exp)^2/exp) for the chi-square statistic and\n        //      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n        \n        long[] observed = {10, 9, 11};\n        double[] expected = {10, 10, 10};\n        try{ assertEquals(\"chi-square statistic\", 0.2,  testStatistic.chiSquare(expected, observed), 10E-12);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.904837418036, testStatistic.chiSquareTest(expected, observed), 1E-10);             }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        long[] observed1 = { 500, 623, 72, 70, 31 };\n        double[] expected1 = { 485, 541, 82, 61, 37 };\n        try{ assertEquals( \"chi-square test statistic\", 9.023307936427388, testStatistic.chiSquare(expected1, observed1), 1E-10);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.06051952647453607, testStatistic.chiSquareTest(expected1, observed1), 1E-9);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(\"chi-square test reject\", testStatistic.chiSquareTest(expected1, observed1, 0.08));                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(\"chi-square test accept\", !testStatistic.chiSquareTest(expected1, observed1, 0.05));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            testStatistic.chiSquareTest(expected1, observed1, 95);\n            try{ fail(\"alpha out of range, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }  \n        \n        long[] tooShortObs = { 0 };\n        double[] tooShortEx = { 1 };\n        try {\n            testStatistic.chiSquare(tooShortEx, tooShortObs);\n            try{ fail(\"arguments too short, IllegalArgumentException expected\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        // unmatched arrays\n        long[] unMatchedObs = { 0, 1, 2, 3 };\n        double[] unMatchedEx = { 1, 1, 2 };\n        try {\n            testStatistic.chiSquare(unMatchedEx, unMatchedObs);\n            try{ fail(\"arrays have different lengths, IllegalArgumentException expected\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        \n        // 0 expected count\n        expected[0] = 0;\n        try {\n            testStatistic.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n        // negative observed count\n        expected[0] = 1;\n        observed[0] = -1;\n        try {\n            testStatistic.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n    }",
                "    public void testChiSquare$catena_5() throws Exception {\n \n        // Target values computed using R version 1.8.1 \n        // Some assembly required ;-)  \n        //      Use sum((obs - exp)^2/exp) for the chi-square statistic and\n        //      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n        \n        long[] observed = {10, 9, 11};\n        double[] expected = {10, 10, 10};\n        try{ assertEquals(\"chi-square statistic\", 0.2,  testStatistic.chiSquare(expected, observed), 10E-12);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.904837418036, testStatistic.chiSquareTest(expected, observed), 1E-10);             }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        long[] observed1 = { 500, 623, 72, 70, 31 };\n        double[] expected1 = { 485, 541, 82, 61, 37 };\n        try{ assertEquals( \"chi-square test statistic\", 9.023307936427388, testStatistic.chiSquare(expected1, observed1), 1E-10);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.06051952647453607, testStatistic.chiSquareTest(expected1, observed1), 1E-9);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test reject\", testStatistic.chiSquareTest(expected1, observed1, 0.08));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(\"chi-square test accept\", !testStatistic.chiSquareTest(expected1, observed1, 0.05));                              /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try {\n            testStatistic.chiSquareTest(expected1, observed1, 95);\n            try{ fail(\"alpha out of range, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }  \n        \n        long[] tooShortObs = { 0 };\n        double[] tooShortEx = { 1 };\n        try {\n            testStatistic.chiSquare(tooShortEx, tooShortObs);\n            try{ fail(\"arguments too short, IllegalArgumentException expected\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        // unmatched arrays\n        long[] unMatchedObs = { 0, 1, 2, 3 };\n        double[] unMatchedEx = { 1, 1, 2 };\n        try {\n            testStatistic.chiSquare(unMatchedEx, unMatchedObs);\n            try{ fail(\"arrays have different lengths, IllegalArgumentException expected\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        \n        // 0 expected count\n        expected[0] = 0;\n        try {\n            testStatistic.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n        // negative observed count\n        expected[0] = 1;\n        observed[0] = -1;\n        try {\n            testStatistic.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n    }",
                "    public void testChiSquare$catena_6() throws Exception {\n \n        // Target values computed using R version 1.8.1 \n        // Some assembly required ;-)  \n        //      Use sum((obs - exp)^2/exp) for the chi-square statistic and\n        //      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n        \n        long[] observed = {10, 9, 11};\n        double[] expected = {10, 10, 10};\n        try{ assertEquals(\"chi-square statistic\", 0.2,  testStatistic.chiSquare(expected, observed), 10E-12);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.904837418036, testStatistic.chiSquareTest(expected, observed), 1E-10);             }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        long[] observed1 = { 500, 623, 72, 70, 31 };\n        double[] expected1 = { 485, 541, 82, 61, 37 };\n        try{ assertEquals( \"chi-square test statistic\", 9.023307936427388, testStatistic.chiSquare(expected1, observed1), 1E-10);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.06051952647453607, testStatistic.chiSquareTest(expected1, observed1), 1E-9);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test reject\", testStatistic.chiSquareTest(expected1, observed1, 0.08));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test accept\", !testStatistic.chiSquareTest(expected1, observed1, 0.05));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            testStatistic.chiSquareTest(expected1, observed1, 95);\n            fail(\"alpha out of range, IllegalArgumentException expected\");                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }  \n        \n        long[] tooShortObs = { 0 };\n        double[] tooShortEx = { 1 };\n        try {\n            testStatistic.chiSquare(tooShortEx, tooShortObs);\n            try{ fail(\"arguments too short, IllegalArgumentException expected\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        // unmatched arrays\n        long[] unMatchedObs = { 0, 1, 2, 3 };\n        double[] unMatchedEx = { 1, 1, 2 };\n        try {\n            testStatistic.chiSquare(unMatchedEx, unMatchedObs);\n            try{ fail(\"arrays have different lengths, IllegalArgumentException expected\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        \n        // 0 expected count\n        expected[0] = 0;\n        try {\n            testStatistic.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n        // negative observed count\n        expected[0] = 1;\n        observed[0] = -1;\n        try {\n            testStatistic.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n    }",
                "    public void testChiSquare$catena_7() throws Exception {\n \n        // Target values computed using R version 1.8.1 \n        // Some assembly required ;-)  \n        //      Use sum((obs - exp)^2/exp) for the chi-square statistic and\n        //      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n        \n        long[] observed = {10, 9, 11};\n        double[] expected = {10, 10, 10};\n        try{ assertEquals(\"chi-square statistic\", 0.2,  testStatistic.chiSquare(expected, observed), 10E-12);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.904837418036, testStatistic.chiSquareTest(expected, observed), 1E-10);             }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        long[] observed1 = { 500, 623, 72, 70, 31 };\n        double[] expected1 = { 485, 541, 82, 61, 37 };\n        try{ assertEquals( \"chi-square test statistic\", 9.023307936427388, testStatistic.chiSquare(expected1, observed1), 1E-10);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.06051952647453607, testStatistic.chiSquareTest(expected1, observed1), 1E-9);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test reject\", testStatistic.chiSquareTest(expected1, observed1, 0.08));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test accept\", !testStatistic.chiSquareTest(expected1, observed1, 0.05));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            testStatistic.chiSquareTest(expected1, observed1, 95);\n            try{ fail(\"alpha out of range, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }  \n        \n        long[] tooShortObs = { 0 };\n        double[] tooShortEx = { 1 };\n        try {\n            testStatistic.chiSquare(tooShortEx, tooShortObs);\n            fail(\"arguments too short, IllegalArgumentException expected\");                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        // unmatched arrays\n        long[] unMatchedObs = { 0, 1, 2, 3 };\n        double[] unMatchedEx = { 1, 1, 2 };\n        try {\n            testStatistic.chiSquare(unMatchedEx, unMatchedObs);\n            try{ fail(\"arrays have different lengths, IllegalArgumentException expected\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        \n        // 0 expected count\n        expected[0] = 0;\n        try {\n            testStatistic.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n        // negative observed count\n        expected[0] = 1;\n        observed[0] = -1;\n        try {\n            testStatistic.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n    }",
                "    public void testChiSquare$catena_8() throws Exception {\n \n        // Target values computed using R version 1.8.1 \n        // Some assembly required ;-)  \n        //      Use sum((obs - exp)^2/exp) for the chi-square statistic and\n        //      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n        \n        long[] observed = {10, 9, 11};\n        double[] expected = {10, 10, 10};\n        try{ assertEquals(\"chi-square statistic\", 0.2,  testStatistic.chiSquare(expected, observed), 10E-12);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.904837418036, testStatistic.chiSquareTest(expected, observed), 1E-10);             }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        long[] observed1 = { 500, 623, 72, 70, 31 };\n        double[] expected1 = { 485, 541, 82, 61, 37 };\n        try{ assertEquals( \"chi-square test statistic\", 9.023307936427388, testStatistic.chiSquare(expected1, observed1), 1E-10);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.06051952647453607, testStatistic.chiSquareTest(expected1, observed1), 1E-9);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test reject\", testStatistic.chiSquareTest(expected1, observed1, 0.08));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test accept\", !testStatistic.chiSquareTest(expected1, observed1, 0.05));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            testStatistic.chiSquareTest(expected1, observed1, 95);\n            try{ fail(\"alpha out of range, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }  \n        \n        long[] tooShortObs = { 0 };\n        double[] tooShortEx = { 1 };\n        try {\n            testStatistic.chiSquare(tooShortEx, tooShortObs);\n            try{ fail(\"arguments too short, IllegalArgumentException expected\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        // unmatched arrays\n        long[] unMatchedObs = { 0, 1, 2, 3 };\n        double[] unMatchedEx = { 1, 1, 2 };\n        try {\n            testStatistic.chiSquare(unMatchedEx, unMatchedObs);\n            fail(\"arrays have different lengths, IllegalArgumentException expected\");                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        \n        // 0 expected count\n        expected[0] = 0;\n        try {\n            testStatistic.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n        // negative observed count\n        expected[0] = 1;\n        observed[0] = -1;\n        try {\n            testStatistic.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n    }",
                "    public void testChiSquare$catena_9() throws Exception {\n \n        // Target values computed using R version 1.8.1 \n        // Some assembly required ;-)  \n        //      Use sum((obs - exp)^2/exp) for the chi-square statistic and\n        //      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n        \n        long[] observed = {10, 9, 11};\n        double[] expected = {10, 10, 10};\n        try{ assertEquals(\"chi-square statistic\", 0.2,  testStatistic.chiSquare(expected, observed), 10E-12);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.904837418036, testStatistic.chiSquareTest(expected, observed), 1E-10);             }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        long[] observed1 = { 500, 623, 72, 70, 31 };\n        double[] expected1 = { 485, 541, 82, 61, 37 };\n        try{ assertEquals( \"chi-square test statistic\", 9.023307936427388, testStatistic.chiSquare(expected1, observed1), 1E-10);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.06051952647453607, testStatistic.chiSquareTest(expected1, observed1), 1E-9);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test reject\", testStatistic.chiSquareTest(expected1, observed1, 0.08));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test accept\", !testStatistic.chiSquareTest(expected1, observed1, 0.05));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            testStatistic.chiSquareTest(expected1, observed1, 95);\n            try{ fail(\"alpha out of range, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }  \n        \n        long[] tooShortObs = { 0 };\n        double[] tooShortEx = { 1 };\n        try {\n            testStatistic.chiSquare(tooShortEx, tooShortObs);\n            try{ fail(\"arguments too short, IllegalArgumentException expected\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        // unmatched arrays\n        long[] unMatchedObs = { 0, 1, 2, 3 };\n        double[] unMatchedEx = { 1, 1, 2 };\n        try {\n            testStatistic.chiSquare(unMatchedEx, unMatchedObs);\n            try{ fail(\"arrays have different lengths, IllegalArgumentException expected\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        \n        // 0 expected count\n        expected[0] = 0;\n        try {\n            testStatistic.chiSquareTest(expected, observed, .01);\n            fail(\"bad expected count, IllegalArgumentException expected\");                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n        // negative observed count\n        expected[0] = 1;\n        observed[0] = -1;\n        try {\n            testStatistic.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n    }",
                "    public void testChiSquare$catena_10() throws Exception {\n \n        // Target values computed using R version 1.8.1 \n        // Some assembly required ;-)  \n        //      Use sum((obs - exp)^2/exp) for the chi-square statistic and\n        //      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n        \n        long[] observed = {10, 9, 11};\n        double[] expected = {10, 10, 10};\n        try{ assertEquals(\"chi-square statistic\", 0.2,  testStatistic.chiSquare(expected, observed), 10E-12);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.904837418036, testStatistic.chiSquareTest(expected, observed), 1E-10);             }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        long[] observed1 = { 500, 623, 72, 70, 31 };\n        double[] expected1 = { 485, 541, 82, 61, 37 };\n        try{ assertEquals( \"chi-square test statistic\", 9.023307936427388, testStatistic.chiSquare(expected1, observed1), 1E-10);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.06051952647453607, testStatistic.chiSquareTest(expected1, observed1), 1E-9);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test reject\", testStatistic.chiSquareTest(expected1, observed1, 0.08));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test accept\", !testStatistic.chiSquareTest(expected1, observed1, 0.05));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            testStatistic.chiSquareTest(expected1, observed1, 95);\n            try{ fail(\"alpha out of range, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }  \n        \n        long[] tooShortObs = { 0 };\n        double[] tooShortEx = { 1 };\n        try {\n            testStatistic.chiSquare(tooShortEx, tooShortObs);\n            try{ fail(\"arguments too short, IllegalArgumentException expected\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        // unmatched arrays\n        long[] unMatchedObs = { 0, 1, 2, 3 };\n        double[] unMatchedEx = { 1, 1, 2 };\n        try {\n            testStatistic.chiSquare(unMatchedEx, unMatchedObs);\n            try{ fail(\"arrays have different lengths, IllegalArgumentException expected\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        \n        // 0 expected count\n        expected[0] = 0;\n        try {\n            testStatistic.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n        // negative observed count\n        expected[0] = 1;\n        observed[0] = -1;\n        try {\n            testStatistic.chiSquareTest(expected, observed, .01);\n            fail(\"bad expected count, IllegalArgumentException expected\");                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n    }"
            ],
            "func": {
                "0": "    public void testChiSquare$catena_0() throws Exception {\n \n        // Target values computed using R version 1.8.1 \n        // Some assembly required ;-)  \n        //      Use sum((obs - exp)^2/exp) for the chi-square statistic and\n        //      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n        \n        long[] observed = {10, 9, 11};\n        double[] expected = {10, 10, 10};\n        assertEquals(\"chi-square statistic\", 0.2,  testStatistic.chiSquare(expected, observed), 10E-12);                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"chi-square p-value\", 0.904837418036, testStatistic.chiSquareTest(expected, observed), 1E-10);             }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        long[] observed1 = { 500, 623, 72, 70, 31 };\n        double[] expected1 = { 485, 541, 82, 61, 37 };\n        try{ assertEquals( \"chi-square test statistic\", 9.023307936427388, testStatistic.chiSquare(expected1, observed1), 1E-10);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.06051952647453607, testStatistic.chiSquareTest(expected1, observed1), 1E-9);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test reject\", testStatistic.chiSquareTest(expected1, observed1, 0.08));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test accept\", !testStatistic.chiSquareTest(expected1, observed1, 0.05));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            testStatistic.chiSquareTest(expected1, observed1, 95);\n            try{ fail(\"alpha out of range, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }  \n        \n        long[] tooShortObs = { 0 };\n        double[] tooShortEx = { 1 };\n        try {\n            testStatistic.chiSquare(tooShortEx, tooShortObs);\n            try{ fail(\"arguments too short, IllegalArgumentException expected\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        // unmatched arrays\n        long[] unMatchedObs = { 0, 1, 2, 3 };\n        double[] unMatchedEx = { 1, 1, 2 };\n        try {\n            testStatistic.chiSquare(unMatchedEx, unMatchedObs);\n            try{ fail(\"arrays have different lengths, IllegalArgumentException expected\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        \n        // 0 expected count\n        expected[0] = 0;\n        try {\n            testStatistic.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n        // negative observed count\n        expected[0] = 1;\n        observed[0] = -1;\n        try {\n            testStatistic.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n    }",
                "1": "    public void testChiSquare$catena_1() throws Exception {\n \n        // Target values computed using R version 1.8.1 \n        // Some assembly required ;-)  \n        //      Use sum((obs - exp)^2/exp) for the chi-square statistic and\n        //      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n        \n        long[] observed = {10, 9, 11};\n        double[] expected = {10, 10, 10};\n        try{ assertEquals(\"chi-square statistic\", 0.2,  testStatistic.chiSquare(expected, observed), 10E-12);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"chi-square p-value\", 0.904837418036, testStatistic.chiSquareTest(expected, observed), 1E-10);                  /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        long[] observed1 = { 500, 623, 72, 70, 31 };\n        double[] expected1 = { 485, 541, 82, 61, 37 };\n        try{ assertEquals( \"chi-square test statistic\", 9.023307936427388, testStatistic.chiSquare(expected1, observed1), 1E-10);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.06051952647453607, testStatistic.chiSquareTest(expected1, observed1), 1E-9);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test reject\", testStatistic.chiSquareTest(expected1, observed1, 0.08));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test accept\", !testStatistic.chiSquareTest(expected1, observed1, 0.05));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            testStatistic.chiSquareTest(expected1, observed1, 95);\n            try{ fail(\"alpha out of range, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }  \n        \n        long[] tooShortObs = { 0 };\n        double[] tooShortEx = { 1 };\n        try {\n            testStatistic.chiSquare(tooShortEx, tooShortObs);\n            try{ fail(\"arguments too short, IllegalArgumentException expected\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        // unmatched arrays\n        long[] unMatchedObs = { 0, 1, 2, 3 };\n        double[] unMatchedEx = { 1, 1, 2 };\n        try {\n            testStatistic.chiSquare(unMatchedEx, unMatchedObs);\n            try{ fail(\"arrays have different lengths, IllegalArgumentException expected\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        \n        // 0 expected count\n        expected[0] = 0;\n        try {\n            testStatistic.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n        // negative observed count\n        expected[0] = 1;\n        observed[0] = -1;\n        try {\n            testStatistic.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n    }",
                "2": "    public void testChiSquare$catena_2() throws Exception {\n \n        // Target values computed using R version 1.8.1 \n        // Some assembly required ;-)  \n        //      Use sum((obs - exp)^2/exp) for the chi-square statistic and\n        //      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n        \n        long[] observed = {10, 9, 11};\n        double[] expected = {10, 10, 10};\n        try{ assertEquals(\"chi-square statistic\", 0.2,  testStatistic.chiSquare(expected, observed), 10E-12);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.904837418036, testStatistic.chiSquareTest(expected, observed), 1E-10);             }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        long[] observed1 = { 500, 623, 72, 70, 31 };\n        double[] expected1 = { 485, 541, 82, 61, 37 };\n        assertEquals( \"chi-square test statistic\", 9.023307936427388, testStatistic.chiSquare(expected1, observed1), 1E-10);         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"chi-square p-value\", 0.06051952647453607, testStatistic.chiSquareTest(expected1, observed1), 1E-9);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test reject\", testStatistic.chiSquareTest(expected1, observed1, 0.08));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test accept\", !testStatistic.chiSquareTest(expected1, observed1, 0.05));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            testStatistic.chiSquareTest(expected1, observed1, 95);\n            try{ fail(\"alpha out of range, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }  \n        \n        long[] tooShortObs = { 0 };\n        double[] tooShortEx = { 1 };\n        try {\n            testStatistic.chiSquare(tooShortEx, tooShortObs);\n            try{ fail(\"arguments too short, IllegalArgumentException expected\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        // unmatched arrays\n        long[] unMatchedObs = { 0, 1, 2, 3 };\n        double[] unMatchedEx = { 1, 1, 2 };\n        try {\n            testStatistic.chiSquare(unMatchedEx, unMatchedObs);\n            try{ fail(\"arrays have different lengths, IllegalArgumentException expected\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        \n        // 0 expected count\n        expected[0] = 0;\n        try {\n            testStatistic.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n        // negative observed count\n        expected[0] = 1;\n        observed[0] = -1;\n        try {\n            testStatistic.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n    }",
                "3": "    public void testChiSquare$catena_3() throws Exception {\n \n        // Target values computed using R version 1.8.1 \n        // Some assembly required ;-)  \n        //      Use sum((obs - exp)^2/exp) for the chi-square statistic and\n        //      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n        \n        long[] observed = {10, 9, 11};\n        double[] expected = {10, 10, 10};\n        try{ assertEquals(\"chi-square statistic\", 0.2,  testStatistic.chiSquare(expected, observed), 10E-12);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.904837418036, testStatistic.chiSquareTest(expected, observed), 1E-10);             }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        long[] observed1 = { 500, 623, 72, 70, 31 };\n        double[] expected1 = { 485, 541, 82, 61, 37 };\n        try{ assertEquals( \"chi-square test statistic\", 9.023307936427388, testStatistic.chiSquare(expected1, observed1), 1E-10);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"chi-square p-value\", 0.06051952647453607, testStatistic.chiSquareTest(expected1, observed1), 1E-9);            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(\"chi-square test reject\", testStatistic.chiSquareTest(expected1, observed1, 0.08));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test accept\", !testStatistic.chiSquareTest(expected1, observed1, 0.05));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            testStatistic.chiSquareTest(expected1, observed1, 95);\n            try{ fail(\"alpha out of range, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }  \n        \n        long[] tooShortObs = { 0 };\n        double[] tooShortEx = { 1 };\n        try {\n            testStatistic.chiSquare(tooShortEx, tooShortObs);\n            try{ fail(\"arguments too short, IllegalArgumentException expected\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        // unmatched arrays\n        long[] unMatchedObs = { 0, 1, 2, 3 };\n        double[] unMatchedEx = { 1, 1, 2 };\n        try {\n            testStatistic.chiSquare(unMatchedEx, unMatchedObs);\n            try{ fail(\"arrays have different lengths, IllegalArgumentException expected\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        \n        // 0 expected count\n        expected[0] = 0;\n        try {\n            testStatistic.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n        // negative observed count\n        expected[0] = 1;\n        observed[0] = -1;\n        try {\n            testStatistic.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n    }",
                "4": "    public void testChiSquare$catena_4() throws Exception {\n \n        // Target values computed using R version 1.8.1 \n        // Some assembly required ;-)  \n        //      Use sum((obs - exp)^2/exp) for the chi-square statistic and\n        //      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n        \n        long[] observed = {10, 9, 11};\n        double[] expected = {10, 10, 10};\n        try{ assertEquals(\"chi-square statistic\", 0.2,  testStatistic.chiSquare(expected, observed), 10E-12);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.904837418036, testStatistic.chiSquareTest(expected, observed), 1E-10);             }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        long[] observed1 = { 500, 623, 72, 70, 31 };\n        double[] expected1 = { 485, 541, 82, 61, 37 };\n        try{ assertEquals( \"chi-square test statistic\", 9.023307936427388, testStatistic.chiSquare(expected1, observed1), 1E-10);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.06051952647453607, testStatistic.chiSquareTest(expected1, observed1), 1E-9);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(\"chi-square test reject\", testStatistic.chiSquareTest(expected1, observed1, 0.08));                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(\"chi-square test accept\", !testStatistic.chiSquareTest(expected1, observed1, 0.05));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            testStatistic.chiSquareTest(expected1, observed1, 95);\n            try{ fail(\"alpha out of range, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }  \n        \n        long[] tooShortObs = { 0 };\n        double[] tooShortEx = { 1 };\n        try {\n            testStatistic.chiSquare(tooShortEx, tooShortObs);\n            try{ fail(\"arguments too short, IllegalArgumentException expected\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        // unmatched arrays\n        long[] unMatchedObs = { 0, 1, 2, 3 };\n        double[] unMatchedEx = { 1, 1, 2 };\n        try {\n            testStatistic.chiSquare(unMatchedEx, unMatchedObs);\n            try{ fail(\"arrays have different lengths, IllegalArgumentException expected\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        \n        // 0 expected count\n        expected[0] = 0;\n        try {\n            testStatistic.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n        // negative observed count\n        expected[0] = 1;\n        observed[0] = -1;\n        try {\n            testStatistic.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n    }",
                "5": "    public void testChiSquare$catena_5() throws Exception {\n \n        // Target values computed using R version 1.8.1 \n        // Some assembly required ;-)  \n        //      Use sum((obs - exp)^2/exp) for the chi-square statistic and\n        //      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n        \n        long[] observed = {10, 9, 11};\n        double[] expected = {10, 10, 10};\n        try{ assertEquals(\"chi-square statistic\", 0.2,  testStatistic.chiSquare(expected, observed), 10E-12);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.904837418036, testStatistic.chiSquareTest(expected, observed), 1E-10);             }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        long[] observed1 = { 500, 623, 72, 70, 31 };\n        double[] expected1 = { 485, 541, 82, 61, 37 };\n        try{ assertEquals( \"chi-square test statistic\", 9.023307936427388, testStatistic.chiSquare(expected1, observed1), 1E-10);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.06051952647453607, testStatistic.chiSquareTest(expected1, observed1), 1E-9);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test reject\", testStatistic.chiSquareTest(expected1, observed1, 0.08));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(\"chi-square test accept\", !testStatistic.chiSquareTest(expected1, observed1, 0.05));                              /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try {\n            testStatistic.chiSquareTest(expected1, observed1, 95);\n            try{ fail(\"alpha out of range, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }  \n        \n        long[] tooShortObs = { 0 };\n        double[] tooShortEx = { 1 };\n        try {\n            testStatistic.chiSquare(tooShortEx, tooShortObs);\n            try{ fail(\"arguments too short, IllegalArgumentException expected\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        // unmatched arrays\n        long[] unMatchedObs = { 0, 1, 2, 3 };\n        double[] unMatchedEx = { 1, 1, 2 };\n        try {\n            testStatistic.chiSquare(unMatchedEx, unMatchedObs);\n            try{ fail(\"arrays have different lengths, IllegalArgumentException expected\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        \n        // 0 expected count\n        expected[0] = 0;\n        try {\n            testStatistic.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n        // negative observed count\n        expected[0] = 1;\n        observed[0] = -1;\n        try {\n            testStatistic.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n    }",
                "6": "    public void testChiSquare$catena_6() throws Exception {\n \n        // Target values computed using R version 1.8.1 \n        // Some assembly required ;-)  \n        //      Use sum((obs - exp)^2/exp) for the chi-square statistic and\n        //      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n        \n        long[] observed = {10, 9, 11};\n        double[] expected = {10, 10, 10};\n        try{ assertEquals(\"chi-square statistic\", 0.2,  testStatistic.chiSquare(expected, observed), 10E-12);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.904837418036, testStatistic.chiSquareTest(expected, observed), 1E-10);             }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        long[] observed1 = { 500, 623, 72, 70, 31 };\n        double[] expected1 = { 485, 541, 82, 61, 37 };\n        try{ assertEquals( \"chi-square test statistic\", 9.023307936427388, testStatistic.chiSquare(expected1, observed1), 1E-10);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.06051952647453607, testStatistic.chiSquareTest(expected1, observed1), 1E-9);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test reject\", testStatistic.chiSquareTest(expected1, observed1, 0.08));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test accept\", !testStatistic.chiSquareTest(expected1, observed1, 0.05));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            testStatistic.chiSquareTest(expected1, observed1, 95);\n            fail(\"alpha out of range, IllegalArgumentException expected\");                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }  \n        \n        long[] tooShortObs = { 0 };\n        double[] tooShortEx = { 1 };\n        try {\n            testStatistic.chiSquare(tooShortEx, tooShortObs);\n            try{ fail(\"arguments too short, IllegalArgumentException expected\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        // unmatched arrays\n        long[] unMatchedObs = { 0, 1, 2, 3 };\n        double[] unMatchedEx = { 1, 1, 2 };\n        try {\n            testStatistic.chiSquare(unMatchedEx, unMatchedObs);\n            try{ fail(\"arrays have different lengths, IllegalArgumentException expected\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        \n        // 0 expected count\n        expected[0] = 0;\n        try {\n            testStatistic.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n        // negative observed count\n        expected[0] = 1;\n        observed[0] = -1;\n        try {\n            testStatistic.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n    }",
                "7": "    public void testChiSquare$catena_7() throws Exception {\n \n        // Target values computed using R version 1.8.1 \n        // Some assembly required ;-)  \n        //      Use sum((obs - exp)^2/exp) for the chi-square statistic and\n        //      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n        \n        long[] observed = {10, 9, 11};\n        double[] expected = {10, 10, 10};\n        try{ assertEquals(\"chi-square statistic\", 0.2,  testStatistic.chiSquare(expected, observed), 10E-12);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.904837418036, testStatistic.chiSquareTest(expected, observed), 1E-10);             }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        long[] observed1 = { 500, 623, 72, 70, 31 };\n        double[] expected1 = { 485, 541, 82, 61, 37 };\n        try{ assertEquals( \"chi-square test statistic\", 9.023307936427388, testStatistic.chiSquare(expected1, observed1), 1E-10);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.06051952647453607, testStatistic.chiSquareTest(expected1, observed1), 1E-9);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test reject\", testStatistic.chiSquareTest(expected1, observed1, 0.08));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test accept\", !testStatistic.chiSquareTest(expected1, observed1, 0.05));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            testStatistic.chiSquareTest(expected1, observed1, 95);\n            try{ fail(\"alpha out of range, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }  \n        \n        long[] tooShortObs = { 0 };\n        double[] tooShortEx = { 1 };\n        try {\n            testStatistic.chiSquare(tooShortEx, tooShortObs);\n            fail(\"arguments too short, IllegalArgumentException expected\");                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        // unmatched arrays\n        long[] unMatchedObs = { 0, 1, 2, 3 };\n        double[] unMatchedEx = { 1, 1, 2 };\n        try {\n            testStatistic.chiSquare(unMatchedEx, unMatchedObs);\n            try{ fail(\"arrays have different lengths, IllegalArgumentException expected\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        \n        // 0 expected count\n        expected[0] = 0;\n        try {\n            testStatistic.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n        // negative observed count\n        expected[0] = 1;\n        observed[0] = -1;\n        try {\n            testStatistic.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n    }",
                "8": "    public void testChiSquare$catena_8() throws Exception {\n \n        // Target values computed using R version 1.8.1 \n        // Some assembly required ;-)  \n        //      Use sum((obs - exp)^2/exp) for the chi-square statistic and\n        //      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n        \n        long[] observed = {10, 9, 11};\n        double[] expected = {10, 10, 10};\n        try{ assertEquals(\"chi-square statistic\", 0.2,  testStatistic.chiSquare(expected, observed), 10E-12);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.904837418036, testStatistic.chiSquareTest(expected, observed), 1E-10);             }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        long[] observed1 = { 500, 623, 72, 70, 31 };\n        double[] expected1 = { 485, 541, 82, 61, 37 };\n        try{ assertEquals( \"chi-square test statistic\", 9.023307936427388, testStatistic.chiSquare(expected1, observed1), 1E-10);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.06051952647453607, testStatistic.chiSquareTest(expected1, observed1), 1E-9);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test reject\", testStatistic.chiSquareTest(expected1, observed1, 0.08));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test accept\", !testStatistic.chiSquareTest(expected1, observed1, 0.05));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            testStatistic.chiSquareTest(expected1, observed1, 95);\n            try{ fail(\"alpha out of range, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }  \n        \n        long[] tooShortObs = { 0 };\n        double[] tooShortEx = { 1 };\n        try {\n            testStatistic.chiSquare(tooShortEx, tooShortObs);\n            try{ fail(\"arguments too short, IllegalArgumentException expected\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        // unmatched arrays\n        long[] unMatchedObs = { 0, 1, 2, 3 };\n        double[] unMatchedEx = { 1, 1, 2 };\n        try {\n            testStatistic.chiSquare(unMatchedEx, unMatchedObs);\n            fail(\"arrays have different lengths, IllegalArgumentException expected\");                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        \n        // 0 expected count\n        expected[0] = 0;\n        try {\n            testStatistic.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n        // negative observed count\n        expected[0] = 1;\n        observed[0] = -1;\n        try {\n            testStatistic.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n    }",
                "9": "    public void testChiSquare$catena_9() throws Exception {\n \n        // Target values computed using R version 1.8.1 \n        // Some assembly required ;-)  \n        //      Use sum((obs - exp)^2/exp) for the chi-square statistic and\n        //      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n        \n        long[] observed = {10, 9, 11};\n        double[] expected = {10, 10, 10};\n        try{ assertEquals(\"chi-square statistic\", 0.2,  testStatistic.chiSquare(expected, observed), 10E-12);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.904837418036, testStatistic.chiSquareTest(expected, observed), 1E-10);             }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        long[] observed1 = { 500, 623, 72, 70, 31 };\n        double[] expected1 = { 485, 541, 82, 61, 37 };\n        try{ assertEquals( \"chi-square test statistic\", 9.023307936427388, testStatistic.chiSquare(expected1, observed1), 1E-10);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.06051952647453607, testStatistic.chiSquareTest(expected1, observed1), 1E-9);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test reject\", testStatistic.chiSquareTest(expected1, observed1, 0.08));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test accept\", !testStatistic.chiSquareTest(expected1, observed1, 0.05));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            testStatistic.chiSquareTest(expected1, observed1, 95);\n            try{ fail(\"alpha out of range, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }  \n        \n        long[] tooShortObs = { 0 };\n        double[] tooShortEx = { 1 };\n        try {\n            testStatistic.chiSquare(tooShortEx, tooShortObs);\n            try{ fail(\"arguments too short, IllegalArgumentException expected\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        // unmatched arrays\n        long[] unMatchedObs = { 0, 1, 2, 3 };\n        double[] unMatchedEx = { 1, 1, 2 };\n        try {\n            testStatistic.chiSquare(unMatchedEx, unMatchedObs);\n            try{ fail(\"arrays have different lengths, IllegalArgumentException expected\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        \n        // 0 expected count\n        expected[0] = 0;\n        try {\n            testStatistic.chiSquareTest(expected, observed, .01);\n            fail(\"bad expected count, IllegalArgumentException expected\");                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n        // negative observed count\n        expected[0] = 1;\n        observed[0] = -1;\n        try {\n            testStatistic.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n    }",
                "10": "    public void testChiSquare$catena_10() throws Exception {\n \n        // Target values computed using R version 1.8.1 \n        // Some assembly required ;-)  \n        //      Use sum((obs - exp)^2/exp) for the chi-square statistic and\n        //      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n        \n        long[] observed = {10, 9, 11};\n        double[] expected = {10, 10, 10};\n        try{ assertEquals(\"chi-square statistic\", 0.2,  testStatistic.chiSquare(expected, observed), 10E-12);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.904837418036, testStatistic.chiSquareTest(expected, observed), 1E-10);             }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        long[] observed1 = { 500, 623, 72, 70, 31 };\n        double[] expected1 = { 485, 541, 82, 61, 37 };\n        try{ assertEquals( \"chi-square test statistic\", 9.023307936427388, testStatistic.chiSquare(expected1, observed1), 1E-10);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.06051952647453607, testStatistic.chiSquareTest(expected1, observed1), 1E-9);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test reject\", testStatistic.chiSquareTest(expected1, observed1, 0.08));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test accept\", !testStatistic.chiSquareTest(expected1, observed1, 0.05));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            testStatistic.chiSquareTest(expected1, observed1, 95);\n            try{ fail(\"alpha out of range, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }  \n        \n        long[] tooShortObs = { 0 };\n        double[] tooShortEx = { 1 };\n        try {\n            testStatistic.chiSquare(tooShortEx, tooShortObs);\n            try{ fail(\"arguments too short, IllegalArgumentException expected\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        // unmatched arrays\n        long[] unMatchedObs = { 0, 1, 2, 3 };\n        double[] unMatchedEx = { 1, 1, 2 };\n        try {\n            testStatistic.chiSquare(unMatchedEx, unMatchedObs);\n            try{ fail(\"arrays have different lengths, IllegalArgumentException expected\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        \n        // 0 expected count\n        expected[0] = 0;\n        try {\n            testStatistic.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n        // negative observed count\n        expected[0] = 1;\n        observed[0] = -1;\n        try {\n            testStatistic.chiSquareTest(expected, observed, .01);\n            fail(\"bad expected count, IllegalArgumentException expected\");                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n    }"
            }
        },
        "org.apache.commons.math.stat.inference.TestUtilsTest::testChiSquareLargeTestStatistic": {
            "file_path": "src/test/org/apache/commons/math/stat/inference/TestUtilsTest.java",
            "Instance": "Begin: Pos(168, 12)\nEnd: Pos(183, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Math_102/src/test//org/apache/commons/math/stat/inference/TestUtilsTest.java\nName: testChiSquareLargeTestStatistic\nChilds: [StatementAssertion<Begin: Pos(180, 9), End: Pos(180, 59)>,\nStatementAssertion<Begin: Pos(181, 9), End: Pos(182, 73)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Math_102/src/test//org/apache/commons/math/stat/inference/TestUtilsTest.java",
            "name": "testChiSquareLargeTestStatistic",
            "begin": "Pos(168, 12)",
            "end": "Pos(183, 5)",
            "begin_line_no": 168,
            "end_line_no": 183,
            "child": [
                "Begin: Pos(180, 9)\nEnd: Pos(180, 59)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(181, 9)\nEnd: Pos(182, 73)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testChiSquareLargeTestStatistic$catena_0() throws Exception {\n        double[] exp = new double[] {\n                3389119.5, 649136.6, 285745.4, 25357364.76, 11291189.78, 543628.0, \n                232921.0, 437665.75\n        };\n\n        long[] obs = new long[] {\n                2372383, 584222, 257170, 17750155, 7903832, 489265, 209628, 393899\n        };\n        org.apache.commons.math.stat.inference.ChiSquareTestImpl csti =\n            new org.apache.commons.math.stat.inference.ChiSquareTestImpl(); \n        double cst = csti.chiSquareTest(exp, obs); \n        assertEquals(\"chi-square p-value\", 0.0, cst, 1E-3);                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals( \"chi-square test statistic\", \n                114875.90421929007, TestUtils.chiSquare(exp, obs), 1E-9);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testChiSquareLargeTestStatistic$catena_1() throws Exception {\n        double[] exp = new double[] {\n                3389119.5, 649136.6, 285745.4, 25357364.76, 11291189.78, 543628.0, \n                232921.0, 437665.75\n        };\n\n        long[] obs = new long[] {\n                2372383, 584222, 257170, 17750155, 7903832, 489265, 209628, 393899\n        };\n        org.apache.commons.math.stat.inference.ChiSquareTestImpl csti =\n            new org.apache.commons.math.stat.inference.ChiSquareTestImpl(); \n        double cst = csti.chiSquareTest(exp, obs); \n        try{ assertEquals(\"chi-square p-value\", 0.0, cst, 1E-3);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals( \"chi-square test statistic\", \n                114875.90421929007, TestUtils.chiSquare(exp, obs), 1E-9);                                   /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void testChiSquareLargeTestStatistic$catena_0() throws Exception {\n        double[] exp = new double[] {\n                3389119.5, 649136.6, 285745.4, 25357364.76, 11291189.78, 543628.0, \n                232921.0, 437665.75\n        };\n\n        long[] obs = new long[] {\n                2372383, 584222, 257170, 17750155, 7903832, 489265, 209628, 393899\n        };\n        org.apache.commons.math.stat.inference.ChiSquareTestImpl csti =\n            new org.apache.commons.math.stat.inference.ChiSquareTestImpl(); \n        double cst = csti.chiSquareTest(exp, obs); \n        assertEquals(\"chi-square p-value\", 0.0, cst, 1E-3);                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals( \"chi-square test statistic\", \n                114875.90421929007, TestUtils.chiSquare(exp, obs), 1E-9);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void testChiSquareLargeTestStatistic$catena_1() throws Exception {\n        double[] exp = new double[] {\n                3389119.5, 649136.6, 285745.4, 25357364.76, 11291189.78, 543628.0, \n                232921.0, 437665.75\n        };\n\n        long[] obs = new long[] {\n                2372383, 584222, 257170, 17750155, 7903832, 489265, 209628, 393899\n        };\n        org.apache.commons.math.stat.inference.ChiSquareTestImpl csti =\n            new org.apache.commons.math.stat.inference.ChiSquareTestImpl(); \n        double cst = csti.chiSquareTest(exp, obs); \n        try{ assertEquals(\"chi-square p-value\", 0.0, cst, 1E-3);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals( \"chi-square test statistic\", \n                114875.90421929007, TestUtils.chiSquare(exp, obs), 1E-9);                                   /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.apache.commons.math.stat.inference.TestUtilsTest::testChiSquare": {
            "file_path": "src/test/org/apache/commons/math/stat/inference/TestUtilsTest.java",
            "check": [
                "Use pattern matching: TestUtils.chiSquareTest",
                "StatementExpression is in safe: <TestUtils.chiSquareTest>",
                "Use pattern matching: TestUtils.chiSquareTest",
                "StatementExpression is in safe: <TestUtils.chiSquareTest>",
                "Use pattern matching: TestUtils.chiSquareTest",
                "StatementExpression is in safe: <TestUtils.chiSquareTest>"
            ],
            "Instance": "Begin: Pos(44, 12)\nEnd: Pos(108, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Math_102/src/test//org/apache/commons/math/stat/inference/TestUtilsTest.java\nName: testChiSquare\nChilds: [StatementAssertion<Begin: Pos(53, 9), End: Pos(53, 100)>,\nStatementAssertion<Begin: Pos(54, 9), End: Pos(54, 111)>,\nStatementAssertion<Begin: Pos(58, 9), End: Pos(58, 120)>,\nStatementAssertion<Begin: Pos(59, 9), End: Pos(59, 117)>,\nStatementAssertion<Begin: Pos(60, 9), End: Pos(60, 98)>,\nStatementAssertion<Begin: Pos(61, 9), End: Pos(61, 99)>,\nStatementAssertion<Begin: Pos(65, 13), End: Pos(65, 74)>,\nStatementAssertion<Begin: Pos(74, 13), End: Pos(74, 75)>,\nStatementAssertion<Begin: Pos(84, 13), End: Pos(84, 85)>,\nStatementAssertion<Begin: Pos(93, 13), End: Pos(93, 74)>,\nStatementAssertion<Begin: Pos(103, 13), End: Pos(103, 74)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Math_102/src/test//org/apache/commons/math/stat/inference/TestUtilsTest.java",
            "name": "testChiSquare",
            "begin": "Pos(44, 12)",
            "end": "Pos(108, 5)",
            "begin_line_no": 44,
            "end_line_no": 108,
            "child": [
                "Begin: Pos(53, 9)\nEnd: Pos(53, 100)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(54, 9)\nEnd: Pos(54, 111)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(58, 9)\nEnd: Pos(58, 120)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(59, 9)\nEnd: Pos(59, 117)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(60, 9)\nEnd: Pos(60, 98)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(61, 9)\nEnd: Pos(61, 99)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(65, 13)\nEnd: Pos(65, 74)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(74, 13)\nEnd: Pos(74, 75)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(84, 13)\nEnd: Pos(84, 85)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(93, 13)\nEnd: Pos(93, 74)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(103, 13)\nEnd: Pos(103, 74)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testChiSquare$catena_0() throws Exception {\n        \n        // Target values computed using R version 1.8.1 \n        // Some assembly required ;-)  \n        //      Use sum((obs - exp)^2/exp) for the chi-square statistic and\n        //      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n        \n        long[] observed = {10, 9, 11};\n        double[] expected = {10, 10, 10};\n        assertEquals(\"chi-square statistic\", 0.2,  TestUtils.chiSquare(expected, observed), 10E-12);                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"chi-square p-value\", 0.904837418036, TestUtils.chiSquareTest(expected, observed), 1E-10);             }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        long[] observed1 = { 500, 623, 72, 70, 31 };\n        double[] expected1 = { 485, 541, 82, 61, 37 };\n        try{ assertEquals( \"chi-square test statistic\", 9.023307936427388, TestUtils.chiSquare(expected1, observed1), 1E-10);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.06051952647453607, TestUtils.chiSquareTest(expected1, observed1), 1E-9);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test reject\", TestUtils.chiSquareTest(expected1, observed1, 0.07));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test accept\", !TestUtils.chiSquareTest(expected1, observed1, 0.05));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            TestUtils.chiSquareTest(expected1, observed1, 95);\n            try{ fail(\"alpha out of range, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }  \n        \n        long[] tooShortObs = { 0 };\n        double[] tooShortEx = { 1 };\n        try {\n            TestUtils.chiSquare(tooShortEx, tooShortObs);\n            try{ fail(\"arguments too short, IllegalArgumentException expected\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        // unmatched arrays\n        long[] unMatchedObs = { 0, 1, 2, 3 };\n        double[] unMatchedEx = { 1, 1, 2 };\n        try {\n            TestUtils.chiSquare(unMatchedEx, unMatchedObs);\n            try{ fail(\"arrays have different lengths, IllegalArgumentException expected\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        \n        // 0 expected count\n        expected[0] = 0;\n        try {\n            TestUtils.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n        // negative observed count\n        expected[0] = 1;\n        observed[0] = -1;\n        try {\n            TestUtils.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n    }",
                "    public void testChiSquare$catena_1() throws Exception {\n        \n        // Target values computed using R version 1.8.1 \n        // Some assembly required ;-)  \n        //      Use sum((obs - exp)^2/exp) for the chi-square statistic and\n        //      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n        \n        long[] observed = {10, 9, 11};\n        double[] expected = {10, 10, 10};\n        try{ assertEquals(\"chi-square statistic\", 0.2,  TestUtils.chiSquare(expected, observed), 10E-12);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"chi-square p-value\", 0.904837418036, TestUtils.chiSquareTest(expected, observed), 1E-10);                  /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        long[] observed1 = { 500, 623, 72, 70, 31 };\n        double[] expected1 = { 485, 541, 82, 61, 37 };\n        try{ assertEquals( \"chi-square test statistic\", 9.023307936427388, TestUtils.chiSquare(expected1, observed1), 1E-10);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.06051952647453607, TestUtils.chiSquareTest(expected1, observed1), 1E-9);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test reject\", TestUtils.chiSquareTest(expected1, observed1, 0.07));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test accept\", !TestUtils.chiSquareTest(expected1, observed1, 0.05));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            TestUtils.chiSquareTest(expected1, observed1, 95);\n            try{ fail(\"alpha out of range, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }  \n        \n        long[] tooShortObs = { 0 };\n        double[] tooShortEx = { 1 };\n        try {\n            TestUtils.chiSquare(tooShortEx, tooShortObs);\n            try{ fail(\"arguments too short, IllegalArgumentException expected\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        // unmatched arrays\n        long[] unMatchedObs = { 0, 1, 2, 3 };\n        double[] unMatchedEx = { 1, 1, 2 };\n        try {\n            TestUtils.chiSquare(unMatchedEx, unMatchedObs);\n            try{ fail(\"arrays have different lengths, IllegalArgumentException expected\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        \n        // 0 expected count\n        expected[0] = 0;\n        try {\n            TestUtils.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n        // negative observed count\n        expected[0] = 1;\n        observed[0] = -1;\n        try {\n            TestUtils.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n    }",
                "    public void testChiSquare$catena_2() throws Exception {\n        \n        // Target values computed using R version 1.8.1 \n        // Some assembly required ;-)  \n        //      Use sum((obs - exp)^2/exp) for the chi-square statistic and\n        //      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n        \n        long[] observed = {10, 9, 11};\n        double[] expected = {10, 10, 10};\n        try{ assertEquals(\"chi-square statistic\", 0.2,  TestUtils.chiSquare(expected, observed), 10E-12);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.904837418036, TestUtils.chiSquareTest(expected, observed), 1E-10);             }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        long[] observed1 = { 500, 623, 72, 70, 31 };\n        double[] expected1 = { 485, 541, 82, 61, 37 };\n        assertEquals( \"chi-square test statistic\", 9.023307936427388, TestUtils.chiSquare(expected1, observed1), 1E-10);         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"chi-square p-value\", 0.06051952647453607, TestUtils.chiSquareTest(expected1, observed1), 1E-9);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test reject\", TestUtils.chiSquareTest(expected1, observed1, 0.07));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test accept\", !TestUtils.chiSquareTest(expected1, observed1, 0.05));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            TestUtils.chiSquareTest(expected1, observed1, 95);\n            try{ fail(\"alpha out of range, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }  \n        \n        long[] tooShortObs = { 0 };\n        double[] tooShortEx = { 1 };\n        try {\n            TestUtils.chiSquare(tooShortEx, tooShortObs);\n            try{ fail(\"arguments too short, IllegalArgumentException expected\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        // unmatched arrays\n        long[] unMatchedObs = { 0, 1, 2, 3 };\n        double[] unMatchedEx = { 1, 1, 2 };\n        try {\n            TestUtils.chiSquare(unMatchedEx, unMatchedObs);\n            try{ fail(\"arrays have different lengths, IllegalArgumentException expected\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        \n        // 0 expected count\n        expected[0] = 0;\n        try {\n            TestUtils.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n        // negative observed count\n        expected[0] = 1;\n        observed[0] = -1;\n        try {\n            TestUtils.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n    }",
                "    public void testChiSquare$catena_3() throws Exception {\n        \n        // Target values computed using R version 1.8.1 \n        // Some assembly required ;-)  \n        //      Use sum((obs - exp)^2/exp) for the chi-square statistic and\n        //      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n        \n        long[] observed = {10, 9, 11};\n        double[] expected = {10, 10, 10};\n        try{ assertEquals(\"chi-square statistic\", 0.2,  TestUtils.chiSquare(expected, observed), 10E-12);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.904837418036, TestUtils.chiSquareTest(expected, observed), 1E-10);             }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        long[] observed1 = { 500, 623, 72, 70, 31 };\n        double[] expected1 = { 485, 541, 82, 61, 37 };\n        try{ assertEquals( \"chi-square test statistic\", 9.023307936427388, TestUtils.chiSquare(expected1, observed1), 1E-10);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"chi-square p-value\", 0.06051952647453607, TestUtils.chiSquareTest(expected1, observed1), 1E-9);            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(\"chi-square test reject\", TestUtils.chiSquareTest(expected1, observed1, 0.07));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test accept\", !TestUtils.chiSquareTest(expected1, observed1, 0.05));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            TestUtils.chiSquareTest(expected1, observed1, 95);\n            try{ fail(\"alpha out of range, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }  \n        \n        long[] tooShortObs = { 0 };\n        double[] tooShortEx = { 1 };\n        try {\n            TestUtils.chiSquare(tooShortEx, tooShortObs);\n            try{ fail(\"arguments too short, IllegalArgumentException expected\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        // unmatched arrays\n        long[] unMatchedObs = { 0, 1, 2, 3 };\n        double[] unMatchedEx = { 1, 1, 2 };\n        try {\n            TestUtils.chiSquare(unMatchedEx, unMatchedObs);\n            try{ fail(\"arrays have different lengths, IllegalArgumentException expected\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        \n        // 0 expected count\n        expected[0] = 0;\n        try {\n            TestUtils.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n        // negative observed count\n        expected[0] = 1;\n        observed[0] = -1;\n        try {\n            TestUtils.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n    }",
                "    public void testChiSquare$catena_4() throws Exception {\n        \n        // Target values computed using R version 1.8.1 \n        // Some assembly required ;-)  \n        //      Use sum((obs - exp)^2/exp) for the chi-square statistic and\n        //      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n        \n        long[] observed = {10, 9, 11};\n        double[] expected = {10, 10, 10};\n        try{ assertEquals(\"chi-square statistic\", 0.2,  TestUtils.chiSquare(expected, observed), 10E-12);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.904837418036, TestUtils.chiSquareTest(expected, observed), 1E-10);             }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        long[] observed1 = { 500, 623, 72, 70, 31 };\n        double[] expected1 = { 485, 541, 82, 61, 37 };\n        try{ assertEquals( \"chi-square test statistic\", 9.023307936427388, TestUtils.chiSquare(expected1, observed1), 1E-10);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.06051952647453607, TestUtils.chiSquareTest(expected1, observed1), 1E-9);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(\"chi-square test reject\", TestUtils.chiSquareTest(expected1, observed1, 0.07));                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(\"chi-square test accept\", !TestUtils.chiSquareTest(expected1, observed1, 0.05));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            TestUtils.chiSquareTest(expected1, observed1, 95);\n            try{ fail(\"alpha out of range, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }  \n        \n        long[] tooShortObs = { 0 };\n        double[] tooShortEx = { 1 };\n        try {\n            TestUtils.chiSquare(tooShortEx, tooShortObs);\n            try{ fail(\"arguments too short, IllegalArgumentException expected\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        // unmatched arrays\n        long[] unMatchedObs = { 0, 1, 2, 3 };\n        double[] unMatchedEx = { 1, 1, 2 };\n        try {\n            TestUtils.chiSquare(unMatchedEx, unMatchedObs);\n            try{ fail(\"arrays have different lengths, IllegalArgumentException expected\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        \n        // 0 expected count\n        expected[0] = 0;\n        try {\n            TestUtils.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n        // negative observed count\n        expected[0] = 1;\n        observed[0] = -1;\n        try {\n            TestUtils.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n    }",
                "    public void testChiSquare$catena_5() throws Exception {\n        \n        // Target values computed using R version 1.8.1 \n        // Some assembly required ;-)  \n        //      Use sum((obs - exp)^2/exp) for the chi-square statistic and\n        //      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n        \n        long[] observed = {10, 9, 11};\n        double[] expected = {10, 10, 10};\n        try{ assertEquals(\"chi-square statistic\", 0.2,  TestUtils.chiSquare(expected, observed), 10E-12);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.904837418036, TestUtils.chiSquareTest(expected, observed), 1E-10);             }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        long[] observed1 = { 500, 623, 72, 70, 31 };\n        double[] expected1 = { 485, 541, 82, 61, 37 };\n        try{ assertEquals( \"chi-square test statistic\", 9.023307936427388, TestUtils.chiSquare(expected1, observed1), 1E-10);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.06051952647453607, TestUtils.chiSquareTest(expected1, observed1), 1E-9);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test reject\", TestUtils.chiSquareTest(expected1, observed1, 0.07));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(\"chi-square test accept\", !TestUtils.chiSquareTest(expected1, observed1, 0.05));                              /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try {\n            TestUtils.chiSquareTest(expected1, observed1, 95);\n            try{ fail(\"alpha out of range, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }  \n        \n        long[] tooShortObs = { 0 };\n        double[] tooShortEx = { 1 };\n        try {\n            TestUtils.chiSquare(tooShortEx, tooShortObs);\n            try{ fail(\"arguments too short, IllegalArgumentException expected\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        // unmatched arrays\n        long[] unMatchedObs = { 0, 1, 2, 3 };\n        double[] unMatchedEx = { 1, 1, 2 };\n        try {\n            TestUtils.chiSquare(unMatchedEx, unMatchedObs);\n            try{ fail(\"arrays have different lengths, IllegalArgumentException expected\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        \n        // 0 expected count\n        expected[0] = 0;\n        try {\n            TestUtils.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n        // negative observed count\n        expected[0] = 1;\n        observed[0] = -1;\n        try {\n            TestUtils.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n    }",
                "    public void testChiSquare$catena_6() throws Exception {\n        \n        // Target values computed using R version 1.8.1 \n        // Some assembly required ;-)  \n        //      Use sum((obs - exp)^2/exp) for the chi-square statistic and\n        //      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n        \n        long[] observed = {10, 9, 11};\n        double[] expected = {10, 10, 10};\n        try{ assertEquals(\"chi-square statistic\", 0.2,  TestUtils.chiSquare(expected, observed), 10E-12);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.904837418036, TestUtils.chiSquareTest(expected, observed), 1E-10);             }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        long[] observed1 = { 500, 623, 72, 70, 31 };\n        double[] expected1 = { 485, 541, 82, 61, 37 };\n        try{ assertEquals( \"chi-square test statistic\", 9.023307936427388, TestUtils.chiSquare(expected1, observed1), 1E-10);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.06051952647453607, TestUtils.chiSquareTest(expected1, observed1), 1E-9);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test reject\", TestUtils.chiSquareTest(expected1, observed1, 0.07));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test accept\", !TestUtils.chiSquareTest(expected1, observed1, 0.05));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            TestUtils.chiSquareTest(expected1, observed1, 95);\n            fail(\"alpha out of range, IllegalArgumentException expected\");                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }  \n        \n        long[] tooShortObs = { 0 };\n        double[] tooShortEx = { 1 };\n        try {\n            TestUtils.chiSquare(tooShortEx, tooShortObs);\n            try{ fail(\"arguments too short, IllegalArgumentException expected\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        // unmatched arrays\n        long[] unMatchedObs = { 0, 1, 2, 3 };\n        double[] unMatchedEx = { 1, 1, 2 };\n        try {\n            TestUtils.chiSquare(unMatchedEx, unMatchedObs);\n            try{ fail(\"arrays have different lengths, IllegalArgumentException expected\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        \n        // 0 expected count\n        expected[0] = 0;\n        try {\n            TestUtils.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n        // negative observed count\n        expected[0] = 1;\n        observed[0] = -1;\n        try {\n            TestUtils.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n    }",
                "    public void testChiSquare$catena_7() throws Exception {\n        \n        // Target values computed using R version 1.8.1 \n        // Some assembly required ;-)  \n        //      Use sum((obs - exp)^2/exp) for the chi-square statistic and\n        //      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n        \n        long[] observed = {10, 9, 11};\n        double[] expected = {10, 10, 10};\n        try{ assertEquals(\"chi-square statistic\", 0.2,  TestUtils.chiSquare(expected, observed), 10E-12);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.904837418036, TestUtils.chiSquareTest(expected, observed), 1E-10);             }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        long[] observed1 = { 500, 623, 72, 70, 31 };\n        double[] expected1 = { 485, 541, 82, 61, 37 };\n        try{ assertEquals( \"chi-square test statistic\", 9.023307936427388, TestUtils.chiSquare(expected1, observed1), 1E-10);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.06051952647453607, TestUtils.chiSquareTest(expected1, observed1), 1E-9);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test reject\", TestUtils.chiSquareTest(expected1, observed1, 0.07));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test accept\", !TestUtils.chiSquareTest(expected1, observed1, 0.05));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            TestUtils.chiSquareTest(expected1, observed1, 95);\n            try{ fail(\"alpha out of range, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }  \n        \n        long[] tooShortObs = { 0 };\n        double[] tooShortEx = { 1 };\n        try {\n            TestUtils.chiSquare(tooShortEx, tooShortObs);\n            fail(\"arguments too short, IllegalArgumentException expected\");                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        // unmatched arrays\n        long[] unMatchedObs = { 0, 1, 2, 3 };\n        double[] unMatchedEx = { 1, 1, 2 };\n        try {\n            TestUtils.chiSquare(unMatchedEx, unMatchedObs);\n            try{ fail(\"arrays have different lengths, IllegalArgumentException expected\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        \n        // 0 expected count\n        expected[0] = 0;\n        try {\n            TestUtils.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n        // negative observed count\n        expected[0] = 1;\n        observed[0] = -1;\n        try {\n            TestUtils.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n    }",
                "    public void testChiSquare$catena_8() throws Exception {\n        \n        // Target values computed using R version 1.8.1 \n        // Some assembly required ;-)  \n        //      Use sum((obs - exp)^2/exp) for the chi-square statistic and\n        //      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n        \n        long[] observed = {10, 9, 11};\n        double[] expected = {10, 10, 10};\n        try{ assertEquals(\"chi-square statistic\", 0.2,  TestUtils.chiSquare(expected, observed), 10E-12);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.904837418036, TestUtils.chiSquareTest(expected, observed), 1E-10);             }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        long[] observed1 = { 500, 623, 72, 70, 31 };\n        double[] expected1 = { 485, 541, 82, 61, 37 };\n        try{ assertEquals( \"chi-square test statistic\", 9.023307936427388, TestUtils.chiSquare(expected1, observed1), 1E-10);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.06051952647453607, TestUtils.chiSquareTest(expected1, observed1), 1E-9);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test reject\", TestUtils.chiSquareTest(expected1, observed1, 0.07));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test accept\", !TestUtils.chiSquareTest(expected1, observed1, 0.05));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            TestUtils.chiSquareTest(expected1, observed1, 95);\n            try{ fail(\"alpha out of range, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }  \n        \n        long[] tooShortObs = { 0 };\n        double[] tooShortEx = { 1 };\n        try {\n            TestUtils.chiSquare(tooShortEx, tooShortObs);\n            try{ fail(\"arguments too short, IllegalArgumentException expected\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        // unmatched arrays\n        long[] unMatchedObs = { 0, 1, 2, 3 };\n        double[] unMatchedEx = { 1, 1, 2 };\n        try {\n            TestUtils.chiSquare(unMatchedEx, unMatchedObs);\n            fail(\"arrays have different lengths, IllegalArgumentException expected\");                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        \n        // 0 expected count\n        expected[0] = 0;\n        try {\n            TestUtils.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n        // negative observed count\n        expected[0] = 1;\n        observed[0] = -1;\n        try {\n            TestUtils.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n    }",
                "    public void testChiSquare$catena_9() throws Exception {\n        \n        // Target values computed using R version 1.8.1 \n        // Some assembly required ;-)  \n        //      Use sum((obs - exp)^2/exp) for the chi-square statistic and\n        //      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n        \n        long[] observed = {10, 9, 11};\n        double[] expected = {10, 10, 10};\n        try{ assertEquals(\"chi-square statistic\", 0.2,  TestUtils.chiSquare(expected, observed), 10E-12);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.904837418036, TestUtils.chiSquareTest(expected, observed), 1E-10);             }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        long[] observed1 = { 500, 623, 72, 70, 31 };\n        double[] expected1 = { 485, 541, 82, 61, 37 };\n        try{ assertEquals( \"chi-square test statistic\", 9.023307936427388, TestUtils.chiSquare(expected1, observed1), 1E-10);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.06051952647453607, TestUtils.chiSquareTest(expected1, observed1), 1E-9);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test reject\", TestUtils.chiSquareTest(expected1, observed1, 0.07));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test accept\", !TestUtils.chiSquareTest(expected1, observed1, 0.05));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            TestUtils.chiSquareTest(expected1, observed1, 95);\n            try{ fail(\"alpha out of range, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }  \n        \n        long[] tooShortObs = { 0 };\n        double[] tooShortEx = { 1 };\n        try {\n            TestUtils.chiSquare(tooShortEx, tooShortObs);\n            try{ fail(\"arguments too short, IllegalArgumentException expected\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        // unmatched arrays\n        long[] unMatchedObs = { 0, 1, 2, 3 };\n        double[] unMatchedEx = { 1, 1, 2 };\n        try {\n            TestUtils.chiSquare(unMatchedEx, unMatchedObs);\n            try{ fail(\"arrays have different lengths, IllegalArgumentException expected\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        \n        // 0 expected count\n        expected[0] = 0;\n        try {\n            TestUtils.chiSquareTest(expected, observed, .01);\n            fail(\"bad expected count, IllegalArgumentException expected\");                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n        // negative observed count\n        expected[0] = 1;\n        observed[0] = -1;\n        try {\n            TestUtils.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n    }",
                "    public void testChiSquare$catena_10() throws Exception {\n        \n        // Target values computed using R version 1.8.1 \n        // Some assembly required ;-)  \n        //      Use sum((obs - exp)^2/exp) for the chi-square statistic and\n        //      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n        \n        long[] observed = {10, 9, 11};\n        double[] expected = {10, 10, 10};\n        try{ assertEquals(\"chi-square statistic\", 0.2,  TestUtils.chiSquare(expected, observed), 10E-12);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.904837418036, TestUtils.chiSquareTest(expected, observed), 1E-10);             }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        long[] observed1 = { 500, 623, 72, 70, 31 };\n        double[] expected1 = { 485, 541, 82, 61, 37 };\n        try{ assertEquals( \"chi-square test statistic\", 9.023307936427388, TestUtils.chiSquare(expected1, observed1), 1E-10);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.06051952647453607, TestUtils.chiSquareTest(expected1, observed1), 1E-9);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test reject\", TestUtils.chiSquareTest(expected1, observed1, 0.07));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test accept\", !TestUtils.chiSquareTest(expected1, observed1, 0.05));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            TestUtils.chiSquareTest(expected1, observed1, 95);\n            try{ fail(\"alpha out of range, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }  \n        \n        long[] tooShortObs = { 0 };\n        double[] tooShortEx = { 1 };\n        try {\n            TestUtils.chiSquare(tooShortEx, tooShortObs);\n            try{ fail(\"arguments too short, IllegalArgumentException expected\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        // unmatched arrays\n        long[] unMatchedObs = { 0, 1, 2, 3 };\n        double[] unMatchedEx = { 1, 1, 2 };\n        try {\n            TestUtils.chiSquare(unMatchedEx, unMatchedObs);\n            try{ fail(\"arrays have different lengths, IllegalArgumentException expected\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        \n        // 0 expected count\n        expected[0] = 0;\n        try {\n            TestUtils.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n        // negative observed count\n        expected[0] = 1;\n        observed[0] = -1;\n        try {\n            TestUtils.chiSquareTest(expected, observed, .01);\n            fail(\"bad expected count, IllegalArgumentException expected\");                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n    }"
            ],
            "func": {
                "0": "    public void testChiSquare$catena_0() throws Exception {\n        \n        // Target values computed using R version 1.8.1 \n        // Some assembly required ;-)  \n        //      Use sum((obs - exp)^2/exp) for the chi-square statistic and\n        //      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n        \n        long[] observed = {10, 9, 11};\n        double[] expected = {10, 10, 10};\n        assertEquals(\"chi-square statistic\", 0.2,  TestUtils.chiSquare(expected, observed), 10E-12);                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"chi-square p-value\", 0.904837418036, TestUtils.chiSquareTest(expected, observed), 1E-10);             }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        long[] observed1 = { 500, 623, 72, 70, 31 };\n        double[] expected1 = { 485, 541, 82, 61, 37 };\n        try{ assertEquals( \"chi-square test statistic\", 9.023307936427388, TestUtils.chiSquare(expected1, observed1), 1E-10);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.06051952647453607, TestUtils.chiSquareTest(expected1, observed1), 1E-9);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test reject\", TestUtils.chiSquareTest(expected1, observed1, 0.07));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test accept\", !TestUtils.chiSquareTest(expected1, observed1, 0.05));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            TestUtils.chiSquareTest(expected1, observed1, 95);\n            try{ fail(\"alpha out of range, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }  \n        \n        long[] tooShortObs = { 0 };\n        double[] tooShortEx = { 1 };\n        try {\n            TestUtils.chiSquare(tooShortEx, tooShortObs);\n            try{ fail(\"arguments too short, IllegalArgumentException expected\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        // unmatched arrays\n        long[] unMatchedObs = { 0, 1, 2, 3 };\n        double[] unMatchedEx = { 1, 1, 2 };\n        try {\n            TestUtils.chiSquare(unMatchedEx, unMatchedObs);\n            try{ fail(\"arrays have different lengths, IllegalArgumentException expected\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        \n        // 0 expected count\n        expected[0] = 0;\n        try {\n            TestUtils.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n        // negative observed count\n        expected[0] = 1;\n        observed[0] = -1;\n        try {\n            TestUtils.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n    }",
                "1": "    public void testChiSquare$catena_1() throws Exception {\n        \n        // Target values computed using R version 1.8.1 \n        // Some assembly required ;-)  \n        //      Use sum((obs - exp)^2/exp) for the chi-square statistic and\n        //      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n        \n        long[] observed = {10, 9, 11};\n        double[] expected = {10, 10, 10};\n        try{ assertEquals(\"chi-square statistic\", 0.2,  TestUtils.chiSquare(expected, observed), 10E-12);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"chi-square p-value\", 0.904837418036, TestUtils.chiSquareTest(expected, observed), 1E-10);                  /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        long[] observed1 = { 500, 623, 72, 70, 31 };\n        double[] expected1 = { 485, 541, 82, 61, 37 };\n        try{ assertEquals( \"chi-square test statistic\", 9.023307936427388, TestUtils.chiSquare(expected1, observed1), 1E-10);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.06051952647453607, TestUtils.chiSquareTest(expected1, observed1), 1E-9);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test reject\", TestUtils.chiSquareTest(expected1, observed1, 0.07));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test accept\", !TestUtils.chiSquareTest(expected1, observed1, 0.05));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            TestUtils.chiSquareTest(expected1, observed1, 95);\n            try{ fail(\"alpha out of range, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }  \n        \n        long[] tooShortObs = { 0 };\n        double[] tooShortEx = { 1 };\n        try {\n            TestUtils.chiSquare(tooShortEx, tooShortObs);\n            try{ fail(\"arguments too short, IllegalArgumentException expected\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        // unmatched arrays\n        long[] unMatchedObs = { 0, 1, 2, 3 };\n        double[] unMatchedEx = { 1, 1, 2 };\n        try {\n            TestUtils.chiSquare(unMatchedEx, unMatchedObs);\n            try{ fail(\"arrays have different lengths, IllegalArgumentException expected\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        \n        // 0 expected count\n        expected[0] = 0;\n        try {\n            TestUtils.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n        // negative observed count\n        expected[0] = 1;\n        observed[0] = -1;\n        try {\n            TestUtils.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n    }",
                "2": "    public void testChiSquare$catena_2() throws Exception {\n        \n        // Target values computed using R version 1.8.1 \n        // Some assembly required ;-)  \n        //      Use sum((obs - exp)^2/exp) for the chi-square statistic and\n        //      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n        \n        long[] observed = {10, 9, 11};\n        double[] expected = {10, 10, 10};\n        try{ assertEquals(\"chi-square statistic\", 0.2,  TestUtils.chiSquare(expected, observed), 10E-12);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.904837418036, TestUtils.chiSquareTest(expected, observed), 1E-10);             }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        long[] observed1 = { 500, 623, 72, 70, 31 };\n        double[] expected1 = { 485, 541, 82, 61, 37 };\n        assertEquals( \"chi-square test statistic\", 9.023307936427388, TestUtils.chiSquare(expected1, observed1), 1E-10);         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"chi-square p-value\", 0.06051952647453607, TestUtils.chiSquareTest(expected1, observed1), 1E-9);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test reject\", TestUtils.chiSquareTest(expected1, observed1, 0.07));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test accept\", !TestUtils.chiSquareTest(expected1, observed1, 0.05));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            TestUtils.chiSquareTest(expected1, observed1, 95);\n            try{ fail(\"alpha out of range, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }  \n        \n        long[] tooShortObs = { 0 };\n        double[] tooShortEx = { 1 };\n        try {\n            TestUtils.chiSquare(tooShortEx, tooShortObs);\n            try{ fail(\"arguments too short, IllegalArgumentException expected\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        // unmatched arrays\n        long[] unMatchedObs = { 0, 1, 2, 3 };\n        double[] unMatchedEx = { 1, 1, 2 };\n        try {\n            TestUtils.chiSquare(unMatchedEx, unMatchedObs);\n            try{ fail(\"arrays have different lengths, IllegalArgumentException expected\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        \n        // 0 expected count\n        expected[0] = 0;\n        try {\n            TestUtils.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n        // negative observed count\n        expected[0] = 1;\n        observed[0] = -1;\n        try {\n            TestUtils.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n    }",
                "3": "    public void testChiSquare$catena_3() throws Exception {\n        \n        // Target values computed using R version 1.8.1 \n        // Some assembly required ;-)  \n        //      Use sum((obs - exp)^2/exp) for the chi-square statistic and\n        //      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n        \n        long[] observed = {10, 9, 11};\n        double[] expected = {10, 10, 10};\n        try{ assertEquals(\"chi-square statistic\", 0.2,  TestUtils.chiSquare(expected, observed), 10E-12);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.904837418036, TestUtils.chiSquareTest(expected, observed), 1E-10);             }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        long[] observed1 = { 500, 623, 72, 70, 31 };\n        double[] expected1 = { 485, 541, 82, 61, 37 };\n        try{ assertEquals( \"chi-square test statistic\", 9.023307936427388, TestUtils.chiSquare(expected1, observed1), 1E-10);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"chi-square p-value\", 0.06051952647453607, TestUtils.chiSquareTest(expected1, observed1), 1E-9);            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(\"chi-square test reject\", TestUtils.chiSquareTest(expected1, observed1, 0.07));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test accept\", !TestUtils.chiSquareTest(expected1, observed1, 0.05));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            TestUtils.chiSquareTest(expected1, observed1, 95);\n            try{ fail(\"alpha out of range, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }  \n        \n        long[] tooShortObs = { 0 };\n        double[] tooShortEx = { 1 };\n        try {\n            TestUtils.chiSquare(tooShortEx, tooShortObs);\n            try{ fail(\"arguments too short, IllegalArgumentException expected\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        // unmatched arrays\n        long[] unMatchedObs = { 0, 1, 2, 3 };\n        double[] unMatchedEx = { 1, 1, 2 };\n        try {\n            TestUtils.chiSquare(unMatchedEx, unMatchedObs);\n            try{ fail(\"arrays have different lengths, IllegalArgumentException expected\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        \n        // 0 expected count\n        expected[0] = 0;\n        try {\n            TestUtils.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n        // negative observed count\n        expected[0] = 1;\n        observed[0] = -1;\n        try {\n            TestUtils.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n    }",
                "4": "    public void testChiSquare$catena_4() throws Exception {\n        \n        // Target values computed using R version 1.8.1 \n        // Some assembly required ;-)  \n        //      Use sum((obs - exp)^2/exp) for the chi-square statistic and\n        //      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n        \n        long[] observed = {10, 9, 11};\n        double[] expected = {10, 10, 10};\n        try{ assertEquals(\"chi-square statistic\", 0.2,  TestUtils.chiSquare(expected, observed), 10E-12);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.904837418036, TestUtils.chiSquareTest(expected, observed), 1E-10);             }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        long[] observed1 = { 500, 623, 72, 70, 31 };\n        double[] expected1 = { 485, 541, 82, 61, 37 };\n        try{ assertEquals( \"chi-square test statistic\", 9.023307936427388, TestUtils.chiSquare(expected1, observed1), 1E-10);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.06051952647453607, TestUtils.chiSquareTest(expected1, observed1), 1E-9);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(\"chi-square test reject\", TestUtils.chiSquareTest(expected1, observed1, 0.07));                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(\"chi-square test accept\", !TestUtils.chiSquareTest(expected1, observed1, 0.05));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            TestUtils.chiSquareTest(expected1, observed1, 95);\n            try{ fail(\"alpha out of range, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }  \n        \n        long[] tooShortObs = { 0 };\n        double[] tooShortEx = { 1 };\n        try {\n            TestUtils.chiSquare(tooShortEx, tooShortObs);\n            try{ fail(\"arguments too short, IllegalArgumentException expected\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        // unmatched arrays\n        long[] unMatchedObs = { 0, 1, 2, 3 };\n        double[] unMatchedEx = { 1, 1, 2 };\n        try {\n            TestUtils.chiSquare(unMatchedEx, unMatchedObs);\n            try{ fail(\"arrays have different lengths, IllegalArgumentException expected\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        \n        // 0 expected count\n        expected[0] = 0;\n        try {\n            TestUtils.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n        // negative observed count\n        expected[0] = 1;\n        observed[0] = -1;\n        try {\n            TestUtils.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n    }",
                "5": "    public void testChiSquare$catena_5() throws Exception {\n        \n        // Target values computed using R version 1.8.1 \n        // Some assembly required ;-)  \n        //      Use sum((obs - exp)^2/exp) for the chi-square statistic and\n        //      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n        \n        long[] observed = {10, 9, 11};\n        double[] expected = {10, 10, 10};\n        try{ assertEquals(\"chi-square statistic\", 0.2,  TestUtils.chiSquare(expected, observed), 10E-12);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.904837418036, TestUtils.chiSquareTest(expected, observed), 1E-10);             }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        long[] observed1 = { 500, 623, 72, 70, 31 };\n        double[] expected1 = { 485, 541, 82, 61, 37 };\n        try{ assertEquals( \"chi-square test statistic\", 9.023307936427388, TestUtils.chiSquare(expected1, observed1), 1E-10);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.06051952647453607, TestUtils.chiSquareTest(expected1, observed1), 1E-9);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test reject\", TestUtils.chiSquareTest(expected1, observed1, 0.07));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(\"chi-square test accept\", !TestUtils.chiSquareTest(expected1, observed1, 0.05));                              /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try {\n            TestUtils.chiSquareTest(expected1, observed1, 95);\n            try{ fail(\"alpha out of range, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }  \n        \n        long[] tooShortObs = { 0 };\n        double[] tooShortEx = { 1 };\n        try {\n            TestUtils.chiSquare(tooShortEx, tooShortObs);\n            try{ fail(\"arguments too short, IllegalArgumentException expected\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        // unmatched arrays\n        long[] unMatchedObs = { 0, 1, 2, 3 };\n        double[] unMatchedEx = { 1, 1, 2 };\n        try {\n            TestUtils.chiSquare(unMatchedEx, unMatchedObs);\n            try{ fail(\"arrays have different lengths, IllegalArgumentException expected\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        \n        // 0 expected count\n        expected[0] = 0;\n        try {\n            TestUtils.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n        // negative observed count\n        expected[0] = 1;\n        observed[0] = -1;\n        try {\n            TestUtils.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n    }",
                "6": "    public void testChiSquare$catena_6() throws Exception {\n        \n        // Target values computed using R version 1.8.1 \n        // Some assembly required ;-)  \n        //      Use sum((obs - exp)^2/exp) for the chi-square statistic and\n        //      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n        \n        long[] observed = {10, 9, 11};\n        double[] expected = {10, 10, 10};\n        try{ assertEquals(\"chi-square statistic\", 0.2,  TestUtils.chiSquare(expected, observed), 10E-12);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.904837418036, TestUtils.chiSquareTest(expected, observed), 1E-10);             }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        long[] observed1 = { 500, 623, 72, 70, 31 };\n        double[] expected1 = { 485, 541, 82, 61, 37 };\n        try{ assertEquals( \"chi-square test statistic\", 9.023307936427388, TestUtils.chiSquare(expected1, observed1), 1E-10);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.06051952647453607, TestUtils.chiSquareTest(expected1, observed1), 1E-9);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test reject\", TestUtils.chiSquareTest(expected1, observed1, 0.07));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test accept\", !TestUtils.chiSquareTest(expected1, observed1, 0.05));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            TestUtils.chiSquareTest(expected1, observed1, 95);\n            fail(\"alpha out of range, IllegalArgumentException expected\");                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }  \n        \n        long[] tooShortObs = { 0 };\n        double[] tooShortEx = { 1 };\n        try {\n            TestUtils.chiSquare(tooShortEx, tooShortObs);\n            try{ fail(\"arguments too short, IllegalArgumentException expected\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        // unmatched arrays\n        long[] unMatchedObs = { 0, 1, 2, 3 };\n        double[] unMatchedEx = { 1, 1, 2 };\n        try {\n            TestUtils.chiSquare(unMatchedEx, unMatchedObs);\n            try{ fail(\"arrays have different lengths, IllegalArgumentException expected\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        \n        // 0 expected count\n        expected[0] = 0;\n        try {\n            TestUtils.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n        // negative observed count\n        expected[0] = 1;\n        observed[0] = -1;\n        try {\n            TestUtils.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n    }",
                "7": "    public void testChiSquare$catena_7() throws Exception {\n        \n        // Target values computed using R version 1.8.1 \n        // Some assembly required ;-)  \n        //      Use sum((obs - exp)^2/exp) for the chi-square statistic and\n        //      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n        \n        long[] observed = {10, 9, 11};\n        double[] expected = {10, 10, 10};\n        try{ assertEquals(\"chi-square statistic\", 0.2,  TestUtils.chiSquare(expected, observed), 10E-12);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.904837418036, TestUtils.chiSquareTest(expected, observed), 1E-10);             }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        long[] observed1 = { 500, 623, 72, 70, 31 };\n        double[] expected1 = { 485, 541, 82, 61, 37 };\n        try{ assertEquals( \"chi-square test statistic\", 9.023307936427388, TestUtils.chiSquare(expected1, observed1), 1E-10);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.06051952647453607, TestUtils.chiSquareTest(expected1, observed1), 1E-9);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test reject\", TestUtils.chiSquareTest(expected1, observed1, 0.07));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test accept\", !TestUtils.chiSquareTest(expected1, observed1, 0.05));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            TestUtils.chiSquareTest(expected1, observed1, 95);\n            try{ fail(\"alpha out of range, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }  \n        \n        long[] tooShortObs = { 0 };\n        double[] tooShortEx = { 1 };\n        try {\n            TestUtils.chiSquare(tooShortEx, tooShortObs);\n            fail(\"arguments too short, IllegalArgumentException expected\");                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        // unmatched arrays\n        long[] unMatchedObs = { 0, 1, 2, 3 };\n        double[] unMatchedEx = { 1, 1, 2 };\n        try {\n            TestUtils.chiSquare(unMatchedEx, unMatchedObs);\n            try{ fail(\"arrays have different lengths, IllegalArgumentException expected\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        \n        // 0 expected count\n        expected[0] = 0;\n        try {\n            TestUtils.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n        // negative observed count\n        expected[0] = 1;\n        observed[0] = -1;\n        try {\n            TestUtils.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n    }",
                "8": "    public void testChiSquare$catena_8() throws Exception {\n        \n        // Target values computed using R version 1.8.1 \n        // Some assembly required ;-)  \n        //      Use sum((obs - exp)^2/exp) for the chi-square statistic and\n        //      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n        \n        long[] observed = {10, 9, 11};\n        double[] expected = {10, 10, 10};\n        try{ assertEquals(\"chi-square statistic\", 0.2,  TestUtils.chiSquare(expected, observed), 10E-12);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.904837418036, TestUtils.chiSquareTest(expected, observed), 1E-10);             }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        long[] observed1 = { 500, 623, 72, 70, 31 };\n        double[] expected1 = { 485, 541, 82, 61, 37 };\n        try{ assertEquals( \"chi-square test statistic\", 9.023307936427388, TestUtils.chiSquare(expected1, observed1), 1E-10);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.06051952647453607, TestUtils.chiSquareTest(expected1, observed1), 1E-9);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test reject\", TestUtils.chiSquareTest(expected1, observed1, 0.07));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test accept\", !TestUtils.chiSquareTest(expected1, observed1, 0.05));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            TestUtils.chiSquareTest(expected1, observed1, 95);\n            try{ fail(\"alpha out of range, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }  \n        \n        long[] tooShortObs = { 0 };\n        double[] tooShortEx = { 1 };\n        try {\n            TestUtils.chiSquare(tooShortEx, tooShortObs);\n            try{ fail(\"arguments too short, IllegalArgumentException expected\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        // unmatched arrays\n        long[] unMatchedObs = { 0, 1, 2, 3 };\n        double[] unMatchedEx = { 1, 1, 2 };\n        try {\n            TestUtils.chiSquare(unMatchedEx, unMatchedObs);\n            fail(\"arrays have different lengths, IllegalArgumentException expected\");                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        \n        // 0 expected count\n        expected[0] = 0;\n        try {\n            TestUtils.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n        // negative observed count\n        expected[0] = 1;\n        observed[0] = -1;\n        try {\n            TestUtils.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n    }",
                "9": "    public void testChiSquare$catena_9() throws Exception {\n        \n        // Target values computed using R version 1.8.1 \n        // Some assembly required ;-)  \n        //      Use sum((obs - exp)^2/exp) for the chi-square statistic and\n        //      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n        \n        long[] observed = {10, 9, 11};\n        double[] expected = {10, 10, 10};\n        try{ assertEquals(\"chi-square statistic\", 0.2,  TestUtils.chiSquare(expected, observed), 10E-12);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.904837418036, TestUtils.chiSquareTest(expected, observed), 1E-10);             }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        long[] observed1 = { 500, 623, 72, 70, 31 };\n        double[] expected1 = { 485, 541, 82, 61, 37 };\n        try{ assertEquals( \"chi-square test statistic\", 9.023307936427388, TestUtils.chiSquare(expected1, observed1), 1E-10);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.06051952647453607, TestUtils.chiSquareTest(expected1, observed1), 1E-9);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test reject\", TestUtils.chiSquareTest(expected1, observed1, 0.07));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test accept\", !TestUtils.chiSquareTest(expected1, observed1, 0.05));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            TestUtils.chiSquareTest(expected1, observed1, 95);\n            try{ fail(\"alpha out of range, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }  \n        \n        long[] tooShortObs = { 0 };\n        double[] tooShortEx = { 1 };\n        try {\n            TestUtils.chiSquare(tooShortEx, tooShortObs);\n            try{ fail(\"arguments too short, IllegalArgumentException expected\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        // unmatched arrays\n        long[] unMatchedObs = { 0, 1, 2, 3 };\n        double[] unMatchedEx = { 1, 1, 2 };\n        try {\n            TestUtils.chiSquare(unMatchedEx, unMatchedObs);\n            try{ fail(\"arrays have different lengths, IllegalArgumentException expected\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        \n        // 0 expected count\n        expected[0] = 0;\n        try {\n            TestUtils.chiSquareTest(expected, observed, .01);\n            fail(\"bad expected count, IllegalArgumentException expected\");                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n        // negative observed count\n        expected[0] = 1;\n        observed[0] = -1;\n        try {\n            TestUtils.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n    }",
                "10": "    public void testChiSquare$catena_10() throws Exception {\n        \n        // Target values computed using R version 1.8.1 \n        // Some assembly required ;-)  \n        //      Use sum((obs - exp)^2/exp) for the chi-square statistic and\n        //      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n        \n        long[] observed = {10, 9, 11};\n        double[] expected = {10, 10, 10};\n        try{ assertEquals(\"chi-square statistic\", 0.2,  TestUtils.chiSquare(expected, observed), 10E-12);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.904837418036, TestUtils.chiSquareTest(expected, observed), 1E-10);             }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        long[] observed1 = { 500, 623, 72, 70, 31 };\n        double[] expected1 = { 485, 541, 82, 61, 37 };\n        try{ assertEquals( \"chi-square test statistic\", 9.023307936427388, TestUtils.chiSquare(expected1, observed1), 1E-10);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.06051952647453607, TestUtils.chiSquareTest(expected1, observed1), 1E-9);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test reject\", TestUtils.chiSquareTest(expected1, observed1, 0.07));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test accept\", !TestUtils.chiSquareTest(expected1, observed1, 0.05));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            TestUtils.chiSquareTest(expected1, observed1, 95);\n            try{ fail(\"alpha out of range, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }  \n        \n        long[] tooShortObs = { 0 };\n        double[] tooShortEx = { 1 };\n        try {\n            TestUtils.chiSquare(tooShortEx, tooShortObs);\n            try{ fail(\"arguments too short, IllegalArgumentException expected\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        // unmatched arrays\n        long[] unMatchedObs = { 0, 1, 2, 3 };\n        double[] unMatchedEx = { 1, 1, 2 };\n        try {\n            TestUtils.chiSquare(unMatchedEx, unMatchedObs);\n            try{ fail(\"arrays have different lengths, IllegalArgumentException expected\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        \n        // 0 expected count\n        expected[0] = 0;\n        try {\n            TestUtils.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n        // negative observed count\n        expected[0] = 1;\n        observed[0] = -1;\n        try {\n            TestUtils.chiSquareTest(expected, observed, .01);\n            fail(\"bad expected count, IllegalArgumentException expected\");                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n    }"
            }
        }
    },
    "111": {
        "failing_tests": [
            "org.apache.commons.math.stat.inference.ChiSquareFactoryTest::testChiSquare$catena_2",
            "org.apache.commons.math.stat.inference.TestUtilsTest::testChiSquare$catena_3",
            "org.apache.commons.math.stat.inference.TestUtilsTest::testChiSquare$catena_5",
            "org.apache.commons.math.stat.inference.ChiSquareTestTest::testChiSquare$catena_2",
            "org.apache.commons.math.stat.inference.ChiSquareFactoryTest::testChiSquare$catena_3",
            "org.apache.commons.math.stat.inference.TestUtilsTest::testChiSquareLargeTestStatistic$catena_1",
            "org.apache.commons.math.stat.inference.ChiSquareTestTest::testChiSquareLargeTestStatistic$catena_1",
            "org.apache.commons.math.stat.inference.TestUtilsTest::testChiSquare$catena_2",
            "org.apache.commons.math.stat.inference.ChiSquareTestTest::testChiSquare$catena_5",
            "org.apache.commons.math.stat.inference.ChiSquareFactoryTest::testChiSquare$catena_5",
            "org.apache.commons.math.stat.inference.ChiSquareFactoryTest::testChiSquareLargeTestStatistic$catena_1",
            "org.apache.commons.math.stat.inference.ChiSquareTestTest::testChiSquare$catena_3"
        ]
    }
}