---
Begin generate bug_id: Lang_5
num_of_hunks: 2
timeout for running: 3600
use working dir: ./working/data/Lang_5
Try to checkout Lang_5
build dir: ['./working/data/Lang_5/target/classes', './working/data/Lang_5/target/tests']
init FileManager
trace file: src/main/java/org/apache/commons/lang3/LocaleUtils.java
trying to replace old failing tests
edit: replace from 503 range 41 at src/test/java/org/apache/commons/lang3/LocaleUtilsTest.java
to
    @Test
    public void testLang865$catena_0() {
        assertValidToLocale("_GB", "", "GB", "");                                                                     /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertValidToLocale("_GB_P", "", "GB", "P");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertValidToLocale("_GB_POSIX", "", "GB", "POSIX");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            LocaleUtils.toLocale("_G");
            try{ fail("Must be at least 3 chars if starts with underscore");                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (final IllegalArgumentException iae) {
        }
        try {
            LocaleUtils.toLocale("_Gb");
            try{ fail("Must be uppercase if starts with underscore");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (final IllegalArgumentException iae) {
        }
        try {
            LocaleUtils.toLocale("_gB");
            try{ fail("Must be uppercase if starts with underscore");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (final IllegalArgumentException iae) {
        }
        try {
            LocaleUtils.toLocale("_1B");
            try{ fail("Must be letter if starts with underscore");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (final IllegalArgumentException iae) {
        }
        try {
            LocaleUtils.toLocale("_G1");
            try{ fail("Must be letter if starts with underscore");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (final IllegalArgumentException iae) {
        }
        try {
            LocaleUtils.toLocale("_GB_");
            try{ fail("Must be at least 5 chars if starts with underscore");                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (final IllegalArgumentException iae) {
        }
        try {
            LocaleUtils.toLocale("_GBAP");
            try{ fail("Must have underscore after the country if starts with underscore and is at least 5 chars");    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (final IllegalArgumentException iae) {
        }
    }     @Test
    public void testLang865$catena_1() {
        try{ assertValidToLocale("_GB", "", "GB", "");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        assertValidToLocale("_GB_P", "", "GB", "P");                                                                  /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertValidToLocale("_GB_POSIX", "", "GB", "POSIX");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            LocaleUtils.toLocale("_G");
            try{ fail("Must be at least 3 chars if starts with underscore");                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (final IllegalArgumentException iae) {
        }
        try {
            LocaleUtils.toLocale("_Gb");
            try{ fail("Must be uppercase if starts with underscore");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (final IllegalArgumentException iae) {
        }
        try {
            LocaleUtils.toLocale("_gB");
            try{ fail("Must be uppercase if starts with underscore");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (final IllegalArgumentException iae) {
        }
        try {
            LocaleUtils.toLocale("_1B");
            try{ fail("Must be letter if starts with underscore");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (final IllegalArgumentException iae) {
        }
        try {
            LocaleUtils.toLocale("_G1");
            try{ fail("Must be letter if starts with underscore");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (final IllegalArgumentException iae) {
        }
        try {
            LocaleUtils.toLocale("_GB_");
            try{ fail("Must be at least 5 chars if starts with underscore");                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (final IllegalArgumentException iae) {
        }
        try {
            LocaleUtils.toLocale("_GBAP");
            try{ fail("Must have underscore after the country if starts with underscore and is at least 5 chars");    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (final IllegalArgumentException iae) {
        }
    }     @Test
    public void testLang865$catena_2() {
        try{ assertValidToLocale("_GB", "", "GB", "");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertValidToLocale("_GB_P", "", "GB", "P");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        assertValidToLocale("_GB_POSIX", "", "GB", "POSIX");                                                          /***** ORIGINAL ASSERTION IS HERE *****/
        try {
            LocaleUtils.toLocale("_G");
            try{ fail("Must be at least 3 chars if starts with underscore");                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (final IllegalArgumentException iae) {
        }
        try {
            LocaleUtils.toLocale("_Gb");
            try{ fail("Must be uppercase if starts with underscore");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (final IllegalArgumentException iae) {
        }
        try {
            LocaleUtils.toLocale("_gB");
            try{ fail("Must be uppercase if starts with underscore");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (final IllegalArgumentException iae) {
        }
        try {
            LocaleUtils.toLocale("_1B");
            try{ fail("Must be letter if starts with underscore");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (final IllegalArgumentException iae) {
        }
        try {
            LocaleUtils.toLocale("_G1");
            try{ fail("Must be letter if starts with underscore");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (final IllegalArgumentException iae) {
        }
        try {
            LocaleUtils.toLocale("_GB_");
            try{ fail("Must be at least 5 chars if starts with underscore");                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (final IllegalArgumentException iae) {
        }
        try {
            LocaleUtils.toLocale("_GBAP");
            try{ fail("Must have underscore after the country if starts with underscore and is at least 5 chars");    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (final IllegalArgumentException iae) {
        }
    }     @Test
    public void testLang865$catena_3() {
        try{ assertValidToLocale("_GB", "", "GB", "");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertValidToLocale("_GB_P", "", "GB", "P");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertValidToLocale("_GB_POSIX", "", "GB", "POSIX");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            LocaleUtils.toLocale("_G");
            fail("Must be at least 3 chars if starts with underscore");                                               /***** ORIGINAL ASSERTION IS HERE *****/
        } catch (final IllegalArgumentException iae) {
        }
        try {
            LocaleUtils.toLocale("_Gb");
            try{ fail("Must be uppercase if starts with underscore");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (final IllegalArgumentException iae) {
        }
        try {
            LocaleUtils.toLocale("_gB");
            try{ fail("Must be uppercase if starts with underscore");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (final IllegalArgumentException iae) {
        }
        try {
            LocaleUtils.toLocale("_1B");
            try{ fail("Must be letter if starts with underscore");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (final IllegalArgumentException iae) {
        }
        try {
            LocaleUtils.toLocale("_G1");
            try{ fail("Must be letter if starts with underscore");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (final IllegalArgumentException iae) {
        }
        try {
            LocaleUtils.toLocale("_GB_");
            try{ fail("Must be at least 5 chars if starts with underscore");                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (final IllegalArgumentException iae) {
        }
        try {
            LocaleUtils.toLocale("_GBAP");
            try{ fail("Must have underscore after the country if starts with underscore and is at least 5 chars");    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (final IllegalArgumentException iae) {
        }
    }     @Test
    public void testLang865$catena_4() {
        try{ assertValidToLocale("_GB", "", "GB", "");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertValidToLocale("_GB_P", "", "GB", "P");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertValidToLocale("_GB_POSIX", "", "GB", "POSIX");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            LocaleUtils.toLocale("_G");
            try{ fail("Must be at least 3 chars if starts with underscore");                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (final IllegalArgumentException iae) {
        }
        try {
            LocaleUtils.toLocale("_Gb");
            fail("Must be uppercase if starts with underscore");                                                      /***** ORIGINAL ASSERTION IS HERE *****/
        } catch (final IllegalArgumentException iae) {
        }
        try {
            LocaleUtils.toLocale("_gB");
            try{ fail("Must be uppercase if starts with underscore");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (final IllegalArgumentException iae) {
        }
        try {
            LocaleUtils.toLocale("_1B");
            try{ fail("Must be letter if starts with underscore");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (final IllegalArgumentException iae) {
        }
        try {
            LocaleUtils.toLocale("_G1");
            try{ fail("Must be letter if starts with underscore");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (final IllegalArgumentException iae) {
        }
        try {
            LocaleUtils.toLocale("_GB_");
            try{ fail("Must be at least 5 chars if starts with underscore");                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (final IllegalArgumentException iae) {
        }
        try {
            LocaleUtils.toLocale("_GBAP");
            try{ fail("Must have underscore after the country if starts with underscore and is at least 5 chars");    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (final IllegalArgumentException iae) {
        }
    }     @Test
    public void testLang865$catena_5() {
        try{ assertValidToLocale("_GB", "", "GB", "");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertValidToLocale("_GB_P", "", "GB", "P");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertValidToLocale("_GB_POSIX", "", "GB", "POSIX");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            LocaleUtils.toLocale("_G");
            try{ fail("Must be at least 3 chars if starts with underscore");                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (final IllegalArgumentException iae) {
        }
        try {
            LocaleUtils.toLocale("_Gb");
            try{ fail("Must be uppercase if starts with underscore");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (final IllegalArgumentException iae) {
        }
        try {
            LocaleUtils.toLocale("_gB");
            fail("Must be uppercase if starts with underscore");                                                      /***** ORIGINAL ASSERTION IS HERE *****/
        } catch (final IllegalArgumentException iae) {
        }
        try {
            LocaleUtils.toLocale("_1B");
            try{ fail("Must be letter if starts with underscore");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (final IllegalArgumentException iae) {
        }
        try {
            LocaleUtils.toLocale("_G1");
            try{ fail("Must be letter if starts with underscore");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (final IllegalArgumentException iae) {
        }
        try {
            LocaleUtils.toLocale("_GB_");
            try{ fail("Must be at least 5 chars if starts with underscore");                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (final IllegalArgumentException iae) {
        }
        try {
            LocaleUtils.toLocale("_GBAP");
            try{ fail("Must have underscore after the country if starts with underscore and is at least 5 chars");    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (final IllegalArgumentException iae) {
        }
    }     @Test
    public void testLang865$catena_6() {
        try{ assertValidToLocale("_GB", "", "GB", "");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertValidToLocale("_GB_P", "", "GB", "P");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertValidToLocale("_GB_POSIX", "", "GB", "POSIX");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            LocaleUtils.toLocale("_G");
            try{ fail("Must be at least 3 chars if starts with underscore");                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (final IllegalArgumentException iae) {
        }
        try {
            LocaleUtils.toLocale("_Gb");
            try{ fail("Must be uppercase if starts with underscore");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (final IllegalArgumentException iae) {
        }
        try {
            LocaleUtils.toLocale("_gB");
            try{ fail("Must be uppercase if starts with underscore");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (final IllegalArgumentException iae) {
        }
        try {
            LocaleUtils.toLocale("_1B");
            fail("Must be letter if starts with underscore");                                                         /***** ORIGINAL ASSERTION IS HERE *****/
        } catch (final IllegalArgumentException iae) {
        }
        try {
            LocaleUtils.toLocale("_G1");
            try{ fail("Must be letter if starts with underscore");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (final IllegalArgumentException iae) {
        }
        try {
            LocaleUtils.toLocale("_GB_");
            try{ fail("Must be at least 5 chars if starts with underscore");                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (final IllegalArgumentException iae) {
        }
        try {
            LocaleUtils.toLocale("_GBAP");
            try{ fail("Must have underscore after the country if starts with underscore and is at least 5 chars");    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (final IllegalArgumentException iae) {
        }
    }     @Test
    public void testLang865$catena_7() {
        try{ assertValidToLocale("_GB", "", "GB", "");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertValidToLocale("_GB_P", "", "GB", "P");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertValidToLocale("_GB_POSIX", "", "GB", "POSIX");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            LocaleUtils.toLocale("_G");
            try{ fail("Must be at least 3 chars if starts with underscore");                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (final IllegalArgumentException iae) {
        }
        try {
            LocaleUtils.toLocale("_Gb");
            try{ fail("Must be uppercase if starts with underscore");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (final IllegalArgumentException iae) {
        }
        try {
            LocaleUtils.toLocale("_gB");
            try{ fail("Must be uppercase if starts with underscore");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (final IllegalArgumentException iae) {
        }
        try {
            LocaleUtils.toLocale("_1B");
            try{ fail("Must be letter if starts with underscore");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (final IllegalArgumentException iae) {
        }
        try {
            LocaleUtils.toLocale("_G1");
            fail("Must be letter if starts with underscore");                                                         /***** ORIGINAL ASSERTION IS HERE *****/
        } catch (final IllegalArgumentException iae) {
        }
        try {
            LocaleUtils.toLocale("_GB_");
            try{ fail("Must be at least 5 chars if starts with underscore");                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (final IllegalArgumentException iae) {
        }
        try {
            LocaleUtils.toLocale("_GBAP");
            try{ fail("Must have underscore after the country if starts with underscore and is at least 5 chars");    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (final IllegalArgumentException iae) {
        }
    }     @Test
    public void testLang865$catena_8() {
        try{ assertValidToLocale("_GB", "", "GB", "");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertValidToLocale("_GB_P", "", "GB", "P");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertValidToLocale("_GB_POSIX", "", "GB", "POSIX");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            LocaleUtils.toLocale("_G");
            try{ fail("Must be at least 3 chars if starts with underscore");                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (final IllegalArgumentException iae) {
        }
        try {
            LocaleUtils.toLocale("_Gb");
            try{ fail("Must be uppercase if starts with underscore");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (final IllegalArgumentException iae) {
        }
        try {
            LocaleUtils.toLocale("_gB");
            try{ fail("Must be uppercase if starts with underscore");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (final IllegalArgumentException iae) {
        }
        try {
            LocaleUtils.toLocale("_1B");
            try{ fail("Must be letter if starts with underscore");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (final IllegalArgumentException iae) {
        }
        try {
            LocaleUtils.toLocale("_G1");
            try{ fail("Must be letter if starts with underscore");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (final IllegalArgumentException iae) {
        }
        try {
            LocaleUtils.toLocale("_GB_");
            fail("Must be at least 5 chars if starts with underscore");                                               /***** ORIGINAL ASSERTION IS HERE *****/
        } catch (final IllegalArgumentException iae) {
        }
        try {
            LocaleUtils.toLocale("_GBAP");
            try{ fail("Must have underscore after the country if starts with underscore and is at least 5 chars");    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (final IllegalArgumentException iae) {
        }
    }     @Test
    public void testLang865$catena_9() {
        try{ assertValidToLocale("_GB", "", "GB", "");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertValidToLocale("_GB_P", "", "GB", "P");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertValidToLocale("_GB_POSIX", "", "GB", "POSIX");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            LocaleUtils.toLocale("_G");
            try{ fail("Must be at least 3 chars if starts with underscore");                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (final IllegalArgumentException iae) {
        }
        try {
            LocaleUtils.toLocale("_Gb");
            try{ fail("Must be uppercase if starts with underscore");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (final IllegalArgumentException iae) {
        }
        try {
            LocaleUtils.toLocale("_gB");
            try{ fail("Must be uppercase if starts with underscore");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (final IllegalArgumentException iae) {
        }
        try {
            LocaleUtils.toLocale("_1B");
            try{ fail("Must be letter if starts with underscore");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (final IllegalArgumentException iae) {
        }
        try {
            LocaleUtils.toLocale("_G1");
            try{ fail("Must be letter if starts with underscore");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (final IllegalArgumentException iae) {
        }
        try {
            LocaleUtils.toLocale("_GB_");
            try{ fail("Must be at least 5 chars if starts with underscore");                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (final IllegalArgumentException iae) {
        }
        try {
            LocaleUtils.toLocale("_GBAP");
            fail("Must have underscore after the country if starts with underscore and is at least 5 chars");         /***** ORIGINAL ASSERTION IS HERE *****/
        } catch (final IllegalArgumentException iae) {
        }
    }
trace file: src/test/java/org/apache/commons/lang3/LocaleUtilsTest.java
new test num: 10
ori test num: 0
pattern: 00
patches are written to file
running tests...
used time: Finished in 42.75 seconds
Failing tests: 3
	org.apache.commons.lang3.LocaleUtilsTest::testLang865$catena_0
	org.apache.commons.lang3.LocaleUtilsTest::testLang865$catena_1
	org.apache.commons.lang3.LocaleUtilsTest::testLang865$catena_2
processed: 00
pattern: 01
try to fix hunk: 1
insert before 128 with         }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01
pattern: 10
try to fix hunk: 0
insert before 97 with         if (ch0 == '_') {
            if (len < 3) {
                throw new IllegalArgumentException("Invalid locale format: " + str);
            }
            final char ch1 = str.charAt(1);
            final char ch2 = str.charAt(2);
            if (!Character.isUpperCase(ch1) || !Character.isUpperCase(ch2)) {
                throw new IllegalArgumentException("Invalid locale format: " + str);
            }
            if (len == 3) {
                return new Locale("", str.substring(1, 3));
            }
            if (len < 5) {
                throw new IllegalArgumentException("Invalid locale format: " + str);
            }
            if (str.charAt(3) != '_') {
                throw new IllegalArgumentException("Invalid locale format: " + str);
            }
            return new Locale("", str.substring(1, 3), str.substring(4));
        } else {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10
pattern: 11
try to fix hunk: 0
insert before 97 with         if (ch0 == '_') {
            if (len < 3) {
                throw new IllegalArgumentException("Invalid locale format: " + str);
            }
            final char ch1 = str.charAt(1);
            final char ch2 = str.charAt(2);
            if (!Character.isUpperCase(ch1) || !Character.isUpperCase(ch2)) {
                throw new IllegalArgumentException("Invalid locale format: " + str);
            }
            if (len == 3) {
                return new Locale("", str.substring(1, 3));
            }
            if (len < 5) {
                throw new IllegalArgumentException("Invalid locale format: " + str);
            }
            if (str.charAt(3) != '_') {
                throw new IllegalArgumentException("Invalid locale format: " + str);
            }
            return new Locale("", str.substring(1, 3), str.substring(4));
        } else {

try to fix hunk: 1
insert before 128 with         }

patches are written to file
running tests...
used time: Finished in 33.36 seconds
Failing tests: 0
Can independently fix ['org.apache.commons.lang3.LocaleUtilsTest::testLang865$catena_0', 'org.apache.commons.lang3.LocaleUtilsTest::testLang865$catena_1', 'org.apache.commons.lang3.LocaleUtilsTest::testLang865$catena_2']
select new bug
Pattern: 11
new failing tests:
org.apache.commons.lang3.LocaleUtilsTest::testLang865$catena_0
org.apache.commons.lang3.LocaleUtilsTest::testLang865$catena_1
org.apache.commons.lang3.LocaleUtilsTest::testLang865$catena_2
Save found bug
processed: 11
Find 1 new bugs
