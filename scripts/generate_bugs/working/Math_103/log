---
Begin generate bug_id: Math_103
num_of_hunks: 2
timeout for running: 3600
use working dir: ./working/data/Math_103
Try to checkout Math_103
build dir: ['./working/data/Math_103/target/classes', './working/data/Math_103/target/test-classes']
init FileManager
trace file: src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java
trying to replace old failing tests
edit: replace from 128 range 17 at src/test/org/apache/commons/math/distribution/NormalDistributionTest.java
to
    public void testExtremeValues$catena_0() throws Exception {
        NormalDistribution distribution = (NormalDistribution) getDistribution();
        distribution.setMean(0);
        distribution.setStandardDeviation(1);
        for (int i = 0; i < 100; i+=5) { // make sure no convergence exception
            double lowerTail = distribution.cumulativeProbability((double)-i);
            double upperTail = distribution.cumulativeProbability((double) i);
            if (i < 10) { // make sure not top-coded
                assertTrue(lowerTail > 0.0d);                                                               /***** ORIGINAL ASSERTION IS HERE *****/
                try{ assertTrue(upperTail < 1.0d);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
            }
            else { // make sure top coding not reversed
                try{ assertTrue(lowerTail < 0.00001);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
                try{ assertTrue(upperTail > 0.99999);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
            }
        } 
   }     public void testExtremeValues$catena_1() throws Exception {
        NormalDistribution distribution = (NormalDistribution) getDistribution();
        distribution.setMean(0);
        distribution.setStandardDeviation(1);
        for (int i = 0; i < 100; i+=5) { // make sure no convergence exception
            double lowerTail = distribution.cumulativeProbability((double)-i);
            double upperTail = distribution.cumulativeProbability((double) i);
            if (i < 10) { // make sure not top-coded
                try{ assertTrue(lowerTail > 0.0d);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
                assertTrue(upperTail < 1.0d);                                                               /***** ORIGINAL ASSERTION IS HERE *****/
            }
            else { // make sure top coding not reversed
                try{ assertTrue(lowerTail < 0.00001);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
                try{ assertTrue(upperTail > 0.99999);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
            }
        } 
   }     public void testExtremeValues$catena_2() throws Exception {
        NormalDistribution distribution = (NormalDistribution) getDistribution();
        distribution.setMean(0);
        distribution.setStandardDeviation(1);
        for (int i = 0; i < 100; i+=5) { // make sure no convergence exception
            double lowerTail = distribution.cumulativeProbability((double)-i);
            double upperTail = distribution.cumulativeProbability((double) i);
            if (i < 10) { // make sure not top-coded
                try{ assertTrue(lowerTail > 0.0d);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
                try{ assertTrue(upperTail < 1.0d);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
            }
            else { // make sure top coding not reversed
                assertTrue(lowerTail < 0.00001);                                                            /***** ORIGINAL ASSERTION IS HERE *****/
                try{ assertTrue(upperTail > 0.99999);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
            }
        } 
   }     public void testExtremeValues$catena_3() throws Exception {
        NormalDistribution distribution = (NormalDistribution) getDistribution();
        distribution.setMean(0);
        distribution.setStandardDeviation(1);
        for (int i = 0; i < 100; i+=5) { // make sure no convergence exception
            double lowerTail = distribution.cumulativeProbability((double)-i);
            double upperTail = distribution.cumulativeProbability((double) i);
            if (i < 10) { // make sure not top-coded
                try{ assertTrue(lowerTail > 0.0d);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
                try{ assertTrue(upperTail < 1.0d);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
            }
            else { // make sure top coding not reversed
                try{ assertTrue(lowerTail < 0.00001);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
                assertTrue(upperTail > 0.99999);                                                            /***** ORIGINAL ASSERTION IS HERE *****/
            }
        } 
   }
trace file: src/test/org/apache/commons/math/distribution/NormalDistributionTest.java
new test num: 4
ori test num: 0
pattern: 00
patches are written to file
running tests...
used time: Finished in 25.99 seconds
Failing tests: 4
	org.apache.commons.math.distribution.NormalDistributionTest::testExtremeValues$catena_0
	org.apache.commons.math.distribution.NormalDistributionTest::testExtremeValues$catena_1
	org.apache.commons.math.distribution.NormalDistributionTest::testExtremeValues$catena_2
	org.apache.commons.math.distribution.NormalDistributionTest::testExtremeValues$catena_3
processed: 00
pattern: 01
try to fix hunk: 1
insert before 111 with         } catch (MaxIterationsExceededException ex) {
            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
                return 0.0d;
            } else if (x > (mean + 20 * standardDeviation)) {
                return 1.0d;
            } else {
                throw ex;
            }
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01
pattern: 10
try to fix hunk: 0
insert before 109 with         try {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10
pattern: 11
try to fix hunk: 0
insert before 109 with         try {

try to fix hunk: 1
insert before 111 with         } catch (MaxIterationsExceededException ex) {
            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
                return 0.0d;
            } else if (x > (mean + 20 * standardDeviation)) {
                return 1.0d;
            } else {
                throw ex;
            }
        }

patches are written to file
running tests...
used time: Finished in 21.10 seconds
Failing tests: 0
Can independently fix ['org.apache.commons.math.distribution.NormalDistributionTest::testExtremeValues$catena_3', 'org.apache.commons.math.distribution.NormalDistributionTest::testExtremeValues$catena_2', 'org.apache.commons.math.distribution.NormalDistributionTest::testExtremeValues$catena_0', 'org.apache.commons.math.distribution.NormalDistributionTest::testExtremeValues$catena_1']
select new bug
Pattern: 11
new failing tests:
org.apache.commons.math.distribution.NormalDistributionTest::testExtremeValues$catena_3
org.apache.commons.math.distribution.NormalDistributionTest::testExtremeValues$catena_2
org.apache.commons.math.distribution.NormalDistributionTest::testExtremeValues$catena_0
org.apache.commons.math.distribution.NormalDistributionTest::testExtremeValues$catena_1
Save found bug
processed: 11
Find 1 new bugs
