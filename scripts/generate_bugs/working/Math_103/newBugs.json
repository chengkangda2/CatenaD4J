{
    "original": {
        "num_of_hunks": 2,
        "0": {
            "file_name": "src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java",
            "replaced_with": "        try {\n",
            "patch_type": "insert",
            "next_line_no": 109
        },
        "1": {
            "file_name": "src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java",
            "replaced_with": "        } catch (MaxIterationsExceededException ex) {\n            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38\n                return 0.0d;\n            } else if (x > (mean + 20 * standardDeviation)) {\n                return 1.0d;\n            } else {\n                throw ex;\n            }\n        }\n",
            "patch_type": "insert",
            "next_line_no": 111
        }
    },
    "method": {
        "failing_tests": [
            "org.apache.commons.math.distribution.NormalDistributionTest::testExtremeValues"
        ],
        "org.apache.commons.math.distribution.NormalDistributionTest::testExtremeValues": {
            "file_path": "src/test/org/apache/commons/math/distribution/NormalDistributionTest.java",
            "Instance": "Begin: Pos(128, 12)\nEnd: Pos(144, 4)\nSource: /root/workbench/exportInfo/d4j_buggy/Math_103/src/test//org/apache/commons/math/distribution/NormalDistributionTest.java\nName: testExtremeValues\nChilds: [StatementAssertion<Begin: Pos(136, 17), End: Pos(136, 45)>,\nStatementAssertion<Begin: Pos(137, 17), End: Pos(137, 45)>,\nStatementAssertion<Begin: Pos(140, 17), End: Pos(140, 48)>,\nStatementAssertion<Begin: Pos(141, 17), End: Pos(141, 48)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Math_103/src/test//org/apache/commons/math/distribution/NormalDistributionTest.java",
            "name": "testExtremeValues",
            "begin": "Pos(128, 12)",
            "end": "Pos(144, 4)",
            "begin_line_no": 128,
            "end_line_no": 144,
            "child": [
                "Begin: Pos(136, 17)\nEnd: Pos(136, 45)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(137, 17)\nEnd: Pos(137, 45)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(140, 17)\nEnd: Pos(140, 48)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(141, 17)\nEnd: Pos(141, 48)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testExtremeValues$catena_0() throws Exception {\n        NormalDistribution distribution = (NormalDistribution) getDistribution();\n        distribution.setMean(0);\n        distribution.setStandardDeviation(1);\n        for (int i = 0; i < 100; i+=5) { // make sure no convergence exception\n            double lowerTail = distribution.cumulativeProbability((double)-i);\n            double upperTail = distribution.cumulativeProbability((double) i);\n            if (i < 10) { // make sure not top-coded\n                assertTrue(lowerTail > 0.0d);                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n                try{ assertTrue(upperTail < 1.0d);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            else { // make sure top coding not reversed\n                try{ assertTrue(lowerTail < 0.00001);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertTrue(upperTail > 0.99999);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        } \n   }",
                "    public void testExtremeValues$catena_1() throws Exception {\n        NormalDistribution distribution = (NormalDistribution) getDistribution();\n        distribution.setMean(0);\n        distribution.setStandardDeviation(1);\n        for (int i = 0; i < 100; i+=5) { // make sure no convergence exception\n            double lowerTail = distribution.cumulativeProbability((double)-i);\n            double upperTail = distribution.cumulativeProbability((double) i);\n            if (i < 10) { // make sure not top-coded\n                try{ assertTrue(lowerTail > 0.0d);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n                assertTrue(upperTail < 1.0d);                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n            }\n            else { // make sure top coding not reversed\n                try{ assertTrue(lowerTail < 0.00001);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertTrue(upperTail > 0.99999);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        } \n   }",
                "    public void testExtremeValues$catena_2() throws Exception {\n        NormalDistribution distribution = (NormalDistribution) getDistribution();\n        distribution.setMean(0);\n        distribution.setStandardDeviation(1);\n        for (int i = 0; i < 100; i+=5) { // make sure no convergence exception\n            double lowerTail = distribution.cumulativeProbability((double)-i);\n            double upperTail = distribution.cumulativeProbability((double) i);\n            if (i < 10) { // make sure not top-coded\n                try{ assertTrue(lowerTail > 0.0d);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertTrue(upperTail < 1.0d);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            else { // make sure top coding not reversed\n                assertTrue(lowerTail < 0.00001);                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n                try{ assertTrue(upperTail > 0.99999);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        } \n   }",
                "    public void testExtremeValues$catena_3() throws Exception {\n        NormalDistribution distribution = (NormalDistribution) getDistribution();\n        distribution.setMean(0);\n        distribution.setStandardDeviation(1);\n        for (int i = 0; i < 100; i+=5) { // make sure no convergence exception\n            double lowerTail = distribution.cumulativeProbability((double)-i);\n            double upperTail = distribution.cumulativeProbability((double) i);\n            if (i < 10) { // make sure not top-coded\n                try{ assertTrue(lowerTail > 0.0d);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertTrue(upperTail < 1.0d);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            else { // make sure top coding not reversed\n                try{ assertTrue(lowerTail < 0.00001);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n                assertTrue(upperTail > 0.99999);                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n            }\n        } \n   }"
            ],
            "func": {
                "0": "    public void testExtremeValues$catena_0() throws Exception {\n        NormalDistribution distribution = (NormalDistribution) getDistribution();\n        distribution.setMean(0);\n        distribution.setStandardDeviation(1);\n        for (int i = 0; i < 100; i+=5) { // make sure no convergence exception\n            double lowerTail = distribution.cumulativeProbability((double)-i);\n            double upperTail = distribution.cumulativeProbability((double) i);\n            if (i < 10) { // make sure not top-coded\n                assertTrue(lowerTail > 0.0d);                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n                try{ assertTrue(upperTail < 1.0d);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            else { // make sure top coding not reversed\n                try{ assertTrue(lowerTail < 0.00001);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertTrue(upperTail > 0.99999);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        } \n   }",
                "1": "    public void testExtremeValues$catena_1() throws Exception {\n        NormalDistribution distribution = (NormalDistribution) getDistribution();\n        distribution.setMean(0);\n        distribution.setStandardDeviation(1);\n        for (int i = 0; i < 100; i+=5) { // make sure no convergence exception\n            double lowerTail = distribution.cumulativeProbability((double)-i);\n            double upperTail = distribution.cumulativeProbability((double) i);\n            if (i < 10) { // make sure not top-coded\n                try{ assertTrue(lowerTail > 0.0d);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n                assertTrue(upperTail < 1.0d);                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n            }\n            else { // make sure top coding not reversed\n                try{ assertTrue(lowerTail < 0.00001);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertTrue(upperTail > 0.99999);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        } \n   }",
                "2": "    public void testExtremeValues$catena_2() throws Exception {\n        NormalDistribution distribution = (NormalDistribution) getDistribution();\n        distribution.setMean(0);\n        distribution.setStandardDeviation(1);\n        for (int i = 0; i < 100; i+=5) { // make sure no convergence exception\n            double lowerTail = distribution.cumulativeProbability((double)-i);\n            double upperTail = distribution.cumulativeProbability((double) i);\n            if (i < 10) { // make sure not top-coded\n                try{ assertTrue(lowerTail > 0.0d);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertTrue(upperTail < 1.0d);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            else { // make sure top coding not reversed\n                assertTrue(lowerTail < 0.00001);                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n                try{ assertTrue(upperTail > 0.99999);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        } \n   }",
                "3": "    public void testExtremeValues$catena_3() throws Exception {\n        NormalDistribution distribution = (NormalDistribution) getDistribution();\n        distribution.setMean(0);\n        distribution.setStandardDeviation(1);\n        for (int i = 0; i < 100; i+=5) { // make sure no convergence exception\n            double lowerTail = distribution.cumulativeProbability((double)-i);\n            double upperTail = distribution.cumulativeProbability((double) i);\n            if (i < 10) { // make sure not top-coded\n                try{ assertTrue(lowerTail > 0.0d);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertTrue(upperTail < 1.0d);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            else { // make sure top coding not reversed\n                try{ assertTrue(lowerTail < 0.00001);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n                assertTrue(upperTail > 0.99999);                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n            }\n        } \n   }"
            }
        }
    },
    "11": {
        "failing_tests": [
            "org.apache.commons.math.distribution.NormalDistributionTest::testExtremeValues$catena_3",
            "org.apache.commons.math.distribution.NormalDistributionTest::testExtremeValues$catena_2",
            "org.apache.commons.math.distribution.NormalDistributionTest::testExtremeValues$catena_0",
            "org.apache.commons.math.distribution.NormalDistributionTest::testExtremeValues$catena_1"
        ]
    }
}