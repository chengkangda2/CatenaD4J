{
    "original": {
        "num_of_hunks": 2,
        "0": {
            "file_name": "src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java",
            "from_line_no": 126,
            "to_line_no": 126,
            "replaced_with": "        if (FastMath.abs(dev) > 40 * standardDeviation) { \n            return dev < 0 ? 0.0d : 1.0d;\n        }\n",
            "replaced": "        try {\n",
            "patch_type": "replace",
            "next_line_no": 127
        },
        "1": {
            "file_name": "src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java",
            "from_line_no": 129,
            "to_line_no": 137,
            "replaced": "        } catch (MaxIterationsExceededException ex) {\n            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38\n                return 0;\n            } else if (x > (mean + 20 * standardDeviation)) {\n                return 1;\n            } else {\n                throw ex;\n            }\n        }\n",
            "patch_type": "delete",
            "next_line_no": 138
        }
    },
    "method": {
        "failing_tests": [
            "org.apache.commons.math.distribution.NormalDistributionTest::testExtremeValues"
        ],
        "org.apache.commons.math.distribution.NormalDistributionTest::testExtremeValues": {
            "file_path": "src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java",
            "Instance": "Begin: Pos(157, 12)\nEnd: Pos(179, 4)\nSource: /root/workbench/exportInfo/d4j_buggy/Math_60/src/test/java//org/apache/commons/math/distribution/NormalDistributionTest.java\nName: testExtremeValues\nChilds: [StatementAssertion<Begin: Pos(165, 17), End: Pos(165, 45)>,\nStatementAssertion<Begin: Pos(166, 17), End: Pos(166, 45)>,\nStatementAssertion<Begin: Pos(169, 17), End: Pos(169, 48)>,\nStatementAssertion<Begin: Pos(170, 17), End: Pos(170, 48)>,\nStatementAssertion<Begin: Pos(174, 9), End: Pos(174, 81)>,\nStatementAssertion<Begin: Pos(175, 9), End: Pos(175, 82)>,\nStatementAssertion<Begin: Pos(176, 9), End: Pos(176, 89)>,\nStatementAssertion<Begin: Pos(177, 9), End: Pos(177, 89)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Math_60/src/test/java//org/apache/commons/math/distribution/NormalDistributionTest.java",
            "name": "testExtremeValues",
            "begin": "Pos(157, 12)",
            "end": "Pos(179, 4)",
            "begin_line_no": 157,
            "end_line_no": 179,
            "child": [
                "Begin: Pos(165, 17)\nEnd: Pos(165, 45)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(166, 17)\nEnd: Pos(166, 45)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(169, 17)\nEnd: Pos(169, 48)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(170, 17)\nEnd: Pos(170, 48)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(174, 9)\nEnd: Pos(174, 81)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(175, 9)\nEnd: Pos(175, 82)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(176, 9)\nEnd: Pos(176, 89)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(177, 9)\nEnd: Pos(177, 89)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testExtremeValues$catena_0() throws Exception {\n        NormalDistribution distribution = new NormalDistributionImpl(0, 1);\n        for (int i = 0; i < 100; i++) { // make sure no convergence exception\n            double lowerTail = distribution.cumulativeProbability(-i);\n            double upperTail = distribution.cumulativeProbability(i);\n            if (i < 9) { // make sure not top-coded \n                // For i = 10, due to bad tail precision in erf (MATH-364), 1 is returned\n                // TODO: once MATH-364 is resolved, replace 9 with 30\n                assertTrue(lowerTail > 0.0d);                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n                try{ assertTrue(upperTail < 1.0d);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            else { // make sure top coding not reversed\n                try{ assertTrue(lowerTail < 0.00001);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertTrue(upperTail > 0.99999);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n        \n        try{ assertEquals(distribution.cumulativeProbability(Double.MAX_VALUE), 1, 0);                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(distribution.cumulativeProbability(-Double.MAX_VALUE), 0, 0);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(distribution.cumulativeProbability(Double.POSITIVE_INFINITY), 1, 0);              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(distribution.cumulativeProbability(Double.NEGATIVE_INFINITY), 0, 0);              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n   }",
                "    public void testExtremeValues$catena_1() throws Exception {\n        NormalDistribution distribution = new NormalDistributionImpl(0, 1);\n        for (int i = 0; i < 100; i++) { // make sure no convergence exception\n            double lowerTail = distribution.cumulativeProbability(-i);\n            double upperTail = distribution.cumulativeProbability(i);\n            if (i < 9) { // make sure not top-coded \n                // For i = 10, due to bad tail precision in erf (MATH-364), 1 is returned\n                // TODO: once MATH-364 is resolved, replace 9 with 30\n                try{ assertTrue(lowerTail > 0.0d);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n                assertTrue(upperTail < 1.0d);                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n            }\n            else { // make sure top coding not reversed\n                try{ assertTrue(lowerTail < 0.00001);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertTrue(upperTail > 0.99999);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n        \n        try{ assertEquals(distribution.cumulativeProbability(Double.MAX_VALUE), 1, 0);                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(distribution.cumulativeProbability(-Double.MAX_VALUE), 0, 0);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(distribution.cumulativeProbability(Double.POSITIVE_INFINITY), 1, 0);              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(distribution.cumulativeProbability(Double.NEGATIVE_INFINITY), 0, 0);              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n   }",
                "    public void testExtremeValues$catena_2() throws Exception {\n        NormalDistribution distribution = new NormalDistributionImpl(0, 1);\n        for (int i = 0; i < 100; i++) { // make sure no convergence exception\n            double lowerTail = distribution.cumulativeProbability(-i);\n            double upperTail = distribution.cumulativeProbability(i);\n            if (i < 9) { // make sure not top-coded \n                // For i = 10, due to bad tail precision in erf (MATH-364), 1 is returned\n                // TODO: once MATH-364 is resolved, replace 9 with 30\n                try{ assertTrue(lowerTail > 0.0d);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertTrue(upperTail < 1.0d);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            else { // make sure top coding not reversed\n                assertTrue(lowerTail < 0.00001);                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n                try{ assertTrue(upperTail > 0.99999);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n        \n        try{ assertEquals(distribution.cumulativeProbability(Double.MAX_VALUE), 1, 0);                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(distribution.cumulativeProbability(-Double.MAX_VALUE), 0, 0);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(distribution.cumulativeProbability(Double.POSITIVE_INFINITY), 1, 0);              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(distribution.cumulativeProbability(Double.NEGATIVE_INFINITY), 0, 0);              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n   }",
                "    public void testExtremeValues$catena_3() throws Exception {\n        NormalDistribution distribution = new NormalDistributionImpl(0, 1);\n        for (int i = 0; i < 100; i++) { // make sure no convergence exception\n            double lowerTail = distribution.cumulativeProbability(-i);\n            double upperTail = distribution.cumulativeProbability(i);\n            if (i < 9) { // make sure not top-coded \n                // For i = 10, due to bad tail precision in erf (MATH-364), 1 is returned\n                // TODO: once MATH-364 is resolved, replace 9 with 30\n                try{ assertTrue(lowerTail > 0.0d);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertTrue(upperTail < 1.0d);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            else { // make sure top coding not reversed\n                try{ assertTrue(lowerTail < 0.00001);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n                assertTrue(upperTail > 0.99999);                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n            }\n        }\n        \n        try{ assertEquals(distribution.cumulativeProbability(Double.MAX_VALUE), 1, 0);                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(distribution.cumulativeProbability(-Double.MAX_VALUE), 0, 0);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(distribution.cumulativeProbability(Double.POSITIVE_INFINITY), 1, 0);              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(distribution.cumulativeProbability(Double.NEGATIVE_INFINITY), 0, 0);              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n   }",
                "    public void testExtremeValues$catena_4() throws Exception {\n        NormalDistribution distribution = new NormalDistributionImpl(0, 1);\n        for (int i = 0; i < 100; i++) { // make sure no convergence exception\n            double lowerTail = distribution.cumulativeProbability(-i);\n            double upperTail = distribution.cumulativeProbability(i);\n            if (i < 9) { // make sure not top-coded \n                // For i = 10, due to bad tail precision in erf (MATH-364), 1 is returned\n                // TODO: once MATH-364 is resolved, replace 9 with 30\n                try{ assertTrue(lowerTail > 0.0d);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertTrue(upperTail < 1.0d);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            else { // make sure top coding not reversed\n                try{ assertTrue(lowerTail < 0.00001);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertTrue(upperTail > 0.99999);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n        \n        assertEquals(distribution.cumulativeProbability(Double.MAX_VALUE), 1, 0);                           /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(distribution.cumulativeProbability(-Double.MAX_VALUE), 0, 0);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(distribution.cumulativeProbability(Double.POSITIVE_INFINITY), 1, 0);              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(distribution.cumulativeProbability(Double.NEGATIVE_INFINITY), 0, 0);              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n   }",
                "    public void testExtremeValues$catena_5() throws Exception {\n        NormalDistribution distribution = new NormalDistributionImpl(0, 1);\n        for (int i = 0; i < 100; i++) { // make sure no convergence exception\n            double lowerTail = distribution.cumulativeProbability(-i);\n            double upperTail = distribution.cumulativeProbability(i);\n            if (i < 9) { // make sure not top-coded \n                // For i = 10, due to bad tail precision in erf (MATH-364), 1 is returned\n                // TODO: once MATH-364 is resolved, replace 9 with 30\n                try{ assertTrue(lowerTail > 0.0d);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertTrue(upperTail < 1.0d);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            else { // make sure top coding not reversed\n                try{ assertTrue(lowerTail < 0.00001);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertTrue(upperTail > 0.99999);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n        \n        try{ assertEquals(distribution.cumulativeProbability(Double.MAX_VALUE), 1, 0);                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(distribution.cumulativeProbability(-Double.MAX_VALUE), 0, 0);                          /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(distribution.cumulativeProbability(Double.POSITIVE_INFINITY), 1, 0);              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(distribution.cumulativeProbability(Double.NEGATIVE_INFINITY), 0, 0);              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n   }",
                "    public void testExtremeValues$catena_6() throws Exception {\n        NormalDistribution distribution = new NormalDistributionImpl(0, 1);\n        for (int i = 0; i < 100; i++) { // make sure no convergence exception\n            double lowerTail = distribution.cumulativeProbability(-i);\n            double upperTail = distribution.cumulativeProbability(i);\n            if (i < 9) { // make sure not top-coded \n                // For i = 10, due to bad tail precision in erf (MATH-364), 1 is returned\n                // TODO: once MATH-364 is resolved, replace 9 with 30\n                try{ assertTrue(lowerTail > 0.0d);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertTrue(upperTail < 1.0d);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            else { // make sure top coding not reversed\n                try{ assertTrue(lowerTail < 0.00001);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertTrue(upperTail > 0.99999);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n        \n        try{ assertEquals(distribution.cumulativeProbability(Double.MAX_VALUE), 1, 0);                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(distribution.cumulativeProbability(-Double.MAX_VALUE), 0, 0);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(distribution.cumulativeProbability(Double.POSITIVE_INFINITY), 1, 0);                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(distribution.cumulativeProbability(Double.NEGATIVE_INFINITY), 0, 0);              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n   }",
                "    public void testExtremeValues$catena_7() throws Exception {\n        NormalDistribution distribution = new NormalDistributionImpl(0, 1);\n        for (int i = 0; i < 100; i++) { // make sure no convergence exception\n            double lowerTail = distribution.cumulativeProbability(-i);\n            double upperTail = distribution.cumulativeProbability(i);\n            if (i < 9) { // make sure not top-coded \n                // For i = 10, due to bad tail precision in erf (MATH-364), 1 is returned\n                // TODO: once MATH-364 is resolved, replace 9 with 30\n                try{ assertTrue(lowerTail > 0.0d);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertTrue(upperTail < 1.0d);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            else { // make sure top coding not reversed\n                try{ assertTrue(lowerTail < 0.00001);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertTrue(upperTail > 0.99999);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n        \n        try{ assertEquals(distribution.cumulativeProbability(Double.MAX_VALUE), 1, 0);                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(distribution.cumulativeProbability(-Double.MAX_VALUE), 0, 0);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(distribution.cumulativeProbability(Double.POSITIVE_INFINITY), 1, 0);              }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(distribution.cumulativeProbability(Double.NEGATIVE_INFINITY), 0, 0);                   /***** ORIGINAL ASSERTION IS HERE *****/\n        \n   }"
            ],
            "func": {
                "0": "    public void testExtremeValues$catena_0() throws Exception {\n        NormalDistribution distribution = new NormalDistributionImpl(0, 1);\n        for (int i = 0; i < 100; i++) { // make sure no convergence exception\n            double lowerTail = distribution.cumulativeProbability(-i);\n            double upperTail = distribution.cumulativeProbability(i);\n            if (i < 9) { // make sure not top-coded \n                // For i = 10, due to bad tail precision in erf (MATH-364), 1 is returned\n                // TODO: once MATH-364 is resolved, replace 9 with 30\n                assertTrue(lowerTail > 0.0d);                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n                try{ assertTrue(upperTail < 1.0d);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            else { // make sure top coding not reversed\n                try{ assertTrue(lowerTail < 0.00001);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertTrue(upperTail > 0.99999);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n        \n        try{ assertEquals(distribution.cumulativeProbability(Double.MAX_VALUE), 1, 0);                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(distribution.cumulativeProbability(-Double.MAX_VALUE), 0, 0);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(distribution.cumulativeProbability(Double.POSITIVE_INFINITY), 1, 0);              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(distribution.cumulativeProbability(Double.NEGATIVE_INFINITY), 0, 0);              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n   }",
                "1": "    public void testExtremeValues$catena_1() throws Exception {\n        NormalDistribution distribution = new NormalDistributionImpl(0, 1);\n        for (int i = 0; i < 100; i++) { // make sure no convergence exception\n            double lowerTail = distribution.cumulativeProbability(-i);\n            double upperTail = distribution.cumulativeProbability(i);\n            if (i < 9) { // make sure not top-coded \n                // For i = 10, due to bad tail precision in erf (MATH-364), 1 is returned\n                // TODO: once MATH-364 is resolved, replace 9 with 30\n                try{ assertTrue(lowerTail > 0.0d);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n                assertTrue(upperTail < 1.0d);                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n            }\n            else { // make sure top coding not reversed\n                try{ assertTrue(lowerTail < 0.00001);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertTrue(upperTail > 0.99999);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n        \n        try{ assertEquals(distribution.cumulativeProbability(Double.MAX_VALUE), 1, 0);                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(distribution.cumulativeProbability(-Double.MAX_VALUE), 0, 0);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(distribution.cumulativeProbability(Double.POSITIVE_INFINITY), 1, 0);              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(distribution.cumulativeProbability(Double.NEGATIVE_INFINITY), 0, 0);              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n   }",
                "2": "    public void testExtremeValues$catena_2() throws Exception {\n        NormalDistribution distribution = new NormalDistributionImpl(0, 1);\n        for (int i = 0; i < 100; i++) { // make sure no convergence exception\n            double lowerTail = distribution.cumulativeProbability(-i);\n            double upperTail = distribution.cumulativeProbability(i);\n            if (i < 9) { // make sure not top-coded \n                // For i = 10, due to bad tail precision in erf (MATH-364), 1 is returned\n                // TODO: once MATH-364 is resolved, replace 9 with 30\n                try{ assertTrue(lowerTail > 0.0d);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertTrue(upperTail < 1.0d);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            else { // make sure top coding not reversed\n                assertTrue(lowerTail < 0.00001);                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n                try{ assertTrue(upperTail > 0.99999);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n        \n        try{ assertEquals(distribution.cumulativeProbability(Double.MAX_VALUE), 1, 0);                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(distribution.cumulativeProbability(-Double.MAX_VALUE), 0, 0);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(distribution.cumulativeProbability(Double.POSITIVE_INFINITY), 1, 0);              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(distribution.cumulativeProbability(Double.NEGATIVE_INFINITY), 0, 0);              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n   }",
                "3": "    public void testExtremeValues$catena_3() throws Exception {\n        NormalDistribution distribution = new NormalDistributionImpl(0, 1);\n        for (int i = 0; i < 100; i++) { // make sure no convergence exception\n            double lowerTail = distribution.cumulativeProbability(-i);\n            double upperTail = distribution.cumulativeProbability(i);\n            if (i < 9) { // make sure not top-coded \n                // For i = 10, due to bad tail precision in erf (MATH-364), 1 is returned\n                // TODO: once MATH-364 is resolved, replace 9 with 30\n                try{ assertTrue(lowerTail > 0.0d);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertTrue(upperTail < 1.0d);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            else { // make sure top coding not reversed\n                try{ assertTrue(lowerTail < 0.00001);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n                assertTrue(upperTail > 0.99999);                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n            }\n        }\n        \n        try{ assertEquals(distribution.cumulativeProbability(Double.MAX_VALUE), 1, 0);                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(distribution.cumulativeProbability(-Double.MAX_VALUE), 0, 0);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(distribution.cumulativeProbability(Double.POSITIVE_INFINITY), 1, 0);              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(distribution.cumulativeProbability(Double.NEGATIVE_INFINITY), 0, 0);              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n   }",
                "4": "    public void testExtremeValues$catena_4() throws Exception {\n        NormalDistribution distribution = new NormalDistributionImpl(0, 1);\n        for (int i = 0; i < 100; i++) { // make sure no convergence exception\n            double lowerTail = distribution.cumulativeProbability(-i);\n            double upperTail = distribution.cumulativeProbability(i);\n            if (i < 9) { // make sure not top-coded \n                // For i = 10, due to bad tail precision in erf (MATH-364), 1 is returned\n                // TODO: once MATH-364 is resolved, replace 9 with 30\n                try{ assertTrue(lowerTail > 0.0d);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertTrue(upperTail < 1.0d);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            else { // make sure top coding not reversed\n                try{ assertTrue(lowerTail < 0.00001);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertTrue(upperTail > 0.99999);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n        \n        assertEquals(distribution.cumulativeProbability(Double.MAX_VALUE), 1, 0);                           /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(distribution.cumulativeProbability(-Double.MAX_VALUE), 0, 0);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(distribution.cumulativeProbability(Double.POSITIVE_INFINITY), 1, 0);              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(distribution.cumulativeProbability(Double.NEGATIVE_INFINITY), 0, 0);              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n   }",
                "5": "    public void testExtremeValues$catena_5() throws Exception {\n        NormalDistribution distribution = new NormalDistributionImpl(0, 1);\n        for (int i = 0; i < 100; i++) { // make sure no convergence exception\n            double lowerTail = distribution.cumulativeProbability(-i);\n            double upperTail = distribution.cumulativeProbability(i);\n            if (i < 9) { // make sure not top-coded \n                // For i = 10, due to bad tail precision in erf (MATH-364), 1 is returned\n                // TODO: once MATH-364 is resolved, replace 9 with 30\n                try{ assertTrue(lowerTail > 0.0d);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertTrue(upperTail < 1.0d);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            else { // make sure top coding not reversed\n                try{ assertTrue(lowerTail < 0.00001);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertTrue(upperTail > 0.99999);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n        \n        try{ assertEquals(distribution.cumulativeProbability(Double.MAX_VALUE), 1, 0);                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(distribution.cumulativeProbability(-Double.MAX_VALUE), 0, 0);                          /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(distribution.cumulativeProbability(Double.POSITIVE_INFINITY), 1, 0);              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(distribution.cumulativeProbability(Double.NEGATIVE_INFINITY), 0, 0);              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n   }",
                "6": "    public void testExtremeValues$catena_6() throws Exception {\n        NormalDistribution distribution = new NormalDistributionImpl(0, 1);\n        for (int i = 0; i < 100; i++) { // make sure no convergence exception\n            double lowerTail = distribution.cumulativeProbability(-i);\n            double upperTail = distribution.cumulativeProbability(i);\n            if (i < 9) { // make sure not top-coded \n                // For i = 10, due to bad tail precision in erf (MATH-364), 1 is returned\n                // TODO: once MATH-364 is resolved, replace 9 with 30\n                try{ assertTrue(lowerTail > 0.0d);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertTrue(upperTail < 1.0d);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            else { // make sure top coding not reversed\n                try{ assertTrue(lowerTail < 0.00001);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertTrue(upperTail > 0.99999);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n        \n        try{ assertEquals(distribution.cumulativeProbability(Double.MAX_VALUE), 1, 0);                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(distribution.cumulativeProbability(-Double.MAX_VALUE), 0, 0);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(distribution.cumulativeProbability(Double.POSITIVE_INFINITY), 1, 0);                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(distribution.cumulativeProbability(Double.NEGATIVE_INFINITY), 0, 0);              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n   }",
                "7": "    public void testExtremeValues$catena_7() throws Exception {\n        NormalDistribution distribution = new NormalDistributionImpl(0, 1);\n        for (int i = 0; i < 100; i++) { // make sure no convergence exception\n            double lowerTail = distribution.cumulativeProbability(-i);\n            double upperTail = distribution.cumulativeProbability(i);\n            if (i < 9) { // make sure not top-coded \n                // For i = 10, due to bad tail precision in erf (MATH-364), 1 is returned\n                // TODO: once MATH-364 is resolved, replace 9 with 30\n                try{ assertTrue(lowerTail > 0.0d);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertTrue(upperTail < 1.0d);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            else { // make sure top coding not reversed\n                try{ assertTrue(lowerTail < 0.00001);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertTrue(upperTail > 0.99999);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n        \n        try{ assertEquals(distribution.cumulativeProbability(Double.MAX_VALUE), 1, 0);                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(distribution.cumulativeProbability(-Double.MAX_VALUE), 0, 0);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(distribution.cumulativeProbability(Double.POSITIVE_INFINITY), 1, 0);              }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(distribution.cumulativeProbability(Double.NEGATIVE_INFINITY), 0, 0);                   /***** ORIGINAL ASSERTION IS HERE *****/\n        \n   }"
            }
        }
    },
    "11": {
        "failing_tests": [
            "org.apache.commons.math.distribution.NormalDistributionTest::testExtremeValues$catena_7",
            "org.apache.commons.math.distribution.NormalDistributionTest::testExtremeValues$catena_6",
            "org.apache.commons.math.distribution.NormalDistributionTest::testExtremeValues$catena_5",
            "org.apache.commons.math.distribution.NormalDistributionTest::testExtremeValues$catena_4"
        ]
    }
}