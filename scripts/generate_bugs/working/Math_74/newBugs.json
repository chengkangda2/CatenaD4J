{
    "original": {
        "num_of_hunks": 3,
        "0": {
            "file_name": "src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java",
            "from_line_no": 245,
            "to_line_no": 245,
            "replaced_with": "          final double[] scale = new double[y0.length];\n",
            "replaced": "          final double[] scale;\n",
            "patch_type": "replace",
            "next_line_no": 246
        },
        "1": {
            "file_name": "src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java",
            "from_line_no": 247,
            "to_line_no": 248,
            "replaced_with": "              for (int i = 0; i < scale.length; ++i) {\n                scale[i] = scalAbsoluteTolerance + scalRelativeTolerance * Math.abs(y[i]);\n              }\n",
            "replaced": "              scale = new double[y0.length];\n              java.util.Arrays.fill(scale, scalAbsoluteTolerance);\n",
            "patch_type": "replace",
            "next_line_no": 249
        },
        "2": {
            "file_name": "src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java",
            "from_line_no": 250,
            "to_line_no": 250,
            "replaced_with": "              for (int i = 0; i < scale.length; ++i) {\n                scale[i] = vecAbsoluteTolerance[i] + vecRelativeTolerance[i] * Math.abs(y[i]);\n              }\n",
            "replaced": "              scale = vecAbsoluteTolerance;\n",
            "patch_type": "replace",
            "next_line_no": 251
        }
    },
    "method": {
        "failing_tests": [
            "org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest::polynomial"
        ],
        "org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest::polynomial": {
            "file_path": "src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java",
            "Instance": "Begin: Pos(135, 5)\nEnd: Pos(154, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Math_74/src/test/java//org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java\nName: polynomial\nChilds: [StatementAssertion<Begin: Pos(145, 13), End: Pos(146, 78)>,\nStatementAssertion<Begin: Pos(148, 17), End: Pos(148, 57)>,\nStatementAssertion<Begin: Pos(150, 17), End: Pos(150, 56)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Math_74/src/test/java//org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java",
            "name": "polynomial",
            "begin": "Pos(135, 5)",
            "end": "Pos(154, 5)",
            "begin_line_no": 135,
            "end_line_no": 154,
            "child": [
                "Begin: Pos(145, 13)\nEnd: Pos(146, 78)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(148, 17)\nEnd: Pos(148, 57)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(150, 17)\nEnd: Pos(150, 56)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    @Test\n    public void polynomial$catena_0() throws DerivativeException, IntegratorException {\n        TestProblem6 pb = new TestProblem6();\n        double range = Math.abs(pb.getFinalTime() - pb.getInitialTime());\n\n        for (int nSteps = 1; nSteps < 7; ++nSteps) {\n            AdamsMoultonIntegrator integ =\n                new AdamsMoultonIntegrator(nSteps, 1.0e-6 * range, 0.1 * range, 1.0e-9, 1.0e-9);\n            TestProblemHandler handler = new TestProblemHandler(pb, integ);\n            integ.addStepHandler(handler);\n            integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),\n                            pb.getFinalTime(), new double[pb.getDimension()]);                              /***** ORIGINAL ASSERTION IS HERE *****/\n            if (nSteps < 4) {\n                try{ assertTrue(integ.getEvaluations() > 140);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            } else {\n                try{ assertTrue(integ.getEvaluations() < 90);                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n\n    }",
                "    @Test\n    public void polynomial$catena_1() throws DerivativeException, IntegratorException {\n        TestProblem6 pb = new TestProblem6();\n        double range = Math.abs(pb.getFinalTime() - pb.getInitialTime());\n\n        for (int nSteps = 1; nSteps < 7; ++nSteps) {\n            AdamsMoultonIntegrator integ =\n                new AdamsMoultonIntegrator(nSteps, 1.0e-6 * range, 0.1 * range, 1.0e-9, 1.0e-9);\n            TestProblemHandler handler = new TestProblemHandler(pb, integ);\n            integ.addStepHandler(handler);\n            try{ integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),\n                            pb.getFinalTime(), new double[pb.getDimension()]);                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            if (nSteps < 4) {\n                assertTrue(integ.getEvaluations() > 140);                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n            } else {\n                try{ assertTrue(integ.getEvaluations() < 90);                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n\n    }",
                "    @Test\n    public void polynomial$catena_2() throws DerivativeException, IntegratorException {\n        TestProblem6 pb = new TestProblem6();\n        double range = Math.abs(pb.getFinalTime() - pb.getInitialTime());\n\n        for (int nSteps = 1; nSteps < 7; ++nSteps) {\n            AdamsMoultonIntegrator integ =\n                new AdamsMoultonIntegrator(nSteps, 1.0e-6 * range, 0.1 * range, 1.0e-9, 1.0e-9);\n            TestProblemHandler handler = new TestProblemHandler(pb, integ);\n            integ.addStepHandler(handler);\n            try{ integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),\n                            pb.getFinalTime(), new double[pb.getDimension()]);                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            if (nSteps < 4) {\n                try{ assertTrue(integ.getEvaluations() > 140);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            } else {\n                assertTrue(integ.getEvaluations() < 90);                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n            }\n        }\n\n    }"
            ],
            "func": {
                "0": "    @Test\n    public void polynomial$catena_0() throws DerivativeException, IntegratorException {\n        TestProblem6 pb = new TestProblem6();\n        double range = Math.abs(pb.getFinalTime() - pb.getInitialTime());\n\n        for (int nSteps = 1; nSteps < 7; ++nSteps) {\n            AdamsMoultonIntegrator integ =\n                new AdamsMoultonIntegrator(nSteps, 1.0e-6 * range, 0.1 * range, 1.0e-9, 1.0e-9);\n            TestProblemHandler handler = new TestProblemHandler(pb, integ);\n            integ.addStepHandler(handler);\n            integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),\n                            pb.getFinalTime(), new double[pb.getDimension()]);                              /***** ORIGINAL ASSERTION IS HERE *****/\n            if (nSteps < 4) {\n                try{ assertTrue(integ.getEvaluations() > 140);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            } else {\n                try{ assertTrue(integ.getEvaluations() < 90);                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n\n    }",
                "1": "    @Test\n    public void polynomial$catena_1() throws DerivativeException, IntegratorException {\n        TestProblem6 pb = new TestProblem6();\n        double range = Math.abs(pb.getFinalTime() - pb.getInitialTime());\n\n        for (int nSteps = 1; nSteps < 7; ++nSteps) {\n            AdamsMoultonIntegrator integ =\n                new AdamsMoultonIntegrator(nSteps, 1.0e-6 * range, 0.1 * range, 1.0e-9, 1.0e-9);\n            TestProblemHandler handler = new TestProblemHandler(pb, integ);\n            integ.addStepHandler(handler);\n            try{ integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),\n                            pb.getFinalTime(), new double[pb.getDimension()]);                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            if (nSteps < 4) {\n                assertTrue(integ.getEvaluations() > 140);                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n            } else {\n                try{ assertTrue(integ.getEvaluations() < 90);                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n\n    }",
                "2": "    @Test\n    public void polynomial$catena_2() throws DerivativeException, IntegratorException {\n        TestProblem6 pb = new TestProblem6();\n        double range = Math.abs(pb.getFinalTime() - pb.getInitialTime());\n\n        for (int nSteps = 1; nSteps < 7; ++nSteps) {\n            AdamsMoultonIntegrator integ =\n                new AdamsMoultonIntegrator(nSteps, 1.0e-6 * range, 0.1 * range, 1.0e-9, 1.0e-9);\n            TestProblemHandler handler = new TestProblemHandler(pb, integ);\n            integ.addStepHandler(handler);\n            try{ integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),\n                            pb.getFinalTime(), new double[pb.getDimension()]);                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            if (nSteps < 4) {\n                try{ assertTrue(integ.getEvaluations() > 140);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            } else {\n                assertTrue(integ.getEvaluations() < 90);                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n            }\n        }\n\n    }"
            }
        }
    },
    "111": {
        "failing_tests": [
            "org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest::polynomial$catena_2"
        ]
    }
}