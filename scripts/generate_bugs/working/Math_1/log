---
Begin generate bug_id: Math_1
num_of_hunks: 2
timeout for running: 3600
use working dir: ./working/data/Math_1
Try to checkout Math_1
build dir: ['./working/data/Math_1/target/classes', './working/data/Math_1/target/test-classes']
init FileManager
trace file: src/main/java/org/apache/commons/math3/fraction/BigFraction.java
trace file: src/main/java/org/apache/commons/math3/fraction/Fraction.java
trying to replace old failing tests
edit: replace from 147 range 14 at src/test/java/org/apache/commons/math3/fraction/BigFractionTest.java
to
    @Test
    public void testDigitLimitConstructor$catena_0() throws ConvergenceException {
        assertFraction(2, 5, new BigFraction(0.4, 9));                                                      /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertFraction(2, 5, new BigFraction(0.4, 99));                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFraction(2, 5, new BigFraction(0.4, 999));                                               }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertFraction(3, 5, new BigFraction(0.6152, 9));                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFraction(8, 13, new BigFraction(0.6152, 99));                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFraction(510, 829, new BigFraction(0.6152, 999));                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFraction(769, 1250, new BigFraction(0.6152, 9999));                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // MATH-996
        try{ assertFraction(1, 2, new BigFraction(0.5000000001, 10));                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testDigitLimitConstructor$catena_1() throws ConvergenceException {
        try{ assertFraction(2, 5, new BigFraction(0.4, 9));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        assertFraction(2, 5, new BigFraction(0.4, 99));                                                     /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertFraction(2, 5, new BigFraction(0.4, 999));                                               }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertFraction(3, 5, new BigFraction(0.6152, 9));                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFraction(8, 13, new BigFraction(0.6152, 99));                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFraction(510, 829, new BigFraction(0.6152, 999));                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFraction(769, 1250, new BigFraction(0.6152, 9999));                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // MATH-996
        try{ assertFraction(1, 2, new BigFraction(0.5000000001, 10));                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testDigitLimitConstructor$catena_2() throws ConvergenceException {
        try{ assertFraction(2, 5, new BigFraction(0.4, 9));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFraction(2, 5, new BigFraction(0.4, 99));                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        assertFraction(2, 5, new BigFraction(0.4, 999));                                                    /***** ORIGINAL ASSERTION IS HERE *****/

        try{ assertFraction(3, 5, new BigFraction(0.6152, 9));                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFraction(8, 13, new BigFraction(0.6152, 99));                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFraction(510, 829, new BigFraction(0.6152, 999));                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFraction(769, 1250, new BigFraction(0.6152, 9999));                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // MATH-996
        try{ assertFraction(1, 2, new BigFraction(0.5000000001, 10));                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testDigitLimitConstructor$catena_3() throws ConvergenceException {
        try{ assertFraction(2, 5, new BigFraction(0.4, 9));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFraction(2, 5, new BigFraction(0.4, 99));                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFraction(2, 5, new BigFraction(0.4, 999));                                               }catch(Throwable __SHOULD_BE_IGNORED){}

        assertFraction(3, 5, new BigFraction(0.6152, 9));                                                   /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertFraction(8, 13, new BigFraction(0.6152, 99));                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFraction(510, 829, new BigFraction(0.6152, 999));                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFraction(769, 1250, new BigFraction(0.6152, 9999));                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // MATH-996
        try{ assertFraction(1, 2, new BigFraction(0.5000000001, 10));                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testDigitLimitConstructor$catena_4() throws ConvergenceException {
        try{ assertFraction(2, 5, new BigFraction(0.4, 9));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFraction(2, 5, new BigFraction(0.4, 99));                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFraction(2, 5, new BigFraction(0.4, 999));                                               }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertFraction(3, 5, new BigFraction(0.6152, 9));                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        assertFraction(8, 13, new BigFraction(0.6152, 99));                                                 /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertFraction(510, 829, new BigFraction(0.6152, 999));                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFraction(769, 1250, new BigFraction(0.6152, 9999));                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // MATH-996
        try{ assertFraction(1, 2, new BigFraction(0.5000000001, 10));                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testDigitLimitConstructor$catena_5() throws ConvergenceException {
        try{ assertFraction(2, 5, new BigFraction(0.4, 9));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFraction(2, 5, new BigFraction(0.4, 99));                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFraction(2, 5, new BigFraction(0.4, 999));                                               }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertFraction(3, 5, new BigFraction(0.6152, 9));                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFraction(8, 13, new BigFraction(0.6152, 99));                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        assertFraction(510, 829, new BigFraction(0.6152, 999));                                             /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertFraction(769, 1250, new BigFraction(0.6152, 9999));                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // MATH-996
        try{ assertFraction(1, 2, new BigFraction(0.5000000001, 10));                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testDigitLimitConstructor$catena_6() throws ConvergenceException {
        try{ assertFraction(2, 5, new BigFraction(0.4, 9));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFraction(2, 5, new BigFraction(0.4, 99));                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFraction(2, 5, new BigFraction(0.4, 999));                                               }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertFraction(3, 5, new BigFraction(0.6152, 9));                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFraction(8, 13, new BigFraction(0.6152, 99));                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFraction(510, 829, new BigFraction(0.6152, 999));                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        assertFraction(769, 1250, new BigFraction(0.6152, 9999));                                           /***** ORIGINAL ASSERTION IS HERE *****/
        
        // MATH-996
        try{ assertFraction(1, 2, new BigFraction(0.5000000001, 10));                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testDigitLimitConstructor$catena_7() throws ConvergenceException {
        try{ assertFraction(2, 5, new BigFraction(0.4, 9));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFraction(2, 5, new BigFraction(0.4, 99));                                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFraction(2, 5, new BigFraction(0.4, 999));                                               }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertFraction(3, 5, new BigFraction(0.6152, 9));                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFraction(8, 13, new BigFraction(0.6152, 99));                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFraction(510, 829, new BigFraction(0.6152, 999));                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFraction(769, 1250, new BigFraction(0.6152, 9999));                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // MATH-996
        assertFraction(1, 2, new BigFraction(0.5000000001, 10));                                            /***** ORIGINAL ASSERTION IS HERE *****/
    }
edit: replace from 122 range 14 at src/test/java/org/apache/commons/math3/fraction/FractionTest.java
to
    @Test
    public void testDigitLimitConstructor$catena_0() throws ConvergenceException  {
        assertFraction(2, 5, new Fraction(0.4,   9));                                                       /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertFraction(2, 5, new Fraction(0.4,  99));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFraction(2, 5, new Fraction(0.4, 999));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertFraction(3, 5,      new Fraction(0.6152,    9));                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFraction(8, 13,     new Fraction(0.6152,   99));                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFraction(510, 829,  new Fraction(0.6152,  999));                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFraction(769, 1250, new Fraction(0.6152, 9999));                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        // MATH-996
        try{ assertFraction(1, 2, new Fraction(0.5000000001, 10));                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testDigitLimitConstructor$catena_1() throws ConvergenceException  {
        try{ assertFraction(2, 5, new Fraction(0.4,   9));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        assertFraction(2, 5, new Fraction(0.4,  99));                                                       /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertFraction(2, 5, new Fraction(0.4, 999));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertFraction(3, 5,      new Fraction(0.6152,    9));                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFraction(8, 13,     new Fraction(0.6152,   99));                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFraction(510, 829,  new Fraction(0.6152,  999));                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFraction(769, 1250, new Fraction(0.6152, 9999));                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        // MATH-996
        try{ assertFraction(1, 2, new Fraction(0.5000000001, 10));                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testDigitLimitConstructor$catena_2() throws ConvergenceException  {
        try{ assertFraction(2, 5, new Fraction(0.4,   9));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFraction(2, 5, new Fraction(0.4,  99));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        assertFraction(2, 5, new Fraction(0.4, 999));                                                       /***** ORIGINAL ASSERTION IS HERE *****/

        try{ assertFraction(3, 5,      new Fraction(0.6152,    9));                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFraction(8, 13,     new Fraction(0.6152,   99));                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFraction(510, 829,  new Fraction(0.6152,  999));                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFraction(769, 1250, new Fraction(0.6152, 9999));                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        // MATH-996
        try{ assertFraction(1, 2, new Fraction(0.5000000001, 10));                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testDigitLimitConstructor$catena_3() throws ConvergenceException  {
        try{ assertFraction(2, 5, new Fraction(0.4,   9));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFraction(2, 5, new Fraction(0.4,  99));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFraction(2, 5, new Fraction(0.4, 999));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}

        assertFraction(3, 5,      new Fraction(0.6152,    9));                                              /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertFraction(8, 13,     new Fraction(0.6152,   99));                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFraction(510, 829,  new Fraction(0.6152,  999));                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFraction(769, 1250, new Fraction(0.6152, 9999));                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        // MATH-996
        try{ assertFraction(1, 2, new Fraction(0.5000000001, 10));                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testDigitLimitConstructor$catena_4() throws ConvergenceException  {
        try{ assertFraction(2, 5, new Fraction(0.4,   9));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFraction(2, 5, new Fraction(0.4,  99));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFraction(2, 5, new Fraction(0.4, 999));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertFraction(3, 5,      new Fraction(0.6152,    9));                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        assertFraction(8, 13,     new Fraction(0.6152,   99));                                              /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertFraction(510, 829,  new Fraction(0.6152,  999));                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFraction(769, 1250, new Fraction(0.6152, 9999));                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        // MATH-996
        try{ assertFraction(1, 2, new Fraction(0.5000000001, 10));                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testDigitLimitConstructor$catena_5() throws ConvergenceException  {
        try{ assertFraction(2, 5, new Fraction(0.4,   9));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFraction(2, 5, new Fraction(0.4,  99));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFraction(2, 5, new Fraction(0.4, 999));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertFraction(3, 5,      new Fraction(0.6152,    9));                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFraction(8, 13,     new Fraction(0.6152,   99));                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        assertFraction(510, 829,  new Fraction(0.6152,  999));                                              /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertFraction(769, 1250, new Fraction(0.6152, 9999));                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        // MATH-996
        try{ assertFraction(1, 2, new Fraction(0.5000000001, 10));                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testDigitLimitConstructor$catena_6() throws ConvergenceException  {
        try{ assertFraction(2, 5, new Fraction(0.4,   9));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFraction(2, 5, new Fraction(0.4,  99));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFraction(2, 5, new Fraction(0.4, 999));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertFraction(3, 5,      new Fraction(0.6152,    9));                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFraction(8, 13,     new Fraction(0.6152,   99));                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFraction(510, 829,  new Fraction(0.6152,  999));                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        assertFraction(769, 1250, new Fraction(0.6152, 9999));                                              /***** ORIGINAL ASSERTION IS HERE *****/

        // MATH-996
        try{ assertFraction(1, 2, new Fraction(0.5000000001, 10));                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testDigitLimitConstructor$catena_7() throws ConvergenceException  {
        try{ assertFraction(2, 5, new Fraction(0.4,   9));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFraction(2, 5, new Fraction(0.4,  99));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFraction(2, 5, new Fraction(0.4, 999));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertFraction(3, 5,      new Fraction(0.6152,    9));                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFraction(8, 13,     new Fraction(0.6152,   99));                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFraction(510, 829,  new Fraction(0.6152,  999));                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertFraction(769, 1250, new Fraction(0.6152, 9999));                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        // MATH-996
        assertFraction(1, 2, new Fraction(0.5000000001, 10));                                               /***** ORIGINAL ASSERTION IS HERE *****/
    }
trace file: src/test/java/org/apache/commons/math3/fraction/FractionTest.java
trace file: src/test/java/org/apache/commons/math3/fraction/BigFractionTest.java
new test num: 16
ori test num: 0
pattern: 00
patches are written to file
running tests...
used time: Finished in 149.79 seconds
Failing tests: 2
	org.apache.commons.math3.fraction.BigFractionTest::testDigitLimitConstructor$catena_7
	org.apache.commons.math3.fraction.FractionTest::testDigitLimitConstructor$catena_7
processed: 00
pattern: 01
try to fix hunk: 1
insert before 215 with                 if (epsilon == 0.0 && FastMath.abs(q1) < maxDenominator) {
                    break;
                }

patches are written to file
running tests...
used time: Finished in 142.20 seconds
Failing tests: 1
	org.apache.commons.math3.fraction.BigFractionTest::testDigitLimitConstructor$catena_7
select new bug
Pattern: 01
new failing tests:
org.apache.commons.math3.fraction.FractionTest::testDigitLimitConstructor$catena_7
Save found bug
processed: 01
pattern: 10
try to fix hunk: 0
insert before 306 with                 if (epsilon == 0.0 && FastMath.abs(q1) < maxDenominator) {
                    break;
                }

patches are written to file
running tests...
used time: Finished in 140.79 seconds
Failing tests: 1
	org.apache.commons.math3.fraction.FractionTest::testDigitLimitConstructor$catena_7
select new bug
Pattern: 10
new failing tests:
org.apache.commons.math3.fraction.BigFractionTest::testDigitLimitConstructor$catena_7
Save found bug
processed: 10
pattern: 11
try to fix hunk: 0
insert before 306 with                 if (epsilon == 0.0 && FastMath.abs(q1) < maxDenominator) {
                    break;
                }

try to fix hunk: 1
insert before 215 with                 if (epsilon == 0.0 && FastMath.abs(q1) < maxDenominator) {
                    break;
                }

patches are written to file
running tests...
used time: Finished in 155.87 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 11
Find 2 new bugs
