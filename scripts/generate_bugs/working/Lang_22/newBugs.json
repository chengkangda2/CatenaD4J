{
    "original": {
        "num_of_hunks": 2,
        "0": {
            "file_name": "src/main/java/org/apache/commons/lang3/math/Fraction.java",
            "replaced_with": "        if ((u == 0) || (v == 0)) {\n            if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {\n                throw new ArithmeticException(\"overflow: gcd is 2^31\");\n            }\n            return Math.abs(u) + Math.abs(v);\n        }\n",
            "patch_type": "insert",
            "next_line_no": 583
        },
        "1": {
            "file_name": "src/main/java/org/apache/commons/lang3/math/Fraction.java",
            "from_line_no": 584,
            "to_line_no": 584,
            "replaced_with": "        if (Math.abs(u) == 1 || Math.abs(v) == 1) {\n",
            "replaced": "        if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n",
            "patch_type": "replace",
            "next_line_no": 585
        }
    },
    "method": {
        "failing_tests": [
            "org.apache.commons.lang3.math.FractionTest::testReducedFactory_int_int",
            "org.apache.commons.lang3.math.FractionTest::testReduce"
        ],
        "org.apache.commons.lang3.math.FractionTest::testReducedFactory_int_int": {
            "file_path": "src/test/java/org/apache/commons/lang3/math/FractionTest.java",
            "Instance": "Begin: Pos(250, 12)\nEnd: Pos(338, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Lang_22/src/test/java//org/apache/commons/lang3/math/FractionTest.java\nName: testReducedFactory_int_int\nChilds: [StatementAssertion<Begin: Pos(255, 9), End: Pos(255, 42)>,\nStatementAssertion<Begin: Pos(256, 9), End: Pos(256, 44)>,\nStatementAssertion<Begin: Pos(260, 9), End: Pos(260, 42)>,\nStatementAssertion<Begin: Pos(261, 9), End: Pos(261, 44)>,\nStatementAssertion<Begin: Pos(264, 9), End: Pos(264, 42)>,\nStatementAssertion<Begin: Pos(265, 9), End: Pos(265, 44)>,\nStatementAssertion<Begin: Pos(269, 9), End: Pos(269, 43)>,\nStatementAssertion<Begin: Pos(270, 9), End: Pos(270, 44)>,\nStatementAssertion<Begin: Pos(274, 9), End: Pos(274, 43)>,\nStatementAssertion<Begin: Pos(275, 9), End: Pos(275, 44)>,\nStatementAssertion<Begin: Pos(278, 9), End: Pos(278, 43)>,\nStatementAssertion<Begin: Pos(279, 9), End: Pos(279, 44)>,\nStatementAssertion<Begin: Pos(282, 9), End: Pos(282, 42)>,\nStatementAssertion<Begin: Pos(283, 9), End: Pos(283, 44)>,\nStatementAssertion<Begin: Pos(288, 13), End: Pos(288, 50)>,\nStatementAssertion<Begin: Pos(293, 13), End: Pos(293, 50)>,\nStatementAssertion<Begin: Pos(298, 13), End: Pos(298, 50)>,\nStatementAssertion<Begin: Pos(303, 9), End: Pos(303, 42)>,\nStatementAssertion<Begin: Pos(304, 9), End: Pos(304, 44)>,\nStatementAssertion<Begin: Pos(307, 9), End: Pos(307, 42)>,\nStatementAssertion<Begin: Pos(308, 9), End: Pos(308, 44)>,\nStatementAssertion<Begin: Pos(311, 9), End: Pos(311, 42)>,\nStatementAssertion<Begin: Pos(312, 9), End: Pos(312, 44)>,\nStatementAssertion<Begin: Pos(315, 9), End: Pos(315, 42)>,\nStatementAssertion<Begin: Pos(316, 9), End: Pos(316, 44)>,\nStatementAssertion<Begin: Pos(319, 9), End: Pos(319, 43)>,\nStatementAssertion<Begin: Pos(320, 9), End: Pos(320, 44)>,\nStatementAssertion<Begin: Pos(325, 9), End: Pos(325, 42)>,\nStatementAssertion<Begin: Pos(326, 9), End: Pos(326, 67)>,\nStatementAssertion<Begin: Pos(331, 13), End: Pos(331, 50)>,\nStatementAssertion<Begin: Pos(336, 9), End: Pos(336, 62)>,\nStatementAssertion<Begin: Pos(337, 9), End: Pos(337, 44)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Lang_22/src/test/java//org/apache/commons/lang3/math/FractionTest.java",
            "name": "testReducedFactory_int_int",
            "begin": "Pos(250, 12)",
            "end": "Pos(338, 5)",
            "begin_line_no": 250,
            "end_line_no": 338,
            "child": [
                "Begin: Pos(255, 9)\nEnd: Pos(255, 42)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(256, 9)\nEnd: Pos(256, 44)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(260, 9)\nEnd: Pos(260, 42)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(261, 9)\nEnd: Pos(261, 44)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(264, 9)\nEnd: Pos(264, 42)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(265, 9)\nEnd: Pos(265, 44)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(269, 9)\nEnd: Pos(269, 43)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(270, 9)\nEnd: Pos(270, 44)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(274, 9)\nEnd: Pos(274, 43)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(275, 9)\nEnd: Pos(275, 44)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(278, 9)\nEnd: Pos(278, 43)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(279, 9)\nEnd: Pos(279, 44)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(282, 9)\nEnd: Pos(282, 42)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(283, 9)\nEnd: Pos(283, 44)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(288, 13)\nEnd: Pos(288, 50)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(293, 13)\nEnd: Pos(293, 50)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(298, 13)\nEnd: Pos(298, 50)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(303, 9)\nEnd: Pos(303, 42)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(304, 9)\nEnd: Pos(304, 44)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(307, 9)\nEnd: Pos(307, 42)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(308, 9)\nEnd: Pos(308, 44)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(311, 9)\nEnd: Pos(311, 42)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(312, 9)\nEnd: Pos(312, 44)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(315, 9)\nEnd: Pos(315, 42)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(316, 9)\nEnd: Pos(316, 44)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(319, 9)\nEnd: Pos(319, 43)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(320, 9)\nEnd: Pos(320, 44)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(325, 9)\nEnd: Pos(325, 42)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(326, 9)\nEnd: Pos(326, 67)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(331, 13)\nEnd: Pos(331, 50)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(336, 9)\nEnd: Pos(336, 62)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(337, 9)\nEnd: Pos(337, 44)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testReducedFactory_int_int$catena_0() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        assertEquals(0, f.getNumerator());                                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReducedFactory_int_int$catena_1() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(1, f.getDenominator());                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReducedFactory_int_int$catena_2() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        assertEquals(1, f.getNumerator());                                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReducedFactory_int_int$catena_3() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(1, f.getDenominator());                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReducedFactory_int_int$catena_4() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        assertEquals(2, f.getNumerator());                                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReducedFactory_int_int$catena_5() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(1, f.getDenominator());                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReducedFactory_int_int$catena_6() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        assertEquals(22, f.getNumerator());                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReducedFactory_int_int$catena_7() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(7, f.getDenominator());                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReducedFactory_int_int$catena_8() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        assertEquals(-3, f.getNumerator());                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReducedFactory_int_int$catena_9() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(5, f.getDenominator());                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReducedFactory_int_int$catena_10() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        assertEquals(-3, f.getNumerator());                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReducedFactory_int_int$catena_11() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(5, f.getDenominator());                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReducedFactory_int_int$catena_12() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        assertEquals(3, f.getNumerator());                                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReducedFactory_int_int$catena_13() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(5, f.getDenominator());                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReducedFactory_int_int$catena_14() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            fail(\"expecting ArithmeticException\");                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReducedFactory_int_int$catena_15() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            fail(\"expecting ArithmeticException\");                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReducedFactory_int_int$catena_16() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            fail(\"expecting ArithmeticException\");                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReducedFactory_int_int$catena_17() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        assertEquals(0, f.getNumerator());                                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReducedFactory_int_int$catena_18() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(1, f.getDenominator());                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReducedFactory_int_int$catena_19() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        assertEquals(1, f.getNumerator());                                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReducedFactory_int_int$catena_20() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(1, f.getDenominator());                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReducedFactory_int_int$catena_21() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        assertEquals(1, f.getNumerator());                                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReducedFactory_int_int$catena_22() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(2, f.getDenominator());                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReducedFactory_int_int$catena_23() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        assertEquals(3, f.getNumerator());                                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReducedFactory_int_int$catena_24() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(2, f.getDenominator());                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReducedFactory_int_int$catena_25() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        assertEquals(11, f.getNumerator());                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReducedFactory_int_int$catena_26() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(2, f.getDenominator());                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReducedFactory_int_int$catena_27() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        assertEquals(1, f.getNumerator());                                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReducedFactory_int_int$catena_28() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReducedFactory_int_int$catena_29() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            fail(\"Expecting ArithmeticException\");                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReducedFactory_int_int$catena_30() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReducedFactory_int_int$catena_31() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(1, f.getDenominator());                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void testReducedFactory_int_int$catena_0() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        assertEquals(0, f.getNumerator());                                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void testReducedFactory_int_int$catena_1() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(1, f.getDenominator());                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "2": "    public void testReducedFactory_int_int$catena_2() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        assertEquals(1, f.getNumerator());                                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "3": "    public void testReducedFactory_int_int$catena_3() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(1, f.getDenominator());                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "4": "    public void testReducedFactory_int_int$catena_4() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        assertEquals(2, f.getNumerator());                                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "5": "    public void testReducedFactory_int_int$catena_5() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(1, f.getDenominator());                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "6": "    public void testReducedFactory_int_int$catena_6() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        assertEquals(22, f.getNumerator());                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "7": "    public void testReducedFactory_int_int$catena_7() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(7, f.getDenominator());                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "8": "    public void testReducedFactory_int_int$catena_8() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        assertEquals(-3, f.getNumerator());                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "9": "    public void testReducedFactory_int_int$catena_9() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(5, f.getDenominator());                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "10": "    public void testReducedFactory_int_int$catena_10() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        assertEquals(-3, f.getNumerator());                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "11": "    public void testReducedFactory_int_int$catena_11() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(5, f.getDenominator());                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "12": "    public void testReducedFactory_int_int$catena_12() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        assertEquals(3, f.getNumerator());                                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "13": "    public void testReducedFactory_int_int$catena_13() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(5, f.getDenominator());                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "14": "    public void testReducedFactory_int_int$catena_14() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            fail(\"expecting ArithmeticException\");                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "15": "    public void testReducedFactory_int_int$catena_15() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            fail(\"expecting ArithmeticException\");                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "16": "    public void testReducedFactory_int_int$catena_16() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            fail(\"expecting ArithmeticException\");                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "17": "    public void testReducedFactory_int_int$catena_17() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        assertEquals(0, f.getNumerator());                                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "18": "    public void testReducedFactory_int_int$catena_18() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(1, f.getDenominator());                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "19": "    public void testReducedFactory_int_int$catena_19() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        assertEquals(1, f.getNumerator());                                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "20": "    public void testReducedFactory_int_int$catena_20() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(1, f.getDenominator());                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "21": "    public void testReducedFactory_int_int$catena_21() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        assertEquals(1, f.getNumerator());                                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "22": "    public void testReducedFactory_int_int$catena_22() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(2, f.getDenominator());                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "23": "    public void testReducedFactory_int_int$catena_23() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        assertEquals(3, f.getNumerator());                                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "24": "    public void testReducedFactory_int_int$catena_24() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(2, f.getDenominator());                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "25": "    public void testReducedFactory_int_int$catena_25() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        assertEquals(11, f.getNumerator());                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "26": "    public void testReducedFactory_int_int$catena_26() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(2, f.getDenominator());                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "27": "    public void testReducedFactory_int_int$catena_27() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        assertEquals(1, f.getNumerator());                                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "28": "    public void testReducedFactory_int_int$catena_28() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "29": "    public void testReducedFactory_int_int$catena_29() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            fail(\"Expecting ArithmeticException\");                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "30": "    public void testReducedFactory_int_int$catena_30() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "31": "    public void testReducedFactory_int_int$catena_31() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(1, f.getDenominator());                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.apache.commons.lang3.math.FractionTest::testReduce": {
            "file_path": "src/test/java/org/apache/commons/lang3/math/FractionTest.java",
            "Instance": "Begin: Pos(610, 12)\nEnd: Pos(656, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Lang_22/src/test/java//org/apache/commons/lang3/math/FractionTest.java\nName: testReduce\nChilds: [StatementAssertion<Begin: Pos(615, 9), End: Pos(615, 47)>,\nStatementAssertion<Begin: Pos(616, 9), End: Pos(616, 49)>,\nStatementAssertion<Begin: Pos(620, 9), End: Pos(620, 47)>,\nStatementAssertion<Begin: Pos(621, 9), End: Pos(621, 49)>,\nStatementAssertion<Begin: Pos(625, 9), End: Pos(625, 48)>,\nStatementAssertion<Begin: Pos(626, 9), End: Pos(626, 49)>,\nStatementAssertion<Begin: Pos(630, 9), End: Pos(630, 48)>,\nStatementAssertion<Begin: Pos(631, 9), End: Pos(631, 49)>,\nStatementAssertion<Begin: Pos(632, 9), End: Pos(632, 30)>,\nStatementAssertion<Begin: Pos(636, 9), End: Pos(636, 47)>,\nStatementAssertion<Begin: Pos(637, 9), End: Pos(637, 49)>,\nStatementAssertion<Begin: Pos(638, 9), End: Pos(638, 30)>,\nStatementAssertion<Begin: Pos(642, 9), End: Pos(642, 47)>,\nStatementAssertion<Begin: Pos(643, 9), End: Pos(643, 49)>,\nStatementAssertion<Begin: Pos(644, 9), End: Pos(644, 30)>,\nStatementAssertion<Begin: Pos(648, 9), End: Pos(648, 47)>,\nStatementAssertion<Begin: Pos(649, 9), End: Pos(649, 49)>,\nStatementAssertion<Begin: Pos(650, 9), End: Pos(650, 42)>,\nStatementAssertion<Begin: Pos(654, 9), End: Pos(654, 67)>,\nStatementAssertion<Begin: Pos(655, 9), End: Pos(655, 49)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Lang_22/src/test/java//org/apache/commons/lang3/math/FractionTest.java",
            "name": "testReduce",
            "begin": "Pos(610, 12)",
            "end": "Pos(656, 5)",
            "begin_line_no": 610,
            "end_line_no": 656,
            "child": [
                "Begin: Pos(615, 9)\nEnd: Pos(615, 47)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(616, 9)\nEnd: Pos(616, 49)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(620, 9)\nEnd: Pos(620, 47)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(621, 9)\nEnd: Pos(621, 49)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(625, 9)\nEnd: Pos(625, 48)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(626, 9)\nEnd: Pos(626, 49)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(630, 9)\nEnd: Pos(630, 48)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(631, 9)\nEnd: Pos(631, 49)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(632, 9)\nEnd: Pos(632, 30)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(636, 9)\nEnd: Pos(636, 47)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(637, 9)\nEnd: Pos(637, 49)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(638, 9)\nEnd: Pos(638, 30)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(642, 9)\nEnd: Pos(642, 47)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(643, 9)\nEnd: Pos(643, 49)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(644, 9)\nEnd: Pos(644, 30)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(648, 9)\nEnd: Pos(648, 47)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(649, 9)\nEnd: Pos(649, 49)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(650, 9)\nEnd: Pos(650, 42)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(654, 9)\nEnd: Pos(654, 67)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(655, 9)\nEnd: Pos(655, 49)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testReduce$catena_0() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(50, 75);\n        Fraction result = f.reduce();\n        assertEquals(2, result.getNumerator());                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, -3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, -3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, 3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, 3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 1);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 100);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(result, Fraction.ZERO);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 2);\n        result = f.reduce();\n        try{ assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReduce$catena_1() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(50, 75);\n        Fraction result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(3, result.getDenominator());                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n\n        f = Fraction.getFraction(-2, -3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, -3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, 3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, 3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 1);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 100);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(result, Fraction.ZERO);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 2);\n        result = f.reduce();\n        try{ assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReduce$catena_2() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(50, 75);\n        Fraction result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, -3);\n        result = f.reduce();\n        assertEquals(2, result.getNumerator());                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, -3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, 3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, 3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 1);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 100);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(result, Fraction.ZERO);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 2);\n        result = f.reduce();\n        try{ assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReduce$catena_3() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(50, 75);\n        Fraction result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, -3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(3, result.getDenominator());                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n\n        f = Fraction.getFraction(2, -3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, 3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, 3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 1);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 100);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(result, Fraction.ZERO);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 2);\n        result = f.reduce();\n        try{ assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReduce$catena_4() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(50, 75);\n        Fraction result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, -3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, -3);\n        result = f.reduce();\n        assertEquals(-2, result.getNumerator());                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, 3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, 3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 1);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 100);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(result, Fraction.ZERO);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 2);\n        result = f.reduce();\n        try{ assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReduce$catena_5() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(50, 75);\n        Fraction result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, -3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, -3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(3, result.getDenominator());                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n\n        f = Fraction.getFraction(-2, 3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, 3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 1);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 100);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(result, Fraction.ZERO);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 2);\n        result = f.reduce();\n        try{ assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReduce$catena_6() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(50, 75);\n        Fraction result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, -3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, -3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, 3);\n        result = f.reduce();\n        assertEquals(-2, result.getNumerator());                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, 3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 1);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 100);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(result, Fraction.ZERO);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 2);\n        result = f.reduce();\n        try{ assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReduce$catena_7() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(50, 75);\n        Fraction result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, -3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, -3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, 3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(3, result.getDenominator());                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, 3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 1);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 100);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(result, Fraction.ZERO);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 2);\n        result = f.reduce();\n        try{ assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReduce$catena_8() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(50, 75);\n        Fraction result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, -3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, -3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, 3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertSame(f, result);                                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n\n        f = Fraction.getFraction(2, 3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 1);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 100);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(result, Fraction.ZERO);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 2);\n        result = f.reduce();\n        try{ assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReduce$catena_9() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(50, 75);\n        Fraction result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, -3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, -3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, 3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, 3);\n        result = f.reduce();\n        assertEquals(2, result.getNumerator());                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 1);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 100);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(result, Fraction.ZERO);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 2);\n        result = f.reduce();\n        try{ assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReduce$catena_10() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(50, 75);\n        Fraction result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, -3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, -3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, 3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, 3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(3, result.getDenominator());                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 1);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 100);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(result, Fraction.ZERO);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 2);\n        result = f.reduce();\n        try{ assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReduce$catena_11() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(50, 75);\n        Fraction result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, -3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, -3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, 3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, 3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertSame(f, result);                                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n\n        f = Fraction.getFraction(0, 1);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 100);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(result, Fraction.ZERO);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 2);\n        result = f.reduce();\n        try{ assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReduce$catena_12() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(50, 75);\n        Fraction result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, -3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, -3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, 3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, 3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 1);\n        result = f.reduce();\n        assertEquals(0, result.getNumerator());                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 100);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(result, Fraction.ZERO);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 2);\n        result = f.reduce();\n        try{ assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReduce$catena_13() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(50, 75);\n        Fraction result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, -3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, -3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, 3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, 3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 1);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(1, result.getDenominator());                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 100);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(result, Fraction.ZERO);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 2);\n        result = f.reduce();\n        try{ assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReduce$catena_14() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(50, 75);\n        Fraction result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, -3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, -3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, 3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, 3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 1);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertSame(f, result);                                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n\n        f = Fraction.getFraction(0, 100);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(result, Fraction.ZERO);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 2);\n        result = f.reduce();\n        try{ assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReduce$catena_15() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(50, 75);\n        Fraction result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, -3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, -3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, 3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, 3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 1);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 100);\n        result = f.reduce();\n        assertEquals(0, result.getNumerator());                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(result, Fraction.ZERO);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 2);\n        result = f.reduce();\n        try{ assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReduce$catena_16() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(50, 75);\n        Fraction result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, -3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, -3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, 3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, 3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 1);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 100);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(1, result.getDenominator());                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertSame(result, Fraction.ZERO);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 2);\n        result = f.reduce();\n        try{ assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReduce$catena_17() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(50, 75);\n        Fraction result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, -3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, -3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, 3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, 3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 1);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 100);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertSame(result, Fraction.ZERO);                                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 2);\n        result = f.reduce();\n        try{ assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReduce$catena_18() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(50, 75);\n        Fraction result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, -3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, -3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, 3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, 3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 1);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 100);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(result, Fraction.ZERO);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 2);\n        result = f.reduce();\n        assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testReduce$catena_19() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(50, 75);\n        Fraction result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, -3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, -3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, 3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, 3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 1);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 100);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(result, Fraction.ZERO);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 2);\n        result = f.reduce();\n        try{ assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(1, result.getDenominator());                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void testReduce$catena_0() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(50, 75);\n        Fraction result = f.reduce();\n        assertEquals(2, result.getNumerator());                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, -3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, -3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, 3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, 3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 1);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 100);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(result, Fraction.ZERO);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 2);\n        result = f.reduce();\n        try{ assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void testReduce$catena_1() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(50, 75);\n        Fraction result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(3, result.getDenominator());                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n\n        f = Fraction.getFraction(-2, -3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, -3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, 3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, 3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 1);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 100);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(result, Fraction.ZERO);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 2);\n        result = f.reduce();\n        try{ assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "2": "    public void testReduce$catena_2() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(50, 75);\n        Fraction result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, -3);\n        result = f.reduce();\n        assertEquals(2, result.getNumerator());                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, -3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, 3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, 3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 1);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 100);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(result, Fraction.ZERO);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 2);\n        result = f.reduce();\n        try{ assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "3": "    public void testReduce$catena_3() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(50, 75);\n        Fraction result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, -3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(3, result.getDenominator());                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n\n        f = Fraction.getFraction(2, -3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, 3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, 3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 1);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 100);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(result, Fraction.ZERO);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 2);\n        result = f.reduce();\n        try{ assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "4": "    public void testReduce$catena_4() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(50, 75);\n        Fraction result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, -3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, -3);\n        result = f.reduce();\n        assertEquals(-2, result.getNumerator());                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, 3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, 3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 1);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 100);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(result, Fraction.ZERO);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 2);\n        result = f.reduce();\n        try{ assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "5": "    public void testReduce$catena_5() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(50, 75);\n        Fraction result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, -3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, -3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(3, result.getDenominator());                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n\n        f = Fraction.getFraction(-2, 3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, 3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 1);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 100);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(result, Fraction.ZERO);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 2);\n        result = f.reduce();\n        try{ assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "6": "    public void testReduce$catena_6() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(50, 75);\n        Fraction result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, -3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, -3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, 3);\n        result = f.reduce();\n        assertEquals(-2, result.getNumerator());                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, 3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 1);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 100);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(result, Fraction.ZERO);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 2);\n        result = f.reduce();\n        try{ assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "7": "    public void testReduce$catena_7() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(50, 75);\n        Fraction result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, -3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, -3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, 3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(3, result.getDenominator());                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, 3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 1);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 100);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(result, Fraction.ZERO);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 2);\n        result = f.reduce();\n        try{ assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "8": "    public void testReduce$catena_8() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(50, 75);\n        Fraction result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, -3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, -3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, 3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertSame(f, result);                                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n\n        f = Fraction.getFraction(2, 3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 1);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 100);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(result, Fraction.ZERO);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 2);\n        result = f.reduce();\n        try{ assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "9": "    public void testReduce$catena_9() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(50, 75);\n        Fraction result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, -3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, -3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, 3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, 3);\n        result = f.reduce();\n        assertEquals(2, result.getNumerator());                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 1);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 100);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(result, Fraction.ZERO);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 2);\n        result = f.reduce();\n        try{ assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "10": "    public void testReduce$catena_10() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(50, 75);\n        Fraction result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, -3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, -3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, 3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, 3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(3, result.getDenominator());                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 1);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 100);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(result, Fraction.ZERO);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 2);\n        result = f.reduce();\n        try{ assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "11": "    public void testReduce$catena_11() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(50, 75);\n        Fraction result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, -3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, -3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, 3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, 3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertSame(f, result);                                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n\n        f = Fraction.getFraction(0, 1);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 100);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(result, Fraction.ZERO);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 2);\n        result = f.reduce();\n        try{ assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "12": "    public void testReduce$catena_12() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(50, 75);\n        Fraction result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, -3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, -3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, 3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, 3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 1);\n        result = f.reduce();\n        assertEquals(0, result.getNumerator());                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 100);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(result, Fraction.ZERO);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 2);\n        result = f.reduce();\n        try{ assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "13": "    public void testReduce$catena_13() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(50, 75);\n        Fraction result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, -3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, -3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, 3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, 3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 1);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(1, result.getDenominator());                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 100);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(result, Fraction.ZERO);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 2);\n        result = f.reduce();\n        try{ assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "14": "    public void testReduce$catena_14() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(50, 75);\n        Fraction result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, -3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, -3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, 3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, 3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 1);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertSame(f, result);                                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n\n        f = Fraction.getFraction(0, 100);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(result, Fraction.ZERO);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 2);\n        result = f.reduce();\n        try{ assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "15": "    public void testReduce$catena_15() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(50, 75);\n        Fraction result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, -3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, -3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, 3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, 3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 1);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 100);\n        result = f.reduce();\n        assertEquals(0, result.getNumerator());                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(result, Fraction.ZERO);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 2);\n        result = f.reduce();\n        try{ assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "16": "    public void testReduce$catena_16() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(50, 75);\n        Fraction result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, -3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, -3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, 3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, 3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 1);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 100);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(1, result.getDenominator());                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertSame(result, Fraction.ZERO);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 2);\n        result = f.reduce();\n        try{ assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "17": "    public void testReduce$catena_17() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(50, 75);\n        Fraction result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, -3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, -3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, 3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, 3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 1);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 100);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertSame(result, Fraction.ZERO);                                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 2);\n        result = f.reduce();\n        try{ assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "18": "    public void testReduce$catena_18() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(50, 75);\n        Fraction result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, -3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, -3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, 3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, 3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 1);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 100);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(result, Fraction.ZERO);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 2);\n        result = f.reduce();\n        assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "19": "    public void testReduce$catena_19() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(50, 75);\n        Fraction result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, -3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, -3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, 3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, 3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 1);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 100);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(result, Fraction.ZERO);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 2);\n        result = f.reduce();\n        try{ assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(1, result.getDenominator());                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        }
    },
    "01": {
        "failing_tests": [
            "org.apache.commons.lang3.math.FractionTest::testReduce$catena_18",
            "org.apache.commons.lang3.math.FractionTest::testReduce$catena_19",
            "org.apache.commons.lang3.math.FractionTest::testReducedFactory_int_int$catena_31",
            "org.apache.commons.lang3.math.FractionTest::testReducedFactory_int_int$catena_30"
        ]
    }
}