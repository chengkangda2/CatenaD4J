---
Begin generate bug_id: Lang_22
num_of_hunks: 2
timeout for running: 3600
use working dir: ./working/data/Lang_22
Try to checkout Lang_22
build dir: ['./working/data/Lang_22/target/classes', './working/data/Lang_22/target/test-classes']
init FileManager
trace file: src/main/java/org/apache/commons/lang3/math/Fraction.java
trying to replace old failing tests
edit: replace from 250 range 89 at src/test/java/org/apache/commons/lang3/math/FractionTest.java
to
    public void testReducedFactory_int_int$catena_0() {
        Fraction f = null;
        
        // zero
        f = Fraction.getReducedFraction(0, 1);
        assertEquals(0, f.getNumerator());                                                                  /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // normal
        f = Fraction.getReducedFraction(1, 1);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 1);
        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // improper
        f = Fraction.getReducedFraction(22, 7);
        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // negatives
        f = Fraction.getReducedFraction(-6, 10);
        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(6, -10);
        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(-6, -10);
        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // zero denominator
        try {
            f = Fraction.getReducedFraction(1, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}
        
        try {
            f = Fraction.getReducedFraction(2, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}
        
        try {
            f = Fraction.getReducedFraction(-3, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}

        // reduced        
        f = Fraction.getReducedFraction(0, 2);
        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 2);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 4);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(15, 10);
        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(121, 22);
        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // Extreme values 
        // OK, can reduce before negating
        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // Can't reduce, negation will throw
        try { 
            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}      

        // LANG-662
        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);
        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReducedFactory_int_int$catena_1() {
        Fraction f = null;
        
        // zero
        f = Fraction.getReducedFraction(0, 1);
        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(1, f.getDenominator());                                                                /***** ORIGINAL ASSERTION IS HERE *****/
        
        // normal
        f = Fraction.getReducedFraction(1, 1);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 1);
        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // improper
        f = Fraction.getReducedFraction(22, 7);
        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // negatives
        f = Fraction.getReducedFraction(-6, 10);
        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(6, -10);
        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(-6, -10);
        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // zero denominator
        try {
            f = Fraction.getReducedFraction(1, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}
        
        try {
            f = Fraction.getReducedFraction(2, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}
        
        try {
            f = Fraction.getReducedFraction(-3, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}

        // reduced        
        f = Fraction.getReducedFraction(0, 2);
        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 2);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 4);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(15, 10);
        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(121, 22);
        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // Extreme values 
        // OK, can reduce before negating
        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // Can't reduce, negation will throw
        try { 
            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}      

        // LANG-662
        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);
        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReducedFactory_int_int$catena_2() {
        Fraction f = null;
        
        // zero
        f = Fraction.getReducedFraction(0, 1);
        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // normal
        f = Fraction.getReducedFraction(1, 1);
        assertEquals(1, f.getNumerator());                                                                  /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 1);
        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // improper
        f = Fraction.getReducedFraction(22, 7);
        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // negatives
        f = Fraction.getReducedFraction(-6, 10);
        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(6, -10);
        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(-6, -10);
        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // zero denominator
        try {
            f = Fraction.getReducedFraction(1, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}
        
        try {
            f = Fraction.getReducedFraction(2, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}
        
        try {
            f = Fraction.getReducedFraction(-3, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}

        // reduced        
        f = Fraction.getReducedFraction(0, 2);
        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 2);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 4);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(15, 10);
        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(121, 22);
        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // Extreme values 
        // OK, can reduce before negating
        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // Can't reduce, negation will throw
        try { 
            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}      

        // LANG-662
        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);
        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReducedFactory_int_int$catena_3() {
        Fraction f = null;
        
        // zero
        f = Fraction.getReducedFraction(0, 1);
        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // normal
        f = Fraction.getReducedFraction(1, 1);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(1, f.getDenominator());                                                                /***** ORIGINAL ASSERTION IS HERE *****/
        
        f = Fraction.getReducedFraction(2, 1);
        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // improper
        f = Fraction.getReducedFraction(22, 7);
        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // negatives
        f = Fraction.getReducedFraction(-6, 10);
        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(6, -10);
        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(-6, -10);
        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // zero denominator
        try {
            f = Fraction.getReducedFraction(1, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}
        
        try {
            f = Fraction.getReducedFraction(2, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}
        
        try {
            f = Fraction.getReducedFraction(-3, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}

        // reduced        
        f = Fraction.getReducedFraction(0, 2);
        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 2);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 4);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(15, 10);
        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(121, 22);
        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // Extreme values 
        // OK, can reduce before negating
        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // Can't reduce, negation will throw
        try { 
            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}      

        // LANG-662
        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);
        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReducedFactory_int_int$catena_4() {
        Fraction f = null;
        
        // zero
        f = Fraction.getReducedFraction(0, 1);
        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // normal
        f = Fraction.getReducedFraction(1, 1);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 1);
        assertEquals(2, f.getNumerator());                                                                  /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // improper
        f = Fraction.getReducedFraction(22, 7);
        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // negatives
        f = Fraction.getReducedFraction(-6, 10);
        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(6, -10);
        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(-6, -10);
        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // zero denominator
        try {
            f = Fraction.getReducedFraction(1, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}
        
        try {
            f = Fraction.getReducedFraction(2, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}
        
        try {
            f = Fraction.getReducedFraction(-3, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}

        // reduced        
        f = Fraction.getReducedFraction(0, 2);
        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 2);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 4);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(15, 10);
        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(121, 22);
        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // Extreme values 
        // OK, can reduce before negating
        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // Can't reduce, negation will throw
        try { 
            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}      

        // LANG-662
        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);
        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReducedFactory_int_int$catena_5() {
        Fraction f = null;
        
        // zero
        f = Fraction.getReducedFraction(0, 1);
        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // normal
        f = Fraction.getReducedFraction(1, 1);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 1);
        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(1, f.getDenominator());                                                                /***** ORIGINAL ASSERTION IS HERE *****/
        
        // improper
        f = Fraction.getReducedFraction(22, 7);
        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // negatives
        f = Fraction.getReducedFraction(-6, 10);
        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(6, -10);
        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(-6, -10);
        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // zero denominator
        try {
            f = Fraction.getReducedFraction(1, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}
        
        try {
            f = Fraction.getReducedFraction(2, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}
        
        try {
            f = Fraction.getReducedFraction(-3, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}

        // reduced        
        f = Fraction.getReducedFraction(0, 2);
        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 2);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 4);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(15, 10);
        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(121, 22);
        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // Extreme values 
        // OK, can reduce before negating
        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // Can't reduce, negation will throw
        try { 
            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}      

        // LANG-662
        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);
        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReducedFactory_int_int$catena_6() {
        Fraction f = null;
        
        // zero
        f = Fraction.getReducedFraction(0, 1);
        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // normal
        f = Fraction.getReducedFraction(1, 1);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 1);
        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // improper
        f = Fraction.getReducedFraction(22, 7);
        assertEquals(22, f.getNumerator());                                                                 /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // negatives
        f = Fraction.getReducedFraction(-6, 10);
        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(6, -10);
        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(-6, -10);
        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // zero denominator
        try {
            f = Fraction.getReducedFraction(1, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}
        
        try {
            f = Fraction.getReducedFraction(2, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}
        
        try {
            f = Fraction.getReducedFraction(-3, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}

        // reduced        
        f = Fraction.getReducedFraction(0, 2);
        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 2);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 4);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(15, 10);
        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(121, 22);
        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // Extreme values 
        // OK, can reduce before negating
        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // Can't reduce, negation will throw
        try { 
            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}      

        // LANG-662
        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);
        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReducedFactory_int_int$catena_7() {
        Fraction f = null;
        
        // zero
        f = Fraction.getReducedFraction(0, 1);
        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // normal
        f = Fraction.getReducedFraction(1, 1);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 1);
        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // improper
        f = Fraction.getReducedFraction(22, 7);
        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(7, f.getDenominator());                                                                /***** ORIGINAL ASSERTION IS HERE *****/
        
        // negatives
        f = Fraction.getReducedFraction(-6, 10);
        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(6, -10);
        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(-6, -10);
        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // zero denominator
        try {
            f = Fraction.getReducedFraction(1, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}
        
        try {
            f = Fraction.getReducedFraction(2, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}
        
        try {
            f = Fraction.getReducedFraction(-3, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}

        // reduced        
        f = Fraction.getReducedFraction(0, 2);
        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 2);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 4);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(15, 10);
        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(121, 22);
        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // Extreme values 
        // OK, can reduce before negating
        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // Can't reduce, negation will throw
        try { 
            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}      

        // LANG-662
        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);
        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReducedFactory_int_int$catena_8() {
        Fraction f = null;
        
        // zero
        f = Fraction.getReducedFraction(0, 1);
        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // normal
        f = Fraction.getReducedFraction(1, 1);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 1);
        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // improper
        f = Fraction.getReducedFraction(22, 7);
        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // negatives
        f = Fraction.getReducedFraction(-6, 10);
        assertEquals(-3, f.getNumerator());                                                                 /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(6, -10);
        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(-6, -10);
        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // zero denominator
        try {
            f = Fraction.getReducedFraction(1, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}
        
        try {
            f = Fraction.getReducedFraction(2, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}
        
        try {
            f = Fraction.getReducedFraction(-3, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}

        // reduced        
        f = Fraction.getReducedFraction(0, 2);
        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 2);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 4);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(15, 10);
        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(121, 22);
        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // Extreme values 
        // OK, can reduce before negating
        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // Can't reduce, negation will throw
        try { 
            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}      

        // LANG-662
        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);
        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReducedFactory_int_int$catena_9() {
        Fraction f = null;
        
        // zero
        f = Fraction.getReducedFraction(0, 1);
        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // normal
        f = Fraction.getReducedFraction(1, 1);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 1);
        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // improper
        f = Fraction.getReducedFraction(22, 7);
        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // negatives
        f = Fraction.getReducedFraction(-6, 10);
        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(5, f.getDenominator());                                                                /***** ORIGINAL ASSERTION IS HERE *****/
        
        f = Fraction.getReducedFraction(6, -10);
        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(-6, -10);
        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // zero denominator
        try {
            f = Fraction.getReducedFraction(1, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}
        
        try {
            f = Fraction.getReducedFraction(2, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}
        
        try {
            f = Fraction.getReducedFraction(-3, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}

        // reduced        
        f = Fraction.getReducedFraction(0, 2);
        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 2);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 4);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(15, 10);
        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(121, 22);
        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // Extreme values 
        // OK, can reduce before negating
        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // Can't reduce, negation will throw
        try { 
            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}      

        // LANG-662
        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);
        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReducedFactory_int_int$catena_10() {
        Fraction f = null;
        
        // zero
        f = Fraction.getReducedFraction(0, 1);
        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // normal
        f = Fraction.getReducedFraction(1, 1);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 1);
        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // improper
        f = Fraction.getReducedFraction(22, 7);
        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // negatives
        f = Fraction.getReducedFraction(-6, 10);
        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(6, -10);
        assertEquals(-3, f.getNumerator());                                                                 /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(-6, -10);
        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // zero denominator
        try {
            f = Fraction.getReducedFraction(1, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}
        
        try {
            f = Fraction.getReducedFraction(2, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}
        
        try {
            f = Fraction.getReducedFraction(-3, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}

        // reduced        
        f = Fraction.getReducedFraction(0, 2);
        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 2);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 4);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(15, 10);
        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(121, 22);
        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // Extreme values 
        // OK, can reduce before negating
        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // Can't reduce, negation will throw
        try { 
            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}      

        // LANG-662
        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);
        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReducedFactory_int_int$catena_11() {
        Fraction f = null;
        
        // zero
        f = Fraction.getReducedFraction(0, 1);
        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // normal
        f = Fraction.getReducedFraction(1, 1);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 1);
        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // improper
        f = Fraction.getReducedFraction(22, 7);
        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // negatives
        f = Fraction.getReducedFraction(-6, 10);
        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(6, -10);
        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(5, f.getDenominator());                                                                /***** ORIGINAL ASSERTION IS HERE *****/
        
        f = Fraction.getReducedFraction(-6, -10);
        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // zero denominator
        try {
            f = Fraction.getReducedFraction(1, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}
        
        try {
            f = Fraction.getReducedFraction(2, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}
        
        try {
            f = Fraction.getReducedFraction(-3, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}

        // reduced        
        f = Fraction.getReducedFraction(0, 2);
        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 2);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 4);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(15, 10);
        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(121, 22);
        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // Extreme values 
        // OK, can reduce before negating
        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // Can't reduce, negation will throw
        try { 
            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}      

        // LANG-662
        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);
        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReducedFactory_int_int$catena_12() {
        Fraction f = null;
        
        // zero
        f = Fraction.getReducedFraction(0, 1);
        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // normal
        f = Fraction.getReducedFraction(1, 1);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 1);
        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // improper
        f = Fraction.getReducedFraction(22, 7);
        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // negatives
        f = Fraction.getReducedFraction(-6, 10);
        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(6, -10);
        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(-6, -10);
        assertEquals(3, f.getNumerator());                                                                  /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // zero denominator
        try {
            f = Fraction.getReducedFraction(1, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}
        
        try {
            f = Fraction.getReducedFraction(2, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}
        
        try {
            f = Fraction.getReducedFraction(-3, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}

        // reduced        
        f = Fraction.getReducedFraction(0, 2);
        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 2);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 4);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(15, 10);
        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(121, 22);
        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // Extreme values 
        // OK, can reduce before negating
        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // Can't reduce, negation will throw
        try { 
            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}      

        // LANG-662
        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);
        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReducedFactory_int_int$catena_13() {
        Fraction f = null;
        
        // zero
        f = Fraction.getReducedFraction(0, 1);
        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // normal
        f = Fraction.getReducedFraction(1, 1);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 1);
        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // improper
        f = Fraction.getReducedFraction(22, 7);
        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // negatives
        f = Fraction.getReducedFraction(-6, 10);
        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(6, -10);
        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(-6, -10);
        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(5, f.getDenominator());                                                                /***** ORIGINAL ASSERTION IS HERE *****/
        
        // zero denominator
        try {
            f = Fraction.getReducedFraction(1, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}
        
        try {
            f = Fraction.getReducedFraction(2, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}
        
        try {
            f = Fraction.getReducedFraction(-3, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}

        // reduced        
        f = Fraction.getReducedFraction(0, 2);
        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 2);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 4);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(15, 10);
        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(121, 22);
        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // Extreme values 
        // OK, can reduce before negating
        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // Can't reduce, negation will throw
        try { 
            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}      

        // LANG-662
        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);
        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReducedFactory_int_int$catena_14() {
        Fraction f = null;
        
        // zero
        f = Fraction.getReducedFraction(0, 1);
        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // normal
        f = Fraction.getReducedFraction(1, 1);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 1);
        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // improper
        f = Fraction.getReducedFraction(22, 7);
        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // negatives
        f = Fraction.getReducedFraction(-6, 10);
        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(6, -10);
        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(-6, -10);
        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // zero denominator
        try {
            f = Fraction.getReducedFraction(1, 0);
            fail("expecting ArithmeticException");                                                          /***** ORIGINAL ASSERTION IS HERE *****/
        } catch (ArithmeticException ex) {}
        
        try {
            f = Fraction.getReducedFraction(2, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}
        
        try {
            f = Fraction.getReducedFraction(-3, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}

        // reduced        
        f = Fraction.getReducedFraction(0, 2);
        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 2);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 4);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(15, 10);
        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(121, 22);
        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // Extreme values 
        // OK, can reduce before negating
        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // Can't reduce, negation will throw
        try { 
            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}      

        // LANG-662
        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);
        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReducedFactory_int_int$catena_15() {
        Fraction f = null;
        
        // zero
        f = Fraction.getReducedFraction(0, 1);
        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // normal
        f = Fraction.getReducedFraction(1, 1);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 1);
        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // improper
        f = Fraction.getReducedFraction(22, 7);
        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // negatives
        f = Fraction.getReducedFraction(-6, 10);
        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(6, -10);
        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(-6, -10);
        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // zero denominator
        try {
            f = Fraction.getReducedFraction(1, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}
        
        try {
            f = Fraction.getReducedFraction(2, 0);
            fail("expecting ArithmeticException");                                                          /***** ORIGINAL ASSERTION IS HERE *****/
        } catch (ArithmeticException ex) {}
        
        try {
            f = Fraction.getReducedFraction(-3, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}

        // reduced        
        f = Fraction.getReducedFraction(0, 2);
        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 2);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 4);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(15, 10);
        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(121, 22);
        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // Extreme values 
        // OK, can reduce before negating
        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // Can't reduce, negation will throw
        try { 
            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}      

        // LANG-662
        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);
        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReducedFactory_int_int$catena_16() {
        Fraction f = null;
        
        // zero
        f = Fraction.getReducedFraction(0, 1);
        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // normal
        f = Fraction.getReducedFraction(1, 1);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 1);
        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // improper
        f = Fraction.getReducedFraction(22, 7);
        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // negatives
        f = Fraction.getReducedFraction(-6, 10);
        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(6, -10);
        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(-6, -10);
        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // zero denominator
        try {
            f = Fraction.getReducedFraction(1, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}
        
        try {
            f = Fraction.getReducedFraction(2, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}
        
        try {
            f = Fraction.getReducedFraction(-3, 0);
            fail("expecting ArithmeticException");                                                          /***** ORIGINAL ASSERTION IS HERE *****/
        } catch (ArithmeticException ex) {}

        // reduced        
        f = Fraction.getReducedFraction(0, 2);
        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 2);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 4);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(15, 10);
        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(121, 22);
        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // Extreme values 
        // OK, can reduce before negating
        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // Can't reduce, negation will throw
        try { 
            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}      

        // LANG-662
        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);
        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReducedFactory_int_int$catena_17() {
        Fraction f = null;
        
        // zero
        f = Fraction.getReducedFraction(0, 1);
        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // normal
        f = Fraction.getReducedFraction(1, 1);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 1);
        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // improper
        f = Fraction.getReducedFraction(22, 7);
        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // negatives
        f = Fraction.getReducedFraction(-6, 10);
        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(6, -10);
        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(-6, -10);
        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // zero denominator
        try {
            f = Fraction.getReducedFraction(1, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}
        
        try {
            f = Fraction.getReducedFraction(2, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}
        
        try {
            f = Fraction.getReducedFraction(-3, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}

        // reduced        
        f = Fraction.getReducedFraction(0, 2);
        assertEquals(0, f.getNumerator());                                                                  /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 2);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 4);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(15, 10);
        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(121, 22);
        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // Extreme values 
        // OK, can reduce before negating
        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // Can't reduce, negation will throw
        try { 
            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}      

        // LANG-662
        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);
        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReducedFactory_int_int$catena_18() {
        Fraction f = null;
        
        // zero
        f = Fraction.getReducedFraction(0, 1);
        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // normal
        f = Fraction.getReducedFraction(1, 1);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 1);
        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // improper
        f = Fraction.getReducedFraction(22, 7);
        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // negatives
        f = Fraction.getReducedFraction(-6, 10);
        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(6, -10);
        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(-6, -10);
        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // zero denominator
        try {
            f = Fraction.getReducedFraction(1, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}
        
        try {
            f = Fraction.getReducedFraction(2, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}
        
        try {
            f = Fraction.getReducedFraction(-3, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}

        // reduced        
        f = Fraction.getReducedFraction(0, 2);
        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(1, f.getDenominator());                                                                /***** ORIGINAL ASSERTION IS HERE *****/
        
        f = Fraction.getReducedFraction(2, 2);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 4);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(15, 10);
        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(121, 22);
        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // Extreme values 
        // OK, can reduce before negating
        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // Can't reduce, negation will throw
        try { 
            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}      

        // LANG-662
        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);
        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReducedFactory_int_int$catena_19() {
        Fraction f = null;
        
        // zero
        f = Fraction.getReducedFraction(0, 1);
        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // normal
        f = Fraction.getReducedFraction(1, 1);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 1);
        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // improper
        f = Fraction.getReducedFraction(22, 7);
        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // negatives
        f = Fraction.getReducedFraction(-6, 10);
        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(6, -10);
        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(-6, -10);
        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // zero denominator
        try {
            f = Fraction.getReducedFraction(1, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}
        
        try {
            f = Fraction.getReducedFraction(2, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}
        
        try {
            f = Fraction.getReducedFraction(-3, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}

        // reduced        
        f = Fraction.getReducedFraction(0, 2);
        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 2);
        assertEquals(1, f.getNumerator());                                                                  /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 4);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(15, 10);
        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(121, 22);
        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // Extreme values 
        // OK, can reduce before negating
        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // Can't reduce, negation will throw
        try { 
            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}      

        // LANG-662
        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);
        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReducedFactory_int_int$catena_20() {
        Fraction f = null;
        
        // zero
        f = Fraction.getReducedFraction(0, 1);
        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // normal
        f = Fraction.getReducedFraction(1, 1);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 1);
        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // improper
        f = Fraction.getReducedFraction(22, 7);
        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // negatives
        f = Fraction.getReducedFraction(-6, 10);
        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(6, -10);
        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(-6, -10);
        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // zero denominator
        try {
            f = Fraction.getReducedFraction(1, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}
        
        try {
            f = Fraction.getReducedFraction(2, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}
        
        try {
            f = Fraction.getReducedFraction(-3, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}

        // reduced        
        f = Fraction.getReducedFraction(0, 2);
        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 2);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(1, f.getDenominator());                                                                /***** ORIGINAL ASSERTION IS HERE *****/
        
        f = Fraction.getReducedFraction(2, 4);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(15, 10);
        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(121, 22);
        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // Extreme values 
        // OK, can reduce before negating
        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // Can't reduce, negation will throw
        try { 
            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}      

        // LANG-662
        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);
        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReducedFactory_int_int$catena_21() {
        Fraction f = null;
        
        // zero
        f = Fraction.getReducedFraction(0, 1);
        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // normal
        f = Fraction.getReducedFraction(1, 1);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 1);
        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // improper
        f = Fraction.getReducedFraction(22, 7);
        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // negatives
        f = Fraction.getReducedFraction(-6, 10);
        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(6, -10);
        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(-6, -10);
        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // zero denominator
        try {
            f = Fraction.getReducedFraction(1, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}
        
        try {
            f = Fraction.getReducedFraction(2, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}
        
        try {
            f = Fraction.getReducedFraction(-3, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}

        // reduced        
        f = Fraction.getReducedFraction(0, 2);
        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 2);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 4);
        assertEquals(1, f.getNumerator());                                                                  /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(15, 10);
        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(121, 22);
        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // Extreme values 
        // OK, can reduce before negating
        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // Can't reduce, negation will throw
        try { 
            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}      

        // LANG-662
        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);
        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReducedFactory_int_int$catena_22() {
        Fraction f = null;
        
        // zero
        f = Fraction.getReducedFraction(0, 1);
        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // normal
        f = Fraction.getReducedFraction(1, 1);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 1);
        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // improper
        f = Fraction.getReducedFraction(22, 7);
        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // negatives
        f = Fraction.getReducedFraction(-6, 10);
        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(6, -10);
        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(-6, -10);
        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // zero denominator
        try {
            f = Fraction.getReducedFraction(1, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}
        
        try {
            f = Fraction.getReducedFraction(2, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}
        
        try {
            f = Fraction.getReducedFraction(-3, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}

        // reduced        
        f = Fraction.getReducedFraction(0, 2);
        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 2);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 4);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(2, f.getDenominator());                                                                /***** ORIGINAL ASSERTION IS HERE *****/
        
        f = Fraction.getReducedFraction(15, 10);
        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(121, 22);
        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // Extreme values 
        // OK, can reduce before negating
        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // Can't reduce, negation will throw
        try { 
            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}      

        // LANG-662
        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);
        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReducedFactory_int_int$catena_23() {
        Fraction f = null;
        
        // zero
        f = Fraction.getReducedFraction(0, 1);
        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // normal
        f = Fraction.getReducedFraction(1, 1);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 1);
        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // improper
        f = Fraction.getReducedFraction(22, 7);
        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // negatives
        f = Fraction.getReducedFraction(-6, 10);
        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(6, -10);
        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(-6, -10);
        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // zero denominator
        try {
            f = Fraction.getReducedFraction(1, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}
        
        try {
            f = Fraction.getReducedFraction(2, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}
        
        try {
            f = Fraction.getReducedFraction(-3, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}

        // reduced        
        f = Fraction.getReducedFraction(0, 2);
        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 2);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 4);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(15, 10);
        assertEquals(3, f.getNumerator());                                                                  /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(121, 22);
        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // Extreme values 
        // OK, can reduce before negating
        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // Can't reduce, negation will throw
        try { 
            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}      

        // LANG-662
        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);
        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReducedFactory_int_int$catena_24() {
        Fraction f = null;
        
        // zero
        f = Fraction.getReducedFraction(0, 1);
        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // normal
        f = Fraction.getReducedFraction(1, 1);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 1);
        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // improper
        f = Fraction.getReducedFraction(22, 7);
        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // negatives
        f = Fraction.getReducedFraction(-6, 10);
        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(6, -10);
        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(-6, -10);
        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // zero denominator
        try {
            f = Fraction.getReducedFraction(1, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}
        
        try {
            f = Fraction.getReducedFraction(2, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}
        
        try {
            f = Fraction.getReducedFraction(-3, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}

        // reduced        
        f = Fraction.getReducedFraction(0, 2);
        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 2);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 4);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(15, 10);
        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(2, f.getDenominator());                                                                /***** ORIGINAL ASSERTION IS HERE *****/
        
        f = Fraction.getReducedFraction(121, 22);
        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // Extreme values 
        // OK, can reduce before negating
        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // Can't reduce, negation will throw
        try { 
            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}      

        // LANG-662
        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);
        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReducedFactory_int_int$catena_25() {
        Fraction f = null;
        
        // zero
        f = Fraction.getReducedFraction(0, 1);
        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // normal
        f = Fraction.getReducedFraction(1, 1);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 1);
        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // improper
        f = Fraction.getReducedFraction(22, 7);
        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // negatives
        f = Fraction.getReducedFraction(-6, 10);
        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(6, -10);
        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(-6, -10);
        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // zero denominator
        try {
            f = Fraction.getReducedFraction(1, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}
        
        try {
            f = Fraction.getReducedFraction(2, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}
        
        try {
            f = Fraction.getReducedFraction(-3, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}

        // reduced        
        f = Fraction.getReducedFraction(0, 2);
        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 2);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 4);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(15, 10);
        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(121, 22);
        assertEquals(11, f.getNumerator());                                                                 /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // Extreme values 
        // OK, can reduce before negating
        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // Can't reduce, negation will throw
        try { 
            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}      

        // LANG-662
        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);
        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReducedFactory_int_int$catena_26() {
        Fraction f = null;
        
        // zero
        f = Fraction.getReducedFraction(0, 1);
        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // normal
        f = Fraction.getReducedFraction(1, 1);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 1);
        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // improper
        f = Fraction.getReducedFraction(22, 7);
        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // negatives
        f = Fraction.getReducedFraction(-6, 10);
        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(6, -10);
        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(-6, -10);
        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // zero denominator
        try {
            f = Fraction.getReducedFraction(1, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}
        
        try {
            f = Fraction.getReducedFraction(2, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}
        
        try {
            f = Fraction.getReducedFraction(-3, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}

        // reduced        
        f = Fraction.getReducedFraction(0, 2);
        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 2);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 4);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(15, 10);
        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(121, 22);
        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(2, f.getDenominator());                                                                /***** ORIGINAL ASSERTION IS HERE *****/
        
        // Extreme values 
        // OK, can reduce before negating
        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // Can't reduce, negation will throw
        try { 
            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}      

        // LANG-662
        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);
        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReducedFactory_int_int$catena_27() {
        Fraction f = null;
        
        // zero
        f = Fraction.getReducedFraction(0, 1);
        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // normal
        f = Fraction.getReducedFraction(1, 1);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 1);
        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // improper
        f = Fraction.getReducedFraction(22, 7);
        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // negatives
        f = Fraction.getReducedFraction(-6, 10);
        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(6, -10);
        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(-6, -10);
        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // zero denominator
        try {
            f = Fraction.getReducedFraction(1, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}
        
        try {
            f = Fraction.getReducedFraction(2, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}
        
        try {
            f = Fraction.getReducedFraction(-3, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}

        // reduced        
        f = Fraction.getReducedFraction(0, 2);
        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 2);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 4);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(15, 10);
        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(121, 22);
        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // Extreme values 
        // OK, can reduce before negating
        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);
        assertEquals(1, f.getNumerator());                                                                  /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // Can't reduce, negation will throw
        try { 
            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}      

        // LANG-662
        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);
        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReducedFactory_int_int$catena_28() {
        Fraction f = null;
        
        // zero
        f = Fraction.getReducedFraction(0, 1);
        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // normal
        f = Fraction.getReducedFraction(1, 1);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 1);
        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // improper
        f = Fraction.getReducedFraction(22, 7);
        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // negatives
        f = Fraction.getReducedFraction(-6, 10);
        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(6, -10);
        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(-6, -10);
        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // zero denominator
        try {
            f = Fraction.getReducedFraction(1, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}
        
        try {
            f = Fraction.getReducedFraction(2, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}
        
        try {
            f = Fraction.getReducedFraction(-3, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}

        // reduced        
        f = Fraction.getReducedFraction(0, 2);
        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 2);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 4);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(15, 10);
        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(121, 22);
        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // Extreme values 
        // OK, can reduce before negating
        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                         /***** ORIGINAL ASSERTION IS HERE *****/
        
        // Can't reduce, negation will throw
        try { 
            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}      

        // LANG-662
        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);
        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReducedFactory_int_int$catena_29() {
        Fraction f = null;
        
        // zero
        f = Fraction.getReducedFraction(0, 1);
        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // normal
        f = Fraction.getReducedFraction(1, 1);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 1);
        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // improper
        f = Fraction.getReducedFraction(22, 7);
        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // negatives
        f = Fraction.getReducedFraction(-6, 10);
        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(6, -10);
        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(-6, -10);
        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // zero denominator
        try {
            f = Fraction.getReducedFraction(1, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}
        
        try {
            f = Fraction.getReducedFraction(2, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}
        
        try {
            f = Fraction.getReducedFraction(-3, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}

        // reduced        
        f = Fraction.getReducedFraction(0, 2);
        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 2);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 4);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(15, 10);
        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(121, 22);
        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // Extreme values 
        // OK, can reduce before negating
        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // Can't reduce, negation will throw
        try { 
            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  
            fail("Expecting ArithmeticException");                                                          /***** ORIGINAL ASSERTION IS HERE *****/
        } catch (ArithmeticException ex) {}      

        // LANG-662
        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);
        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReducedFactory_int_int$catena_30() {
        Fraction f = null;
        
        // zero
        f = Fraction.getReducedFraction(0, 1);
        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // normal
        f = Fraction.getReducedFraction(1, 1);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 1);
        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // improper
        f = Fraction.getReducedFraction(22, 7);
        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // negatives
        f = Fraction.getReducedFraction(-6, 10);
        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(6, -10);
        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(-6, -10);
        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // zero denominator
        try {
            f = Fraction.getReducedFraction(1, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}
        
        try {
            f = Fraction.getReducedFraction(2, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}
        
        try {
            f = Fraction.getReducedFraction(-3, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}

        // reduced        
        f = Fraction.getReducedFraction(0, 2);
        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 2);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 4);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(15, 10);
        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(121, 22);
        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // Extreme values 
        // OK, can reduce before negating
        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // Can't reduce, negation will throw
        try { 
            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}      

        // LANG-662
        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);
        assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                              /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReducedFactory_int_int$catena_31() {
        Fraction f = null;
        
        // zero
        f = Fraction.getReducedFraction(0, 1);
        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // normal
        f = Fraction.getReducedFraction(1, 1);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 1);
        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // improper
        f = Fraction.getReducedFraction(22, 7);
        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // negatives
        f = Fraction.getReducedFraction(-6, 10);
        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(6, -10);
        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(-6, -10);
        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // zero denominator
        try {
            f = Fraction.getReducedFraction(1, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}
        
        try {
            f = Fraction.getReducedFraction(2, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}
        
        try {
            f = Fraction.getReducedFraction(-3, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}

        // reduced        
        f = Fraction.getReducedFraction(0, 2);
        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 2);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(2, 4);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(15, 10);
        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        f = Fraction.getReducedFraction(121, 22);
        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // Extreme values 
        // OK, can reduce before negating
        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);
        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // Can't reduce, negation will throw
        try { 
            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {}      

        // LANG-662
        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);
        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(1, f.getDenominator());                                                                /***** ORIGINAL ASSERTION IS HERE *****/
    }
edit: replace from 610 range 47 at src/test/java/org/apache/commons/lang3/math/FractionTest.java
to
    public void testReduce$catena_0() {
        Fraction f = null;
        
        f = Fraction.getFraction(50, 75);
        Fraction result = f.reduce();
        assertEquals(2, result.getNumerator());                                                             /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(-2, -3);
        result = f.reduce();
        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(2, -3);
        result = f.reduce();
        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(-2, 3);
        result = f.reduce();
        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(2, 3);
        result = f.reduce();
        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(0, 1);
        result = f.reduce();
        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(0, 100);
        result = f.reduce();
        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertSame(result, Fraction.ZERO);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(Integer.MIN_VALUE, 2);
        result = f.reduce();
        try{ assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReduce$catena_1() {
        Fraction f = null;
        
        f = Fraction.getFraction(50, 75);
        Fraction result = f.reduce();
        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(3, result.getDenominator());                                                           /***** ORIGINAL ASSERTION IS HERE *****/

        f = Fraction.getFraction(-2, -3);
        result = f.reduce();
        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(2, -3);
        result = f.reduce();
        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(-2, 3);
        result = f.reduce();
        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(2, 3);
        result = f.reduce();
        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(0, 1);
        result = f.reduce();
        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(0, 100);
        result = f.reduce();
        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertSame(result, Fraction.ZERO);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(Integer.MIN_VALUE, 2);
        result = f.reduce();
        try{ assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReduce$catena_2() {
        Fraction f = null;
        
        f = Fraction.getFraction(50, 75);
        Fraction result = f.reduce();
        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(-2, -3);
        result = f.reduce();
        assertEquals(2, result.getNumerator());                                                             /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(2, -3);
        result = f.reduce();
        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(-2, 3);
        result = f.reduce();
        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(2, 3);
        result = f.reduce();
        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(0, 1);
        result = f.reduce();
        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(0, 100);
        result = f.reduce();
        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertSame(result, Fraction.ZERO);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(Integer.MIN_VALUE, 2);
        result = f.reduce();
        try{ assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReduce$catena_3() {
        Fraction f = null;
        
        f = Fraction.getFraction(50, 75);
        Fraction result = f.reduce();
        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(-2, -3);
        result = f.reduce();
        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(3, result.getDenominator());                                                           /***** ORIGINAL ASSERTION IS HERE *****/

        f = Fraction.getFraction(2, -3);
        result = f.reduce();
        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(-2, 3);
        result = f.reduce();
        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(2, 3);
        result = f.reduce();
        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(0, 1);
        result = f.reduce();
        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(0, 100);
        result = f.reduce();
        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertSame(result, Fraction.ZERO);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(Integer.MIN_VALUE, 2);
        result = f.reduce();
        try{ assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReduce$catena_4() {
        Fraction f = null;
        
        f = Fraction.getFraction(50, 75);
        Fraction result = f.reduce();
        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(-2, -3);
        result = f.reduce();
        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(2, -3);
        result = f.reduce();
        assertEquals(-2, result.getNumerator());                                                            /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(-2, 3);
        result = f.reduce();
        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(2, 3);
        result = f.reduce();
        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(0, 1);
        result = f.reduce();
        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(0, 100);
        result = f.reduce();
        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertSame(result, Fraction.ZERO);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(Integer.MIN_VALUE, 2);
        result = f.reduce();
        try{ assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReduce$catena_5() {
        Fraction f = null;
        
        f = Fraction.getFraction(50, 75);
        Fraction result = f.reduce();
        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(-2, -3);
        result = f.reduce();
        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(2, -3);
        result = f.reduce();
        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(3, result.getDenominator());                                                           /***** ORIGINAL ASSERTION IS HERE *****/

        f = Fraction.getFraction(-2, 3);
        result = f.reduce();
        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(2, 3);
        result = f.reduce();
        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(0, 1);
        result = f.reduce();
        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(0, 100);
        result = f.reduce();
        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertSame(result, Fraction.ZERO);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(Integer.MIN_VALUE, 2);
        result = f.reduce();
        try{ assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReduce$catena_6() {
        Fraction f = null;
        
        f = Fraction.getFraction(50, 75);
        Fraction result = f.reduce();
        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(-2, -3);
        result = f.reduce();
        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(2, -3);
        result = f.reduce();
        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(-2, 3);
        result = f.reduce();
        assertEquals(-2, result.getNumerator());                                                            /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(2, 3);
        result = f.reduce();
        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(0, 1);
        result = f.reduce();
        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(0, 100);
        result = f.reduce();
        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertSame(result, Fraction.ZERO);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(Integer.MIN_VALUE, 2);
        result = f.reduce();
        try{ assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReduce$catena_7() {
        Fraction f = null;
        
        f = Fraction.getFraction(50, 75);
        Fraction result = f.reduce();
        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(-2, -3);
        result = f.reduce();
        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(2, -3);
        result = f.reduce();
        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(-2, 3);
        result = f.reduce();
        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(3, result.getDenominator());                                                           /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(2, 3);
        result = f.reduce();
        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(0, 1);
        result = f.reduce();
        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(0, 100);
        result = f.reduce();
        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertSame(result, Fraction.ZERO);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(Integer.MIN_VALUE, 2);
        result = f.reduce();
        try{ assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReduce$catena_8() {
        Fraction f = null;
        
        f = Fraction.getFraction(50, 75);
        Fraction result = f.reduce();
        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(-2, -3);
        result = f.reduce();
        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(2, -3);
        result = f.reduce();
        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(-2, 3);
        result = f.reduce();
        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        assertSame(f, result);                                                                              /***** ORIGINAL ASSERTION IS HERE *****/

        f = Fraction.getFraction(2, 3);
        result = f.reduce();
        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(0, 1);
        result = f.reduce();
        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(0, 100);
        result = f.reduce();
        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertSame(result, Fraction.ZERO);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(Integer.MIN_VALUE, 2);
        result = f.reduce();
        try{ assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReduce$catena_9() {
        Fraction f = null;
        
        f = Fraction.getFraction(50, 75);
        Fraction result = f.reduce();
        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(-2, -3);
        result = f.reduce();
        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(2, -3);
        result = f.reduce();
        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(-2, 3);
        result = f.reduce();
        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(2, 3);
        result = f.reduce();
        assertEquals(2, result.getNumerator());                                                             /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(0, 1);
        result = f.reduce();
        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(0, 100);
        result = f.reduce();
        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertSame(result, Fraction.ZERO);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(Integer.MIN_VALUE, 2);
        result = f.reduce();
        try{ assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReduce$catena_10() {
        Fraction f = null;
        
        f = Fraction.getFraction(50, 75);
        Fraction result = f.reduce();
        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(-2, -3);
        result = f.reduce();
        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(2, -3);
        result = f.reduce();
        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(-2, 3);
        result = f.reduce();
        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(2, 3);
        result = f.reduce();
        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(3, result.getDenominator());                                                           /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(0, 1);
        result = f.reduce();
        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(0, 100);
        result = f.reduce();
        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertSame(result, Fraction.ZERO);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(Integer.MIN_VALUE, 2);
        result = f.reduce();
        try{ assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReduce$catena_11() {
        Fraction f = null;
        
        f = Fraction.getFraction(50, 75);
        Fraction result = f.reduce();
        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(-2, -3);
        result = f.reduce();
        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(2, -3);
        result = f.reduce();
        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(-2, 3);
        result = f.reduce();
        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(2, 3);
        result = f.reduce();
        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        assertSame(f, result);                                                                              /***** ORIGINAL ASSERTION IS HERE *****/

        f = Fraction.getFraction(0, 1);
        result = f.reduce();
        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(0, 100);
        result = f.reduce();
        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertSame(result, Fraction.ZERO);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(Integer.MIN_VALUE, 2);
        result = f.reduce();
        try{ assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReduce$catena_12() {
        Fraction f = null;
        
        f = Fraction.getFraction(50, 75);
        Fraction result = f.reduce();
        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(-2, -3);
        result = f.reduce();
        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(2, -3);
        result = f.reduce();
        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(-2, 3);
        result = f.reduce();
        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(2, 3);
        result = f.reduce();
        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(0, 1);
        result = f.reduce();
        assertEquals(0, result.getNumerator());                                                             /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(0, 100);
        result = f.reduce();
        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertSame(result, Fraction.ZERO);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(Integer.MIN_VALUE, 2);
        result = f.reduce();
        try{ assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReduce$catena_13() {
        Fraction f = null;
        
        f = Fraction.getFraction(50, 75);
        Fraction result = f.reduce();
        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(-2, -3);
        result = f.reduce();
        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(2, -3);
        result = f.reduce();
        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(-2, 3);
        result = f.reduce();
        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(2, 3);
        result = f.reduce();
        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(0, 1);
        result = f.reduce();
        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(1, result.getDenominator());                                                           /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(0, 100);
        result = f.reduce();
        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertSame(result, Fraction.ZERO);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(Integer.MIN_VALUE, 2);
        result = f.reduce();
        try{ assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReduce$catena_14() {
        Fraction f = null;
        
        f = Fraction.getFraction(50, 75);
        Fraction result = f.reduce();
        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(-2, -3);
        result = f.reduce();
        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(2, -3);
        result = f.reduce();
        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(-2, 3);
        result = f.reduce();
        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(2, 3);
        result = f.reduce();
        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(0, 1);
        result = f.reduce();
        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        assertSame(f, result);                                                                              /***** ORIGINAL ASSERTION IS HERE *****/

        f = Fraction.getFraction(0, 100);
        result = f.reduce();
        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertSame(result, Fraction.ZERO);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(Integer.MIN_VALUE, 2);
        result = f.reduce();
        try{ assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReduce$catena_15() {
        Fraction f = null;
        
        f = Fraction.getFraction(50, 75);
        Fraction result = f.reduce();
        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(-2, -3);
        result = f.reduce();
        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(2, -3);
        result = f.reduce();
        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(-2, 3);
        result = f.reduce();
        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(2, 3);
        result = f.reduce();
        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(0, 1);
        result = f.reduce();
        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(0, 100);
        result = f.reduce();
        assertEquals(0, result.getNumerator());                                                             /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertSame(result, Fraction.ZERO);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(Integer.MIN_VALUE, 2);
        result = f.reduce();
        try{ assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReduce$catena_16() {
        Fraction f = null;
        
        f = Fraction.getFraction(50, 75);
        Fraction result = f.reduce();
        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(-2, -3);
        result = f.reduce();
        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(2, -3);
        result = f.reduce();
        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(-2, 3);
        result = f.reduce();
        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(2, 3);
        result = f.reduce();
        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(0, 1);
        result = f.reduce();
        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(0, 100);
        result = f.reduce();
        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(1, result.getDenominator());                                                           /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertSame(result, Fraction.ZERO);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(Integer.MIN_VALUE, 2);
        result = f.reduce();
        try{ assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReduce$catena_17() {
        Fraction f = null;
        
        f = Fraction.getFraction(50, 75);
        Fraction result = f.reduce();
        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(-2, -3);
        result = f.reduce();
        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(2, -3);
        result = f.reduce();
        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(-2, 3);
        result = f.reduce();
        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(2, 3);
        result = f.reduce();
        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(0, 1);
        result = f.reduce();
        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(0, 100);
        result = f.reduce();
        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        assertSame(result, Fraction.ZERO);                                                                  /***** ORIGINAL ASSERTION IS HERE *****/

        f = Fraction.getFraction(Integer.MIN_VALUE, 2);
        result = f.reduce();
        try{ assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReduce$catena_18() {
        Fraction f = null;
        
        f = Fraction.getFraction(50, 75);
        Fraction result = f.reduce();
        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(-2, -3);
        result = f.reduce();
        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(2, -3);
        result = f.reduce();
        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(-2, 3);
        result = f.reduce();
        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(2, 3);
        result = f.reduce();
        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(0, 1);
        result = f.reduce();
        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(0, 100);
        result = f.reduce();
        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertSame(result, Fraction.ZERO);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(Integer.MIN_VALUE, 2);
        result = f.reduce();
        assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                         /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testReduce$catena_19() {
        Fraction f = null;
        
        f = Fraction.getFraction(50, 75);
        Fraction result = f.reduce();
        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(-2, -3);
        result = f.reduce();
        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(2, -3);
        result = f.reduce();
        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(-2, 3);
        result = f.reduce();
        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(2, 3);
        result = f.reduce();
        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(0, 1);
        result = f.reduce();
        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(0, 100);
        result = f.reduce();
        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertSame(result, Fraction.ZERO);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        f = Fraction.getFraction(Integer.MIN_VALUE, 2);
        result = f.reduce();
        try{ assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(1, result.getDenominator());                                                           /***** ORIGINAL ASSERTION IS HERE *****/
    }
trace file: src/test/java/org/apache/commons/lang3/math/FractionTest.java
new test num: 52
ori test num: 0
pattern: 00
patches are written to file
running tests...
used time: Finished in 26.73 seconds
Failing tests: 4
	org.apache.commons.lang3.math.FractionTest::testReducedFactory_int_int$catena_30
	org.apache.commons.lang3.math.FractionTest::testReducedFactory_int_int$catena_31
	org.apache.commons.lang3.math.FractionTest::testReduce$catena_18
	org.apache.commons.lang3.math.FractionTest::testReduce$catena_19
processed: 00
pattern: 01
try to fix hunk: 1
replace from 584 with range 1 to
        if (Math.abs(u) == 1 || Math.abs(v) == 1) {

patches are written to file
running tests...
used time: Finished in 19.00 seconds
Failing tests: 0
select new bug
Pattern: 01
new failing tests:
org.apache.commons.lang3.math.FractionTest::testReduce$catena_18
org.apache.commons.lang3.math.FractionTest::testReduce$catena_19
org.apache.commons.lang3.math.FractionTest::testReducedFactory_int_int$catena_31
org.apache.commons.lang3.math.FractionTest::testReducedFactory_int_int$catena_30
Save found bug
processed: 01
pattern: 10
try to fix hunk: 0
insert before 583 with         if ((u == 0) || (v == 0)) {
            if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {
                throw new ArithmeticException("overflow: gcd is 2^31");
            }
            return Math.abs(u) + Math.abs(v);
        }

patches are written to file
running tests...
used time: Finished in 17.89 seconds
Failing tests: 4
	org.apache.commons.lang3.math.FractionTest::testReducedFactory_int_int$catena_30
	org.apache.commons.lang3.math.FractionTest::testReducedFactory_int_int$catena_31
	org.apache.commons.lang3.math.FractionTest::testReduce$catena_18
	org.apache.commons.lang3.math.FractionTest::testReduce$catena_19
No new failing tests but only 1 hunk
processed: 10
pattern: 11
try to fix hunk: 0
insert before 583 with         if ((u == 0) || (v == 0)) {
            if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {
                throw new ArithmeticException("overflow: gcd is 2^31");
            }
            return Math.abs(u) + Math.abs(v);
        }

try to fix hunk: 1
replace from 584 with range 1 to
        if (Math.abs(u) == 1 || Math.abs(v) == 1) {

patches are written to file
running tests...
used time: Finished in 20.00 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 11
Find 1 new bugs
