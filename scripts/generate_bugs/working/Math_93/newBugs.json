{
    "original": {
        "num_of_hunks": 3,
        "0": {
            "file_name": "src/java/org/apache/commons/math/util/MathUtils.java",
            "from_line_no": 345,
            "to_line_no": 346,
            "replaced_with": "        if (n < 0) {\n            throw new IllegalArgumentException(\"must have n >= 0 for n!\");\n        }\n        if (n > 20) {\n",
            "replaced": "        long result = Math.round(factorialDouble(n));\n        if (result == Long.MAX_VALUE) {\n",
            "patch_type": "replace",
            "next_line_no": 347
        },
        "1": {
            "file_name": "src/java/org/apache/commons/math/util/MathUtils.java",
            "replaced_with": "        if (n < 21) {\n            return factorial(n);\n        }\n",
            "patch_type": "insert",
            "next_line_no": 377
        },
        "2": {
            "file_name": "src/java/org/apache/commons/math/util/MathUtils.java",
            "replaced_with": "        if (n < 21) {\n            return Math.log(factorial(n));\n        }\n",
            "patch_type": "insert",
            "next_line_no": 397
        }
    },
    "method": {
        "failing_tests": [
            "org.apache.commons.math.util.MathUtilsTest::testFactorial"
        ],
        "org.apache.commons.math.util.MathUtilsTest::testFactorial": {
            "file_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
            "Instance": "Begin: Pos(234, 12)\nEnd: Pos(244, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Math_93/src/test//org/apache/commons/math/util/MathUtilsTest.java\nName: testFactorial\nChilds: [StatementAssertion<Begin: Pos(236, 13), End: Pos(236, 73)>,\nStatementAssertion<Begin: Pos(237, 13), End: Pos(237, 105)>,\nStatementAssertion<Begin: Pos(238, 13), End: Pos(238, 102)>,\nStatementAssertion<Begin: Pos(241, 9), End: Pos(241, 53)>,\nStatementAssertion<Begin: Pos(242, 9), End: Pos(242, 69)>,\nStatementAssertion<Begin: Pos(243, 9), End: Pos(243, 66)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Math_93/src/test//org/apache/commons/math/util/MathUtilsTest.java",
            "name": "testFactorial",
            "begin": "Pos(234, 12)",
            "end": "Pos(244, 5)",
            "begin_line_no": 234,
            "end_line_no": 244,
            "child": [
                "Begin: Pos(236, 13)\nEnd: Pos(236, 73)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(237, 13)\nEnd: Pos(237, 105)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(238, 13)\nEnd: Pos(238, 102)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(241, 9)\nEnd: Pos(241, 53)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(242, 9)\nEnd: Pos(242, 69)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(243, 9)\nEnd: Pos(243, 66)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testFactorial$catena_0() {\n        for (int i = 1; i < 21; i++) {\n            assertEquals(i + \"! \", factorial(i), MathUtils.factorial(i));                                         /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(i + \"! \", (double)factorial(i), MathUtils.factorialDouble(i), Double.MIN_VALUE);    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(i + \"! \", Math.log((double)factorial(i)), MathUtils.factorialLog(i), 10E-12);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        try{ assertEquals(\"0\", 1, MathUtils.factorial(0));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"0\", 1.0d, MathUtils.factorialDouble(0), 1E-14);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"0\", 0.0d, MathUtils.factorialLog(0), 1E-14);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testFactorial$catena_1() {\n        for (int i = 1; i < 21; i++) {\n            try{ assertEquals(i + \"! \", factorial(i), MathUtils.factorial(i));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(i + \"! \", (double)factorial(i), MathUtils.factorialDouble(i), Double.MIN_VALUE);         /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(i + \"! \", Math.log((double)factorial(i)), MathUtils.factorialLog(i), 10E-12);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        try{ assertEquals(\"0\", 1, MathUtils.factorial(0));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"0\", 1.0d, MathUtils.factorialDouble(0), 1E-14);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"0\", 0.0d, MathUtils.factorialLog(0), 1E-14);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testFactorial$catena_2() {\n        for (int i = 1; i < 21; i++) {\n            try{ assertEquals(i + \"! \", factorial(i), MathUtils.factorial(i));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(i + \"! \", (double)factorial(i), MathUtils.factorialDouble(i), Double.MIN_VALUE);    }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(i + \"! \", Math.log((double)factorial(i)), MathUtils.factorialLog(i), 10E-12);            /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n        \n        try{ assertEquals(\"0\", 1, MathUtils.factorial(0));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"0\", 1.0d, MathUtils.factorialDouble(0), 1E-14);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"0\", 0.0d, MathUtils.factorialLog(0), 1E-14);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testFactorial$catena_3() {\n        for (int i = 1; i < 21; i++) {\n            try{ assertEquals(i + \"! \", factorial(i), MathUtils.factorial(i));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(i + \"! \", (double)factorial(i), MathUtils.factorialDouble(i), Double.MIN_VALUE);    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(i + \"! \", Math.log((double)factorial(i)), MathUtils.factorialLog(i), 10E-12);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        assertEquals(\"0\", 1, MathUtils.factorial(0));                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"0\", 1.0d, MathUtils.factorialDouble(0), 1E-14);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"0\", 0.0d, MathUtils.factorialLog(0), 1E-14);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testFactorial$catena_4() {\n        for (int i = 1; i < 21; i++) {\n            try{ assertEquals(i + \"! \", factorial(i), MathUtils.factorial(i));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(i + \"! \", (double)factorial(i), MathUtils.factorialDouble(i), Double.MIN_VALUE);    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(i + \"! \", Math.log((double)factorial(i)), MathUtils.factorialLog(i), 10E-12);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        try{ assertEquals(\"0\", 1, MathUtils.factorial(0));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"0\", 1.0d, MathUtils.factorialDouble(0), 1E-14);                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"0\", 0.0d, MathUtils.factorialLog(0), 1E-14);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testFactorial$catena_5() {\n        for (int i = 1; i < 21; i++) {\n            try{ assertEquals(i + \"! \", factorial(i), MathUtils.factorial(i));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(i + \"! \", (double)factorial(i), MathUtils.factorialDouble(i), Double.MIN_VALUE);    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(i + \"! \", Math.log((double)factorial(i)), MathUtils.factorialLog(i), 10E-12);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        try{ assertEquals(\"0\", 1, MathUtils.factorial(0));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"0\", 1.0d, MathUtils.factorialDouble(0), 1E-14);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"0\", 0.0d, MathUtils.factorialLog(0), 1E-14);                                                /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void testFactorial$catena_0() {\n        for (int i = 1; i < 21; i++) {\n            assertEquals(i + \"! \", factorial(i), MathUtils.factorial(i));                                         /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(i + \"! \", (double)factorial(i), MathUtils.factorialDouble(i), Double.MIN_VALUE);    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(i + \"! \", Math.log((double)factorial(i)), MathUtils.factorialLog(i), 10E-12);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        try{ assertEquals(\"0\", 1, MathUtils.factorial(0));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"0\", 1.0d, MathUtils.factorialDouble(0), 1E-14);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"0\", 0.0d, MathUtils.factorialLog(0), 1E-14);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void testFactorial$catena_1() {\n        for (int i = 1; i < 21; i++) {\n            try{ assertEquals(i + \"! \", factorial(i), MathUtils.factorial(i));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(i + \"! \", (double)factorial(i), MathUtils.factorialDouble(i), Double.MIN_VALUE);         /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(i + \"! \", Math.log((double)factorial(i)), MathUtils.factorialLog(i), 10E-12);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        try{ assertEquals(\"0\", 1, MathUtils.factorial(0));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"0\", 1.0d, MathUtils.factorialDouble(0), 1E-14);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"0\", 0.0d, MathUtils.factorialLog(0), 1E-14);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "2": "    public void testFactorial$catena_2() {\n        for (int i = 1; i < 21; i++) {\n            try{ assertEquals(i + \"! \", factorial(i), MathUtils.factorial(i));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(i + \"! \", (double)factorial(i), MathUtils.factorialDouble(i), Double.MIN_VALUE);    }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(i + \"! \", Math.log((double)factorial(i)), MathUtils.factorialLog(i), 10E-12);            /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n        \n        try{ assertEquals(\"0\", 1, MathUtils.factorial(0));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"0\", 1.0d, MathUtils.factorialDouble(0), 1E-14);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"0\", 0.0d, MathUtils.factorialLog(0), 1E-14);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "3": "    public void testFactorial$catena_3() {\n        for (int i = 1; i < 21; i++) {\n            try{ assertEquals(i + \"! \", factorial(i), MathUtils.factorial(i));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(i + \"! \", (double)factorial(i), MathUtils.factorialDouble(i), Double.MIN_VALUE);    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(i + \"! \", Math.log((double)factorial(i)), MathUtils.factorialLog(i), 10E-12);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        assertEquals(\"0\", 1, MathUtils.factorial(0));                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"0\", 1.0d, MathUtils.factorialDouble(0), 1E-14);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"0\", 0.0d, MathUtils.factorialLog(0), 1E-14);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "4": "    public void testFactorial$catena_4() {\n        for (int i = 1; i < 21; i++) {\n            try{ assertEquals(i + \"! \", factorial(i), MathUtils.factorial(i));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(i + \"! \", (double)factorial(i), MathUtils.factorialDouble(i), Double.MIN_VALUE);    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(i + \"! \", Math.log((double)factorial(i)), MathUtils.factorialLog(i), 10E-12);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        try{ assertEquals(\"0\", 1, MathUtils.factorial(0));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"0\", 1.0d, MathUtils.factorialDouble(0), 1E-14);                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"0\", 0.0d, MathUtils.factorialLog(0), 1E-14);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "5": "    public void testFactorial$catena_5() {\n        for (int i = 1; i < 21; i++) {\n            try{ assertEquals(i + \"! \", factorial(i), MathUtils.factorial(i));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(i + \"! \", (double)factorial(i), MathUtils.factorialDouble(i), Double.MIN_VALUE);    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(i + \"! \", Math.log((double)factorial(i)), MathUtils.factorialLog(i), 10E-12);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        try{ assertEquals(\"0\", 1, MathUtils.factorial(0));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"0\", 1.0d, MathUtils.factorialDouble(0), 1E-14);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"0\", 0.0d, MathUtils.factorialLog(0), 1E-14);                                                /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        }
    },
    "110": {
        "failing_tests": [
            "org.apache.commons.math.util.MathUtilsTest::testFactorial$catena_1"
        ]
    }
}