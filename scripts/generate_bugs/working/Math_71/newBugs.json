{
    "original": {
        "num_of_hunks": 2,
        "0": {
            "file_name": "src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java",
            "replaced_with": "                  interpolator.storeTime(stepStart);\n                  System.arraycopy(y, 0, yTmp, 0, y0.length);\n                  hNew     = 0;\n                  stepSize = 0;\n",
            "patch_type": "insert",
            "next_line_no": 300
        },
        "1": {
            "file_name": "src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java",
            "replaced_with": "                interpolator.storeTime(stepStart);\n                System.arraycopy(y, 0, yTmp, 0, y0.length);\n                stepSize = 0;\n",
            "patch_type": "insert",
            "next_line_no": 180
        }
    },
    "method": {
        "failing_tests": [
            "org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest::testMissedEndEvent",
            "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest::testMissedEndEvent"
        ],
        "org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest::testMissedEndEvent": {
            "file_path": "src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java",
            "Instance": "Begin: Pos(44, 10)\nEnd: Pos(95, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Math_71/src/test/java//org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java\nName: testMissedEndEvent\nChilds: [StatementAssertion<Begin: Pos(70, 7), End: Pos(70, 50)>,\nStatementAssertion<Begin: Pos(72, 11), End: Pos(72, 84)>,\nStatementAssertion<Begin: Pos(85, 15), End: Pos(85, 53)>,\nStatementAssertion<Begin: Pos(90, 7), End: Pos(90, 56)>,\nStatementAssertion<Begin: Pos(92, 11), End: Pos(92, 84)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Math_71/src/test/java//org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java",
            "name": "testMissedEndEvent",
            "begin": "Pos(44, 10)",
            "end": "Pos(95, 3)",
            "begin_line_no": 44,
            "end_line_no": 95,
            "child": [
                "Begin: Pos(70, 7)\nEnd: Pos(70, 50)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(72, 11)\nEnd: Pos(72, 84)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(85, 15)\nEnd: Pos(85, 53)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(90, 7)\nEnd: Pos(90, 56)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(92, 11)\nEnd: Pos(92, 84)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "  public void testMissedEndEvent$catena_0() throws IntegratorException, DerivativeException {\n      final double   t0     = 1878250320.0000029;\n      final double   tEvent = 1878250379.9999986;\n      final double[] k      = { 1.0e-4, 1.0e-5, 1.0e-6 };\n      FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {\n\n          public int getDimension() {\n              return k.length;\n          }\n\n          public void computeDerivatives(double t, double[] y, double[] yDot) {\n              for (int i = 0; i < y.length; ++i) {\n                  yDot[i] = k[i] * y[i];\n              }\n          }\n      };\n\n      ClassicalRungeKuttaIntegrator integrator = new ClassicalRungeKuttaIntegrator(60.0);\n\n      double[] y0   = new double[k.length];\n      for (int i = 0; i < y0.length; ++i) {\n          y0[i] = i + 1;\n      }\n      double[] y    = new double[k.length];\n\n      double finalT = integrator.integrate(ode, t0, y0, tEvent, y);\n      Assert.assertEquals(tEvent, finalT, 5.0e-6);                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n      for (int i = 0; i < y.length; ++i) {\n          try{ Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);                   }catch(Throwable __SHOULD_BE_IGNORED){}\n      }\n\n      integrator.addEventHandler(new EventHandler() {\n\n          public void resetState(double t, double[] y) {\n          }\n\n          public double g(double t, double[] y) {\n              return t - tEvent;\n          }\n\n          public int eventOccurred(double t, double[] y, boolean increasing) {\n              try{ Assert.assertEquals(tEvent, t, 5.0e-6);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n              return CONTINUE;\n          }\n      }, Double.POSITIVE_INFINITY, 1.0e-20, 100);\n      finalT = integrator.integrate(ode, t0, y0, tEvent + 120, y);\n      try{ Assert.assertEquals(tEvent + 120, finalT, 5.0e-6);                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n      for (int i = 0; i < y.length; ++i) {\n          try{ Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);                   }catch(Throwable __SHOULD_BE_IGNORED){}\n      }\n\n  }",
                "  public void testMissedEndEvent$catena_1() throws IntegratorException, DerivativeException {\n      final double   t0     = 1878250320.0000029;\n      final double   tEvent = 1878250379.9999986;\n      final double[] k      = { 1.0e-4, 1.0e-5, 1.0e-6 };\n      FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {\n\n          public int getDimension() {\n              return k.length;\n          }\n\n          public void computeDerivatives(double t, double[] y, double[] yDot) {\n              for (int i = 0; i < y.length; ++i) {\n                  yDot[i] = k[i] * y[i];\n              }\n          }\n      };\n\n      ClassicalRungeKuttaIntegrator integrator = new ClassicalRungeKuttaIntegrator(60.0);\n\n      double[] y0   = new double[k.length];\n      for (int i = 0; i < y0.length; ++i) {\n          y0[i] = i + 1;\n      }\n      double[] y    = new double[k.length];\n\n      double finalT = integrator.integrate(ode, t0, y0, tEvent, y);\n      try{ Assert.assertEquals(tEvent, finalT, 5.0e-6);                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n      for (int i = 0; i < y.length; ++i) {\n          Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);                        /***** ORIGINAL ASSERTION IS HERE *****/\n      }\n\n      integrator.addEventHandler(new EventHandler() {\n\n          public void resetState(double t, double[] y) {\n          }\n\n          public double g(double t, double[] y) {\n              return t - tEvent;\n          }\n\n          public int eventOccurred(double t, double[] y, boolean increasing) {\n              try{ Assert.assertEquals(tEvent, t, 5.0e-6);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n              return CONTINUE;\n          }\n      }, Double.POSITIVE_INFINITY, 1.0e-20, 100);\n      finalT = integrator.integrate(ode, t0, y0, tEvent + 120, y);\n      try{ Assert.assertEquals(tEvent + 120, finalT, 5.0e-6);                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n      for (int i = 0; i < y.length; ++i) {\n          try{ Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);                   }catch(Throwable __SHOULD_BE_IGNORED){}\n      }\n\n  }",
                "  public void testMissedEndEvent$catena_2() throws IntegratorException, DerivativeException {\n      final double   t0     = 1878250320.0000029;\n      final double   tEvent = 1878250379.9999986;\n      final double[] k      = { 1.0e-4, 1.0e-5, 1.0e-6 };\n      FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {\n\n          public int getDimension() {\n              return k.length;\n          }\n\n          public void computeDerivatives(double t, double[] y, double[] yDot) {\n              for (int i = 0; i < y.length; ++i) {\n                  yDot[i] = k[i] * y[i];\n              }\n          }\n      };\n\n      ClassicalRungeKuttaIntegrator integrator = new ClassicalRungeKuttaIntegrator(60.0);\n\n      double[] y0   = new double[k.length];\n      for (int i = 0; i < y0.length; ++i) {\n          y0[i] = i + 1;\n      }\n      double[] y    = new double[k.length];\n\n      double finalT = integrator.integrate(ode, t0, y0, tEvent, y);\n      try{ Assert.assertEquals(tEvent, finalT, 5.0e-6);                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n      for (int i = 0; i < y.length; ++i) {\n          try{ Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);                   }catch(Throwable __SHOULD_BE_IGNORED){}\n      }\n\n      integrator.addEventHandler(new EventHandler() {\n\n          public void resetState(double t, double[] y) {\n          }\n\n          public double g(double t, double[] y) {\n              return t - tEvent;\n          }\n\n          public int eventOccurred(double t, double[] y, boolean increasing) {\n              Assert.assertEquals(tEvent, t, 5.0e-6);                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n              return CONTINUE;\n          }\n      }, Double.POSITIVE_INFINITY, 1.0e-20, 100);\n      finalT = integrator.integrate(ode, t0, y0, tEvent + 120, y);\n      try{ Assert.assertEquals(tEvent + 120, finalT, 5.0e-6);                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n      for (int i = 0; i < y.length; ++i) {\n          try{ Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);                   }catch(Throwable __SHOULD_BE_IGNORED){}\n      }\n\n  }",
                "  public void testMissedEndEvent$catena_3() throws IntegratorException, DerivativeException {\n      final double   t0     = 1878250320.0000029;\n      final double   tEvent = 1878250379.9999986;\n      final double[] k      = { 1.0e-4, 1.0e-5, 1.0e-6 };\n      FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {\n\n          public int getDimension() {\n              return k.length;\n          }\n\n          public void computeDerivatives(double t, double[] y, double[] yDot) {\n              for (int i = 0; i < y.length; ++i) {\n                  yDot[i] = k[i] * y[i];\n              }\n          }\n      };\n\n      ClassicalRungeKuttaIntegrator integrator = new ClassicalRungeKuttaIntegrator(60.0);\n\n      double[] y0   = new double[k.length];\n      for (int i = 0; i < y0.length; ++i) {\n          y0[i] = i + 1;\n      }\n      double[] y    = new double[k.length];\n\n      double finalT = integrator.integrate(ode, t0, y0, tEvent, y);\n      try{ Assert.assertEquals(tEvent, finalT, 5.0e-6);                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n      for (int i = 0; i < y.length; ++i) {\n          try{ Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);                   }catch(Throwable __SHOULD_BE_IGNORED){}\n      }\n\n      integrator.addEventHandler(new EventHandler() {\n\n          public void resetState(double t, double[] y) {\n          }\n\n          public double g(double t, double[] y) {\n              return t - tEvent;\n          }\n\n          public int eventOccurred(double t, double[] y, boolean increasing) {\n              try{ Assert.assertEquals(tEvent, t, 5.0e-6);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n              return CONTINUE;\n          }\n      }, Double.POSITIVE_INFINITY, 1.0e-20, 100);\n      finalT = integrator.integrate(ode, t0, y0, tEvent + 120, y);\n      Assert.assertEquals(tEvent + 120, finalT, 5.0e-6);                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n      for (int i = 0; i < y.length; ++i) {\n          try{ Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);                   }catch(Throwable __SHOULD_BE_IGNORED){}\n      }\n\n  }",
                "  public void testMissedEndEvent$catena_4() throws IntegratorException, DerivativeException {\n      final double   t0     = 1878250320.0000029;\n      final double   tEvent = 1878250379.9999986;\n      final double[] k      = { 1.0e-4, 1.0e-5, 1.0e-6 };\n      FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {\n\n          public int getDimension() {\n              return k.length;\n          }\n\n          public void computeDerivatives(double t, double[] y, double[] yDot) {\n              for (int i = 0; i < y.length; ++i) {\n                  yDot[i] = k[i] * y[i];\n              }\n          }\n      };\n\n      ClassicalRungeKuttaIntegrator integrator = new ClassicalRungeKuttaIntegrator(60.0);\n\n      double[] y0   = new double[k.length];\n      for (int i = 0; i < y0.length; ++i) {\n          y0[i] = i + 1;\n      }\n      double[] y    = new double[k.length];\n\n      double finalT = integrator.integrate(ode, t0, y0, tEvent, y);\n      try{ Assert.assertEquals(tEvent, finalT, 5.0e-6);                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n      for (int i = 0; i < y.length; ++i) {\n          try{ Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);                   }catch(Throwable __SHOULD_BE_IGNORED){}\n      }\n\n      integrator.addEventHandler(new EventHandler() {\n\n          public void resetState(double t, double[] y) {\n          }\n\n          public double g(double t, double[] y) {\n              return t - tEvent;\n          }\n\n          public int eventOccurred(double t, double[] y, boolean increasing) {\n              try{ Assert.assertEquals(tEvent, t, 5.0e-6);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n              return CONTINUE;\n          }\n      }, Double.POSITIVE_INFINITY, 1.0e-20, 100);\n      finalT = integrator.integrate(ode, t0, y0, tEvent + 120, y);\n      try{ Assert.assertEquals(tEvent + 120, finalT, 5.0e-6);                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n      for (int i = 0; i < y.length; ++i) {\n          Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);                        /***** ORIGINAL ASSERTION IS HERE *****/\n      }\n\n  }"
            ],
            "func": {
                "0": "  public void testMissedEndEvent$catena_0() throws IntegratorException, DerivativeException {\n      final double   t0     = 1878250320.0000029;\n      final double   tEvent = 1878250379.9999986;\n      final double[] k      = { 1.0e-4, 1.0e-5, 1.0e-6 };\n      FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {\n\n          public int getDimension() {\n              return k.length;\n          }\n\n          public void computeDerivatives(double t, double[] y, double[] yDot) {\n              for (int i = 0; i < y.length; ++i) {\n                  yDot[i] = k[i] * y[i];\n              }\n          }\n      };\n\n      ClassicalRungeKuttaIntegrator integrator = new ClassicalRungeKuttaIntegrator(60.0);\n\n      double[] y0   = new double[k.length];\n      for (int i = 0; i < y0.length; ++i) {\n          y0[i] = i + 1;\n      }\n      double[] y    = new double[k.length];\n\n      double finalT = integrator.integrate(ode, t0, y0, tEvent, y);\n      Assert.assertEquals(tEvent, finalT, 5.0e-6);                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n      for (int i = 0; i < y.length; ++i) {\n          try{ Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);                   }catch(Throwable __SHOULD_BE_IGNORED){}\n      }\n\n      integrator.addEventHandler(new EventHandler() {\n\n          public void resetState(double t, double[] y) {\n          }\n\n          public double g(double t, double[] y) {\n              return t - tEvent;\n          }\n\n          public int eventOccurred(double t, double[] y, boolean increasing) {\n              try{ Assert.assertEquals(tEvent, t, 5.0e-6);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n              return CONTINUE;\n          }\n      }, Double.POSITIVE_INFINITY, 1.0e-20, 100);\n      finalT = integrator.integrate(ode, t0, y0, tEvent + 120, y);\n      try{ Assert.assertEquals(tEvent + 120, finalT, 5.0e-6);                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n      for (int i = 0; i < y.length; ++i) {\n          try{ Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);                   }catch(Throwable __SHOULD_BE_IGNORED){}\n      }\n\n  }",
                "1": "  public void testMissedEndEvent$catena_1() throws IntegratorException, DerivativeException {\n      final double   t0     = 1878250320.0000029;\n      final double   tEvent = 1878250379.9999986;\n      final double[] k      = { 1.0e-4, 1.0e-5, 1.0e-6 };\n      FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {\n\n          public int getDimension() {\n              return k.length;\n          }\n\n          public void computeDerivatives(double t, double[] y, double[] yDot) {\n              for (int i = 0; i < y.length; ++i) {\n                  yDot[i] = k[i] * y[i];\n              }\n          }\n      };\n\n      ClassicalRungeKuttaIntegrator integrator = new ClassicalRungeKuttaIntegrator(60.0);\n\n      double[] y0   = new double[k.length];\n      for (int i = 0; i < y0.length; ++i) {\n          y0[i] = i + 1;\n      }\n      double[] y    = new double[k.length];\n\n      double finalT = integrator.integrate(ode, t0, y0, tEvent, y);\n      try{ Assert.assertEquals(tEvent, finalT, 5.0e-6);                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n      for (int i = 0; i < y.length; ++i) {\n          Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);                        /***** ORIGINAL ASSERTION IS HERE *****/\n      }\n\n      integrator.addEventHandler(new EventHandler() {\n\n          public void resetState(double t, double[] y) {\n          }\n\n          public double g(double t, double[] y) {\n              return t - tEvent;\n          }\n\n          public int eventOccurred(double t, double[] y, boolean increasing) {\n              try{ Assert.assertEquals(tEvent, t, 5.0e-6);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n              return CONTINUE;\n          }\n      }, Double.POSITIVE_INFINITY, 1.0e-20, 100);\n      finalT = integrator.integrate(ode, t0, y0, tEvent + 120, y);\n      try{ Assert.assertEquals(tEvent + 120, finalT, 5.0e-6);                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n      for (int i = 0; i < y.length; ++i) {\n          try{ Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);                   }catch(Throwable __SHOULD_BE_IGNORED){}\n      }\n\n  }",
                "2": "  public void testMissedEndEvent$catena_2() throws IntegratorException, DerivativeException {\n      final double   t0     = 1878250320.0000029;\n      final double   tEvent = 1878250379.9999986;\n      final double[] k      = { 1.0e-4, 1.0e-5, 1.0e-6 };\n      FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {\n\n          public int getDimension() {\n              return k.length;\n          }\n\n          public void computeDerivatives(double t, double[] y, double[] yDot) {\n              for (int i = 0; i < y.length; ++i) {\n                  yDot[i] = k[i] * y[i];\n              }\n          }\n      };\n\n      ClassicalRungeKuttaIntegrator integrator = new ClassicalRungeKuttaIntegrator(60.0);\n\n      double[] y0   = new double[k.length];\n      for (int i = 0; i < y0.length; ++i) {\n          y0[i] = i + 1;\n      }\n      double[] y    = new double[k.length];\n\n      double finalT = integrator.integrate(ode, t0, y0, tEvent, y);\n      try{ Assert.assertEquals(tEvent, finalT, 5.0e-6);                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n      for (int i = 0; i < y.length; ++i) {\n          try{ Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);                   }catch(Throwable __SHOULD_BE_IGNORED){}\n      }\n\n      integrator.addEventHandler(new EventHandler() {\n\n          public void resetState(double t, double[] y) {\n          }\n\n          public double g(double t, double[] y) {\n              return t - tEvent;\n          }\n\n          public int eventOccurred(double t, double[] y, boolean increasing) {\n              Assert.assertEquals(tEvent, t, 5.0e-6);                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n              return CONTINUE;\n          }\n      }, Double.POSITIVE_INFINITY, 1.0e-20, 100);\n      finalT = integrator.integrate(ode, t0, y0, tEvent + 120, y);\n      try{ Assert.assertEquals(tEvent + 120, finalT, 5.0e-6);                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n      for (int i = 0; i < y.length; ++i) {\n          try{ Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);                   }catch(Throwable __SHOULD_BE_IGNORED){}\n      }\n\n  }",
                "3": "  public void testMissedEndEvent$catena_3() throws IntegratorException, DerivativeException {\n      final double   t0     = 1878250320.0000029;\n      final double   tEvent = 1878250379.9999986;\n      final double[] k      = { 1.0e-4, 1.0e-5, 1.0e-6 };\n      FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {\n\n          public int getDimension() {\n              return k.length;\n          }\n\n          public void computeDerivatives(double t, double[] y, double[] yDot) {\n              for (int i = 0; i < y.length; ++i) {\n                  yDot[i] = k[i] * y[i];\n              }\n          }\n      };\n\n      ClassicalRungeKuttaIntegrator integrator = new ClassicalRungeKuttaIntegrator(60.0);\n\n      double[] y0   = new double[k.length];\n      for (int i = 0; i < y0.length; ++i) {\n          y0[i] = i + 1;\n      }\n      double[] y    = new double[k.length];\n\n      double finalT = integrator.integrate(ode, t0, y0, tEvent, y);\n      try{ Assert.assertEquals(tEvent, finalT, 5.0e-6);                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n      for (int i = 0; i < y.length; ++i) {\n          try{ Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);                   }catch(Throwable __SHOULD_BE_IGNORED){}\n      }\n\n      integrator.addEventHandler(new EventHandler() {\n\n          public void resetState(double t, double[] y) {\n          }\n\n          public double g(double t, double[] y) {\n              return t - tEvent;\n          }\n\n          public int eventOccurred(double t, double[] y, boolean increasing) {\n              try{ Assert.assertEquals(tEvent, t, 5.0e-6);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n              return CONTINUE;\n          }\n      }, Double.POSITIVE_INFINITY, 1.0e-20, 100);\n      finalT = integrator.integrate(ode, t0, y0, tEvent + 120, y);\n      Assert.assertEquals(tEvent + 120, finalT, 5.0e-6);                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n      for (int i = 0; i < y.length; ++i) {\n          try{ Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);                   }catch(Throwable __SHOULD_BE_IGNORED){}\n      }\n\n  }",
                "4": "  public void testMissedEndEvent$catena_4() throws IntegratorException, DerivativeException {\n      final double   t0     = 1878250320.0000029;\n      final double   tEvent = 1878250379.9999986;\n      final double[] k      = { 1.0e-4, 1.0e-5, 1.0e-6 };\n      FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {\n\n          public int getDimension() {\n              return k.length;\n          }\n\n          public void computeDerivatives(double t, double[] y, double[] yDot) {\n              for (int i = 0; i < y.length; ++i) {\n                  yDot[i] = k[i] * y[i];\n              }\n          }\n      };\n\n      ClassicalRungeKuttaIntegrator integrator = new ClassicalRungeKuttaIntegrator(60.0);\n\n      double[] y0   = new double[k.length];\n      for (int i = 0; i < y0.length; ++i) {\n          y0[i] = i + 1;\n      }\n      double[] y    = new double[k.length];\n\n      double finalT = integrator.integrate(ode, t0, y0, tEvent, y);\n      try{ Assert.assertEquals(tEvent, finalT, 5.0e-6);                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n      for (int i = 0; i < y.length; ++i) {\n          try{ Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);                   }catch(Throwable __SHOULD_BE_IGNORED){}\n      }\n\n      integrator.addEventHandler(new EventHandler() {\n\n          public void resetState(double t, double[] y) {\n          }\n\n          public double g(double t, double[] y) {\n              return t - tEvent;\n          }\n\n          public int eventOccurred(double t, double[] y, boolean increasing) {\n              try{ Assert.assertEquals(tEvent, t, 5.0e-6);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n              return CONTINUE;\n          }\n      }, Double.POSITIVE_INFINITY, 1.0e-20, 100);\n      finalT = integrator.integrate(ode, t0, y0, tEvent + 120, y);\n      try{ Assert.assertEquals(tEvent + 120, finalT, 5.0e-6);                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n      for (int i = 0; i < y.length; ++i) {\n          Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);                        /***** ORIGINAL ASSERTION IS HERE *****/\n      }\n\n  }"
            }
        },
        "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest::testMissedEndEvent": {
            "file_path": "src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java",
            "Instance": "Begin: Pos(44, 10)\nEnd: Pos(98, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Math_71/src/test/java//org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java\nName: testMissedEndEvent\nChilds: [StatementAssertion<Begin: Pos(72, 7), End: Pos(72, 50)>,\nStatementAssertion<Begin: Pos(74, 11), End: Pos(74, 84)>,\nStatementAssertion<Begin: Pos(88, 15), End: Pos(88, 53)>,\nStatementAssertion<Begin: Pos(93, 7), End: Pos(93, 56)>,\nStatementAssertion<Begin: Pos(95, 11), End: Pos(95, 84)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Math_71/src/test/java//org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java",
            "name": "testMissedEndEvent",
            "begin": "Pos(44, 10)",
            "end": "Pos(98, 3)",
            "begin_line_no": 44,
            "end_line_no": 98,
            "child": [
                "Begin: Pos(72, 7)\nEnd: Pos(72, 50)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(74, 11)\nEnd: Pos(74, 84)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(88, 15)\nEnd: Pos(88, 53)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(93, 7)\nEnd: Pos(93, 56)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(95, 11)\nEnd: Pos(95, 84)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "  public void testMissedEndEvent$catena_0() throws IntegratorException, DerivativeException {\n      final double   t0     = 1878250320.0000029;\n      final double   tEvent = 1878250379.9999986;\n      final double[] k  = { 1.0e-4, 1.0e-5, 1.0e-6 };\n      FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {\n\n          public int getDimension() {\n              return k.length;\n          }\n\n          public void computeDerivatives(double t, double[] y, double[] yDot) {\n              for (int i = 0; i < y.length; ++i) {\n                  yDot[i] = k[i] * y[i];\n              }\n          }\n      };\n\n      DormandPrince853Integrator integrator = new DormandPrince853Integrator(0.0, 100.0,\n                                                                             1.0e-10, 1.0e-10);\n\n      double[] y0   = new double[k.length];\n      for (int i = 0; i < y0.length; ++i) {\n          y0[i] = i + 1;\n      }\n      double[] y    = new double[k.length];\n\n      integrator.setInitialStepSize(60.0);\n      double finalT = integrator.integrate(ode, t0, y0, tEvent, y);\n      Assert.assertEquals(tEvent, finalT, 5.0e-6);                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n      for (int i = 0; i < y.length; ++i) {\n          try{ Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);                   }catch(Throwable __SHOULD_BE_IGNORED){}\n      }\n\n      integrator.setInitialStepSize(60.0);\n      integrator.addEventHandler(new EventHandler() {\n\n          public void resetState(double t, double[] y) {\n          }\n\n          public double g(double t, double[] y) {\n              return t - tEvent;\n          }\n\n          public int eventOccurred(double t, double[] y, boolean increasing) {\n              try{ Assert.assertEquals(tEvent, t, 5.0e-6);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n              return CONTINUE;\n          }\n      }, Double.POSITIVE_INFINITY, 1.0e-20, 100);\n      finalT = integrator.integrate(ode, t0, y0, tEvent + 120, y);\n      try{ Assert.assertEquals(tEvent + 120, finalT, 5.0e-6);                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n      for (int i = 0; i < y.length; ++i) {\n          try{ Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);                   }catch(Throwable __SHOULD_BE_IGNORED){}\n      }\n\n  }",
                "  public void testMissedEndEvent$catena_1() throws IntegratorException, DerivativeException {\n      final double   t0     = 1878250320.0000029;\n      final double   tEvent = 1878250379.9999986;\n      final double[] k  = { 1.0e-4, 1.0e-5, 1.0e-6 };\n      FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {\n\n          public int getDimension() {\n              return k.length;\n          }\n\n          public void computeDerivatives(double t, double[] y, double[] yDot) {\n              for (int i = 0; i < y.length; ++i) {\n                  yDot[i] = k[i] * y[i];\n              }\n          }\n      };\n\n      DormandPrince853Integrator integrator = new DormandPrince853Integrator(0.0, 100.0,\n                                                                             1.0e-10, 1.0e-10);\n\n      double[] y0   = new double[k.length];\n      for (int i = 0; i < y0.length; ++i) {\n          y0[i] = i + 1;\n      }\n      double[] y    = new double[k.length];\n\n      integrator.setInitialStepSize(60.0);\n      double finalT = integrator.integrate(ode, t0, y0, tEvent, y);\n      try{ Assert.assertEquals(tEvent, finalT, 5.0e-6);                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n      for (int i = 0; i < y.length; ++i) {\n          Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);                        /***** ORIGINAL ASSERTION IS HERE *****/\n      }\n\n      integrator.setInitialStepSize(60.0);\n      integrator.addEventHandler(new EventHandler() {\n\n          public void resetState(double t, double[] y) {\n          }\n\n          public double g(double t, double[] y) {\n              return t - tEvent;\n          }\n\n          public int eventOccurred(double t, double[] y, boolean increasing) {\n              try{ Assert.assertEquals(tEvent, t, 5.0e-6);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n              return CONTINUE;\n          }\n      }, Double.POSITIVE_INFINITY, 1.0e-20, 100);\n      finalT = integrator.integrate(ode, t0, y0, tEvent + 120, y);\n      try{ Assert.assertEquals(tEvent + 120, finalT, 5.0e-6);                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n      for (int i = 0; i < y.length; ++i) {\n          try{ Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);                   }catch(Throwable __SHOULD_BE_IGNORED){}\n      }\n\n  }",
                "  public void testMissedEndEvent$catena_2() throws IntegratorException, DerivativeException {\n      final double   t0     = 1878250320.0000029;\n      final double   tEvent = 1878250379.9999986;\n      final double[] k  = { 1.0e-4, 1.0e-5, 1.0e-6 };\n      FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {\n\n          public int getDimension() {\n              return k.length;\n          }\n\n          public void computeDerivatives(double t, double[] y, double[] yDot) {\n              for (int i = 0; i < y.length; ++i) {\n                  yDot[i] = k[i] * y[i];\n              }\n          }\n      };\n\n      DormandPrince853Integrator integrator = new DormandPrince853Integrator(0.0, 100.0,\n                                                                             1.0e-10, 1.0e-10);\n\n      double[] y0   = new double[k.length];\n      for (int i = 0; i < y0.length; ++i) {\n          y0[i] = i + 1;\n      }\n      double[] y    = new double[k.length];\n\n      integrator.setInitialStepSize(60.0);\n      double finalT = integrator.integrate(ode, t0, y0, tEvent, y);\n      try{ Assert.assertEquals(tEvent, finalT, 5.0e-6);                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n      for (int i = 0; i < y.length; ++i) {\n          try{ Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);                   }catch(Throwable __SHOULD_BE_IGNORED){}\n      }\n\n      integrator.setInitialStepSize(60.0);\n      integrator.addEventHandler(new EventHandler() {\n\n          public void resetState(double t, double[] y) {\n          }\n\n          public double g(double t, double[] y) {\n              return t - tEvent;\n          }\n\n          public int eventOccurred(double t, double[] y, boolean increasing) {\n              Assert.assertEquals(tEvent, t, 5.0e-6);                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n              return CONTINUE;\n          }\n      }, Double.POSITIVE_INFINITY, 1.0e-20, 100);\n      finalT = integrator.integrate(ode, t0, y0, tEvent + 120, y);\n      try{ Assert.assertEquals(tEvent + 120, finalT, 5.0e-6);                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n      for (int i = 0; i < y.length; ++i) {\n          try{ Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);                   }catch(Throwable __SHOULD_BE_IGNORED){}\n      }\n\n  }",
                "  public void testMissedEndEvent$catena_3() throws IntegratorException, DerivativeException {\n      final double   t0     = 1878250320.0000029;\n      final double   tEvent = 1878250379.9999986;\n      final double[] k  = { 1.0e-4, 1.0e-5, 1.0e-6 };\n      FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {\n\n          public int getDimension() {\n              return k.length;\n          }\n\n          public void computeDerivatives(double t, double[] y, double[] yDot) {\n              for (int i = 0; i < y.length; ++i) {\n                  yDot[i] = k[i] * y[i];\n              }\n          }\n      };\n\n      DormandPrince853Integrator integrator = new DormandPrince853Integrator(0.0, 100.0,\n                                                                             1.0e-10, 1.0e-10);\n\n      double[] y0   = new double[k.length];\n      for (int i = 0; i < y0.length; ++i) {\n          y0[i] = i + 1;\n      }\n      double[] y    = new double[k.length];\n\n      integrator.setInitialStepSize(60.0);\n      double finalT = integrator.integrate(ode, t0, y0, tEvent, y);\n      try{ Assert.assertEquals(tEvent, finalT, 5.0e-6);                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n      for (int i = 0; i < y.length; ++i) {\n          try{ Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);                   }catch(Throwable __SHOULD_BE_IGNORED){}\n      }\n\n      integrator.setInitialStepSize(60.0);\n      integrator.addEventHandler(new EventHandler() {\n\n          public void resetState(double t, double[] y) {\n          }\n\n          public double g(double t, double[] y) {\n              return t - tEvent;\n          }\n\n          public int eventOccurred(double t, double[] y, boolean increasing) {\n              try{ Assert.assertEquals(tEvent, t, 5.0e-6);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n              return CONTINUE;\n          }\n      }, Double.POSITIVE_INFINITY, 1.0e-20, 100);\n      finalT = integrator.integrate(ode, t0, y0, tEvent + 120, y);\n      Assert.assertEquals(tEvent + 120, finalT, 5.0e-6);                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n      for (int i = 0; i < y.length; ++i) {\n          try{ Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);                   }catch(Throwable __SHOULD_BE_IGNORED){}\n      }\n\n  }",
                "  public void testMissedEndEvent$catena_4() throws IntegratorException, DerivativeException {\n      final double   t0     = 1878250320.0000029;\n      final double   tEvent = 1878250379.9999986;\n      final double[] k  = { 1.0e-4, 1.0e-5, 1.0e-6 };\n      FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {\n\n          public int getDimension() {\n              return k.length;\n          }\n\n          public void computeDerivatives(double t, double[] y, double[] yDot) {\n              for (int i = 0; i < y.length; ++i) {\n                  yDot[i] = k[i] * y[i];\n              }\n          }\n      };\n\n      DormandPrince853Integrator integrator = new DormandPrince853Integrator(0.0, 100.0,\n                                                                             1.0e-10, 1.0e-10);\n\n      double[] y0   = new double[k.length];\n      for (int i = 0; i < y0.length; ++i) {\n          y0[i] = i + 1;\n      }\n      double[] y    = new double[k.length];\n\n      integrator.setInitialStepSize(60.0);\n      double finalT = integrator.integrate(ode, t0, y0, tEvent, y);\n      try{ Assert.assertEquals(tEvent, finalT, 5.0e-6);                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n      for (int i = 0; i < y.length; ++i) {\n          try{ Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);                   }catch(Throwable __SHOULD_BE_IGNORED){}\n      }\n\n      integrator.setInitialStepSize(60.0);\n      integrator.addEventHandler(new EventHandler() {\n\n          public void resetState(double t, double[] y) {\n          }\n\n          public double g(double t, double[] y) {\n              return t - tEvent;\n          }\n\n          public int eventOccurred(double t, double[] y, boolean increasing) {\n              try{ Assert.assertEquals(tEvent, t, 5.0e-6);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n              return CONTINUE;\n          }\n      }, Double.POSITIVE_INFINITY, 1.0e-20, 100);\n      finalT = integrator.integrate(ode, t0, y0, tEvent + 120, y);\n      try{ Assert.assertEquals(tEvent + 120, finalT, 5.0e-6);                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n      for (int i = 0; i < y.length; ++i) {\n          Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);                        /***** ORIGINAL ASSERTION IS HERE *****/\n      }\n\n  }"
            ],
            "func": {
                "0": "  public void testMissedEndEvent$catena_0() throws IntegratorException, DerivativeException {\n      final double   t0     = 1878250320.0000029;\n      final double   tEvent = 1878250379.9999986;\n      final double[] k  = { 1.0e-4, 1.0e-5, 1.0e-6 };\n      FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {\n\n          public int getDimension() {\n              return k.length;\n          }\n\n          public void computeDerivatives(double t, double[] y, double[] yDot) {\n              for (int i = 0; i < y.length; ++i) {\n                  yDot[i] = k[i] * y[i];\n              }\n          }\n      };\n\n      DormandPrince853Integrator integrator = new DormandPrince853Integrator(0.0, 100.0,\n                                                                             1.0e-10, 1.0e-10);\n\n      double[] y0   = new double[k.length];\n      for (int i = 0; i < y0.length; ++i) {\n          y0[i] = i + 1;\n      }\n      double[] y    = new double[k.length];\n\n      integrator.setInitialStepSize(60.0);\n      double finalT = integrator.integrate(ode, t0, y0, tEvent, y);\n      Assert.assertEquals(tEvent, finalT, 5.0e-6);                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n      for (int i = 0; i < y.length; ++i) {\n          try{ Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);                   }catch(Throwable __SHOULD_BE_IGNORED){}\n      }\n\n      integrator.setInitialStepSize(60.0);\n      integrator.addEventHandler(new EventHandler() {\n\n          public void resetState(double t, double[] y) {\n          }\n\n          public double g(double t, double[] y) {\n              return t - tEvent;\n          }\n\n          public int eventOccurred(double t, double[] y, boolean increasing) {\n              try{ Assert.assertEquals(tEvent, t, 5.0e-6);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n              return CONTINUE;\n          }\n      }, Double.POSITIVE_INFINITY, 1.0e-20, 100);\n      finalT = integrator.integrate(ode, t0, y0, tEvent + 120, y);\n      try{ Assert.assertEquals(tEvent + 120, finalT, 5.0e-6);                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n      for (int i = 0; i < y.length; ++i) {\n          try{ Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);                   }catch(Throwable __SHOULD_BE_IGNORED){}\n      }\n\n  }",
                "1": "  public void testMissedEndEvent$catena_1() throws IntegratorException, DerivativeException {\n      final double   t0     = 1878250320.0000029;\n      final double   tEvent = 1878250379.9999986;\n      final double[] k  = { 1.0e-4, 1.0e-5, 1.0e-6 };\n      FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {\n\n          public int getDimension() {\n              return k.length;\n          }\n\n          public void computeDerivatives(double t, double[] y, double[] yDot) {\n              for (int i = 0; i < y.length; ++i) {\n                  yDot[i] = k[i] * y[i];\n              }\n          }\n      };\n\n      DormandPrince853Integrator integrator = new DormandPrince853Integrator(0.0, 100.0,\n                                                                             1.0e-10, 1.0e-10);\n\n      double[] y0   = new double[k.length];\n      for (int i = 0; i < y0.length; ++i) {\n          y0[i] = i + 1;\n      }\n      double[] y    = new double[k.length];\n\n      integrator.setInitialStepSize(60.0);\n      double finalT = integrator.integrate(ode, t0, y0, tEvent, y);\n      try{ Assert.assertEquals(tEvent, finalT, 5.0e-6);                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n      for (int i = 0; i < y.length; ++i) {\n          Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);                        /***** ORIGINAL ASSERTION IS HERE *****/\n      }\n\n      integrator.setInitialStepSize(60.0);\n      integrator.addEventHandler(new EventHandler() {\n\n          public void resetState(double t, double[] y) {\n          }\n\n          public double g(double t, double[] y) {\n              return t - tEvent;\n          }\n\n          public int eventOccurred(double t, double[] y, boolean increasing) {\n              try{ Assert.assertEquals(tEvent, t, 5.0e-6);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n              return CONTINUE;\n          }\n      }, Double.POSITIVE_INFINITY, 1.0e-20, 100);\n      finalT = integrator.integrate(ode, t0, y0, tEvent + 120, y);\n      try{ Assert.assertEquals(tEvent + 120, finalT, 5.0e-6);                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n      for (int i = 0; i < y.length; ++i) {\n          try{ Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);                   }catch(Throwable __SHOULD_BE_IGNORED){}\n      }\n\n  }",
                "2": "  public void testMissedEndEvent$catena_2() throws IntegratorException, DerivativeException {\n      final double   t0     = 1878250320.0000029;\n      final double   tEvent = 1878250379.9999986;\n      final double[] k  = { 1.0e-4, 1.0e-5, 1.0e-6 };\n      FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {\n\n          public int getDimension() {\n              return k.length;\n          }\n\n          public void computeDerivatives(double t, double[] y, double[] yDot) {\n              for (int i = 0; i < y.length; ++i) {\n                  yDot[i] = k[i] * y[i];\n              }\n          }\n      };\n\n      DormandPrince853Integrator integrator = new DormandPrince853Integrator(0.0, 100.0,\n                                                                             1.0e-10, 1.0e-10);\n\n      double[] y0   = new double[k.length];\n      for (int i = 0; i < y0.length; ++i) {\n          y0[i] = i + 1;\n      }\n      double[] y    = new double[k.length];\n\n      integrator.setInitialStepSize(60.0);\n      double finalT = integrator.integrate(ode, t0, y0, tEvent, y);\n      try{ Assert.assertEquals(tEvent, finalT, 5.0e-6);                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n      for (int i = 0; i < y.length; ++i) {\n          try{ Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);                   }catch(Throwable __SHOULD_BE_IGNORED){}\n      }\n\n      integrator.setInitialStepSize(60.0);\n      integrator.addEventHandler(new EventHandler() {\n\n          public void resetState(double t, double[] y) {\n          }\n\n          public double g(double t, double[] y) {\n              return t - tEvent;\n          }\n\n          public int eventOccurred(double t, double[] y, boolean increasing) {\n              Assert.assertEquals(tEvent, t, 5.0e-6);                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n              return CONTINUE;\n          }\n      }, Double.POSITIVE_INFINITY, 1.0e-20, 100);\n      finalT = integrator.integrate(ode, t0, y0, tEvent + 120, y);\n      try{ Assert.assertEquals(tEvent + 120, finalT, 5.0e-6);                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n      for (int i = 0; i < y.length; ++i) {\n          try{ Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);                   }catch(Throwable __SHOULD_BE_IGNORED){}\n      }\n\n  }",
                "3": "  public void testMissedEndEvent$catena_3() throws IntegratorException, DerivativeException {\n      final double   t0     = 1878250320.0000029;\n      final double   tEvent = 1878250379.9999986;\n      final double[] k  = { 1.0e-4, 1.0e-5, 1.0e-6 };\n      FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {\n\n          public int getDimension() {\n              return k.length;\n          }\n\n          public void computeDerivatives(double t, double[] y, double[] yDot) {\n              for (int i = 0; i < y.length; ++i) {\n                  yDot[i] = k[i] * y[i];\n              }\n          }\n      };\n\n      DormandPrince853Integrator integrator = new DormandPrince853Integrator(0.0, 100.0,\n                                                                             1.0e-10, 1.0e-10);\n\n      double[] y0   = new double[k.length];\n      for (int i = 0; i < y0.length; ++i) {\n          y0[i] = i + 1;\n      }\n      double[] y    = new double[k.length];\n\n      integrator.setInitialStepSize(60.0);\n      double finalT = integrator.integrate(ode, t0, y0, tEvent, y);\n      try{ Assert.assertEquals(tEvent, finalT, 5.0e-6);                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n      for (int i = 0; i < y.length; ++i) {\n          try{ Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);                   }catch(Throwable __SHOULD_BE_IGNORED){}\n      }\n\n      integrator.setInitialStepSize(60.0);\n      integrator.addEventHandler(new EventHandler() {\n\n          public void resetState(double t, double[] y) {\n          }\n\n          public double g(double t, double[] y) {\n              return t - tEvent;\n          }\n\n          public int eventOccurred(double t, double[] y, boolean increasing) {\n              try{ Assert.assertEquals(tEvent, t, 5.0e-6);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n              return CONTINUE;\n          }\n      }, Double.POSITIVE_INFINITY, 1.0e-20, 100);\n      finalT = integrator.integrate(ode, t0, y0, tEvent + 120, y);\n      Assert.assertEquals(tEvent + 120, finalT, 5.0e-6);                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n      for (int i = 0; i < y.length; ++i) {\n          try{ Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);                   }catch(Throwable __SHOULD_BE_IGNORED){}\n      }\n\n  }",
                "4": "  public void testMissedEndEvent$catena_4() throws IntegratorException, DerivativeException {\n      final double   t0     = 1878250320.0000029;\n      final double   tEvent = 1878250379.9999986;\n      final double[] k  = { 1.0e-4, 1.0e-5, 1.0e-6 };\n      FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {\n\n          public int getDimension() {\n              return k.length;\n          }\n\n          public void computeDerivatives(double t, double[] y, double[] yDot) {\n              for (int i = 0; i < y.length; ++i) {\n                  yDot[i] = k[i] * y[i];\n              }\n          }\n      };\n\n      DormandPrince853Integrator integrator = new DormandPrince853Integrator(0.0, 100.0,\n                                                                             1.0e-10, 1.0e-10);\n\n      double[] y0   = new double[k.length];\n      for (int i = 0; i < y0.length; ++i) {\n          y0[i] = i + 1;\n      }\n      double[] y    = new double[k.length];\n\n      integrator.setInitialStepSize(60.0);\n      double finalT = integrator.integrate(ode, t0, y0, tEvent, y);\n      try{ Assert.assertEquals(tEvent, finalT, 5.0e-6);                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n      for (int i = 0; i < y.length; ++i) {\n          try{ Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);                   }catch(Throwable __SHOULD_BE_IGNORED){}\n      }\n\n      integrator.setInitialStepSize(60.0);\n      integrator.addEventHandler(new EventHandler() {\n\n          public void resetState(double t, double[] y) {\n          }\n\n          public double g(double t, double[] y) {\n              return t - tEvent;\n          }\n\n          public int eventOccurred(double t, double[] y, boolean increasing) {\n              try{ Assert.assertEquals(tEvent, t, 5.0e-6);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n              return CONTINUE;\n          }\n      }, Double.POSITIVE_INFINITY, 1.0e-20, 100);\n      finalT = integrator.integrate(ode, t0, y0, tEvent + 120, y);\n      try{ Assert.assertEquals(tEvent + 120, finalT, 5.0e-6);                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n      for (int i = 0; i < y.length; ++i) {\n          Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);                        /***** ORIGINAL ASSERTION IS HERE *****/\n      }\n\n  }"
            }
        }
    },
    "01": {
        "failing_tests": [
            "org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest::testMissedEndEvent$catena_0",
            "org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest::testMissedEndEvent$catena_3"
        ]
    },
    "10": {
        "failing_tests": [
            "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest::testMissedEndEvent$catena_0"
        ]
    }
}