{
    "original": {
        "num_of_hunks": 5,
        "0": {
            "file_name": "src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
            "from_line_no": 932,
            "to_line_no": 932,
            "replaced_with": "                res[i] = x[i] / diff;\n",
            "replaced": "                res[i] = (x[i] - boundaries[0][i]) / diff;\n",
            "patch_type": "replace",
            "next_line_no": 933
        },
        "1": {
            "file_name": "src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
            "from_line_no": 958,
            "to_line_no": 958,
            "replaced_with": "                res[i] = diff * x[i];\n",
            "replaced": "                res[i] = diff * x[i] + boundaries[0][i];\n",
            "patch_type": "replace",
            "next_line_no": 959
        },
        "2": {
            "file_name": "src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
            "replaced_with": "            final double[] bLoEnc = encode(boundaries[0]);\n            final double[] bHiEnc = encode(boundaries[1]);\n",
            "patch_type": "insert",
            "next_line_no": 990
        },
        "3": {
            "file_name": "src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
            "from_line_no": 992,
            "to_line_no": 992,
            "replaced_with": "                if (x[i] < bLoEnc[i]) {\n",
            "replaced": "                if (x[i] < 0) {\n",
            "patch_type": "replace",
            "next_line_no": 993
        },
        "4": {
            "file_name": "src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
            "from_line_no": 995,
            "to_line_no": 995,
            "replaced_with": "                if (x[i] > bHiEnc[i]) {\n",
            "replaced": "                if (x[i] > 1.0) {\n",
            "patch_type": "replace",
            "next_line_no": 996
        }
    },
    "method": {
        "failing_tests": [
            "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testFitAccuracyDependsOnBoundary"
        ],
        "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testFitAccuracyDependsOnBoundary": {
            "file_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
            "Instance": "Begin: Pos(438, 5)\nEnd: Pos(478, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Math_18/src/test/java//org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java\nName: testFitAccuracyDependsOnBoundary\nChilds: [StatementAssertion<Begin: Pos(476, 9), End: Pos(476, 57)>,\nStatementAssertion<Begin: Pos(477, 9), End: Pos(477, 57)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Math_18/src/test/java//org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
            "name": "testFitAccuracyDependsOnBoundary",
            "begin": "Pos(438, 5)",
            "end": "Pos(478, 5)",
            "begin_line_no": 438,
            "end_line_no": 478,
            "child": [
                "Begin: Pos(476, 9)\nEnd: Pos(476, 57)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(477, 9)\nEnd: Pos(477, 57)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    @Test\n    public void testFitAccuracyDependsOnBoundary$catena_0() {\n        final CMAESOptimizer optimizer = new CMAESOptimizer();\n        final MultivariateFunction fitnessFunction = new MultivariateFunction() {\n                public double value(double[] parameters) {\n                    final double target = 11.1;\n                    final double error = target - parameters[0];\n                    return error * error;\n                }\n            };\n\n        final double[] start = { 1 };\n \n        // No bounds.\n        PointValuePair result = optimizer.optimize(100000, fitnessFunction, GoalType.MINIMIZE,\n                                                   start);\n        final double resNoBound = result.getPoint()[0];\n\n        // Optimum is near the lower bound.\n        final double[] lower = { -20 };\n        final double[] upper = { 5e16 };\n        result = optimizer.optimize(100000, fitnessFunction, GoalType.MINIMIZE,\n                                    start, lower, upper);\n        final double resNearLo = result.getPoint()[0];\n\n        // Optimum is near the upper bound.\n        lower[0] = -5e16;\n        upper[0] = 20;\n        result = optimizer.optimize(100000, fitnessFunction, GoalType.MINIMIZE,\n                                    start, lower, upper);\n        final double resNearHi = result.getPoint()[0];\n\n        // System.out.println(\"resNoBound=\" + resNoBound +\n        //                    \" resNearLo=\" + resNearLo +\n        //                    \" resNearHi=\" + resNearHi);\n\n        // The two values currently differ by a substantial amount, indicating that\n        // the bounds definition can prevent reaching the optimum.\n        Assert.assertEquals(resNoBound, resNearLo, 1e-3);                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ Assert.assertEquals(resNoBound, resNearHi, 1e-3);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testFitAccuracyDependsOnBoundary$catena_1() {\n        final CMAESOptimizer optimizer = new CMAESOptimizer();\n        final MultivariateFunction fitnessFunction = new MultivariateFunction() {\n                public double value(double[] parameters) {\n                    final double target = 11.1;\n                    final double error = target - parameters[0];\n                    return error * error;\n                }\n            };\n\n        final double[] start = { 1 };\n \n        // No bounds.\n        PointValuePair result = optimizer.optimize(100000, fitnessFunction, GoalType.MINIMIZE,\n                                                   start);\n        final double resNoBound = result.getPoint()[0];\n\n        // Optimum is near the lower bound.\n        final double[] lower = { -20 };\n        final double[] upper = { 5e16 };\n        result = optimizer.optimize(100000, fitnessFunction, GoalType.MINIMIZE,\n                                    start, lower, upper);\n        final double resNearLo = result.getPoint()[0];\n\n        // Optimum is near the upper bound.\n        lower[0] = -5e16;\n        upper[0] = 20;\n        result = optimizer.optimize(100000, fitnessFunction, GoalType.MINIMIZE,\n                                    start, lower, upper);\n        final double resNearHi = result.getPoint()[0];\n\n        // System.out.println(\"resNoBound=\" + resNoBound +\n        //                    \" resNearLo=\" + resNearLo +\n        //                    \" resNearHi=\" + resNearHi);\n\n        // The two values currently differ by a substantial amount, indicating that\n        // the bounds definition can prevent reaching the optimum.\n        try{ Assert.assertEquals(resNoBound, resNearLo, 1e-3);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        Assert.assertEquals(resNoBound, resNearHi, 1e-3);                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    @Test\n    public void testFitAccuracyDependsOnBoundary$catena_0() {\n        final CMAESOptimizer optimizer = new CMAESOptimizer();\n        final MultivariateFunction fitnessFunction = new MultivariateFunction() {\n                public double value(double[] parameters) {\n                    final double target = 11.1;\n                    final double error = target - parameters[0];\n                    return error * error;\n                }\n            };\n\n        final double[] start = { 1 };\n \n        // No bounds.\n        PointValuePair result = optimizer.optimize(100000, fitnessFunction, GoalType.MINIMIZE,\n                                                   start);\n        final double resNoBound = result.getPoint()[0];\n\n        // Optimum is near the lower bound.\n        final double[] lower = { -20 };\n        final double[] upper = { 5e16 };\n        result = optimizer.optimize(100000, fitnessFunction, GoalType.MINIMIZE,\n                                    start, lower, upper);\n        final double resNearLo = result.getPoint()[0];\n\n        // Optimum is near the upper bound.\n        lower[0] = -5e16;\n        upper[0] = 20;\n        result = optimizer.optimize(100000, fitnessFunction, GoalType.MINIMIZE,\n                                    start, lower, upper);\n        final double resNearHi = result.getPoint()[0];\n\n        // System.out.println(\"resNoBound=\" + resNoBound +\n        //                    \" resNearLo=\" + resNearLo +\n        //                    \" resNearHi=\" + resNearHi);\n\n        // The two values currently differ by a substantial amount, indicating that\n        // the bounds definition can prevent reaching the optimum.\n        Assert.assertEquals(resNoBound, resNearLo, 1e-3);                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ Assert.assertEquals(resNoBound, resNearHi, 1e-3);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    @Test\n    public void testFitAccuracyDependsOnBoundary$catena_1() {\n        final CMAESOptimizer optimizer = new CMAESOptimizer();\n        final MultivariateFunction fitnessFunction = new MultivariateFunction() {\n                public double value(double[] parameters) {\n                    final double target = 11.1;\n                    final double error = target - parameters[0];\n                    return error * error;\n                }\n            };\n\n        final double[] start = { 1 };\n \n        // No bounds.\n        PointValuePair result = optimizer.optimize(100000, fitnessFunction, GoalType.MINIMIZE,\n                                                   start);\n        final double resNoBound = result.getPoint()[0];\n\n        // Optimum is near the lower bound.\n        final double[] lower = { -20 };\n        final double[] upper = { 5e16 };\n        result = optimizer.optimize(100000, fitnessFunction, GoalType.MINIMIZE,\n                                    start, lower, upper);\n        final double resNearLo = result.getPoint()[0];\n\n        // Optimum is near the upper bound.\n        lower[0] = -5e16;\n        upper[0] = 20;\n        result = optimizer.optimize(100000, fitnessFunction, GoalType.MINIMIZE,\n                                    start, lower, upper);\n        final double resNearHi = result.getPoint()[0];\n\n        // System.out.println(\"resNoBound=\" + resNoBound +\n        //                    \" resNearLo=\" + resNearLo +\n        //                    \" resNearHi=\" + resNearHi);\n\n        // The two values currently differ by a substantial amount, indicating that\n        // the bounds definition can prevent reaching the optimum.\n        try{ Assert.assertEquals(resNoBound, resNearLo, 1e-3);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        Assert.assertEquals(resNoBound, resNearHi, 1e-3);                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        }
    },
    "11000": {
        "failing_tests": [
            "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testFitAccuracyDependsOnBoundary$catena_1"
        ]
    }
}