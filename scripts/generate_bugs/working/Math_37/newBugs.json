{
    "original": {
        "num_of_hunks": 4,
        "0": {
            "file_name": "src/main/java/org/apache/commons/math/complex/Complex.java",
            "from_line_no": 1018,
            "to_line_no": 1018,
            "replaced_with": "        if (isNaN || Double.isInfinite(real)) {\n",
            "replaced": "        if (isNaN) {\n",
            "patch_type": "replace",
            "next_line_no": 1019
        },
        "1": {
            "file_name": "src/main/java/org/apache/commons/math/complex/Complex.java",
            "replaced_with": "        if (imaginary > 20.0) {\n            return createComplex(0.0, 1.0);\n        }\n        if (imaginary < -20.0) {\n            return createComplex(0.0, -1.0);\n        }\n",
            "patch_type": "insert",
            "next_line_no": 1021
        },
        "2": {
            "file_name": "src/main/java/org/apache/commons/math/complex/Complex.java",
            "from_line_no": 1063,
            "to_line_no": 1063,
            "replaced_with": "        if (isNaN || Double.isInfinite(imaginary)) {\n",
            "replaced": "        if (isNaN) {\n",
            "patch_type": "replace",
            "next_line_no": 1064
        },
        "3": {
            "file_name": "src/main/java/org/apache/commons/math/complex/Complex.java",
            "replaced_with": "        if (real > 20.0) {\n            return createComplex(1.0, 0.0);\n        }\n        if (real < -20.0) {\n            return createComplex(-1.0, 0.0);\n        }\n",
            "patch_type": "insert",
            "next_line_no": 1066
        }
    },
    "method": {
        "failing_tests": [
            "org.apache.commons.math.complex.ComplexTest::testTanhInf",
            "org.apache.commons.math.complex.ComplexTest::testTan",
            "org.apache.commons.math.complex.ComplexTest::testTanh",
            "org.apache.commons.math.complex.ComplexTest::testTanInf"
        ],
        "org.apache.commons.math.complex.ComplexTest::testTanhInf": {
            "file_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
            "Instance": "Begin: Pos(1050, 5)\nEnd: Pos(1060, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Math_37/src/test/java//org/apache/commons/math/complex/ComplexTest.java\nName: testTanhInf\nChilds: [StatementAssertion<Begin: Pos(1052, 9), End: Pos(1052, 57)>,\nStatementAssertion<Begin: Pos(1053, 9), End: Pos(1053, 60)>,\nStatementAssertion<Begin: Pos(1054, 9), End: Pos(1054, 71)>,\nStatementAssertion<Begin: Pos(1055, 9), End: Pos(1055, 75)>,\nStatementAssertion<Begin: Pos(1056, 9), End: Pos(1056, 57)>,\nStatementAssertion<Begin: Pos(1057, 9), End: Pos(1057, 60)>,\nStatementAssertion<Begin: Pos(1058, 9), End: Pos(1058, 60)>,\nStatementAssertion<Begin: Pos(1059, 9), End: Pos(1059, 63)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Math_37/src/test/java//org/apache/commons/math/complex/ComplexTest.java",
            "name": "testTanhInf",
            "begin": "Pos(1050, 5)",
            "end": "Pos(1060, 5)",
            "begin_line_no": 1050,
            "end_line_no": 1060,
            "child": [
                "Begin: Pos(1052, 9)\nEnd: Pos(1052, 57)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1053, 9)\nEnd: Pos(1053, 60)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1054, 9)\nEnd: Pos(1054, 71)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1055, 9)\nEnd: Pos(1055, 75)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1056, 9)\nEnd: Pos(1056, 57)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1057, 9)\nEnd: Pos(1057, 60)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1058, 9)\nEnd: Pos(1058, 60)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1059, 9)\nEnd: Pos(1059, 63)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    @Test\n    public void testTanhInf$catena_0() {\n        TestUtils.assertSame(Complex.NaN, oneInf.tanh());                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ TestUtils.assertSame(Complex.NaN, oneNegInf.tanh());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.valueOf(1.0, 0.0), infOne.tanh());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.valueOf(-1.0, 0.0), negInfOne.tanh());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infInf.tanh());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infNegInf.tanh());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfInf.tanh());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfNegInf.tanh());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testTanhInf$catena_1() {\n        try{ TestUtils.assertSame(Complex.NaN, oneInf.tanh());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        TestUtils.assertSame(Complex.NaN, oneNegInf.tanh());                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ TestUtils.assertSame(Complex.valueOf(1.0, 0.0), infOne.tanh());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.valueOf(-1.0, 0.0), negInfOne.tanh());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infInf.tanh());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infNegInf.tanh());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfInf.tanh());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfNegInf.tanh());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testTanhInf$catena_2() {\n        try{ TestUtils.assertSame(Complex.NaN, oneInf.tanh());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, oneNegInf.tanh());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        TestUtils.assertSame(Complex.valueOf(1.0, 0.0), infOne.tanh());                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ TestUtils.assertSame(Complex.valueOf(-1.0, 0.0), negInfOne.tanh());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infInf.tanh());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infNegInf.tanh());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfInf.tanh());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfNegInf.tanh());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testTanhInf$catena_3() {\n        try{ TestUtils.assertSame(Complex.NaN, oneInf.tanh());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, oneNegInf.tanh());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.valueOf(1.0, 0.0), infOne.tanh());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        TestUtils.assertSame(Complex.valueOf(-1.0, 0.0), negInfOne.tanh());                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ TestUtils.assertSame(Complex.NaN, infInf.tanh());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infNegInf.tanh());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfInf.tanh());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfNegInf.tanh());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testTanhInf$catena_4() {\n        try{ TestUtils.assertSame(Complex.NaN, oneInf.tanh());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, oneNegInf.tanh());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.valueOf(1.0, 0.0), infOne.tanh());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.valueOf(-1.0, 0.0), negInfOne.tanh());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        TestUtils.assertSame(Complex.NaN, infInf.tanh());                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ TestUtils.assertSame(Complex.NaN, infNegInf.tanh());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfInf.tanh());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfNegInf.tanh());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testTanhInf$catena_5() {\n        try{ TestUtils.assertSame(Complex.NaN, oneInf.tanh());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, oneNegInf.tanh());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.valueOf(1.0, 0.0), infOne.tanh());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.valueOf(-1.0, 0.0), negInfOne.tanh());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infInf.tanh());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        TestUtils.assertSame(Complex.NaN, infNegInf.tanh());                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ TestUtils.assertSame(Complex.NaN, negInfInf.tanh());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfNegInf.tanh());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testTanhInf$catena_6() {\n        try{ TestUtils.assertSame(Complex.NaN, oneInf.tanh());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, oneNegInf.tanh());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.valueOf(1.0, 0.0), infOne.tanh());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.valueOf(-1.0, 0.0), negInfOne.tanh());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infInf.tanh());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infNegInf.tanh());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        TestUtils.assertSame(Complex.NaN, negInfInf.tanh());                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ TestUtils.assertSame(Complex.NaN, negInfNegInf.tanh());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testTanhInf$catena_7() {\n        try{ TestUtils.assertSame(Complex.NaN, oneInf.tanh());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, oneNegInf.tanh());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.valueOf(1.0, 0.0), infOne.tanh());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.valueOf(-1.0, 0.0), negInfOne.tanh());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infInf.tanh());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infNegInf.tanh());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfInf.tanh());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        TestUtils.assertSame(Complex.NaN, negInfNegInf.tanh());                                             /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    @Test\n    public void testTanhInf$catena_0() {\n        TestUtils.assertSame(Complex.NaN, oneInf.tanh());                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ TestUtils.assertSame(Complex.NaN, oneNegInf.tanh());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.valueOf(1.0, 0.0), infOne.tanh());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.valueOf(-1.0, 0.0), negInfOne.tanh());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infInf.tanh());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infNegInf.tanh());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfInf.tanh());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfNegInf.tanh());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    @Test\n    public void testTanhInf$catena_1() {\n        try{ TestUtils.assertSame(Complex.NaN, oneInf.tanh());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        TestUtils.assertSame(Complex.NaN, oneNegInf.tanh());                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ TestUtils.assertSame(Complex.valueOf(1.0, 0.0), infOne.tanh());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.valueOf(-1.0, 0.0), negInfOne.tanh());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infInf.tanh());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infNegInf.tanh());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfInf.tanh());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfNegInf.tanh());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "2": "    @Test\n    public void testTanhInf$catena_2() {\n        try{ TestUtils.assertSame(Complex.NaN, oneInf.tanh());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, oneNegInf.tanh());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        TestUtils.assertSame(Complex.valueOf(1.0, 0.0), infOne.tanh());                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ TestUtils.assertSame(Complex.valueOf(-1.0, 0.0), negInfOne.tanh());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infInf.tanh());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infNegInf.tanh());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfInf.tanh());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfNegInf.tanh());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "3": "    @Test\n    public void testTanhInf$catena_3() {\n        try{ TestUtils.assertSame(Complex.NaN, oneInf.tanh());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, oneNegInf.tanh());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.valueOf(1.0, 0.0), infOne.tanh());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        TestUtils.assertSame(Complex.valueOf(-1.0, 0.0), negInfOne.tanh());                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ TestUtils.assertSame(Complex.NaN, infInf.tanh());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infNegInf.tanh());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfInf.tanh());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfNegInf.tanh());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "4": "    @Test\n    public void testTanhInf$catena_4() {\n        try{ TestUtils.assertSame(Complex.NaN, oneInf.tanh());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, oneNegInf.tanh());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.valueOf(1.0, 0.0), infOne.tanh());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.valueOf(-1.0, 0.0), negInfOne.tanh());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        TestUtils.assertSame(Complex.NaN, infInf.tanh());                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ TestUtils.assertSame(Complex.NaN, infNegInf.tanh());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfInf.tanh());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfNegInf.tanh());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "5": "    @Test\n    public void testTanhInf$catena_5() {\n        try{ TestUtils.assertSame(Complex.NaN, oneInf.tanh());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, oneNegInf.tanh());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.valueOf(1.0, 0.0), infOne.tanh());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.valueOf(-1.0, 0.0), negInfOne.tanh());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infInf.tanh());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        TestUtils.assertSame(Complex.NaN, infNegInf.tanh());                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ TestUtils.assertSame(Complex.NaN, negInfInf.tanh());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfNegInf.tanh());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "6": "    @Test\n    public void testTanhInf$catena_6() {\n        try{ TestUtils.assertSame(Complex.NaN, oneInf.tanh());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, oneNegInf.tanh());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.valueOf(1.0, 0.0), infOne.tanh());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.valueOf(-1.0, 0.0), negInfOne.tanh());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infInf.tanh());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infNegInf.tanh());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        TestUtils.assertSame(Complex.NaN, negInfInf.tanh());                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ TestUtils.assertSame(Complex.NaN, negInfNegInf.tanh());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "7": "    @Test\n    public void testTanhInf$catena_7() {\n        try{ TestUtils.assertSame(Complex.NaN, oneInf.tanh());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, oneNegInf.tanh());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.valueOf(1.0, 0.0), infOne.tanh());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.valueOf(-1.0, 0.0), negInfOne.tanh());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infInf.tanh());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infNegInf.tanh());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfInf.tanh());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        TestUtils.assertSame(Complex.NaN, negInfNegInf.tanh());                                             /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.apache.commons.math.complex.ComplexTest::testTan": {
            "file_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
            "Instance": "Begin: Pos(994, 5)\nEnd: Pos(1006, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Math_37/src/test/java//org/apache/commons/math/complex/ComplexTest.java\nName: testTan\nChilds: [StatementAssertion<Begin: Pos(998, 9), End: Pos(998, 58)>,\nStatementAssertion<Begin: Pos(1002, 9), End: Pos(1002, 57)>,\nStatementAssertion<Begin: Pos(1005, 9), End: Pos(1005, 57)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Math_37/src/test/java//org/apache/commons/math/complex/ComplexTest.java",
            "name": "testTan",
            "begin": "Pos(994, 5)",
            "end": "Pos(1006, 5)",
            "begin_line_no": 994,
            "end_line_no": 1006,
            "child": [
                "Begin: Pos(998, 9)\nEnd: Pos(998, 58)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1002, 9)\nEnd: Pos(1002, 57)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1005, 9)\nEnd: Pos(1005, 57)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    @Test\n    public void testTan$catena_0() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(-0.000187346, 0.999356);\n        TestUtils.assertEquals(expected, z.tan(), 1.0e-5);                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        /* Check that no overflow occurs (MATH-722) */\n        Complex actual = new Complex(3.0, 1E10).tan();\n        expected = new Complex(0, 1);\n        try{ TestUtils.assertEquals(expected, actual, 1.0e-5);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        actual = new Complex(3.0, -1E10).tan();\n        expected = new Complex(0, -1);\n        try{ TestUtils.assertEquals(expected, actual, 1.0e-5);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testTan$catena_1() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(-0.000187346, 0.999356);\n        try{ TestUtils.assertEquals(expected, z.tan(), 1.0e-5);                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        /* Check that no overflow occurs (MATH-722) */\n        Complex actual = new Complex(3.0, 1E10).tan();\n        expected = new Complex(0, 1);\n        TestUtils.assertEquals(expected, actual, 1.0e-5);                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        actual = new Complex(3.0, -1E10).tan();\n        expected = new Complex(0, -1);\n        try{ TestUtils.assertEquals(expected, actual, 1.0e-5);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testTan$catena_2() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(-0.000187346, 0.999356);\n        try{ TestUtils.assertEquals(expected, z.tan(), 1.0e-5);                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        /* Check that no overflow occurs (MATH-722) */\n        Complex actual = new Complex(3.0, 1E10).tan();\n        expected = new Complex(0, 1);\n        try{ TestUtils.assertEquals(expected, actual, 1.0e-5);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        actual = new Complex(3.0, -1E10).tan();\n        expected = new Complex(0, -1);\n        TestUtils.assertEquals(expected, actual, 1.0e-5);                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    @Test\n    public void testTan$catena_0() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(-0.000187346, 0.999356);\n        TestUtils.assertEquals(expected, z.tan(), 1.0e-5);                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        /* Check that no overflow occurs (MATH-722) */\n        Complex actual = new Complex(3.0, 1E10).tan();\n        expected = new Complex(0, 1);\n        try{ TestUtils.assertEquals(expected, actual, 1.0e-5);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        actual = new Complex(3.0, -1E10).tan();\n        expected = new Complex(0, -1);\n        try{ TestUtils.assertEquals(expected, actual, 1.0e-5);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    @Test\n    public void testTan$catena_1() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(-0.000187346, 0.999356);\n        try{ TestUtils.assertEquals(expected, z.tan(), 1.0e-5);                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        /* Check that no overflow occurs (MATH-722) */\n        Complex actual = new Complex(3.0, 1E10).tan();\n        expected = new Complex(0, 1);\n        TestUtils.assertEquals(expected, actual, 1.0e-5);                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        actual = new Complex(3.0, -1E10).tan();\n        expected = new Complex(0, -1);\n        try{ TestUtils.assertEquals(expected, actual, 1.0e-5);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "2": "    @Test\n    public void testTan$catena_2() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(-0.000187346, 0.999356);\n        try{ TestUtils.assertEquals(expected, z.tan(), 1.0e-5);                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        /* Check that no overflow occurs (MATH-722) */\n        Complex actual = new Complex(3.0, 1E10).tan();\n        expected = new Complex(0, 1);\n        try{ TestUtils.assertEquals(expected, actual, 1.0e-5);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        actual = new Complex(3.0, -1E10).tan();\n        expected = new Complex(0, -1);\n        TestUtils.assertEquals(expected, actual, 1.0e-5);                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.apache.commons.math.complex.ComplexTest::testTanh": {
            "file_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
            "Instance": "Begin: Pos(1031, 5)\nEnd: Pos(1043, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Math_37/src/test/java//org/apache/commons/math/complex/ComplexTest.java\nName: testTanh\nChilds: [StatementAssertion<Begin: Pos(1035, 9), End: Pos(1035, 59)>,\nStatementAssertion<Begin: Pos(1039, 9), End: Pos(1039, 57)>,\nStatementAssertion<Begin: Pos(1042, 9), End: Pos(1042, 57)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Math_37/src/test/java//org/apache/commons/math/complex/ComplexTest.java",
            "name": "testTanh",
            "begin": "Pos(1031, 5)",
            "end": "Pos(1043, 5)",
            "begin_line_no": 1031,
            "end_line_no": 1043,
            "child": [
                "Begin: Pos(1035, 9)\nEnd: Pos(1035, 59)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1039, 9)\nEnd: Pos(1039, 57)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1042, 9)\nEnd: Pos(1042, 57)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    @Test\n    public void testTanh$catena_0() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(1.00071, 0.00490826);\n        TestUtils.assertEquals(expected, z.tanh(), 1.0e-5);                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        /* Check that no overflow occurs (MATH-722) */\n        Complex actual = new Complex(1E10, 3.0).tanh();\n        expected = new Complex(1, 0);\n        try{ TestUtils.assertEquals(expected, actual, 1.0e-5);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        actual = new Complex(-1E10, 3.0).tanh();\n        expected = new Complex(-1, 0);\n        try{ TestUtils.assertEquals(expected, actual, 1.0e-5);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testTanh$catena_1() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(1.00071, 0.00490826);\n        try{ TestUtils.assertEquals(expected, z.tanh(), 1.0e-5);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        /* Check that no overflow occurs (MATH-722) */\n        Complex actual = new Complex(1E10, 3.0).tanh();\n        expected = new Complex(1, 0);\n        TestUtils.assertEquals(expected, actual, 1.0e-5);                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        actual = new Complex(-1E10, 3.0).tanh();\n        expected = new Complex(-1, 0);\n        try{ TestUtils.assertEquals(expected, actual, 1.0e-5);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testTanh$catena_2() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(1.00071, 0.00490826);\n        try{ TestUtils.assertEquals(expected, z.tanh(), 1.0e-5);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        /* Check that no overflow occurs (MATH-722) */\n        Complex actual = new Complex(1E10, 3.0).tanh();\n        expected = new Complex(1, 0);\n        try{ TestUtils.assertEquals(expected, actual, 1.0e-5);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        actual = new Complex(-1E10, 3.0).tanh();\n        expected = new Complex(-1, 0);\n        TestUtils.assertEquals(expected, actual, 1.0e-5);                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    @Test\n    public void testTanh$catena_0() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(1.00071, 0.00490826);\n        TestUtils.assertEquals(expected, z.tanh(), 1.0e-5);                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        /* Check that no overflow occurs (MATH-722) */\n        Complex actual = new Complex(1E10, 3.0).tanh();\n        expected = new Complex(1, 0);\n        try{ TestUtils.assertEquals(expected, actual, 1.0e-5);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        actual = new Complex(-1E10, 3.0).tanh();\n        expected = new Complex(-1, 0);\n        try{ TestUtils.assertEquals(expected, actual, 1.0e-5);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    @Test\n    public void testTanh$catena_1() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(1.00071, 0.00490826);\n        try{ TestUtils.assertEquals(expected, z.tanh(), 1.0e-5);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        /* Check that no overflow occurs (MATH-722) */\n        Complex actual = new Complex(1E10, 3.0).tanh();\n        expected = new Complex(1, 0);\n        TestUtils.assertEquals(expected, actual, 1.0e-5);                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        actual = new Complex(-1E10, 3.0).tanh();\n        expected = new Complex(-1, 0);\n        try{ TestUtils.assertEquals(expected, actual, 1.0e-5);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "2": "    @Test\n    public void testTanh$catena_2() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(1.00071, 0.00490826);\n        try{ TestUtils.assertEquals(expected, z.tanh(), 1.0e-5);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        /* Check that no overflow occurs (MATH-722) */\n        Complex actual = new Complex(1E10, 3.0).tanh();\n        expected = new Complex(1, 0);\n        try{ TestUtils.assertEquals(expected, actual, 1.0e-5);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        actual = new Complex(-1E10, 3.0).tanh();\n        expected = new Complex(-1, 0);\n        TestUtils.assertEquals(expected, actual, 1.0e-5);                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.apache.commons.math.complex.ComplexTest::testTanInf": {
            "file_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
            "Instance": "Begin: Pos(1013, 5)\nEnd: Pos(1023, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Math_37/src/test/java//org/apache/commons/math/complex/ComplexTest.java\nName: testTanInf\nChilds: [StatementAssertion<Begin: Pos(1015, 9), End: Pos(1015, 70)>,\nStatementAssertion<Begin: Pos(1016, 9), End: Pos(1016, 74)>,\nStatementAssertion<Begin: Pos(1017, 9), End: Pos(1017, 56)>,\nStatementAssertion<Begin: Pos(1018, 9), End: Pos(1018, 59)>,\nStatementAssertion<Begin: Pos(1019, 9), End: Pos(1019, 56)>,\nStatementAssertion<Begin: Pos(1020, 9), End: Pos(1020, 59)>,\nStatementAssertion<Begin: Pos(1021, 9), End: Pos(1021, 59)>,\nStatementAssertion<Begin: Pos(1022, 9), End: Pos(1022, 62)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Math_37/src/test/java//org/apache/commons/math/complex/ComplexTest.java",
            "name": "testTanInf",
            "begin": "Pos(1013, 5)",
            "end": "Pos(1023, 5)",
            "begin_line_no": 1013,
            "end_line_no": 1023,
            "child": [
                "Begin: Pos(1015, 9)\nEnd: Pos(1015, 70)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1016, 9)\nEnd: Pos(1016, 74)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1017, 9)\nEnd: Pos(1017, 56)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1018, 9)\nEnd: Pos(1018, 59)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1019, 9)\nEnd: Pos(1019, 56)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1020, 9)\nEnd: Pos(1020, 59)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1021, 9)\nEnd: Pos(1021, 59)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1022, 9)\nEnd: Pos(1022, 62)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    @Test\n    public void testTanInf$catena_0() {\n        TestUtils.assertSame(Complex.valueOf(0.0, 1.0), oneInf.tan());                                      /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ TestUtils.assertSame(Complex.valueOf(0.0, -1.0), oneNegInf.tan());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infOne.tan());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfOne.tan());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infInf.tan());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infNegInf.tan());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfInf.tan());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfNegInf.tan());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testTanInf$catena_1() {\n        try{ TestUtils.assertSame(Complex.valueOf(0.0, 1.0), oneInf.tan());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        TestUtils.assertSame(Complex.valueOf(0.0, -1.0), oneNegInf.tan());                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ TestUtils.assertSame(Complex.NaN, infOne.tan());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfOne.tan());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infInf.tan());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infNegInf.tan());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfInf.tan());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfNegInf.tan());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testTanInf$catena_2() {\n        try{ TestUtils.assertSame(Complex.valueOf(0.0, 1.0), oneInf.tan());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.valueOf(0.0, -1.0), oneNegInf.tan());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        TestUtils.assertSame(Complex.NaN, infOne.tan());                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ TestUtils.assertSame(Complex.NaN, negInfOne.tan());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infInf.tan());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infNegInf.tan());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfInf.tan());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfNegInf.tan());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testTanInf$catena_3() {\n        try{ TestUtils.assertSame(Complex.valueOf(0.0, 1.0), oneInf.tan());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.valueOf(0.0, -1.0), oneNegInf.tan());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infOne.tan());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        TestUtils.assertSame(Complex.NaN, negInfOne.tan());                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ TestUtils.assertSame(Complex.NaN, infInf.tan());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infNegInf.tan());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfInf.tan());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfNegInf.tan());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testTanInf$catena_4() {\n        try{ TestUtils.assertSame(Complex.valueOf(0.0, 1.0), oneInf.tan());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.valueOf(0.0, -1.0), oneNegInf.tan());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infOne.tan());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfOne.tan());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        TestUtils.assertSame(Complex.NaN, infInf.tan());                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ TestUtils.assertSame(Complex.NaN, infNegInf.tan());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfInf.tan());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfNegInf.tan());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testTanInf$catena_5() {\n        try{ TestUtils.assertSame(Complex.valueOf(0.0, 1.0), oneInf.tan());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.valueOf(0.0, -1.0), oneNegInf.tan());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infOne.tan());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfOne.tan());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infInf.tan());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        TestUtils.assertSame(Complex.NaN, infNegInf.tan());                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ TestUtils.assertSame(Complex.NaN, negInfInf.tan());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfNegInf.tan());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testTanInf$catena_6() {\n        try{ TestUtils.assertSame(Complex.valueOf(0.0, 1.0), oneInf.tan());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.valueOf(0.0, -1.0), oneNegInf.tan());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infOne.tan());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfOne.tan());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infInf.tan());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infNegInf.tan());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        TestUtils.assertSame(Complex.NaN, negInfInf.tan());                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ TestUtils.assertSame(Complex.NaN, negInfNegInf.tan());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testTanInf$catena_7() {\n        try{ TestUtils.assertSame(Complex.valueOf(0.0, 1.0), oneInf.tan());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.valueOf(0.0, -1.0), oneNegInf.tan());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infOne.tan());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfOne.tan());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infInf.tan());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infNegInf.tan());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfInf.tan());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        TestUtils.assertSame(Complex.NaN, negInfNegInf.tan());                                              /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    @Test\n    public void testTanInf$catena_0() {\n        TestUtils.assertSame(Complex.valueOf(0.0, 1.0), oneInf.tan());                                      /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ TestUtils.assertSame(Complex.valueOf(0.0, -1.0), oneNegInf.tan());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infOne.tan());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfOne.tan());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infInf.tan());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infNegInf.tan());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfInf.tan());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfNegInf.tan());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    @Test\n    public void testTanInf$catena_1() {\n        try{ TestUtils.assertSame(Complex.valueOf(0.0, 1.0), oneInf.tan());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        TestUtils.assertSame(Complex.valueOf(0.0, -1.0), oneNegInf.tan());                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ TestUtils.assertSame(Complex.NaN, infOne.tan());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfOne.tan());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infInf.tan());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infNegInf.tan());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfInf.tan());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfNegInf.tan());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "2": "    @Test\n    public void testTanInf$catena_2() {\n        try{ TestUtils.assertSame(Complex.valueOf(0.0, 1.0), oneInf.tan());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.valueOf(0.0, -1.0), oneNegInf.tan());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        TestUtils.assertSame(Complex.NaN, infOne.tan());                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ TestUtils.assertSame(Complex.NaN, negInfOne.tan());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infInf.tan());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infNegInf.tan());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfInf.tan());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfNegInf.tan());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "3": "    @Test\n    public void testTanInf$catena_3() {\n        try{ TestUtils.assertSame(Complex.valueOf(0.0, 1.0), oneInf.tan());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.valueOf(0.0, -1.0), oneNegInf.tan());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infOne.tan());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        TestUtils.assertSame(Complex.NaN, negInfOne.tan());                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ TestUtils.assertSame(Complex.NaN, infInf.tan());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infNegInf.tan());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfInf.tan());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfNegInf.tan());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "4": "    @Test\n    public void testTanInf$catena_4() {\n        try{ TestUtils.assertSame(Complex.valueOf(0.0, 1.0), oneInf.tan());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.valueOf(0.0, -1.0), oneNegInf.tan());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infOne.tan());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfOne.tan());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        TestUtils.assertSame(Complex.NaN, infInf.tan());                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ TestUtils.assertSame(Complex.NaN, infNegInf.tan());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfInf.tan());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfNegInf.tan());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "5": "    @Test\n    public void testTanInf$catena_5() {\n        try{ TestUtils.assertSame(Complex.valueOf(0.0, 1.0), oneInf.tan());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.valueOf(0.0, -1.0), oneNegInf.tan());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infOne.tan());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfOne.tan());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infInf.tan());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        TestUtils.assertSame(Complex.NaN, infNegInf.tan());                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ TestUtils.assertSame(Complex.NaN, negInfInf.tan());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfNegInf.tan());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "6": "    @Test\n    public void testTanInf$catena_6() {\n        try{ TestUtils.assertSame(Complex.valueOf(0.0, 1.0), oneInf.tan());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.valueOf(0.0, -1.0), oneNegInf.tan());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infOne.tan());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfOne.tan());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infInf.tan());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infNegInf.tan());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        TestUtils.assertSame(Complex.NaN, negInfInf.tan());                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ TestUtils.assertSame(Complex.NaN, negInfNegInf.tan());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "7": "    @Test\n    public void testTanInf$catena_7() {\n        try{ TestUtils.assertSame(Complex.valueOf(0.0, 1.0), oneInf.tan());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.valueOf(0.0, -1.0), oneNegInf.tan());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infOne.tan());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfOne.tan());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infInf.tan());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infNegInf.tan());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfInf.tan());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        TestUtils.assertSame(Complex.NaN, negInfNegInf.tan());                                              /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        }
    },
    "0011": {
        "failing_tests": [
            "org.apache.commons.math.complex.ComplexTest::testTanhInf$catena_2",
            "org.apache.commons.math.complex.ComplexTest::testTanh$catena_1",
            "org.apache.commons.math.complex.ComplexTest::testTanhInf$catena_3",
            "org.apache.commons.math.complex.ComplexTest::testTanh$catena_2"
        ]
    },
    "1100": {
        "failing_tests": [
            "org.apache.commons.math.complex.ComplexTest::testTanInf$catena_1",
            "org.apache.commons.math.complex.ComplexTest::testTan$catena_1",
            "org.apache.commons.math.complex.ComplexTest::testTan$catena_2",
            "org.apache.commons.math.complex.ComplexTest::testTanInf$catena_0"
        ]
    }
}