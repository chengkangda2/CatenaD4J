---
Begin generate bug_id: Closure_78
num_of_hunks: 2
timeout for running: 3600
use working dir: ./working/data/Closure_78
Try to checkout Closure_78
build dir: ['./working/data/Closure_78/build/classes', './working/data/Closure_78/build/test']
init FileManager
trace file: src/com/google/javascript/jscomp/PeepholeFoldConstants.java
trying to replace old failing tests
edit: replace from 552 range 12 at test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java
to
  public void testFoldArithmetic$catena_0() {
    fold("x = 10 + 20", "x = 30");                                                                          /***** ORIGINAL ASSERTION IS HERE *****/
    try{ fold("x = 2 / 4", "x = 0.5");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = 2.25 * 3", "x = 6.75");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("z = x * y", "z = x * y");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = y * 5", "x = y * 5");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = 1 / 0", "x = 1 / 0");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = 3 % 2", "x = 1");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = 3 % -2", "x = 1");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = -1 % 3", "x = -1");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = 1 % 0", "x = 1 % 0");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testFoldArithmetic$catena_1() {
    try{ fold("x = 10 + 20", "x = 30");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    fold("x = 2 / 4", "x = 0.5");                                                                           /***** ORIGINAL ASSERTION IS HERE *****/
    try{ fold("x = 2.25 * 3", "x = 6.75");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("z = x * y", "z = x * y");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = y * 5", "x = y * 5");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = 1 / 0", "x = 1 / 0");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = 3 % 2", "x = 1");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = 3 % -2", "x = 1");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = -1 % 3", "x = -1");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = 1 % 0", "x = 1 % 0");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testFoldArithmetic$catena_2() {
    try{ fold("x = 10 + 20", "x = 30");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = 2 / 4", "x = 0.5");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    fold("x = 2.25 * 3", "x = 6.75");                                                                       /***** ORIGINAL ASSERTION IS HERE *****/
    try{ fold("z = x * y", "z = x * y");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = y * 5", "x = y * 5");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = 1 / 0", "x = 1 / 0");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = 3 % 2", "x = 1");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = 3 % -2", "x = 1");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = -1 % 3", "x = -1");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = 1 % 0", "x = 1 % 0");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testFoldArithmetic$catena_3() {
    try{ fold("x = 10 + 20", "x = 30");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = 2 / 4", "x = 0.5");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = 2.25 * 3", "x = 6.75");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    fold("z = x * y", "z = x * y");                                                                         /***** ORIGINAL ASSERTION IS HERE *****/
    try{ fold("x = y * 5", "x = y * 5");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = 1 / 0", "x = 1 / 0");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = 3 % 2", "x = 1");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = 3 % -2", "x = 1");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = -1 % 3", "x = -1");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = 1 % 0", "x = 1 % 0");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testFoldArithmetic$catena_4() {
    try{ fold("x = 10 + 20", "x = 30");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = 2 / 4", "x = 0.5");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = 2.25 * 3", "x = 6.75");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("z = x * y", "z = x * y");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    fold("x = y * 5", "x = y * 5");                                                                         /***** ORIGINAL ASSERTION IS HERE *****/
    try{ fold("x = 1 / 0", "x = 1 / 0");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = 3 % 2", "x = 1");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = 3 % -2", "x = 1");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = -1 % 3", "x = -1");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = 1 % 0", "x = 1 % 0");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testFoldArithmetic$catena_5() {
    try{ fold("x = 10 + 20", "x = 30");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = 2 / 4", "x = 0.5");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = 2.25 * 3", "x = 6.75");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("z = x * y", "z = x * y");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = y * 5", "x = y * 5");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    fold("x = 1 / 0", "x = 1 / 0");                                                                         /***** ORIGINAL ASSERTION IS HERE *****/
    try{ fold("x = 3 % 2", "x = 1");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = 3 % -2", "x = 1");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = -1 % 3", "x = -1");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = 1 % 0", "x = 1 % 0");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testFoldArithmetic$catena_6() {
    try{ fold("x = 10 + 20", "x = 30");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = 2 / 4", "x = 0.5");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = 2.25 * 3", "x = 6.75");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("z = x * y", "z = x * y");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = y * 5", "x = y * 5");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = 1 / 0", "x = 1 / 0");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    fold("x = 3 % 2", "x = 1");                                                                             /***** ORIGINAL ASSERTION IS HERE *****/
    try{ fold("x = 3 % -2", "x = 1");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = -1 % 3", "x = -1");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = 1 % 0", "x = 1 % 0");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testFoldArithmetic$catena_7() {
    try{ fold("x = 10 + 20", "x = 30");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = 2 / 4", "x = 0.5");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = 2.25 * 3", "x = 6.75");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("z = x * y", "z = x * y");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = y * 5", "x = y * 5");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = 1 / 0", "x = 1 / 0");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = 3 % 2", "x = 1");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    fold("x = 3 % -2", "x = 1");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/
    try{ fold("x = -1 % 3", "x = -1");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = 1 % 0", "x = 1 % 0");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testFoldArithmetic$catena_8() {
    try{ fold("x = 10 + 20", "x = 30");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = 2 / 4", "x = 0.5");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = 2.25 * 3", "x = 6.75");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("z = x * y", "z = x * y");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = y * 5", "x = y * 5");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = 1 / 0", "x = 1 / 0");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = 3 % 2", "x = 1");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = 3 % -2", "x = 1");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    fold("x = -1 % 3", "x = -1");                                                                           /***** ORIGINAL ASSERTION IS HERE *****/
    try{ fold("x = 1 % 0", "x = 1 % 0");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testFoldArithmetic$catena_9() {
    try{ fold("x = 10 + 20", "x = 30");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = 2 / 4", "x = 0.5");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = 2.25 * 3", "x = 6.75");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("z = x * y", "z = x * y");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = y * 5", "x = y * 5");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = 1 / 0", "x = 1 / 0");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = 3 % 2", "x = 1");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = 3 % -2", "x = 1");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = -1 % 3", "x = -1");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    fold("x = 1 % 0", "x = 1 % 0");                                                                         /***** ORIGINAL ASSERTION IS HERE *****/
  }
trace file: test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java
new test num: 10
ori test num: 0
pattern: 00
patches are written to file
running tests...
used time: Finished in 185.13 seconds
Failing tests: 2
	com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldArithmetic$catena_5
	com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldArithmetic$catena_9
processed: 00
pattern: 01
try to fix hunk: 1
delete from 718 with range 1
patches are written to file
running tests...
used time: Finished in 174.05 seconds
Failing tests: 1
	com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldArithmetic$catena_9
select new bug
Pattern: 01
new failing tests:
com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldArithmetic$catena_5
Save found bug
processed: 01
pattern: 10
try to fix hunk: 0
delete from 711 with range 1
patches are written to file
running tests...
used time: Finished in 176.14 seconds
Failing tests: 1
	com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldArithmetic$catena_5
select new bug
Pattern: 10
new failing tests:
com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldArithmetic$catena_9
Save found bug
processed: 10
pattern: 11
try to fix hunk: 0
delete from 711 with range 1
try to fix hunk: 1
delete from 718 with range 1
patches are written to file
running tests...
used time: Finished in 178.45 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 11
Find 2 new bugs
