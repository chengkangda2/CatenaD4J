---
Begin generate bug_id: Math_52
num_of_hunks: 3
timeout for running: 3600
use working dir: ./working/data/Math_52
Try to checkout Math_52
build dir: ['./working/data/Math_52/target/classes', './working/data/Math_52/target/test-classes']
init FileManager
trace file: src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java
trying to replace old failing tests
edit: replace from 479 range 14 at src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java
to
  @Test
  public void testIssue639$catena_0(){
      Vector3D u1 = new Vector3D(-1321008684645961.0 /  268435456.0,
                                 -5774608829631843.0 /  268435456.0,
                                 -3822921525525679.0 / 4294967296.0);
      Vector3D u2 =new Vector3D( -5712344449280879.0 /    2097152.0,
                                 -2275058564560979.0 /    1048576.0,
                                  4423475992255071.0 /      65536.0);
      Rotation rot = new Rotation(u1, u2, Vector3D.PLUS_I,Vector3D.PLUS_K);
      Assert.assertEquals( 0.6228370359608200639829222, rot.getQ0(), 1.0e-15);                              /***** ORIGINAL ASSERTION IS HERE *****/
      try{ Assert.assertEquals( 0.0257707621456498790029987, rot.getQ1(), 1.0e-15);                         }catch(Throwable __SHOULD_BE_IGNORED){}
      try{ Assert.assertEquals(-0.0000000002503012255839931, rot.getQ2(), 1.0e-15);                         }catch(Throwable __SHOULD_BE_IGNORED){}
      try{ Assert.assertEquals(-0.7819270390861109450724902, rot.getQ3(), 1.0e-15);                         }catch(Throwable __SHOULD_BE_IGNORED){}
  }   @Test
  public void testIssue639$catena_1(){
      Vector3D u1 = new Vector3D(-1321008684645961.0 /  268435456.0,
                                 -5774608829631843.0 /  268435456.0,
                                 -3822921525525679.0 / 4294967296.0);
      Vector3D u2 =new Vector3D( -5712344449280879.0 /    2097152.0,
                                 -2275058564560979.0 /    1048576.0,
                                  4423475992255071.0 /      65536.0);
      Rotation rot = new Rotation(u1, u2, Vector3D.PLUS_I,Vector3D.PLUS_K);
      try{ Assert.assertEquals( 0.6228370359608200639829222, rot.getQ0(), 1.0e-15);                         }catch(Throwable __SHOULD_BE_IGNORED){}
      Assert.assertEquals( 0.0257707621456498790029987, rot.getQ1(), 1.0e-15);                              /***** ORIGINAL ASSERTION IS HERE *****/
      try{ Assert.assertEquals(-0.0000000002503012255839931, rot.getQ2(), 1.0e-15);                         }catch(Throwable __SHOULD_BE_IGNORED){}
      try{ Assert.assertEquals(-0.7819270390861109450724902, rot.getQ3(), 1.0e-15);                         }catch(Throwable __SHOULD_BE_IGNORED){}
  }   @Test
  public void testIssue639$catena_2(){
      Vector3D u1 = new Vector3D(-1321008684645961.0 /  268435456.0,
                                 -5774608829631843.0 /  268435456.0,
                                 -3822921525525679.0 / 4294967296.0);
      Vector3D u2 =new Vector3D( -5712344449280879.0 /    2097152.0,
                                 -2275058564560979.0 /    1048576.0,
                                  4423475992255071.0 /      65536.0);
      Rotation rot = new Rotation(u1, u2, Vector3D.PLUS_I,Vector3D.PLUS_K);
      try{ Assert.assertEquals( 0.6228370359608200639829222, rot.getQ0(), 1.0e-15);                         }catch(Throwable __SHOULD_BE_IGNORED){}
      try{ Assert.assertEquals( 0.0257707621456498790029987, rot.getQ1(), 1.0e-15);                         }catch(Throwable __SHOULD_BE_IGNORED){}
      Assert.assertEquals(-0.0000000002503012255839931, rot.getQ2(), 1.0e-15);                              /***** ORIGINAL ASSERTION IS HERE *****/
      try{ Assert.assertEquals(-0.7819270390861109450724902, rot.getQ3(), 1.0e-15);                         }catch(Throwable __SHOULD_BE_IGNORED){}
  }   @Test
  public void testIssue639$catena_3(){
      Vector3D u1 = new Vector3D(-1321008684645961.0 /  268435456.0,
                                 -5774608829631843.0 /  268435456.0,
                                 -3822921525525679.0 / 4294967296.0);
      Vector3D u2 =new Vector3D( -5712344449280879.0 /    2097152.0,
                                 -2275058564560979.0 /    1048576.0,
                                  4423475992255071.0 /      65536.0);
      Rotation rot = new Rotation(u1, u2, Vector3D.PLUS_I,Vector3D.PLUS_K);
      try{ Assert.assertEquals( 0.6228370359608200639829222, rot.getQ0(), 1.0e-15);                         }catch(Throwable __SHOULD_BE_IGNORED){}
      try{ Assert.assertEquals( 0.0257707621456498790029987, rot.getQ1(), 1.0e-15);                         }catch(Throwable __SHOULD_BE_IGNORED){}
      try{ Assert.assertEquals(-0.0000000002503012255839931, rot.getQ2(), 1.0e-15);                         }catch(Throwable __SHOULD_BE_IGNORED){}
      Assert.assertEquals(-0.7819270390861109450724902, rot.getQ3(), 1.0e-15);                              /***** ORIGINAL ASSERTION IS HERE *****/
  }
trace file: src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java
new test num: 4
ori test num: 0
pattern: 000
patches are written to file
running tests...
used time: Finished in 169.94 seconds
Failing tests: 4
	org.apache.commons.math.geometry.euclidean.threed.RotationTest::testIssue639$catena_0
	org.apache.commons.math.geometry.euclidean.threed.RotationTest::testIssue639$catena_1
	org.apache.commons.math.geometry.euclidean.threed.RotationTest::testIssue639$catena_2
	org.apache.commons.math.geometry.euclidean.threed.RotationTest::testIssue639$catena_3
processed: 000
pattern: 001
try to fix hunk: 2
replace from 359 with range 1 to
      if (c <= 0) {

patches are written to file
running tests...
used time: Finished in 162.46 seconds
Failing tests: 4
	org.apache.commons.math.geometry.euclidean.threed.RotationTest::testIssue639$catena_0
	org.apache.commons.math.geometry.euclidean.threed.RotationTest::testIssue639$catena_1
	org.apache.commons.math.geometry.euclidean.threed.RotationTest::testIssue639$catena_2
	org.apache.commons.math.geometry.euclidean.threed.RotationTest::testIssue639$catena_3
No new failing tests but only 1 hunk
processed: 001
pattern: 010
try to fix hunk: 1
replace from 353 with range 1 to
    if (c <= inPlaneThreshold * k.getNorm() * u2Prime.getNorm()) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010
pattern: 100
try to fix hunk: 0
replace from 344 with range 1 to
  final double inPlaneThreshold = 0.001;
  if (c <= inPlaneThreshold * k.getNorm() * u3.getNorm()) {

patches are written to file
running tests...
used time: Finished in 164.42 seconds
Failing tests: 0
select new bug
Pattern: 100
new failing tests:
org.apache.commons.math.geometry.euclidean.threed.RotationTest::testIssue639$catena_2
org.apache.commons.math.geometry.euclidean.threed.RotationTest::testIssue639$catena_1
org.apache.commons.math.geometry.euclidean.threed.RotationTest::testIssue639$catena_0
org.apache.commons.math.geometry.euclidean.threed.RotationTest::testIssue639$catena_3
Save found bug
processed: 100
pattern: 011
try to fix hunk: 1
replace from 353 with range 1 to
    if (c <= inPlaneThreshold * k.getNorm() * u2Prime.getNorm()) {

try to fix hunk: 2
replace from 359 with range 1 to
      if (c <= 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011
pattern: 101
try to fix hunk: 0
replace from 344 with range 1 to
  final double inPlaneThreshold = 0.001;
  if (c <= inPlaneThreshold * k.getNorm() * u3.getNorm()) {

try to fix hunk: 2
replace from 359 with range 1 to
      if (c <= 0) {

patches are written to file
running tests...
used time: Finished in 174.29 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 101
pattern: 110
try to fix hunk: 0
replace from 344 with range 1 to
  final double inPlaneThreshold = 0.001;
  if (c <= inPlaneThreshold * k.getNorm() * u3.getNorm()) {

try to fix hunk: 1
replace from 353 with range 1 to
    if (c <= inPlaneThreshold * k.getNorm() * u2Prime.getNorm()) {

patches are written to file
running tests...
used time: Finished in 177.62 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 110
pattern: 111
try to fix hunk: 0
replace from 344 with range 1 to
  final double inPlaneThreshold = 0.001;
  if (c <= inPlaneThreshold * k.getNorm() * u3.getNorm()) {

try to fix hunk: 1
replace from 353 with range 1 to
    if (c <= inPlaneThreshold * k.getNorm() * u2Prime.getNorm()) {

try to fix hunk: 2
replace from 359 with range 1 to
      if (c <= 0) {

patches are written to file
running tests...
used time: Finished in 177.07 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 111
Find 1 new bugs
