{
    "original": {
        "num_of_hunks": 5,
        "0": {
            "file_name": "src/com/google/javascript/jscomp/TypeInference.java",
            "from_line_no": 530,
            "to_line_no": 530,
            "replaced_with": "        JSType varType = var == null ? null : var.getType();\n        boolean isVarDeclaration = left.hasChildren()\n            && varType != null && !var.isTypeInferred();\n",
            "replaced": "        boolean isVarDeclaration = left.hasChildren();\n",
            "patch_type": "replace",
            "next_line_no": 531
        },
        "1": {
            "file_name": "src/com/google/javascript/jscomp/TypeInference.java",
            "from_line_no": 548,
            "to_line_no": 548,
            "replaced_with": "        boolean isVarTypeBetter = isVarDeclaration &&\n",
            "replaced": "        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();\n",
            "patch_type": "replace",
            "next_line_no": 549
        },
        "2": {
            "file_name": "src/com/google/javascript/jscomp/TypeInference.java",
            "replaced_with": "            !resultType.isNullType() && !resultType.isVoidType();\n",
            "patch_type": "insert",
            "next_line_no": 550
        },
        "3": {
            "file_name": "src/com/google/javascript/jscomp/TypeInference.java",
            "replaced_with": "          redeclareSimpleVar(scope, left, varType);\n        } else {\n",
            "patch_type": "insert",
            "next_line_no": 562
        },
        "4": {
            "file_name": "src/com/google/javascript/jscomp/TypeInference.java",
            "from_line_no": 564,
            "to_line_no": 565,
            "replaced_with": "        left.setJSType(resultType);\n",
            "replaced": "        left.setJSType(isVarDeclaration || leftType == null ?\n            resultType : null);\n",
            "patch_type": "replace",
            "next_line_no": 566
        }
    },
    "method": {
        "failing_tests": [
            "com.google.javascript.jscomp.TypeCheckTest::testIssue1056"
        ],
        "com.google.javascript.jscomp.TypeCheckTest::testIssue1056": {
            "file_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
            "Instance": "Begin: Pos(6910, 10)\nEnd: Pos(6917, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Closure_176/test//com/google/javascript/jscomp/TypeCheckTest.java\nName: testIssue1056\nChilds: [StatementAssertion<Begin: Pos(6911, 5), End: Pos(6916, 28)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Closure_176/test//com/google/javascript/jscomp/TypeCheckTest.java",
            "name": "testIssue1056",
            "begin": "Pos(6910, 10)",
            "end": "Pos(6917, 3)",
            "begin_line_no": 6910,
            "end_line_no": 6917,
            "child": [
                "Begin: Pos(6911, 5)\nEnd: Pos(6916, 28)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [],
            "func": {}
        }
    },
    "11110": {
        "failing_tests": [
            "com.google.javascript.jscomp.TypeCheckTest::testIssue1056"
        ]
    }
}