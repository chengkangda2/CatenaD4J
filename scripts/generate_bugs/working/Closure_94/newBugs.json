{
    "original": {
        "num_of_hunks": 3,
        "0": {
            "file_name": "src/com/google/javascript/jscomp/NodeUtil.java",
            "replaced_with": "      case Token.ADD:\n",
            "patch_type": "insert",
            "next_line_no": 329
        },
        "1": {
            "file_name": "src/com/google/javascript/jscomp/NodeUtil.java",
            "replaced_with": "      case Token.DIV:\n      case Token.EQ:\n      case Token.GE:\n      case Token.GT:\n      case Token.LE:\n      case Token.LSH:\n      case Token.LT:\n      case Token.MOD:\n      case Token.MUL:\n      case Token.NE:\n      case Token.RSH:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.SUB:\n      case Token.URSH:\n        return isValidDefineValue(val.getFirstChild(), defines)\n            && isValidDefineValue(val.getLastChild(), defines);\n",
            "patch_type": "insert",
            "next_line_no": 333
        },
        "2": {
            "file_name": "src/com/google/javascript/jscomp/NodeUtil.java",
            "replaced_with": "      case Token.POS:\n",
            "patch_type": "insert",
            "next_line_no": 337
        }
    },
    "method": {
        "failing_tests": [
            "com.google.javascript.jscomp.NodeUtilTest::testValidDefine",
            "com.google.javascript.jscomp.ProcessDefinesTest::testOverridingString1",
            "com.google.javascript.jscomp.ProcessDefinesTest::testOverridingString3"
        ],
        "com.google.javascript.jscomp.NodeUtilTest::testValidDefine": {
            "file_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
            "Instance": "Begin: Pos(1071, 10)\nEnd: Pos(1090, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Closure_94/test//com/google/javascript/jscomp/NodeUtilTest.java\nName: testValidDefine\nChilds: [StatementAssertion<Begin: Pos(1072, 5), End: Pos(1072, 42)>,\nStatementAssertion<Begin: Pos(1073, 5), End: Pos(1073, 43)>,\nStatementAssertion<Begin: Pos(1074, 5), End: Pos(1074, 45)>,\nStatementAssertion<Begin: Pos(1075, 5), End: Pos(1075, 46)>,\nStatementAssertion<Begin: Pos(1076, 5), End: Pos(1076, 46)>,\nStatementAssertion<Begin: Pos(1078, 5), End: Pos(1078, 43)>,\nStatementAssertion<Begin: Pos(1079, 5), End: Pos(1079, 46)>,\nStatementAssertion<Begin: Pos(1080, 5), End: Pos(1080, 51)>,\nStatementAssertion<Begin: Pos(1081, 5), End: Pos(1081, 45)>,\nStatementAssertion<Begin: Pos(1083, 5), End: Pos(1083, 46)>,\nStatementAssertion<Begin: Pos(1084, 5), End: Pos(1084, 46)>,\nStatementAssertion<Begin: Pos(1085, 5), End: Pos(1085, 46)>,\nStatementAssertion<Begin: Pos(1086, 5), End: Pos(1086, 46)>,\nStatementAssertion<Begin: Pos(1087, 5), End: Pos(1087, 50)>,\nStatementAssertion<Begin: Pos(1089, 5), End: Pos(1089, 49)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Closure_94/test//com/google/javascript/jscomp/NodeUtilTest.java",
            "name": "testValidDefine",
            "begin": "Pos(1071, 10)",
            "end": "Pos(1090, 3)",
            "begin_line_no": 1071,
            "end_line_no": 1090,
            "child": [
                "Begin: Pos(1072, 5)\nEnd: Pos(1072, 42)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1073, 5)\nEnd: Pos(1073, 43)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1074, 5)\nEnd: Pos(1074, 45)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1075, 5)\nEnd: Pos(1075, 46)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1076, 5)\nEnd: Pos(1076, 46)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1078, 5)\nEnd: Pos(1078, 43)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1079, 5)\nEnd: Pos(1079, 46)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1080, 5)\nEnd: Pos(1080, 51)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1081, 5)\nEnd: Pos(1081, 45)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1083, 5)\nEnd: Pos(1083, 46)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1084, 5)\nEnd: Pos(1084, 46)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1085, 5)\nEnd: Pos(1085, 46)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1086, 5)\nEnd: Pos(1086, 46)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1087, 5)\nEnd: Pos(1087, 50)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1089, 5)\nEnd: Pos(1089, 49)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "  public void testValidDefine$catena_0() {\n    assertTrue(testValidDefineValue(\"1\"));                                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertTrue(testValidDefineValue(\"-3\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"true\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"false\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"'foo'\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ assertFalse(testValidDefineValue(\"x\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"null\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"undefined\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"NaN\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ assertTrue(testValidDefineValue(\"!true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"-true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"1 & 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"1 + 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"'a' + 'b'\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertFalse(testValidDefineValue(\"1 & foo\"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testValidDefine$catena_1() {\n    try{ assertTrue(testValidDefineValue(\"1\"));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertTrue(testValidDefineValue(\"-3\"));                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertTrue(testValidDefineValue(\"true\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"false\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"'foo'\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ assertFalse(testValidDefineValue(\"x\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"null\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"undefined\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"NaN\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ assertTrue(testValidDefineValue(\"!true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"-true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"1 & 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"1 + 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"'a' + 'b'\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertFalse(testValidDefineValue(\"1 & foo\"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testValidDefine$catena_2() {\n    try{ assertTrue(testValidDefineValue(\"1\"));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"-3\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertTrue(testValidDefineValue(\"true\"));                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertTrue(testValidDefineValue(\"false\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"'foo'\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ assertFalse(testValidDefineValue(\"x\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"null\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"undefined\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"NaN\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ assertTrue(testValidDefineValue(\"!true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"-true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"1 & 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"1 + 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"'a' + 'b'\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertFalse(testValidDefineValue(\"1 & foo\"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testValidDefine$catena_3() {\n    try{ assertTrue(testValidDefineValue(\"1\"));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"-3\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"true\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertTrue(testValidDefineValue(\"false\"));                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertTrue(testValidDefineValue(\"'foo'\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ assertFalse(testValidDefineValue(\"x\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"null\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"undefined\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"NaN\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ assertTrue(testValidDefineValue(\"!true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"-true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"1 & 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"1 + 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"'a' + 'b'\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertFalse(testValidDefineValue(\"1 & foo\"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testValidDefine$catena_4() {\n    try{ assertTrue(testValidDefineValue(\"1\"));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"-3\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"true\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"false\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertTrue(testValidDefineValue(\"'foo'\"));                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n    \n    try{ assertFalse(testValidDefineValue(\"x\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"null\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"undefined\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"NaN\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ assertTrue(testValidDefineValue(\"!true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"-true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"1 & 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"1 + 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"'a' + 'b'\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertFalse(testValidDefineValue(\"1 & foo\"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testValidDefine$catena_5() {\n    try{ assertTrue(testValidDefineValue(\"1\"));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"-3\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"true\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"false\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"'foo'\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    assertFalse(testValidDefineValue(\"x\"));                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertFalse(testValidDefineValue(\"null\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"undefined\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"NaN\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ assertTrue(testValidDefineValue(\"!true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"-true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"1 & 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"1 + 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"'a' + 'b'\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertFalse(testValidDefineValue(\"1 & foo\"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testValidDefine$catena_6() {\n    try{ assertTrue(testValidDefineValue(\"1\"));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"-3\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"true\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"false\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"'foo'\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ assertFalse(testValidDefineValue(\"x\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertFalse(testValidDefineValue(\"null\"));                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertFalse(testValidDefineValue(\"undefined\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"NaN\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ assertTrue(testValidDefineValue(\"!true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"-true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"1 & 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"1 + 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"'a' + 'b'\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertFalse(testValidDefineValue(\"1 & foo\"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testValidDefine$catena_7() {\n    try{ assertTrue(testValidDefineValue(\"1\"));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"-3\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"true\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"false\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"'foo'\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ assertFalse(testValidDefineValue(\"x\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"null\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertFalse(testValidDefineValue(\"undefined\"));                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertFalse(testValidDefineValue(\"NaN\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ assertTrue(testValidDefineValue(\"!true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"-true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"1 & 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"1 + 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"'a' + 'b'\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertFalse(testValidDefineValue(\"1 & foo\"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testValidDefine$catena_8() {\n    try{ assertTrue(testValidDefineValue(\"1\"));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"-3\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"true\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"false\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"'foo'\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ assertFalse(testValidDefineValue(\"x\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"null\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"undefined\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertFalse(testValidDefineValue(\"NaN\"));                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n    \n    try{ assertTrue(testValidDefineValue(\"!true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"-true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"1 & 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"1 + 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"'a' + 'b'\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertFalse(testValidDefineValue(\"1 & foo\"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testValidDefine$catena_9() {\n    try{ assertTrue(testValidDefineValue(\"1\"));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"-3\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"true\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"false\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"'foo'\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ assertFalse(testValidDefineValue(\"x\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"null\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"undefined\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"NaN\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    assertTrue(testValidDefineValue(\"!true\"));                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertTrue(testValidDefineValue(\"-true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"1 & 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"1 + 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"'a' + 'b'\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertFalse(testValidDefineValue(\"1 & foo\"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testValidDefine$catena_10() {\n    try{ assertTrue(testValidDefineValue(\"1\"));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"-3\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"true\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"false\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"'foo'\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ assertFalse(testValidDefineValue(\"x\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"null\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"undefined\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"NaN\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ assertTrue(testValidDefineValue(\"!true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertTrue(testValidDefineValue(\"-true\"));                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertTrue(testValidDefineValue(\"1 & 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"1 + 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"'a' + 'b'\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertFalse(testValidDefineValue(\"1 & foo\"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testValidDefine$catena_11() {\n    try{ assertTrue(testValidDefineValue(\"1\"));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"-3\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"true\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"false\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"'foo'\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ assertFalse(testValidDefineValue(\"x\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"null\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"undefined\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"NaN\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ assertTrue(testValidDefineValue(\"!true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"-true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertTrue(testValidDefineValue(\"1 & 8\"));                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertTrue(testValidDefineValue(\"1 + 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"'a' + 'b'\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertFalse(testValidDefineValue(\"1 & foo\"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testValidDefine$catena_12() {\n    try{ assertTrue(testValidDefineValue(\"1\"));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"-3\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"true\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"false\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"'foo'\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ assertFalse(testValidDefineValue(\"x\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"null\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"undefined\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"NaN\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ assertTrue(testValidDefineValue(\"!true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"-true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"1 & 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertTrue(testValidDefineValue(\"1 + 8\"));                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertTrue(testValidDefineValue(\"'a' + 'b'\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertFalse(testValidDefineValue(\"1 & foo\"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testValidDefine$catena_13() {\n    try{ assertTrue(testValidDefineValue(\"1\"));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"-3\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"true\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"false\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"'foo'\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ assertFalse(testValidDefineValue(\"x\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"null\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"undefined\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"NaN\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ assertTrue(testValidDefineValue(\"!true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"-true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"1 & 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"1 + 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertTrue(testValidDefineValue(\"'a' + 'b'\"));                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ assertFalse(testValidDefineValue(\"1 & foo\"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testValidDefine$catena_14() {\n    try{ assertTrue(testValidDefineValue(\"1\"));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"-3\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"true\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"false\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"'foo'\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ assertFalse(testValidDefineValue(\"x\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"null\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"undefined\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"NaN\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ assertTrue(testValidDefineValue(\"!true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"-true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"1 & 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"1 + 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"'a' + 'b'\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    assertFalse(testValidDefineValue(\"1 & foo\"));                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            ],
            "func": {
                "0": "  public void testValidDefine$catena_0() {\n    assertTrue(testValidDefineValue(\"1\"));                                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertTrue(testValidDefineValue(\"-3\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"true\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"false\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"'foo'\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ assertFalse(testValidDefineValue(\"x\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"null\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"undefined\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"NaN\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ assertTrue(testValidDefineValue(\"!true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"-true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"1 & 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"1 + 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"'a' + 'b'\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertFalse(testValidDefineValue(\"1 & foo\"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "1": "  public void testValidDefine$catena_1() {\n    try{ assertTrue(testValidDefineValue(\"1\"));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertTrue(testValidDefineValue(\"-3\"));                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertTrue(testValidDefineValue(\"true\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"false\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"'foo'\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ assertFalse(testValidDefineValue(\"x\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"null\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"undefined\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"NaN\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ assertTrue(testValidDefineValue(\"!true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"-true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"1 & 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"1 + 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"'a' + 'b'\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertFalse(testValidDefineValue(\"1 & foo\"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "2": "  public void testValidDefine$catena_2() {\n    try{ assertTrue(testValidDefineValue(\"1\"));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"-3\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertTrue(testValidDefineValue(\"true\"));                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertTrue(testValidDefineValue(\"false\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"'foo'\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ assertFalse(testValidDefineValue(\"x\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"null\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"undefined\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"NaN\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ assertTrue(testValidDefineValue(\"!true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"-true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"1 & 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"1 + 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"'a' + 'b'\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertFalse(testValidDefineValue(\"1 & foo\"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "3": "  public void testValidDefine$catena_3() {\n    try{ assertTrue(testValidDefineValue(\"1\"));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"-3\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"true\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertTrue(testValidDefineValue(\"false\"));                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertTrue(testValidDefineValue(\"'foo'\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ assertFalse(testValidDefineValue(\"x\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"null\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"undefined\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"NaN\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ assertTrue(testValidDefineValue(\"!true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"-true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"1 & 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"1 + 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"'a' + 'b'\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertFalse(testValidDefineValue(\"1 & foo\"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "4": "  public void testValidDefine$catena_4() {\n    try{ assertTrue(testValidDefineValue(\"1\"));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"-3\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"true\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"false\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertTrue(testValidDefineValue(\"'foo'\"));                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n    \n    try{ assertFalse(testValidDefineValue(\"x\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"null\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"undefined\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"NaN\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ assertTrue(testValidDefineValue(\"!true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"-true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"1 & 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"1 + 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"'a' + 'b'\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertFalse(testValidDefineValue(\"1 & foo\"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "5": "  public void testValidDefine$catena_5() {\n    try{ assertTrue(testValidDefineValue(\"1\"));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"-3\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"true\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"false\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"'foo'\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    assertFalse(testValidDefineValue(\"x\"));                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertFalse(testValidDefineValue(\"null\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"undefined\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"NaN\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ assertTrue(testValidDefineValue(\"!true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"-true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"1 & 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"1 + 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"'a' + 'b'\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertFalse(testValidDefineValue(\"1 & foo\"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "6": "  public void testValidDefine$catena_6() {\n    try{ assertTrue(testValidDefineValue(\"1\"));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"-3\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"true\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"false\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"'foo'\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ assertFalse(testValidDefineValue(\"x\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertFalse(testValidDefineValue(\"null\"));                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertFalse(testValidDefineValue(\"undefined\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"NaN\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ assertTrue(testValidDefineValue(\"!true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"-true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"1 & 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"1 + 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"'a' + 'b'\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertFalse(testValidDefineValue(\"1 & foo\"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "7": "  public void testValidDefine$catena_7() {\n    try{ assertTrue(testValidDefineValue(\"1\"));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"-3\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"true\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"false\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"'foo'\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ assertFalse(testValidDefineValue(\"x\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"null\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertFalse(testValidDefineValue(\"undefined\"));                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertFalse(testValidDefineValue(\"NaN\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ assertTrue(testValidDefineValue(\"!true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"-true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"1 & 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"1 + 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"'a' + 'b'\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertFalse(testValidDefineValue(\"1 & foo\"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "8": "  public void testValidDefine$catena_8() {\n    try{ assertTrue(testValidDefineValue(\"1\"));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"-3\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"true\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"false\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"'foo'\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ assertFalse(testValidDefineValue(\"x\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"null\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"undefined\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertFalse(testValidDefineValue(\"NaN\"));                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n    \n    try{ assertTrue(testValidDefineValue(\"!true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"-true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"1 & 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"1 + 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"'a' + 'b'\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertFalse(testValidDefineValue(\"1 & foo\"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "9": "  public void testValidDefine$catena_9() {\n    try{ assertTrue(testValidDefineValue(\"1\"));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"-3\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"true\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"false\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"'foo'\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ assertFalse(testValidDefineValue(\"x\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"null\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"undefined\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"NaN\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    assertTrue(testValidDefineValue(\"!true\"));                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertTrue(testValidDefineValue(\"-true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"1 & 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"1 + 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"'a' + 'b'\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertFalse(testValidDefineValue(\"1 & foo\"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "10": "  public void testValidDefine$catena_10() {\n    try{ assertTrue(testValidDefineValue(\"1\"));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"-3\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"true\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"false\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"'foo'\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ assertFalse(testValidDefineValue(\"x\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"null\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"undefined\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"NaN\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ assertTrue(testValidDefineValue(\"!true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertTrue(testValidDefineValue(\"-true\"));                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertTrue(testValidDefineValue(\"1 & 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"1 + 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"'a' + 'b'\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertFalse(testValidDefineValue(\"1 & foo\"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "11": "  public void testValidDefine$catena_11() {\n    try{ assertTrue(testValidDefineValue(\"1\"));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"-3\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"true\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"false\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"'foo'\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ assertFalse(testValidDefineValue(\"x\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"null\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"undefined\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"NaN\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ assertTrue(testValidDefineValue(\"!true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"-true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertTrue(testValidDefineValue(\"1 & 8\"));                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertTrue(testValidDefineValue(\"1 + 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"'a' + 'b'\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertFalse(testValidDefineValue(\"1 & foo\"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "12": "  public void testValidDefine$catena_12() {\n    try{ assertTrue(testValidDefineValue(\"1\"));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"-3\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"true\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"false\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"'foo'\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ assertFalse(testValidDefineValue(\"x\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"null\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"undefined\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"NaN\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ assertTrue(testValidDefineValue(\"!true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"-true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"1 & 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertTrue(testValidDefineValue(\"1 + 8\"));                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertTrue(testValidDefineValue(\"'a' + 'b'\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertFalse(testValidDefineValue(\"1 & foo\"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "13": "  public void testValidDefine$catena_13() {\n    try{ assertTrue(testValidDefineValue(\"1\"));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"-3\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"true\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"false\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"'foo'\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ assertFalse(testValidDefineValue(\"x\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"null\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"undefined\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"NaN\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ assertTrue(testValidDefineValue(\"!true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"-true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"1 & 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"1 + 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertTrue(testValidDefineValue(\"'a' + 'b'\"));                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ assertFalse(testValidDefineValue(\"1 & foo\"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "14": "  public void testValidDefine$catena_14() {\n    try{ assertTrue(testValidDefineValue(\"1\"));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"-3\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"true\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"false\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"'foo'\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ assertFalse(testValidDefineValue(\"x\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"null\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"undefined\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"NaN\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ assertTrue(testValidDefineValue(\"!true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"-true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"1 & 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"1 + 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"'a' + 'b'\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    assertFalse(testValidDefineValue(\"1 & foo\"));                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            }
        },
        "com.google.javascript.jscomp.ProcessDefinesTest::testOverridingString1": {
            "file_path": "test/com/google/javascript/jscomp/ProcessDefinesTest.java",
            "Instance": "Begin: Pos(146, 10)\nEnd: Pos(150, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Closure_94/test//com/google/javascript/jscomp/ProcessDefinesTest.java\nName: testOverridingString1\nChilds: [StatementAssertion<Begin: Pos(147, 5), End: Pos(149, 49)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Closure_94/test//com/google/javascript/jscomp/ProcessDefinesTest.java",
            "name": "testOverridingString1",
            "begin": "Pos(146, 10)",
            "end": "Pos(150, 3)",
            "begin_line_no": 146,
            "end_line_no": 150,
            "child": [
                "Begin: Pos(147, 5)\nEnd: Pos(149, 49)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [],
            "func": {}
        },
        "com.google.javascript.jscomp.ProcessDefinesTest::testOverridingString3": {
            "file_path": "test/com/google/javascript/jscomp/ProcessDefinesTest.java",
            "Instance": "Begin: Pos(159, 10)\nEnd: Pos(164, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Closure_94/test//com/google/javascript/jscomp/ProcessDefinesTest.java\nName: testOverridingString3\nChilds: [StatementAssertion<Begin: Pos(161, 5), End: Pos(163, 43)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Closure_94/test//com/google/javascript/jscomp/ProcessDefinesTest.java",
            "name": "testOverridingString3",
            "begin": "Pos(159, 10)",
            "end": "Pos(164, 3)",
            "begin_line_no": 159,
            "end_line_no": 164,
            "child": [
                "Begin: Pos(161, 5)\nEnd: Pos(163, 43)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [],
            "func": {}
        }
    },
    "010": {
        "failing_tests": [
            "com.google.javascript.jscomp.NodeUtilTest::testValidDefine$catena_14"
        ]
    },
    "110": {
        "failing_tests": [
            "com.google.javascript.jscomp.ProcessDefinesTest::testOverridingString1",
            "com.google.javascript.jscomp.NodeUtilTest::testValidDefine$catena_12",
            "com.google.javascript.jscomp.NodeUtilTest::testValidDefine$catena_13",
            "com.google.javascript.jscomp.ProcessDefinesTest::testOverridingString3"
        ]
    }
}