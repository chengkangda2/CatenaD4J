{
    "original": {
        "num_of_hunks": 5,
        "0": {
            "file_name": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
            "from_line_no": 1413,
            "to_line_no": 1413,
            "replaced_with": "          ObjectType qVarType = ObjectType.cast(qVar.getType());\n          if (qVarType != null &&\n              rhsValue != null &&\n              rhsValue.getType() == Token.OBJECTLIT) {\n            typeRegistry.resetImplicitPrototype(\n                rhsValue.getJSType(), qVarType.getImplicitPrototype());\n          } else if (!qVar.isTypeInferred()) {\n",
            "replaced": "          if (!qVar.isTypeInferred()) {\n",
            "patch_type": "replace",
            "next_line_no": 1414
        },
        "1": {
            "file_name": "src/com/google/javascript/rhino/jstype/FunctionType.java",
            "from_line_no": 341,
            "to_line_no": 341,
            "replaced": "        baseType.isUnknownType() ||\n",
            "patch_type": "delete",
            "next_line_no": 342
        },
        "2": {
            "file_name": "src/com/google/javascript/rhino/jstype/FunctionType.java",
            "from_line_no": 366,
            "to_line_no": 366,
            "replaced_with": "    PrototypeObjectType oldPrototype = this.prototype;\n    boolean replacedPrototype = oldPrototype != null;\n",
            "replaced": "    boolean replacedPrototype = prototype != null;\n",
            "patch_type": "replace",
            "next_line_no": 367
        },
        "3": {
            "file_name": "src/com/google/javascript/rhino/jstype/FunctionType.java",
            "replaced_with": "    if (oldPrototype != null) {\n",
            "patch_type": "insert",
            "next_line_no": 372
        },
        "4": {
            "file_name": "src/com/google/javascript/rhino/jstype/FunctionType.java",
            "replaced_with": "      oldPrototype.setOwnerFunction(null);\n    }\n",
            "patch_type": "insert",
            "next_line_no": 374
        }
    },
    "method": {
        "failing_tests": [
            "com.google.javascript.jscomp.TypeCheckTest::testIssue537a",
            "com.google.javascript.jscomp.TypeCheckTest::testIssue537b",
            "com.google.javascript.jscomp.TypedScopeCreatorTest::testPropertyOnUnknownSuperClass2"
        ],
        "com.google.javascript.jscomp.TypeCheckTest::testIssue537a": {
            "file_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
            "Instance": "Begin: Pos(5263, 10)\nEnd: Pos(5284, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Closure_54/test//com/google/javascript/jscomp/TypeCheckTest.java\nName: testIssue537a\nChilds: [StatementAssertion<Begin: Pos(5264, 5), End: Pos(5283, 43)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Closure_54/test//com/google/javascript/jscomp/TypeCheckTest.java",
            "name": "testIssue537a",
            "begin": "Pos(5263, 10)",
            "end": "Pos(5284, 3)",
            "begin_line_no": 5263,
            "end_line_no": 5284,
            "child": [
                "Begin: Pos(5264, 5)\nEnd: Pos(5283, 43)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [],
            "func": {}
        },
        "com.google.javascript.jscomp.TypeCheckTest::testIssue537b": {
            "file_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
            "Instance": "Begin: Pos(5286, 10)\nEnd: Pos(5307, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Closure_54/test//com/google/javascript/jscomp/TypeCheckTest.java\nName: testIssue537b\nChilds: [StatementAssertion<Begin: Pos(5287, 5), End: Pos(5306, 43)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Closure_54/test//com/google/javascript/jscomp/TypeCheckTest.java",
            "name": "testIssue537b",
            "begin": "Pos(5286, 10)",
            "end": "Pos(5307, 3)",
            "begin_line_no": 5286,
            "end_line_no": 5307,
            "child": [
                "Begin: Pos(5287, 5)\nEnd: Pos(5306, 43)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [],
            "func": {}
        },
        "com.google.javascript.jscomp.TypedScopeCreatorTest::testPropertyOnUnknownSuperClass2": {
            "file_path": "test/com/google/javascript/jscomp/TypedScopeCreatorTest.java",
            "Instance": "Begin: Pos(365, 10)\nEnd: Pos(379, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Closure_54/test//com/google/javascript/jscomp/TypedScopeCreatorTest.java\nName: testPropertyOnUnknownSuperClass2\nChilds: [StatementAssertion<Begin: Pos(366, 5), End: Pos(372, 45)>,\nStatementAssertion<Begin: Pos(374, 5), End: Pos(374, 38)>,\nStatementAssertion<Begin: Pos(375, 5), End: Pos(375, 71)>,\nStatementAssertion<Begin: Pos(376, 5), End: Pos(376, 63)>,\nStatementAssertion<Begin: Pos(377, 5), End: Pos(377, 59)>,\nStatementAssertion<Begin: Pos(378, 5), End: Pos(378, 48)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Closure_54/test//com/google/javascript/jscomp/TypedScopeCreatorTest.java",
            "name": "testPropertyOnUnknownSuperClass2",
            "begin": "Pos(365, 10)",
            "end": "Pos(379, 3)",
            "begin_line_no": 365,
            "end_line_no": 379,
            "child": [
                "Begin: Pos(366, 5)\nEnd: Pos(372, 45)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(374, 5)\nEnd: Pos(374, 38)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(375, 5)\nEnd: Pos(375, 71)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(376, 5)\nEnd: Pos(376, 63)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(377, 5)\nEnd: Pos(377, 59)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(378, 5)\nEnd: Pos(378, 48)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "  public void testPropertyOnUnknownSuperClass2$catena_0() {\n    testSame(\n        \"var goog = this.foo();\" +\n        \"/** @constructor \\n * @extends {goog.Unknown} */\" +\n        \"function Foo() {}\" +\n        \"Foo.prototype = {bar: 1};\" +\n        \"var x = new Foo();\",\n        RhinoErrorReporter.TYPE_PARSE_ERROR);                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n    ObjectType x = (ObjectType) findNameType(\"x\", globalScope);\n    try{ assertEquals(\"Foo\", x.toString());                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"Foo.prototype\", x.getImplicitPrototype().toString());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(x.getImplicitPrototype().hasOwnProperty(\"bar\"));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"?\", x.getPropertyType(\"bar\").toString());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(x.isPropertyTypeInferred(\"bar\"));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testPropertyOnUnknownSuperClass2$catena_1() {\n    try{ testSame(\n        \"var goog = this.foo();\" +\n        \"/** @constructor \\n * @extends {goog.Unknown} */\" +\n        \"function Foo() {}\" +\n        \"Foo.prototype = {bar: 1};\" +\n        \"var x = new Foo();\",\n        RhinoErrorReporter.TYPE_PARSE_ERROR);                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    ObjectType x = (ObjectType) findNameType(\"x\", globalScope);\n    assertEquals(\"Foo\", x.toString());                                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertEquals(\"Foo.prototype\", x.getImplicitPrototype().toString());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(x.getImplicitPrototype().hasOwnProperty(\"bar\"));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"?\", x.getPropertyType(\"bar\").toString());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(x.isPropertyTypeInferred(\"bar\"));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testPropertyOnUnknownSuperClass2$catena_2() {\n    try{ testSame(\n        \"var goog = this.foo();\" +\n        \"/** @constructor \\n * @extends {goog.Unknown} */\" +\n        \"function Foo() {}\" +\n        \"Foo.prototype = {bar: 1};\" +\n        \"var x = new Foo();\",\n        RhinoErrorReporter.TYPE_PARSE_ERROR);                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    ObjectType x = (ObjectType) findNameType(\"x\", globalScope);\n    try{ assertEquals(\"Foo\", x.toString());                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertEquals(\"Foo.prototype\", x.getImplicitPrototype().toString());                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertTrue(x.getImplicitPrototype().hasOwnProperty(\"bar\"));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"?\", x.getPropertyType(\"bar\").toString());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(x.isPropertyTypeInferred(\"bar\"));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testPropertyOnUnknownSuperClass2$catena_3() {\n    try{ testSame(\n        \"var goog = this.foo();\" +\n        \"/** @constructor \\n * @extends {goog.Unknown} */\" +\n        \"function Foo() {}\" +\n        \"Foo.prototype = {bar: 1};\" +\n        \"var x = new Foo();\",\n        RhinoErrorReporter.TYPE_PARSE_ERROR);                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    ObjectType x = (ObjectType) findNameType(\"x\", globalScope);\n    try{ assertEquals(\"Foo\", x.toString());                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"Foo.prototype\", x.getImplicitPrototype().toString());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertTrue(x.getImplicitPrototype().hasOwnProperty(\"bar\"));                                             /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertEquals(\"?\", x.getPropertyType(\"bar\").toString());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(x.isPropertyTypeInferred(\"bar\"));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testPropertyOnUnknownSuperClass2$catena_4() {\n    try{ testSame(\n        \"var goog = this.foo();\" +\n        \"/** @constructor \\n * @extends {goog.Unknown} */\" +\n        \"function Foo() {}\" +\n        \"Foo.prototype = {bar: 1};\" +\n        \"var x = new Foo();\",\n        RhinoErrorReporter.TYPE_PARSE_ERROR);                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    ObjectType x = (ObjectType) findNameType(\"x\", globalScope);\n    try{ assertEquals(\"Foo\", x.toString());                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"Foo.prototype\", x.getImplicitPrototype().toString());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(x.getImplicitPrototype().hasOwnProperty(\"bar\"));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertEquals(\"?\", x.getPropertyType(\"bar\").toString());                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertTrue(x.isPropertyTypeInferred(\"bar\"));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testPropertyOnUnknownSuperClass2$catena_5() {\n    try{ testSame(\n        \"var goog = this.foo();\" +\n        \"/** @constructor \\n * @extends {goog.Unknown} */\" +\n        \"function Foo() {}\" +\n        \"Foo.prototype = {bar: 1};\" +\n        \"var x = new Foo();\",\n        RhinoErrorReporter.TYPE_PARSE_ERROR);                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    ObjectType x = (ObjectType) findNameType(\"x\", globalScope);\n    try{ assertEquals(\"Foo\", x.toString());                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"Foo.prototype\", x.getImplicitPrototype().toString());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(x.getImplicitPrototype().hasOwnProperty(\"bar\"));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"?\", x.getPropertyType(\"bar\").toString());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertTrue(x.isPropertyTypeInferred(\"bar\"));                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            ],
            "func": {
                "0": "  public void testPropertyOnUnknownSuperClass2$catena_0() {\n    testSame(\n        \"var goog = this.foo();\" +\n        \"/** @constructor \\n * @extends {goog.Unknown} */\" +\n        \"function Foo() {}\" +\n        \"Foo.prototype = {bar: 1};\" +\n        \"var x = new Foo();\",\n        RhinoErrorReporter.TYPE_PARSE_ERROR);                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n    ObjectType x = (ObjectType) findNameType(\"x\", globalScope);\n    try{ assertEquals(\"Foo\", x.toString());                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"Foo.prototype\", x.getImplicitPrototype().toString());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(x.getImplicitPrototype().hasOwnProperty(\"bar\"));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"?\", x.getPropertyType(\"bar\").toString());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(x.isPropertyTypeInferred(\"bar\"));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "1": "  public void testPropertyOnUnknownSuperClass2$catena_1() {\n    try{ testSame(\n        \"var goog = this.foo();\" +\n        \"/** @constructor \\n * @extends {goog.Unknown} */\" +\n        \"function Foo() {}\" +\n        \"Foo.prototype = {bar: 1};\" +\n        \"var x = new Foo();\",\n        RhinoErrorReporter.TYPE_PARSE_ERROR);                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    ObjectType x = (ObjectType) findNameType(\"x\", globalScope);\n    assertEquals(\"Foo\", x.toString());                                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertEquals(\"Foo.prototype\", x.getImplicitPrototype().toString());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(x.getImplicitPrototype().hasOwnProperty(\"bar\"));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"?\", x.getPropertyType(\"bar\").toString());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(x.isPropertyTypeInferred(\"bar\"));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "2": "  public void testPropertyOnUnknownSuperClass2$catena_2() {\n    try{ testSame(\n        \"var goog = this.foo();\" +\n        \"/** @constructor \\n * @extends {goog.Unknown} */\" +\n        \"function Foo() {}\" +\n        \"Foo.prototype = {bar: 1};\" +\n        \"var x = new Foo();\",\n        RhinoErrorReporter.TYPE_PARSE_ERROR);                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    ObjectType x = (ObjectType) findNameType(\"x\", globalScope);\n    try{ assertEquals(\"Foo\", x.toString());                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertEquals(\"Foo.prototype\", x.getImplicitPrototype().toString());                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertTrue(x.getImplicitPrototype().hasOwnProperty(\"bar\"));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"?\", x.getPropertyType(\"bar\").toString());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(x.isPropertyTypeInferred(\"bar\"));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "3": "  public void testPropertyOnUnknownSuperClass2$catena_3() {\n    try{ testSame(\n        \"var goog = this.foo();\" +\n        \"/** @constructor \\n * @extends {goog.Unknown} */\" +\n        \"function Foo() {}\" +\n        \"Foo.prototype = {bar: 1};\" +\n        \"var x = new Foo();\",\n        RhinoErrorReporter.TYPE_PARSE_ERROR);                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    ObjectType x = (ObjectType) findNameType(\"x\", globalScope);\n    try{ assertEquals(\"Foo\", x.toString());                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"Foo.prototype\", x.getImplicitPrototype().toString());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertTrue(x.getImplicitPrototype().hasOwnProperty(\"bar\"));                                             /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertEquals(\"?\", x.getPropertyType(\"bar\").toString());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(x.isPropertyTypeInferred(\"bar\"));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "4": "  public void testPropertyOnUnknownSuperClass2$catena_4() {\n    try{ testSame(\n        \"var goog = this.foo();\" +\n        \"/** @constructor \\n * @extends {goog.Unknown} */\" +\n        \"function Foo() {}\" +\n        \"Foo.prototype = {bar: 1};\" +\n        \"var x = new Foo();\",\n        RhinoErrorReporter.TYPE_PARSE_ERROR);                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    ObjectType x = (ObjectType) findNameType(\"x\", globalScope);\n    try{ assertEquals(\"Foo\", x.toString());                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"Foo.prototype\", x.getImplicitPrototype().toString());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(x.getImplicitPrototype().hasOwnProperty(\"bar\"));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertEquals(\"?\", x.getPropertyType(\"bar\").toString());                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertTrue(x.isPropertyTypeInferred(\"bar\"));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "5": "  public void testPropertyOnUnknownSuperClass2$catena_5() {\n    try{ testSame(\n        \"var goog = this.foo();\" +\n        \"/** @constructor \\n * @extends {goog.Unknown} */\" +\n        \"function Foo() {}\" +\n        \"Foo.prototype = {bar: 1};\" +\n        \"var x = new Foo();\",\n        RhinoErrorReporter.TYPE_PARSE_ERROR);                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    ObjectType x = (ObjectType) findNameType(\"x\", globalScope);\n    try{ assertEquals(\"Foo\", x.toString());                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"Foo.prototype\", x.getImplicitPrototype().toString());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(x.getImplicitPrototype().hasOwnProperty(\"bar\"));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"?\", x.getPropertyType(\"bar\").toString());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertTrue(x.isPropertyTypeInferred(\"bar\"));                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            }
        }
    },
    "11000": {
        "failing_tests": [
            "com.google.javascript.jscomp.TypedScopeCreatorTest::testPropertyOnUnknownSuperClass2$catena_4",
            "com.google.javascript.jscomp.TypeCheckTest::testIssue537a",
            "com.google.javascript.jscomp.TypeCheckTest::testIssue537b"
        ]
    }
}