{
    "original": {
        "num_of_hunks": 3,
        "0": {
            "file_name": "src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java",
            "replaced_with": "    private static final int HASH_SEED = 31;\n",
            "patch_type": "insert",
            "next_line_no": 73
        },
        "1": {
            "file_name": "src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java",
            "replaced_with": "    @Override\n    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (obj == null) {\n            return false;\n        }\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (ObjectUtils.notEqual(getClass(), obj.getClass())) {\n          return false;\n        }\n        ExtendedMessageFormat rhs = (ExtendedMessageFormat)obj;\n        if (ObjectUtils.notEqual(toPattern, rhs.toPattern)) {\n            return false;\n        }\n        if (ObjectUtils.notEqual(registry, rhs.registry)) {\n            return false;\n        }\n        return true;\n    }\n",
            "patch_type": "insert",
            "next_line_no": 263
        },
        "2": {
            "file_name": "src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java",
            "replaced_with": "    @Override\n    public int hashCode() {\n        int result = super.hashCode();\n        result = HASH_SEED * result + ObjectUtils.hashCode(registry);\n        result = HASH_SEED * result + ObjectUtils.hashCode(toPattern);\n        return result;\n    }\n",
            "patch_type": "insert",
            "next_line_no": 269
        }
    },
    "method": {
        "failing_tests": [
            "org.apache.commons.lang3.text.ExtendedMessageFormatTest::testEqualsHashcode"
        ],
        "org.apache.commons.lang3.text.ExtendedMessageFormatTest::testEqualsHashcode": {
            "file_path": "src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java",
            "Instance": "Begin: Pos(270, 12)\nEnd: Pos(307, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Lang_23/src/test/java//org/apache/commons/lang3/text/ExtendedMessageFormatTest.java\nName: testEqualsHashcode\nChilds: [StatementAssertion<Begin: Pos(280, 9), End: Pos(280, 56)>,\nStatementAssertion<Begin: Pos(281, 9), End: Pos(281, 73)>,\nStatementAssertion<Begin: Pos(285, 9), End: Pos(285, 59)>,\nStatementAssertion<Begin: Pos(286, 9), End: Pos(286, 76)>,\nStatementAssertion<Begin: Pos(290, 9), End: Pos(290, 59)>,\nStatementAssertion<Begin: Pos(291, 9), End: Pos(291, 76)>,\nStatementAssertion<Begin: Pos(295, 9), End: Pos(295, 62)>,\nStatementAssertion<Begin: Pos(296, 9), End: Pos(296, 79)>,\nStatementAssertion<Begin: Pos(300, 9), End: Pos(300, 63)>,\nStatementAssertion<Begin: Pos(301, 9), End: Pos(301, 80)>,\nStatementAssertion<Begin: Pos(305, 9), End: Pos(305, 60)>,\nStatementAssertion<Begin: Pos(306, 9), End: Pos(306, 77)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Lang_23/src/test/java//org/apache/commons/lang3/text/ExtendedMessageFormatTest.java",
            "name": "testEqualsHashcode",
            "begin": "Pos(270, 12)",
            "end": "Pos(307, 5)",
            "begin_line_no": 270,
            "end_line_no": 307,
            "child": [
                "Begin: Pos(280, 9)\nEnd: Pos(280, 56)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(281, 9)\nEnd: Pos(281, 73)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(285, 9)\nEnd: Pos(285, 59)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(286, 9)\nEnd: Pos(286, 76)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(290, 9)\nEnd: Pos(290, 59)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(291, 9)\nEnd: Pos(291, 76)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(295, 9)\nEnd: Pos(295, 62)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(296, 9)\nEnd: Pos(296, 79)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(300, 9)\nEnd: Pos(300, 63)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(301, 9)\nEnd: Pos(301, 80)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(305, 9)\nEnd: Pos(305, 60)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(306, 9)\nEnd: Pos(306, 77)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testEqualsHashcode$catena_0() {\n        Map<String, ? extends FormatFactory> registry = Collections.singletonMap(\"testfmt\", new LowerCaseFormatFactory());\n        Map<String, ? extends FormatFactory> otherRegitry = Collections.singletonMap(\"testfmt\", new UpperCaseFormatFactory());\n\n        String pattern = \"Pattern: {0,testfmt}\";\n        ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, Locale.US, registry);\n\n        ExtendedMessageFormat other = null;\n\n        // Same object\n        assertTrue(\"same, equals()\",   emf.equals(emf));                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(\"same, hashcode()\", emf.hashCode() == emf.hashCode());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Equal Object\n        other = new ExtendedMessageFormat(pattern, Locale.US, registry);\n        try{ assertTrue(\"equal, equals()\",   emf.equals(other));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"equal, hashcode()\", emf.hashCode() == other.hashCode());                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Different Class\n        other = new OtherExtendedMessageFormat(pattern, Locale.US, registry);\n        try{ assertFalse(\"class, equals()\",  emf.equals(other));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"class, hashcode()\", emf.hashCode() == other.hashCode());          }catch(Throwable __SHOULD_BE_IGNORED){} // same hashcode\n        \n        // Different pattern\n        other = new ExtendedMessageFormat(\"X\" + pattern, Locale.US, registry);\n        try{ assertFalse(\"pattern, equals()\",   emf.equals(other));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(\"pattern, hashcode()\", emf.hashCode() == other.hashCode());                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Different registry\n        other = new ExtendedMessageFormat(pattern, Locale.US, otherRegitry);\n        try{ assertFalse(\"registry, equals()\",   emf.equals(other));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(\"registry, hashcode()\", emf.hashCode() == other.hashCode());                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Different Locale\n        other = new ExtendedMessageFormat(pattern, Locale.FRANCE, registry);\n        try{ assertFalse(\"locale, equals()\",  emf.equals(other));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"locale, hashcode()\", emf.hashCode() == other.hashCode());         }catch(Throwable __SHOULD_BE_IGNORED){} // same hashcode\n    }",
                "    public void testEqualsHashcode$catena_1() {\n        Map<String, ? extends FormatFactory> registry = Collections.singletonMap(\"testfmt\", new LowerCaseFormatFactory());\n        Map<String, ? extends FormatFactory> otherRegitry = Collections.singletonMap(\"testfmt\", new UpperCaseFormatFactory());\n\n        String pattern = \"Pattern: {0,testfmt}\";\n        ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, Locale.US, registry);\n\n        ExtendedMessageFormat other = null;\n\n        // Same object\n        try{ assertTrue(\"same, equals()\",   emf.equals(emf));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(\"same, hashcode()\", emf.hashCode() == emf.hashCode());                                   /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // Equal Object\n        other = new ExtendedMessageFormat(pattern, Locale.US, registry);\n        try{ assertTrue(\"equal, equals()\",   emf.equals(other));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"equal, hashcode()\", emf.hashCode() == other.hashCode());                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Different Class\n        other = new OtherExtendedMessageFormat(pattern, Locale.US, registry);\n        try{ assertFalse(\"class, equals()\",  emf.equals(other));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"class, hashcode()\", emf.hashCode() == other.hashCode());          }catch(Throwable __SHOULD_BE_IGNORED){} // same hashcode\n        \n        // Different pattern\n        other = new ExtendedMessageFormat(\"X\" + pattern, Locale.US, registry);\n        try{ assertFalse(\"pattern, equals()\",   emf.equals(other));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(\"pattern, hashcode()\", emf.hashCode() == other.hashCode());                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Different registry\n        other = new ExtendedMessageFormat(pattern, Locale.US, otherRegitry);\n        try{ assertFalse(\"registry, equals()\",   emf.equals(other));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(\"registry, hashcode()\", emf.hashCode() == other.hashCode());                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Different Locale\n        other = new ExtendedMessageFormat(pattern, Locale.FRANCE, registry);\n        try{ assertFalse(\"locale, equals()\",  emf.equals(other));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"locale, hashcode()\", emf.hashCode() == other.hashCode());         }catch(Throwable __SHOULD_BE_IGNORED){} // same hashcode\n    }",
                "    public void testEqualsHashcode$catena_2() {\n        Map<String, ? extends FormatFactory> registry = Collections.singletonMap(\"testfmt\", new LowerCaseFormatFactory());\n        Map<String, ? extends FormatFactory> otherRegitry = Collections.singletonMap(\"testfmt\", new UpperCaseFormatFactory());\n\n        String pattern = \"Pattern: {0,testfmt}\";\n        ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, Locale.US, registry);\n\n        ExtendedMessageFormat other = null;\n\n        // Same object\n        try{ assertTrue(\"same, equals()\",   emf.equals(emf));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"same, hashcode()\", emf.hashCode() == emf.hashCode());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Equal Object\n        other = new ExtendedMessageFormat(pattern, Locale.US, registry);\n        assertTrue(\"equal, equals()\",   emf.equals(other));                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(\"equal, hashcode()\", emf.hashCode() == other.hashCode());                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Different Class\n        other = new OtherExtendedMessageFormat(pattern, Locale.US, registry);\n        try{ assertFalse(\"class, equals()\",  emf.equals(other));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"class, hashcode()\", emf.hashCode() == other.hashCode());          }catch(Throwable __SHOULD_BE_IGNORED){} // same hashcode\n        \n        // Different pattern\n        other = new ExtendedMessageFormat(\"X\" + pattern, Locale.US, registry);\n        try{ assertFalse(\"pattern, equals()\",   emf.equals(other));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(\"pattern, hashcode()\", emf.hashCode() == other.hashCode());                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Different registry\n        other = new ExtendedMessageFormat(pattern, Locale.US, otherRegitry);\n        try{ assertFalse(\"registry, equals()\",   emf.equals(other));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(\"registry, hashcode()\", emf.hashCode() == other.hashCode());                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Different Locale\n        other = new ExtendedMessageFormat(pattern, Locale.FRANCE, registry);\n        try{ assertFalse(\"locale, equals()\",  emf.equals(other));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"locale, hashcode()\", emf.hashCode() == other.hashCode());         }catch(Throwable __SHOULD_BE_IGNORED){} // same hashcode\n    }",
                "    public void testEqualsHashcode$catena_3() {\n        Map<String, ? extends FormatFactory> registry = Collections.singletonMap(\"testfmt\", new LowerCaseFormatFactory());\n        Map<String, ? extends FormatFactory> otherRegitry = Collections.singletonMap(\"testfmt\", new UpperCaseFormatFactory());\n\n        String pattern = \"Pattern: {0,testfmt}\";\n        ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, Locale.US, registry);\n\n        ExtendedMessageFormat other = null;\n\n        // Same object\n        try{ assertTrue(\"same, equals()\",   emf.equals(emf));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"same, hashcode()\", emf.hashCode() == emf.hashCode());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Equal Object\n        other = new ExtendedMessageFormat(pattern, Locale.US, registry);\n        try{ assertTrue(\"equal, equals()\",   emf.equals(other));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(\"equal, hashcode()\", emf.hashCode() == other.hashCode());                                /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // Different Class\n        other = new OtherExtendedMessageFormat(pattern, Locale.US, registry);\n        try{ assertFalse(\"class, equals()\",  emf.equals(other));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"class, hashcode()\", emf.hashCode() == other.hashCode());          }catch(Throwable __SHOULD_BE_IGNORED){} // same hashcode\n        \n        // Different pattern\n        other = new ExtendedMessageFormat(\"X\" + pattern, Locale.US, registry);\n        try{ assertFalse(\"pattern, equals()\",   emf.equals(other));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(\"pattern, hashcode()\", emf.hashCode() == other.hashCode());                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Different registry\n        other = new ExtendedMessageFormat(pattern, Locale.US, otherRegitry);\n        try{ assertFalse(\"registry, equals()\",   emf.equals(other));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(\"registry, hashcode()\", emf.hashCode() == other.hashCode());                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Different Locale\n        other = new ExtendedMessageFormat(pattern, Locale.FRANCE, registry);\n        try{ assertFalse(\"locale, equals()\",  emf.equals(other));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"locale, hashcode()\", emf.hashCode() == other.hashCode());         }catch(Throwable __SHOULD_BE_IGNORED){} // same hashcode\n    }",
                "    public void testEqualsHashcode$catena_4() {\n        Map<String, ? extends FormatFactory> registry = Collections.singletonMap(\"testfmt\", new LowerCaseFormatFactory());\n        Map<String, ? extends FormatFactory> otherRegitry = Collections.singletonMap(\"testfmt\", new UpperCaseFormatFactory());\n\n        String pattern = \"Pattern: {0,testfmt}\";\n        ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, Locale.US, registry);\n\n        ExtendedMessageFormat other = null;\n\n        // Same object\n        try{ assertTrue(\"same, equals()\",   emf.equals(emf));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"same, hashcode()\", emf.hashCode() == emf.hashCode());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Equal Object\n        other = new ExtendedMessageFormat(pattern, Locale.US, registry);\n        try{ assertTrue(\"equal, equals()\",   emf.equals(other));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"equal, hashcode()\", emf.hashCode() == other.hashCode());                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Different Class\n        other = new OtherExtendedMessageFormat(pattern, Locale.US, registry);\n        assertFalse(\"class, equals()\",  emf.equals(other));                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(\"class, hashcode()\", emf.hashCode() == other.hashCode());          }catch(Throwable __SHOULD_BE_IGNORED){} // same hashcode\n        \n        // Different pattern\n        other = new ExtendedMessageFormat(\"X\" + pattern, Locale.US, registry);\n        try{ assertFalse(\"pattern, equals()\",   emf.equals(other));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(\"pattern, hashcode()\", emf.hashCode() == other.hashCode());                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Different registry\n        other = new ExtendedMessageFormat(pattern, Locale.US, otherRegitry);\n        try{ assertFalse(\"registry, equals()\",   emf.equals(other));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(\"registry, hashcode()\", emf.hashCode() == other.hashCode());                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Different Locale\n        other = new ExtendedMessageFormat(pattern, Locale.FRANCE, registry);\n        try{ assertFalse(\"locale, equals()\",  emf.equals(other));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"locale, hashcode()\", emf.hashCode() == other.hashCode());         }catch(Throwable __SHOULD_BE_IGNORED){} // same hashcode\n    }",
                "    public void testEqualsHashcode$catena_5() {\n        Map<String, ? extends FormatFactory> registry = Collections.singletonMap(\"testfmt\", new LowerCaseFormatFactory());\n        Map<String, ? extends FormatFactory> otherRegitry = Collections.singletonMap(\"testfmt\", new UpperCaseFormatFactory());\n\n        String pattern = \"Pattern: {0,testfmt}\";\n        ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, Locale.US, registry);\n\n        ExtendedMessageFormat other = null;\n\n        // Same object\n        try{ assertTrue(\"same, equals()\",   emf.equals(emf));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"same, hashcode()\", emf.hashCode() == emf.hashCode());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Equal Object\n        other = new ExtendedMessageFormat(pattern, Locale.US, registry);\n        try{ assertTrue(\"equal, equals()\",   emf.equals(other));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"equal, hashcode()\", emf.hashCode() == other.hashCode());                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Different Class\n        other = new OtherExtendedMessageFormat(pattern, Locale.US, registry);\n        try{ assertFalse(\"class, equals()\",  emf.equals(other));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(\"class, hashcode()\", emf.hashCode() == other.hashCode());               /***** ORIGINAL ASSERTION IS HERE *****/ // same hashcode\n        \n        // Different pattern\n        other = new ExtendedMessageFormat(\"X\" + pattern, Locale.US, registry);\n        try{ assertFalse(\"pattern, equals()\",   emf.equals(other));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(\"pattern, hashcode()\", emf.hashCode() == other.hashCode());                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Different registry\n        other = new ExtendedMessageFormat(pattern, Locale.US, otherRegitry);\n        try{ assertFalse(\"registry, equals()\",   emf.equals(other));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(\"registry, hashcode()\", emf.hashCode() == other.hashCode());                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Different Locale\n        other = new ExtendedMessageFormat(pattern, Locale.FRANCE, registry);\n        try{ assertFalse(\"locale, equals()\",  emf.equals(other));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"locale, hashcode()\", emf.hashCode() == other.hashCode());         }catch(Throwable __SHOULD_BE_IGNORED){} // same hashcode\n    }",
                "    public void testEqualsHashcode$catena_6() {\n        Map<String, ? extends FormatFactory> registry = Collections.singletonMap(\"testfmt\", new LowerCaseFormatFactory());\n        Map<String, ? extends FormatFactory> otherRegitry = Collections.singletonMap(\"testfmt\", new UpperCaseFormatFactory());\n\n        String pattern = \"Pattern: {0,testfmt}\";\n        ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, Locale.US, registry);\n\n        ExtendedMessageFormat other = null;\n\n        // Same object\n        try{ assertTrue(\"same, equals()\",   emf.equals(emf));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"same, hashcode()\", emf.hashCode() == emf.hashCode());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Equal Object\n        other = new ExtendedMessageFormat(pattern, Locale.US, registry);\n        try{ assertTrue(\"equal, equals()\",   emf.equals(other));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"equal, hashcode()\", emf.hashCode() == other.hashCode());                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Different Class\n        other = new OtherExtendedMessageFormat(pattern, Locale.US, registry);\n        try{ assertFalse(\"class, equals()\",  emf.equals(other));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"class, hashcode()\", emf.hashCode() == other.hashCode());          }catch(Throwable __SHOULD_BE_IGNORED){} // same hashcode\n        \n        // Different pattern\n        other = new ExtendedMessageFormat(\"X\" + pattern, Locale.US, registry);\n        assertFalse(\"pattern, equals()\",   emf.equals(other));                                              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertFalse(\"pattern, hashcode()\", emf.hashCode() == other.hashCode());                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Different registry\n        other = new ExtendedMessageFormat(pattern, Locale.US, otherRegitry);\n        try{ assertFalse(\"registry, equals()\",   emf.equals(other));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(\"registry, hashcode()\", emf.hashCode() == other.hashCode());                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Different Locale\n        other = new ExtendedMessageFormat(pattern, Locale.FRANCE, registry);\n        try{ assertFalse(\"locale, equals()\",  emf.equals(other));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"locale, hashcode()\", emf.hashCode() == other.hashCode());         }catch(Throwable __SHOULD_BE_IGNORED){} // same hashcode\n    }",
                "    public void testEqualsHashcode$catena_7() {\n        Map<String, ? extends FormatFactory> registry = Collections.singletonMap(\"testfmt\", new LowerCaseFormatFactory());\n        Map<String, ? extends FormatFactory> otherRegitry = Collections.singletonMap(\"testfmt\", new UpperCaseFormatFactory());\n\n        String pattern = \"Pattern: {0,testfmt}\";\n        ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, Locale.US, registry);\n\n        ExtendedMessageFormat other = null;\n\n        // Same object\n        try{ assertTrue(\"same, equals()\",   emf.equals(emf));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"same, hashcode()\", emf.hashCode() == emf.hashCode());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Equal Object\n        other = new ExtendedMessageFormat(pattern, Locale.US, registry);\n        try{ assertTrue(\"equal, equals()\",   emf.equals(other));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"equal, hashcode()\", emf.hashCode() == other.hashCode());                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Different Class\n        other = new OtherExtendedMessageFormat(pattern, Locale.US, registry);\n        try{ assertFalse(\"class, equals()\",  emf.equals(other));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"class, hashcode()\", emf.hashCode() == other.hashCode());          }catch(Throwable __SHOULD_BE_IGNORED){} // same hashcode\n        \n        // Different pattern\n        other = new ExtendedMessageFormat(\"X\" + pattern, Locale.US, registry);\n        try{ assertFalse(\"pattern, equals()\",   emf.equals(other));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertFalse(\"pattern, hashcode()\", emf.hashCode() == other.hashCode());                             /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // Different registry\n        other = new ExtendedMessageFormat(pattern, Locale.US, otherRegitry);\n        try{ assertFalse(\"registry, equals()\",   emf.equals(other));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(\"registry, hashcode()\", emf.hashCode() == other.hashCode());                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Different Locale\n        other = new ExtendedMessageFormat(pattern, Locale.FRANCE, registry);\n        try{ assertFalse(\"locale, equals()\",  emf.equals(other));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"locale, hashcode()\", emf.hashCode() == other.hashCode());         }catch(Throwable __SHOULD_BE_IGNORED){} // same hashcode\n    }",
                "    public void testEqualsHashcode$catena_8() {\n        Map<String, ? extends FormatFactory> registry = Collections.singletonMap(\"testfmt\", new LowerCaseFormatFactory());\n        Map<String, ? extends FormatFactory> otherRegitry = Collections.singletonMap(\"testfmt\", new UpperCaseFormatFactory());\n\n        String pattern = \"Pattern: {0,testfmt}\";\n        ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, Locale.US, registry);\n\n        ExtendedMessageFormat other = null;\n\n        // Same object\n        try{ assertTrue(\"same, equals()\",   emf.equals(emf));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"same, hashcode()\", emf.hashCode() == emf.hashCode());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Equal Object\n        other = new ExtendedMessageFormat(pattern, Locale.US, registry);\n        try{ assertTrue(\"equal, equals()\",   emf.equals(other));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"equal, hashcode()\", emf.hashCode() == other.hashCode());                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Different Class\n        other = new OtherExtendedMessageFormat(pattern, Locale.US, registry);\n        try{ assertFalse(\"class, equals()\",  emf.equals(other));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"class, hashcode()\", emf.hashCode() == other.hashCode());          }catch(Throwable __SHOULD_BE_IGNORED){} // same hashcode\n        \n        // Different pattern\n        other = new ExtendedMessageFormat(\"X\" + pattern, Locale.US, registry);\n        try{ assertFalse(\"pattern, equals()\",   emf.equals(other));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(\"pattern, hashcode()\", emf.hashCode() == other.hashCode());                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Different registry\n        other = new ExtendedMessageFormat(pattern, Locale.US, otherRegitry);\n        assertFalse(\"registry, equals()\",   emf.equals(other));                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertFalse(\"registry, hashcode()\", emf.hashCode() == other.hashCode());                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Different Locale\n        other = new ExtendedMessageFormat(pattern, Locale.FRANCE, registry);\n        try{ assertFalse(\"locale, equals()\",  emf.equals(other));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"locale, hashcode()\", emf.hashCode() == other.hashCode());         }catch(Throwable __SHOULD_BE_IGNORED){} // same hashcode\n    }",
                "    public void testEqualsHashcode$catena_9() {\n        Map<String, ? extends FormatFactory> registry = Collections.singletonMap(\"testfmt\", new LowerCaseFormatFactory());\n        Map<String, ? extends FormatFactory> otherRegitry = Collections.singletonMap(\"testfmt\", new UpperCaseFormatFactory());\n\n        String pattern = \"Pattern: {0,testfmt}\";\n        ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, Locale.US, registry);\n\n        ExtendedMessageFormat other = null;\n\n        // Same object\n        try{ assertTrue(\"same, equals()\",   emf.equals(emf));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"same, hashcode()\", emf.hashCode() == emf.hashCode());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Equal Object\n        other = new ExtendedMessageFormat(pattern, Locale.US, registry);\n        try{ assertTrue(\"equal, equals()\",   emf.equals(other));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"equal, hashcode()\", emf.hashCode() == other.hashCode());                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Different Class\n        other = new OtherExtendedMessageFormat(pattern, Locale.US, registry);\n        try{ assertFalse(\"class, equals()\",  emf.equals(other));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"class, hashcode()\", emf.hashCode() == other.hashCode());          }catch(Throwable __SHOULD_BE_IGNORED){} // same hashcode\n        \n        // Different pattern\n        other = new ExtendedMessageFormat(\"X\" + pattern, Locale.US, registry);\n        try{ assertFalse(\"pattern, equals()\",   emf.equals(other));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(\"pattern, hashcode()\", emf.hashCode() == other.hashCode());                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Different registry\n        other = new ExtendedMessageFormat(pattern, Locale.US, otherRegitry);\n        try{ assertFalse(\"registry, equals()\",   emf.equals(other));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertFalse(\"registry, hashcode()\", emf.hashCode() == other.hashCode());                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // Different Locale\n        other = new ExtendedMessageFormat(pattern, Locale.FRANCE, registry);\n        try{ assertFalse(\"locale, equals()\",  emf.equals(other));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"locale, hashcode()\", emf.hashCode() == other.hashCode());         }catch(Throwable __SHOULD_BE_IGNORED){} // same hashcode\n    }",
                "    public void testEqualsHashcode$catena_10() {\n        Map<String, ? extends FormatFactory> registry = Collections.singletonMap(\"testfmt\", new LowerCaseFormatFactory());\n        Map<String, ? extends FormatFactory> otherRegitry = Collections.singletonMap(\"testfmt\", new UpperCaseFormatFactory());\n\n        String pattern = \"Pattern: {0,testfmt}\";\n        ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, Locale.US, registry);\n\n        ExtendedMessageFormat other = null;\n\n        // Same object\n        try{ assertTrue(\"same, equals()\",   emf.equals(emf));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"same, hashcode()\", emf.hashCode() == emf.hashCode());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Equal Object\n        other = new ExtendedMessageFormat(pattern, Locale.US, registry);\n        try{ assertTrue(\"equal, equals()\",   emf.equals(other));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"equal, hashcode()\", emf.hashCode() == other.hashCode());                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Different Class\n        other = new OtherExtendedMessageFormat(pattern, Locale.US, registry);\n        try{ assertFalse(\"class, equals()\",  emf.equals(other));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"class, hashcode()\", emf.hashCode() == other.hashCode());          }catch(Throwable __SHOULD_BE_IGNORED){} // same hashcode\n        \n        // Different pattern\n        other = new ExtendedMessageFormat(\"X\" + pattern, Locale.US, registry);\n        try{ assertFalse(\"pattern, equals()\",   emf.equals(other));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(\"pattern, hashcode()\", emf.hashCode() == other.hashCode());                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Different registry\n        other = new ExtendedMessageFormat(pattern, Locale.US, otherRegitry);\n        try{ assertFalse(\"registry, equals()\",   emf.equals(other));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(\"registry, hashcode()\", emf.hashCode() == other.hashCode());                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Different Locale\n        other = new ExtendedMessageFormat(pattern, Locale.FRANCE, registry);\n        assertFalse(\"locale, equals()\",  emf.equals(other));                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(\"locale, hashcode()\", emf.hashCode() == other.hashCode());         }catch(Throwable __SHOULD_BE_IGNORED){} // same hashcode\n    }",
                "    public void testEqualsHashcode$catena_11() {\n        Map<String, ? extends FormatFactory> registry = Collections.singletonMap(\"testfmt\", new LowerCaseFormatFactory());\n        Map<String, ? extends FormatFactory> otherRegitry = Collections.singletonMap(\"testfmt\", new UpperCaseFormatFactory());\n\n        String pattern = \"Pattern: {0,testfmt}\";\n        ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, Locale.US, registry);\n\n        ExtendedMessageFormat other = null;\n\n        // Same object\n        try{ assertTrue(\"same, equals()\",   emf.equals(emf));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"same, hashcode()\", emf.hashCode() == emf.hashCode());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Equal Object\n        other = new ExtendedMessageFormat(pattern, Locale.US, registry);\n        try{ assertTrue(\"equal, equals()\",   emf.equals(other));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"equal, hashcode()\", emf.hashCode() == other.hashCode());                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Different Class\n        other = new OtherExtendedMessageFormat(pattern, Locale.US, registry);\n        try{ assertFalse(\"class, equals()\",  emf.equals(other));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"class, hashcode()\", emf.hashCode() == other.hashCode());          }catch(Throwable __SHOULD_BE_IGNORED){} // same hashcode\n        \n        // Different pattern\n        other = new ExtendedMessageFormat(\"X\" + pattern, Locale.US, registry);\n        try{ assertFalse(\"pattern, equals()\",   emf.equals(other));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(\"pattern, hashcode()\", emf.hashCode() == other.hashCode());                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Different registry\n        other = new ExtendedMessageFormat(pattern, Locale.US, otherRegitry);\n        try{ assertFalse(\"registry, equals()\",   emf.equals(other));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(\"registry, hashcode()\", emf.hashCode() == other.hashCode());                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Different Locale\n        other = new ExtendedMessageFormat(pattern, Locale.FRANCE, registry);\n        try{ assertFalse(\"locale, equals()\",  emf.equals(other));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(\"locale, hashcode()\", emf.hashCode() == other.hashCode());              /***** ORIGINAL ASSERTION IS HERE *****/ // same hashcode\n    }"
            ],
            "func": {
                "0": "    public void testEqualsHashcode$catena_0() {\n        Map<String, ? extends FormatFactory> registry = Collections.singletonMap(\"testfmt\", new LowerCaseFormatFactory());\n        Map<String, ? extends FormatFactory> otherRegitry = Collections.singletonMap(\"testfmt\", new UpperCaseFormatFactory());\n\n        String pattern = \"Pattern: {0,testfmt}\";\n        ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, Locale.US, registry);\n\n        ExtendedMessageFormat other = null;\n\n        // Same object\n        assertTrue(\"same, equals()\",   emf.equals(emf));                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(\"same, hashcode()\", emf.hashCode() == emf.hashCode());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Equal Object\n        other = new ExtendedMessageFormat(pattern, Locale.US, registry);\n        try{ assertTrue(\"equal, equals()\",   emf.equals(other));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"equal, hashcode()\", emf.hashCode() == other.hashCode());                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Different Class\n        other = new OtherExtendedMessageFormat(pattern, Locale.US, registry);\n        try{ assertFalse(\"class, equals()\",  emf.equals(other));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"class, hashcode()\", emf.hashCode() == other.hashCode());          }catch(Throwable __SHOULD_BE_IGNORED){} // same hashcode\n        \n        // Different pattern\n        other = new ExtendedMessageFormat(\"X\" + pattern, Locale.US, registry);\n        try{ assertFalse(\"pattern, equals()\",   emf.equals(other));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(\"pattern, hashcode()\", emf.hashCode() == other.hashCode());                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Different registry\n        other = new ExtendedMessageFormat(pattern, Locale.US, otherRegitry);\n        try{ assertFalse(\"registry, equals()\",   emf.equals(other));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(\"registry, hashcode()\", emf.hashCode() == other.hashCode());                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Different Locale\n        other = new ExtendedMessageFormat(pattern, Locale.FRANCE, registry);\n        try{ assertFalse(\"locale, equals()\",  emf.equals(other));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"locale, hashcode()\", emf.hashCode() == other.hashCode());         }catch(Throwable __SHOULD_BE_IGNORED){} // same hashcode\n    }",
                "1": "    public void testEqualsHashcode$catena_1() {\n        Map<String, ? extends FormatFactory> registry = Collections.singletonMap(\"testfmt\", new LowerCaseFormatFactory());\n        Map<String, ? extends FormatFactory> otherRegitry = Collections.singletonMap(\"testfmt\", new UpperCaseFormatFactory());\n\n        String pattern = \"Pattern: {0,testfmt}\";\n        ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, Locale.US, registry);\n\n        ExtendedMessageFormat other = null;\n\n        // Same object\n        try{ assertTrue(\"same, equals()\",   emf.equals(emf));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(\"same, hashcode()\", emf.hashCode() == emf.hashCode());                                   /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // Equal Object\n        other = new ExtendedMessageFormat(pattern, Locale.US, registry);\n        try{ assertTrue(\"equal, equals()\",   emf.equals(other));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"equal, hashcode()\", emf.hashCode() == other.hashCode());                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Different Class\n        other = new OtherExtendedMessageFormat(pattern, Locale.US, registry);\n        try{ assertFalse(\"class, equals()\",  emf.equals(other));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"class, hashcode()\", emf.hashCode() == other.hashCode());          }catch(Throwable __SHOULD_BE_IGNORED){} // same hashcode\n        \n        // Different pattern\n        other = new ExtendedMessageFormat(\"X\" + pattern, Locale.US, registry);\n        try{ assertFalse(\"pattern, equals()\",   emf.equals(other));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(\"pattern, hashcode()\", emf.hashCode() == other.hashCode());                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Different registry\n        other = new ExtendedMessageFormat(pattern, Locale.US, otherRegitry);\n        try{ assertFalse(\"registry, equals()\",   emf.equals(other));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(\"registry, hashcode()\", emf.hashCode() == other.hashCode());                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Different Locale\n        other = new ExtendedMessageFormat(pattern, Locale.FRANCE, registry);\n        try{ assertFalse(\"locale, equals()\",  emf.equals(other));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"locale, hashcode()\", emf.hashCode() == other.hashCode());         }catch(Throwable __SHOULD_BE_IGNORED){} // same hashcode\n    }",
                "2": "    public void testEqualsHashcode$catena_2() {\n        Map<String, ? extends FormatFactory> registry = Collections.singletonMap(\"testfmt\", new LowerCaseFormatFactory());\n        Map<String, ? extends FormatFactory> otherRegitry = Collections.singletonMap(\"testfmt\", new UpperCaseFormatFactory());\n\n        String pattern = \"Pattern: {0,testfmt}\";\n        ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, Locale.US, registry);\n\n        ExtendedMessageFormat other = null;\n\n        // Same object\n        try{ assertTrue(\"same, equals()\",   emf.equals(emf));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"same, hashcode()\", emf.hashCode() == emf.hashCode());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Equal Object\n        other = new ExtendedMessageFormat(pattern, Locale.US, registry);\n        assertTrue(\"equal, equals()\",   emf.equals(other));                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(\"equal, hashcode()\", emf.hashCode() == other.hashCode());                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Different Class\n        other = new OtherExtendedMessageFormat(pattern, Locale.US, registry);\n        try{ assertFalse(\"class, equals()\",  emf.equals(other));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"class, hashcode()\", emf.hashCode() == other.hashCode());          }catch(Throwable __SHOULD_BE_IGNORED){} // same hashcode\n        \n        // Different pattern\n        other = new ExtendedMessageFormat(\"X\" + pattern, Locale.US, registry);\n        try{ assertFalse(\"pattern, equals()\",   emf.equals(other));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(\"pattern, hashcode()\", emf.hashCode() == other.hashCode());                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Different registry\n        other = new ExtendedMessageFormat(pattern, Locale.US, otherRegitry);\n        try{ assertFalse(\"registry, equals()\",   emf.equals(other));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(\"registry, hashcode()\", emf.hashCode() == other.hashCode());                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Different Locale\n        other = new ExtendedMessageFormat(pattern, Locale.FRANCE, registry);\n        try{ assertFalse(\"locale, equals()\",  emf.equals(other));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"locale, hashcode()\", emf.hashCode() == other.hashCode());         }catch(Throwable __SHOULD_BE_IGNORED){} // same hashcode\n    }",
                "3": "    public void testEqualsHashcode$catena_3() {\n        Map<String, ? extends FormatFactory> registry = Collections.singletonMap(\"testfmt\", new LowerCaseFormatFactory());\n        Map<String, ? extends FormatFactory> otherRegitry = Collections.singletonMap(\"testfmt\", new UpperCaseFormatFactory());\n\n        String pattern = \"Pattern: {0,testfmt}\";\n        ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, Locale.US, registry);\n\n        ExtendedMessageFormat other = null;\n\n        // Same object\n        try{ assertTrue(\"same, equals()\",   emf.equals(emf));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"same, hashcode()\", emf.hashCode() == emf.hashCode());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Equal Object\n        other = new ExtendedMessageFormat(pattern, Locale.US, registry);\n        try{ assertTrue(\"equal, equals()\",   emf.equals(other));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(\"equal, hashcode()\", emf.hashCode() == other.hashCode());                                /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // Different Class\n        other = new OtherExtendedMessageFormat(pattern, Locale.US, registry);\n        try{ assertFalse(\"class, equals()\",  emf.equals(other));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"class, hashcode()\", emf.hashCode() == other.hashCode());          }catch(Throwable __SHOULD_BE_IGNORED){} // same hashcode\n        \n        // Different pattern\n        other = new ExtendedMessageFormat(\"X\" + pattern, Locale.US, registry);\n        try{ assertFalse(\"pattern, equals()\",   emf.equals(other));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(\"pattern, hashcode()\", emf.hashCode() == other.hashCode());                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Different registry\n        other = new ExtendedMessageFormat(pattern, Locale.US, otherRegitry);\n        try{ assertFalse(\"registry, equals()\",   emf.equals(other));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(\"registry, hashcode()\", emf.hashCode() == other.hashCode());                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Different Locale\n        other = new ExtendedMessageFormat(pattern, Locale.FRANCE, registry);\n        try{ assertFalse(\"locale, equals()\",  emf.equals(other));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"locale, hashcode()\", emf.hashCode() == other.hashCode());         }catch(Throwable __SHOULD_BE_IGNORED){} // same hashcode\n    }",
                "4": "    public void testEqualsHashcode$catena_4() {\n        Map<String, ? extends FormatFactory> registry = Collections.singletonMap(\"testfmt\", new LowerCaseFormatFactory());\n        Map<String, ? extends FormatFactory> otherRegitry = Collections.singletonMap(\"testfmt\", new UpperCaseFormatFactory());\n\n        String pattern = \"Pattern: {0,testfmt}\";\n        ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, Locale.US, registry);\n\n        ExtendedMessageFormat other = null;\n\n        // Same object\n        try{ assertTrue(\"same, equals()\",   emf.equals(emf));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"same, hashcode()\", emf.hashCode() == emf.hashCode());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Equal Object\n        other = new ExtendedMessageFormat(pattern, Locale.US, registry);\n        try{ assertTrue(\"equal, equals()\",   emf.equals(other));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"equal, hashcode()\", emf.hashCode() == other.hashCode());                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Different Class\n        other = new OtherExtendedMessageFormat(pattern, Locale.US, registry);\n        assertFalse(\"class, equals()\",  emf.equals(other));                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(\"class, hashcode()\", emf.hashCode() == other.hashCode());          }catch(Throwable __SHOULD_BE_IGNORED){} // same hashcode\n        \n        // Different pattern\n        other = new ExtendedMessageFormat(\"X\" + pattern, Locale.US, registry);\n        try{ assertFalse(\"pattern, equals()\",   emf.equals(other));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(\"pattern, hashcode()\", emf.hashCode() == other.hashCode());                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Different registry\n        other = new ExtendedMessageFormat(pattern, Locale.US, otherRegitry);\n        try{ assertFalse(\"registry, equals()\",   emf.equals(other));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(\"registry, hashcode()\", emf.hashCode() == other.hashCode());                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Different Locale\n        other = new ExtendedMessageFormat(pattern, Locale.FRANCE, registry);\n        try{ assertFalse(\"locale, equals()\",  emf.equals(other));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"locale, hashcode()\", emf.hashCode() == other.hashCode());         }catch(Throwable __SHOULD_BE_IGNORED){} // same hashcode\n    }",
                "5": "    public void testEqualsHashcode$catena_5() {\n        Map<String, ? extends FormatFactory> registry = Collections.singletonMap(\"testfmt\", new LowerCaseFormatFactory());\n        Map<String, ? extends FormatFactory> otherRegitry = Collections.singletonMap(\"testfmt\", new UpperCaseFormatFactory());\n\n        String pattern = \"Pattern: {0,testfmt}\";\n        ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, Locale.US, registry);\n\n        ExtendedMessageFormat other = null;\n\n        // Same object\n        try{ assertTrue(\"same, equals()\",   emf.equals(emf));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"same, hashcode()\", emf.hashCode() == emf.hashCode());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Equal Object\n        other = new ExtendedMessageFormat(pattern, Locale.US, registry);\n        try{ assertTrue(\"equal, equals()\",   emf.equals(other));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"equal, hashcode()\", emf.hashCode() == other.hashCode());                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Different Class\n        other = new OtherExtendedMessageFormat(pattern, Locale.US, registry);\n        try{ assertFalse(\"class, equals()\",  emf.equals(other));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(\"class, hashcode()\", emf.hashCode() == other.hashCode());               /***** ORIGINAL ASSERTION IS HERE *****/ // same hashcode\n        \n        // Different pattern\n        other = new ExtendedMessageFormat(\"X\" + pattern, Locale.US, registry);\n        try{ assertFalse(\"pattern, equals()\",   emf.equals(other));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(\"pattern, hashcode()\", emf.hashCode() == other.hashCode());                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Different registry\n        other = new ExtendedMessageFormat(pattern, Locale.US, otherRegitry);\n        try{ assertFalse(\"registry, equals()\",   emf.equals(other));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(\"registry, hashcode()\", emf.hashCode() == other.hashCode());                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Different Locale\n        other = new ExtendedMessageFormat(pattern, Locale.FRANCE, registry);\n        try{ assertFalse(\"locale, equals()\",  emf.equals(other));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"locale, hashcode()\", emf.hashCode() == other.hashCode());         }catch(Throwable __SHOULD_BE_IGNORED){} // same hashcode\n    }",
                "6": "    public void testEqualsHashcode$catena_6() {\n        Map<String, ? extends FormatFactory> registry = Collections.singletonMap(\"testfmt\", new LowerCaseFormatFactory());\n        Map<String, ? extends FormatFactory> otherRegitry = Collections.singletonMap(\"testfmt\", new UpperCaseFormatFactory());\n\n        String pattern = \"Pattern: {0,testfmt}\";\n        ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, Locale.US, registry);\n\n        ExtendedMessageFormat other = null;\n\n        // Same object\n        try{ assertTrue(\"same, equals()\",   emf.equals(emf));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"same, hashcode()\", emf.hashCode() == emf.hashCode());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Equal Object\n        other = new ExtendedMessageFormat(pattern, Locale.US, registry);\n        try{ assertTrue(\"equal, equals()\",   emf.equals(other));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"equal, hashcode()\", emf.hashCode() == other.hashCode());                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Different Class\n        other = new OtherExtendedMessageFormat(pattern, Locale.US, registry);\n        try{ assertFalse(\"class, equals()\",  emf.equals(other));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"class, hashcode()\", emf.hashCode() == other.hashCode());          }catch(Throwable __SHOULD_BE_IGNORED){} // same hashcode\n        \n        // Different pattern\n        other = new ExtendedMessageFormat(\"X\" + pattern, Locale.US, registry);\n        assertFalse(\"pattern, equals()\",   emf.equals(other));                                              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertFalse(\"pattern, hashcode()\", emf.hashCode() == other.hashCode());                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Different registry\n        other = new ExtendedMessageFormat(pattern, Locale.US, otherRegitry);\n        try{ assertFalse(\"registry, equals()\",   emf.equals(other));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(\"registry, hashcode()\", emf.hashCode() == other.hashCode());                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Different Locale\n        other = new ExtendedMessageFormat(pattern, Locale.FRANCE, registry);\n        try{ assertFalse(\"locale, equals()\",  emf.equals(other));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"locale, hashcode()\", emf.hashCode() == other.hashCode());         }catch(Throwable __SHOULD_BE_IGNORED){} // same hashcode\n    }",
                "7": "    public void testEqualsHashcode$catena_7() {\n        Map<String, ? extends FormatFactory> registry = Collections.singletonMap(\"testfmt\", new LowerCaseFormatFactory());\n        Map<String, ? extends FormatFactory> otherRegitry = Collections.singletonMap(\"testfmt\", new UpperCaseFormatFactory());\n\n        String pattern = \"Pattern: {0,testfmt}\";\n        ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, Locale.US, registry);\n\n        ExtendedMessageFormat other = null;\n\n        // Same object\n        try{ assertTrue(\"same, equals()\",   emf.equals(emf));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"same, hashcode()\", emf.hashCode() == emf.hashCode());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Equal Object\n        other = new ExtendedMessageFormat(pattern, Locale.US, registry);\n        try{ assertTrue(\"equal, equals()\",   emf.equals(other));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"equal, hashcode()\", emf.hashCode() == other.hashCode());                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Different Class\n        other = new OtherExtendedMessageFormat(pattern, Locale.US, registry);\n        try{ assertFalse(\"class, equals()\",  emf.equals(other));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"class, hashcode()\", emf.hashCode() == other.hashCode());          }catch(Throwable __SHOULD_BE_IGNORED){} // same hashcode\n        \n        // Different pattern\n        other = new ExtendedMessageFormat(\"X\" + pattern, Locale.US, registry);\n        try{ assertFalse(\"pattern, equals()\",   emf.equals(other));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertFalse(\"pattern, hashcode()\", emf.hashCode() == other.hashCode());                             /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // Different registry\n        other = new ExtendedMessageFormat(pattern, Locale.US, otherRegitry);\n        try{ assertFalse(\"registry, equals()\",   emf.equals(other));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(\"registry, hashcode()\", emf.hashCode() == other.hashCode());                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Different Locale\n        other = new ExtendedMessageFormat(pattern, Locale.FRANCE, registry);\n        try{ assertFalse(\"locale, equals()\",  emf.equals(other));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"locale, hashcode()\", emf.hashCode() == other.hashCode());         }catch(Throwable __SHOULD_BE_IGNORED){} // same hashcode\n    }",
                "8": "    public void testEqualsHashcode$catena_8() {\n        Map<String, ? extends FormatFactory> registry = Collections.singletonMap(\"testfmt\", new LowerCaseFormatFactory());\n        Map<String, ? extends FormatFactory> otherRegitry = Collections.singletonMap(\"testfmt\", new UpperCaseFormatFactory());\n\n        String pattern = \"Pattern: {0,testfmt}\";\n        ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, Locale.US, registry);\n\n        ExtendedMessageFormat other = null;\n\n        // Same object\n        try{ assertTrue(\"same, equals()\",   emf.equals(emf));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"same, hashcode()\", emf.hashCode() == emf.hashCode());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Equal Object\n        other = new ExtendedMessageFormat(pattern, Locale.US, registry);\n        try{ assertTrue(\"equal, equals()\",   emf.equals(other));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"equal, hashcode()\", emf.hashCode() == other.hashCode());                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Different Class\n        other = new OtherExtendedMessageFormat(pattern, Locale.US, registry);\n        try{ assertFalse(\"class, equals()\",  emf.equals(other));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"class, hashcode()\", emf.hashCode() == other.hashCode());          }catch(Throwable __SHOULD_BE_IGNORED){} // same hashcode\n        \n        // Different pattern\n        other = new ExtendedMessageFormat(\"X\" + pattern, Locale.US, registry);\n        try{ assertFalse(\"pattern, equals()\",   emf.equals(other));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(\"pattern, hashcode()\", emf.hashCode() == other.hashCode());                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Different registry\n        other = new ExtendedMessageFormat(pattern, Locale.US, otherRegitry);\n        assertFalse(\"registry, equals()\",   emf.equals(other));                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertFalse(\"registry, hashcode()\", emf.hashCode() == other.hashCode());                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Different Locale\n        other = new ExtendedMessageFormat(pattern, Locale.FRANCE, registry);\n        try{ assertFalse(\"locale, equals()\",  emf.equals(other));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"locale, hashcode()\", emf.hashCode() == other.hashCode());         }catch(Throwable __SHOULD_BE_IGNORED){} // same hashcode\n    }",
                "9": "    public void testEqualsHashcode$catena_9() {\n        Map<String, ? extends FormatFactory> registry = Collections.singletonMap(\"testfmt\", new LowerCaseFormatFactory());\n        Map<String, ? extends FormatFactory> otherRegitry = Collections.singletonMap(\"testfmt\", new UpperCaseFormatFactory());\n\n        String pattern = \"Pattern: {0,testfmt}\";\n        ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, Locale.US, registry);\n\n        ExtendedMessageFormat other = null;\n\n        // Same object\n        try{ assertTrue(\"same, equals()\",   emf.equals(emf));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"same, hashcode()\", emf.hashCode() == emf.hashCode());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Equal Object\n        other = new ExtendedMessageFormat(pattern, Locale.US, registry);\n        try{ assertTrue(\"equal, equals()\",   emf.equals(other));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"equal, hashcode()\", emf.hashCode() == other.hashCode());                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Different Class\n        other = new OtherExtendedMessageFormat(pattern, Locale.US, registry);\n        try{ assertFalse(\"class, equals()\",  emf.equals(other));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"class, hashcode()\", emf.hashCode() == other.hashCode());          }catch(Throwable __SHOULD_BE_IGNORED){} // same hashcode\n        \n        // Different pattern\n        other = new ExtendedMessageFormat(\"X\" + pattern, Locale.US, registry);\n        try{ assertFalse(\"pattern, equals()\",   emf.equals(other));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(\"pattern, hashcode()\", emf.hashCode() == other.hashCode());                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Different registry\n        other = new ExtendedMessageFormat(pattern, Locale.US, otherRegitry);\n        try{ assertFalse(\"registry, equals()\",   emf.equals(other));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertFalse(\"registry, hashcode()\", emf.hashCode() == other.hashCode());                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // Different Locale\n        other = new ExtendedMessageFormat(pattern, Locale.FRANCE, registry);\n        try{ assertFalse(\"locale, equals()\",  emf.equals(other));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"locale, hashcode()\", emf.hashCode() == other.hashCode());         }catch(Throwable __SHOULD_BE_IGNORED){} // same hashcode\n    }",
                "10": "    public void testEqualsHashcode$catena_10() {\n        Map<String, ? extends FormatFactory> registry = Collections.singletonMap(\"testfmt\", new LowerCaseFormatFactory());\n        Map<String, ? extends FormatFactory> otherRegitry = Collections.singletonMap(\"testfmt\", new UpperCaseFormatFactory());\n\n        String pattern = \"Pattern: {0,testfmt}\";\n        ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, Locale.US, registry);\n\n        ExtendedMessageFormat other = null;\n\n        // Same object\n        try{ assertTrue(\"same, equals()\",   emf.equals(emf));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"same, hashcode()\", emf.hashCode() == emf.hashCode());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Equal Object\n        other = new ExtendedMessageFormat(pattern, Locale.US, registry);\n        try{ assertTrue(\"equal, equals()\",   emf.equals(other));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"equal, hashcode()\", emf.hashCode() == other.hashCode());                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Different Class\n        other = new OtherExtendedMessageFormat(pattern, Locale.US, registry);\n        try{ assertFalse(\"class, equals()\",  emf.equals(other));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"class, hashcode()\", emf.hashCode() == other.hashCode());          }catch(Throwable __SHOULD_BE_IGNORED){} // same hashcode\n        \n        // Different pattern\n        other = new ExtendedMessageFormat(\"X\" + pattern, Locale.US, registry);\n        try{ assertFalse(\"pattern, equals()\",   emf.equals(other));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(\"pattern, hashcode()\", emf.hashCode() == other.hashCode());                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Different registry\n        other = new ExtendedMessageFormat(pattern, Locale.US, otherRegitry);\n        try{ assertFalse(\"registry, equals()\",   emf.equals(other));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(\"registry, hashcode()\", emf.hashCode() == other.hashCode());                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Different Locale\n        other = new ExtendedMessageFormat(pattern, Locale.FRANCE, registry);\n        assertFalse(\"locale, equals()\",  emf.equals(other));                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(\"locale, hashcode()\", emf.hashCode() == other.hashCode());         }catch(Throwable __SHOULD_BE_IGNORED){} // same hashcode\n    }",
                "11": "    public void testEqualsHashcode$catena_11() {\n        Map<String, ? extends FormatFactory> registry = Collections.singletonMap(\"testfmt\", new LowerCaseFormatFactory());\n        Map<String, ? extends FormatFactory> otherRegitry = Collections.singletonMap(\"testfmt\", new UpperCaseFormatFactory());\n\n        String pattern = \"Pattern: {0,testfmt}\";\n        ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, Locale.US, registry);\n\n        ExtendedMessageFormat other = null;\n\n        // Same object\n        try{ assertTrue(\"same, equals()\",   emf.equals(emf));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"same, hashcode()\", emf.hashCode() == emf.hashCode());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Equal Object\n        other = new ExtendedMessageFormat(pattern, Locale.US, registry);\n        try{ assertTrue(\"equal, equals()\",   emf.equals(other));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"equal, hashcode()\", emf.hashCode() == other.hashCode());                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Different Class\n        other = new OtherExtendedMessageFormat(pattern, Locale.US, registry);\n        try{ assertFalse(\"class, equals()\",  emf.equals(other));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"class, hashcode()\", emf.hashCode() == other.hashCode());          }catch(Throwable __SHOULD_BE_IGNORED){} // same hashcode\n        \n        // Different pattern\n        other = new ExtendedMessageFormat(\"X\" + pattern, Locale.US, registry);\n        try{ assertFalse(\"pattern, equals()\",   emf.equals(other));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(\"pattern, hashcode()\", emf.hashCode() == other.hashCode());                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Different registry\n        other = new ExtendedMessageFormat(pattern, Locale.US, otherRegitry);\n        try{ assertFalse(\"registry, equals()\",   emf.equals(other));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(\"registry, hashcode()\", emf.hashCode() == other.hashCode());                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Different Locale\n        other = new ExtendedMessageFormat(pattern, Locale.FRANCE, registry);\n        try{ assertFalse(\"locale, equals()\",  emf.equals(other));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(\"locale, hashcode()\", emf.hashCode() == other.hashCode());              /***** ORIGINAL ASSERTION IS HERE *****/ // same hashcode\n    }"
            }
        }
    },
    "101": {
        "failing_tests": [
            "org.apache.commons.lang3.text.ExtendedMessageFormatTest::testEqualsHashcode$catena_9"
        ]
    }
}