---
Begin generate bug_id: Chart_22
num_of_hunks: 7
timeout for running: 3600
use working dir: ./working/data/Chart_22
Try to checkout Chart_22
build dir: ['./working/data/Chart_22/build', './working/data/Chart_22/build-tests']
init FileManager
trace file: source/org/jfree/data/KeyedObjects2D.java
trying to replace old failing tests
edit: replace from 387 range 28 at tests/org/jfree/data/junit/KeyedObjects2DTests.java
to
    public void testRemoveColumnByKey$catena_0() {
        KeyedObjects2D data = new KeyedObjects2D();
        data.setObject("Obj1", "R1", "C1");
        data.setObject("Obj2", "R2", "C2");
        data.removeColumn("C2");
        assertEquals(1, data.getColumnCount());                                                             /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("Obj1", data.getObject(0, 0));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // try unknown column key
        boolean pass = false;
        try {
            data.removeColumn("XXX");
        }
        catch (UnknownKeyException e) {
            pass = true;
        }
        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // try null column key
        pass = false;
        try {
            data.removeColumn(null);
        }
        catch (IllegalArgumentException e) {
            pass = true;
        }
        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testRemoveColumnByKey$catena_1() {
        KeyedObjects2D data = new KeyedObjects2D();
        data.setObject("Obj1", "R1", "C1");
        data.setObject("Obj2", "R2", "C2");
        data.removeColumn("C2");
        try{ assertEquals(1, data.getColumnCount());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("Obj1", data.getObject(0, 0));                                                         /***** ORIGINAL ASSERTION IS HERE *****/
        
        // try unknown column key
        boolean pass = false;
        try {
            data.removeColumn("XXX");
        }
        catch (UnknownKeyException e) {
            pass = true;
        }
        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // try null column key
        pass = false;
        try {
            data.removeColumn(null);
        }
        catch (IllegalArgumentException e) {
            pass = true;
        }
        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testRemoveColumnByKey$catena_2() {
        KeyedObjects2D data = new KeyedObjects2D();
        data.setObject("Obj1", "R1", "C1");
        data.setObject("Obj2", "R2", "C2");
        data.removeColumn("C2");
        try{ assertEquals(1, data.getColumnCount());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Obj1", data.getObject(0, 0));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // try unknown column key
        boolean pass = false;
        try {
            data.removeColumn("XXX");
        }
        catch (UnknownKeyException e) {
            pass = true;
        }
        assertTrue(pass);                                                                                   /***** ORIGINAL ASSERTION IS HERE *****/
        
        // try null column key
        pass = false;
        try {
            data.removeColumn(null);
        }
        catch (IllegalArgumentException e) {
            pass = true;
        }
        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testRemoveColumnByKey$catena_3() {
        KeyedObjects2D data = new KeyedObjects2D();
        data.setObject("Obj1", "R1", "C1");
        data.setObject("Obj2", "R2", "C2");
        data.removeColumn("C2");
        try{ assertEquals(1, data.getColumnCount());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Obj1", data.getObject(0, 0));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // try unknown column key
        boolean pass = false;
        try {
            data.removeColumn("XXX");
        }
        catch (UnknownKeyException e) {
            pass = true;
        }
        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // try null column key
        pass = false;
        try {
            data.removeColumn(null);
        }
        catch (IllegalArgumentException e) {
            pass = true;
        }
        assertTrue(pass);                                                                                   /***** ORIGINAL ASSERTION IS HERE *****/
    }
edit: replace from 419 range 9 at tests/org/jfree/data/junit/KeyedObjects2DTests.java
to
    public void testRemoveValue$catena_0() {
        KeyedObjects2D data = new KeyedObjects2D();
        data.setObject("Obj1", "R1", "C1");
        data.setObject("Obj2", "R2", "C2");
        data.removeObject("R2", "C2");
        assertEquals(1, data.getRowCount());                                                                /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(1, data.getColumnCount());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Obj1", data.getObject(0, 0));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testRemoveValue$catena_1() {
        KeyedObjects2D data = new KeyedObjects2D();
        data.setObject("Obj1", "R1", "C1");
        data.setObject("Obj2", "R2", "C2");
        data.removeObject("R2", "C2");
        try{ assertEquals(1, data.getRowCount());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(1, data.getColumnCount());                                                             /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("Obj1", data.getObject(0, 0));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testRemoveValue$catena_2() {
        KeyedObjects2D data = new KeyedObjects2D();
        data.setObject("Obj1", "R1", "C1");
        data.setObject("Obj2", "R2", "C2");
        data.removeObject("R2", "C2");
        try{ assertEquals(1, data.getRowCount());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, data.getColumnCount());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("Obj1", data.getObject(0, 0));                                                         /***** ORIGINAL ASSERTION IS HERE *****/
    }
edit: replace from 205 range 46 at tests/org/jfree/data/junit/KeyedObjects2DTests.java
to
    public void testGetValueByKey$catena_0() {
        KeyedObjects2D data = new KeyedObjects2D();
        data.addObject("Obj1", "R1", "C1");
        data.addObject("Obj2", "R2", "C2");
        assertEquals("Obj1", data.getObject("R1", "C1"));                                                   /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("Obj2", data.getObject("R2", "C2"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertNull(data.getObject("R1", "C2"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertNull(data.getObject("R2", "C1"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // check invalid indices
        boolean pass = false;
        try {
            data.getObject("XX", "C1");
        }
        catch (UnknownKeyException e) {
            pass = true;
        }
        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        
        pass = false;
        try {
            data.getObject("R1", "XX");
        }
        catch (UnknownKeyException e) {
            pass = true;
        }
        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}

        pass = false;
        try {
            data.getObject("XX", "C1");
        }
        catch (UnknownKeyException e) {
            pass = true;
        }
        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}

        pass = false;
        try {
            data.getObject("R1", "XX");
        }
        catch (UnknownKeyException e) {
            pass = true;
        }
        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testGetValueByKey$catena_1() {
        KeyedObjects2D data = new KeyedObjects2D();
        data.addObject("Obj1", "R1", "C1");
        data.addObject("Obj2", "R2", "C2");
        try{ assertEquals("Obj1", data.getObject("R1", "C1"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("Obj2", data.getObject("R2", "C2"));                                                   /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertNull(data.getObject("R1", "C2"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertNull(data.getObject("R2", "C1"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // check invalid indices
        boolean pass = false;
        try {
            data.getObject("XX", "C1");
        }
        catch (UnknownKeyException e) {
            pass = true;
        }
        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        
        pass = false;
        try {
            data.getObject("R1", "XX");
        }
        catch (UnknownKeyException e) {
            pass = true;
        }
        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}

        pass = false;
        try {
            data.getObject("XX", "C1");
        }
        catch (UnknownKeyException e) {
            pass = true;
        }
        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}

        pass = false;
        try {
            data.getObject("R1", "XX");
        }
        catch (UnknownKeyException e) {
            pass = true;
        }
        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testGetValueByKey$catena_2() {
        KeyedObjects2D data = new KeyedObjects2D();
        data.addObject("Obj1", "R1", "C1");
        data.addObject("Obj2", "R2", "C2");
        try{ assertEquals("Obj1", data.getObject("R1", "C1"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Obj2", data.getObject("R2", "C2"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        assertNull(data.getObject("R1", "C2"));                                                             /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertNull(data.getObject("R2", "C1"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // check invalid indices
        boolean pass = false;
        try {
            data.getObject("XX", "C1");
        }
        catch (UnknownKeyException e) {
            pass = true;
        }
        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        
        pass = false;
        try {
            data.getObject("R1", "XX");
        }
        catch (UnknownKeyException e) {
            pass = true;
        }
        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}

        pass = false;
        try {
            data.getObject("XX", "C1");
        }
        catch (UnknownKeyException e) {
            pass = true;
        }
        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}

        pass = false;
        try {
            data.getObject("R1", "XX");
        }
        catch (UnknownKeyException e) {
            pass = true;
        }
        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testGetValueByKey$catena_3() {
        KeyedObjects2D data = new KeyedObjects2D();
        data.addObject("Obj1", "R1", "C1");
        data.addObject("Obj2", "R2", "C2");
        try{ assertEquals("Obj1", data.getObject("R1", "C1"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Obj2", data.getObject("R2", "C2"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertNull(data.getObject("R1", "C2"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        assertNull(data.getObject("R2", "C1"));                                                             /***** ORIGINAL ASSERTION IS HERE *****/
        
        // check invalid indices
        boolean pass = false;
        try {
            data.getObject("XX", "C1");
        }
        catch (UnknownKeyException e) {
            pass = true;
        }
        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        
        pass = false;
        try {
            data.getObject("R1", "XX");
        }
        catch (UnknownKeyException e) {
            pass = true;
        }
        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}

        pass = false;
        try {
            data.getObject("XX", "C1");
        }
        catch (UnknownKeyException e) {
            pass = true;
        }
        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}

        pass = false;
        try {
            data.getObject("R1", "XX");
        }
        catch (UnknownKeyException e) {
            pass = true;
        }
        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testGetValueByKey$catena_4() {
        KeyedObjects2D data = new KeyedObjects2D();
        data.addObject("Obj1", "R1", "C1");
        data.addObject("Obj2", "R2", "C2");
        try{ assertEquals("Obj1", data.getObject("R1", "C1"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Obj2", data.getObject("R2", "C2"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertNull(data.getObject("R1", "C2"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertNull(data.getObject("R2", "C1"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // check invalid indices
        boolean pass = false;
        try {
            data.getObject("XX", "C1");
        }
        catch (UnknownKeyException e) {
            pass = true;
        }
        assertTrue(pass);                                                                                   /***** ORIGINAL ASSERTION IS HERE *****/
        
        pass = false;
        try {
            data.getObject("R1", "XX");
        }
        catch (UnknownKeyException e) {
            pass = true;
        }
        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}

        pass = false;
        try {
            data.getObject("XX", "C1");
        }
        catch (UnknownKeyException e) {
            pass = true;
        }
        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}

        pass = false;
        try {
            data.getObject("R1", "XX");
        }
        catch (UnknownKeyException e) {
            pass = true;
        }
        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testGetValueByKey$catena_5() {
        KeyedObjects2D data = new KeyedObjects2D();
        data.addObject("Obj1", "R1", "C1");
        data.addObject("Obj2", "R2", "C2");
        try{ assertEquals("Obj1", data.getObject("R1", "C1"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Obj2", data.getObject("R2", "C2"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertNull(data.getObject("R1", "C2"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertNull(data.getObject("R2", "C1"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // check invalid indices
        boolean pass = false;
        try {
            data.getObject("XX", "C1");
        }
        catch (UnknownKeyException e) {
            pass = true;
        }
        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        
        pass = false;
        try {
            data.getObject("R1", "XX");
        }
        catch (UnknownKeyException e) {
            pass = true;
        }
        assertTrue(pass);                                                                                   /***** ORIGINAL ASSERTION IS HERE *****/

        pass = false;
        try {
            data.getObject("XX", "C1");
        }
        catch (UnknownKeyException e) {
            pass = true;
        }
        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}

        pass = false;
        try {
            data.getObject("R1", "XX");
        }
        catch (UnknownKeyException e) {
            pass = true;
        }
        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testGetValueByKey$catena_6() {
        KeyedObjects2D data = new KeyedObjects2D();
        data.addObject("Obj1", "R1", "C1");
        data.addObject("Obj2", "R2", "C2");
        try{ assertEquals("Obj1", data.getObject("R1", "C1"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Obj2", data.getObject("R2", "C2"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertNull(data.getObject("R1", "C2"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertNull(data.getObject("R2", "C1"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // check invalid indices
        boolean pass = false;
        try {
            data.getObject("XX", "C1");
        }
        catch (UnknownKeyException e) {
            pass = true;
        }
        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        
        pass = false;
        try {
            data.getObject("R1", "XX");
        }
        catch (UnknownKeyException e) {
            pass = true;
        }
        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}

        pass = false;
        try {
            data.getObject("XX", "C1");
        }
        catch (UnknownKeyException e) {
            pass = true;
        }
        assertTrue(pass);                                                                                   /***** ORIGINAL ASSERTION IS HERE *****/

        pass = false;
        try {
            data.getObject("R1", "XX");
        }
        catch (UnknownKeyException e) {
            pass = true;
        }
        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testGetValueByKey$catena_7() {
        KeyedObjects2D data = new KeyedObjects2D();
        data.addObject("Obj1", "R1", "C1");
        data.addObject("Obj2", "R2", "C2");
        try{ assertEquals("Obj1", data.getObject("R1", "C1"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Obj2", data.getObject("R2", "C2"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertNull(data.getObject("R1", "C2"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertNull(data.getObject("R2", "C1"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // check invalid indices
        boolean pass = false;
        try {
            data.getObject("XX", "C1");
        }
        catch (UnknownKeyException e) {
            pass = true;
        }
        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        
        pass = false;
        try {
            data.getObject("R1", "XX");
        }
        catch (UnknownKeyException e) {
            pass = true;
        }
        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}

        pass = false;
        try {
            data.getObject("XX", "C1");
        }
        catch (UnknownKeyException e) {
            pass = true;
        }
        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}

        pass = false;
        try {
            data.getObject("R1", "XX");
        }
        catch (UnknownKeyException e) {
            pass = true;
        }
        assertTrue(pass);                                                                                   /***** ORIGINAL ASSERTION IS HERE *****/
    }
edit: replace from 323 range 28 at tests/org/jfree/data/junit/KeyedObjects2DTests.java
to
    public void testRemoveColumnByIndex$catena_0() {
        KeyedObjects2D data = new KeyedObjects2D();
        data.setObject("Obj1", "R1", "C1");
        data.setObject("Obj2", "R2", "C2");
        data.removeColumn(0);
        assertEquals(1, data.getColumnCount());                                                             /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("Obj2", data.getObject(1, 0));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // try negative column index
        boolean pass = false;
        try {
            data.removeColumn(-1);
        }
        catch (IndexOutOfBoundsException e) {
            pass = true;
        }
        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // try column index too high
        pass = false;
        try {
            data.removeColumn(data.getColumnCount());
        }
        catch (IndexOutOfBoundsException e) {
            pass = true;
        }
        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testRemoveColumnByIndex$catena_1() {
        KeyedObjects2D data = new KeyedObjects2D();
        data.setObject("Obj1", "R1", "C1");
        data.setObject("Obj2", "R2", "C2");
        data.removeColumn(0);
        try{ assertEquals(1, data.getColumnCount());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("Obj2", data.getObject(1, 0));                                                         /***** ORIGINAL ASSERTION IS HERE *****/
        
        // try negative column index
        boolean pass = false;
        try {
            data.removeColumn(-1);
        }
        catch (IndexOutOfBoundsException e) {
            pass = true;
        }
        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // try column index too high
        pass = false;
        try {
            data.removeColumn(data.getColumnCount());
        }
        catch (IndexOutOfBoundsException e) {
            pass = true;
        }
        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testRemoveColumnByIndex$catena_2() {
        KeyedObjects2D data = new KeyedObjects2D();
        data.setObject("Obj1", "R1", "C1");
        data.setObject("Obj2", "R2", "C2");
        data.removeColumn(0);
        try{ assertEquals(1, data.getColumnCount());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Obj2", data.getObject(1, 0));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // try negative column index
        boolean pass = false;
        try {
            data.removeColumn(-1);
        }
        catch (IndexOutOfBoundsException e) {
            pass = true;
        }
        assertTrue(pass);                                                                                   /***** ORIGINAL ASSERTION IS HERE *****/
        
        // try column index too high
        pass = false;
        try {
            data.removeColumn(data.getColumnCount());
        }
        catch (IndexOutOfBoundsException e) {
            pass = true;
        }
        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testRemoveColumnByIndex$catena_3() {
        KeyedObjects2D data = new KeyedObjects2D();
        data.setObject("Obj1", "R1", "C1");
        data.setObject("Obj2", "R2", "C2");
        data.removeColumn(0);
        try{ assertEquals(1, data.getColumnCount());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Obj2", data.getObject(1, 0));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // try negative column index
        boolean pass = false;
        try {
            data.removeColumn(-1);
        }
        catch (IndexOutOfBoundsException e) {
            pass = true;
        }
        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // try column index too high
        pass = false;
        try {
            data.removeColumn(data.getColumnCount());
        }
        catch (IndexOutOfBoundsException e) {
            pass = true;
        }
        assertTrue(pass);                                                                                   /***** ORIGINAL ASSERTION IS HERE *****/
    }
edit: replace from 255 range 32 at tests/org/jfree/data/junit/KeyedObjects2DTests.java
to
    public void testSetObject$catena_0() {
        KeyedObjects2D data = new KeyedObjects2D();
        data.setObject("Obj1", "R1", "C1");
        data.setObject("Obj2", "R2", "C2");
        assertEquals("Obj1", data.getObject("R1", "C1"));                                                   /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("Obj2", data.getObject("R2", "C2"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertNull(data.getObject("R1", "C2"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertNull(data.getObject("R2", "C1"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // confirm overwriting an existing value
        data.setObject("ABC", "R2", "C2");
        try{ assertEquals("ABC", data.getObject("R2", "C2"));                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // try null keys
        boolean pass = false;
        try {
            data.setObject("X", null, "C1");
        }
        catch (IllegalArgumentException e) {
            pass = true;
        }
        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        
        pass = false;
        try {
            data.setObject("X", "R1", null);
        }
        catch (IllegalArgumentException e) {
            pass = true;
        }
        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testSetObject$catena_1() {
        KeyedObjects2D data = new KeyedObjects2D();
        data.setObject("Obj1", "R1", "C1");
        data.setObject("Obj2", "R2", "C2");
        try{ assertEquals("Obj1", data.getObject("R1", "C1"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("Obj2", data.getObject("R2", "C2"));                                                   /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertNull(data.getObject("R1", "C2"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertNull(data.getObject("R2", "C1"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // confirm overwriting an existing value
        data.setObject("ABC", "R2", "C2");
        try{ assertEquals("ABC", data.getObject("R2", "C2"));                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // try null keys
        boolean pass = false;
        try {
            data.setObject("X", null, "C1");
        }
        catch (IllegalArgumentException e) {
            pass = true;
        }
        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        
        pass = false;
        try {
            data.setObject("X", "R1", null);
        }
        catch (IllegalArgumentException e) {
            pass = true;
        }
        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testSetObject$catena_2() {
        KeyedObjects2D data = new KeyedObjects2D();
        data.setObject("Obj1", "R1", "C1");
        data.setObject("Obj2", "R2", "C2");
        try{ assertEquals("Obj1", data.getObject("R1", "C1"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Obj2", data.getObject("R2", "C2"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        assertNull(data.getObject("R1", "C2"));                                                             /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertNull(data.getObject("R2", "C1"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // confirm overwriting an existing value
        data.setObject("ABC", "R2", "C2");
        try{ assertEquals("ABC", data.getObject("R2", "C2"));                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // try null keys
        boolean pass = false;
        try {
            data.setObject("X", null, "C1");
        }
        catch (IllegalArgumentException e) {
            pass = true;
        }
        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        
        pass = false;
        try {
            data.setObject("X", "R1", null);
        }
        catch (IllegalArgumentException e) {
            pass = true;
        }
        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testSetObject$catena_3() {
        KeyedObjects2D data = new KeyedObjects2D();
        data.setObject("Obj1", "R1", "C1");
        data.setObject("Obj2", "R2", "C2");
        try{ assertEquals("Obj1", data.getObject("R1", "C1"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Obj2", data.getObject("R2", "C2"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertNull(data.getObject("R1", "C2"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        assertNull(data.getObject("R2", "C1"));                                                             /***** ORIGINAL ASSERTION IS HERE *****/
        
        // confirm overwriting an existing value
        data.setObject("ABC", "R2", "C2");
        try{ assertEquals("ABC", data.getObject("R2", "C2"));                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // try null keys
        boolean pass = false;
        try {
            data.setObject("X", null, "C1");
        }
        catch (IllegalArgumentException e) {
            pass = true;
        }
        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        
        pass = false;
        try {
            data.setObject("X", "R1", null);
        }
        catch (IllegalArgumentException e) {
            pass = true;
        }
        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testSetObject$catena_4() {
        KeyedObjects2D data = new KeyedObjects2D();
        data.setObject("Obj1", "R1", "C1");
        data.setObject("Obj2", "R2", "C2");
        try{ assertEquals("Obj1", data.getObject("R1", "C1"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Obj2", data.getObject("R2", "C2"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertNull(data.getObject("R1", "C2"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertNull(data.getObject("R2", "C1"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // confirm overwriting an existing value
        data.setObject("ABC", "R2", "C2");
        assertEquals("ABC", data.getObject("R2", "C2"));                                                    /***** ORIGINAL ASSERTION IS HERE *****/
        
        // try null keys
        boolean pass = false;
        try {
            data.setObject("X", null, "C1");
        }
        catch (IllegalArgumentException e) {
            pass = true;
        }
        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        
        pass = false;
        try {
            data.setObject("X", "R1", null);
        }
        catch (IllegalArgumentException e) {
            pass = true;
        }
        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testSetObject$catena_5() {
        KeyedObjects2D data = new KeyedObjects2D();
        data.setObject("Obj1", "R1", "C1");
        data.setObject("Obj2", "R2", "C2");
        try{ assertEquals("Obj1", data.getObject("R1", "C1"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Obj2", data.getObject("R2", "C2"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertNull(data.getObject("R1", "C2"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertNull(data.getObject("R2", "C1"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // confirm overwriting an existing value
        data.setObject("ABC", "R2", "C2");
        try{ assertEquals("ABC", data.getObject("R2", "C2"));                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // try null keys
        boolean pass = false;
        try {
            data.setObject("X", null, "C1");
        }
        catch (IllegalArgumentException e) {
            pass = true;
        }
        assertTrue(pass);                                                                                   /***** ORIGINAL ASSERTION IS HERE *****/
        
        pass = false;
        try {
            data.setObject("X", "R1", null);
        }
        catch (IllegalArgumentException e) {
            pass = true;
        }
        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testSetObject$catena_6() {
        KeyedObjects2D data = new KeyedObjects2D();
        data.setObject("Obj1", "R1", "C1");
        data.setObject("Obj2", "R2", "C2");
        try{ assertEquals("Obj1", data.getObject("R1", "C1"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Obj2", data.getObject("R2", "C2"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertNull(data.getObject("R1", "C2"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertNull(data.getObject("R2", "C1"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // confirm overwriting an existing value
        data.setObject("ABC", "R2", "C2");
        try{ assertEquals("ABC", data.getObject("R2", "C2"));                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // try null keys
        boolean pass = false;
        try {
            data.setObject("X", null, "C1");
        }
        catch (IllegalArgumentException e) {
            pass = true;
        }
        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        
        pass = false;
        try {
            data.setObject("X", "R1", null);
        }
        catch (IllegalArgumentException e) {
            pass = true;
        }
        assertTrue(pass);                                                                                   /***** ORIGINAL ASSERTION IS HERE *****/
    }
edit: replace from 355 range 28 at tests/org/jfree/data/junit/KeyedObjects2DTests.java
to
    public void testRemoveRowByKey$catena_0() {
        KeyedObjects2D data = new KeyedObjects2D();
        data.setObject("Obj1", "R1", "C1");
        data.setObject("Obj2", "R2", "C2");
        data.removeRow("R2");
        assertEquals(1, data.getRowCount());                                                                /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("Obj1", data.getObject(0, 0));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // try unknown row key
        boolean pass = false;
        try {
            data.removeRow("XXX");
        }
        catch (UnknownKeyException e) {
            pass = true;
        }
        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // try null row key
        pass = false;
        try {
            data.removeRow(null);
        }
        catch (IllegalArgumentException e) {
            pass = true;
        }
        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testRemoveRowByKey$catena_1() {
        KeyedObjects2D data = new KeyedObjects2D();
        data.setObject("Obj1", "R1", "C1");
        data.setObject("Obj2", "R2", "C2");
        data.removeRow("R2");
        try{ assertEquals(1, data.getRowCount());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("Obj1", data.getObject(0, 0));                                                         /***** ORIGINAL ASSERTION IS HERE *****/
        
        // try unknown row key
        boolean pass = false;
        try {
            data.removeRow("XXX");
        }
        catch (UnknownKeyException e) {
            pass = true;
        }
        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // try null row key
        pass = false;
        try {
            data.removeRow(null);
        }
        catch (IllegalArgumentException e) {
            pass = true;
        }
        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testRemoveRowByKey$catena_2() {
        KeyedObjects2D data = new KeyedObjects2D();
        data.setObject("Obj1", "R1", "C1");
        data.setObject("Obj2", "R2", "C2");
        data.removeRow("R2");
        try{ assertEquals(1, data.getRowCount());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Obj1", data.getObject(0, 0));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // try unknown row key
        boolean pass = false;
        try {
            data.removeRow("XXX");
        }
        catch (UnknownKeyException e) {
            pass = true;
        }
        assertTrue(pass);                                                                                   /***** ORIGINAL ASSERTION IS HERE *****/
        
        // try null row key
        pass = false;
        try {
            data.removeRow(null);
        }
        catch (IllegalArgumentException e) {
            pass = true;
        }
        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testRemoveRowByKey$catena_3() {
        KeyedObjects2D data = new KeyedObjects2D();
        data.setObject("Obj1", "R1", "C1");
        data.setObject("Obj2", "R2", "C2");
        data.removeRow("R2");
        try{ assertEquals(1, data.getRowCount());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Obj1", data.getObject(0, 0));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // try unknown row key
        boolean pass = false;
        try {
            data.removeRow("XXX");
        }
        catch (UnknownKeyException e) {
            pass = true;
        }
        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        
        // try null row key
        pass = false;
        try {
            data.removeRow(null);
        }
        catch (IllegalArgumentException e) {
            pass = true;
        }
        assertTrue(pass);                                                                                   /***** ORIGINAL ASSERTION IS HERE *****/
    }
trace file: tests/org/jfree/data/junit/KeyedObjects2DTests.java
new test num: 30
ori test num: 0
pattern: 0000000
patches are written to file
running tests...
used time: Finished in 47.39 seconds
Failing tests: 17
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveValue$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testSetObject$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testSetObject$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey$catena_3
processed: 0000000
pattern: 0000001
try to fix hunk: 6
replace from 378 with range 1 to
            int i = rowData.getIndex(columnKey);
            if (i >= 0) {
                rowData.removeValue(i);
            }

patches are written to file
running tests...
used time: Finished in 28.10 seconds
Failing tests: 9
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveValue$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testSetObject$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testSetObject$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey$catena_3
select new bug
Pattern: 0000001
new failing tests:
org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_2
org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_2
org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_1
org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_1
org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_3
org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_0
org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_0
org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_3
Save found bug
processed: 0000001
pattern: 0000010
try to fix hunk: 5
insert before 345 with         if (index < 0) {
            throw new UnknownKeyException("Row key (" + rowKey 
                    + ") not recognised.");
        }

patches are written to file
running tests...
used time: Finished in 28.86 seconds
Failing tests: 13
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveValue$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testSetObject$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testSetObject$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey$catena_3
select new bug
Pattern: 0000010
new failing tests:
org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_1
org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_3
org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_2
org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_0
Save found bug
processed: 0000010
pattern: 0000100
try to fix hunk: 4
insert before 320 with         if (allNull) {
            for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
                 item++) {
                row = (KeyedObjects) this.rows.get(item);
                int columnIndex = row.getIndex(columnKey);
                if (columnIndex >= 0) {
                    row.removeValue(columnIndex);
                }
            }
            this.columnKeys.remove(columnKey);
        }

patches are written to file
running tests...
used time: Finished in 27.17 seconds
Failing tests: 16
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testSetObject$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testSetObject$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey$catena_3
select new bug
Pattern: 0000100
new failing tests:
org.jfree.data.junit.KeyedObjects2DTests::testRemoveValue$catena_1
Save found bug
processed: 0000100
pattern: 0001000
try to fix hunk: 3
insert before 319 with         for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
             item++) {
            row = (KeyedObjects) this.rows.get(item);
            int columnIndex = row.getIndex(columnKey);
            if (columnIndex >= 0 && row.getObject(columnIndex) != null) {
                allNull = false;
                break;
            }
        }

patches are written to file
running tests...
used time: Finished in 27.02 seconds
Failing tests: 17
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveValue$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testSetObject$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testSetObject$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey$catena_3
No new failing tests but only 1 hunk
processed: 0001000
pattern: 0010000
try to fix hunk: 2
insert before 318 with         allNull = true;

patches are written to file
running tests...
used time: Finished in 25.38 seconds
Failing tests: 17
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveValue$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testSetObject$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testSetObject$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey$catena_3
No new failing tests but only 1 hunk
processed: 0010000
pattern: 0100000
try to fix hunk: 1
replace from 233 with range 1 to
        int index = rowData.getIndex(columnKey);
        if (index >= 0) {
            return rowData.getObject(index);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000
pattern: 1000000
try to fix hunk: 0
delete from 231 with range 1
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000000
pattern: 0000011
try to fix hunk: 5
insert before 345 with         if (index < 0) {
            throw new UnknownKeyException("Row key (" + rowKey 
                    + ") not recognised.");
        }

try to fix hunk: 6
replace from 378 with range 1 to
            int i = rowData.getIndex(columnKey);
            if (i >= 0) {
                rowData.removeValue(i);
            }

patches are written to file
running tests...
used time: Finished in 25.38 seconds
Failing tests: 5
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveValue$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testSetObject$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testSetObject$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey$catena_3
Can independently fix []
Could not fix independently
processed: 0000011
pattern: 0000101
try to fix hunk: 4
insert before 320 with         if (allNull) {
            for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
                 item++) {
                row = (KeyedObjects) this.rows.get(item);
                int columnIndex = row.getIndex(columnKey);
                if (columnIndex >= 0) {
                    row.removeValue(columnIndex);
                }
            }
            this.columnKeys.remove(columnKey);
        }

try to fix hunk: 6
replace from 378 with range 1 to
            int i = rowData.getIndex(columnKey);
            if (i >= 0) {
                rowData.removeValue(i);
            }

patches are written to file
running tests...
used time: Finished in 25.47 seconds
Failing tests: 8
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testSetObject$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testSetObject$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey$catena_3
Can independently fix []
Could not fix independently
processed: 0000101
pattern: 0000110
try to fix hunk: 4
insert before 320 with         if (allNull) {
            for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
                 item++) {
                row = (KeyedObjects) this.rows.get(item);
                int columnIndex = row.getIndex(columnKey);
                if (columnIndex >= 0) {
                    row.removeValue(columnIndex);
                }
            }
            this.columnKeys.remove(columnKey);
        }

try to fix hunk: 5
insert before 345 with         if (index < 0) {
            throw new UnknownKeyException("Row key (" + rowKey 
                    + ") not recognised.");
        }

patches are written to file
running tests...
used time: Finished in 25.38 seconds
Failing tests: 12
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testSetObject$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testSetObject$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey$catena_3
Can independently fix []
Could not fix independently
processed: 0000110
pattern: 0001001
try to fix hunk: 3
insert before 319 with         for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
             item++) {
            row = (KeyedObjects) this.rows.get(item);
            int columnIndex = row.getIndex(columnKey);
            if (columnIndex >= 0 && row.getObject(columnIndex) != null) {
                allNull = false;
                break;
            }
        }

try to fix hunk: 6
replace from 378 with range 1 to
            int i = rowData.getIndex(columnKey);
            if (i >= 0) {
                rowData.removeValue(i);
            }

patches are written to file
running tests...
used time: Finished in 28.72 seconds
Failing tests: 9
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveValue$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testSetObject$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testSetObject$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey$catena_3
Can independently fix []
Could not fix independently
processed: 0001001
pattern: 0001010
try to fix hunk: 3
insert before 319 with         for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
             item++) {
            row = (KeyedObjects) this.rows.get(item);
            int columnIndex = row.getIndex(columnKey);
            if (columnIndex >= 0 && row.getObject(columnIndex) != null) {
                allNull = false;
                break;
            }
        }

try to fix hunk: 5
insert before 345 with         if (index < 0) {
            throw new UnknownKeyException("Row key (" + rowKey 
                    + ") not recognised.");
        }

patches are written to file
running tests...
used time: Finished in 27.59 seconds
Failing tests: 13
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveValue$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testSetObject$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testSetObject$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey$catena_3
Can independently fix []
Could not fix independently
processed: 0001010
pattern: 0001100
try to fix hunk: 3
insert before 319 with         for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
             item++) {
            row = (KeyedObjects) this.rows.get(item);
            int columnIndex = row.getIndex(columnKey);
            if (columnIndex >= 0 && row.getObject(columnIndex) != null) {
                allNull = false;
                break;
            }
        }

try to fix hunk: 4
insert before 320 with         if (allNull) {
            for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
                 item++) {
                row = (KeyedObjects) this.rows.get(item);
                int columnIndex = row.getIndex(columnKey);
                if (columnIndex >= 0) {
                    row.removeValue(columnIndex);
                }
            }
            this.columnKeys.remove(columnKey);
        }

patches are written to file
running tests...
used time: Finished in 27.71 seconds
Failing tests: 16
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testSetObject$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testSetObject$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey$catena_3
Can independently fix []
Could not fix independently
processed: 0001100
pattern: 0010001
try to fix hunk: 2
insert before 318 with         allNull = true;

try to fix hunk: 6
replace from 378 with range 1 to
            int i = rowData.getIndex(columnKey);
            if (i >= 0) {
                rowData.removeValue(i);
            }

patches are written to file
running tests...
used time: Finished in 27.90 seconds
Failing tests: 9
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveValue$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testSetObject$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testSetObject$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey$catena_3
Can independently fix []
Could not fix independently
processed: 0010001
pattern: 0010010
try to fix hunk: 2
insert before 318 with         allNull = true;

try to fix hunk: 5
insert before 345 with         if (index < 0) {
            throw new UnknownKeyException("Row key (" + rowKey 
                    + ") not recognised.");
        }

patches are written to file
running tests...
used time: Finished in 29.75 seconds
Failing tests: 13
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveValue$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testSetObject$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testSetObject$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey$catena_3
Can independently fix []
Could not fix independently
processed: 0010010
pattern: 0010100
try to fix hunk: 2
insert before 318 with         allNull = true;

try to fix hunk: 4
insert before 320 with         if (allNull) {
            for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
                 item++) {
                row = (KeyedObjects) this.rows.get(item);
                int columnIndex = row.getIndex(columnKey);
                if (columnIndex >= 0) {
                    row.removeValue(columnIndex);
                }
            }
            this.columnKeys.remove(columnKey);
        }

patches are written to file
running tests...
used time: Finished in 27.11 seconds
Failing tests: 16
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testSetObject$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testSetObject$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey$catena_3
Can independently fix []
Could not fix independently
processed: 0010100
pattern: 0011000
try to fix hunk: 2
insert before 318 with         allNull = true;

try to fix hunk: 3
insert before 319 with         for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
             item++) {
            row = (KeyedObjects) this.rows.get(item);
            int columnIndex = row.getIndex(columnKey);
            if (columnIndex >= 0 && row.getObject(columnIndex) != null) {
                allNull = false;
                break;
            }
        }

patches are written to file
running tests...
used time: Finished in 24.59 seconds
Failing tests: 17
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveValue$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testSetObject$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testSetObject$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey$catena_3
Can independently fix []
Could not fix independently
processed: 0011000
pattern: 0100001
try to fix hunk: 1
replace from 233 with range 1 to
        int index = rowData.getIndex(columnKey);
        if (index >= 0) {
            return rowData.getObject(index);

try to fix hunk: 6
replace from 378 with range 1 to
            int i = rowData.getIndex(columnKey);
            if (i >= 0) {
                rowData.removeValue(i);
            }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100001
pattern: 0100010
try to fix hunk: 1
replace from 233 with range 1 to
        int index = rowData.getIndex(columnKey);
        if (index >= 0) {
            return rowData.getObject(index);

try to fix hunk: 5
insert before 345 with         if (index < 0) {
            throw new UnknownKeyException("Row key (" + rowKey 
                    + ") not recognised.");
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100010
pattern: 0100100
try to fix hunk: 1
replace from 233 with range 1 to
        int index = rowData.getIndex(columnKey);
        if (index >= 0) {
            return rowData.getObject(index);

try to fix hunk: 4
insert before 320 with         if (allNull) {
            for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
                 item++) {
                row = (KeyedObjects) this.rows.get(item);
                int columnIndex = row.getIndex(columnKey);
                if (columnIndex >= 0) {
                    row.removeValue(columnIndex);
                }
            }
            this.columnKeys.remove(columnKey);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100100
pattern: 0101000
try to fix hunk: 1
replace from 233 with range 1 to
        int index = rowData.getIndex(columnKey);
        if (index >= 0) {
            return rowData.getObject(index);

try to fix hunk: 3
insert before 319 with         for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
             item++) {
            row = (KeyedObjects) this.rows.get(item);
            int columnIndex = row.getIndex(columnKey);
            if (columnIndex >= 0 && row.getObject(columnIndex) != null) {
                allNull = false;
                break;
            }
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0101000
pattern: 0110000
try to fix hunk: 1
replace from 233 with range 1 to
        int index = rowData.getIndex(columnKey);
        if (index >= 0) {
            return rowData.getObject(index);

try to fix hunk: 2
insert before 318 with         allNull = true;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0110000
pattern: 1000001
try to fix hunk: 0
delete from 231 with range 1
try to fix hunk: 6
replace from 378 with range 1 to
            int i = rowData.getIndex(columnKey);
            if (i >= 0) {
                rowData.removeValue(i);
            }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000001
pattern: 1000010
try to fix hunk: 0
delete from 231 with range 1
try to fix hunk: 5
insert before 345 with         if (index < 0) {
            throw new UnknownKeyException("Row key (" + rowKey 
                    + ") not recognised.");
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000010
pattern: 1000100
try to fix hunk: 0
delete from 231 with range 1
try to fix hunk: 4
insert before 320 with         if (allNull) {
            for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
                 item++) {
                row = (KeyedObjects) this.rows.get(item);
                int columnIndex = row.getIndex(columnKey);
                if (columnIndex >= 0) {
                    row.removeValue(columnIndex);
                }
            }
            this.columnKeys.remove(columnKey);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000100
pattern: 1001000
try to fix hunk: 0
delete from 231 with range 1
try to fix hunk: 3
insert before 319 with         for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
             item++) {
            row = (KeyedObjects) this.rows.get(item);
            int columnIndex = row.getIndex(columnKey);
            if (columnIndex >= 0 && row.getObject(columnIndex) != null) {
                allNull = false;
                break;
            }
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1001000
pattern: 1010000
try to fix hunk: 0
delete from 231 with range 1
try to fix hunk: 2
insert before 318 with         allNull = true;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1010000
pattern: 1100000
try to fix hunk: 0
delete from 231 with range 1
try to fix hunk: 1
replace from 233 with range 1 to
        int index = rowData.getIndex(columnKey);
        if (index >= 0) {
            return rowData.getObject(index);

patches are written to file
running tests...
used time: Finished in 26.34 seconds
Failing tests: 13
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveValue$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_3
Can independently fix ['org.jfree.data.junit.KeyedObjects2DTests::testSetObject$catena_3', 'org.jfree.data.junit.KeyedObjects2DTests::testSetObject$catena_2', 'org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey$catena_3', 'org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey$catena_2']
select new bug
Pattern: 1100000
new failing tests:
org.jfree.data.junit.KeyedObjects2DTests::testSetObject$catena_3
org.jfree.data.junit.KeyedObjects2DTests::testSetObject$catena_2
org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey$catena_3
org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey$catena_2
Save found bug
processed: 1100000
pattern: 0000111
try to fix hunk: 4
insert before 320 with         if (allNull) {
            for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
                 item++) {
                row = (KeyedObjects) this.rows.get(item);
                int columnIndex = row.getIndex(columnKey);
                if (columnIndex >= 0) {
                    row.removeValue(columnIndex);
                }
            }
            this.columnKeys.remove(columnKey);
        }

try to fix hunk: 5
insert before 345 with         if (index < 0) {
            throw new UnknownKeyException("Row key (" + rowKey 
                    + ") not recognised.");
        }

try to fix hunk: 6
replace from 378 with range 1 to
            int i = rowData.getIndex(columnKey);
            if (i >= 0) {
                rowData.removeValue(i);
            }

patches are written to file
running tests...
used time: Finished in 26.32 seconds
Failing tests: 4
	org.jfree.data.junit.KeyedObjects2DTests::testSetObject$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testSetObject$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey$catena_3
Can independently fix []
Could not fix independently
processed: 0000111
pattern: 0001011
try to fix hunk: 3
insert before 319 with         for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
             item++) {
            row = (KeyedObjects) this.rows.get(item);
            int columnIndex = row.getIndex(columnKey);
            if (columnIndex >= 0 && row.getObject(columnIndex) != null) {
                allNull = false;
                break;
            }
        }

try to fix hunk: 5
insert before 345 with         if (index < 0) {
            throw new UnknownKeyException("Row key (" + rowKey 
                    + ") not recognised.");
        }

try to fix hunk: 6
replace from 378 with range 1 to
            int i = rowData.getIndex(columnKey);
            if (i >= 0) {
                rowData.removeValue(i);
            }

patches are written to file
running tests...
used time: Finished in 23.73 seconds
Failing tests: 5
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveValue$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testSetObject$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testSetObject$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey$catena_3
Can independently fix []
Could not fix independently
processed: 0001011
pattern: 0001101
try to fix hunk: 3
insert before 319 with         for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
             item++) {
            row = (KeyedObjects) this.rows.get(item);
            int columnIndex = row.getIndex(columnKey);
            if (columnIndex >= 0 && row.getObject(columnIndex) != null) {
                allNull = false;
                break;
            }
        }

try to fix hunk: 4
insert before 320 with         if (allNull) {
            for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
                 item++) {
                row = (KeyedObjects) this.rows.get(item);
                int columnIndex = row.getIndex(columnKey);
                if (columnIndex >= 0) {
                    row.removeValue(columnIndex);
                }
            }
            this.columnKeys.remove(columnKey);
        }

try to fix hunk: 6
replace from 378 with range 1 to
            int i = rowData.getIndex(columnKey);
            if (i >= 0) {
                rowData.removeValue(i);
            }

patches are written to file
running tests...
used time: Finished in 28.17 seconds
Failing tests: 8
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testSetObject$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testSetObject$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey$catena_3
Can independently fix []
Could not fix independently
processed: 0001101
pattern: 0001110
try to fix hunk: 3
insert before 319 with         for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
             item++) {
            row = (KeyedObjects) this.rows.get(item);
            int columnIndex = row.getIndex(columnKey);
            if (columnIndex >= 0 && row.getObject(columnIndex) != null) {
                allNull = false;
                break;
            }
        }

try to fix hunk: 4
insert before 320 with         if (allNull) {
            for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
                 item++) {
                row = (KeyedObjects) this.rows.get(item);
                int columnIndex = row.getIndex(columnKey);
                if (columnIndex >= 0) {
                    row.removeValue(columnIndex);
                }
            }
            this.columnKeys.remove(columnKey);
        }

try to fix hunk: 5
insert before 345 with         if (index < 0) {
            throw new UnknownKeyException("Row key (" + rowKey 
                    + ") not recognised.");
        }

patches are written to file
running tests...
used time: Finished in 24.69 seconds
Failing tests: 12
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testSetObject$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testSetObject$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey$catena_3
Can independently fix []
Could not fix independently
processed: 0001110
pattern: 0010011
try to fix hunk: 2
insert before 318 with         allNull = true;

try to fix hunk: 5
insert before 345 with         if (index < 0) {
            throw new UnknownKeyException("Row key (" + rowKey 
                    + ") not recognised.");
        }

try to fix hunk: 6
replace from 378 with range 1 to
            int i = rowData.getIndex(columnKey);
            if (i >= 0) {
                rowData.removeValue(i);
            }

patches are written to file
running tests...
used time: Finished in 25.86 seconds
Failing tests: 5
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveValue$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testSetObject$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testSetObject$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey$catena_3
Can independently fix []
Could not fix independently
processed: 0010011
pattern: 0010101
try to fix hunk: 2
insert before 318 with         allNull = true;

try to fix hunk: 4
insert before 320 with         if (allNull) {
            for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
                 item++) {
                row = (KeyedObjects) this.rows.get(item);
                int columnIndex = row.getIndex(columnKey);
                if (columnIndex >= 0) {
                    row.removeValue(columnIndex);
                }
            }
            this.columnKeys.remove(columnKey);
        }

try to fix hunk: 6
replace from 378 with range 1 to
            int i = rowData.getIndex(columnKey);
            if (i >= 0) {
                rowData.removeValue(i);
            }

patches are written to file
running tests...
used time: Finished in 25.51 seconds
Failing tests: 8
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testSetObject$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testSetObject$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey$catena_3
Can independently fix []
Could not fix independently
processed: 0010101
pattern: 0010110
try to fix hunk: 2
insert before 318 with         allNull = true;

try to fix hunk: 4
insert before 320 with         if (allNull) {
            for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
                 item++) {
                row = (KeyedObjects) this.rows.get(item);
                int columnIndex = row.getIndex(columnKey);
                if (columnIndex >= 0) {
                    row.removeValue(columnIndex);
                }
            }
            this.columnKeys.remove(columnKey);
        }

try to fix hunk: 5
insert before 345 with         if (index < 0) {
            throw new UnknownKeyException("Row key (" + rowKey 
                    + ") not recognised.");
        }

patches are written to file
running tests...
used time: Finished in 24.15 seconds
Failing tests: 12
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testSetObject$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testSetObject$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey$catena_3
Can independently fix []
Could not fix independently
processed: 0010110
pattern: 0011001
try to fix hunk: 2
insert before 318 with         allNull = true;

try to fix hunk: 3
insert before 319 with         for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
             item++) {
            row = (KeyedObjects) this.rows.get(item);
            int columnIndex = row.getIndex(columnKey);
            if (columnIndex >= 0 && row.getObject(columnIndex) != null) {
                allNull = false;
                break;
            }
        }

try to fix hunk: 6
replace from 378 with range 1 to
            int i = rowData.getIndex(columnKey);
            if (i >= 0) {
                rowData.removeValue(i);
            }

patches are written to file
running tests...
used time: Finished in 28.69 seconds
Failing tests: 9
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveValue$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testSetObject$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testSetObject$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey$catena_3
Can independently fix []
Could not fix independently
processed: 0011001
pattern: 0011010
try to fix hunk: 2
insert before 318 with         allNull = true;

try to fix hunk: 3
insert before 319 with         for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
             item++) {
            row = (KeyedObjects) this.rows.get(item);
            int columnIndex = row.getIndex(columnKey);
            if (columnIndex >= 0 && row.getObject(columnIndex) != null) {
                allNull = false;
                break;
            }
        }

try to fix hunk: 5
insert before 345 with         if (index < 0) {
            throw new UnknownKeyException("Row key (" + rowKey 
                    + ") not recognised.");
        }

patches are written to file
running tests...
used time: Finished in 30.58 seconds
Failing tests: 13
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveValue$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testSetObject$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testSetObject$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey$catena_3
Can independently fix []
Could not fix independently
processed: 0011010
pattern: 0011100
try to fix hunk: 2
insert before 318 with         allNull = true;

try to fix hunk: 3
insert before 319 with         for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
             item++) {
            row = (KeyedObjects) this.rows.get(item);
            int columnIndex = row.getIndex(columnKey);
            if (columnIndex >= 0 && row.getObject(columnIndex) != null) {
                allNull = false;
                break;
            }
        }

try to fix hunk: 4
insert before 320 with         if (allNull) {
            for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
                 item++) {
                row = (KeyedObjects) this.rows.get(item);
                int columnIndex = row.getIndex(columnKey);
                if (columnIndex >= 0) {
                    row.removeValue(columnIndex);
                }
            }
            this.columnKeys.remove(columnKey);
        }

patches are written to file
running tests...
used time: Finished in 26.09 seconds
Failing tests: 16
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testSetObject$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testSetObject$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey$catena_3
Can independently fix []
Could not fix independently
processed: 0011100
pattern: 0100011
try to fix hunk: 1
replace from 233 with range 1 to
        int index = rowData.getIndex(columnKey);
        if (index >= 0) {
            return rowData.getObject(index);

try to fix hunk: 5
insert before 345 with         if (index < 0) {
            throw new UnknownKeyException("Row key (" + rowKey 
                    + ") not recognised.");
        }

try to fix hunk: 6
replace from 378 with range 1 to
            int i = rowData.getIndex(columnKey);
            if (i >= 0) {
                rowData.removeValue(i);
            }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100011
pattern: 0100101
try to fix hunk: 1
replace from 233 with range 1 to
        int index = rowData.getIndex(columnKey);
        if (index >= 0) {
            return rowData.getObject(index);

try to fix hunk: 4
insert before 320 with         if (allNull) {
            for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
                 item++) {
                row = (KeyedObjects) this.rows.get(item);
                int columnIndex = row.getIndex(columnKey);
                if (columnIndex >= 0) {
                    row.removeValue(columnIndex);
                }
            }
            this.columnKeys.remove(columnKey);
        }

try to fix hunk: 6
replace from 378 with range 1 to
            int i = rowData.getIndex(columnKey);
            if (i >= 0) {
                rowData.removeValue(i);
            }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100101
pattern: 0100110
try to fix hunk: 1
replace from 233 with range 1 to
        int index = rowData.getIndex(columnKey);
        if (index >= 0) {
            return rowData.getObject(index);

try to fix hunk: 4
insert before 320 with         if (allNull) {
            for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
                 item++) {
                row = (KeyedObjects) this.rows.get(item);
                int columnIndex = row.getIndex(columnKey);
                if (columnIndex >= 0) {
                    row.removeValue(columnIndex);
                }
            }
            this.columnKeys.remove(columnKey);
        }

try to fix hunk: 5
insert before 345 with         if (index < 0) {
            throw new UnknownKeyException("Row key (" + rowKey 
                    + ") not recognised.");
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100110
pattern: 0101001
try to fix hunk: 1
replace from 233 with range 1 to
        int index = rowData.getIndex(columnKey);
        if (index >= 0) {
            return rowData.getObject(index);

try to fix hunk: 3
insert before 319 with         for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
             item++) {
            row = (KeyedObjects) this.rows.get(item);
            int columnIndex = row.getIndex(columnKey);
            if (columnIndex >= 0 && row.getObject(columnIndex) != null) {
                allNull = false;
                break;
            }
        }

try to fix hunk: 6
replace from 378 with range 1 to
            int i = rowData.getIndex(columnKey);
            if (i >= 0) {
                rowData.removeValue(i);
            }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0101001
pattern: 0101010
try to fix hunk: 1
replace from 233 with range 1 to
        int index = rowData.getIndex(columnKey);
        if (index >= 0) {
            return rowData.getObject(index);

try to fix hunk: 3
insert before 319 with         for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
             item++) {
            row = (KeyedObjects) this.rows.get(item);
            int columnIndex = row.getIndex(columnKey);
            if (columnIndex >= 0 && row.getObject(columnIndex) != null) {
                allNull = false;
                break;
            }
        }

try to fix hunk: 5
insert before 345 with         if (index < 0) {
            throw new UnknownKeyException("Row key (" + rowKey 
                    + ") not recognised.");
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0101010
pattern: 0101100
try to fix hunk: 1
replace from 233 with range 1 to
        int index = rowData.getIndex(columnKey);
        if (index >= 0) {
            return rowData.getObject(index);

try to fix hunk: 3
insert before 319 with         for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
             item++) {
            row = (KeyedObjects) this.rows.get(item);
            int columnIndex = row.getIndex(columnKey);
            if (columnIndex >= 0 && row.getObject(columnIndex) != null) {
                allNull = false;
                break;
            }
        }

try to fix hunk: 4
insert before 320 with         if (allNull) {
            for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
                 item++) {
                row = (KeyedObjects) this.rows.get(item);
                int columnIndex = row.getIndex(columnKey);
                if (columnIndex >= 0) {
                    row.removeValue(columnIndex);
                }
            }
            this.columnKeys.remove(columnKey);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0101100
pattern: 0110001
try to fix hunk: 1
replace from 233 with range 1 to
        int index = rowData.getIndex(columnKey);
        if (index >= 0) {
            return rowData.getObject(index);

try to fix hunk: 2
insert before 318 with         allNull = true;

try to fix hunk: 6
replace from 378 with range 1 to
            int i = rowData.getIndex(columnKey);
            if (i >= 0) {
                rowData.removeValue(i);
            }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0110001
pattern: 0110010
try to fix hunk: 1
replace from 233 with range 1 to
        int index = rowData.getIndex(columnKey);
        if (index >= 0) {
            return rowData.getObject(index);

try to fix hunk: 2
insert before 318 with         allNull = true;

try to fix hunk: 5
insert before 345 with         if (index < 0) {
            throw new UnknownKeyException("Row key (" + rowKey 
                    + ") not recognised.");
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0110010
pattern: 0110100
try to fix hunk: 1
replace from 233 with range 1 to
        int index = rowData.getIndex(columnKey);
        if (index >= 0) {
            return rowData.getObject(index);

try to fix hunk: 2
insert before 318 with         allNull = true;

try to fix hunk: 4
insert before 320 with         if (allNull) {
            for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
                 item++) {
                row = (KeyedObjects) this.rows.get(item);
                int columnIndex = row.getIndex(columnKey);
                if (columnIndex >= 0) {
                    row.removeValue(columnIndex);
                }
            }
            this.columnKeys.remove(columnKey);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0110100
pattern: 0111000
try to fix hunk: 1
replace from 233 with range 1 to
        int index = rowData.getIndex(columnKey);
        if (index >= 0) {
            return rowData.getObject(index);

try to fix hunk: 2
insert before 318 with         allNull = true;

try to fix hunk: 3
insert before 319 with         for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
             item++) {
            row = (KeyedObjects) this.rows.get(item);
            int columnIndex = row.getIndex(columnKey);
            if (columnIndex >= 0 && row.getObject(columnIndex) != null) {
                allNull = false;
                break;
            }
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0111000
pattern: 1000011
try to fix hunk: 0
delete from 231 with range 1
try to fix hunk: 5
insert before 345 with         if (index < 0) {
            throw new UnknownKeyException("Row key (" + rowKey 
                    + ") not recognised.");
        }

try to fix hunk: 6
replace from 378 with range 1 to
            int i = rowData.getIndex(columnKey);
            if (i >= 0) {
                rowData.removeValue(i);
            }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000011
pattern: 1000101
try to fix hunk: 0
delete from 231 with range 1
try to fix hunk: 4
insert before 320 with         if (allNull) {
            for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
                 item++) {
                row = (KeyedObjects) this.rows.get(item);
                int columnIndex = row.getIndex(columnKey);
                if (columnIndex >= 0) {
                    row.removeValue(columnIndex);
                }
            }
            this.columnKeys.remove(columnKey);
        }

try to fix hunk: 6
replace from 378 with range 1 to
            int i = rowData.getIndex(columnKey);
            if (i >= 0) {
                rowData.removeValue(i);
            }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000101
pattern: 1000110
try to fix hunk: 0
delete from 231 with range 1
try to fix hunk: 4
insert before 320 with         if (allNull) {
            for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
                 item++) {
                row = (KeyedObjects) this.rows.get(item);
                int columnIndex = row.getIndex(columnKey);
                if (columnIndex >= 0) {
                    row.removeValue(columnIndex);
                }
            }
            this.columnKeys.remove(columnKey);
        }

try to fix hunk: 5
insert before 345 with         if (index < 0) {
            throw new UnknownKeyException("Row key (" + rowKey 
                    + ") not recognised.");
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000110
pattern: 1001001
try to fix hunk: 0
delete from 231 with range 1
try to fix hunk: 3
insert before 319 with         for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
             item++) {
            row = (KeyedObjects) this.rows.get(item);
            int columnIndex = row.getIndex(columnKey);
            if (columnIndex >= 0 && row.getObject(columnIndex) != null) {
                allNull = false;
                break;
            }
        }

try to fix hunk: 6
replace from 378 with range 1 to
            int i = rowData.getIndex(columnKey);
            if (i >= 0) {
                rowData.removeValue(i);
            }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1001001
pattern: 1001010
try to fix hunk: 0
delete from 231 with range 1
try to fix hunk: 3
insert before 319 with         for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
             item++) {
            row = (KeyedObjects) this.rows.get(item);
            int columnIndex = row.getIndex(columnKey);
            if (columnIndex >= 0 && row.getObject(columnIndex) != null) {
                allNull = false;
                break;
            }
        }

try to fix hunk: 5
insert before 345 with         if (index < 0) {
            throw new UnknownKeyException("Row key (" + rowKey 
                    + ") not recognised.");
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1001010
pattern: 1001100
try to fix hunk: 0
delete from 231 with range 1
try to fix hunk: 3
insert before 319 with         for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
             item++) {
            row = (KeyedObjects) this.rows.get(item);
            int columnIndex = row.getIndex(columnKey);
            if (columnIndex >= 0 && row.getObject(columnIndex) != null) {
                allNull = false;
                break;
            }
        }

try to fix hunk: 4
insert before 320 with         if (allNull) {
            for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
                 item++) {
                row = (KeyedObjects) this.rows.get(item);
                int columnIndex = row.getIndex(columnKey);
                if (columnIndex >= 0) {
                    row.removeValue(columnIndex);
                }
            }
            this.columnKeys.remove(columnKey);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1001100
pattern: 1010001
try to fix hunk: 0
delete from 231 with range 1
try to fix hunk: 2
insert before 318 with         allNull = true;

try to fix hunk: 6
replace from 378 with range 1 to
            int i = rowData.getIndex(columnKey);
            if (i >= 0) {
                rowData.removeValue(i);
            }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1010001
pattern: 1010010
try to fix hunk: 0
delete from 231 with range 1
try to fix hunk: 2
insert before 318 with         allNull = true;

try to fix hunk: 5
insert before 345 with         if (index < 0) {
            throw new UnknownKeyException("Row key (" + rowKey 
                    + ") not recognised.");
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1010010
pattern: 1010100
try to fix hunk: 0
delete from 231 with range 1
try to fix hunk: 2
insert before 318 with         allNull = true;

try to fix hunk: 4
insert before 320 with         if (allNull) {
            for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
                 item++) {
                row = (KeyedObjects) this.rows.get(item);
                int columnIndex = row.getIndex(columnKey);
                if (columnIndex >= 0) {
                    row.removeValue(columnIndex);
                }
            }
            this.columnKeys.remove(columnKey);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1010100
pattern: 1011000
try to fix hunk: 0
delete from 231 with range 1
try to fix hunk: 2
insert before 318 with         allNull = true;

try to fix hunk: 3
insert before 319 with         for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
             item++) {
            row = (KeyedObjects) this.rows.get(item);
            int columnIndex = row.getIndex(columnKey);
            if (columnIndex >= 0 && row.getObject(columnIndex) != null) {
                allNull = false;
                break;
            }
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1011000
pattern: 1100001
try to fix hunk: 0
delete from 231 with range 1
try to fix hunk: 1
replace from 233 with range 1 to
        int index = rowData.getIndex(columnKey);
        if (index >= 0) {
            return rowData.getObject(index);

try to fix hunk: 6
replace from 378 with range 1 to
            int i = rowData.getIndex(columnKey);
            if (i >= 0) {
                rowData.removeValue(i);
            }

patches are written to file
running tests...
used time: Finished in 27.01 seconds
Failing tests: 5
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveValue$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_3
Can independently fix []
Could not fix independently
processed: 1100001
pattern: 1100010
try to fix hunk: 0
delete from 231 with range 1
try to fix hunk: 1
replace from 233 with range 1 to
        int index = rowData.getIndex(columnKey);
        if (index >= 0) {
            return rowData.getObject(index);

try to fix hunk: 5
insert before 345 with         if (index < 0) {
            throw new UnknownKeyException("Row key (" + rowKey 
                    + ") not recognised.");
        }

patches are written to file
running tests...
used time: Finished in 27.96 seconds
Failing tests: 9
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveValue$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_3
Can independently fix []
Could not fix independently
processed: 1100010
pattern: 1100100
try to fix hunk: 0
delete from 231 with range 1
try to fix hunk: 1
replace from 233 with range 1 to
        int index = rowData.getIndex(columnKey);
        if (index >= 0) {
            return rowData.getObject(index);

try to fix hunk: 4
insert before 320 with         if (allNull) {
            for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
                 item++) {
                row = (KeyedObjects) this.rows.get(item);
                int columnIndex = row.getIndex(columnKey);
                if (columnIndex >= 0) {
                    row.removeValue(columnIndex);
                }
            }
            this.columnKeys.remove(columnKey);
        }

patches are written to file
running tests...
used time: Finished in 29.91 seconds
Failing tests: 12
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_3
Can independently fix []
Could not fix independently
processed: 1100100
pattern: 1101000
try to fix hunk: 0
delete from 231 with range 1
try to fix hunk: 1
replace from 233 with range 1 to
        int index = rowData.getIndex(columnKey);
        if (index >= 0) {
            return rowData.getObject(index);

try to fix hunk: 3
insert before 319 with         for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
             item++) {
            row = (KeyedObjects) this.rows.get(item);
            int columnIndex = row.getIndex(columnKey);
            if (columnIndex >= 0 && row.getObject(columnIndex) != null) {
                allNull = false;
                break;
            }
        }

patches are written to file
running tests...
used time: Finished in 27.07 seconds
Failing tests: 13
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveValue$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_3
Can independently fix []
Could not fix independently
processed: 1101000
pattern: 1110000
try to fix hunk: 0
delete from 231 with range 1
try to fix hunk: 1
replace from 233 with range 1 to
        int index = rowData.getIndex(columnKey);
        if (index >= 0) {
            return rowData.getObject(index);

try to fix hunk: 2
insert before 318 with         allNull = true;

patches are written to file
running tests...
used time: Finished in 27.42 seconds
Failing tests: 13
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveValue$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_3
Can independently fix []
Could not fix independently
processed: 1110000
pattern: 0001111
try to fix hunk: 3
insert before 319 with         for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
             item++) {
            row = (KeyedObjects) this.rows.get(item);
            int columnIndex = row.getIndex(columnKey);
            if (columnIndex >= 0 && row.getObject(columnIndex) != null) {
                allNull = false;
                break;
            }
        }

try to fix hunk: 4
insert before 320 with         if (allNull) {
            for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
                 item++) {
                row = (KeyedObjects) this.rows.get(item);
                int columnIndex = row.getIndex(columnKey);
                if (columnIndex >= 0) {
                    row.removeValue(columnIndex);
                }
            }
            this.columnKeys.remove(columnKey);
        }

try to fix hunk: 5
insert before 345 with         if (index < 0) {
            throw new UnknownKeyException("Row key (" + rowKey 
                    + ") not recognised.");
        }

try to fix hunk: 6
replace from 378 with range 1 to
            int i = rowData.getIndex(columnKey);
            if (i >= 0) {
                rowData.removeValue(i);
            }

patches are written to file
running tests...
used time: Finished in 27.26 seconds
Failing tests: 4
	org.jfree.data.junit.KeyedObjects2DTests::testSetObject$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testSetObject$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey$catena_3
Can independently fix []
Could not fix independently
processed: 0001111
pattern: 0010111
try to fix hunk: 2
insert before 318 with         allNull = true;

try to fix hunk: 4
insert before 320 with         if (allNull) {
            for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
                 item++) {
                row = (KeyedObjects) this.rows.get(item);
                int columnIndex = row.getIndex(columnKey);
                if (columnIndex >= 0) {
                    row.removeValue(columnIndex);
                }
            }
            this.columnKeys.remove(columnKey);
        }

try to fix hunk: 5
insert before 345 with         if (index < 0) {
            throw new UnknownKeyException("Row key (" + rowKey 
                    + ") not recognised.");
        }

try to fix hunk: 6
replace from 378 with range 1 to
            int i = rowData.getIndex(columnKey);
            if (i >= 0) {
                rowData.removeValue(i);
            }

patches are written to file
running tests...
used time: Finished in 26.08 seconds
Failing tests: 4
	org.jfree.data.junit.KeyedObjects2DTests::testSetObject$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testSetObject$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey$catena_3
Can independently fix []
Could not fix independently
processed: 0010111
pattern: 0011011
try to fix hunk: 2
insert before 318 with         allNull = true;

try to fix hunk: 3
insert before 319 with         for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
             item++) {
            row = (KeyedObjects) this.rows.get(item);
            int columnIndex = row.getIndex(columnKey);
            if (columnIndex >= 0 && row.getObject(columnIndex) != null) {
                allNull = false;
                break;
            }
        }

try to fix hunk: 5
insert before 345 with         if (index < 0) {
            throw new UnknownKeyException("Row key (" + rowKey 
                    + ") not recognised.");
        }

try to fix hunk: 6
replace from 378 with range 1 to
            int i = rowData.getIndex(columnKey);
            if (i >= 0) {
                rowData.removeValue(i);
            }

patches are written to file
running tests...
used time: Finished in 28.39 seconds
Failing tests: 5
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveValue$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testSetObject$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testSetObject$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey$catena_3
Can independently fix []
Could not fix independently
processed: 0011011
pattern: 0011101
try to fix hunk: 2
insert before 318 with         allNull = true;

try to fix hunk: 3
insert before 319 with         for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
             item++) {
            row = (KeyedObjects) this.rows.get(item);
            int columnIndex = row.getIndex(columnKey);
            if (columnIndex >= 0 && row.getObject(columnIndex) != null) {
                allNull = false;
                break;
            }
        }

try to fix hunk: 4
insert before 320 with         if (allNull) {
            for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
                 item++) {
                row = (KeyedObjects) this.rows.get(item);
                int columnIndex = row.getIndex(columnKey);
                if (columnIndex >= 0) {
                    row.removeValue(columnIndex);
                }
            }
            this.columnKeys.remove(columnKey);
        }

try to fix hunk: 6
replace from 378 with range 1 to
            int i = rowData.getIndex(columnKey);
            if (i >= 0) {
                rowData.removeValue(i);
            }

patches are written to file
running tests...
used time: Finished in 26.19 seconds
Failing tests: 8
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testSetObject$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testSetObject$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey$catena_3
Can independently fix []
Could not fix independently
processed: 0011101
pattern: 0011110
try to fix hunk: 2
insert before 318 with         allNull = true;

try to fix hunk: 3
insert before 319 with         for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
             item++) {
            row = (KeyedObjects) this.rows.get(item);
            int columnIndex = row.getIndex(columnKey);
            if (columnIndex >= 0 && row.getObject(columnIndex) != null) {
                allNull = false;
                break;
            }
        }

try to fix hunk: 4
insert before 320 with         if (allNull) {
            for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
                 item++) {
                row = (KeyedObjects) this.rows.get(item);
                int columnIndex = row.getIndex(columnKey);
                if (columnIndex >= 0) {
                    row.removeValue(columnIndex);
                }
            }
            this.columnKeys.remove(columnKey);
        }

try to fix hunk: 5
insert before 345 with         if (index < 0) {
            throw new UnknownKeyException("Row key (" + rowKey 
                    + ") not recognised.");
        }

patches are written to file
running tests...
used time: Finished in 26.45 seconds
Failing tests: 12
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testSetObject$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testSetObject$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey$catena_3
Can independently fix []
Could not fix independently
processed: 0011110
pattern: 0100111
try to fix hunk: 1
replace from 233 with range 1 to
        int index = rowData.getIndex(columnKey);
        if (index >= 0) {
            return rowData.getObject(index);

try to fix hunk: 4
insert before 320 with         if (allNull) {
            for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
                 item++) {
                row = (KeyedObjects) this.rows.get(item);
                int columnIndex = row.getIndex(columnKey);
                if (columnIndex >= 0) {
                    row.removeValue(columnIndex);
                }
            }
            this.columnKeys.remove(columnKey);
        }

try to fix hunk: 5
insert before 345 with         if (index < 0) {
            throw new UnknownKeyException("Row key (" + rowKey 
                    + ") not recognised.");
        }

try to fix hunk: 6
replace from 378 with range 1 to
            int i = rowData.getIndex(columnKey);
            if (i >= 0) {
                rowData.removeValue(i);
            }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100111
pattern: 0101011
try to fix hunk: 1
replace from 233 with range 1 to
        int index = rowData.getIndex(columnKey);
        if (index >= 0) {
            return rowData.getObject(index);

try to fix hunk: 3
insert before 319 with         for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
             item++) {
            row = (KeyedObjects) this.rows.get(item);
            int columnIndex = row.getIndex(columnKey);
            if (columnIndex >= 0 && row.getObject(columnIndex) != null) {
                allNull = false;
                break;
            }
        }

try to fix hunk: 5
insert before 345 with         if (index < 0) {
            throw new UnknownKeyException("Row key (" + rowKey 
                    + ") not recognised.");
        }

try to fix hunk: 6
replace from 378 with range 1 to
            int i = rowData.getIndex(columnKey);
            if (i >= 0) {
                rowData.removeValue(i);
            }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0101011
pattern: 0101101
try to fix hunk: 1
replace from 233 with range 1 to
        int index = rowData.getIndex(columnKey);
        if (index >= 0) {
            return rowData.getObject(index);

try to fix hunk: 3
insert before 319 with         for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
             item++) {
            row = (KeyedObjects) this.rows.get(item);
            int columnIndex = row.getIndex(columnKey);
            if (columnIndex >= 0 && row.getObject(columnIndex) != null) {
                allNull = false;
                break;
            }
        }

try to fix hunk: 4
insert before 320 with         if (allNull) {
            for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
                 item++) {
                row = (KeyedObjects) this.rows.get(item);
                int columnIndex = row.getIndex(columnKey);
                if (columnIndex >= 0) {
                    row.removeValue(columnIndex);
                }
            }
            this.columnKeys.remove(columnKey);
        }

try to fix hunk: 6
replace from 378 with range 1 to
            int i = rowData.getIndex(columnKey);
            if (i >= 0) {
                rowData.removeValue(i);
            }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0101101
pattern: 0101110
try to fix hunk: 1
replace from 233 with range 1 to
        int index = rowData.getIndex(columnKey);
        if (index >= 0) {
            return rowData.getObject(index);

try to fix hunk: 3
insert before 319 with         for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
             item++) {
            row = (KeyedObjects) this.rows.get(item);
            int columnIndex = row.getIndex(columnKey);
            if (columnIndex >= 0 && row.getObject(columnIndex) != null) {
                allNull = false;
                break;
            }
        }

try to fix hunk: 4
insert before 320 with         if (allNull) {
            for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
                 item++) {
                row = (KeyedObjects) this.rows.get(item);
                int columnIndex = row.getIndex(columnKey);
                if (columnIndex >= 0) {
                    row.removeValue(columnIndex);
                }
            }
            this.columnKeys.remove(columnKey);
        }

try to fix hunk: 5
insert before 345 with         if (index < 0) {
            throw new UnknownKeyException("Row key (" + rowKey 
                    + ") not recognised.");
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0101110
pattern: 0110011
try to fix hunk: 1
replace from 233 with range 1 to
        int index = rowData.getIndex(columnKey);
        if (index >= 0) {
            return rowData.getObject(index);

try to fix hunk: 2
insert before 318 with         allNull = true;

try to fix hunk: 5
insert before 345 with         if (index < 0) {
            throw new UnknownKeyException("Row key (" + rowKey 
                    + ") not recognised.");
        }

try to fix hunk: 6
replace from 378 with range 1 to
            int i = rowData.getIndex(columnKey);
            if (i >= 0) {
                rowData.removeValue(i);
            }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0110011
pattern: 0110101
try to fix hunk: 1
replace from 233 with range 1 to
        int index = rowData.getIndex(columnKey);
        if (index >= 0) {
            return rowData.getObject(index);

try to fix hunk: 2
insert before 318 with         allNull = true;

try to fix hunk: 4
insert before 320 with         if (allNull) {
            for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
                 item++) {
                row = (KeyedObjects) this.rows.get(item);
                int columnIndex = row.getIndex(columnKey);
                if (columnIndex >= 0) {
                    row.removeValue(columnIndex);
                }
            }
            this.columnKeys.remove(columnKey);
        }

try to fix hunk: 6
replace from 378 with range 1 to
            int i = rowData.getIndex(columnKey);
            if (i >= 0) {
                rowData.removeValue(i);
            }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0110101
pattern: 0110110
try to fix hunk: 1
replace from 233 with range 1 to
        int index = rowData.getIndex(columnKey);
        if (index >= 0) {
            return rowData.getObject(index);

try to fix hunk: 2
insert before 318 with         allNull = true;

try to fix hunk: 4
insert before 320 with         if (allNull) {
            for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
                 item++) {
                row = (KeyedObjects) this.rows.get(item);
                int columnIndex = row.getIndex(columnKey);
                if (columnIndex >= 0) {
                    row.removeValue(columnIndex);
                }
            }
            this.columnKeys.remove(columnKey);
        }

try to fix hunk: 5
insert before 345 with         if (index < 0) {
            throw new UnknownKeyException("Row key (" + rowKey 
                    + ") not recognised.");
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0110110
pattern: 0111001
try to fix hunk: 1
replace from 233 with range 1 to
        int index = rowData.getIndex(columnKey);
        if (index >= 0) {
            return rowData.getObject(index);

try to fix hunk: 2
insert before 318 with         allNull = true;

try to fix hunk: 3
insert before 319 with         for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
             item++) {
            row = (KeyedObjects) this.rows.get(item);
            int columnIndex = row.getIndex(columnKey);
            if (columnIndex >= 0 && row.getObject(columnIndex) != null) {
                allNull = false;
                break;
            }
        }

try to fix hunk: 6
replace from 378 with range 1 to
            int i = rowData.getIndex(columnKey);
            if (i >= 0) {
                rowData.removeValue(i);
            }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0111001
pattern: 0111010
try to fix hunk: 1
replace from 233 with range 1 to
        int index = rowData.getIndex(columnKey);
        if (index >= 0) {
            return rowData.getObject(index);

try to fix hunk: 2
insert before 318 with         allNull = true;

try to fix hunk: 3
insert before 319 with         for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
             item++) {
            row = (KeyedObjects) this.rows.get(item);
            int columnIndex = row.getIndex(columnKey);
            if (columnIndex >= 0 && row.getObject(columnIndex) != null) {
                allNull = false;
                break;
            }
        }

try to fix hunk: 5
insert before 345 with         if (index < 0) {
            throw new UnknownKeyException("Row key (" + rowKey 
                    + ") not recognised.");
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0111010
pattern: 0111100
try to fix hunk: 1
replace from 233 with range 1 to
        int index = rowData.getIndex(columnKey);
        if (index >= 0) {
            return rowData.getObject(index);

try to fix hunk: 2
insert before 318 with         allNull = true;

try to fix hunk: 3
insert before 319 with         for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
             item++) {
            row = (KeyedObjects) this.rows.get(item);
            int columnIndex = row.getIndex(columnKey);
            if (columnIndex >= 0 && row.getObject(columnIndex) != null) {
                allNull = false;
                break;
            }
        }

try to fix hunk: 4
insert before 320 with         if (allNull) {
            for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
                 item++) {
                row = (KeyedObjects) this.rows.get(item);
                int columnIndex = row.getIndex(columnKey);
                if (columnIndex >= 0) {
                    row.removeValue(columnIndex);
                }
            }
            this.columnKeys.remove(columnKey);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0111100
pattern: 1000111
try to fix hunk: 0
delete from 231 with range 1
try to fix hunk: 4
insert before 320 with         if (allNull) {
            for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
                 item++) {
                row = (KeyedObjects) this.rows.get(item);
                int columnIndex = row.getIndex(columnKey);
                if (columnIndex >= 0) {
                    row.removeValue(columnIndex);
                }
            }
            this.columnKeys.remove(columnKey);
        }

try to fix hunk: 5
insert before 345 with         if (index < 0) {
            throw new UnknownKeyException("Row key (" + rowKey 
                    + ") not recognised.");
        }

try to fix hunk: 6
replace from 378 with range 1 to
            int i = rowData.getIndex(columnKey);
            if (i >= 0) {
                rowData.removeValue(i);
            }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000111
pattern: 1001011
try to fix hunk: 0
delete from 231 with range 1
try to fix hunk: 3
insert before 319 with         for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
             item++) {
            row = (KeyedObjects) this.rows.get(item);
            int columnIndex = row.getIndex(columnKey);
            if (columnIndex >= 0 && row.getObject(columnIndex) != null) {
                allNull = false;
                break;
            }
        }

try to fix hunk: 5
insert before 345 with         if (index < 0) {
            throw new UnknownKeyException("Row key (" + rowKey 
                    + ") not recognised.");
        }

try to fix hunk: 6
replace from 378 with range 1 to
            int i = rowData.getIndex(columnKey);
            if (i >= 0) {
                rowData.removeValue(i);
            }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1001011
pattern: 1001101
try to fix hunk: 0
delete from 231 with range 1
try to fix hunk: 3
insert before 319 with         for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
             item++) {
            row = (KeyedObjects) this.rows.get(item);
            int columnIndex = row.getIndex(columnKey);
            if (columnIndex >= 0 && row.getObject(columnIndex) != null) {
                allNull = false;
                break;
            }
        }

try to fix hunk: 4
insert before 320 with         if (allNull) {
            for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
                 item++) {
                row = (KeyedObjects) this.rows.get(item);
                int columnIndex = row.getIndex(columnKey);
                if (columnIndex >= 0) {
                    row.removeValue(columnIndex);
                }
            }
            this.columnKeys.remove(columnKey);
        }

try to fix hunk: 6
replace from 378 with range 1 to
            int i = rowData.getIndex(columnKey);
            if (i >= 0) {
                rowData.removeValue(i);
            }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1001101
pattern: 1001110
try to fix hunk: 0
delete from 231 with range 1
try to fix hunk: 3
insert before 319 with         for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
             item++) {
            row = (KeyedObjects) this.rows.get(item);
            int columnIndex = row.getIndex(columnKey);
            if (columnIndex >= 0 && row.getObject(columnIndex) != null) {
                allNull = false;
                break;
            }
        }

try to fix hunk: 4
insert before 320 with         if (allNull) {
            for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
                 item++) {
                row = (KeyedObjects) this.rows.get(item);
                int columnIndex = row.getIndex(columnKey);
                if (columnIndex >= 0) {
                    row.removeValue(columnIndex);
                }
            }
            this.columnKeys.remove(columnKey);
        }

try to fix hunk: 5
insert before 345 with         if (index < 0) {
            throw new UnknownKeyException("Row key (" + rowKey 
                    + ") not recognised.");
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1001110
pattern: 1010011
try to fix hunk: 0
delete from 231 with range 1
try to fix hunk: 2
insert before 318 with         allNull = true;

try to fix hunk: 5
insert before 345 with         if (index < 0) {
            throw new UnknownKeyException("Row key (" + rowKey 
                    + ") not recognised.");
        }

try to fix hunk: 6
replace from 378 with range 1 to
            int i = rowData.getIndex(columnKey);
            if (i >= 0) {
                rowData.removeValue(i);
            }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1010011
pattern: 1010101
try to fix hunk: 0
delete from 231 with range 1
try to fix hunk: 2
insert before 318 with         allNull = true;

try to fix hunk: 4
insert before 320 with         if (allNull) {
            for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
                 item++) {
                row = (KeyedObjects) this.rows.get(item);
                int columnIndex = row.getIndex(columnKey);
                if (columnIndex >= 0) {
                    row.removeValue(columnIndex);
                }
            }
            this.columnKeys.remove(columnKey);
        }

try to fix hunk: 6
replace from 378 with range 1 to
            int i = rowData.getIndex(columnKey);
            if (i >= 0) {
                rowData.removeValue(i);
            }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1010101
pattern: 1010110
try to fix hunk: 0
delete from 231 with range 1
try to fix hunk: 2
insert before 318 with         allNull = true;

try to fix hunk: 4
insert before 320 with         if (allNull) {
            for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
                 item++) {
                row = (KeyedObjects) this.rows.get(item);
                int columnIndex = row.getIndex(columnKey);
                if (columnIndex >= 0) {
                    row.removeValue(columnIndex);
                }
            }
            this.columnKeys.remove(columnKey);
        }

try to fix hunk: 5
insert before 345 with         if (index < 0) {
            throw new UnknownKeyException("Row key (" + rowKey 
                    + ") not recognised.");
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1010110
pattern: 1011001
try to fix hunk: 0
delete from 231 with range 1
try to fix hunk: 2
insert before 318 with         allNull = true;

try to fix hunk: 3
insert before 319 with         for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
             item++) {
            row = (KeyedObjects) this.rows.get(item);
            int columnIndex = row.getIndex(columnKey);
            if (columnIndex >= 0 && row.getObject(columnIndex) != null) {
                allNull = false;
                break;
            }
        }

try to fix hunk: 6
replace from 378 with range 1 to
            int i = rowData.getIndex(columnKey);
            if (i >= 0) {
                rowData.removeValue(i);
            }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1011001
pattern: 1011010
try to fix hunk: 0
delete from 231 with range 1
try to fix hunk: 2
insert before 318 with         allNull = true;

try to fix hunk: 3
insert before 319 with         for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
             item++) {
            row = (KeyedObjects) this.rows.get(item);
            int columnIndex = row.getIndex(columnKey);
            if (columnIndex >= 0 && row.getObject(columnIndex) != null) {
                allNull = false;
                break;
            }
        }

try to fix hunk: 5
insert before 345 with         if (index < 0) {
            throw new UnknownKeyException("Row key (" + rowKey 
                    + ") not recognised.");
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1011010
pattern: 1011100
try to fix hunk: 0
delete from 231 with range 1
try to fix hunk: 2
insert before 318 with         allNull = true;

try to fix hunk: 3
insert before 319 with         for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
             item++) {
            row = (KeyedObjects) this.rows.get(item);
            int columnIndex = row.getIndex(columnKey);
            if (columnIndex >= 0 && row.getObject(columnIndex) != null) {
                allNull = false;
                break;
            }
        }

try to fix hunk: 4
insert before 320 with         if (allNull) {
            for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
                 item++) {
                row = (KeyedObjects) this.rows.get(item);
                int columnIndex = row.getIndex(columnKey);
                if (columnIndex >= 0) {
                    row.removeValue(columnIndex);
                }
            }
            this.columnKeys.remove(columnKey);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1011100
pattern: 1100011
try to fix hunk: 0
delete from 231 with range 1
try to fix hunk: 1
replace from 233 with range 1 to
        int index = rowData.getIndex(columnKey);
        if (index >= 0) {
            return rowData.getObject(index);

try to fix hunk: 5
insert before 345 with         if (index < 0) {
            throw new UnknownKeyException("Row key (" + rowKey 
                    + ") not recognised.");
        }

try to fix hunk: 6
replace from 378 with range 1 to
            int i = rowData.getIndex(columnKey);
            if (i >= 0) {
                rowData.removeValue(i);
            }

patches are written to file
running tests...
used time: Finished in 31.90 seconds
Failing tests: 1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveValue$catena_1
Can independently fix []
Could not fix independently
processed: 1100011
pattern: 1100101
try to fix hunk: 0
delete from 231 with range 1
try to fix hunk: 1
replace from 233 with range 1 to
        int index = rowData.getIndex(columnKey);
        if (index >= 0) {
            return rowData.getObject(index);

try to fix hunk: 4
insert before 320 with         if (allNull) {
            for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
                 item++) {
                row = (KeyedObjects) this.rows.get(item);
                int columnIndex = row.getIndex(columnKey);
                if (columnIndex >= 0) {
                    row.removeValue(columnIndex);
                }
            }
            this.columnKeys.remove(columnKey);
        }

try to fix hunk: 6
replace from 378 with range 1 to
            int i = rowData.getIndex(columnKey);
            if (i >= 0) {
                rowData.removeValue(i);
            }

patches are written to file
running tests...
used time: Finished in 24.72 seconds
Failing tests: 4
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_3
Can independently fix []
Could not fix independently
processed: 1100101
pattern: 1100110
try to fix hunk: 0
delete from 231 with range 1
try to fix hunk: 1
replace from 233 with range 1 to
        int index = rowData.getIndex(columnKey);
        if (index >= 0) {
            return rowData.getObject(index);

try to fix hunk: 4
insert before 320 with         if (allNull) {
            for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
                 item++) {
                row = (KeyedObjects) this.rows.get(item);
                int columnIndex = row.getIndex(columnKey);
                if (columnIndex >= 0) {
                    row.removeValue(columnIndex);
                }
            }
            this.columnKeys.remove(columnKey);
        }

try to fix hunk: 5
insert before 345 with         if (index < 0) {
            throw new UnknownKeyException("Row key (" + rowKey 
                    + ") not recognised.");
        }

patches are written to file
running tests...
used time: Finished in 27.84 seconds
Failing tests: 8
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_3
Can independently fix []
Could not fix independently
processed: 1100110
pattern: 1101001
try to fix hunk: 0
delete from 231 with range 1
try to fix hunk: 1
replace from 233 with range 1 to
        int index = rowData.getIndex(columnKey);
        if (index >= 0) {
            return rowData.getObject(index);

try to fix hunk: 3
insert before 319 with         for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
             item++) {
            row = (KeyedObjects) this.rows.get(item);
            int columnIndex = row.getIndex(columnKey);
            if (columnIndex >= 0 && row.getObject(columnIndex) != null) {
                allNull = false;
                break;
            }
        }

try to fix hunk: 6
replace from 378 with range 1 to
            int i = rowData.getIndex(columnKey);
            if (i >= 0) {
                rowData.removeValue(i);
            }

patches are written to file
running tests...
used time: Finished in 27.67 seconds
Failing tests: 5
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveValue$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_3
Can independently fix []
Could not fix independently
processed: 1101001
pattern: 1101010
try to fix hunk: 0
delete from 231 with range 1
try to fix hunk: 1
replace from 233 with range 1 to
        int index = rowData.getIndex(columnKey);
        if (index >= 0) {
            return rowData.getObject(index);

try to fix hunk: 3
insert before 319 with         for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
             item++) {
            row = (KeyedObjects) this.rows.get(item);
            int columnIndex = row.getIndex(columnKey);
            if (columnIndex >= 0 && row.getObject(columnIndex) != null) {
                allNull = false;
                break;
            }
        }

try to fix hunk: 5
insert before 345 with         if (index < 0) {
            throw new UnknownKeyException("Row key (" + rowKey 
                    + ") not recognised.");
        }

patches are written to file
running tests...
used time: Finished in 26.13 seconds
Failing tests: 9
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveValue$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_3
Can independently fix []
Could not fix independently
processed: 1101010
pattern: 1101100
try to fix hunk: 0
delete from 231 with range 1
try to fix hunk: 1
replace from 233 with range 1 to
        int index = rowData.getIndex(columnKey);
        if (index >= 0) {
            return rowData.getObject(index);

try to fix hunk: 3
insert before 319 with         for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
             item++) {
            row = (KeyedObjects) this.rows.get(item);
            int columnIndex = row.getIndex(columnKey);
            if (columnIndex >= 0 && row.getObject(columnIndex) != null) {
                allNull = false;
                break;
            }
        }

try to fix hunk: 4
insert before 320 with         if (allNull) {
            for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
                 item++) {
                row = (KeyedObjects) this.rows.get(item);
                int columnIndex = row.getIndex(columnKey);
                if (columnIndex >= 0) {
                    row.removeValue(columnIndex);
                }
            }
            this.columnKeys.remove(columnKey);
        }

patches are written to file
running tests...
used time: Finished in 26.78 seconds
Failing tests: 12
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_3
Can independently fix []
Could not fix independently
processed: 1101100
pattern: 1110001
try to fix hunk: 0
delete from 231 with range 1
try to fix hunk: 1
replace from 233 with range 1 to
        int index = rowData.getIndex(columnKey);
        if (index >= 0) {
            return rowData.getObject(index);

try to fix hunk: 2
insert before 318 with         allNull = true;

try to fix hunk: 6
replace from 378 with range 1 to
            int i = rowData.getIndex(columnKey);
            if (i >= 0) {
                rowData.removeValue(i);
            }

patches are written to file
running tests...
used time: Finished in 24.49 seconds
Failing tests: 5
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveValue$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_3
Can independently fix []
Could not fix independently
processed: 1110001
pattern: 1110010
try to fix hunk: 0
delete from 231 with range 1
try to fix hunk: 1
replace from 233 with range 1 to
        int index = rowData.getIndex(columnKey);
        if (index >= 0) {
            return rowData.getObject(index);

try to fix hunk: 2
insert before 318 with         allNull = true;

try to fix hunk: 5
insert before 345 with         if (index < 0) {
            throw new UnknownKeyException("Row key (" + rowKey 
                    + ") not recognised.");
        }

patches are written to file
running tests...
used time: Finished in 26.12 seconds
Failing tests: 9
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveValue$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_3
Can independently fix []
Could not fix independently
processed: 1110010
pattern: 1110100
try to fix hunk: 0
delete from 231 with range 1
try to fix hunk: 1
replace from 233 with range 1 to
        int index = rowData.getIndex(columnKey);
        if (index >= 0) {
            return rowData.getObject(index);

try to fix hunk: 2
insert before 318 with         allNull = true;

try to fix hunk: 4
insert before 320 with         if (allNull) {
            for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
                 item++) {
                row = (KeyedObjects) this.rows.get(item);
                int columnIndex = row.getIndex(columnKey);
                if (columnIndex >= 0) {
                    row.removeValue(columnIndex);
                }
            }
            this.columnKeys.remove(columnKey);
        }

patches are written to file
running tests...
used time: Finished in 26.76 seconds
Failing tests: 12
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_3
Can independently fix []
Could not fix independently
processed: 1110100
pattern: 1111000
try to fix hunk: 0
delete from 231 with range 1
try to fix hunk: 1
replace from 233 with range 1 to
        int index = rowData.getIndex(columnKey);
        if (index >= 0) {
            return rowData.getObject(index);

try to fix hunk: 2
insert before 318 with         allNull = true;

try to fix hunk: 3
insert before 319 with         for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
             item++) {
            row = (KeyedObjects) this.rows.get(item);
            int columnIndex = row.getIndex(columnKey);
            if (columnIndex >= 0 && row.getObject(columnIndex) != null) {
                allNull = false;
                break;
            }
        }

patches are written to file
running tests...
used time: Finished in 27.69 seconds
Failing tests: 13
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveValue$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_3
Can independently fix []
Could not fix independently
processed: 1111000
pattern: 0011111
try to fix hunk: 2
insert before 318 with         allNull = true;

try to fix hunk: 3
insert before 319 with         for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
             item++) {
            row = (KeyedObjects) this.rows.get(item);
            int columnIndex = row.getIndex(columnKey);
            if (columnIndex >= 0 && row.getObject(columnIndex) != null) {
                allNull = false;
                break;
            }
        }

try to fix hunk: 4
insert before 320 with         if (allNull) {
            for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
                 item++) {
                row = (KeyedObjects) this.rows.get(item);
                int columnIndex = row.getIndex(columnKey);
                if (columnIndex >= 0) {
                    row.removeValue(columnIndex);
                }
            }
            this.columnKeys.remove(columnKey);
        }

try to fix hunk: 5
insert before 345 with         if (index < 0) {
            throw new UnknownKeyException("Row key (" + rowKey 
                    + ") not recognised.");
        }

try to fix hunk: 6
replace from 378 with range 1 to
            int i = rowData.getIndex(columnKey);
            if (i >= 0) {
                rowData.removeValue(i);
            }

patches are written to file
running tests...
used time: Finished in 28.29 seconds
Failing tests: 4
	org.jfree.data.junit.KeyedObjects2DTests::testSetObject$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testSetObject$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey$catena_3
Can independently fix []
Could not fix independently
processed: 0011111
pattern: 0101111
try to fix hunk: 1
replace from 233 with range 1 to
        int index = rowData.getIndex(columnKey);
        if (index >= 0) {
            return rowData.getObject(index);

try to fix hunk: 3
insert before 319 with         for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
             item++) {
            row = (KeyedObjects) this.rows.get(item);
            int columnIndex = row.getIndex(columnKey);
            if (columnIndex >= 0 && row.getObject(columnIndex) != null) {
                allNull = false;
                break;
            }
        }

try to fix hunk: 4
insert before 320 with         if (allNull) {
            for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
                 item++) {
                row = (KeyedObjects) this.rows.get(item);
                int columnIndex = row.getIndex(columnKey);
                if (columnIndex >= 0) {
                    row.removeValue(columnIndex);
                }
            }
            this.columnKeys.remove(columnKey);
        }

try to fix hunk: 5
insert before 345 with         if (index < 0) {
            throw new UnknownKeyException("Row key (" + rowKey 
                    + ") not recognised.");
        }

try to fix hunk: 6
replace from 378 with range 1 to
            int i = rowData.getIndex(columnKey);
            if (i >= 0) {
                rowData.removeValue(i);
            }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0101111
pattern: 0110111
try to fix hunk: 1
replace from 233 with range 1 to
        int index = rowData.getIndex(columnKey);
        if (index >= 0) {
            return rowData.getObject(index);

try to fix hunk: 2
insert before 318 with         allNull = true;

try to fix hunk: 4
insert before 320 with         if (allNull) {
            for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
                 item++) {
                row = (KeyedObjects) this.rows.get(item);
                int columnIndex = row.getIndex(columnKey);
                if (columnIndex >= 0) {
                    row.removeValue(columnIndex);
                }
            }
            this.columnKeys.remove(columnKey);
        }

try to fix hunk: 5
insert before 345 with         if (index < 0) {
            throw new UnknownKeyException("Row key (" + rowKey 
                    + ") not recognised.");
        }

try to fix hunk: 6
replace from 378 with range 1 to
            int i = rowData.getIndex(columnKey);
            if (i >= 0) {
                rowData.removeValue(i);
            }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0110111
pattern: 0111011
try to fix hunk: 1
replace from 233 with range 1 to
        int index = rowData.getIndex(columnKey);
        if (index >= 0) {
            return rowData.getObject(index);

try to fix hunk: 2
insert before 318 with         allNull = true;

try to fix hunk: 3
insert before 319 with         for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
             item++) {
            row = (KeyedObjects) this.rows.get(item);
            int columnIndex = row.getIndex(columnKey);
            if (columnIndex >= 0 && row.getObject(columnIndex) != null) {
                allNull = false;
                break;
            }
        }

try to fix hunk: 5
insert before 345 with         if (index < 0) {
            throw new UnknownKeyException("Row key (" + rowKey 
                    + ") not recognised.");
        }

try to fix hunk: 6
replace from 378 with range 1 to
            int i = rowData.getIndex(columnKey);
            if (i >= 0) {
                rowData.removeValue(i);
            }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0111011
pattern: 0111101
try to fix hunk: 1
replace from 233 with range 1 to
        int index = rowData.getIndex(columnKey);
        if (index >= 0) {
            return rowData.getObject(index);

try to fix hunk: 2
insert before 318 with         allNull = true;

try to fix hunk: 3
insert before 319 with         for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
             item++) {
            row = (KeyedObjects) this.rows.get(item);
            int columnIndex = row.getIndex(columnKey);
            if (columnIndex >= 0 && row.getObject(columnIndex) != null) {
                allNull = false;
                break;
            }
        }

try to fix hunk: 4
insert before 320 with         if (allNull) {
            for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
                 item++) {
                row = (KeyedObjects) this.rows.get(item);
                int columnIndex = row.getIndex(columnKey);
                if (columnIndex >= 0) {
                    row.removeValue(columnIndex);
                }
            }
            this.columnKeys.remove(columnKey);
        }

try to fix hunk: 6
replace from 378 with range 1 to
            int i = rowData.getIndex(columnKey);
            if (i >= 0) {
                rowData.removeValue(i);
            }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0111101
pattern: 0111110
try to fix hunk: 1
replace from 233 with range 1 to
        int index = rowData.getIndex(columnKey);
        if (index >= 0) {
            return rowData.getObject(index);

try to fix hunk: 2
insert before 318 with         allNull = true;

try to fix hunk: 3
insert before 319 with         for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
             item++) {
            row = (KeyedObjects) this.rows.get(item);
            int columnIndex = row.getIndex(columnKey);
            if (columnIndex >= 0 && row.getObject(columnIndex) != null) {
                allNull = false;
                break;
            }
        }

try to fix hunk: 4
insert before 320 with         if (allNull) {
            for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
                 item++) {
                row = (KeyedObjects) this.rows.get(item);
                int columnIndex = row.getIndex(columnKey);
                if (columnIndex >= 0) {
                    row.removeValue(columnIndex);
                }
            }
            this.columnKeys.remove(columnKey);
        }

try to fix hunk: 5
insert before 345 with         if (index < 0) {
            throw new UnknownKeyException("Row key (" + rowKey 
                    + ") not recognised.");
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0111110
pattern: 1001111
try to fix hunk: 0
delete from 231 with range 1
try to fix hunk: 3
insert before 319 with         for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
             item++) {
            row = (KeyedObjects) this.rows.get(item);
            int columnIndex = row.getIndex(columnKey);
            if (columnIndex >= 0 && row.getObject(columnIndex) != null) {
                allNull = false;
                break;
            }
        }

try to fix hunk: 4
insert before 320 with         if (allNull) {
            for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
                 item++) {
                row = (KeyedObjects) this.rows.get(item);
                int columnIndex = row.getIndex(columnKey);
                if (columnIndex >= 0) {
                    row.removeValue(columnIndex);
                }
            }
            this.columnKeys.remove(columnKey);
        }

try to fix hunk: 5
insert before 345 with         if (index < 0) {
            throw new UnknownKeyException("Row key (" + rowKey 
                    + ") not recognised.");
        }

try to fix hunk: 6
replace from 378 with range 1 to
            int i = rowData.getIndex(columnKey);
            if (i >= 0) {
                rowData.removeValue(i);
            }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1001111
pattern: 1010111
try to fix hunk: 0
delete from 231 with range 1
try to fix hunk: 2
insert before 318 with         allNull = true;

try to fix hunk: 4
insert before 320 with         if (allNull) {
            for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
                 item++) {
                row = (KeyedObjects) this.rows.get(item);
                int columnIndex = row.getIndex(columnKey);
                if (columnIndex >= 0) {
                    row.removeValue(columnIndex);
                }
            }
            this.columnKeys.remove(columnKey);
        }

try to fix hunk: 5
insert before 345 with         if (index < 0) {
            throw new UnknownKeyException("Row key (" + rowKey 
                    + ") not recognised.");
        }

try to fix hunk: 6
replace from 378 with range 1 to
            int i = rowData.getIndex(columnKey);
            if (i >= 0) {
                rowData.removeValue(i);
            }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1010111
pattern: 1011011
try to fix hunk: 0
delete from 231 with range 1
try to fix hunk: 2
insert before 318 with         allNull = true;

try to fix hunk: 3
insert before 319 with         for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
             item++) {
            row = (KeyedObjects) this.rows.get(item);
            int columnIndex = row.getIndex(columnKey);
            if (columnIndex >= 0 && row.getObject(columnIndex) != null) {
                allNull = false;
                break;
            }
        }

try to fix hunk: 5
insert before 345 with         if (index < 0) {
            throw new UnknownKeyException("Row key (" + rowKey 
                    + ") not recognised.");
        }

try to fix hunk: 6
replace from 378 with range 1 to
            int i = rowData.getIndex(columnKey);
            if (i >= 0) {
                rowData.removeValue(i);
            }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1011011
pattern: 1011101
try to fix hunk: 0
delete from 231 with range 1
try to fix hunk: 2
insert before 318 with         allNull = true;

try to fix hunk: 3
insert before 319 with         for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
             item++) {
            row = (KeyedObjects) this.rows.get(item);
            int columnIndex = row.getIndex(columnKey);
            if (columnIndex >= 0 && row.getObject(columnIndex) != null) {
                allNull = false;
                break;
            }
        }

try to fix hunk: 4
insert before 320 with         if (allNull) {
            for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
                 item++) {
                row = (KeyedObjects) this.rows.get(item);
                int columnIndex = row.getIndex(columnKey);
                if (columnIndex >= 0) {
                    row.removeValue(columnIndex);
                }
            }
            this.columnKeys.remove(columnKey);
        }

try to fix hunk: 6
replace from 378 with range 1 to
            int i = rowData.getIndex(columnKey);
            if (i >= 0) {
                rowData.removeValue(i);
            }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1011101
pattern: 1011110
try to fix hunk: 0
delete from 231 with range 1
try to fix hunk: 2
insert before 318 with         allNull = true;

try to fix hunk: 3
insert before 319 with         for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
             item++) {
            row = (KeyedObjects) this.rows.get(item);
            int columnIndex = row.getIndex(columnKey);
            if (columnIndex >= 0 && row.getObject(columnIndex) != null) {
                allNull = false;
                break;
            }
        }

try to fix hunk: 4
insert before 320 with         if (allNull) {
            for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
                 item++) {
                row = (KeyedObjects) this.rows.get(item);
                int columnIndex = row.getIndex(columnKey);
                if (columnIndex >= 0) {
                    row.removeValue(columnIndex);
                }
            }
            this.columnKeys.remove(columnKey);
        }

try to fix hunk: 5
insert before 345 with         if (index < 0) {
            throw new UnknownKeyException("Row key (" + rowKey 
                    + ") not recognised.");
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1011110
pattern: 1100111
try to fix hunk: 0
delete from 231 with range 1
try to fix hunk: 1
replace from 233 with range 1 to
        int index = rowData.getIndex(columnKey);
        if (index >= 0) {
            return rowData.getObject(index);

try to fix hunk: 4
insert before 320 with         if (allNull) {
            for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
                 item++) {
                row = (KeyedObjects) this.rows.get(item);
                int columnIndex = row.getIndex(columnKey);
                if (columnIndex >= 0) {
                    row.removeValue(columnIndex);
                }
            }
            this.columnKeys.remove(columnKey);
        }

try to fix hunk: 5
insert before 345 with         if (index < 0) {
            throw new UnknownKeyException("Row key (" + rowKey 
                    + ") not recognised.");
        }

try to fix hunk: 6
replace from 378 with range 1 to
            int i = rowData.getIndex(columnKey);
            if (i >= 0) {
                rowData.removeValue(i);
            }

patches are written to file
running tests...
used time: Finished in 31.71 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 1100111
pattern: 1101011
try to fix hunk: 0
delete from 231 with range 1
try to fix hunk: 1
replace from 233 with range 1 to
        int index = rowData.getIndex(columnKey);
        if (index >= 0) {
            return rowData.getObject(index);

try to fix hunk: 3
insert before 319 with         for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
             item++) {
            row = (KeyedObjects) this.rows.get(item);
            int columnIndex = row.getIndex(columnKey);
            if (columnIndex >= 0 && row.getObject(columnIndex) != null) {
                allNull = false;
                break;
            }
        }

try to fix hunk: 5
insert before 345 with         if (index < 0) {
            throw new UnknownKeyException("Row key (" + rowKey 
                    + ") not recognised.");
        }

try to fix hunk: 6
replace from 378 with range 1 to
            int i = rowData.getIndex(columnKey);
            if (i >= 0) {
                rowData.removeValue(i);
            }

patches are written to file
running tests...
used time: Finished in 27.76 seconds
Failing tests: 1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveValue$catena_1
Can independently fix []
Could not fix independently
processed: 1101011
pattern: 1101101
try to fix hunk: 0
delete from 231 with range 1
try to fix hunk: 1
replace from 233 with range 1 to
        int index = rowData.getIndex(columnKey);
        if (index >= 0) {
            return rowData.getObject(index);

try to fix hunk: 3
insert before 319 with         for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
             item++) {
            row = (KeyedObjects) this.rows.get(item);
            int columnIndex = row.getIndex(columnKey);
            if (columnIndex >= 0 && row.getObject(columnIndex) != null) {
                allNull = false;
                break;
            }
        }

try to fix hunk: 4
insert before 320 with         if (allNull) {
            for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
                 item++) {
                row = (KeyedObjects) this.rows.get(item);
                int columnIndex = row.getIndex(columnKey);
                if (columnIndex >= 0) {
                    row.removeValue(columnIndex);
                }
            }
            this.columnKeys.remove(columnKey);
        }

try to fix hunk: 6
replace from 378 with range 1 to
            int i = rowData.getIndex(columnKey);
            if (i >= 0) {
                rowData.removeValue(i);
            }

patches are written to file
running tests...
used time: Finished in 28.95 seconds
Failing tests: 4
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_3
Can independently fix []
Could not fix independently
processed: 1101101
pattern: 1101110
try to fix hunk: 0
delete from 231 with range 1
try to fix hunk: 1
replace from 233 with range 1 to
        int index = rowData.getIndex(columnKey);
        if (index >= 0) {
            return rowData.getObject(index);

try to fix hunk: 3
insert before 319 with         for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
             item++) {
            row = (KeyedObjects) this.rows.get(item);
            int columnIndex = row.getIndex(columnKey);
            if (columnIndex >= 0 && row.getObject(columnIndex) != null) {
                allNull = false;
                break;
            }
        }

try to fix hunk: 4
insert before 320 with         if (allNull) {
            for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
                 item++) {
                row = (KeyedObjects) this.rows.get(item);
                int columnIndex = row.getIndex(columnKey);
                if (columnIndex >= 0) {
                    row.removeValue(columnIndex);
                }
            }
            this.columnKeys.remove(columnKey);
        }

try to fix hunk: 5
insert before 345 with         if (index < 0) {
            throw new UnknownKeyException("Row key (" + rowKey 
                    + ") not recognised.");
        }

patches are written to file
running tests...
used time: Finished in 27.41 seconds
Failing tests: 8
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_3
Can independently fix []
Could not fix independently
processed: 1101110
pattern: 1110011
try to fix hunk: 0
delete from 231 with range 1
try to fix hunk: 1
replace from 233 with range 1 to
        int index = rowData.getIndex(columnKey);
        if (index >= 0) {
            return rowData.getObject(index);

try to fix hunk: 2
insert before 318 with         allNull = true;

try to fix hunk: 5
insert before 345 with         if (index < 0) {
            throw new UnknownKeyException("Row key (" + rowKey 
                    + ") not recognised.");
        }

try to fix hunk: 6
replace from 378 with range 1 to
            int i = rowData.getIndex(columnKey);
            if (i >= 0) {
                rowData.removeValue(i);
            }

patches are written to file
running tests...
used time: Finished in 30.85 seconds
Failing tests: 1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveValue$catena_1
Can independently fix []
Could not fix independently
processed: 1110011
pattern: 1110101
try to fix hunk: 0
delete from 231 with range 1
try to fix hunk: 1
replace from 233 with range 1 to
        int index = rowData.getIndex(columnKey);
        if (index >= 0) {
            return rowData.getObject(index);

try to fix hunk: 2
insert before 318 with         allNull = true;

try to fix hunk: 4
insert before 320 with         if (allNull) {
            for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
                 item++) {
                row = (KeyedObjects) this.rows.get(item);
                int columnIndex = row.getIndex(columnKey);
                if (columnIndex >= 0) {
                    row.removeValue(columnIndex);
                }
            }
            this.columnKeys.remove(columnKey);
        }

try to fix hunk: 6
replace from 378 with range 1 to
            int i = rowData.getIndex(columnKey);
            if (i >= 0) {
                rowData.removeValue(i);
            }

patches are written to file
running tests...
used time: Finished in 27.57 seconds
Failing tests: 4
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_3
Can independently fix []
Could not fix independently
processed: 1110101
pattern: 1110110
try to fix hunk: 0
delete from 231 with range 1
try to fix hunk: 1
replace from 233 with range 1 to
        int index = rowData.getIndex(columnKey);
        if (index >= 0) {
            return rowData.getObject(index);

try to fix hunk: 2
insert before 318 with         allNull = true;

try to fix hunk: 4
insert before 320 with         if (allNull) {
            for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
                 item++) {
                row = (KeyedObjects) this.rows.get(item);
                int columnIndex = row.getIndex(columnKey);
                if (columnIndex >= 0) {
                    row.removeValue(columnIndex);
                }
            }
            this.columnKeys.remove(columnKey);
        }

try to fix hunk: 5
insert before 345 with         if (index < 0) {
            throw new UnknownKeyException("Row key (" + rowKey 
                    + ") not recognised.");
        }

patches are written to file
running tests...
used time: Finished in 29.32 seconds
Failing tests: 8
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_3
Can independently fix []
Could not fix independently
processed: 1110110
pattern: 1111001
try to fix hunk: 0
delete from 231 with range 1
try to fix hunk: 1
replace from 233 with range 1 to
        int index = rowData.getIndex(columnKey);
        if (index >= 0) {
            return rowData.getObject(index);

try to fix hunk: 2
insert before 318 with         allNull = true;

try to fix hunk: 3
insert before 319 with         for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
             item++) {
            row = (KeyedObjects) this.rows.get(item);
            int columnIndex = row.getIndex(columnKey);
            if (columnIndex >= 0 && row.getObject(columnIndex) != null) {
                allNull = false;
                break;
            }
        }

try to fix hunk: 6
replace from 378 with range 1 to
            int i = rowData.getIndex(columnKey);
            if (i >= 0) {
                rowData.removeValue(i);
            }

patches are written to file
running tests...
used time: Finished in 33.06 seconds
Failing tests: 5
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveValue$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_3
Can independently fix []
Could not fix independently
processed: 1111001
pattern: 1111010
try to fix hunk: 0
delete from 231 with range 1
try to fix hunk: 1
replace from 233 with range 1 to
        int index = rowData.getIndex(columnKey);
        if (index >= 0) {
            return rowData.getObject(index);

try to fix hunk: 2
insert before 318 with         allNull = true;

try to fix hunk: 3
insert before 319 with         for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
             item++) {
            row = (KeyedObjects) this.rows.get(item);
            int columnIndex = row.getIndex(columnKey);
            if (columnIndex >= 0 && row.getObject(columnIndex) != null) {
                allNull = false;
                break;
            }
        }

try to fix hunk: 5
insert before 345 with         if (index < 0) {
            throw new UnknownKeyException("Row key (" + rowKey 
                    + ") not recognised.");
        }

patches are written to file
running tests...
used time: Finished in 28.39 seconds
Failing tests: 9
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveValue$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_3
Can independently fix []
Could not fix independently
processed: 1111010
pattern: 1111100
try to fix hunk: 0
delete from 231 with range 1
try to fix hunk: 1
replace from 233 with range 1 to
        int index = rowData.getIndex(columnKey);
        if (index >= 0) {
            return rowData.getObject(index);

try to fix hunk: 2
insert before 318 with         allNull = true;

try to fix hunk: 3
insert before 319 with         for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
             item++) {
            row = (KeyedObjects) this.rows.get(item);
            int columnIndex = row.getIndex(columnKey);
            if (columnIndex >= 0 && row.getObject(columnIndex) != null) {
                allNull = false;
                break;
            }
        }

try to fix hunk: 4
insert before 320 with         if (allNull) {
            for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
                 item++) {
                row = (KeyedObjects) this.rows.get(item);
                int columnIndex = row.getIndex(columnKey);
                if (columnIndex >= 0) {
                    row.removeValue(columnIndex);
                }
            }
            this.columnKeys.remove(columnKey);
        }

patches are written to file
running tests...
used time: Finished in 25.99 seconds
Failing tests: 12
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_3
Can independently fix []
Could not fix independently
processed: 1111100
pattern: 0111111
try to fix hunk: 1
replace from 233 with range 1 to
        int index = rowData.getIndex(columnKey);
        if (index >= 0) {
            return rowData.getObject(index);

try to fix hunk: 2
insert before 318 with         allNull = true;

try to fix hunk: 3
insert before 319 with         for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
             item++) {
            row = (KeyedObjects) this.rows.get(item);
            int columnIndex = row.getIndex(columnKey);
            if (columnIndex >= 0 && row.getObject(columnIndex) != null) {
                allNull = false;
                break;
            }
        }

try to fix hunk: 4
insert before 320 with         if (allNull) {
            for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
                 item++) {
                row = (KeyedObjects) this.rows.get(item);
                int columnIndex = row.getIndex(columnKey);
                if (columnIndex >= 0) {
                    row.removeValue(columnIndex);
                }
            }
            this.columnKeys.remove(columnKey);
        }

try to fix hunk: 5
insert before 345 with         if (index < 0) {
            throw new UnknownKeyException("Row key (" + rowKey 
                    + ") not recognised.");
        }

try to fix hunk: 6
replace from 378 with range 1 to
            int i = rowData.getIndex(columnKey);
            if (i >= 0) {
                rowData.removeValue(i);
            }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0111111
pattern: 1011111
try to fix hunk: 0
delete from 231 with range 1
try to fix hunk: 2
insert before 318 with         allNull = true;

try to fix hunk: 3
insert before 319 with         for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
             item++) {
            row = (KeyedObjects) this.rows.get(item);
            int columnIndex = row.getIndex(columnKey);
            if (columnIndex >= 0 && row.getObject(columnIndex) != null) {
                allNull = false;
                break;
            }
        }

try to fix hunk: 4
insert before 320 with         if (allNull) {
            for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
                 item++) {
                row = (KeyedObjects) this.rows.get(item);
                int columnIndex = row.getIndex(columnKey);
                if (columnIndex >= 0) {
                    row.removeValue(columnIndex);
                }
            }
            this.columnKeys.remove(columnKey);
        }

try to fix hunk: 5
insert before 345 with         if (index < 0) {
            throw new UnknownKeyException("Row key (" + rowKey 
                    + ") not recognised.");
        }

try to fix hunk: 6
replace from 378 with range 1 to
            int i = rowData.getIndex(columnKey);
            if (i >= 0) {
                rowData.removeValue(i);
            }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1011111
pattern: 1101111
try to fix hunk: 0
delete from 231 with range 1
try to fix hunk: 1
replace from 233 with range 1 to
        int index = rowData.getIndex(columnKey);
        if (index >= 0) {
            return rowData.getObject(index);

try to fix hunk: 3
insert before 319 with         for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
             item++) {
            row = (KeyedObjects) this.rows.get(item);
            int columnIndex = row.getIndex(columnKey);
            if (columnIndex >= 0 && row.getObject(columnIndex) != null) {
                allNull = false;
                break;
            }
        }

try to fix hunk: 4
insert before 320 with         if (allNull) {
            for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
                 item++) {
                row = (KeyedObjects) this.rows.get(item);
                int columnIndex = row.getIndex(columnKey);
                if (columnIndex >= 0) {
                    row.removeValue(columnIndex);
                }
            }
            this.columnKeys.remove(columnKey);
        }

try to fix hunk: 5
insert before 345 with         if (index < 0) {
            throw new UnknownKeyException("Row key (" + rowKey 
                    + ") not recognised.");
        }

try to fix hunk: 6
replace from 378 with range 1 to
            int i = rowData.getIndex(columnKey);
            if (i >= 0) {
                rowData.removeValue(i);
            }

patches are written to file
running tests...
used time: Finished in 27.62 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 1101111
pattern: 1110111
try to fix hunk: 0
delete from 231 with range 1
try to fix hunk: 1
replace from 233 with range 1 to
        int index = rowData.getIndex(columnKey);
        if (index >= 0) {
            return rowData.getObject(index);

try to fix hunk: 2
insert before 318 with         allNull = true;

try to fix hunk: 4
insert before 320 with         if (allNull) {
            for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
                 item++) {
                row = (KeyedObjects) this.rows.get(item);
                int columnIndex = row.getIndex(columnKey);
                if (columnIndex >= 0) {
                    row.removeValue(columnIndex);
                }
            }
            this.columnKeys.remove(columnKey);
        }

try to fix hunk: 5
insert before 345 with         if (index < 0) {
            throw new UnknownKeyException("Row key (" + rowKey 
                    + ") not recognised.");
        }

try to fix hunk: 6
replace from 378 with range 1 to
            int i = rowData.getIndex(columnKey);
            if (i >= 0) {
                rowData.removeValue(i);
            }

patches are written to file
running tests...
used time: Finished in 33.55 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 1110111
pattern: 1111011
try to fix hunk: 0
delete from 231 with range 1
try to fix hunk: 1
replace from 233 with range 1 to
        int index = rowData.getIndex(columnKey);
        if (index >= 0) {
            return rowData.getObject(index);

try to fix hunk: 2
insert before 318 with         allNull = true;

try to fix hunk: 3
insert before 319 with         for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
             item++) {
            row = (KeyedObjects) this.rows.get(item);
            int columnIndex = row.getIndex(columnKey);
            if (columnIndex >= 0 && row.getObject(columnIndex) != null) {
                allNull = false;
                break;
            }
        }

try to fix hunk: 5
insert before 345 with         if (index < 0) {
            throw new UnknownKeyException("Row key (" + rowKey 
                    + ") not recognised.");
        }

try to fix hunk: 6
replace from 378 with range 1 to
            int i = rowData.getIndex(columnKey);
            if (i >= 0) {
                rowData.removeValue(i);
            }

patches are written to file
running tests...
used time: Finished in 32.12 seconds
Failing tests: 1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveValue$catena_1
Can independently fix []
Could not fix independently
processed: 1111011
pattern: 1111101
try to fix hunk: 0
delete from 231 with range 1
try to fix hunk: 1
replace from 233 with range 1 to
        int index = rowData.getIndex(columnKey);
        if (index >= 0) {
            return rowData.getObject(index);

try to fix hunk: 2
insert before 318 with         allNull = true;

try to fix hunk: 3
insert before 319 with         for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
             item++) {
            row = (KeyedObjects) this.rows.get(item);
            int columnIndex = row.getIndex(columnKey);
            if (columnIndex >= 0 && row.getObject(columnIndex) != null) {
                allNull = false;
                break;
            }
        }

try to fix hunk: 4
insert before 320 with         if (allNull) {
            for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
                 item++) {
                row = (KeyedObjects) this.rows.get(item);
                int columnIndex = row.getIndex(columnKey);
                if (columnIndex >= 0) {
                    row.removeValue(columnIndex);
                }
            }
            this.columnKeys.remove(columnKey);
        }

try to fix hunk: 6
replace from 378 with range 1 to
            int i = rowData.getIndex(columnKey);
            if (i >= 0) {
                rowData.removeValue(i);
            }

patches are written to file
running tests...
used time: Finished in 29.58 seconds
Failing tests: 4
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_3
Can independently fix []
Could not fix independently
processed: 1111101
pattern: 1111110
try to fix hunk: 0
delete from 231 with range 1
try to fix hunk: 1
replace from 233 with range 1 to
        int index = rowData.getIndex(columnKey);
        if (index >= 0) {
            return rowData.getObject(index);

try to fix hunk: 2
insert before 318 with         allNull = true;

try to fix hunk: 3
insert before 319 with         for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
             item++) {
            row = (KeyedObjects) this.rows.get(item);
            int columnIndex = row.getIndex(columnKey);
            if (columnIndex >= 0 && row.getObject(columnIndex) != null) {
                allNull = false;
                break;
            }
        }

try to fix hunk: 4
insert before 320 with         if (allNull) {
            for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
                 item++) {
                row = (KeyedObjects) this.rows.get(item);
                int columnIndex = row.getIndex(columnKey);
                if (columnIndex >= 0) {
                    row.removeValue(columnIndex);
                }
            }
            this.columnKeys.remove(columnKey);
        }

try to fix hunk: 5
insert before 345 with         if (index < 0) {
            throw new UnknownKeyException("Row key (" + rowKey 
                    + ") not recognised.");
        }

patches are written to file
running tests...
used time: Finished in 28.46 seconds
Failing tests: 8
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_3
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_0
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_1
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_2
	org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_3
Can independently fix []
Could not fix independently
processed: 1111110
pattern: 1111111
try to fix hunk: 0
delete from 231 with range 1
try to fix hunk: 1
replace from 233 with range 1 to
        int index = rowData.getIndex(columnKey);
        if (index >= 0) {
            return rowData.getObject(index);

try to fix hunk: 2
insert before 318 with         allNull = true;

try to fix hunk: 3
insert before 319 with         for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
             item++) {
            row = (KeyedObjects) this.rows.get(item);
            int columnIndex = row.getIndex(columnKey);
            if (columnIndex >= 0 && row.getObject(columnIndex) != null) {
                allNull = false;
                break;
            }
        }

try to fix hunk: 4
insert before 320 with         if (allNull) {
            for (int item = 0, itemCount = this.rows.size(); item < itemCount; 
                 item++) {
                row = (KeyedObjects) this.rows.get(item);
                int columnIndex = row.getIndex(columnKey);
                if (columnIndex >= 0) {
                    row.removeValue(columnIndex);
                }
            }
            this.columnKeys.remove(columnKey);
        }

try to fix hunk: 5
insert before 345 with         if (index < 0) {
            throw new UnknownKeyException("Row key (" + rowKey 
                    + ") not recognised.");
        }

try to fix hunk: 6
replace from 378 with range 1 to
            int i = rowData.getIndex(columnKey);
            if (i >= 0) {
                rowData.removeValue(i);
            }

patches are written to file
running tests...
used time: Finished in 32.12 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 1111111
Find 4 new bugs
