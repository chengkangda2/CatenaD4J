{
    "original": {
        "num_of_hunks": 7,
        "0": {
            "file_name": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
            "replaced_with": "    options.outputCharset = getOutputCharset();\n",
            "patch_type": "insert",
            "next_line_no": 159
        },
        "1": {
            "file_name": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
            "from_line_no": 518,
            "to_line_no": 522,
            "replaced": "    if (inputCharset == Charsets.UTF_8) {\n      options.outputCharset = Charsets.US_ASCII;\n    } else {\n      options.outputCharset = inputCharset;\n    }\n",
            "patch_type": "delete",
            "next_line_no": 523
        },
        "2": {
            "file_name": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
            "replaced_with": "  private String getOutputCharset() throws FlagUsageException {\n    if (!config.charset.isEmpty()) {\n      if (!Charset.isSupported(config.charset)) {\n        throw new FlagUsageException(config.charset +\n            \" is not a valid charset name.\");\n      }\n      return config.charset;\n    }\n    return \"US-ASCII\";\n  }\n",
            "patch_type": "insert",
            "next_line_no": 693
        },
        "3": {
            "file_name": "src/com/google/javascript/jscomp/CommandLineRunner.java",
            "from_line_no": 471,
            "to_line_no": 471,
            "replaced": "    initOptionsFromFlags(options);\n",
            "patch_type": "delete",
            "next_line_no": 472
        },
        "4": {
            "file_name": "src/com/google/javascript/jscomp/Compiler.java",
            "from_line_no": 1362,
            "to_line_no": 1362,
            "replaced_with": "    Charset charset = options.outputCharset != null ?\n        Charset.forName(options.outputCharset) : null;\n",
            "replaced": "    Charset charset = options.outputCharset;\n",
            "patch_type": "replace",
            "next_line_no": 1363
        },
        "5": {
            "file_name": "src/com/google/javascript/jscomp/CompilerOptions.java",
            "from_line_no": 588,
            "to_line_no": 588,
            "replaced_with": "  String outputCharset;\n",
            "replaced": "  public Charset outputCharset;\n",
            "patch_type": "replace",
            "next_line_no": 589
        },
        "6": {
            "file_name": "src/com/google/javascript/jscomp/CompilerOptions.java",
            "replaced_with": "  public void setOutputCharset(String charsetName) {\n    this.outputCharset = charsetName;\n  }\n",
            "patch_type": "insert",
            "next_line_no": 960
        }
    },
    "method": {
        "failing_tests": [
            "com.google.javascript.jscomp.CommandLineRunnerTest::testCharSetExpansion"
        ],
        "com.google.javascript.jscomp.CommandLineRunnerTest::testCharSetExpansion": {
            "file_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
            "Instance": "Begin: Pos(383, 10)\nEnd: Pos(389, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Closure_149/test//com/google/javascript/jscomp/CommandLineRunnerTest.java\nName: testCharSetExpansion\nChilds: [StatementAssertion<Begin: Pos(384, 5), End: Pos(384, 17)>,\nStatementAssertion<Begin: Pos(385, 5), End: Pos(385, 70)>,\nStatementAssertion<Begin: Pos(387, 5), End: Pos(387, 17)>,\nStatementAssertion<Begin: Pos(388, 5), End: Pos(388, 67)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Closure_149/test//com/google/javascript/jscomp/CommandLineRunnerTest.java",
            "name": "testCharSetExpansion",
            "begin": "Pos(383, 10)",
            "end": "Pos(389, 3)",
            "begin_line_no": 383,
            "end_line_no": 389,
            "child": [
                "Begin: Pos(384, 5)\nEnd: Pos(384, 17)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(385, 5)\nEnd: Pos(385, 70)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(387, 5)\nEnd: Pos(387, 17)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(388, 5)\nEnd: Pos(388, 67)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "  public void testCharSetExpansion$catena_0() {\n    testSame(\"\");                                                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertEquals(\"US-ASCII\", lastCompiler.getOptions().outputCharset);                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    args.add(\"--charset=UTF-8\");\n    try{ testSame(\"\");                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"UTF-8\", lastCompiler.getOptions().outputCharset);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testCharSetExpansion$catena_1() {\n    try{ testSame(\"\");                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertEquals(\"US-ASCII\", lastCompiler.getOptions().outputCharset);                                      /***** ORIGINAL ASSERTION IS HERE *****/\n    args.add(\"--charset=UTF-8\");\n    try{ testSame(\"\");                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"UTF-8\", lastCompiler.getOptions().outputCharset);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testCharSetExpansion$catena_2() {\n    try{ testSame(\"\");                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"US-ASCII\", lastCompiler.getOptions().outputCharset);                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    args.add(\"--charset=UTF-8\");\n    testSame(\"\");                                                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertEquals(\"UTF-8\", lastCompiler.getOptions().outputCharset);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testCharSetExpansion$catena_3() {\n    try{ testSame(\"\");                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"US-ASCII\", lastCompiler.getOptions().outputCharset);                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    args.add(\"--charset=UTF-8\");\n    try{ testSame(\"\");                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertEquals(\"UTF-8\", lastCompiler.getOptions().outputCharset);                                         /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            ],
            "func": {
                "0": "  public void testCharSetExpansion$catena_0() {\n    testSame(\"\");                                                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertEquals(\"US-ASCII\", lastCompiler.getOptions().outputCharset);                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    args.add(\"--charset=UTF-8\");\n    try{ testSame(\"\");                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"UTF-8\", lastCompiler.getOptions().outputCharset);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "1": "  public void testCharSetExpansion$catena_1() {\n    try{ testSame(\"\");                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertEquals(\"US-ASCII\", lastCompiler.getOptions().outputCharset);                                      /***** ORIGINAL ASSERTION IS HERE *****/\n    args.add(\"--charset=UTF-8\");\n    try{ testSame(\"\");                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"UTF-8\", lastCompiler.getOptions().outputCharset);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "2": "  public void testCharSetExpansion$catena_2() {\n    try{ testSame(\"\");                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"US-ASCII\", lastCompiler.getOptions().outputCharset);                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    args.add(\"--charset=UTF-8\");\n    testSame(\"\");                                                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertEquals(\"UTF-8\", lastCompiler.getOptions().outputCharset);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "3": "  public void testCharSetExpansion$catena_3() {\n    try{ testSame(\"\");                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"US-ASCII\", lastCompiler.getOptions().outputCharset);                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    args.add(\"--charset=UTF-8\");\n    try{ testSame(\"\");                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertEquals(\"UTF-8\", lastCompiler.getOptions().outputCharset);                                         /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            }
        }
    },
    "1110110": {
        "failing_tests": [
            "com.google.javascript.jscomp.CommandLineRunnerTest::testCharSetExpansion$catena_1",
            "com.google.javascript.jscomp.CommandLineRunnerTest::testCharSetExpansion$catena_3"
        ]
    }
}