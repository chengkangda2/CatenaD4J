{
    "original": {
        "num_of_hunks": 3,
        "0": {
            "file_name": "src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
            "from_line_no": 275,
            "to_line_no": 276,
            "replaced_with": "            if (MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) {\n",
            "replaced": "            if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {\n                if (row == null) {\n",
            "patch_type": "replace",
            "next_line_no": 277
        },
        "1": {
            "file_name": "src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
            "from_line_no": 278,
            "to_line_no": 278,
            "replaced_with": "            } else if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {\n",
            "replaced": "                } else {\n",
            "patch_type": "replace",
            "next_line_no": 279
        },
        "2": {
            "file_name": "src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
            "from_line_no": 280,
            "to_line_no": 280,
            "replaced": "                }\n",
            "patch_type": "delete",
            "next_line_no": 281
        }
    },
    "method": {
        "failing_tests": [
            "org.apache.commons.math.optimization.linear.SimplexSolverTest::testSingleVariableAndConstraint"
        ],
        "org.apache.commons.math.optimization.linear.SimplexSolverTest::testSingleVariableAndConstraint": {
            "file_path": "src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java",
            "Instance": "Begin: Pos(67, 5)\nEnd: Pos(77, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Math_87/src/test//org/apache/commons/math/optimization/linear/SimplexSolverTest.java\nName: testSingleVariableAndConstraint\nChilds: [StatementAssertion<Begin: Pos(75, 9), End: Pos(75, 56)>,\nStatementAssertion<Begin: Pos(76, 9), End: Pos(76, 53)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Math_87/src/test//org/apache/commons/math/optimization/linear/SimplexSolverTest.java",
            "name": "testSingleVariableAndConstraint",
            "begin": "Pos(67, 5)",
            "end": "Pos(77, 5)",
            "begin_line_no": 67,
            "end_line_no": 77,
            "child": [
                "Begin: Pos(75, 9)\nEnd: Pos(75, 56)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(76, 9)\nEnd: Pos(76, 53)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    @Test\n    public void testSingleVariableAndConstraint$catena_0() throws OptimizationException {\n        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 3 }, 0);\n        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n        constraints.add(new LinearConstraint(new double[] { 1 }, Relationship.LEQ, 10));\n\n        SimplexSolver solver = new SimplexSolver();\n        RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, false);\n        assertEquals(10.0, solution.getPoint()[0], 0.0);                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(30.0, solution.getValue(), 0.0);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testSingleVariableAndConstraint$catena_1() throws OptimizationException {\n        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 3 }, 0);\n        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n        constraints.add(new LinearConstraint(new double[] { 1 }, Relationship.LEQ, 10));\n\n        SimplexSolver solver = new SimplexSolver();\n        RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, false);\n        try{ assertEquals(10.0, solution.getPoint()[0], 0.0);                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(30.0, solution.getValue(), 0.0);                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    @Test\n    public void testSingleVariableAndConstraint$catena_0() throws OptimizationException {\n        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 3 }, 0);\n        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n        constraints.add(new LinearConstraint(new double[] { 1 }, Relationship.LEQ, 10));\n\n        SimplexSolver solver = new SimplexSolver();\n        RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, false);\n        assertEquals(10.0, solution.getPoint()[0], 0.0);                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(30.0, solution.getValue(), 0.0);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    @Test\n    public void testSingleVariableAndConstraint$catena_1() throws OptimizationException {\n        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 3 }, 0);\n        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n        constraints.add(new LinearConstraint(new double[] { 1 }, Relationship.LEQ, 10));\n\n        SimplexSolver solver = new SimplexSolver();\n        RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, false);\n        try{ assertEquals(10.0, solution.getPoint()[0], 0.0);                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(30.0, solution.getValue(), 0.0);                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        }
    },
    "111": {
        "failing_tests": [
            "org.apache.commons.math.optimization.linear.SimplexSolverTest::testSingleVariableAndConstraint$catena_1",
            "org.apache.commons.math.optimization.linear.SimplexSolverTest::testSingleVariableAndConstraint$catena_0"
        ]
    }
}