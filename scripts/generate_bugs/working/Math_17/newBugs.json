{
    "original": {
        "num_of_hunks": 2,
        "0": {
            "file_name": "src/main/java/org/apache/commons/math3/dfp/Dfp.java",
            "replaced_with": "        if (x >= 0 && x < RADIX) {\n",
            "patch_type": "insert",
            "next_line_no": 1603
        },
        "1": {
            "file_name": "src/main/java/org/apache/commons/math3/dfp/Dfp.java",
            "replaced_with": "        } else {\n            return multiply(newInstance(x));\n        }\n",
            "patch_type": "insert",
            "next_line_no": 1604
        }
    },
    "method": {
        "failing_tests": [
            "org.apache.commons.math3.dfp.DfpTest::testMultiply"
        ],
        "org.apache.commons.math3.dfp.DfpTest::testMultiply": {
            "file_path": "src/test/java/org/apache/commons/math3/dfp/DfpTest.java",
            "Instance": "Begin: Pos(755, 5)\nEnd: Pos(920, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Math_17/src/test/java//org/apache/commons/math3/dfp/DfpTest.java\nName: testMultiply\nChilds: [StatementAssertion<Begin: Pos(758, 9), End: Pos(760, 31)>,\nStatementAssertion<Begin: Pos(762, 9), End: Pos(764, 31)>,\nStatementAssertion<Begin: Pos(766, 9), End: Pos(768, 31)>,\nStatementAssertion<Begin: Pos(770, 9), End: Pos(772, 31)>,\nStatementAssertion<Begin: Pos(775, 9), End: Pos(777, 31)>,\nStatementAssertion<Begin: Pos(779, 9), End: Pos(781, 31)>,\nStatementAssertion<Begin: Pos(783, 9), End: Pos(785, 31)>,\nStatementAssertion<Begin: Pos(787, 9), End: Pos(789, 31)>,\nStatementAssertion<Begin: Pos(791, 9), End: Pos(793, 31)>,\nStatementAssertion<Begin: Pos(795, 9), End: Pos(797, 32)>,\nStatementAssertion<Begin: Pos(801, 9), End: Pos(803, 32)>,\nStatementAssertion<Begin: Pos(805, 9), End: Pos(807, 32)>,\nStatementAssertion<Begin: Pos(809, 9), End: Pos(811, 32)>,\nStatementAssertion<Begin: Pos(813, 9), End: Pos(815, 32)>,\nStatementAssertion<Begin: Pos(817, 9), End: Pos(819, 32)>,\nStatementAssertion<Begin: Pos(821, 9), End: Pos(823, 32)>,\nStatementAssertion<Begin: Pos(825, 9), End: Pos(827, 32)>,\nStatementAssertion<Begin: Pos(829, 9), End: Pos(831, 32)>,\nStatementAssertion<Begin: Pos(833, 9), End: Pos(835, 34)>,\nStatementAssertion<Begin: Pos(837, 9), End: Pos(839, 53)>,\nStatementAssertion<Begin: Pos(841, 9), End: Pos(843, 32)>,\nStatementAssertion<Begin: Pos(845, 9), End: Pos(847, 53)>,\nStatementAssertion<Begin: Pos(849, 9), End: Pos(851, 32)>,\nStatementAssertion<Begin: Pos(853, 9), End: Pos(855, 54)>,\nStatementAssertion<Begin: Pos(857, 9), End: Pos(859, 32)>,\nStatementAssertion<Begin: Pos(861, 9), End: Pos(863, 32)>,\nStatementAssertion<Begin: Pos(865, 9), End: Pos(867, 32)>,\nStatementAssertion<Begin: Pos(869, 9), End: Pos(871, 32)>,\nStatementAssertion<Begin: Pos(873, 9), End: Pos(875, 52)>,\nStatementAssertion<Begin: Pos(877, 9), End: Pos(879, 52)>,\nStatementAssertion<Begin: Pos(881, 9), End: Pos(883, 32)>,\nStatementAssertion<Begin: Pos(885, 9), End: Pos(887, 32)>,\nStatementAssertion<Begin: Pos(889, 9), End: Pos(891, 32)>,\nStatementAssertion<Begin: Pos(893, 9), End: Pos(895, 32)>,\nStatementAssertion<Begin: Pos(897, 9), End: Pos(899, 32)>,\nStatementAssertion<Begin: Pos(901, 9), End: Pos(903, 52)>,\nStatementAssertion<Begin: Pos(905, 9), End: Pos(907, 32)>,\nStatementAssertion<Begin: Pos(909, 9), End: Pos(911, 32)>,\nStatementAssertion<Begin: Pos(913, 9), End: Pos(915, 32)>,\nStatementAssertion<Begin: Pos(917, 9), End: Pos(919, 32)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Math_17/src/test/java//org/apache/commons/math3/dfp/DfpTest.java",
            "name": "testMultiply",
            "begin": "Pos(755, 5)",
            "end": "Pos(920, 5)",
            "begin_line_no": 755,
            "end_line_no": 920,
            "child": [
                "Begin: Pos(758, 9)\nEnd: Pos(760, 31)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(762, 9)\nEnd: Pos(764, 31)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(766, 9)\nEnd: Pos(768, 31)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(770, 9)\nEnd: Pos(772, 31)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(775, 9)\nEnd: Pos(777, 31)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(779, 9)\nEnd: Pos(781, 31)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(783, 9)\nEnd: Pos(785, 31)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(787, 9)\nEnd: Pos(789, 31)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(791, 9)\nEnd: Pos(793, 31)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(795, 9)\nEnd: Pos(797, 32)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(801, 9)\nEnd: Pos(803, 32)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(805, 9)\nEnd: Pos(807, 32)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(809, 9)\nEnd: Pos(811, 32)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(813, 9)\nEnd: Pos(815, 32)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(817, 9)\nEnd: Pos(819, 32)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(821, 9)\nEnd: Pos(823, 32)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(825, 9)\nEnd: Pos(827, 32)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(829, 9)\nEnd: Pos(831, 32)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(833, 9)\nEnd: Pos(835, 34)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(837, 9)\nEnd: Pos(839, 53)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(841, 9)\nEnd: Pos(843, 32)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(845, 9)\nEnd: Pos(847, 53)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(849, 9)\nEnd: Pos(851, 32)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(853, 9)\nEnd: Pos(855, 54)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(857, 9)\nEnd: Pos(859, 32)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(861, 9)\nEnd: Pos(863, 32)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(865, 9)\nEnd: Pos(867, 32)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(869, 9)\nEnd: Pos(871, 32)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(873, 9)\nEnd: Pos(875, 52)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(877, 9)\nEnd: Pos(879, 52)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(881, 9)\nEnd: Pos(883, 32)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(885, 9)\nEnd: Pos(887, 32)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(889, 9)\nEnd: Pos(891, 32)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(893, 9)\nEnd: Pos(895, 32)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(897, 9)\nEnd: Pos(899, 32)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(901, 9)\nEnd: Pos(903, 52)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(905, 9)\nEnd: Pos(907, 32)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(909, 9)\nEnd: Pos(911, 32)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(913, 9)\nEnd: Pos(915, 32)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(917, 9)\nEnd: Pos(919, 32)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    @Test\n    public void testMultiply$catena_0()\n    {\n        test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testMultiply$catena_1()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testMultiply$catena_2()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testMultiply$catena_3()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testMultiply$catena_4()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testMultiply$catena_5()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testMultiply$catena_6()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testMultiply$catena_7()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testMultiply$catena_8()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testMultiply$catena_9()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testMultiply$catena_10()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testMultiply$catena_11()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testMultiply$catena_12()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testMultiply$catena_13()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testMultiply$catena_14()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testMultiply$catena_15()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testMultiply$catena_16()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testMultiply$catena_17()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testMultiply$catena_18()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testMultiply$catena_19()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testMultiply$catena_20()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testMultiply$catena_21()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testMultiply$catena_22()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testMultiply$catena_23()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testMultiply$catena_24()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testMultiply$catena_25()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testMultiply$catena_26()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testMultiply$catena_27()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testMultiply$catena_28()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testMultiply$catena_29()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testMultiply$catena_30()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testMultiply$catena_31()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testMultiply$catena_32()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testMultiply$catena_33()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testMultiply$catena_34()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testMultiply$catena_35()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testMultiply$catena_36()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testMultiply$catena_37()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testMultiply$catena_38()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testMultiply$catena_39()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    @Test\n    public void testMultiply$catena_0()\n    {\n        test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    @Test\n    public void testMultiply$catena_1()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "2": "    @Test\n    public void testMultiply$catena_2()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "3": "    @Test\n    public void testMultiply$catena_3()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "4": "    @Test\n    public void testMultiply$catena_4()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "5": "    @Test\n    public void testMultiply$catena_5()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "6": "    @Test\n    public void testMultiply$catena_6()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "7": "    @Test\n    public void testMultiply$catena_7()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "8": "    @Test\n    public void testMultiply$catena_8()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "9": "    @Test\n    public void testMultiply$catena_9()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "10": "    @Test\n    public void testMultiply$catena_10()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "11": "    @Test\n    public void testMultiply$catena_11()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "12": "    @Test\n    public void testMultiply$catena_12()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "13": "    @Test\n    public void testMultiply$catena_13()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "14": "    @Test\n    public void testMultiply$catena_14()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "15": "    @Test\n    public void testMultiply$catena_15()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "16": "    @Test\n    public void testMultiply$catena_16()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "17": "    @Test\n    public void testMultiply$catena_17()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "18": "    @Test\n    public void testMultiply$catena_18()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "19": "    @Test\n    public void testMultiply$catena_19()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "20": "    @Test\n    public void testMultiply$catena_20()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "21": "    @Test\n    public void testMultiply$catena_21()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "22": "    @Test\n    public void testMultiply$catena_22()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "23": "    @Test\n    public void testMultiply$catena_23()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "24": "    @Test\n    public void testMultiply$catena_24()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "25": "    @Test\n    public void testMultiply$catena_25()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "26": "    @Test\n    public void testMultiply$catena_26()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "27": "    @Test\n    public void testMultiply$catena_27()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "28": "    @Test\n    public void testMultiply$catena_28()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "29": "    @Test\n    public void testMultiply$catena_29()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "30": "    @Test\n    public void testMultiply$catena_30()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "31": "    @Test\n    public void testMultiply$catena_31()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "32": "    @Test\n    public void testMultiply$catena_32()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "33": "    @Test\n    public void testMultiply$catena_33()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "34": "    @Test\n    public void testMultiply$catena_34()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "35": "    @Test\n    public void testMultiply$catena_35()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "36": "    @Test\n    public void testMultiply$catena_36()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "37": "    @Test\n    public void testMultiply$catena_37()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "38": "    @Test\n    public void testMultiply$catena_38()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "39": "    @Test\n    public void testMultiply$catena_39()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        }
    },
    "11": {
        "failing_tests": [
            "org.apache.commons.math3.dfp.DfpTest::testMultiply$catena_39",
            "org.apache.commons.math3.dfp.DfpTest::testMultiply$catena_37",
            "org.apache.commons.math3.dfp.DfpTest::testMultiply$catena_38"
        ]
    }
}