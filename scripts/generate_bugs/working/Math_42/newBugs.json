{
    "original": {
        "num_of_hunks": 2,
        "0": {
            "file_name": "src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
            "replaced_with": "          if (basicRow != null && basicRow == 0) {\n",
            "patch_type": "insert",
            "next_line_no": 410
        },
        "1": {
            "file_name": "src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
            "from_line_no": 413,
            "to_line_no": 413,
            "replaced_with": "              coefficients[i] = 0;\n          } else if (basicRows.contains(basicRow)) {\n",
            "replaced": "          if (basicRows.contains(basicRow)) {\n",
            "patch_type": "replace",
            "next_line_no": 414
        }
    },
    "method": {
        "failing_tests": [
            "org.apache.commons.math.optimization.linear.SimplexSolverTest::testMath713NegativeVariable"
        ],
        "org.apache.commons.math.optimization.linear.SimplexSolverTest::testMath713NegativeVariable": {
            "file_path": "src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java",
            "Instance": "Begin: Pos(32, 5)\nEnd: Pos(44, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Math_42/src/test/java//org/apache/commons/math/optimization/linear/SimplexSolverTest.java\nName: testMath713NegativeVariable\nChilds: [StatementAssertion<Begin: Pos(42, 9), End: Pos(42, 91)>,\nStatementAssertion<Begin: Pos(43, 9), End: Pos(43, 91)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Math_42/src/test/java//org/apache/commons/math/optimization/linear/SimplexSolverTest.java",
            "name": "testMath713NegativeVariable",
            "begin": "Pos(32, 5)",
            "end": "Pos(44, 5)",
            "begin_line_no": 32,
            "end_line_no": 44,
            "child": [
                "Begin: Pos(42, 9)\nEnd: Pos(42, 91)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(43, 9)\nEnd: Pos(43, 91)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    @Test\n    public void testMath713NegativeVariable$catena_0() {\n        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] {1.0, 1.0}, 0.0d);\n        ArrayList<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n        constraints.add(new LinearConstraint(new double[] {1, 0}, Relationship.EQ, 1));\n\n        double epsilon = 1e-6;\n        SimplexSolver solver = new SimplexSolver();\n        RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MINIMIZE, true);\n\n        Assert.assertTrue(Precision.compareTo(solution.getPoint()[0], 0.0d, epsilon) >= 0);                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ Assert.assertTrue(Precision.compareTo(solution.getPoint()[1], 0.0d, epsilon) >= 0);            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testMath713NegativeVariable$catena_1() {\n        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] {1.0, 1.0}, 0.0d);\n        ArrayList<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n        constraints.add(new LinearConstraint(new double[] {1, 0}, Relationship.EQ, 1));\n\n        double epsilon = 1e-6;\n        SimplexSolver solver = new SimplexSolver();\n        RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MINIMIZE, true);\n\n        try{ Assert.assertTrue(Precision.compareTo(solution.getPoint()[0], 0.0d, epsilon) >= 0);            }catch(Throwable __SHOULD_BE_IGNORED){}\n        Assert.assertTrue(Precision.compareTo(solution.getPoint()[1], 0.0d, epsilon) >= 0);                 /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    @Test\n    public void testMath713NegativeVariable$catena_0() {\n        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] {1.0, 1.0}, 0.0d);\n        ArrayList<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n        constraints.add(new LinearConstraint(new double[] {1, 0}, Relationship.EQ, 1));\n\n        double epsilon = 1e-6;\n        SimplexSolver solver = new SimplexSolver();\n        RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MINIMIZE, true);\n\n        Assert.assertTrue(Precision.compareTo(solution.getPoint()[0], 0.0d, epsilon) >= 0);                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ Assert.assertTrue(Precision.compareTo(solution.getPoint()[1], 0.0d, epsilon) >= 0);            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    @Test\n    public void testMath713NegativeVariable$catena_1() {\n        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] {1.0, 1.0}, 0.0d);\n        ArrayList<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n        constraints.add(new LinearConstraint(new double[] {1, 0}, Relationship.EQ, 1));\n\n        double epsilon = 1e-6;\n        SimplexSolver solver = new SimplexSolver();\n        RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MINIMIZE, true);\n\n        try{ Assert.assertTrue(Precision.compareTo(solution.getPoint()[0], 0.0d, epsilon) >= 0);            }catch(Throwable __SHOULD_BE_IGNORED){}\n        Assert.assertTrue(Precision.compareTo(solution.getPoint()[1], 0.0d, epsilon) >= 0);                 /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        }
    },
    "11": {
        "failing_tests": [
            "org.apache.commons.math.optimization.linear.SimplexSolverTest::testMath713NegativeVariable$catena_1"
        ]
    }
}