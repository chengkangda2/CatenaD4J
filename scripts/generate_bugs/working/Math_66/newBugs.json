{
    "original": {
        "num_of_hunks": 12,
        "0": {
            "file_name": "src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java",
            "from_line_no": 44,
            "to_line_no": 44,
            "replaced_with": "        setMaxEvaluations(1000);\n",
            "replaced": "        setMaxEvaluations(Integer.MAX_VALUE);\n",
            "patch_type": "replace",
            "next_line_no": 45
        },
        "1": {
            "file_name": "src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java",
            "from_line_no": 46,
            "to_line_no": 47,
            "replaced_with": "        setAbsoluteAccuracy(1e-11);\n        setRelativeAccuracy(1e-9);\n",
            "replaced": "        setAbsoluteAccuracy(1E-10);\n        setRelativeAccuracy(1.0e-14);\n",
            "patch_type": "replace",
            "next_line_no": 48
        },
        "2": {
            "file_name": "src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java",
            "from_line_no": 57,
            "to_line_no": 60,
            "replaced": "        throw new UnsupportedOperationException();\n    }\n    public double optimize(final UnivariateRealFunction f, final GoalType goalType, final double min, final double max, final double startValue) throws MaxIterationsExceededException, FunctionEvaluationException {\n        clearResult();\n",
            "patch_type": "delete",
            "next_line_no": 61
        },
        "3": {
            "file_name": "src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java",
            "from_line_no": 62,
            "to_line_no": 62,
            "replaced_with": "                        getMin(), getStartValue(), getMax(),\n",
            "replaced": "                        f, goalType, min, startValue, max,\n",
            "patch_type": "replace",
            "next_line_no": 63
        },
        "4": {
            "file_name": "src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java",
            "from_line_no": 65,
            "to_line_no": 67,
            "replaced": "    public double optimize(final UnivariateRealFunction f, final GoalType goalType, final double min, final double max) throws MaxIterationsExceededException, FunctionEvaluationException {\n        return optimize(f, goalType, min, max, min + GOLDEN_SECTION * (max - min));\n    }\n",
            "patch_type": "delete",
            "next_line_no": 68
        },
        "5": {
            "file_name": "src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java",
            "from_line_no": 94,
            "to_line_no": 95,
            "replaced": "                            UnivariateRealFunction f,\n                            GoalType goalType,\n",
            "patch_type": "delete",
            "next_line_no": 96
        },
        "6": {
            "file_name": "src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java",
            "from_line_no": 119,
            "to_line_no": 120,
            "replaced_with": "        double fx = computeObjectiveValue(x);\n        if (!isMinim) {\n",
            "replaced": "        double fx = computeObjectiveValue(f, x);\n        if (goalType == GoalType.MAXIMIZE) {\n",
            "patch_type": "replace",
            "next_line_no": 121
        },
        "7": {
            "file_name": "src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java",
            "from_line_no": 126,
            "to_line_no": 127,
            "replaced_with": "        while (true) {\n",
            "replaced": "        int count = 0;\n        while (count < maximalIterationCount) {\n",
            "patch_type": "replace",
            "next_line_no": 128
        },
        "8": {
            "file_name": "src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java",
            "from_line_no": 200,
            "to_line_no": 201,
            "replaced_with": "                double fu = computeObjectiveValue(u);\n                if (!isMinim) {\n",
            "replaced": "                double fu = computeObjectiveValue(f, u);\n                if (goalType == GoalType.MAXIMIZE) {\n",
            "patch_type": "replace",
            "next_line_no": 202
        },
        "9": {
            "file_name": "src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java",
            "from_line_no": 238,
            "to_line_no": 238,
            "replaced_with": "                setFunctionValue(isMinim ? fx : -fx);\n",
            "replaced": "                setResult(x, (goalType == GoalType.MAXIMIZE) ? -fx : fx, count);\n",
            "patch_type": "replace",
            "next_line_no": 239
        },
        "10": {
            "file_name": "src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java",
            "from_line_no": 241,
            "to_line_no": 241,
            "replaced_with": "            incrementIterationsCounter();\n",
            "replaced": "            ++count;\n",
            "patch_type": "replace",
            "next_line_no": 242
        },
        "11": {
            "file_name": "src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java",
            "from_line_no": 243,
            "to_line_no": 243,
            "replaced": "        throw new MaxIterationsExceededException(maximalIterationCount);\n",
            "patch_type": "delete",
            "next_line_no": 244
        }
    },
    "method": {
        "failing_tests": [
            "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest::testQuinticMin",
            "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest::testSinMin",
            "org.apache.commons.math.optimization.univariate.BrentOptimizerTest::testQuinticMinStatistics",
            "org.apache.commons.math.optimization.univariate.BrentOptimizerTest::testSinMin"
        ],
        "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest::testQuinticMin": {
            "file_path": "src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java",
            "Instance": "Begin: Pos(55, 5)\nEnd: Pos(100, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Math_66/src/test/java//org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java\nName: testQuinticMin\nChilds: [StatementAssertion<Begin: Pos(71, 13), End: Pos(71, 57)>,\nStatementAssertion<Begin: Pos(75, 13), End: Pos(75, 43)>,\nStatementAssertion<Begin: Pos(79, 13), End: Pos(79, 57)>,\nStatementAssertion<Begin: Pos(83, 13), End: Pos(83, 43)>,\nStatementAssertion<Begin: Pos(87, 9), End: Pos(87, 59)>,\nStatementAssertion<Begin: Pos(88, 9), End: Pos(88, 74)>,\nStatementAssertion<Begin: Pos(89, 9), End: Pos(89, 82)>,\nStatementAssertion<Begin: Pos(94, 13), End: Pos(94, 71)>,\nStatementAssertion<Begin: Pos(96, 9), End: Pos(96, 57)>,\nStatementAssertion<Begin: Pos(97, 9), End: Pos(97, 57)>,\nStatementAssertion<Begin: Pos(98, 9), End: Pos(98, 57)>,\nStatementAssertion<Begin: Pos(99, 9), End: Pos(99, 57)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Math_66/src/test/java//org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java",
            "name": "testQuinticMin",
            "begin": "Pos(55, 5)",
            "end": "Pos(100, 5)",
            "begin_line_no": 55,
            "end_line_no": 100,
            "child": [
                "Begin: Pos(71, 13)\nEnd: Pos(71, 57)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(75, 13)\nEnd: Pos(75, 43)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(79, 13)\nEnd: Pos(79, 57)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(83, 13)\nEnd: Pos(83, 43)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(87, 9)\nEnd: Pos(87, 59)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(88, 9)\nEnd: Pos(88, 74)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(89, 9)\nEnd: Pos(89, 82)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(94, 13)\nEnd: Pos(94, 71)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(96, 9)\nEnd: Pos(96, 57)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(97, 9)\nEnd: Pos(97, 57)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(98, 9)\nEnd: Pos(98, 57)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(99, 9)\nEnd: Pos(99, 57)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    @Test\n    public void testQuinticMin$catena_0() throws MathException {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer();\n        underlying.setRelativeAccuracy(1e-15);\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(4312000053L);\n        MultiStartUnivariateRealOptimizer minimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n        minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());\n        minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());\n\n        try {\n            minimizer.getOptima();\n            fail(\"an exception should have been thrown\");                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            minimizer.getOptimaValues();\n            try{ fail(\"an exception should have been thrown\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        double result = minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2);\n        try{ assertEquals(-0.2719561270319131, result, 1.0e-13);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.2719561270319131, minimizer.getResult(), 1.0e-13);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.04433426954946637, minimizer.getFunctionValue(), 1.0e-13);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double[] optima = minimizer.getOptima();\n        double[] optimaValues = minimizer.getOptimaValues();\n        for (int i = 0; i < optima.length; ++i) {\n            try{ assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertTrue(minimizer.getEvaluations()    >= 120);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations()    <= 170);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() >= 120);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() <= 170);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testQuinticMin$catena_1() throws MathException {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer();\n        underlying.setRelativeAccuracy(1e-15);\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(4312000053L);\n        MultiStartUnivariateRealOptimizer minimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n        minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());\n        minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());\n\n        try {\n            minimizer.getOptima();\n            try{ fail(\"an exception should have been thrown\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            fail(\"wrong exception caught\");                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n        try {\n            minimizer.getOptimaValues();\n            try{ fail(\"an exception should have been thrown\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        double result = minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2);\n        try{ assertEquals(-0.2719561270319131, result, 1.0e-13);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.2719561270319131, minimizer.getResult(), 1.0e-13);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.04433426954946637, minimizer.getFunctionValue(), 1.0e-13);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double[] optima = minimizer.getOptima();\n        double[] optimaValues = minimizer.getOptimaValues();\n        for (int i = 0; i < optima.length; ++i) {\n            try{ assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertTrue(minimizer.getEvaluations()    >= 120);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations()    <= 170);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() >= 120);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() <= 170);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testQuinticMin$catena_2() throws MathException {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer();\n        underlying.setRelativeAccuracy(1e-15);\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(4312000053L);\n        MultiStartUnivariateRealOptimizer minimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n        minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());\n        minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());\n\n        try {\n            minimizer.getOptima();\n            try{ fail(\"an exception should have been thrown\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            minimizer.getOptimaValues();\n            fail(\"an exception should have been thrown\");                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        double result = minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2);\n        try{ assertEquals(-0.2719561270319131, result, 1.0e-13);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.2719561270319131, minimizer.getResult(), 1.0e-13);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.04433426954946637, minimizer.getFunctionValue(), 1.0e-13);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double[] optima = minimizer.getOptima();\n        double[] optimaValues = minimizer.getOptimaValues();\n        for (int i = 0; i < optima.length; ++i) {\n            try{ assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertTrue(minimizer.getEvaluations()    >= 120);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations()    <= 170);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() >= 120);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() <= 170);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testQuinticMin$catena_3() throws MathException {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer();\n        underlying.setRelativeAccuracy(1e-15);\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(4312000053L);\n        MultiStartUnivariateRealOptimizer minimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n        minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());\n        minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());\n\n        try {\n            minimizer.getOptima();\n            try{ fail(\"an exception should have been thrown\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            minimizer.getOptimaValues();\n            try{ fail(\"an exception should have been thrown\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            fail(\"wrong exception caught\");                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n\n        double result = minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2);\n        try{ assertEquals(-0.2719561270319131, result, 1.0e-13);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.2719561270319131, minimizer.getResult(), 1.0e-13);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.04433426954946637, minimizer.getFunctionValue(), 1.0e-13);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double[] optima = minimizer.getOptima();\n        double[] optimaValues = minimizer.getOptimaValues();\n        for (int i = 0; i < optima.length; ++i) {\n            try{ assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertTrue(minimizer.getEvaluations()    >= 120);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations()    <= 170);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() >= 120);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() <= 170);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testQuinticMin$catena_4() throws MathException {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer();\n        underlying.setRelativeAccuracy(1e-15);\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(4312000053L);\n        MultiStartUnivariateRealOptimizer minimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n        minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());\n        minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());\n\n        try {\n            minimizer.getOptima();\n            try{ fail(\"an exception should have been thrown\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            minimizer.getOptimaValues();\n            try{ fail(\"an exception should have been thrown\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        double result = minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2);\n        assertEquals(-0.2719561270319131, result, 1.0e-13);                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(-0.2719561270319131, minimizer.getResult(), 1.0e-13);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.04433426954946637, minimizer.getFunctionValue(), 1.0e-13);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double[] optima = minimizer.getOptima();\n        double[] optimaValues = minimizer.getOptimaValues();\n        for (int i = 0; i < optima.length; ++i) {\n            try{ assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertTrue(minimizer.getEvaluations()    >= 120);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations()    <= 170);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() >= 120);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() <= 170);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testQuinticMin$catena_5() throws MathException {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer();\n        underlying.setRelativeAccuracy(1e-15);\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(4312000053L);\n        MultiStartUnivariateRealOptimizer minimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n        minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());\n        minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());\n\n        try {\n            minimizer.getOptima();\n            try{ fail(\"an exception should have been thrown\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            minimizer.getOptimaValues();\n            try{ fail(\"an exception should have been thrown\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        double result = minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2);\n        try{ assertEquals(-0.2719561270319131, result, 1.0e-13);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(-0.2719561270319131, minimizer.getResult(), 1.0e-13);                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(-0.04433426954946637, minimizer.getFunctionValue(), 1.0e-13);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double[] optima = minimizer.getOptima();\n        double[] optimaValues = minimizer.getOptimaValues();\n        for (int i = 0; i < optima.length; ++i) {\n            try{ assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertTrue(minimizer.getEvaluations()    >= 120);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations()    <= 170);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() >= 120);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() <= 170);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testQuinticMin$catena_6() throws MathException {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer();\n        underlying.setRelativeAccuracy(1e-15);\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(4312000053L);\n        MultiStartUnivariateRealOptimizer minimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n        minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());\n        minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());\n\n        try {\n            minimizer.getOptima();\n            try{ fail(\"an exception should have been thrown\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            minimizer.getOptimaValues();\n            try{ fail(\"an exception should have been thrown\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        double result = minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2);\n        try{ assertEquals(-0.2719561270319131, result, 1.0e-13);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.2719561270319131, minimizer.getResult(), 1.0e-13);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(-0.04433426954946637, minimizer.getFunctionValue(), 1.0e-13);                          /***** ORIGINAL ASSERTION IS HERE *****/\n\n        double[] optima = minimizer.getOptima();\n        double[] optimaValues = minimizer.getOptimaValues();\n        for (int i = 0; i < optima.length; ++i) {\n            try{ assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertTrue(minimizer.getEvaluations()    >= 120);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations()    <= 170);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() >= 120);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() <= 170);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testQuinticMin$catena_7() throws MathException {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer();\n        underlying.setRelativeAccuracy(1e-15);\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(4312000053L);\n        MultiStartUnivariateRealOptimizer minimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n        minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());\n        minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());\n\n        try {\n            minimizer.getOptima();\n            try{ fail(\"an exception should have been thrown\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            minimizer.getOptimaValues();\n            try{ fail(\"an exception should have been thrown\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        double result = minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2);\n        try{ assertEquals(-0.2719561270319131, result, 1.0e-13);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.2719561270319131, minimizer.getResult(), 1.0e-13);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.04433426954946637, minimizer.getFunctionValue(), 1.0e-13);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double[] optima = minimizer.getOptima();\n        double[] optimaValues = minimizer.getOptimaValues();\n        for (int i = 0; i < optima.length; ++i) {\n            assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n        try{ assertTrue(minimizer.getEvaluations()    >= 120);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations()    <= 170);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() >= 120);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() <= 170);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testQuinticMin$catena_8() throws MathException {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer();\n        underlying.setRelativeAccuracy(1e-15);\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(4312000053L);\n        MultiStartUnivariateRealOptimizer minimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n        minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());\n        minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());\n\n        try {\n            minimizer.getOptima();\n            try{ fail(\"an exception should have been thrown\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            minimizer.getOptimaValues();\n            try{ fail(\"an exception should have been thrown\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        double result = minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2);\n        try{ assertEquals(-0.2719561270319131, result, 1.0e-13);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.2719561270319131, minimizer.getResult(), 1.0e-13);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.04433426954946637, minimizer.getFunctionValue(), 1.0e-13);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double[] optima = minimizer.getOptima();\n        double[] optimaValues = minimizer.getOptimaValues();\n        for (int i = 0; i < optima.length; ++i) {\n            try{ assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        assertTrue(minimizer.getEvaluations()    >= 120);                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(minimizer.getEvaluations()    <= 170);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() >= 120);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() <= 170);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testQuinticMin$catena_9() throws MathException {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer();\n        underlying.setRelativeAccuracy(1e-15);\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(4312000053L);\n        MultiStartUnivariateRealOptimizer minimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n        minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());\n        minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());\n\n        try {\n            minimizer.getOptima();\n            try{ fail(\"an exception should have been thrown\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            minimizer.getOptimaValues();\n            try{ fail(\"an exception should have been thrown\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        double result = minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2);\n        try{ assertEquals(-0.2719561270319131, result, 1.0e-13);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.2719561270319131, minimizer.getResult(), 1.0e-13);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.04433426954946637, minimizer.getFunctionValue(), 1.0e-13);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double[] optima = minimizer.getOptima();\n        double[] optimaValues = minimizer.getOptimaValues();\n        for (int i = 0; i < optima.length; ++i) {\n            try{ assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertTrue(minimizer.getEvaluations()    >= 120);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(minimizer.getEvaluations()    <= 170);                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(minimizer.getIterationCount() >= 120);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() <= 170);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testQuinticMin$catena_10() throws MathException {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer();\n        underlying.setRelativeAccuracy(1e-15);\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(4312000053L);\n        MultiStartUnivariateRealOptimizer minimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n        minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());\n        minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());\n\n        try {\n            minimizer.getOptima();\n            try{ fail(\"an exception should have been thrown\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            minimizer.getOptimaValues();\n            try{ fail(\"an exception should have been thrown\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        double result = minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2);\n        try{ assertEquals(-0.2719561270319131, result, 1.0e-13);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.2719561270319131, minimizer.getResult(), 1.0e-13);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.04433426954946637, minimizer.getFunctionValue(), 1.0e-13);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double[] optima = minimizer.getOptima();\n        double[] optimaValues = minimizer.getOptimaValues();\n        for (int i = 0; i < optima.length; ++i) {\n            try{ assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertTrue(minimizer.getEvaluations()    >= 120);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations()    <= 170);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(minimizer.getIterationCount() >= 120);                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(minimizer.getIterationCount() <= 170);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testQuinticMin$catena_11() throws MathException {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer();\n        underlying.setRelativeAccuracy(1e-15);\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(4312000053L);\n        MultiStartUnivariateRealOptimizer minimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n        minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());\n        minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());\n\n        try {\n            minimizer.getOptima();\n            try{ fail(\"an exception should have been thrown\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            minimizer.getOptimaValues();\n            try{ fail(\"an exception should have been thrown\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        double result = minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2);\n        try{ assertEquals(-0.2719561270319131, result, 1.0e-13);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.2719561270319131, minimizer.getResult(), 1.0e-13);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.04433426954946637, minimizer.getFunctionValue(), 1.0e-13);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double[] optima = minimizer.getOptima();\n        double[] optimaValues = minimizer.getOptimaValues();\n        for (int i = 0; i < optima.length; ++i) {\n            try{ assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertTrue(minimizer.getEvaluations()    >= 120);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations()    <= 170);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() >= 120);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(minimizer.getIterationCount() <= 170);                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    @Test\n    public void testQuinticMin$catena_0() throws MathException {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer();\n        underlying.setRelativeAccuracy(1e-15);\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(4312000053L);\n        MultiStartUnivariateRealOptimizer minimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n        minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());\n        minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());\n\n        try {\n            minimizer.getOptima();\n            fail(\"an exception should have been thrown\");                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            minimizer.getOptimaValues();\n            try{ fail(\"an exception should have been thrown\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        double result = minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2);\n        try{ assertEquals(-0.2719561270319131, result, 1.0e-13);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.2719561270319131, minimizer.getResult(), 1.0e-13);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.04433426954946637, minimizer.getFunctionValue(), 1.0e-13);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double[] optima = minimizer.getOptima();\n        double[] optimaValues = minimizer.getOptimaValues();\n        for (int i = 0; i < optima.length; ++i) {\n            try{ assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertTrue(minimizer.getEvaluations()    >= 120);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations()    <= 170);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() >= 120);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() <= 170);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    @Test\n    public void testQuinticMin$catena_1() throws MathException {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer();\n        underlying.setRelativeAccuracy(1e-15);\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(4312000053L);\n        MultiStartUnivariateRealOptimizer minimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n        minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());\n        minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());\n\n        try {\n            minimizer.getOptima();\n            try{ fail(\"an exception should have been thrown\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            fail(\"wrong exception caught\");                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n        try {\n            minimizer.getOptimaValues();\n            try{ fail(\"an exception should have been thrown\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        double result = minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2);\n        try{ assertEquals(-0.2719561270319131, result, 1.0e-13);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.2719561270319131, minimizer.getResult(), 1.0e-13);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.04433426954946637, minimizer.getFunctionValue(), 1.0e-13);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double[] optima = minimizer.getOptima();\n        double[] optimaValues = minimizer.getOptimaValues();\n        for (int i = 0; i < optima.length; ++i) {\n            try{ assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertTrue(minimizer.getEvaluations()    >= 120);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations()    <= 170);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() >= 120);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() <= 170);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "2": "    @Test\n    public void testQuinticMin$catena_2() throws MathException {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer();\n        underlying.setRelativeAccuracy(1e-15);\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(4312000053L);\n        MultiStartUnivariateRealOptimizer minimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n        minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());\n        minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());\n\n        try {\n            minimizer.getOptima();\n            try{ fail(\"an exception should have been thrown\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            minimizer.getOptimaValues();\n            fail(\"an exception should have been thrown\");                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        double result = minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2);\n        try{ assertEquals(-0.2719561270319131, result, 1.0e-13);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.2719561270319131, minimizer.getResult(), 1.0e-13);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.04433426954946637, minimizer.getFunctionValue(), 1.0e-13);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double[] optima = minimizer.getOptima();\n        double[] optimaValues = minimizer.getOptimaValues();\n        for (int i = 0; i < optima.length; ++i) {\n            try{ assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertTrue(minimizer.getEvaluations()    >= 120);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations()    <= 170);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() >= 120);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() <= 170);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "3": "    @Test\n    public void testQuinticMin$catena_3() throws MathException {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer();\n        underlying.setRelativeAccuracy(1e-15);\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(4312000053L);\n        MultiStartUnivariateRealOptimizer minimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n        minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());\n        minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());\n\n        try {\n            minimizer.getOptima();\n            try{ fail(\"an exception should have been thrown\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            minimizer.getOptimaValues();\n            try{ fail(\"an exception should have been thrown\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            fail(\"wrong exception caught\");                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n\n        double result = minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2);\n        try{ assertEquals(-0.2719561270319131, result, 1.0e-13);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.2719561270319131, minimizer.getResult(), 1.0e-13);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.04433426954946637, minimizer.getFunctionValue(), 1.0e-13);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double[] optima = minimizer.getOptima();\n        double[] optimaValues = minimizer.getOptimaValues();\n        for (int i = 0; i < optima.length; ++i) {\n            try{ assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertTrue(minimizer.getEvaluations()    >= 120);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations()    <= 170);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() >= 120);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() <= 170);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "4": "    @Test\n    public void testQuinticMin$catena_4() throws MathException {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer();\n        underlying.setRelativeAccuracy(1e-15);\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(4312000053L);\n        MultiStartUnivariateRealOptimizer minimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n        minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());\n        minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());\n\n        try {\n            minimizer.getOptima();\n            try{ fail(\"an exception should have been thrown\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            minimizer.getOptimaValues();\n            try{ fail(\"an exception should have been thrown\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        double result = minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2);\n        assertEquals(-0.2719561270319131, result, 1.0e-13);                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(-0.2719561270319131, minimizer.getResult(), 1.0e-13);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.04433426954946637, minimizer.getFunctionValue(), 1.0e-13);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double[] optima = minimizer.getOptima();\n        double[] optimaValues = minimizer.getOptimaValues();\n        for (int i = 0; i < optima.length; ++i) {\n            try{ assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertTrue(minimizer.getEvaluations()    >= 120);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations()    <= 170);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() >= 120);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() <= 170);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "5": "    @Test\n    public void testQuinticMin$catena_5() throws MathException {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer();\n        underlying.setRelativeAccuracy(1e-15);\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(4312000053L);\n        MultiStartUnivariateRealOptimizer minimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n        minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());\n        minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());\n\n        try {\n            minimizer.getOptima();\n            try{ fail(\"an exception should have been thrown\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            minimizer.getOptimaValues();\n            try{ fail(\"an exception should have been thrown\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        double result = minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2);\n        try{ assertEquals(-0.2719561270319131, result, 1.0e-13);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(-0.2719561270319131, minimizer.getResult(), 1.0e-13);                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(-0.04433426954946637, minimizer.getFunctionValue(), 1.0e-13);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double[] optima = minimizer.getOptima();\n        double[] optimaValues = minimizer.getOptimaValues();\n        for (int i = 0; i < optima.length; ++i) {\n            try{ assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertTrue(minimizer.getEvaluations()    >= 120);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations()    <= 170);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() >= 120);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() <= 170);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "6": "    @Test\n    public void testQuinticMin$catena_6() throws MathException {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer();\n        underlying.setRelativeAccuracy(1e-15);\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(4312000053L);\n        MultiStartUnivariateRealOptimizer minimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n        minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());\n        minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());\n\n        try {\n            minimizer.getOptima();\n            try{ fail(\"an exception should have been thrown\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            minimizer.getOptimaValues();\n            try{ fail(\"an exception should have been thrown\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        double result = minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2);\n        try{ assertEquals(-0.2719561270319131, result, 1.0e-13);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.2719561270319131, minimizer.getResult(), 1.0e-13);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(-0.04433426954946637, minimizer.getFunctionValue(), 1.0e-13);                          /***** ORIGINAL ASSERTION IS HERE *****/\n\n        double[] optima = minimizer.getOptima();\n        double[] optimaValues = minimizer.getOptimaValues();\n        for (int i = 0; i < optima.length; ++i) {\n            try{ assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertTrue(minimizer.getEvaluations()    >= 120);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations()    <= 170);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() >= 120);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() <= 170);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "7": "    @Test\n    public void testQuinticMin$catena_7() throws MathException {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer();\n        underlying.setRelativeAccuracy(1e-15);\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(4312000053L);\n        MultiStartUnivariateRealOptimizer minimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n        minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());\n        minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());\n\n        try {\n            minimizer.getOptima();\n            try{ fail(\"an exception should have been thrown\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            minimizer.getOptimaValues();\n            try{ fail(\"an exception should have been thrown\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        double result = minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2);\n        try{ assertEquals(-0.2719561270319131, result, 1.0e-13);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.2719561270319131, minimizer.getResult(), 1.0e-13);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.04433426954946637, minimizer.getFunctionValue(), 1.0e-13);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double[] optima = minimizer.getOptima();\n        double[] optimaValues = minimizer.getOptimaValues();\n        for (int i = 0; i < optima.length; ++i) {\n            assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n        try{ assertTrue(minimizer.getEvaluations()    >= 120);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations()    <= 170);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() >= 120);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() <= 170);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "8": "    @Test\n    public void testQuinticMin$catena_8() throws MathException {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer();\n        underlying.setRelativeAccuracy(1e-15);\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(4312000053L);\n        MultiStartUnivariateRealOptimizer minimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n        minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());\n        minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());\n\n        try {\n            minimizer.getOptima();\n            try{ fail(\"an exception should have been thrown\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            minimizer.getOptimaValues();\n            try{ fail(\"an exception should have been thrown\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        double result = minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2);\n        try{ assertEquals(-0.2719561270319131, result, 1.0e-13);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.2719561270319131, minimizer.getResult(), 1.0e-13);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.04433426954946637, minimizer.getFunctionValue(), 1.0e-13);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double[] optima = minimizer.getOptima();\n        double[] optimaValues = minimizer.getOptimaValues();\n        for (int i = 0; i < optima.length; ++i) {\n            try{ assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        assertTrue(minimizer.getEvaluations()    >= 120);                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(minimizer.getEvaluations()    <= 170);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() >= 120);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() <= 170);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "9": "    @Test\n    public void testQuinticMin$catena_9() throws MathException {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer();\n        underlying.setRelativeAccuracy(1e-15);\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(4312000053L);\n        MultiStartUnivariateRealOptimizer minimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n        minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());\n        minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());\n\n        try {\n            minimizer.getOptima();\n            try{ fail(\"an exception should have been thrown\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            minimizer.getOptimaValues();\n            try{ fail(\"an exception should have been thrown\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        double result = minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2);\n        try{ assertEquals(-0.2719561270319131, result, 1.0e-13);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.2719561270319131, minimizer.getResult(), 1.0e-13);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.04433426954946637, minimizer.getFunctionValue(), 1.0e-13);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double[] optima = minimizer.getOptima();\n        double[] optimaValues = minimizer.getOptimaValues();\n        for (int i = 0; i < optima.length; ++i) {\n            try{ assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertTrue(minimizer.getEvaluations()    >= 120);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(minimizer.getEvaluations()    <= 170);                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(minimizer.getIterationCount() >= 120);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() <= 170);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "10": "    @Test\n    public void testQuinticMin$catena_10() throws MathException {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer();\n        underlying.setRelativeAccuracy(1e-15);\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(4312000053L);\n        MultiStartUnivariateRealOptimizer minimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n        minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());\n        minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());\n\n        try {\n            minimizer.getOptima();\n            try{ fail(\"an exception should have been thrown\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            minimizer.getOptimaValues();\n            try{ fail(\"an exception should have been thrown\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        double result = minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2);\n        try{ assertEquals(-0.2719561270319131, result, 1.0e-13);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.2719561270319131, minimizer.getResult(), 1.0e-13);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.04433426954946637, minimizer.getFunctionValue(), 1.0e-13);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double[] optima = minimizer.getOptima();\n        double[] optimaValues = minimizer.getOptimaValues();\n        for (int i = 0; i < optima.length; ++i) {\n            try{ assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertTrue(minimizer.getEvaluations()    >= 120);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations()    <= 170);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(minimizer.getIterationCount() >= 120);                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(minimizer.getIterationCount() <= 170);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "11": "    @Test\n    public void testQuinticMin$catena_11() throws MathException {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer();\n        underlying.setRelativeAccuracy(1e-15);\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(4312000053L);\n        MultiStartUnivariateRealOptimizer minimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n        minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());\n        minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());\n\n        try {\n            minimizer.getOptima();\n            try{ fail(\"an exception should have been thrown\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            minimizer.getOptimaValues();\n            try{ fail(\"an exception should have been thrown\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        double result = minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2);\n        try{ assertEquals(-0.2719561270319131, result, 1.0e-13);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.2719561270319131, minimizer.getResult(), 1.0e-13);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.04433426954946637, minimizer.getFunctionValue(), 1.0e-13);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double[] optima = minimizer.getOptima();\n        double[] optimaValues = minimizer.getOptimaValues();\n        for (int i = 0; i < optima.length; ++i) {\n            try{ assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertTrue(minimizer.getEvaluations()    >= 120);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations()    <= 170);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() >= 120);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(minimizer.getIterationCount() <= 170);                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest::testSinMin": {
            "file_path": "src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java",
            "Instance": "Begin: Pos(34, 5)\nEnd: Pos(53, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Math_66/src/test/java//org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java\nName: testSinMin\nChilds: [StatementAssertion<Begin: Pos(47, 13), End: Pos(47, 61)>,\nStatementAssertion<Begin: Pos(48, 13), End: Pos(48, 60)>,\nStatementAssertion<Begin: Pos(49, 13), End: Pos(49, 71)>,\nStatementAssertion<Begin: Pos(51, 9), End: Pos(51, 53)>,\nStatementAssertion<Begin: Pos(52, 9), End: Pos(52, 53)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Math_66/src/test/java//org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java",
            "name": "testSinMin",
            "begin": "Pos(34, 5)",
            "end": "Pos(53, 5)",
            "begin_line_no": 34,
            "end_line_no": 53,
            "child": [
                "Begin: Pos(47, 13)\nEnd: Pos(47, 61)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(48, 13)\nEnd: Pos(48, 60)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(49, 13)\nEnd: Pos(49, 71)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(51, 9)\nEnd: Pos(51, 53)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(52, 9)\nEnd: Pos(52, 53)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    @Test\n    public void testSinMin$catena_0() throws MathException {\n        UnivariateRealFunction f = new SinFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer();\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(44428400075l);\n        MultiStartUnivariateRealOptimizer minimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 10, g);\n        minimizer.optimize(f, GoalType.MINIMIZE, -100.0, 100.0);\n        double[] optima = minimizer.getOptima();\n        double[] optimaValues = minimizer.getOptimaValues();\n        for (int i = 1; i < optima.length; ++i) {\n            double d = (optima[i] - optima[i-1]) / (2 * Math.PI);\n            assertTrue (Math.abs(d - Math.rint(d)) < 1.0e-8);                                               /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(-1.0, f.value(optima[i]), 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertTrue(minimizer.getEvaluations() > 150);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations() < 250);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testSinMin$catena_1() throws MathException {\n        UnivariateRealFunction f = new SinFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer();\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(44428400075l);\n        MultiStartUnivariateRealOptimizer minimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 10, g);\n        minimizer.optimize(f, GoalType.MINIMIZE, -100.0, 100.0);\n        double[] optima = minimizer.getOptima();\n        double[] optimaValues = minimizer.getOptimaValues();\n        for (int i = 1; i < optima.length; ++i) {\n            double d = (optima[i] - optima[i-1]) / (2 * Math.PI);\n            try{ assertTrue (Math.abs(d - Math.rint(d)) < 1.0e-8);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(-1.0, f.value(optima[i]), 1.0e-10);                                                /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertTrue(minimizer.getEvaluations() > 150);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations() < 250);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testSinMin$catena_2() throws MathException {\n        UnivariateRealFunction f = new SinFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer();\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(44428400075l);\n        MultiStartUnivariateRealOptimizer minimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 10, g);\n        minimizer.optimize(f, GoalType.MINIMIZE, -100.0, 100.0);\n        double[] optima = minimizer.getOptima();\n        double[] optimaValues = minimizer.getOptimaValues();\n        for (int i = 1; i < optima.length; ++i) {\n            double d = (optima[i] - optima[i-1]) / (2 * Math.PI);\n            try{ assertTrue (Math.abs(d - Math.rint(d)) < 1.0e-8);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(-1.0, f.value(optima[i]), 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n        try{ assertTrue(minimizer.getEvaluations() > 150);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations() < 250);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testSinMin$catena_3() throws MathException {\n        UnivariateRealFunction f = new SinFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer();\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(44428400075l);\n        MultiStartUnivariateRealOptimizer minimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 10, g);\n        minimizer.optimize(f, GoalType.MINIMIZE, -100.0, 100.0);\n        double[] optima = minimizer.getOptima();\n        double[] optimaValues = minimizer.getOptimaValues();\n        for (int i = 1; i < optima.length; ++i) {\n            double d = (optima[i] - optima[i-1]) / (2 * Math.PI);\n            try{ assertTrue (Math.abs(d - Math.rint(d)) < 1.0e-8);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(-1.0, f.value(optima[i]), 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        assertTrue(minimizer.getEvaluations() > 150);                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(minimizer.getEvaluations() < 250);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testSinMin$catena_4() throws MathException {\n        UnivariateRealFunction f = new SinFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer();\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(44428400075l);\n        MultiStartUnivariateRealOptimizer minimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 10, g);\n        minimizer.optimize(f, GoalType.MINIMIZE, -100.0, 100.0);\n        double[] optima = minimizer.getOptima();\n        double[] optimaValues = minimizer.getOptimaValues();\n        for (int i = 1; i < optima.length; ++i) {\n            double d = (optima[i] - optima[i-1]) / (2 * Math.PI);\n            try{ assertTrue (Math.abs(d - Math.rint(d)) < 1.0e-8);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(-1.0, f.value(optima[i]), 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertTrue(minimizer.getEvaluations() > 150);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(minimizer.getEvaluations() < 250);                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    @Test\n    public void testSinMin$catena_0() throws MathException {\n        UnivariateRealFunction f = new SinFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer();\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(44428400075l);\n        MultiStartUnivariateRealOptimizer minimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 10, g);\n        minimizer.optimize(f, GoalType.MINIMIZE, -100.0, 100.0);\n        double[] optima = minimizer.getOptima();\n        double[] optimaValues = minimizer.getOptimaValues();\n        for (int i = 1; i < optima.length; ++i) {\n            double d = (optima[i] - optima[i-1]) / (2 * Math.PI);\n            assertTrue (Math.abs(d - Math.rint(d)) < 1.0e-8);                                               /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(-1.0, f.value(optima[i]), 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertTrue(minimizer.getEvaluations() > 150);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations() < 250);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    @Test\n    public void testSinMin$catena_1() throws MathException {\n        UnivariateRealFunction f = new SinFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer();\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(44428400075l);\n        MultiStartUnivariateRealOptimizer minimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 10, g);\n        minimizer.optimize(f, GoalType.MINIMIZE, -100.0, 100.0);\n        double[] optima = minimizer.getOptima();\n        double[] optimaValues = minimizer.getOptimaValues();\n        for (int i = 1; i < optima.length; ++i) {\n            double d = (optima[i] - optima[i-1]) / (2 * Math.PI);\n            try{ assertTrue (Math.abs(d - Math.rint(d)) < 1.0e-8);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(-1.0, f.value(optima[i]), 1.0e-10);                                                /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertTrue(minimizer.getEvaluations() > 150);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations() < 250);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "2": "    @Test\n    public void testSinMin$catena_2() throws MathException {\n        UnivariateRealFunction f = new SinFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer();\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(44428400075l);\n        MultiStartUnivariateRealOptimizer minimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 10, g);\n        minimizer.optimize(f, GoalType.MINIMIZE, -100.0, 100.0);\n        double[] optima = minimizer.getOptima();\n        double[] optimaValues = minimizer.getOptimaValues();\n        for (int i = 1; i < optima.length; ++i) {\n            double d = (optima[i] - optima[i-1]) / (2 * Math.PI);\n            try{ assertTrue (Math.abs(d - Math.rint(d)) < 1.0e-8);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(-1.0, f.value(optima[i]), 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n        try{ assertTrue(minimizer.getEvaluations() > 150);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations() < 250);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "3": "    @Test\n    public void testSinMin$catena_3() throws MathException {\n        UnivariateRealFunction f = new SinFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer();\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(44428400075l);\n        MultiStartUnivariateRealOptimizer minimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 10, g);\n        minimizer.optimize(f, GoalType.MINIMIZE, -100.0, 100.0);\n        double[] optima = minimizer.getOptima();\n        double[] optimaValues = minimizer.getOptimaValues();\n        for (int i = 1; i < optima.length; ++i) {\n            double d = (optima[i] - optima[i-1]) / (2 * Math.PI);\n            try{ assertTrue (Math.abs(d - Math.rint(d)) < 1.0e-8);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(-1.0, f.value(optima[i]), 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        assertTrue(minimizer.getEvaluations() > 150);                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(minimizer.getEvaluations() < 250);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "4": "    @Test\n    public void testSinMin$catena_4() throws MathException {\n        UnivariateRealFunction f = new SinFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer();\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(44428400075l);\n        MultiStartUnivariateRealOptimizer minimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 10, g);\n        minimizer.optimize(f, GoalType.MINIMIZE, -100.0, 100.0);\n        double[] optima = minimizer.getOptima();\n        double[] optimaValues = minimizer.getOptimaValues();\n        for (int i = 1; i < optima.length; ++i) {\n            double d = (optima[i] - optima[i-1]) / (2 * Math.PI);\n            try{ assertTrue (Math.abs(d - Math.rint(d)) < 1.0e-8);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(-1.0, f.value(optima[i]), 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertTrue(minimizer.getEvaluations() > 150);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(minimizer.getEvaluations() < 250);                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.apache.commons.math.optimization.univariate.BrentOptimizerTest::testQuinticMinStatistics": {
            "file_path": "src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java",
            "Instance": "Begin: Pos(85, 5)\nEnd: Pos(115, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Math_66/src/test/java//org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java\nName: testQuinticMinStatistics\nChilds: [StatementAssertion<Begin: Pos(112, 9), End: Pos(112, 83)>,\nStatementAssertion<Begin: Pos(113, 9), End: Pos(113, 51)>,\nStatementAssertion<Begin: Pos(114, 9), End: Pos(114, 51)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Math_66/src/test/java//org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java",
            "name": "testQuinticMinStatistics",
            "begin": "Pos(85, 5)",
            "end": "Pos(115, 5)",
            "begin_line_no": 85,
            "end_line_no": 115,
            "child": [
                "Begin: Pos(112, 9)\nEnd: Pos(112, 83)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(113, 9)\nEnd: Pos(113, 51)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(114, 9)\nEnd: Pos(114, 51)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    @Test\n    public void testQuinticMinStatistics$catena_0() throws MathException {\n        // The function has local minima at -0.27195613 and 0.82221643.\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer minimizer = new BrentOptimizer();\n        minimizer.setRelativeAccuracy(1e-10);\n        minimizer.setAbsoluteAccuracy(1e-11);\n\n        final DescriptiveStatistics[] stat = new DescriptiveStatistics[3];\n        for (int i = 0; i < stat.length; i++) {\n            stat[i] = new DescriptiveStatistics();\n        }\n\n        final double min = -0.75;\n        final double max = 0.25;\n        final int nSamples = 200;\n        final double delta = (max - min) / nSamples;\n        for (int i = 0; i < nSamples; i++) {\n            final double start = min + i * delta;\n            stat[0].addValue(minimizer.optimize(f, GoalType.MINIMIZE, min, max, start));\n            stat[1].addValue(minimizer.getIterationCount());\n            stat[2].addValue(minimizer.getEvaluations());\n        }\n\n        final double meanOptValue = stat[0].getMean();\n        final double medianIter = stat[1].getPercentile(50);\n        final double medianEval = stat[2].getPercentile(50);\n        assertTrue(meanOptValue > -0.27195612812 && meanOptValue < -0.27195612811);                         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(medianIter, 17, Math.ulp(1d));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(medianEval, 18, Math.ulp(1d));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testQuinticMinStatistics$catena_1() throws MathException {\n        // The function has local minima at -0.27195613 and 0.82221643.\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer minimizer = new BrentOptimizer();\n        minimizer.setRelativeAccuracy(1e-10);\n        minimizer.setAbsoluteAccuracy(1e-11);\n\n        final DescriptiveStatistics[] stat = new DescriptiveStatistics[3];\n        for (int i = 0; i < stat.length; i++) {\n            stat[i] = new DescriptiveStatistics();\n        }\n\n        final double min = -0.75;\n        final double max = 0.25;\n        final int nSamples = 200;\n        final double delta = (max - min) / nSamples;\n        for (int i = 0; i < nSamples; i++) {\n            final double start = min + i * delta;\n            stat[0].addValue(minimizer.optimize(f, GoalType.MINIMIZE, min, max, start));\n            stat[1].addValue(minimizer.getIterationCount());\n            stat[2].addValue(minimizer.getEvaluations());\n        }\n\n        final double meanOptValue = stat[0].getMean();\n        final double medianIter = stat[1].getPercentile(50);\n        final double medianEval = stat[2].getPercentile(50);\n        try{ assertTrue(meanOptValue > -0.27195612812 && meanOptValue < -0.27195612811);                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(medianIter, 17, Math.ulp(1d));                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(medianEval, 18, Math.ulp(1d));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testQuinticMinStatistics$catena_2() throws MathException {\n        // The function has local minima at -0.27195613 and 0.82221643.\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer minimizer = new BrentOptimizer();\n        minimizer.setRelativeAccuracy(1e-10);\n        minimizer.setAbsoluteAccuracy(1e-11);\n\n        final DescriptiveStatistics[] stat = new DescriptiveStatistics[3];\n        for (int i = 0; i < stat.length; i++) {\n            stat[i] = new DescriptiveStatistics();\n        }\n\n        final double min = -0.75;\n        final double max = 0.25;\n        final int nSamples = 200;\n        final double delta = (max - min) / nSamples;\n        for (int i = 0; i < nSamples; i++) {\n            final double start = min + i * delta;\n            stat[0].addValue(minimizer.optimize(f, GoalType.MINIMIZE, min, max, start));\n            stat[1].addValue(minimizer.getIterationCount());\n            stat[2].addValue(minimizer.getEvaluations());\n        }\n\n        final double meanOptValue = stat[0].getMean();\n        final double medianIter = stat[1].getPercentile(50);\n        final double medianEval = stat[2].getPercentile(50);\n        try{ assertTrue(meanOptValue > -0.27195612812 && meanOptValue < -0.27195612811);                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(medianIter, 17, Math.ulp(1d));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(medianEval, 18, Math.ulp(1d));                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    @Test\n    public void testQuinticMinStatistics$catena_0() throws MathException {\n        // The function has local minima at -0.27195613 and 0.82221643.\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer minimizer = new BrentOptimizer();\n        minimizer.setRelativeAccuracy(1e-10);\n        minimizer.setAbsoluteAccuracy(1e-11);\n\n        final DescriptiveStatistics[] stat = new DescriptiveStatistics[3];\n        for (int i = 0; i < stat.length; i++) {\n            stat[i] = new DescriptiveStatistics();\n        }\n\n        final double min = -0.75;\n        final double max = 0.25;\n        final int nSamples = 200;\n        final double delta = (max - min) / nSamples;\n        for (int i = 0; i < nSamples; i++) {\n            final double start = min + i * delta;\n            stat[0].addValue(minimizer.optimize(f, GoalType.MINIMIZE, min, max, start));\n            stat[1].addValue(minimizer.getIterationCount());\n            stat[2].addValue(minimizer.getEvaluations());\n        }\n\n        final double meanOptValue = stat[0].getMean();\n        final double medianIter = stat[1].getPercentile(50);\n        final double medianEval = stat[2].getPercentile(50);\n        assertTrue(meanOptValue > -0.27195612812 && meanOptValue < -0.27195612811);                         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(medianIter, 17, Math.ulp(1d));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(medianEval, 18, Math.ulp(1d));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    @Test\n    public void testQuinticMinStatistics$catena_1() throws MathException {\n        // The function has local minima at -0.27195613 and 0.82221643.\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer minimizer = new BrentOptimizer();\n        minimizer.setRelativeAccuracy(1e-10);\n        minimizer.setAbsoluteAccuracy(1e-11);\n\n        final DescriptiveStatistics[] stat = new DescriptiveStatistics[3];\n        for (int i = 0; i < stat.length; i++) {\n            stat[i] = new DescriptiveStatistics();\n        }\n\n        final double min = -0.75;\n        final double max = 0.25;\n        final int nSamples = 200;\n        final double delta = (max - min) / nSamples;\n        for (int i = 0; i < nSamples; i++) {\n            final double start = min + i * delta;\n            stat[0].addValue(minimizer.optimize(f, GoalType.MINIMIZE, min, max, start));\n            stat[1].addValue(minimizer.getIterationCount());\n            stat[2].addValue(minimizer.getEvaluations());\n        }\n\n        final double meanOptValue = stat[0].getMean();\n        final double medianIter = stat[1].getPercentile(50);\n        final double medianEval = stat[2].getPercentile(50);\n        try{ assertTrue(meanOptValue > -0.27195612812 && meanOptValue < -0.27195612811);                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(medianIter, 17, Math.ulp(1d));                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(medianEval, 18, Math.ulp(1d));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "2": "    @Test\n    public void testQuinticMinStatistics$catena_2() throws MathException {\n        // The function has local minima at -0.27195613 and 0.82221643.\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer minimizer = new BrentOptimizer();\n        minimizer.setRelativeAccuracy(1e-10);\n        minimizer.setAbsoluteAccuracy(1e-11);\n\n        final DescriptiveStatistics[] stat = new DescriptiveStatistics[3];\n        for (int i = 0; i < stat.length; i++) {\n            stat[i] = new DescriptiveStatistics();\n        }\n\n        final double min = -0.75;\n        final double max = 0.25;\n        final int nSamples = 200;\n        final double delta = (max - min) / nSamples;\n        for (int i = 0; i < nSamples; i++) {\n            final double start = min + i * delta;\n            stat[0].addValue(minimizer.optimize(f, GoalType.MINIMIZE, min, max, start));\n            stat[1].addValue(minimizer.getIterationCount());\n            stat[2].addValue(minimizer.getEvaluations());\n        }\n\n        final double meanOptValue = stat[0].getMean();\n        final double medianIter = stat[1].getPercentile(50);\n        final double medianEval = stat[2].getPercentile(50);\n        try{ assertTrue(meanOptValue > -0.27195612812 && meanOptValue < -0.27195612811);                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(medianIter, 17, Math.ulp(1d));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(medianEval, 18, Math.ulp(1d));                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.apache.commons.math.optimization.univariate.BrentOptimizerTest::testSinMin": {
            "file_path": "src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java",
            "Instance": "Begin: Pos(40, 5)\nEnd: Pos(69, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Math_66/src/test/java//org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java\nName: testSinMin\nChilds: [StatementAssertion<Begin: Pos(45, 9), End: Pos(45, 57)>,\nStatementAssertion<Begin: Pos(48, 13), End: Pos(48, 57)>,\nStatementAssertion<Begin: Pos(52, 13), End: Pos(52, 43)>,\nStatementAssertion<Begin: Pos(54, 9), End: Pos(54, 124)>,\nStatementAssertion<Begin: Pos(55, 9), End: Pos(55, 56)>,\nStatementAssertion<Begin: Pos(56, 9), End: Pos(56, 124)>,\nStatementAssertion<Begin: Pos(57, 9), End: Pos(57, 56)>,\nStatementAssertion<Begin: Pos(58, 9), End: Pos(58, 57)>,\nStatementAssertion<Begin: Pos(59, 9), End: Pos(59, 57)>,\nStatementAssertion<Begin: Pos(63, 13), End: Pos(63, 57)>,\nStatementAssertion<Begin: Pos(67, 13), End: Pos(67, 43)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Math_66/src/test/java//org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java",
            "name": "testSinMin",
            "begin": "Pos(40, 5)",
            "end": "Pos(69, 5)",
            "begin_line_no": 40,
            "end_line_no": 69,
            "child": [
                "Begin: Pos(45, 9)\nEnd: Pos(45, 57)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(48, 13)\nEnd: Pos(48, 57)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(52, 13)\nEnd: Pos(52, 43)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(54, 9)\nEnd: Pos(54, 124)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(55, 9)\nEnd: Pos(55, 56)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(56, 9)\nEnd: Pos(56, 124)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(57, 9)\nEnd: Pos(57, 56)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(58, 9)\nEnd: Pos(58, 57)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(59, 9)\nEnd: Pos(59, 57)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(63, 13)\nEnd: Pos(63, 57)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(67, 13)\nEnd: Pos(67, 43)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    @Test\n    public void testSinMin$catena_0() throws MathException {\n        UnivariateRealFunction f = new SinFunction();\n        UnivariateRealOptimizer minimizer = new BrentOptimizer();\n        minimizer.setMaxEvaluations(200);\n        assertEquals(200, minimizer.getMaxEvaluations());                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        try {\n            minimizer.getResult();\n            try{ fail(\"an exception should have been thrown\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NoDataException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(3 * Math.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 4, 5), 10 * minimizer.getRelativeAccuracy());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() <= 50);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3 * Math.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 1, 5), 10 * minimizer.getRelativeAccuracy());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() <= 50);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations()    <= 100);                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations()    >=  15);                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        minimizer.setMaxEvaluations(10);\n        try {\n            minimizer.optimize(f, GoalType.MINIMIZE, 4, 5);\n            try{ fail(\"an exception should have been thrown\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (FunctionEvaluationException fee) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
                "    @Test\n    public void testSinMin$catena_1() throws MathException {\n        UnivariateRealFunction f = new SinFunction();\n        UnivariateRealOptimizer minimizer = new BrentOptimizer();\n        minimizer.setMaxEvaluations(200);\n        try{ assertEquals(200, minimizer.getMaxEvaluations());                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            minimizer.getResult();\n            fail(\"an exception should have been thrown\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (NoDataException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(3 * Math.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 4, 5), 10 * minimizer.getRelativeAccuracy());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() <= 50);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3 * Math.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 1, 5), 10 * minimizer.getRelativeAccuracy());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() <= 50);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations()    <= 100);                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations()    >=  15);                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        minimizer.setMaxEvaluations(10);\n        try {\n            minimizer.optimize(f, GoalType.MINIMIZE, 4, 5);\n            try{ fail(\"an exception should have been thrown\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (FunctionEvaluationException fee) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
                "    @Test\n    public void testSinMin$catena_2() throws MathException {\n        UnivariateRealFunction f = new SinFunction();\n        UnivariateRealOptimizer minimizer = new BrentOptimizer();\n        minimizer.setMaxEvaluations(200);\n        try{ assertEquals(200, minimizer.getMaxEvaluations());                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            minimizer.getResult();\n            try{ fail(\"an exception should have been thrown\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NoDataException ise) {\n            // expected\n        } catch (Exception e) {\n            fail(\"wrong exception caught\");                                                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n        try{ assertEquals(3 * Math.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 4, 5), 10 * minimizer.getRelativeAccuracy());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() <= 50);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3 * Math.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 1, 5), 10 * minimizer.getRelativeAccuracy());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() <= 50);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations()    <= 100);                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations()    >=  15);                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        minimizer.setMaxEvaluations(10);\n        try {\n            minimizer.optimize(f, GoalType.MINIMIZE, 4, 5);\n            try{ fail(\"an exception should have been thrown\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (FunctionEvaluationException fee) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
                "    @Test\n    public void testSinMin$catena_3() throws MathException {\n        UnivariateRealFunction f = new SinFunction();\n        UnivariateRealOptimizer minimizer = new BrentOptimizer();\n        minimizer.setMaxEvaluations(200);\n        try{ assertEquals(200, minimizer.getMaxEvaluations());                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            minimizer.getResult();\n            try{ fail(\"an exception should have been thrown\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NoDataException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        assertEquals(3 * Math.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 4, 5), 10 * minimizer.getRelativeAccuracy());         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(minimizer.getIterationCount() <= 50);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3 * Math.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 1, 5), 10 * minimizer.getRelativeAccuracy());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() <= 50);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations()    <= 100);                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations()    >=  15);                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        minimizer.setMaxEvaluations(10);\n        try {\n            minimizer.optimize(f, GoalType.MINIMIZE, 4, 5);\n            try{ fail(\"an exception should have been thrown\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (FunctionEvaluationException fee) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
                "    @Test\n    public void testSinMin$catena_4() throws MathException {\n        UnivariateRealFunction f = new SinFunction();\n        UnivariateRealOptimizer minimizer = new BrentOptimizer();\n        minimizer.setMaxEvaluations(200);\n        try{ assertEquals(200, minimizer.getMaxEvaluations());                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            minimizer.getResult();\n            try{ fail(\"an exception should have been thrown\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NoDataException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(3 * Math.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 4, 5), 10 * minimizer.getRelativeAccuracy());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(minimizer.getIterationCount() <= 50);                                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(3 * Math.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 1, 5), 10 * minimizer.getRelativeAccuracy());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() <= 50);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations()    <= 100);                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations()    >=  15);                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        minimizer.setMaxEvaluations(10);\n        try {\n            minimizer.optimize(f, GoalType.MINIMIZE, 4, 5);\n            try{ fail(\"an exception should have been thrown\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (FunctionEvaluationException fee) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
                "    @Test\n    public void testSinMin$catena_5() throws MathException {\n        UnivariateRealFunction f = new SinFunction();\n        UnivariateRealOptimizer minimizer = new BrentOptimizer();\n        minimizer.setMaxEvaluations(200);\n        try{ assertEquals(200, minimizer.getMaxEvaluations());                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            minimizer.getResult();\n            try{ fail(\"an exception should have been thrown\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NoDataException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(3 * Math.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 4, 5), 10 * minimizer.getRelativeAccuracy());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() <= 50);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(3 * Math.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 1, 5), 10 * minimizer.getRelativeAccuracy());         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(minimizer.getIterationCount() <= 50);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations()    <= 100);                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations()    >=  15);                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        minimizer.setMaxEvaluations(10);\n        try {\n            minimizer.optimize(f, GoalType.MINIMIZE, 4, 5);\n            try{ fail(\"an exception should have been thrown\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (FunctionEvaluationException fee) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
                "    @Test\n    public void testSinMin$catena_6() throws MathException {\n        UnivariateRealFunction f = new SinFunction();\n        UnivariateRealOptimizer minimizer = new BrentOptimizer();\n        minimizer.setMaxEvaluations(200);\n        try{ assertEquals(200, minimizer.getMaxEvaluations());                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            minimizer.getResult();\n            try{ fail(\"an exception should have been thrown\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NoDataException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(3 * Math.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 4, 5), 10 * minimizer.getRelativeAccuracy());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() <= 50);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3 * Math.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 1, 5), 10 * minimizer.getRelativeAccuracy());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(minimizer.getIterationCount() <= 50);                                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(minimizer.getEvaluations()    <= 100);                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations()    >=  15);                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        minimizer.setMaxEvaluations(10);\n        try {\n            minimizer.optimize(f, GoalType.MINIMIZE, 4, 5);\n            try{ fail(\"an exception should have been thrown\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (FunctionEvaluationException fee) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
                "    @Test\n    public void testSinMin$catena_7() throws MathException {\n        UnivariateRealFunction f = new SinFunction();\n        UnivariateRealOptimizer minimizer = new BrentOptimizer();\n        minimizer.setMaxEvaluations(200);\n        try{ assertEquals(200, minimizer.getMaxEvaluations());                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            minimizer.getResult();\n            try{ fail(\"an exception should have been thrown\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NoDataException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(3 * Math.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 4, 5), 10 * minimizer.getRelativeAccuracy());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() <= 50);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3 * Math.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 1, 5), 10 * minimizer.getRelativeAccuracy());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() <= 50);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(minimizer.getEvaluations()    <= 100);                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(minimizer.getEvaluations()    >=  15);                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        minimizer.setMaxEvaluations(10);\n        try {\n            minimizer.optimize(f, GoalType.MINIMIZE, 4, 5);\n            try{ fail(\"an exception should have been thrown\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (FunctionEvaluationException fee) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
                "    @Test\n    public void testSinMin$catena_8() throws MathException {\n        UnivariateRealFunction f = new SinFunction();\n        UnivariateRealOptimizer minimizer = new BrentOptimizer();\n        minimizer.setMaxEvaluations(200);\n        try{ assertEquals(200, minimizer.getMaxEvaluations());                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            minimizer.getResult();\n            try{ fail(\"an exception should have been thrown\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NoDataException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(3 * Math.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 4, 5), 10 * minimizer.getRelativeAccuracy());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() <= 50);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3 * Math.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 1, 5), 10 * minimizer.getRelativeAccuracy());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() <= 50);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations()    <= 100);                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(minimizer.getEvaluations()    >=  15);                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        minimizer.setMaxEvaluations(10);\n        try {\n            minimizer.optimize(f, GoalType.MINIMIZE, 4, 5);\n            try{ fail(\"an exception should have been thrown\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (FunctionEvaluationException fee) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
                "    @Test\n    public void testSinMin$catena_9() throws MathException {\n        UnivariateRealFunction f = new SinFunction();\n        UnivariateRealOptimizer minimizer = new BrentOptimizer();\n        minimizer.setMaxEvaluations(200);\n        try{ assertEquals(200, minimizer.getMaxEvaluations());                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            minimizer.getResult();\n            try{ fail(\"an exception should have been thrown\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NoDataException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(3 * Math.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 4, 5), 10 * minimizer.getRelativeAccuracy());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() <= 50);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3 * Math.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 1, 5), 10 * minimizer.getRelativeAccuracy());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() <= 50);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations()    <= 100);                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations()    >=  15);                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        minimizer.setMaxEvaluations(10);\n        try {\n            minimizer.optimize(f, GoalType.MINIMIZE, 4, 5);\n            fail(\"an exception should have been thrown\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (FunctionEvaluationException fee) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
                "    @Test\n    public void testSinMin$catena_10() throws MathException {\n        UnivariateRealFunction f = new SinFunction();\n        UnivariateRealOptimizer minimizer = new BrentOptimizer();\n        minimizer.setMaxEvaluations(200);\n        try{ assertEquals(200, minimizer.getMaxEvaluations());                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            minimizer.getResult();\n            try{ fail(\"an exception should have been thrown\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NoDataException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(3 * Math.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 4, 5), 10 * minimizer.getRelativeAccuracy());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() <= 50);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3 * Math.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 1, 5), 10 * minimizer.getRelativeAccuracy());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() <= 50);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations()    <= 100);                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations()    >=  15);                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        minimizer.setMaxEvaluations(10);\n        try {\n            minimizer.optimize(f, GoalType.MINIMIZE, 4, 5);\n            try{ fail(\"an exception should have been thrown\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (FunctionEvaluationException fee) {\n            // expected\n        } catch (Exception e) {\n            fail(\"wrong exception caught\");                                                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n    }"
            ],
            "func": {
                "0": "    @Test\n    public void testSinMin$catena_0() throws MathException {\n        UnivariateRealFunction f = new SinFunction();\n        UnivariateRealOptimizer minimizer = new BrentOptimizer();\n        minimizer.setMaxEvaluations(200);\n        assertEquals(200, minimizer.getMaxEvaluations());                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        try {\n            minimizer.getResult();\n            try{ fail(\"an exception should have been thrown\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NoDataException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(3 * Math.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 4, 5), 10 * minimizer.getRelativeAccuracy());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() <= 50);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3 * Math.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 1, 5), 10 * minimizer.getRelativeAccuracy());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() <= 50);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations()    <= 100);                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations()    >=  15);                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        minimizer.setMaxEvaluations(10);\n        try {\n            minimizer.optimize(f, GoalType.MINIMIZE, 4, 5);\n            try{ fail(\"an exception should have been thrown\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (FunctionEvaluationException fee) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
                "1": "    @Test\n    public void testSinMin$catena_1() throws MathException {\n        UnivariateRealFunction f = new SinFunction();\n        UnivariateRealOptimizer minimizer = new BrentOptimizer();\n        minimizer.setMaxEvaluations(200);\n        try{ assertEquals(200, minimizer.getMaxEvaluations());                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            minimizer.getResult();\n            fail(\"an exception should have been thrown\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (NoDataException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(3 * Math.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 4, 5), 10 * minimizer.getRelativeAccuracy());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() <= 50);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3 * Math.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 1, 5), 10 * minimizer.getRelativeAccuracy());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() <= 50);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations()    <= 100);                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations()    >=  15);                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        minimizer.setMaxEvaluations(10);\n        try {\n            minimizer.optimize(f, GoalType.MINIMIZE, 4, 5);\n            try{ fail(\"an exception should have been thrown\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (FunctionEvaluationException fee) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
                "2": "    @Test\n    public void testSinMin$catena_2() throws MathException {\n        UnivariateRealFunction f = new SinFunction();\n        UnivariateRealOptimizer minimizer = new BrentOptimizer();\n        minimizer.setMaxEvaluations(200);\n        try{ assertEquals(200, minimizer.getMaxEvaluations());                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            minimizer.getResult();\n            try{ fail(\"an exception should have been thrown\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NoDataException ise) {\n            // expected\n        } catch (Exception e) {\n            fail(\"wrong exception caught\");                                                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n        try{ assertEquals(3 * Math.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 4, 5), 10 * minimizer.getRelativeAccuracy());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() <= 50);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3 * Math.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 1, 5), 10 * minimizer.getRelativeAccuracy());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() <= 50);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations()    <= 100);                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations()    >=  15);                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        minimizer.setMaxEvaluations(10);\n        try {\n            minimizer.optimize(f, GoalType.MINIMIZE, 4, 5);\n            try{ fail(\"an exception should have been thrown\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (FunctionEvaluationException fee) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
                "3": "    @Test\n    public void testSinMin$catena_3() throws MathException {\n        UnivariateRealFunction f = new SinFunction();\n        UnivariateRealOptimizer minimizer = new BrentOptimizer();\n        minimizer.setMaxEvaluations(200);\n        try{ assertEquals(200, minimizer.getMaxEvaluations());                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            minimizer.getResult();\n            try{ fail(\"an exception should have been thrown\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NoDataException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        assertEquals(3 * Math.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 4, 5), 10 * minimizer.getRelativeAccuracy());         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(minimizer.getIterationCount() <= 50);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3 * Math.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 1, 5), 10 * minimizer.getRelativeAccuracy());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() <= 50);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations()    <= 100);                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations()    >=  15);                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        minimizer.setMaxEvaluations(10);\n        try {\n            minimizer.optimize(f, GoalType.MINIMIZE, 4, 5);\n            try{ fail(\"an exception should have been thrown\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (FunctionEvaluationException fee) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
                "4": "    @Test\n    public void testSinMin$catena_4() throws MathException {\n        UnivariateRealFunction f = new SinFunction();\n        UnivariateRealOptimizer minimizer = new BrentOptimizer();\n        minimizer.setMaxEvaluations(200);\n        try{ assertEquals(200, minimizer.getMaxEvaluations());                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            minimizer.getResult();\n            try{ fail(\"an exception should have been thrown\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NoDataException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(3 * Math.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 4, 5), 10 * minimizer.getRelativeAccuracy());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(minimizer.getIterationCount() <= 50);                                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(3 * Math.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 1, 5), 10 * minimizer.getRelativeAccuracy());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() <= 50);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations()    <= 100);                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations()    >=  15);                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        minimizer.setMaxEvaluations(10);\n        try {\n            minimizer.optimize(f, GoalType.MINIMIZE, 4, 5);\n            try{ fail(\"an exception should have been thrown\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (FunctionEvaluationException fee) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
                "5": "    @Test\n    public void testSinMin$catena_5() throws MathException {\n        UnivariateRealFunction f = new SinFunction();\n        UnivariateRealOptimizer minimizer = new BrentOptimizer();\n        minimizer.setMaxEvaluations(200);\n        try{ assertEquals(200, minimizer.getMaxEvaluations());                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            minimizer.getResult();\n            try{ fail(\"an exception should have been thrown\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NoDataException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(3 * Math.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 4, 5), 10 * minimizer.getRelativeAccuracy());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() <= 50);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(3 * Math.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 1, 5), 10 * minimizer.getRelativeAccuracy());         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(minimizer.getIterationCount() <= 50);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations()    <= 100);                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations()    >=  15);                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        minimizer.setMaxEvaluations(10);\n        try {\n            minimizer.optimize(f, GoalType.MINIMIZE, 4, 5);\n            try{ fail(\"an exception should have been thrown\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (FunctionEvaluationException fee) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
                "6": "    @Test\n    public void testSinMin$catena_6() throws MathException {\n        UnivariateRealFunction f = new SinFunction();\n        UnivariateRealOptimizer minimizer = new BrentOptimizer();\n        minimizer.setMaxEvaluations(200);\n        try{ assertEquals(200, minimizer.getMaxEvaluations());                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            minimizer.getResult();\n            try{ fail(\"an exception should have been thrown\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NoDataException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(3 * Math.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 4, 5), 10 * minimizer.getRelativeAccuracy());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() <= 50);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3 * Math.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 1, 5), 10 * minimizer.getRelativeAccuracy());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(minimizer.getIterationCount() <= 50);                                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(minimizer.getEvaluations()    <= 100);                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations()    >=  15);                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        minimizer.setMaxEvaluations(10);\n        try {\n            minimizer.optimize(f, GoalType.MINIMIZE, 4, 5);\n            try{ fail(\"an exception should have been thrown\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (FunctionEvaluationException fee) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
                "7": "    @Test\n    public void testSinMin$catena_7() throws MathException {\n        UnivariateRealFunction f = new SinFunction();\n        UnivariateRealOptimizer minimizer = new BrentOptimizer();\n        minimizer.setMaxEvaluations(200);\n        try{ assertEquals(200, minimizer.getMaxEvaluations());                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            minimizer.getResult();\n            try{ fail(\"an exception should have been thrown\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NoDataException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(3 * Math.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 4, 5), 10 * minimizer.getRelativeAccuracy());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() <= 50);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3 * Math.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 1, 5), 10 * minimizer.getRelativeAccuracy());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() <= 50);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(minimizer.getEvaluations()    <= 100);                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(minimizer.getEvaluations()    >=  15);                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        minimizer.setMaxEvaluations(10);\n        try {\n            minimizer.optimize(f, GoalType.MINIMIZE, 4, 5);\n            try{ fail(\"an exception should have been thrown\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (FunctionEvaluationException fee) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
                "8": "    @Test\n    public void testSinMin$catena_8() throws MathException {\n        UnivariateRealFunction f = new SinFunction();\n        UnivariateRealOptimizer minimizer = new BrentOptimizer();\n        minimizer.setMaxEvaluations(200);\n        try{ assertEquals(200, minimizer.getMaxEvaluations());                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            minimizer.getResult();\n            try{ fail(\"an exception should have been thrown\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NoDataException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(3 * Math.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 4, 5), 10 * minimizer.getRelativeAccuracy());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() <= 50);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3 * Math.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 1, 5), 10 * minimizer.getRelativeAccuracy());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() <= 50);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations()    <= 100);                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(minimizer.getEvaluations()    >=  15);                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        minimizer.setMaxEvaluations(10);\n        try {\n            minimizer.optimize(f, GoalType.MINIMIZE, 4, 5);\n            try{ fail(\"an exception should have been thrown\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (FunctionEvaluationException fee) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
                "9": "    @Test\n    public void testSinMin$catena_9() throws MathException {\n        UnivariateRealFunction f = new SinFunction();\n        UnivariateRealOptimizer minimizer = new BrentOptimizer();\n        minimizer.setMaxEvaluations(200);\n        try{ assertEquals(200, minimizer.getMaxEvaluations());                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            minimizer.getResult();\n            try{ fail(\"an exception should have been thrown\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NoDataException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(3 * Math.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 4, 5), 10 * minimizer.getRelativeAccuracy());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() <= 50);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3 * Math.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 1, 5), 10 * minimizer.getRelativeAccuracy());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() <= 50);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations()    <= 100);                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations()    >=  15);                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        minimizer.setMaxEvaluations(10);\n        try {\n            minimizer.optimize(f, GoalType.MINIMIZE, 4, 5);\n            fail(\"an exception should have been thrown\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (FunctionEvaluationException fee) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
                "10": "    @Test\n    public void testSinMin$catena_10() throws MathException {\n        UnivariateRealFunction f = new SinFunction();\n        UnivariateRealOptimizer minimizer = new BrentOptimizer();\n        minimizer.setMaxEvaluations(200);\n        try{ assertEquals(200, minimizer.getMaxEvaluations());                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            minimizer.getResult();\n            try{ fail(\"an exception should have been thrown\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NoDataException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(3 * Math.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 4, 5), 10 * minimizer.getRelativeAccuracy());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() <= 50);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3 * Math.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 1, 5), 10 * minimizer.getRelativeAccuracy());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() <= 50);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations()    <= 100);                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations()    >=  15);                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        minimizer.setMaxEvaluations(10);\n        try {\n            minimizer.optimize(f, GoalType.MINIMIZE, 4, 5);\n            try{ fail(\"an exception should have been thrown\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (FunctionEvaluationException fee) {\n            // expected\n        } catch (Exception e) {\n            fail(\"wrong exception caught\");                                                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n    }"
            }
        }
    },
    "010000000000": {
        "failing_tests": [
            "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest::testQuinticMin$catena_10",
            "org.apache.commons.math.optimization.univariate.BrentOptimizerTest::testSinMin$catena_5",
            "org.apache.commons.math.optimization.univariate.BrentOptimizerTest::testSinMin$catena_3"
        ]
    },
    "010010000000": {
        "failing_tests": [
            "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest::testQuinticMin$catena_5",
            "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest::testQuinticMin$catena_4"
        ]
    }
}