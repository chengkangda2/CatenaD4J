{
    "original": {
        "num_of_hunks": 2,
        "0": {
            "file_name": "source/org/jfree/chart/axis/Axis.java",
            "replaced_with": "            if (owner != null) {\n",
            "patch_type": "insert",
            "next_line_no": 1192
        },
        "1": {
            "file_name": "source/org/jfree/chart/axis/Axis.java",
            "replaced_with": "            }\n",
            "patch_type": "insert",
            "next_line_no": 1197
        }
    },
    "method": {
        "failing_tests": [
            "org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo",
            "org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo",
            "org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo",
            "org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo",
            "org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2",
            "org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo",
            "org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo",
            "org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo",
            "org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo",
            "org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo",
            "org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo",
            "org.jfree.chart.plot.junit.CategoryPlotTests::test1654215",
            "org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3",
            "org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4",
            "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo",
            "org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo",
            "org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo",
            "org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo",
            "org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo",
            "org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo",
            "org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo",
            "org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo"
        ],
        "org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo": {
            "file_path": "tests/org/jfree/chart/junit/AreaChartTests.java",
            "Instance": "Begin: Pos(135, 12)\nEnd: Pos(150, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/junit/AreaChartTests.java\nName: testDrawWithNullInfo\nChilds: [StatementAssertion<Begin: Pos(149, 9), End: Pos(149, 28)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/junit/AreaChartTests.java",
            "name": "testDrawWithNullInfo",
            "begin": "Pos(135, 12)",
            "end": "Pos(150, 5)",
            "begin_line_no": 135,
            "end_line_no": 150,
            "child": [
                "Begin: Pos(149, 9)\nEnd: Pos(149, 28)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [],
            "func": {}
        },
        "org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo": {
            "file_path": "tests/org/jfree/chart/junit/BarChart3DTests.java",
            "Instance": "Begin: Pos(111, 12)\nEnd: Pos(126, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/junit/BarChart3DTests.java\nName: testDrawWithNullInfo\nChilds: [StatementAssertion<Begin: Pos(125, 9), End: Pos(125, 28)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/junit/BarChart3DTests.java",
            "name": "testDrawWithNullInfo",
            "begin": "Pos(111, 12)",
            "end": "Pos(126, 5)",
            "begin_line_no": 111,
            "end_line_no": 126,
            "child": [
                "Begin: Pos(125, 9)\nEnd: Pos(125, 28)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [],
            "func": {}
        },
        "org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo": {
            "file_path": "tests/org/jfree/chart/junit/BarChartTests.java",
            "Instance": "Begin: Pos(111, 12)\nEnd: Pos(130, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/junit/BarChartTests.java\nName: testDrawWithNullInfo\nChilds: [StatementAssertion<Begin: Pos(128, 9), End: Pos(128, 28)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/junit/BarChartTests.java",
            "name": "testDrawWithNullInfo",
            "begin": "Pos(111, 12)",
            "end": "Pos(130, 5)",
            "begin_line_no": 111,
            "end_line_no": 130,
            "child": [
                "Begin: Pos(128, 9)\nEnd: Pos(128, 28)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [],
            "func": {}
        },
        "org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo": {
            "file_path": "tests/org/jfree/chart/junit/GanttChartTests.java",
            "Instance": "Begin: Pos(110, 12)\nEnd: Pos(125, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/junit/GanttChartTests.java\nName: testDrawWithNullInfo\nChilds: [StatementAssertion<Begin: Pos(124, 9), End: Pos(124, 28)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/junit/GanttChartTests.java",
            "name": "testDrawWithNullInfo",
            "begin": "Pos(110, 12)",
            "end": "Pos(125, 5)",
            "begin_line_no": 110,
            "end_line_no": 125,
            "child": [
                "Begin: Pos(124, 9)\nEnd: Pos(124, 28)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [],
            "func": {}
        },
        "org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2": {
            "file_path": "tests/org/jfree/chart/junit/GanttChartTests.java",
            "Instance": "Begin: Pos(131, 12)\nEnd: Pos(144, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/junit/GanttChartTests.java\nName: testDrawWithNullInfo2\nChilds: [StatementAssertion<Begin: Pos(143, 9), End: Pos(143, 28)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/junit/GanttChartTests.java",
            "name": "testDrawWithNullInfo2",
            "begin": "Pos(131, 12)",
            "end": "Pos(144, 5)",
            "begin_line_no": 131,
            "end_line_no": 144,
            "child": [
                "Begin: Pos(143, 9)\nEnd: Pos(143, 28)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [],
            "func": {}
        },
        "org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo": {
            "file_path": "tests/org/jfree/chart/junit/LineChart3DTests.java",
            "Instance": "Begin: Pos(108, 12)\nEnd: Pos(125, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/junit/LineChart3DTests.java\nName: testDrawWithNullInfo\nChilds: [StatementAssertion<Begin: Pos(123, 9), End: Pos(123, 28)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/junit/LineChart3DTests.java",
            "name": "testDrawWithNullInfo",
            "begin": "Pos(108, 12)",
            "end": "Pos(125, 5)",
            "begin_line_no": 108,
            "end_line_no": 125,
            "child": [
                "Begin: Pos(123, 9)\nEnd: Pos(123, 28)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [],
            "func": {}
        },
        "org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo": {
            "file_path": "tests/org/jfree/chart/junit/LineChartTests.java",
            "Instance": "Begin: Pos(108, 12)\nEnd: Pos(125, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/junit/LineChartTests.java\nName: testDrawWithNullInfo\nChilds: [StatementAssertion<Begin: Pos(123, 9), End: Pos(123, 28)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/junit/LineChartTests.java",
            "name": "testDrawWithNullInfo",
            "begin": "Pos(108, 12)",
            "end": "Pos(125, 5)",
            "begin_line_no": 108,
            "end_line_no": 125,
            "child": [
                "Begin: Pos(123, 9)\nEnd: Pos(123, 28)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [],
            "func": {}
        },
        "org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo": {
            "file_path": "tests/org/jfree/chart/junit/StackedAreaChartTests.java",
            "Instance": "Begin: Pos(108, 12)\nEnd: Pos(125, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/junit/StackedAreaChartTests.java\nName: testDrawWithNullInfo\nChilds: [StatementAssertion<Begin: Pos(123, 9), End: Pos(123, 28)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/junit/StackedAreaChartTests.java",
            "name": "testDrawWithNullInfo",
            "begin": "Pos(108, 12)",
            "end": "Pos(125, 5)",
            "begin_line_no": 108,
            "end_line_no": 125,
            "child": [
                "Begin: Pos(123, 9)\nEnd: Pos(123, 28)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [],
            "func": {}
        },
        "org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo": {
            "file_path": "tests/org/jfree/chart/junit/StackedBarChart3DTests.java",
            "Instance": "Begin: Pos(108, 12)\nEnd: Pos(125, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/junit/StackedBarChart3DTests.java\nName: testDrawWithNullInfo\nChilds: [StatementAssertion<Begin: Pos(123, 9), End: Pos(123, 28)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/junit/StackedBarChart3DTests.java",
            "name": "testDrawWithNullInfo",
            "begin": "Pos(108, 12)",
            "end": "Pos(125, 5)",
            "begin_line_no": 108,
            "end_line_no": 125,
            "child": [
                "Begin: Pos(123, 9)\nEnd: Pos(123, 28)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [],
            "func": {}
        },
        "org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo": {
            "file_path": "tests/org/jfree/chart/junit/StackedBarChartTests.java",
            "Instance": "Begin: Pos(112, 12)\nEnd: Pos(131, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/junit/StackedBarChartTests.java\nName: testDrawWithNullInfo\nChilds: [StatementAssertion<Begin: Pos(129, 9), End: Pos(129, 28)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/junit/StackedBarChartTests.java",
            "name": "testDrawWithNullInfo",
            "begin": "Pos(112, 12)",
            "end": "Pos(131, 5)",
            "begin_line_no": 112,
            "end_line_no": 131,
            "child": [
                "Begin: Pos(129, 9)\nEnd: Pos(129, 28)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [],
            "func": {}
        },
        "org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo": {
            "file_path": "tests/org/jfree/chart/junit/WaterfallChartTests.java",
            "Instance": "Begin: Pos(104, 12)\nEnd: Pos(123, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/junit/WaterfallChartTests.java\nName: testDrawWithNullInfo\nChilds: [StatementAssertion<Begin: Pos(121, 9), End: Pos(121, 28)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/junit/WaterfallChartTests.java",
            "name": "testDrawWithNullInfo",
            "begin": "Pos(104, 12)",
            "end": "Pos(123, 5)",
            "begin_line_no": 104,
            "end_line_no": 123,
            "child": [
                "Begin: Pos(121, 9)\nEnd: Pos(121, 28)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [],
            "func": {}
        },
        "org.jfree.chart.plot.junit.CategoryPlotTests::test1654215": {
            "file_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
            "Instance": "Begin: Pos(686, 12)\nEnd: Pos(706, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/plot/junit/CategoryPlotTests.java\nName: test1654215\nChilds: [StatementAssertion<Begin: Pos(705, 9), End: Pos(705, 28)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/plot/junit/CategoryPlotTests.java",
            "name": "test1654215",
            "begin": "Pos(686, 12)",
            "end": "Pos(706, 5)",
            "begin_line_no": 686,
            "end_line_no": 706,
            "child": [
                "Begin: Pos(705, 9)\nEnd: Pos(705, 28)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [],
            "func": {}
        },
        "org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3": {
            "file_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
            "Instance": "Begin: Pos(475, 12)\nEnd: Pos(515, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/plot/junit/CategoryPlotTests.java\nName: testSerialization3\nChilds: [StatementAssertion<Begin: Pos(502, 13), End: Pos(502, 31)>,\nStatementAssertion<Begin: Pos(514, 9), End: Pos(514, 27)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/plot/junit/CategoryPlotTests.java",
            "name": "testSerialization3",
            "begin": "Pos(475, 12)",
            "end": "Pos(515, 5)",
            "begin_line_no": 475,
            "end_line_no": 515,
            "child": [
                "Begin: Pos(502, 13)\nEnd: Pos(502, 31)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(514, 9)\nEnd: Pos(514, 27)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testSerialization3$catena_0() {\n        DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n        JFreeChart chart = ChartFactory.createBarChart(\n            \"Test Chart\",\n            \"Category Axis\",\n            \"Value Axis\",\n            dataset,\n            PlotOrientation.VERTICAL,\n            true,\n            true,\n            false\n        );\n        JFreeChart chart2 = null;\n        \n        // serialize and deserialize the chart....\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(chart);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            chart2 = (JFreeChart) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            fail(e.toString());                                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n\n        // now check that the chart is usable...\n        boolean passed = true;\n        try {\n            chart2.createBufferedImage(300, 200);\n        }\n        catch (Exception e) {\n            passed = false;  \n            e.printStackTrace();            \n        }\n        try{ assertTrue(passed);                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testSerialization3$catena_1() {\n        DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n        JFreeChart chart = ChartFactory.createBarChart(\n            \"Test Chart\",\n            \"Category Axis\",\n            \"Value Axis\",\n            dataset,\n            PlotOrientation.VERTICAL,\n            true,\n            true,\n            false\n        );\n        JFreeChart chart2 = null;\n        \n        // serialize and deserialize the chart....\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(chart);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            chart2 = (JFreeChart) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            try{ fail(e.toString());                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // now check that the chart is usable...\n        boolean passed = true;\n        try {\n            chart2.createBufferedImage(300, 200);\n        }\n        catch (Exception e) {\n            passed = false;  \n            e.printStackTrace();            \n        }\n        assertTrue(passed);                                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void testSerialization3$catena_0() {\n        DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n        JFreeChart chart = ChartFactory.createBarChart(\n            \"Test Chart\",\n            \"Category Axis\",\n            \"Value Axis\",\n            dataset,\n            PlotOrientation.VERTICAL,\n            true,\n            true,\n            false\n        );\n        JFreeChart chart2 = null;\n        \n        // serialize and deserialize the chart....\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(chart);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            chart2 = (JFreeChart) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            fail(e.toString());                                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n\n        // now check that the chart is usable...\n        boolean passed = true;\n        try {\n            chart2.createBufferedImage(300, 200);\n        }\n        catch (Exception e) {\n            passed = false;  \n            e.printStackTrace();            \n        }\n        try{ assertTrue(passed);                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void testSerialization3$catena_1() {\n        DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n        JFreeChart chart = ChartFactory.createBarChart(\n            \"Test Chart\",\n            \"Category Axis\",\n            \"Value Axis\",\n            dataset,\n            PlotOrientation.VERTICAL,\n            true,\n            true,\n            false\n        );\n        JFreeChart chart2 = null;\n        \n        // serialize and deserialize the chart....\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(chart);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            chart2 = (JFreeChart) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            try{ fail(e.toString());                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        // now check that the chart is usable...\n        boolean passed = true;\n        try {\n            chart2.createBufferedImage(300, 200);\n        }\n        catch (Exception e) {\n            passed = false;  \n            e.printStackTrace();            \n        }\n        assertTrue(passed);                                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4": {
            "file_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
            "Instance": "Begin: Pos(520, 12)\nEnd: Pos(564, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/plot/junit/CategoryPlotTests.java\nName: testSerialization4\nChilds: [StatementAssertion<Begin: Pos(550, 13), End: Pos(550, 31)>,\nStatementAssertion<Begin: Pos(552, 9), End: Pos(552, 36)>,\nStatementAssertion<Begin: Pos(563, 9), End: Pos(563, 27)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/plot/junit/CategoryPlotTests.java",
            "name": "testSerialization4",
            "begin": "Pos(520, 12)",
            "end": "Pos(564, 5)",
            "begin_line_no": 520,
            "end_line_no": 564,
            "child": [
                "Begin: Pos(550, 13)\nEnd: Pos(550, 31)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(552, 9)\nEnd: Pos(552, 36)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(563, 9)\nEnd: Pos(563, 27)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testSerialization4$catena_0() {\n        DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n        JFreeChart chart = ChartFactory.createBarChart(\n            \"Test Chart\",\n            \"Category Axis\",\n            \"Value Axis\",\n            dataset,\n            PlotOrientation.VERTICAL,\n            true,\n            true,\n            false\n        );\n        CategoryPlot plot = (CategoryPlot) chart.getPlot();\n        plot.addRangeMarker(new ValueMarker(1.1), Layer.FOREGROUND);\n        plot.addRangeMarker(new IntervalMarker(2.2, 3.3), Layer.BACKGROUND);\n        JFreeChart chart2 = null;\n        \n        // serialize and deserialize the chart....\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(chart);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            chart2 = (JFreeChart) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            fail(e.toString());                                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n        try{ assertEquals(chart, chart2);                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // now check that the chart is usable...\n        boolean passed = true;\n        try {\n            chart2.createBufferedImage(300, 200);\n        }\n        catch (Exception e) {\n            passed = false;  \n            e.printStackTrace();            \n        }\n        try{ assertTrue(passed);                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testSerialization4$catena_1() {\n        DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n        JFreeChart chart = ChartFactory.createBarChart(\n            \"Test Chart\",\n            \"Category Axis\",\n            \"Value Axis\",\n            dataset,\n            PlotOrientation.VERTICAL,\n            true,\n            true,\n            false\n        );\n        CategoryPlot plot = (CategoryPlot) chart.getPlot();\n        plot.addRangeMarker(new ValueMarker(1.1), Layer.FOREGROUND);\n        plot.addRangeMarker(new IntervalMarker(2.2, 3.3), Layer.BACKGROUND);\n        JFreeChart chart2 = null;\n        \n        // serialize and deserialize the chart....\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(chart);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            chart2 = (JFreeChart) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            try{ fail(e.toString());                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        assertEquals(chart, chart2);                                                                        /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        // now check that the chart is usable...\n        boolean passed = true;\n        try {\n            chart2.createBufferedImage(300, 200);\n        }\n        catch (Exception e) {\n            passed = false;  \n            e.printStackTrace();            \n        }\n        try{ assertTrue(passed);                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testSerialization4$catena_2() {\n        DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n        JFreeChart chart = ChartFactory.createBarChart(\n            \"Test Chart\",\n            \"Category Axis\",\n            \"Value Axis\",\n            dataset,\n            PlotOrientation.VERTICAL,\n            true,\n            true,\n            false\n        );\n        CategoryPlot plot = (CategoryPlot) chart.getPlot();\n        plot.addRangeMarker(new ValueMarker(1.1), Layer.FOREGROUND);\n        plot.addRangeMarker(new IntervalMarker(2.2, 3.3), Layer.BACKGROUND);\n        JFreeChart chart2 = null;\n        \n        // serialize and deserialize the chart....\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(chart);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            chart2 = (JFreeChart) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            try{ fail(e.toString());                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(chart, chart2);                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // now check that the chart is usable...\n        boolean passed = true;\n        try {\n            chart2.createBufferedImage(300, 200);\n        }\n        catch (Exception e) {\n            passed = false;  \n            e.printStackTrace();            \n        }\n        assertTrue(passed);                                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void testSerialization4$catena_0() {\n        DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n        JFreeChart chart = ChartFactory.createBarChart(\n            \"Test Chart\",\n            \"Category Axis\",\n            \"Value Axis\",\n            dataset,\n            PlotOrientation.VERTICAL,\n            true,\n            true,\n            false\n        );\n        CategoryPlot plot = (CategoryPlot) chart.getPlot();\n        plot.addRangeMarker(new ValueMarker(1.1), Layer.FOREGROUND);\n        plot.addRangeMarker(new IntervalMarker(2.2, 3.3), Layer.BACKGROUND);\n        JFreeChart chart2 = null;\n        \n        // serialize and deserialize the chart....\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(chart);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            chart2 = (JFreeChart) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            fail(e.toString());                                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n        try{ assertEquals(chart, chart2);                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // now check that the chart is usable...\n        boolean passed = true;\n        try {\n            chart2.createBufferedImage(300, 200);\n        }\n        catch (Exception e) {\n            passed = false;  \n            e.printStackTrace();            \n        }\n        try{ assertTrue(passed);                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void testSerialization4$catena_1() {\n        DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n        JFreeChart chart = ChartFactory.createBarChart(\n            \"Test Chart\",\n            \"Category Axis\",\n            \"Value Axis\",\n            dataset,\n            PlotOrientation.VERTICAL,\n            true,\n            true,\n            false\n        );\n        CategoryPlot plot = (CategoryPlot) chart.getPlot();\n        plot.addRangeMarker(new ValueMarker(1.1), Layer.FOREGROUND);\n        plot.addRangeMarker(new IntervalMarker(2.2, 3.3), Layer.BACKGROUND);\n        JFreeChart chart2 = null;\n        \n        // serialize and deserialize the chart....\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(chart);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            chart2 = (JFreeChart) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            try{ fail(e.toString());                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        assertEquals(chart, chart2);                                                                        /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        // now check that the chart is usable...\n        boolean passed = true;\n        try {\n            chart2.createBufferedImage(300, 200);\n        }\n        catch (Exception e) {\n            passed = false;  \n            e.printStackTrace();            \n        }\n        try{ assertTrue(passed);                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "2": "    public void testSerialization4$catena_2() {\n        DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n        JFreeChart chart = ChartFactory.createBarChart(\n            \"Test Chart\",\n            \"Category Axis\",\n            \"Value Axis\",\n            dataset,\n            PlotOrientation.VERTICAL,\n            true,\n            true,\n            false\n        );\n        CategoryPlot plot = (CategoryPlot) chart.getPlot();\n        plot.addRangeMarker(new ValueMarker(1.1), Layer.FOREGROUND);\n        plot.addRangeMarker(new IntervalMarker(2.2, 3.3), Layer.BACKGROUND);\n        JFreeChart chart2 = null;\n        \n        // serialize and deserialize the chart....\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(chart);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            chart2 = (JFreeChart) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            try{ fail(e.toString());                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(chart, chart2);                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // now check that the chart is usable...\n        boolean passed = true;\n        try {\n            chart2.createBufferedImage(300, 200);\n        }\n        catch (Exception e) {\n            passed = false;  \n            e.printStackTrace();            \n        }\n        assertTrue(passed);                                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo": {
            "file_path": "tests/org/jfree/chart/renderer/category/junit/BoxAndWhiskerRendererTests.java",
            "Instance": "Begin: Pos(188, 12)\nEnd: Pos(209, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/renderer/category/junit/BoxAndWhiskerRendererTests.java\nName: testDrawWithNullInfo\nChilds: [StatementAssertion<Begin: Pos(208, 9), End: Pos(208, 28)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/renderer/category/junit/BoxAndWhiskerRendererTests.java",
            "name": "testDrawWithNullInfo",
            "begin": "Pos(188, 12)",
            "end": "Pos(209, 5)",
            "begin_line_no": 188,
            "end_line_no": 209,
            "child": [
                "Begin: Pos(208, 9)\nEnd: Pos(208, 28)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [],
            "func": {}
        },
        "org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo": {
            "file_path": "tests/org/jfree/chart/renderer/category/junit/GroupedStackedBarRendererTests.java",
            "Instance": "Begin: Pos(154, 12)\nEnd: Pos(177, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/renderer/category/junit/GroupedStackedBarRendererTests.java\nName: testDrawWithNullInfo\nChilds: [StatementAssertion<Begin: Pos(176, 9), End: Pos(176, 28)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/renderer/category/junit/GroupedStackedBarRendererTests.java",
            "name": "testDrawWithNullInfo",
            "begin": "Pos(154, 12)",
            "end": "Pos(177, 5)",
            "begin_line_no": 154,
            "end_line_no": 177,
            "child": [
                "Begin: Pos(176, 9)\nEnd: Pos(176, 28)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [],
            "func": {}
        },
        "org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo": {
            "file_path": "tests/org/jfree/chart/renderer/category/junit/IntervalBarRendererTests.java",
            "Instance": "Begin: Pos(155, 12)\nEnd: Pos(177, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/renderer/category/junit/IntervalBarRendererTests.java\nName: testDrawWithNullInfo\nChilds: [StatementAssertion<Begin: Pos(176, 9), End: Pos(176, 28)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/renderer/category/junit/IntervalBarRendererTests.java",
            "name": "testDrawWithNullInfo",
            "begin": "Pos(155, 12)",
            "end": "Pos(177, 5)",
            "begin_line_no": 155,
            "end_line_no": 177,
            "child": [
                "Begin: Pos(176, 9)\nEnd: Pos(176, 28)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [],
            "func": {}
        },
        "org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo": {
            "file_path": "tests/org/jfree/chart/renderer/category/junit/LayeredBarRendererTests.java",
            "Instance": "Begin: Pos(155, 12)\nEnd: Pos(173, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/renderer/category/junit/LayeredBarRendererTests.java\nName: testDrawWithNullInfo\nChilds: [StatementAssertion<Begin: Pos(172, 9), End: Pos(172, 28)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/renderer/category/junit/LayeredBarRendererTests.java",
            "name": "testDrawWithNullInfo",
            "begin": "Pos(155, 12)",
            "end": "Pos(173, 5)",
            "begin_line_no": 155,
            "end_line_no": 173,
            "child": [
                "Begin: Pos(172, 9)\nEnd: Pos(172, 28)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [],
            "func": {}
        },
        "org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo": {
            "file_path": "tests/org/jfree/chart/renderer/category/junit/LevelRendererTests.java",
            "Instance": "Begin: Pos(196, 12)\nEnd: Pos(214, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/renderer/category/junit/LevelRendererTests.java\nName: testDrawWithNullInfo\nChilds: [StatementAssertion<Begin: Pos(213, 9), End: Pos(213, 28)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/renderer/category/junit/LevelRendererTests.java",
            "name": "testDrawWithNullInfo",
            "begin": "Pos(196, 12)",
            "end": "Pos(214, 5)",
            "begin_line_no": 196,
            "end_line_no": 214,
            "child": [
                "Begin: Pos(213, 9)\nEnd: Pos(213, 28)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [],
            "func": {}
        },
        "org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo": {
            "file_path": "tests/org/jfree/chart/renderer/category/junit/MinMaxCategoryRendererTests.java",
            "Instance": "Begin: Pos(154, 12)\nEnd: Pos(172, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/renderer/category/junit/MinMaxCategoryRendererTests.java\nName: testDrawWithNullInfo\nChilds: [StatementAssertion<Begin: Pos(171, 9), End: Pos(171, 28)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/renderer/category/junit/MinMaxCategoryRendererTests.java",
            "name": "testDrawWithNullInfo",
            "begin": "Pos(154, 12)",
            "end": "Pos(172, 5)",
            "begin_line_no": 154,
            "end_line_no": 172,
            "child": [
                "Begin: Pos(171, 9)\nEnd: Pos(171, 28)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [],
            "func": {}
        },
        "org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo": {
            "file_path": "tests/org/jfree/chart/renderer/category/junit/StatisticalBarRendererTests.java",
            "Instance": "Begin: Pos(161, 12)\nEnd: Pos(181, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/renderer/category/junit/StatisticalBarRendererTests.java\nName: testDrawWithNullInfo\nChilds: [StatementAssertion<Begin: Pos(180, 9), End: Pos(180, 28)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/renderer/category/junit/StatisticalBarRendererTests.java",
            "name": "testDrawWithNullInfo",
            "begin": "Pos(161, 12)",
            "end": "Pos(181, 5)",
            "begin_line_no": 161,
            "end_line_no": 181,
            "child": [
                "Begin: Pos(180, 9)\nEnd: Pos(180, 28)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [],
            "func": {}
        },
        "org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo": {
            "file_path": "tests/org/jfree/chart/renderer/category/junit/StatisticalLineAndShapeRendererTests.java",
            "Instance": "Begin: Pos(168, 12)\nEnd: Pos(188, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/renderer/category/junit/StatisticalLineAndShapeRendererTests.java\nName: testDrawWithNullInfo\nChilds: [StatementAssertion<Begin: Pos(187, 9), End: Pos(187, 28)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Chart_26/tests//org/jfree/chart/renderer/category/junit/StatisticalLineAndShapeRendererTests.java",
            "name": "testDrawWithNullInfo",
            "begin": "Pos(168, 12)",
            "end": "Pos(188, 5)",
            "begin_line_no": 168,
            "end_line_no": 188,
            "child": [
                "Begin: Pos(187, 9)\nEnd: Pos(187, 28)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [],
            "func": {}
        }
    },
    "11": {
        "failing_tests": [
            "org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo",
            "org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo",
            "org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo",
            "org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo",
            "org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3$catena_1",
            "org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo",
            "org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo",
            "org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo",
            "org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo",
            "org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4$catena_2",
            "org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo",
            "org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo",
            "org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo",
            "org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo",
            "org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo",
            "org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo",
            "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo",
            "org.jfree.chart.plot.junit.CategoryPlotTests::test1654215",
            "org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo",
            "org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo",
            "org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2",
            "org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo"
        ]
    }
}