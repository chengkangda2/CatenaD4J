{
    "original": {
        "num_of_hunks": 9,
        "0": {
            "file_name": "src/main/java/org/joda/time/DateTimeZone.java",
            "replaced_with": "    public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {\n        int offsetOriginal = getOffset(originalInstantUTC);\n        long instantUTC = instantLocal - offsetOriginal;\n        int offsetLocalFromOriginal = getOffset(instantUTC);\n        if (offsetLocalFromOriginal == offsetOriginal) {\n            return instantUTC;\n        }\n        return convertLocalToUTC(instantLocal, strict);\n    }\n",
            "patch_type": "insert",
            "next_line_no": 936
        },
        "1": {
            "file_name": "src/main/java/org/joda/time/chrono/ZonedChronology.java",
            "from_line_no": 436,
            "to_line_no": 436,
            "replaced_with": "               return iZone.convertLocalToUTC(localInstant, false, instant);\n",
            "replaced": "               return iZone.convertLocalToUTC(localInstant, false);\n",
            "patch_type": "replace",
            "next_line_no": 437
        },
        "2": {
            "file_name": "src/main/java/org/joda/time/chrono/ZonedChronology.java",
            "from_line_no": 448,
            "to_line_no": 448,
            "replaced_with": "               return iZone.convertLocalToUTC(localInstant, false, instant);\n",
            "replaced": "               return iZone.convertLocalToUTC(localInstant, false);\n",
            "patch_type": "replace",
            "next_line_no": 449
        },
        "3": {
            "file_name": "src/main/java/org/joda/time/chrono/ZonedChronology.java",
            "from_line_no": 460,
            "to_line_no": 460,
            "replaced_with": "                return iZone.convertLocalToUTC(localInstant, false, instant);\n",
            "replaced": "                return iZone.convertLocalToUTC(localInstant, false);\n",
            "patch_type": "replace",
            "next_line_no": 461
        },
        "4": {
            "file_name": "src/main/java/org/joda/time/chrono/ZonedChronology.java",
            "from_line_no": 467,
            "to_line_no": 467,
            "replaced_with": "            long result = iZone.convertLocalToUTC(localInstant, false, instant);\n",
            "replaced": "            long result = iZone.convertLocalToUTC(localInstant, false);\n",
            "patch_type": "replace",
            "next_line_no": 468
        },
        "5": {
            "file_name": "src/main/java/org/joda/time/chrono/ZonedChronology.java",
            "from_line_no": 481,
            "to_line_no": 481,
            "replaced_with": "            return iZone.convertLocalToUTC(localInstant, false, instant);\n",
            "replaced": "            return iZone.convertLocalToUTC(localInstant, false);\n",
            "patch_type": "replace",
            "next_line_no": 482
        },
        "6": {
            "file_name": "src/main/java/org/joda/time/chrono/ZonedChronology.java",
            "from_line_no": 528,
            "to_line_no": 528,
            "replaced_with": "                return iZone.convertLocalToUTC(localInstant, false, instant);\n",
            "replaced": "                return iZone.convertLocalToUTC(localInstant, false);\n",
            "patch_type": "replace",
            "next_line_no": 529
        },
        "7": {
            "file_name": "src/main/java/org/joda/time/chrono/ZonedChronology.java",
            "from_line_no": 540,
            "to_line_no": 540,
            "replaced_with": "                return iZone.convertLocalToUTC(localInstant, false, instant);\n",
            "replaced": "                return iZone.convertLocalToUTC(localInstant, false);\n",
            "patch_type": "replace",
            "next_line_no": 541
        },
        "8": {
            "file_name": "src/main/java/org/joda/time/field/LenientDateTimeField.java",
            "from_line_no": 75,
            "to_line_no": 75,
            "replaced_with": "        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);\n",
            "replaced": "        return iBase.getZone().convertLocalToUTC(localInstant, false);\n",
            "patch_type": "replace",
            "next_line_no": 76
        }
    },
    "method": {
        "failing_tests": [
            "org.joda.time.TestDateTimeZoneCutover::testWithSecondOfMinuteInDstChange",
            "org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange",
            "org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange_mockZone",
            "org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral",
            "org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_Paris_summer",
            "org.joda.time.TestDateTimeZoneCutover::testWithHourOfDayInDstChange",
            "org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_NewYork_winter",
            "org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW"
        ],
        "org.joda.time.TestDateTimeZoneCutover::testWithSecondOfMinuteInDstChange": {
            "file_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
            "Instance": "Begin: Pos(1097, 12)\nEnd: Pos(1102, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Time_26/src/test/java//org/joda/time/TestDateTimeZoneCutover.java\nName: testWithSecondOfMinuteInDstChange\nChilds: [StatementAssertion<Begin: Pos(1099, 9), End: Pos(1099, 75)>,\nStatementAssertion<Begin: Pos(1101, 9), End: Pos(1101, 71)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Time_26/src/test/java//org/joda/time/TestDateTimeZoneCutover.java",
            "name": "testWithSecondOfMinuteInDstChange",
            "begin": "Pos(1097, 12)",
            "end": "Pos(1102, 5)",
            "begin_line_no": 1097,
            "end_line_no": 1102,
            "child": [
                "Begin: Pos(1099, 9)\nEnd: Pos(1099, 75)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1101, 9)\nEnd: Pos(1101, 71)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testWithSecondOfMinuteInDstChange$catena_0() {\n        DateTime dateTime = new DateTime(\"2010-10-31T02:30:10.123+02:00\", ZONE_PARIS);\n        assertEquals(\"2010-10-31T02:30:10.123+02:00\", dateTime.toString());                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        DateTime test = dateTime.withSecondOfMinute(0);\n        try{ assertEquals(\"2010-10-31T02:30:00.123+02:00\", test.toString());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testWithSecondOfMinuteInDstChange$catena_1() {\n        DateTime dateTime = new DateTime(\"2010-10-31T02:30:10.123+02:00\", ZONE_PARIS);\n        try{ assertEquals(\"2010-10-31T02:30:10.123+02:00\", dateTime.toString());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        DateTime test = dateTime.withSecondOfMinute(0);\n        assertEquals(\"2010-10-31T02:30:00.123+02:00\", test.toString());                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void testWithSecondOfMinuteInDstChange$catena_0() {\n        DateTime dateTime = new DateTime(\"2010-10-31T02:30:10.123+02:00\", ZONE_PARIS);\n        assertEquals(\"2010-10-31T02:30:10.123+02:00\", dateTime.toString());                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        DateTime test = dateTime.withSecondOfMinute(0);\n        try{ assertEquals(\"2010-10-31T02:30:00.123+02:00\", test.toString());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void testWithSecondOfMinuteInDstChange$catena_1() {\n        DateTime dateTime = new DateTime(\"2010-10-31T02:30:10.123+02:00\", ZONE_PARIS);\n        try{ assertEquals(\"2010-10-31T02:30:10.123+02:00\", dateTime.toString());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        DateTime test = dateTime.withSecondOfMinute(0);\n        assertEquals(\"2010-10-31T02:30:00.123+02:00\", test.toString());                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange": {
            "file_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
            "Instance": "Begin: Pos(1090, 12)\nEnd: Pos(1095, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Time_26/src/test/java//org/joda/time/TestDateTimeZoneCutover.java\nName: testWithMinuteOfHourInDstChange\nChilds: [StatementAssertion<Begin: Pos(1092, 9), End: Pos(1092, 75)>,\nStatementAssertion<Begin: Pos(1094, 9), End: Pos(1094, 71)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Time_26/src/test/java//org/joda/time/TestDateTimeZoneCutover.java",
            "name": "testWithMinuteOfHourInDstChange",
            "begin": "Pos(1090, 12)",
            "end": "Pos(1095, 5)",
            "begin_line_no": 1090,
            "end_line_no": 1095,
            "child": [
                "Begin: Pos(1092, 9)\nEnd: Pos(1092, 75)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1094, 9)\nEnd: Pos(1094, 71)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testWithMinuteOfHourInDstChange$catena_0() {\n        DateTime dateTime = new DateTime(\"2010-10-31T02:30:10.123+02:00\", ZONE_PARIS);\n        assertEquals(\"2010-10-31T02:30:10.123+02:00\", dateTime.toString());                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        DateTime test = dateTime.withMinuteOfHour(0);\n        try{ assertEquals(\"2010-10-31T02:00:10.123+02:00\", test.toString());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testWithMinuteOfHourInDstChange$catena_1() {\n        DateTime dateTime = new DateTime(\"2010-10-31T02:30:10.123+02:00\", ZONE_PARIS);\n        try{ assertEquals(\"2010-10-31T02:30:10.123+02:00\", dateTime.toString());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        DateTime test = dateTime.withMinuteOfHour(0);\n        assertEquals(\"2010-10-31T02:00:10.123+02:00\", test.toString());                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void testWithMinuteOfHourInDstChange$catena_0() {\n        DateTime dateTime = new DateTime(\"2010-10-31T02:30:10.123+02:00\", ZONE_PARIS);\n        assertEquals(\"2010-10-31T02:30:10.123+02:00\", dateTime.toString());                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        DateTime test = dateTime.withMinuteOfHour(0);\n        try{ assertEquals(\"2010-10-31T02:00:10.123+02:00\", test.toString());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void testWithMinuteOfHourInDstChange$catena_1() {\n        DateTime dateTime = new DateTime(\"2010-10-31T02:30:10.123+02:00\", ZONE_PARIS);\n        try{ assertEquals(\"2010-10-31T02:30:10.123+02:00\", dateTime.toString());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        DateTime test = dateTime.withMinuteOfHour(0);\n        assertEquals(\"2010-10-31T02:00:10.123+02:00\", test.toString());                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange_mockZone": {
            "file_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
            "Instance": "Begin: Pos(1063, 12)\nEnd: Pos(1081, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Time_26/src/test/java//org/joda/time/TestDateTimeZoneCutover.java\nName: testWithMinuteOfHourInDstChange_mockZone\nChilds: [StatementAssertion<Begin: Pos(1065, 9), End: Pos(1065, 74)>,\nStatementAssertion<Begin: Pos(1068, 9), End: Pos(1068, 70)>,\nStatementAssertion<Begin: Pos(1070, 9), End: Pos(1070, 71)>,\nStatementAssertion<Begin: Pos(1073, 9), End: Pos(1073, 75)>,\nStatementAssertion<Begin: Pos(1075, 9), End: Pos(1075, 75)>,\nStatementAssertion<Begin: Pos(1078, 9), End: Pos(1078, 76)>,\nStatementAssertion<Begin: Pos(1080, 9), End: Pos(1080, 76)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Time_26/src/test/java//org/joda/time/TestDateTimeZoneCutover.java",
            "name": "testWithMinuteOfHourInDstChange_mockZone",
            "begin": "Pos(1063, 12)",
            "end": "Pos(1081, 5)",
            "begin_line_no": 1063,
            "end_line_no": 1081,
            "child": [
                "Begin: Pos(1065, 9)\nEnd: Pos(1065, 74)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1068, 9)\nEnd: Pos(1068, 70)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1070, 9)\nEnd: Pos(1070, 71)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1073, 9)\nEnd: Pos(1073, 75)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1075, 9)\nEnd: Pos(1075, 75)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1078, 9)\nEnd: Pos(1078, 76)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1080, 9)\nEnd: Pos(1080, 76)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testWithMinuteOfHourInDstChange_mockZone$catena_0() {\n        DateTime cutover = new DateTime(2010, 10, 31, 1, 15, DateTimeZone.forOffsetHoursMinutes(0, 30));\n        assertEquals(\"2010-10-31T01:15:00.000+00:30\", cutover.toString());                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        DateTimeZone halfHourZone = new MockZone(cutover.getMillis(), 3600000, -1800);\n        DateTime pre = new DateTime(2010, 10, 31, 1, 0, halfHourZone);\n        try{ assertEquals(\"2010-10-31T01:00:00.000+01:00\", pre.toString());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        DateTime post = new DateTime(2010, 10, 31, 1, 59, halfHourZone);\n        try{ assertEquals(\"2010-10-31T01:59:00.000+00:30\", post.toString());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        DateTime testPre1 = pre.withMinuteOfHour(30);\n        try{ assertEquals(\"2010-10-31T01:30:00.000+01:00\", testPre1.toString());          }catch(Throwable __SHOULD_BE_IGNORED){}  // retain offset\n        DateTime testPre2 = pre.withMinuteOfHour(50);\n        try{ assertEquals(\"2010-10-31T01:50:00.000+00:30\", testPre2.toString());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        DateTime testPost1 = post.withMinuteOfHour(30);\n        try{ assertEquals(\"2010-10-31T01:30:00.000+00:30\", testPost1.toString());         }catch(Throwable __SHOULD_BE_IGNORED){}  // retain offset\n        DateTime testPost2 = post.withMinuteOfHour(10);\n        try{ assertEquals(\"2010-10-31T01:10:00.000+01:00\", testPost2.toString());                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testWithMinuteOfHourInDstChange_mockZone$catena_1() {\n        DateTime cutover = new DateTime(2010, 10, 31, 1, 15, DateTimeZone.forOffsetHoursMinutes(0, 30));\n        try{ assertEquals(\"2010-10-31T01:15:00.000+00:30\", cutover.toString());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        DateTimeZone halfHourZone = new MockZone(cutover.getMillis(), 3600000, -1800);\n        DateTime pre = new DateTime(2010, 10, 31, 1, 0, halfHourZone);\n        assertEquals(\"2010-10-31T01:00:00.000+01:00\", pre.toString());                                      /***** ORIGINAL ASSERTION IS HERE *****/\n        DateTime post = new DateTime(2010, 10, 31, 1, 59, halfHourZone);\n        try{ assertEquals(\"2010-10-31T01:59:00.000+00:30\", post.toString());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        DateTime testPre1 = pre.withMinuteOfHour(30);\n        try{ assertEquals(\"2010-10-31T01:30:00.000+01:00\", testPre1.toString());          }catch(Throwable __SHOULD_BE_IGNORED){}  // retain offset\n        DateTime testPre2 = pre.withMinuteOfHour(50);\n        try{ assertEquals(\"2010-10-31T01:50:00.000+00:30\", testPre2.toString());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        DateTime testPost1 = post.withMinuteOfHour(30);\n        try{ assertEquals(\"2010-10-31T01:30:00.000+00:30\", testPost1.toString());         }catch(Throwable __SHOULD_BE_IGNORED){}  // retain offset\n        DateTime testPost2 = post.withMinuteOfHour(10);\n        try{ assertEquals(\"2010-10-31T01:10:00.000+01:00\", testPost2.toString());                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testWithMinuteOfHourInDstChange_mockZone$catena_2() {\n        DateTime cutover = new DateTime(2010, 10, 31, 1, 15, DateTimeZone.forOffsetHoursMinutes(0, 30));\n        try{ assertEquals(\"2010-10-31T01:15:00.000+00:30\", cutover.toString());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        DateTimeZone halfHourZone = new MockZone(cutover.getMillis(), 3600000, -1800);\n        DateTime pre = new DateTime(2010, 10, 31, 1, 0, halfHourZone);\n        try{ assertEquals(\"2010-10-31T01:00:00.000+01:00\", pre.toString());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        DateTime post = new DateTime(2010, 10, 31, 1, 59, halfHourZone);\n        assertEquals(\"2010-10-31T01:59:00.000+00:30\", post.toString());                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        DateTime testPre1 = pre.withMinuteOfHour(30);\n        try{ assertEquals(\"2010-10-31T01:30:00.000+01:00\", testPre1.toString());          }catch(Throwable __SHOULD_BE_IGNORED){}  // retain offset\n        DateTime testPre2 = pre.withMinuteOfHour(50);\n        try{ assertEquals(\"2010-10-31T01:50:00.000+00:30\", testPre2.toString());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        DateTime testPost1 = post.withMinuteOfHour(30);\n        try{ assertEquals(\"2010-10-31T01:30:00.000+00:30\", testPost1.toString());         }catch(Throwable __SHOULD_BE_IGNORED){}  // retain offset\n        DateTime testPost2 = post.withMinuteOfHour(10);\n        try{ assertEquals(\"2010-10-31T01:10:00.000+01:00\", testPost2.toString());                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testWithMinuteOfHourInDstChange_mockZone$catena_3() {\n        DateTime cutover = new DateTime(2010, 10, 31, 1, 15, DateTimeZone.forOffsetHoursMinutes(0, 30));\n        try{ assertEquals(\"2010-10-31T01:15:00.000+00:30\", cutover.toString());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        DateTimeZone halfHourZone = new MockZone(cutover.getMillis(), 3600000, -1800);\n        DateTime pre = new DateTime(2010, 10, 31, 1, 0, halfHourZone);\n        try{ assertEquals(\"2010-10-31T01:00:00.000+01:00\", pre.toString());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        DateTime post = new DateTime(2010, 10, 31, 1, 59, halfHourZone);\n        try{ assertEquals(\"2010-10-31T01:59:00.000+00:30\", post.toString());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        DateTime testPre1 = pre.withMinuteOfHour(30);\n        assertEquals(\"2010-10-31T01:30:00.000+01:00\", testPre1.toString());               /***** ORIGINAL ASSERTION IS HERE *****/  // retain offset\n        DateTime testPre2 = pre.withMinuteOfHour(50);\n        try{ assertEquals(\"2010-10-31T01:50:00.000+00:30\", testPre2.toString());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        DateTime testPost1 = post.withMinuteOfHour(30);\n        try{ assertEquals(\"2010-10-31T01:30:00.000+00:30\", testPost1.toString());         }catch(Throwable __SHOULD_BE_IGNORED){}  // retain offset\n        DateTime testPost2 = post.withMinuteOfHour(10);\n        try{ assertEquals(\"2010-10-31T01:10:00.000+01:00\", testPost2.toString());                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testWithMinuteOfHourInDstChange_mockZone$catena_4() {\n        DateTime cutover = new DateTime(2010, 10, 31, 1, 15, DateTimeZone.forOffsetHoursMinutes(0, 30));\n        try{ assertEquals(\"2010-10-31T01:15:00.000+00:30\", cutover.toString());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        DateTimeZone halfHourZone = new MockZone(cutover.getMillis(), 3600000, -1800);\n        DateTime pre = new DateTime(2010, 10, 31, 1, 0, halfHourZone);\n        try{ assertEquals(\"2010-10-31T01:00:00.000+01:00\", pre.toString());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        DateTime post = new DateTime(2010, 10, 31, 1, 59, halfHourZone);\n        try{ assertEquals(\"2010-10-31T01:59:00.000+00:30\", post.toString());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        DateTime testPre1 = pre.withMinuteOfHour(30);\n        try{ assertEquals(\"2010-10-31T01:30:00.000+01:00\", testPre1.toString());          }catch(Throwable __SHOULD_BE_IGNORED){}  // retain offset\n        DateTime testPre2 = pre.withMinuteOfHour(50);\n        assertEquals(\"2010-10-31T01:50:00.000+00:30\", testPre2.toString());                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        DateTime testPost1 = post.withMinuteOfHour(30);\n        try{ assertEquals(\"2010-10-31T01:30:00.000+00:30\", testPost1.toString());         }catch(Throwable __SHOULD_BE_IGNORED){}  // retain offset\n        DateTime testPost2 = post.withMinuteOfHour(10);\n        try{ assertEquals(\"2010-10-31T01:10:00.000+01:00\", testPost2.toString());                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testWithMinuteOfHourInDstChange_mockZone$catena_5() {\n        DateTime cutover = new DateTime(2010, 10, 31, 1, 15, DateTimeZone.forOffsetHoursMinutes(0, 30));\n        try{ assertEquals(\"2010-10-31T01:15:00.000+00:30\", cutover.toString());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        DateTimeZone halfHourZone = new MockZone(cutover.getMillis(), 3600000, -1800);\n        DateTime pre = new DateTime(2010, 10, 31, 1, 0, halfHourZone);\n        try{ assertEquals(\"2010-10-31T01:00:00.000+01:00\", pre.toString());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        DateTime post = new DateTime(2010, 10, 31, 1, 59, halfHourZone);\n        try{ assertEquals(\"2010-10-31T01:59:00.000+00:30\", post.toString());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        DateTime testPre1 = pre.withMinuteOfHour(30);\n        try{ assertEquals(\"2010-10-31T01:30:00.000+01:00\", testPre1.toString());          }catch(Throwable __SHOULD_BE_IGNORED){}  // retain offset\n        DateTime testPre2 = pre.withMinuteOfHour(50);\n        try{ assertEquals(\"2010-10-31T01:50:00.000+00:30\", testPre2.toString());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        DateTime testPost1 = post.withMinuteOfHour(30);\n        assertEquals(\"2010-10-31T01:30:00.000+00:30\", testPost1.toString());              /***** ORIGINAL ASSERTION IS HERE *****/  // retain offset\n        DateTime testPost2 = post.withMinuteOfHour(10);\n        try{ assertEquals(\"2010-10-31T01:10:00.000+01:00\", testPost2.toString());                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testWithMinuteOfHourInDstChange_mockZone$catena_6() {\n        DateTime cutover = new DateTime(2010, 10, 31, 1, 15, DateTimeZone.forOffsetHoursMinutes(0, 30));\n        try{ assertEquals(\"2010-10-31T01:15:00.000+00:30\", cutover.toString());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        DateTimeZone halfHourZone = new MockZone(cutover.getMillis(), 3600000, -1800);\n        DateTime pre = new DateTime(2010, 10, 31, 1, 0, halfHourZone);\n        try{ assertEquals(\"2010-10-31T01:00:00.000+01:00\", pre.toString());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        DateTime post = new DateTime(2010, 10, 31, 1, 59, halfHourZone);\n        try{ assertEquals(\"2010-10-31T01:59:00.000+00:30\", post.toString());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        DateTime testPre1 = pre.withMinuteOfHour(30);\n        try{ assertEquals(\"2010-10-31T01:30:00.000+01:00\", testPre1.toString());          }catch(Throwable __SHOULD_BE_IGNORED){}  // retain offset\n        DateTime testPre2 = pre.withMinuteOfHour(50);\n        try{ assertEquals(\"2010-10-31T01:50:00.000+00:30\", testPre2.toString());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        DateTime testPost1 = post.withMinuteOfHour(30);\n        try{ assertEquals(\"2010-10-31T01:30:00.000+00:30\", testPost1.toString());         }catch(Throwable __SHOULD_BE_IGNORED){}  // retain offset\n        DateTime testPost2 = post.withMinuteOfHour(10);\n        assertEquals(\"2010-10-31T01:10:00.000+01:00\", testPost2.toString());                                /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void testWithMinuteOfHourInDstChange_mockZone$catena_0() {\n        DateTime cutover = new DateTime(2010, 10, 31, 1, 15, DateTimeZone.forOffsetHoursMinutes(0, 30));\n        assertEquals(\"2010-10-31T01:15:00.000+00:30\", cutover.toString());                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        DateTimeZone halfHourZone = new MockZone(cutover.getMillis(), 3600000, -1800);\n        DateTime pre = new DateTime(2010, 10, 31, 1, 0, halfHourZone);\n        try{ assertEquals(\"2010-10-31T01:00:00.000+01:00\", pre.toString());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        DateTime post = new DateTime(2010, 10, 31, 1, 59, halfHourZone);\n        try{ assertEquals(\"2010-10-31T01:59:00.000+00:30\", post.toString());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        DateTime testPre1 = pre.withMinuteOfHour(30);\n        try{ assertEquals(\"2010-10-31T01:30:00.000+01:00\", testPre1.toString());          }catch(Throwable __SHOULD_BE_IGNORED){}  // retain offset\n        DateTime testPre2 = pre.withMinuteOfHour(50);\n        try{ assertEquals(\"2010-10-31T01:50:00.000+00:30\", testPre2.toString());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        DateTime testPost1 = post.withMinuteOfHour(30);\n        try{ assertEquals(\"2010-10-31T01:30:00.000+00:30\", testPost1.toString());         }catch(Throwable __SHOULD_BE_IGNORED){}  // retain offset\n        DateTime testPost2 = post.withMinuteOfHour(10);\n        try{ assertEquals(\"2010-10-31T01:10:00.000+01:00\", testPost2.toString());                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void testWithMinuteOfHourInDstChange_mockZone$catena_1() {\n        DateTime cutover = new DateTime(2010, 10, 31, 1, 15, DateTimeZone.forOffsetHoursMinutes(0, 30));\n        try{ assertEquals(\"2010-10-31T01:15:00.000+00:30\", cutover.toString());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        DateTimeZone halfHourZone = new MockZone(cutover.getMillis(), 3600000, -1800);\n        DateTime pre = new DateTime(2010, 10, 31, 1, 0, halfHourZone);\n        assertEquals(\"2010-10-31T01:00:00.000+01:00\", pre.toString());                                      /***** ORIGINAL ASSERTION IS HERE *****/\n        DateTime post = new DateTime(2010, 10, 31, 1, 59, halfHourZone);\n        try{ assertEquals(\"2010-10-31T01:59:00.000+00:30\", post.toString());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        DateTime testPre1 = pre.withMinuteOfHour(30);\n        try{ assertEquals(\"2010-10-31T01:30:00.000+01:00\", testPre1.toString());          }catch(Throwable __SHOULD_BE_IGNORED){}  // retain offset\n        DateTime testPre2 = pre.withMinuteOfHour(50);\n        try{ assertEquals(\"2010-10-31T01:50:00.000+00:30\", testPre2.toString());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        DateTime testPost1 = post.withMinuteOfHour(30);\n        try{ assertEquals(\"2010-10-31T01:30:00.000+00:30\", testPost1.toString());         }catch(Throwable __SHOULD_BE_IGNORED){}  // retain offset\n        DateTime testPost2 = post.withMinuteOfHour(10);\n        try{ assertEquals(\"2010-10-31T01:10:00.000+01:00\", testPost2.toString());                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "2": "    public void testWithMinuteOfHourInDstChange_mockZone$catena_2() {\n        DateTime cutover = new DateTime(2010, 10, 31, 1, 15, DateTimeZone.forOffsetHoursMinutes(0, 30));\n        try{ assertEquals(\"2010-10-31T01:15:00.000+00:30\", cutover.toString());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        DateTimeZone halfHourZone = new MockZone(cutover.getMillis(), 3600000, -1800);\n        DateTime pre = new DateTime(2010, 10, 31, 1, 0, halfHourZone);\n        try{ assertEquals(\"2010-10-31T01:00:00.000+01:00\", pre.toString());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        DateTime post = new DateTime(2010, 10, 31, 1, 59, halfHourZone);\n        assertEquals(\"2010-10-31T01:59:00.000+00:30\", post.toString());                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        DateTime testPre1 = pre.withMinuteOfHour(30);\n        try{ assertEquals(\"2010-10-31T01:30:00.000+01:00\", testPre1.toString());          }catch(Throwable __SHOULD_BE_IGNORED){}  // retain offset\n        DateTime testPre2 = pre.withMinuteOfHour(50);\n        try{ assertEquals(\"2010-10-31T01:50:00.000+00:30\", testPre2.toString());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        DateTime testPost1 = post.withMinuteOfHour(30);\n        try{ assertEquals(\"2010-10-31T01:30:00.000+00:30\", testPost1.toString());         }catch(Throwable __SHOULD_BE_IGNORED){}  // retain offset\n        DateTime testPost2 = post.withMinuteOfHour(10);\n        try{ assertEquals(\"2010-10-31T01:10:00.000+01:00\", testPost2.toString());                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "3": "    public void testWithMinuteOfHourInDstChange_mockZone$catena_3() {\n        DateTime cutover = new DateTime(2010, 10, 31, 1, 15, DateTimeZone.forOffsetHoursMinutes(0, 30));\n        try{ assertEquals(\"2010-10-31T01:15:00.000+00:30\", cutover.toString());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        DateTimeZone halfHourZone = new MockZone(cutover.getMillis(), 3600000, -1800);\n        DateTime pre = new DateTime(2010, 10, 31, 1, 0, halfHourZone);\n        try{ assertEquals(\"2010-10-31T01:00:00.000+01:00\", pre.toString());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        DateTime post = new DateTime(2010, 10, 31, 1, 59, halfHourZone);\n        try{ assertEquals(\"2010-10-31T01:59:00.000+00:30\", post.toString());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        DateTime testPre1 = pre.withMinuteOfHour(30);\n        assertEquals(\"2010-10-31T01:30:00.000+01:00\", testPre1.toString());               /***** ORIGINAL ASSERTION IS HERE *****/  // retain offset\n        DateTime testPre2 = pre.withMinuteOfHour(50);\n        try{ assertEquals(\"2010-10-31T01:50:00.000+00:30\", testPre2.toString());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        DateTime testPost1 = post.withMinuteOfHour(30);\n        try{ assertEquals(\"2010-10-31T01:30:00.000+00:30\", testPost1.toString());         }catch(Throwable __SHOULD_BE_IGNORED){}  // retain offset\n        DateTime testPost2 = post.withMinuteOfHour(10);\n        try{ assertEquals(\"2010-10-31T01:10:00.000+01:00\", testPost2.toString());                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "4": "    public void testWithMinuteOfHourInDstChange_mockZone$catena_4() {\n        DateTime cutover = new DateTime(2010, 10, 31, 1, 15, DateTimeZone.forOffsetHoursMinutes(0, 30));\n        try{ assertEquals(\"2010-10-31T01:15:00.000+00:30\", cutover.toString());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        DateTimeZone halfHourZone = new MockZone(cutover.getMillis(), 3600000, -1800);\n        DateTime pre = new DateTime(2010, 10, 31, 1, 0, halfHourZone);\n        try{ assertEquals(\"2010-10-31T01:00:00.000+01:00\", pre.toString());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        DateTime post = new DateTime(2010, 10, 31, 1, 59, halfHourZone);\n        try{ assertEquals(\"2010-10-31T01:59:00.000+00:30\", post.toString());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        DateTime testPre1 = pre.withMinuteOfHour(30);\n        try{ assertEquals(\"2010-10-31T01:30:00.000+01:00\", testPre1.toString());          }catch(Throwable __SHOULD_BE_IGNORED){}  // retain offset\n        DateTime testPre2 = pre.withMinuteOfHour(50);\n        assertEquals(\"2010-10-31T01:50:00.000+00:30\", testPre2.toString());                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        DateTime testPost1 = post.withMinuteOfHour(30);\n        try{ assertEquals(\"2010-10-31T01:30:00.000+00:30\", testPost1.toString());         }catch(Throwable __SHOULD_BE_IGNORED){}  // retain offset\n        DateTime testPost2 = post.withMinuteOfHour(10);\n        try{ assertEquals(\"2010-10-31T01:10:00.000+01:00\", testPost2.toString());                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "5": "    public void testWithMinuteOfHourInDstChange_mockZone$catena_5() {\n        DateTime cutover = new DateTime(2010, 10, 31, 1, 15, DateTimeZone.forOffsetHoursMinutes(0, 30));\n        try{ assertEquals(\"2010-10-31T01:15:00.000+00:30\", cutover.toString());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        DateTimeZone halfHourZone = new MockZone(cutover.getMillis(), 3600000, -1800);\n        DateTime pre = new DateTime(2010, 10, 31, 1, 0, halfHourZone);\n        try{ assertEquals(\"2010-10-31T01:00:00.000+01:00\", pre.toString());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        DateTime post = new DateTime(2010, 10, 31, 1, 59, halfHourZone);\n        try{ assertEquals(\"2010-10-31T01:59:00.000+00:30\", post.toString());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        DateTime testPre1 = pre.withMinuteOfHour(30);\n        try{ assertEquals(\"2010-10-31T01:30:00.000+01:00\", testPre1.toString());          }catch(Throwable __SHOULD_BE_IGNORED){}  // retain offset\n        DateTime testPre2 = pre.withMinuteOfHour(50);\n        try{ assertEquals(\"2010-10-31T01:50:00.000+00:30\", testPre2.toString());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        DateTime testPost1 = post.withMinuteOfHour(30);\n        assertEquals(\"2010-10-31T01:30:00.000+00:30\", testPost1.toString());              /***** ORIGINAL ASSERTION IS HERE *****/  // retain offset\n        DateTime testPost2 = post.withMinuteOfHour(10);\n        try{ assertEquals(\"2010-10-31T01:10:00.000+01:00\", testPost2.toString());                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "6": "    public void testWithMinuteOfHourInDstChange_mockZone$catena_6() {\n        DateTime cutover = new DateTime(2010, 10, 31, 1, 15, DateTimeZone.forOffsetHoursMinutes(0, 30));\n        try{ assertEquals(\"2010-10-31T01:15:00.000+00:30\", cutover.toString());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        DateTimeZone halfHourZone = new MockZone(cutover.getMillis(), 3600000, -1800);\n        DateTime pre = new DateTime(2010, 10, 31, 1, 0, halfHourZone);\n        try{ assertEquals(\"2010-10-31T01:00:00.000+01:00\", pre.toString());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        DateTime post = new DateTime(2010, 10, 31, 1, 59, halfHourZone);\n        try{ assertEquals(\"2010-10-31T01:59:00.000+00:30\", post.toString());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        DateTime testPre1 = pre.withMinuteOfHour(30);\n        try{ assertEquals(\"2010-10-31T01:30:00.000+01:00\", testPre1.toString());          }catch(Throwable __SHOULD_BE_IGNORED){}  // retain offset\n        DateTime testPre2 = pre.withMinuteOfHour(50);\n        try{ assertEquals(\"2010-10-31T01:50:00.000+00:30\", testPre2.toString());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        DateTime testPost1 = post.withMinuteOfHour(30);\n        try{ assertEquals(\"2010-10-31T01:30:00.000+00:30\", testPost1.toString());         }catch(Throwable __SHOULD_BE_IGNORED){}  // retain offset\n        DateTime testPost2 = post.withMinuteOfHour(10);\n        assertEquals(\"2010-10-31T01:10:00.000+01:00\", testPost2.toString());                                /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral": {
            "file_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
            "Instance": "Begin: Pos(1153, 12)\nEnd: Pos(1170, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Time_26/src/test/java//org/joda/time/TestDateTimeZoneCutover.java\nName: testBug2182444_usCentral\nChilds: [StatementAssertion<Begin: Pos(1158, 9), End: Pos(1158, 125)>,\nStatementAssertion<Begin: Pos(1159, 9), End: Pos(1159, 126)>,\nStatementAssertion<Begin: Pos(1163, 9), End: Pos(1163, 69)>,\nStatementAssertion<Begin: Pos(1164, 9), End: Pos(1164, 111)>,\nStatementAssertion<Begin: Pos(1165, 9), End: Pos(1165, 105)>,\nStatementAssertion<Begin: Pos(1166, 9), End: Pos(1166, 98)>,\nStatementAssertion<Begin: Pos(1167, 9), End: Pos(1167, 131)>,\nStatementAssertion<Begin: Pos(1168, 9), End: Pos(1168, 98)>,\nStatementAssertion<Begin: Pos(1169, 9), End: Pos(1169, 131)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Time_26/src/test/java//org/joda/time/TestDateTimeZoneCutover.java",
            "name": "testBug2182444_usCentral",
            "begin": "Pos(1153, 12)",
            "end": "Pos(1170, 5)",
            "begin_line_no": 1153,
            "end_line_no": 1170,
            "child": [
                "Begin: Pos(1158, 9)\nEnd: Pos(1158, 125)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1159, 9)\nEnd: Pos(1159, 126)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1163, 9)\nEnd: Pos(1163, 69)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1164, 9)\nEnd: Pos(1164, 111)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1165, 9)\nEnd: Pos(1165, 105)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1166, 9)\nEnd: Pos(1166, 98)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1167, 9)\nEnd: Pos(1167, 131)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1168, 9)\nEnd: Pos(1168, 98)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1169, 9)\nEnd: Pos(1169, 131)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testBug2182444_usCentral$catena_0() {\n        Chronology chronUSCentral = GregorianChronology.getInstance(DateTimeZone.forID(\"US/Central\"));\n        Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);\n        DateTime usCentralStandardInUTC = new DateTime(2008, 11, 2, 7, 0, 0, 0, chronUTC);\n        DateTime usCentralDaylightInUTC = new DateTime(2008, 11, 2, 6, 0, 0, 0, chronUTC);\n        assertTrue(\"Should be standard time\", chronUSCentral.getZone().isStandardOffset(usCentralStandardInUTC.getMillis()));               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertFalse(\"Should be daylight time\", chronUSCentral.getZone().isStandardOffset(usCentralDaylightInUTC.getMillis()));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        DateTime usCentralStandardInUSCentral = usCentralStandardInUTC.toDateTime(chronUSCentral);\n        DateTime usCentralDaylightInUSCentral = usCentralDaylightInUTC.toDateTime(chronUSCentral);\n        try{ assertEquals(1, usCentralStandardInUSCentral.getHourOfDay());                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(usCentralStandardInUSCentral.getHourOfDay(), usCentralDaylightInUSCentral.getHourOfDay());                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(usCentralStandardInUSCentral.getMillis() != usCentralDaylightInUSCentral.getMillis());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(usCentralStandardInUSCentral, usCentralStandardInUSCentral.withHourOfDay(1));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(usCentralStandardInUSCentral.getMillis() + 3, usCentralStandardInUSCentral.withMillisOfSecond(3).getMillis());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(usCentralDaylightInUSCentral, usCentralDaylightInUSCentral.withHourOfDay(1));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(usCentralDaylightInUSCentral.getMillis() + 3, usCentralDaylightInUSCentral.withMillisOfSecond(3).getMillis());    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testBug2182444_usCentral$catena_1() {\n        Chronology chronUSCentral = GregorianChronology.getInstance(DateTimeZone.forID(\"US/Central\"));\n        Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);\n        DateTime usCentralStandardInUTC = new DateTime(2008, 11, 2, 7, 0, 0, 0, chronUTC);\n        DateTime usCentralDaylightInUTC = new DateTime(2008, 11, 2, 6, 0, 0, 0, chronUTC);\n        try{ assertTrue(\"Should be standard time\", chronUSCentral.getZone().isStandardOffset(usCentralStandardInUTC.getMillis()));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertFalse(\"Should be daylight time\", chronUSCentral.getZone().isStandardOffset(usCentralDaylightInUTC.getMillis()));              /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        DateTime usCentralStandardInUSCentral = usCentralStandardInUTC.toDateTime(chronUSCentral);\n        DateTime usCentralDaylightInUSCentral = usCentralDaylightInUTC.toDateTime(chronUSCentral);\n        try{ assertEquals(1, usCentralStandardInUSCentral.getHourOfDay());                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(usCentralStandardInUSCentral.getHourOfDay(), usCentralDaylightInUSCentral.getHourOfDay());                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(usCentralStandardInUSCentral.getMillis() != usCentralDaylightInUSCentral.getMillis());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(usCentralStandardInUSCentral, usCentralStandardInUSCentral.withHourOfDay(1));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(usCentralStandardInUSCentral.getMillis() + 3, usCentralStandardInUSCentral.withMillisOfSecond(3).getMillis());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(usCentralDaylightInUSCentral, usCentralDaylightInUSCentral.withHourOfDay(1));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(usCentralDaylightInUSCentral.getMillis() + 3, usCentralDaylightInUSCentral.withMillisOfSecond(3).getMillis());    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testBug2182444_usCentral$catena_2() {\n        Chronology chronUSCentral = GregorianChronology.getInstance(DateTimeZone.forID(\"US/Central\"));\n        Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);\n        DateTime usCentralStandardInUTC = new DateTime(2008, 11, 2, 7, 0, 0, 0, chronUTC);\n        DateTime usCentralDaylightInUTC = new DateTime(2008, 11, 2, 6, 0, 0, 0, chronUTC);\n        try{ assertTrue(\"Should be standard time\", chronUSCentral.getZone().isStandardOffset(usCentralStandardInUTC.getMillis()));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(\"Should be daylight time\", chronUSCentral.getZone().isStandardOffset(usCentralDaylightInUTC.getMillis()));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        DateTime usCentralStandardInUSCentral = usCentralStandardInUTC.toDateTime(chronUSCentral);\n        DateTime usCentralDaylightInUSCentral = usCentralDaylightInUTC.toDateTime(chronUSCentral);\n        assertEquals(1, usCentralStandardInUSCentral.getHourOfDay());                                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(usCentralStandardInUSCentral.getHourOfDay(), usCentralDaylightInUSCentral.getHourOfDay());                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(usCentralStandardInUSCentral.getMillis() != usCentralDaylightInUSCentral.getMillis());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(usCentralStandardInUSCentral, usCentralStandardInUSCentral.withHourOfDay(1));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(usCentralStandardInUSCentral.getMillis() + 3, usCentralStandardInUSCentral.withMillisOfSecond(3).getMillis());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(usCentralDaylightInUSCentral, usCentralDaylightInUSCentral.withHourOfDay(1));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(usCentralDaylightInUSCentral.getMillis() + 3, usCentralDaylightInUSCentral.withMillisOfSecond(3).getMillis());    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testBug2182444_usCentral$catena_3() {\n        Chronology chronUSCentral = GregorianChronology.getInstance(DateTimeZone.forID(\"US/Central\"));\n        Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);\n        DateTime usCentralStandardInUTC = new DateTime(2008, 11, 2, 7, 0, 0, 0, chronUTC);\n        DateTime usCentralDaylightInUTC = new DateTime(2008, 11, 2, 6, 0, 0, 0, chronUTC);\n        try{ assertTrue(\"Should be standard time\", chronUSCentral.getZone().isStandardOffset(usCentralStandardInUTC.getMillis()));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(\"Should be daylight time\", chronUSCentral.getZone().isStandardOffset(usCentralDaylightInUTC.getMillis()));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        DateTime usCentralStandardInUSCentral = usCentralStandardInUTC.toDateTime(chronUSCentral);\n        DateTime usCentralDaylightInUSCentral = usCentralDaylightInUTC.toDateTime(chronUSCentral);\n        try{ assertEquals(1, usCentralStandardInUSCentral.getHourOfDay());                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(usCentralStandardInUSCentral.getHourOfDay(), usCentralDaylightInUSCentral.getHourOfDay());                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(usCentralStandardInUSCentral.getMillis() != usCentralDaylightInUSCentral.getMillis());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(usCentralStandardInUSCentral, usCentralStandardInUSCentral.withHourOfDay(1));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(usCentralStandardInUSCentral.getMillis() + 3, usCentralStandardInUSCentral.withMillisOfSecond(3).getMillis());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(usCentralDaylightInUSCentral, usCentralDaylightInUSCentral.withHourOfDay(1));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(usCentralDaylightInUSCentral.getMillis() + 3, usCentralDaylightInUSCentral.withMillisOfSecond(3).getMillis());    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testBug2182444_usCentral$catena_4() {\n        Chronology chronUSCentral = GregorianChronology.getInstance(DateTimeZone.forID(\"US/Central\"));\n        Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);\n        DateTime usCentralStandardInUTC = new DateTime(2008, 11, 2, 7, 0, 0, 0, chronUTC);\n        DateTime usCentralDaylightInUTC = new DateTime(2008, 11, 2, 6, 0, 0, 0, chronUTC);\n        try{ assertTrue(\"Should be standard time\", chronUSCentral.getZone().isStandardOffset(usCentralStandardInUTC.getMillis()));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(\"Should be daylight time\", chronUSCentral.getZone().isStandardOffset(usCentralDaylightInUTC.getMillis()));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        DateTime usCentralStandardInUSCentral = usCentralStandardInUTC.toDateTime(chronUSCentral);\n        DateTime usCentralDaylightInUSCentral = usCentralDaylightInUTC.toDateTime(chronUSCentral);\n        try{ assertEquals(1, usCentralStandardInUSCentral.getHourOfDay());                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(usCentralStandardInUSCentral.getHourOfDay(), usCentralDaylightInUSCentral.getHourOfDay());                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(usCentralStandardInUSCentral.getMillis() != usCentralDaylightInUSCentral.getMillis());                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(usCentralStandardInUSCentral, usCentralStandardInUSCentral.withHourOfDay(1));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(usCentralStandardInUSCentral.getMillis() + 3, usCentralStandardInUSCentral.withMillisOfSecond(3).getMillis());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(usCentralDaylightInUSCentral, usCentralDaylightInUSCentral.withHourOfDay(1));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(usCentralDaylightInUSCentral.getMillis() + 3, usCentralDaylightInUSCentral.withMillisOfSecond(3).getMillis());    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testBug2182444_usCentral$catena_5() {\n        Chronology chronUSCentral = GregorianChronology.getInstance(DateTimeZone.forID(\"US/Central\"));\n        Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);\n        DateTime usCentralStandardInUTC = new DateTime(2008, 11, 2, 7, 0, 0, 0, chronUTC);\n        DateTime usCentralDaylightInUTC = new DateTime(2008, 11, 2, 6, 0, 0, 0, chronUTC);\n        try{ assertTrue(\"Should be standard time\", chronUSCentral.getZone().isStandardOffset(usCentralStandardInUTC.getMillis()));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(\"Should be daylight time\", chronUSCentral.getZone().isStandardOffset(usCentralDaylightInUTC.getMillis()));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        DateTime usCentralStandardInUSCentral = usCentralStandardInUTC.toDateTime(chronUSCentral);\n        DateTime usCentralDaylightInUSCentral = usCentralDaylightInUTC.toDateTime(chronUSCentral);\n        try{ assertEquals(1, usCentralStandardInUSCentral.getHourOfDay());                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(usCentralStandardInUSCentral.getHourOfDay(), usCentralDaylightInUSCentral.getHourOfDay());                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(usCentralStandardInUSCentral.getMillis() != usCentralDaylightInUSCentral.getMillis());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(usCentralStandardInUSCentral, usCentralStandardInUSCentral.withHourOfDay(1));                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(usCentralStandardInUSCentral.getMillis() + 3, usCentralStandardInUSCentral.withMillisOfSecond(3).getMillis());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(usCentralDaylightInUSCentral, usCentralDaylightInUSCentral.withHourOfDay(1));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(usCentralDaylightInUSCentral.getMillis() + 3, usCentralDaylightInUSCentral.withMillisOfSecond(3).getMillis());    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testBug2182444_usCentral$catena_6() {\n        Chronology chronUSCentral = GregorianChronology.getInstance(DateTimeZone.forID(\"US/Central\"));\n        Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);\n        DateTime usCentralStandardInUTC = new DateTime(2008, 11, 2, 7, 0, 0, 0, chronUTC);\n        DateTime usCentralDaylightInUTC = new DateTime(2008, 11, 2, 6, 0, 0, 0, chronUTC);\n        try{ assertTrue(\"Should be standard time\", chronUSCentral.getZone().isStandardOffset(usCentralStandardInUTC.getMillis()));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(\"Should be daylight time\", chronUSCentral.getZone().isStandardOffset(usCentralDaylightInUTC.getMillis()));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        DateTime usCentralStandardInUSCentral = usCentralStandardInUTC.toDateTime(chronUSCentral);\n        DateTime usCentralDaylightInUSCentral = usCentralDaylightInUTC.toDateTime(chronUSCentral);\n        try{ assertEquals(1, usCentralStandardInUSCentral.getHourOfDay());                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(usCentralStandardInUSCentral.getHourOfDay(), usCentralDaylightInUSCentral.getHourOfDay());                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(usCentralStandardInUSCentral.getMillis() != usCentralDaylightInUSCentral.getMillis());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(usCentralStandardInUSCentral, usCentralStandardInUSCentral.withHourOfDay(1));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(usCentralStandardInUSCentral.getMillis() + 3, usCentralStandardInUSCentral.withMillisOfSecond(3).getMillis());         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(usCentralDaylightInUSCentral, usCentralDaylightInUSCentral.withHourOfDay(1));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(usCentralDaylightInUSCentral.getMillis() + 3, usCentralDaylightInUSCentral.withMillisOfSecond(3).getMillis());    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testBug2182444_usCentral$catena_7() {\n        Chronology chronUSCentral = GregorianChronology.getInstance(DateTimeZone.forID(\"US/Central\"));\n        Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);\n        DateTime usCentralStandardInUTC = new DateTime(2008, 11, 2, 7, 0, 0, 0, chronUTC);\n        DateTime usCentralDaylightInUTC = new DateTime(2008, 11, 2, 6, 0, 0, 0, chronUTC);\n        try{ assertTrue(\"Should be standard time\", chronUSCentral.getZone().isStandardOffset(usCentralStandardInUTC.getMillis()));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(\"Should be daylight time\", chronUSCentral.getZone().isStandardOffset(usCentralDaylightInUTC.getMillis()));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        DateTime usCentralStandardInUSCentral = usCentralStandardInUTC.toDateTime(chronUSCentral);\n        DateTime usCentralDaylightInUSCentral = usCentralDaylightInUTC.toDateTime(chronUSCentral);\n        try{ assertEquals(1, usCentralStandardInUSCentral.getHourOfDay());                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(usCentralStandardInUSCentral.getHourOfDay(), usCentralDaylightInUSCentral.getHourOfDay());                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(usCentralStandardInUSCentral.getMillis() != usCentralDaylightInUSCentral.getMillis());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(usCentralStandardInUSCentral, usCentralStandardInUSCentral.withHourOfDay(1));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(usCentralStandardInUSCentral.getMillis() + 3, usCentralStandardInUSCentral.withMillisOfSecond(3).getMillis());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(usCentralDaylightInUSCentral, usCentralDaylightInUSCentral.withHourOfDay(1));                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(usCentralDaylightInUSCentral.getMillis() + 3, usCentralDaylightInUSCentral.withMillisOfSecond(3).getMillis());    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testBug2182444_usCentral$catena_8() {\n        Chronology chronUSCentral = GregorianChronology.getInstance(DateTimeZone.forID(\"US/Central\"));\n        Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);\n        DateTime usCentralStandardInUTC = new DateTime(2008, 11, 2, 7, 0, 0, 0, chronUTC);\n        DateTime usCentralDaylightInUTC = new DateTime(2008, 11, 2, 6, 0, 0, 0, chronUTC);\n        try{ assertTrue(\"Should be standard time\", chronUSCentral.getZone().isStandardOffset(usCentralStandardInUTC.getMillis()));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(\"Should be daylight time\", chronUSCentral.getZone().isStandardOffset(usCentralDaylightInUTC.getMillis()));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        DateTime usCentralStandardInUSCentral = usCentralStandardInUTC.toDateTime(chronUSCentral);\n        DateTime usCentralDaylightInUSCentral = usCentralDaylightInUTC.toDateTime(chronUSCentral);\n        try{ assertEquals(1, usCentralStandardInUSCentral.getHourOfDay());                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(usCentralStandardInUSCentral.getHourOfDay(), usCentralDaylightInUSCentral.getHourOfDay());                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(usCentralStandardInUSCentral.getMillis() != usCentralDaylightInUSCentral.getMillis());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(usCentralStandardInUSCentral, usCentralStandardInUSCentral.withHourOfDay(1));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(usCentralStandardInUSCentral.getMillis() + 3, usCentralStandardInUSCentral.withMillisOfSecond(3).getMillis());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(usCentralDaylightInUSCentral, usCentralDaylightInUSCentral.withHourOfDay(1));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(usCentralDaylightInUSCentral.getMillis() + 3, usCentralDaylightInUSCentral.withMillisOfSecond(3).getMillis());         /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void testBug2182444_usCentral$catena_0() {\n        Chronology chronUSCentral = GregorianChronology.getInstance(DateTimeZone.forID(\"US/Central\"));\n        Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);\n        DateTime usCentralStandardInUTC = new DateTime(2008, 11, 2, 7, 0, 0, 0, chronUTC);\n        DateTime usCentralDaylightInUTC = new DateTime(2008, 11, 2, 6, 0, 0, 0, chronUTC);\n        assertTrue(\"Should be standard time\", chronUSCentral.getZone().isStandardOffset(usCentralStandardInUTC.getMillis()));               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertFalse(\"Should be daylight time\", chronUSCentral.getZone().isStandardOffset(usCentralDaylightInUTC.getMillis()));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        DateTime usCentralStandardInUSCentral = usCentralStandardInUTC.toDateTime(chronUSCentral);\n        DateTime usCentralDaylightInUSCentral = usCentralDaylightInUTC.toDateTime(chronUSCentral);\n        try{ assertEquals(1, usCentralStandardInUSCentral.getHourOfDay());                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(usCentralStandardInUSCentral.getHourOfDay(), usCentralDaylightInUSCentral.getHourOfDay());                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(usCentralStandardInUSCentral.getMillis() != usCentralDaylightInUSCentral.getMillis());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(usCentralStandardInUSCentral, usCentralStandardInUSCentral.withHourOfDay(1));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(usCentralStandardInUSCentral.getMillis() + 3, usCentralStandardInUSCentral.withMillisOfSecond(3).getMillis());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(usCentralDaylightInUSCentral, usCentralDaylightInUSCentral.withHourOfDay(1));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(usCentralDaylightInUSCentral.getMillis() + 3, usCentralDaylightInUSCentral.withMillisOfSecond(3).getMillis());    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void testBug2182444_usCentral$catena_1() {\n        Chronology chronUSCentral = GregorianChronology.getInstance(DateTimeZone.forID(\"US/Central\"));\n        Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);\n        DateTime usCentralStandardInUTC = new DateTime(2008, 11, 2, 7, 0, 0, 0, chronUTC);\n        DateTime usCentralDaylightInUTC = new DateTime(2008, 11, 2, 6, 0, 0, 0, chronUTC);\n        try{ assertTrue(\"Should be standard time\", chronUSCentral.getZone().isStandardOffset(usCentralStandardInUTC.getMillis()));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertFalse(\"Should be daylight time\", chronUSCentral.getZone().isStandardOffset(usCentralDaylightInUTC.getMillis()));              /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        DateTime usCentralStandardInUSCentral = usCentralStandardInUTC.toDateTime(chronUSCentral);\n        DateTime usCentralDaylightInUSCentral = usCentralDaylightInUTC.toDateTime(chronUSCentral);\n        try{ assertEquals(1, usCentralStandardInUSCentral.getHourOfDay());                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(usCentralStandardInUSCentral.getHourOfDay(), usCentralDaylightInUSCentral.getHourOfDay());                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(usCentralStandardInUSCentral.getMillis() != usCentralDaylightInUSCentral.getMillis());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(usCentralStandardInUSCentral, usCentralStandardInUSCentral.withHourOfDay(1));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(usCentralStandardInUSCentral.getMillis() + 3, usCentralStandardInUSCentral.withMillisOfSecond(3).getMillis());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(usCentralDaylightInUSCentral, usCentralDaylightInUSCentral.withHourOfDay(1));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(usCentralDaylightInUSCentral.getMillis() + 3, usCentralDaylightInUSCentral.withMillisOfSecond(3).getMillis());    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "2": "    public void testBug2182444_usCentral$catena_2() {\n        Chronology chronUSCentral = GregorianChronology.getInstance(DateTimeZone.forID(\"US/Central\"));\n        Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);\n        DateTime usCentralStandardInUTC = new DateTime(2008, 11, 2, 7, 0, 0, 0, chronUTC);\n        DateTime usCentralDaylightInUTC = new DateTime(2008, 11, 2, 6, 0, 0, 0, chronUTC);\n        try{ assertTrue(\"Should be standard time\", chronUSCentral.getZone().isStandardOffset(usCentralStandardInUTC.getMillis()));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(\"Should be daylight time\", chronUSCentral.getZone().isStandardOffset(usCentralDaylightInUTC.getMillis()));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        DateTime usCentralStandardInUSCentral = usCentralStandardInUTC.toDateTime(chronUSCentral);\n        DateTime usCentralDaylightInUSCentral = usCentralDaylightInUTC.toDateTime(chronUSCentral);\n        assertEquals(1, usCentralStandardInUSCentral.getHourOfDay());                                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(usCentralStandardInUSCentral.getHourOfDay(), usCentralDaylightInUSCentral.getHourOfDay());                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(usCentralStandardInUSCentral.getMillis() != usCentralDaylightInUSCentral.getMillis());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(usCentralStandardInUSCentral, usCentralStandardInUSCentral.withHourOfDay(1));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(usCentralStandardInUSCentral.getMillis() + 3, usCentralStandardInUSCentral.withMillisOfSecond(3).getMillis());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(usCentralDaylightInUSCentral, usCentralDaylightInUSCentral.withHourOfDay(1));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(usCentralDaylightInUSCentral.getMillis() + 3, usCentralDaylightInUSCentral.withMillisOfSecond(3).getMillis());    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "3": "    public void testBug2182444_usCentral$catena_3() {\n        Chronology chronUSCentral = GregorianChronology.getInstance(DateTimeZone.forID(\"US/Central\"));\n        Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);\n        DateTime usCentralStandardInUTC = new DateTime(2008, 11, 2, 7, 0, 0, 0, chronUTC);\n        DateTime usCentralDaylightInUTC = new DateTime(2008, 11, 2, 6, 0, 0, 0, chronUTC);\n        try{ assertTrue(\"Should be standard time\", chronUSCentral.getZone().isStandardOffset(usCentralStandardInUTC.getMillis()));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(\"Should be daylight time\", chronUSCentral.getZone().isStandardOffset(usCentralDaylightInUTC.getMillis()));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        DateTime usCentralStandardInUSCentral = usCentralStandardInUTC.toDateTime(chronUSCentral);\n        DateTime usCentralDaylightInUSCentral = usCentralDaylightInUTC.toDateTime(chronUSCentral);\n        try{ assertEquals(1, usCentralStandardInUSCentral.getHourOfDay());                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(usCentralStandardInUSCentral.getHourOfDay(), usCentralDaylightInUSCentral.getHourOfDay());                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(usCentralStandardInUSCentral.getMillis() != usCentralDaylightInUSCentral.getMillis());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(usCentralStandardInUSCentral, usCentralStandardInUSCentral.withHourOfDay(1));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(usCentralStandardInUSCentral.getMillis() + 3, usCentralStandardInUSCentral.withMillisOfSecond(3).getMillis());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(usCentralDaylightInUSCentral, usCentralDaylightInUSCentral.withHourOfDay(1));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(usCentralDaylightInUSCentral.getMillis() + 3, usCentralDaylightInUSCentral.withMillisOfSecond(3).getMillis());    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "4": "    public void testBug2182444_usCentral$catena_4() {\n        Chronology chronUSCentral = GregorianChronology.getInstance(DateTimeZone.forID(\"US/Central\"));\n        Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);\n        DateTime usCentralStandardInUTC = new DateTime(2008, 11, 2, 7, 0, 0, 0, chronUTC);\n        DateTime usCentralDaylightInUTC = new DateTime(2008, 11, 2, 6, 0, 0, 0, chronUTC);\n        try{ assertTrue(\"Should be standard time\", chronUSCentral.getZone().isStandardOffset(usCentralStandardInUTC.getMillis()));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(\"Should be daylight time\", chronUSCentral.getZone().isStandardOffset(usCentralDaylightInUTC.getMillis()));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        DateTime usCentralStandardInUSCentral = usCentralStandardInUTC.toDateTime(chronUSCentral);\n        DateTime usCentralDaylightInUSCentral = usCentralDaylightInUTC.toDateTime(chronUSCentral);\n        try{ assertEquals(1, usCentralStandardInUSCentral.getHourOfDay());                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(usCentralStandardInUSCentral.getHourOfDay(), usCentralDaylightInUSCentral.getHourOfDay());                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(usCentralStandardInUSCentral.getMillis() != usCentralDaylightInUSCentral.getMillis());                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(usCentralStandardInUSCentral, usCentralStandardInUSCentral.withHourOfDay(1));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(usCentralStandardInUSCentral.getMillis() + 3, usCentralStandardInUSCentral.withMillisOfSecond(3).getMillis());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(usCentralDaylightInUSCentral, usCentralDaylightInUSCentral.withHourOfDay(1));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(usCentralDaylightInUSCentral.getMillis() + 3, usCentralDaylightInUSCentral.withMillisOfSecond(3).getMillis());    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "5": "    public void testBug2182444_usCentral$catena_5() {\n        Chronology chronUSCentral = GregorianChronology.getInstance(DateTimeZone.forID(\"US/Central\"));\n        Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);\n        DateTime usCentralStandardInUTC = new DateTime(2008, 11, 2, 7, 0, 0, 0, chronUTC);\n        DateTime usCentralDaylightInUTC = new DateTime(2008, 11, 2, 6, 0, 0, 0, chronUTC);\n        try{ assertTrue(\"Should be standard time\", chronUSCentral.getZone().isStandardOffset(usCentralStandardInUTC.getMillis()));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(\"Should be daylight time\", chronUSCentral.getZone().isStandardOffset(usCentralDaylightInUTC.getMillis()));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        DateTime usCentralStandardInUSCentral = usCentralStandardInUTC.toDateTime(chronUSCentral);\n        DateTime usCentralDaylightInUSCentral = usCentralDaylightInUTC.toDateTime(chronUSCentral);\n        try{ assertEquals(1, usCentralStandardInUSCentral.getHourOfDay());                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(usCentralStandardInUSCentral.getHourOfDay(), usCentralDaylightInUSCentral.getHourOfDay());                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(usCentralStandardInUSCentral.getMillis() != usCentralDaylightInUSCentral.getMillis());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(usCentralStandardInUSCentral, usCentralStandardInUSCentral.withHourOfDay(1));                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(usCentralStandardInUSCentral.getMillis() + 3, usCentralStandardInUSCentral.withMillisOfSecond(3).getMillis());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(usCentralDaylightInUSCentral, usCentralDaylightInUSCentral.withHourOfDay(1));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(usCentralDaylightInUSCentral.getMillis() + 3, usCentralDaylightInUSCentral.withMillisOfSecond(3).getMillis());    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "6": "    public void testBug2182444_usCentral$catena_6() {\n        Chronology chronUSCentral = GregorianChronology.getInstance(DateTimeZone.forID(\"US/Central\"));\n        Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);\n        DateTime usCentralStandardInUTC = new DateTime(2008, 11, 2, 7, 0, 0, 0, chronUTC);\n        DateTime usCentralDaylightInUTC = new DateTime(2008, 11, 2, 6, 0, 0, 0, chronUTC);\n        try{ assertTrue(\"Should be standard time\", chronUSCentral.getZone().isStandardOffset(usCentralStandardInUTC.getMillis()));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(\"Should be daylight time\", chronUSCentral.getZone().isStandardOffset(usCentralDaylightInUTC.getMillis()));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        DateTime usCentralStandardInUSCentral = usCentralStandardInUTC.toDateTime(chronUSCentral);\n        DateTime usCentralDaylightInUSCentral = usCentralDaylightInUTC.toDateTime(chronUSCentral);\n        try{ assertEquals(1, usCentralStandardInUSCentral.getHourOfDay());                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(usCentralStandardInUSCentral.getHourOfDay(), usCentralDaylightInUSCentral.getHourOfDay());                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(usCentralStandardInUSCentral.getMillis() != usCentralDaylightInUSCentral.getMillis());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(usCentralStandardInUSCentral, usCentralStandardInUSCentral.withHourOfDay(1));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(usCentralStandardInUSCentral.getMillis() + 3, usCentralStandardInUSCentral.withMillisOfSecond(3).getMillis());         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(usCentralDaylightInUSCentral, usCentralDaylightInUSCentral.withHourOfDay(1));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(usCentralDaylightInUSCentral.getMillis() + 3, usCentralDaylightInUSCentral.withMillisOfSecond(3).getMillis());    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "7": "    public void testBug2182444_usCentral$catena_7() {\n        Chronology chronUSCentral = GregorianChronology.getInstance(DateTimeZone.forID(\"US/Central\"));\n        Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);\n        DateTime usCentralStandardInUTC = new DateTime(2008, 11, 2, 7, 0, 0, 0, chronUTC);\n        DateTime usCentralDaylightInUTC = new DateTime(2008, 11, 2, 6, 0, 0, 0, chronUTC);\n        try{ assertTrue(\"Should be standard time\", chronUSCentral.getZone().isStandardOffset(usCentralStandardInUTC.getMillis()));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(\"Should be daylight time\", chronUSCentral.getZone().isStandardOffset(usCentralDaylightInUTC.getMillis()));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        DateTime usCentralStandardInUSCentral = usCentralStandardInUTC.toDateTime(chronUSCentral);\n        DateTime usCentralDaylightInUSCentral = usCentralDaylightInUTC.toDateTime(chronUSCentral);\n        try{ assertEquals(1, usCentralStandardInUSCentral.getHourOfDay());                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(usCentralStandardInUSCentral.getHourOfDay(), usCentralDaylightInUSCentral.getHourOfDay());                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(usCentralStandardInUSCentral.getMillis() != usCentralDaylightInUSCentral.getMillis());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(usCentralStandardInUSCentral, usCentralStandardInUSCentral.withHourOfDay(1));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(usCentralStandardInUSCentral.getMillis() + 3, usCentralStandardInUSCentral.withMillisOfSecond(3).getMillis());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(usCentralDaylightInUSCentral, usCentralDaylightInUSCentral.withHourOfDay(1));                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(usCentralDaylightInUSCentral.getMillis() + 3, usCentralDaylightInUSCentral.withMillisOfSecond(3).getMillis());    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "8": "    public void testBug2182444_usCentral$catena_8() {\n        Chronology chronUSCentral = GregorianChronology.getInstance(DateTimeZone.forID(\"US/Central\"));\n        Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);\n        DateTime usCentralStandardInUTC = new DateTime(2008, 11, 2, 7, 0, 0, 0, chronUTC);\n        DateTime usCentralDaylightInUTC = new DateTime(2008, 11, 2, 6, 0, 0, 0, chronUTC);\n        try{ assertTrue(\"Should be standard time\", chronUSCentral.getZone().isStandardOffset(usCentralStandardInUTC.getMillis()));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(\"Should be daylight time\", chronUSCentral.getZone().isStandardOffset(usCentralDaylightInUTC.getMillis()));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        DateTime usCentralStandardInUSCentral = usCentralStandardInUTC.toDateTime(chronUSCentral);\n        DateTime usCentralDaylightInUSCentral = usCentralDaylightInUTC.toDateTime(chronUSCentral);\n        try{ assertEquals(1, usCentralStandardInUSCentral.getHourOfDay());                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(usCentralStandardInUSCentral.getHourOfDay(), usCentralDaylightInUSCentral.getHourOfDay());                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(usCentralStandardInUSCentral.getMillis() != usCentralDaylightInUSCentral.getMillis());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(usCentralStandardInUSCentral, usCentralStandardInUSCentral.withHourOfDay(1));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(usCentralStandardInUSCentral.getMillis() + 3, usCentralStandardInUSCentral.withMillisOfSecond(3).getMillis());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(usCentralDaylightInUSCentral, usCentralDaylightInUSCentral.withHourOfDay(1));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(usCentralDaylightInUSCentral.getMillis() + 3, usCentralDaylightInUSCentral.withMillisOfSecond(3).getMillis());         /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_Paris_summer": {
            "file_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
            "Instance": "Begin: Pos(1104, 12)\nEnd: Pos(1109, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Time_26/src/test/java//org/joda/time/TestDateTimeZoneCutover.java\nName: testWithMillisOfSecondInDstChange_Paris_summer\nChilds: [StatementAssertion<Begin: Pos(1106, 9), End: Pos(1106, 75)>,\nStatementAssertion<Begin: Pos(1108, 9), End: Pos(1108, 71)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Time_26/src/test/java//org/joda/time/TestDateTimeZoneCutover.java",
            "name": "testWithMillisOfSecondInDstChange_Paris_summer",
            "begin": "Pos(1104, 12)",
            "end": "Pos(1109, 5)",
            "begin_line_no": 1104,
            "end_line_no": 1109,
            "child": [
                "Begin: Pos(1106, 9)\nEnd: Pos(1106, 75)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1108, 9)\nEnd: Pos(1108, 71)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testWithMillisOfSecondInDstChange_Paris_summer$catena_0() {\n        DateTime dateTime = new DateTime(\"2010-10-31T02:30:10.123+02:00\", ZONE_PARIS);\n        assertEquals(\"2010-10-31T02:30:10.123+02:00\", dateTime.toString());                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        DateTime test = dateTime.withMillisOfSecond(0);\n        try{ assertEquals(\"2010-10-31T02:30:10.000+02:00\", test.toString());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testWithMillisOfSecondInDstChange_Paris_summer$catena_1() {\n        DateTime dateTime = new DateTime(\"2010-10-31T02:30:10.123+02:00\", ZONE_PARIS);\n        try{ assertEquals(\"2010-10-31T02:30:10.123+02:00\", dateTime.toString());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        DateTime test = dateTime.withMillisOfSecond(0);\n        assertEquals(\"2010-10-31T02:30:10.000+02:00\", test.toString());                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void testWithMillisOfSecondInDstChange_Paris_summer$catena_0() {\n        DateTime dateTime = new DateTime(\"2010-10-31T02:30:10.123+02:00\", ZONE_PARIS);\n        assertEquals(\"2010-10-31T02:30:10.123+02:00\", dateTime.toString());                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        DateTime test = dateTime.withMillisOfSecond(0);\n        try{ assertEquals(\"2010-10-31T02:30:10.000+02:00\", test.toString());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void testWithMillisOfSecondInDstChange_Paris_summer$catena_1() {\n        DateTime dateTime = new DateTime(\"2010-10-31T02:30:10.123+02:00\", ZONE_PARIS);\n        try{ assertEquals(\"2010-10-31T02:30:10.123+02:00\", dateTime.toString());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        DateTime test = dateTime.withMillisOfSecond(0);\n        assertEquals(\"2010-10-31T02:30:10.000+02:00\", test.toString());                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.joda.time.TestDateTimeZoneCutover::testWithHourOfDayInDstChange": {
            "file_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
            "Instance": "Begin: Pos(1083, 12)\nEnd: Pos(1088, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Time_26/src/test/java//org/joda/time/TestDateTimeZoneCutover.java\nName: testWithHourOfDayInDstChange\nChilds: [StatementAssertion<Begin: Pos(1085, 9), End: Pos(1085, 75)>,\nStatementAssertion<Begin: Pos(1087, 9), End: Pos(1087, 71)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Time_26/src/test/java//org/joda/time/TestDateTimeZoneCutover.java",
            "name": "testWithHourOfDayInDstChange",
            "begin": "Pos(1083, 12)",
            "end": "Pos(1088, 5)",
            "begin_line_no": 1083,
            "end_line_no": 1088,
            "child": [
                "Begin: Pos(1085, 9)\nEnd: Pos(1085, 75)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1087, 9)\nEnd: Pos(1087, 71)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testWithHourOfDayInDstChange$catena_0() {\n        DateTime dateTime = new DateTime(\"2010-10-31T02:30:10.123+02:00\", ZONE_PARIS);\n        assertEquals(\"2010-10-31T02:30:10.123+02:00\", dateTime.toString());                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        DateTime test = dateTime.withHourOfDay(2);\n        try{ assertEquals(\"2010-10-31T02:30:10.123+02:00\", test.toString());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testWithHourOfDayInDstChange$catena_1() {\n        DateTime dateTime = new DateTime(\"2010-10-31T02:30:10.123+02:00\", ZONE_PARIS);\n        try{ assertEquals(\"2010-10-31T02:30:10.123+02:00\", dateTime.toString());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        DateTime test = dateTime.withHourOfDay(2);\n        assertEquals(\"2010-10-31T02:30:10.123+02:00\", test.toString());                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void testWithHourOfDayInDstChange$catena_0() {\n        DateTime dateTime = new DateTime(\"2010-10-31T02:30:10.123+02:00\", ZONE_PARIS);\n        assertEquals(\"2010-10-31T02:30:10.123+02:00\", dateTime.toString());                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        DateTime test = dateTime.withHourOfDay(2);\n        try{ assertEquals(\"2010-10-31T02:30:10.123+02:00\", test.toString());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void testWithHourOfDayInDstChange$catena_1() {\n        DateTime dateTime = new DateTime(\"2010-10-31T02:30:10.123+02:00\", ZONE_PARIS);\n        try{ assertEquals(\"2010-10-31T02:30:10.123+02:00\", dateTime.toString());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        DateTime test = dateTime.withHourOfDay(2);\n        assertEquals(\"2010-10-31T02:30:10.123+02:00\", test.toString());                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_NewYork_winter": {
            "file_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
            "Instance": "Begin: Pos(1125, 12)\nEnd: Pos(1130, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Time_26/src/test/java//org/joda/time/TestDateTimeZoneCutover.java\nName: testWithMillisOfSecondInDstChange_NewYork_winter\nChilds: [StatementAssertion<Begin: Pos(1127, 9), End: Pos(1127, 75)>,\nStatementAssertion<Begin: Pos(1129, 9), End: Pos(1129, 71)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Time_26/src/test/java//org/joda/time/TestDateTimeZoneCutover.java",
            "name": "testWithMillisOfSecondInDstChange_NewYork_winter",
            "begin": "Pos(1125, 12)",
            "end": "Pos(1130, 5)",
            "begin_line_no": 1125,
            "end_line_no": 1130,
            "child": [
                "Begin: Pos(1127, 9)\nEnd: Pos(1127, 75)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1129, 9)\nEnd: Pos(1129, 71)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testWithMillisOfSecondInDstChange_NewYork_winter$catena_0() {\n        DateTime dateTime = new DateTime(\"2007-11-04T01:30:00.123-05:00\", ZONE_NEW_YORK);\n        assertEquals(\"2007-11-04T01:30:00.123-05:00\", dateTime.toString());                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        DateTime test = dateTime.withMillisOfSecond(0);\n        try{ assertEquals(\"2007-11-04T01:30:00.000-05:00\", test.toString());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testWithMillisOfSecondInDstChange_NewYork_winter$catena_1() {\n        DateTime dateTime = new DateTime(\"2007-11-04T01:30:00.123-05:00\", ZONE_NEW_YORK);\n        try{ assertEquals(\"2007-11-04T01:30:00.123-05:00\", dateTime.toString());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        DateTime test = dateTime.withMillisOfSecond(0);\n        assertEquals(\"2007-11-04T01:30:00.000-05:00\", test.toString());                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void testWithMillisOfSecondInDstChange_NewYork_winter$catena_0() {\n        DateTime dateTime = new DateTime(\"2007-11-04T01:30:00.123-05:00\", ZONE_NEW_YORK);\n        assertEquals(\"2007-11-04T01:30:00.123-05:00\", dateTime.toString());                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        DateTime test = dateTime.withMillisOfSecond(0);\n        try{ assertEquals(\"2007-11-04T01:30:00.000-05:00\", test.toString());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void testWithMillisOfSecondInDstChange_NewYork_winter$catena_1() {\n        DateTime dateTime = new DateTime(\"2007-11-04T01:30:00.123-05:00\", ZONE_NEW_YORK);\n        try{ assertEquals(\"2007-11-04T01:30:00.123-05:00\", dateTime.toString());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        DateTime test = dateTime.withMillisOfSecond(0);\n        assertEquals(\"2007-11-04T01:30:00.000-05:00\", test.toString());                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW": {
            "file_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
            "Instance": "Begin: Pos(1172, 12)\nEnd: Pos(1189, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Time_26/src/test/java//org/joda/time/TestDateTimeZoneCutover.java\nName: testBug2182444_ausNSW\nChilds: [StatementAssertion<Begin: Pos(1177, 9), End: Pos(1177, 125)>,\nStatementAssertion<Begin: Pos(1178, 9), End: Pos(1178, 126)>,\nStatementAssertion<Begin: Pos(1182, 9), End: Pos(1182, 75)>,\nStatementAssertion<Begin: Pos(1183, 9), End: Pos(1183, 122)>,\nStatementAssertion<Begin: Pos(1184, 9), End: Pos(1184, 116)>,\nStatementAssertion<Begin: Pos(1185, 9), End: Pos(1185, 110)>,\nStatementAssertion<Begin: Pos(1186, 9), End: Pos(1186, 143)>,\nStatementAssertion<Begin: Pos(1187, 9), End: Pos(1187, 108)>,\nStatementAssertion<Begin: Pos(1188, 9), End: Pos(1188, 141)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Time_26/src/test/java//org/joda/time/TestDateTimeZoneCutover.java",
            "name": "testBug2182444_ausNSW",
            "begin": "Pos(1172, 12)",
            "end": "Pos(1189, 5)",
            "begin_line_no": 1172,
            "end_line_no": 1189,
            "child": [
                "Begin: Pos(1177, 9)\nEnd: Pos(1177, 125)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1178, 9)\nEnd: Pos(1178, 126)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1182, 9)\nEnd: Pos(1182, 75)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1183, 9)\nEnd: Pos(1183, 122)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1184, 9)\nEnd: Pos(1184, 116)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1185, 9)\nEnd: Pos(1185, 110)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1186, 9)\nEnd: Pos(1186, 143)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1187, 9)\nEnd: Pos(1187, 108)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1188, 9)\nEnd: Pos(1188, 141)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testBug2182444_ausNSW$catena_0() {\n        Chronology chronAusNSW = GregorianChronology.getInstance(DateTimeZone.forID(\"Australia/NSW\"));\n        Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);\n        DateTime australiaNSWStandardInUTC = new DateTime(2008, 4, 5, 16, 0, 0, 0, chronUTC);\n        DateTime australiaNSWDaylightInUTC = new DateTime(2008, 4, 5, 15, 0, 0, 0, chronUTC);\n        assertTrue(\"Should be standard time\", chronAusNSW.getZone().isStandardOffset(australiaNSWStandardInUTC.getMillis()));                           /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertFalse(\"Should be daylight time\", chronAusNSW.getZone().isStandardOffset(australiaNSWDaylightInUTC.getMillis()));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        DateTime australiaNSWStandardInAustraliaNSW = australiaNSWStandardInUTC.toDateTime(chronAusNSW);\n        DateTime australiaNSWDaylightInAusraliaNSW = australiaNSWDaylightInUTC.toDateTime(chronAusNSW);\n        try{ assertEquals(2, australiaNSWStandardInAustraliaNSW.getHourOfDay());                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(australiaNSWStandardInAustraliaNSW.getHourOfDay(), australiaNSWDaylightInAusraliaNSW.getHourOfDay());                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(australiaNSWStandardInAustraliaNSW.getMillis() != australiaNSWDaylightInAusraliaNSW.getMillis());                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(australiaNSWStandardInAustraliaNSW, australiaNSWStandardInAustraliaNSW.withHourOfDay(2));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(australiaNSWStandardInAustraliaNSW.getMillis() + 3, australiaNSWStandardInAustraliaNSW.withMillisOfSecond(3).getMillis());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(australiaNSWDaylightInAusraliaNSW, australiaNSWDaylightInAusraliaNSW.withHourOfDay(2));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(australiaNSWDaylightInAusraliaNSW.getMillis() + 3, australiaNSWDaylightInAusraliaNSW.withMillisOfSecond(3).getMillis());      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testBug2182444_ausNSW$catena_1() {\n        Chronology chronAusNSW = GregorianChronology.getInstance(DateTimeZone.forID(\"Australia/NSW\"));\n        Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);\n        DateTime australiaNSWStandardInUTC = new DateTime(2008, 4, 5, 16, 0, 0, 0, chronUTC);\n        DateTime australiaNSWDaylightInUTC = new DateTime(2008, 4, 5, 15, 0, 0, 0, chronUTC);\n        try{ assertTrue(\"Should be standard time\", chronAusNSW.getZone().isStandardOffset(australiaNSWStandardInUTC.getMillis()));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertFalse(\"Should be daylight time\", chronAusNSW.getZone().isStandardOffset(australiaNSWDaylightInUTC.getMillis()));                          /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        DateTime australiaNSWStandardInAustraliaNSW = australiaNSWStandardInUTC.toDateTime(chronAusNSW);\n        DateTime australiaNSWDaylightInAusraliaNSW = australiaNSWDaylightInUTC.toDateTime(chronAusNSW);\n        try{ assertEquals(2, australiaNSWStandardInAustraliaNSW.getHourOfDay());                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(australiaNSWStandardInAustraliaNSW.getHourOfDay(), australiaNSWDaylightInAusraliaNSW.getHourOfDay());                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(australiaNSWStandardInAustraliaNSW.getMillis() != australiaNSWDaylightInAusraliaNSW.getMillis());                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(australiaNSWStandardInAustraliaNSW, australiaNSWStandardInAustraliaNSW.withHourOfDay(2));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(australiaNSWStandardInAustraliaNSW.getMillis() + 3, australiaNSWStandardInAustraliaNSW.withMillisOfSecond(3).getMillis());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(australiaNSWDaylightInAusraliaNSW, australiaNSWDaylightInAusraliaNSW.withHourOfDay(2));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(australiaNSWDaylightInAusraliaNSW.getMillis() + 3, australiaNSWDaylightInAusraliaNSW.withMillisOfSecond(3).getMillis());      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testBug2182444_ausNSW$catena_2() {\n        Chronology chronAusNSW = GregorianChronology.getInstance(DateTimeZone.forID(\"Australia/NSW\"));\n        Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);\n        DateTime australiaNSWStandardInUTC = new DateTime(2008, 4, 5, 16, 0, 0, 0, chronUTC);\n        DateTime australiaNSWDaylightInUTC = new DateTime(2008, 4, 5, 15, 0, 0, 0, chronUTC);\n        try{ assertTrue(\"Should be standard time\", chronAusNSW.getZone().isStandardOffset(australiaNSWStandardInUTC.getMillis()));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(\"Should be daylight time\", chronAusNSW.getZone().isStandardOffset(australiaNSWDaylightInUTC.getMillis()));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        DateTime australiaNSWStandardInAustraliaNSW = australiaNSWStandardInUTC.toDateTime(chronAusNSW);\n        DateTime australiaNSWDaylightInAusraliaNSW = australiaNSWDaylightInUTC.toDateTime(chronAusNSW);\n        assertEquals(2, australiaNSWStandardInAustraliaNSW.getHourOfDay());                                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(australiaNSWStandardInAustraliaNSW.getHourOfDay(), australiaNSWDaylightInAusraliaNSW.getHourOfDay());                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(australiaNSWStandardInAustraliaNSW.getMillis() != australiaNSWDaylightInAusraliaNSW.getMillis());                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(australiaNSWStandardInAustraliaNSW, australiaNSWStandardInAustraliaNSW.withHourOfDay(2));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(australiaNSWStandardInAustraliaNSW.getMillis() + 3, australiaNSWStandardInAustraliaNSW.withMillisOfSecond(3).getMillis());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(australiaNSWDaylightInAusraliaNSW, australiaNSWDaylightInAusraliaNSW.withHourOfDay(2));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(australiaNSWDaylightInAusraliaNSW.getMillis() + 3, australiaNSWDaylightInAusraliaNSW.withMillisOfSecond(3).getMillis());      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testBug2182444_ausNSW$catena_3() {\n        Chronology chronAusNSW = GregorianChronology.getInstance(DateTimeZone.forID(\"Australia/NSW\"));\n        Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);\n        DateTime australiaNSWStandardInUTC = new DateTime(2008, 4, 5, 16, 0, 0, 0, chronUTC);\n        DateTime australiaNSWDaylightInUTC = new DateTime(2008, 4, 5, 15, 0, 0, 0, chronUTC);\n        try{ assertTrue(\"Should be standard time\", chronAusNSW.getZone().isStandardOffset(australiaNSWStandardInUTC.getMillis()));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(\"Should be daylight time\", chronAusNSW.getZone().isStandardOffset(australiaNSWDaylightInUTC.getMillis()));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        DateTime australiaNSWStandardInAustraliaNSW = australiaNSWStandardInUTC.toDateTime(chronAusNSW);\n        DateTime australiaNSWDaylightInAusraliaNSW = australiaNSWDaylightInUTC.toDateTime(chronAusNSW);\n        try{ assertEquals(2, australiaNSWStandardInAustraliaNSW.getHourOfDay());                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(australiaNSWStandardInAustraliaNSW.getHourOfDay(), australiaNSWDaylightInAusraliaNSW.getHourOfDay());                              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(australiaNSWStandardInAustraliaNSW.getMillis() != australiaNSWDaylightInAusraliaNSW.getMillis());                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(australiaNSWStandardInAustraliaNSW, australiaNSWStandardInAustraliaNSW.withHourOfDay(2));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(australiaNSWStandardInAustraliaNSW.getMillis() + 3, australiaNSWStandardInAustraliaNSW.withMillisOfSecond(3).getMillis());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(australiaNSWDaylightInAusraliaNSW, australiaNSWDaylightInAusraliaNSW.withHourOfDay(2));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(australiaNSWDaylightInAusraliaNSW.getMillis() + 3, australiaNSWDaylightInAusraliaNSW.withMillisOfSecond(3).getMillis());      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testBug2182444_ausNSW$catena_4() {\n        Chronology chronAusNSW = GregorianChronology.getInstance(DateTimeZone.forID(\"Australia/NSW\"));\n        Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);\n        DateTime australiaNSWStandardInUTC = new DateTime(2008, 4, 5, 16, 0, 0, 0, chronUTC);\n        DateTime australiaNSWDaylightInUTC = new DateTime(2008, 4, 5, 15, 0, 0, 0, chronUTC);\n        try{ assertTrue(\"Should be standard time\", chronAusNSW.getZone().isStandardOffset(australiaNSWStandardInUTC.getMillis()));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(\"Should be daylight time\", chronAusNSW.getZone().isStandardOffset(australiaNSWDaylightInUTC.getMillis()));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        DateTime australiaNSWStandardInAustraliaNSW = australiaNSWStandardInUTC.toDateTime(chronAusNSW);\n        DateTime australiaNSWDaylightInAusraliaNSW = australiaNSWDaylightInUTC.toDateTime(chronAusNSW);\n        try{ assertEquals(2, australiaNSWStandardInAustraliaNSW.getHourOfDay());                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(australiaNSWStandardInAustraliaNSW.getHourOfDay(), australiaNSWDaylightInAusraliaNSW.getHourOfDay());                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(australiaNSWStandardInAustraliaNSW.getMillis() != australiaNSWDaylightInAusraliaNSW.getMillis());                                    /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(australiaNSWStandardInAustraliaNSW, australiaNSWStandardInAustraliaNSW.withHourOfDay(2));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(australiaNSWStandardInAustraliaNSW.getMillis() + 3, australiaNSWStandardInAustraliaNSW.withMillisOfSecond(3).getMillis());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(australiaNSWDaylightInAusraliaNSW, australiaNSWDaylightInAusraliaNSW.withHourOfDay(2));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(australiaNSWDaylightInAusraliaNSW.getMillis() + 3, australiaNSWDaylightInAusraliaNSW.withMillisOfSecond(3).getMillis());      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testBug2182444_ausNSW$catena_5() {\n        Chronology chronAusNSW = GregorianChronology.getInstance(DateTimeZone.forID(\"Australia/NSW\"));\n        Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);\n        DateTime australiaNSWStandardInUTC = new DateTime(2008, 4, 5, 16, 0, 0, 0, chronUTC);\n        DateTime australiaNSWDaylightInUTC = new DateTime(2008, 4, 5, 15, 0, 0, 0, chronUTC);\n        try{ assertTrue(\"Should be standard time\", chronAusNSW.getZone().isStandardOffset(australiaNSWStandardInUTC.getMillis()));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(\"Should be daylight time\", chronAusNSW.getZone().isStandardOffset(australiaNSWDaylightInUTC.getMillis()));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        DateTime australiaNSWStandardInAustraliaNSW = australiaNSWStandardInUTC.toDateTime(chronAusNSW);\n        DateTime australiaNSWDaylightInAusraliaNSW = australiaNSWDaylightInUTC.toDateTime(chronAusNSW);\n        try{ assertEquals(2, australiaNSWStandardInAustraliaNSW.getHourOfDay());                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(australiaNSWStandardInAustraliaNSW.getHourOfDay(), australiaNSWDaylightInAusraliaNSW.getHourOfDay());                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(australiaNSWStandardInAustraliaNSW.getMillis() != australiaNSWDaylightInAusraliaNSW.getMillis());                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(australiaNSWStandardInAustraliaNSW, australiaNSWStandardInAustraliaNSW.withHourOfDay(2));                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(australiaNSWStandardInAustraliaNSW.getMillis() + 3, australiaNSWStandardInAustraliaNSW.withMillisOfSecond(3).getMillis());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(australiaNSWDaylightInAusraliaNSW, australiaNSWDaylightInAusraliaNSW.withHourOfDay(2));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(australiaNSWDaylightInAusraliaNSW.getMillis() + 3, australiaNSWDaylightInAusraliaNSW.withMillisOfSecond(3).getMillis());      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testBug2182444_ausNSW$catena_6() {\n        Chronology chronAusNSW = GregorianChronology.getInstance(DateTimeZone.forID(\"Australia/NSW\"));\n        Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);\n        DateTime australiaNSWStandardInUTC = new DateTime(2008, 4, 5, 16, 0, 0, 0, chronUTC);\n        DateTime australiaNSWDaylightInUTC = new DateTime(2008, 4, 5, 15, 0, 0, 0, chronUTC);\n        try{ assertTrue(\"Should be standard time\", chronAusNSW.getZone().isStandardOffset(australiaNSWStandardInUTC.getMillis()));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(\"Should be daylight time\", chronAusNSW.getZone().isStandardOffset(australiaNSWDaylightInUTC.getMillis()));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        DateTime australiaNSWStandardInAustraliaNSW = australiaNSWStandardInUTC.toDateTime(chronAusNSW);\n        DateTime australiaNSWDaylightInAusraliaNSW = australiaNSWDaylightInUTC.toDateTime(chronAusNSW);\n        try{ assertEquals(2, australiaNSWStandardInAustraliaNSW.getHourOfDay());                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(australiaNSWStandardInAustraliaNSW.getHourOfDay(), australiaNSWDaylightInAusraliaNSW.getHourOfDay());                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(australiaNSWStandardInAustraliaNSW.getMillis() != australiaNSWDaylightInAusraliaNSW.getMillis());                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(australiaNSWStandardInAustraliaNSW, australiaNSWStandardInAustraliaNSW.withHourOfDay(2));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(australiaNSWStandardInAustraliaNSW.getMillis() + 3, australiaNSWStandardInAustraliaNSW.withMillisOfSecond(3).getMillis());         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(australiaNSWDaylightInAusraliaNSW, australiaNSWDaylightInAusraliaNSW.withHourOfDay(2));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(australiaNSWDaylightInAusraliaNSW.getMillis() + 3, australiaNSWDaylightInAusraliaNSW.withMillisOfSecond(3).getMillis());      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testBug2182444_ausNSW$catena_7() {\n        Chronology chronAusNSW = GregorianChronology.getInstance(DateTimeZone.forID(\"Australia/NSW\"));\n        Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);\n        DateTime australiaNSWStandardInUTC = new DateTime(2008, 4, 5, 16, 0, 0, 0, chronUTC);\n        DateTime australiaNSWDaylightInUTC = new DateTime(2008, 4, 5, 15, 0, 0, 0, chronUTC);\n        try{ assertTrue(\"Should be standard time\", chronAusNSW.getZone().isStandardOffset(australiaNSWStandardInUTC.getMillis()));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(\"Should be daylight time\", chronAusNSW.getZone().isStandardOffset(australiaNSWDaylightInUTC.getMillis()));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        DateTime australiaNSWStandardInAustraliaNSW = australiaNSWStandardInUTC.toDateTime(chronAusNSW);\n        DateTime australiaNSWDaylightInAusraliaNSW = australiaNSWDaylightInUTC.toDateTime(chronAusNSW);\n        try{ assertEquals(2, australiaNSWStandardInAustraliaNSW.getHourOfDay());                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(australiaNSWStandardInAustraliaNSW.getHourOfDay(), australiaNSWDaylightInAusraliaNSW.getHourOfDay());                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(australiaNSWStandardInAustraliaNSW.getMillis() != australiaNSWDaylightInAusraliaNSW.getMillis());                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(australiaNSWStandardInAustraliaNSW, australiaNSWStandardInAustraliaNSW.withHourOfDay(2));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(australiaNSWStandardInAustraliaNSW.getMillis() + 3, australiaNSWStandardInAustraliaNSW.withMillisOfSecond(3).getMillis());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(australiaNSWDaylightInAusraliaNSW, australiaNSWDaylightInAusraliaNSW.withHourOfDay(2));                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(australiaNSWDaylightInAusraliaNSW.getMillis() + 3, australiaNSWDaylightInAusraliaNSW.withMillisOfSecond(3).getMillis());      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testBug2182444_ausNSW$catena_8() {\n        Chronology chronAusNSW = GregorianChronology.getInstance(DateTimeZone.forID(\"Australia/NSW\"));\n        Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);\n        DateTime australiaNSWStandardInUTC = new DateTime(2008, 4, 5, 16, 0, 0, 0, chronUTC);\n        DateTime australiaNSWDaylightInUTC = new DateTime(2008, 4, 5, 15, 0, 0, 0, chronUTC);\n        try{ assertTrue(\"Should be standard time\", chronAusNSW.getZone().isStandardOffset(australiaNSWStandardInUTC.getMillis()));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(\"Should be daylight time\", chronAusNSW.getZone().isStandardOffset(australiaNSWDaylightInUTC.getMillis()));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        DateTime australiaNSWStandardInAustraliaNSW = australiaNSWStandardInUTC.toDateTime(chronAusNSW);\n        DateTime australiaNSWDaylightInAusraliaNSW = australiaNSWDaylightInUTC.toDateTime(chronAusNSW);\n        try{ assertEquals(2, australiaNSWStandardInAustraliaNSW.getHourOfDay());                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(australiaNSWStandardInAustraliaNSW.getHourOfDay(), australiaNSWDaylightInAusraliaNSW.getHourOfDay());                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(australiaNSWStandardInAustraliaNSW.getMillis() != australiaNSWDaylightInAusraliaNSW.getMillis());                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(australiaNSWStandardInAustraliaNSW, australiaNSWStandardInAustraliaNSW.withHourOfDay(2));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(australiaNSWStandardInAustraliaNSW.getMillis() + 3, australiaNSWStandardInAustraliaNSW.withMillisOfSecond(3).getMillis());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(australiaNSWDaylightInAusraliaNSW, australiaNSWDaylightInAusraliaNSW.withHourOfDay(2));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(australiaNSWDaylightInAusraliaNSW.getMillis() + 3, australiaNSWDaylightInAusraliaNSW.withMillisOfSecond(3).getMillis());           /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void testBug2182444_ausNSW$catena_0() {\n        Chronology chronAusNSW = GregorianChronology.getInstance(DateTimeZone.forID(\"Australia/NSW\"));\n        Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);\n        DateTime australiaNSWStandardInUTC = new DateTime(2008, 4, 5, 16, 0, 0, 0, chronUTC);\n        DateTime australiaNSWDaylightInUTC = new DateTime(2008, 4, 5, 15, 0, 0, 0, chronUTC);\n        assertTrue(\"Should be standard time\", chronAusNSW.getZone().isStandardOffset(australiaNSWStandardInUTC.getMillis()));                           /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertFalse(\"Should be daylight time\", chronAusNSW.getZone().isStandardOffset(australiaNSWDaylightInUTC.getMillis()));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        DateTime australiaNSWStandardInAustraliaNSW = australiaNSWStandardInUTC.toDateTime(chronAusNSW);\n        DateTime australiaNSWDaylightInAusraliaNSW = australiaNSWDaylightInUTC.toDateTime(chronAusNSW);\n        try{ assertEquals(2, australiaNSWStandardInAustraliaNSW.getHourOfDay());                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(australiaNSWStandardInAustraliaNSW.getHourOfDay(), australiaNSWDaylightInAusraliaNSW.getHourOfDay());                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(australiaNSWStandardInAustraliaNSW.getMillis() != australiaNSWDaylightInAusraliaNSW.getMillis());                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(australiaNSWStandardInAustraliaNSW, australiaNSWStandardInAustraliaNSW.withHourOfDay(2));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(australiaNSWStandardInAustraliaNSW.getMillis() + 3, australiaNSWStandardInAustraliaNSW.withMillisOfSecond(3).getMillis());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(australiaNSWDaylightInAusraliaNSW, australiaNSWDaylightInAusraliaNSW.withHourOfDay(2));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(australiaNSWDaylightInAusraliaNSW.getMillis() + 3, australiaNSWDaylightInAusraliaNSW.withMillisOfSecond(3).getMillis());      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void testBug2182444_ausNSW$catena_1() {\n        Chronology chronAusNSW = GregorianChronology.getInstance(DateTimeZone.forID(\"Australia/NSW\"));\n        Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);\n        DateTime australiaNSWStandardInUTC = new DateTime(2008, 4, 5, 16, 0, 0, 0, chronUTC);\n        DateTime australiaNSWDaylightInUTC = new DateTime(2008, 4, 5, 15, 0, 0, 0, chronUTC);\n        try{ assertTrue(\"Should be standard time\", chronAusNSW.getZone().isStandardOffset(australiaNSWStandardInUTC.getMillis()));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertFalse(\"Should be daylight time\", chronAusNSW.getZone().isStandardOffset(australiaNSWDaylightInUTC.getMillis()));                          /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        DateTime australiaNSWStandardInAustraliaNSW = australiaNSWStandardInUTC.toDateTime(chronAusNSW);\n        DateTime australiaNSWDaylightInAusraliaNSW = australiaNSWDaylightInUTC.toDateTime(chronAusNSW);\n        try{ assertEquals(2, australiaNSWStandardInAustraliaNSW.getHourOfDay());                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(australiaNSWStandardInAustraliaNSW.getHourOfDay(), australiaNSWDaylightInAusraliaNSW.getHourOfDay());                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(australiaNSWStandardInAustraliaNSW.getMillis() != australiaNSWDaylightInAusraliaNSW.getMillis());                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(australiaNSWStandardInAustraliaNSW, australiaNSWStandardInAustraliaNSW.withHourOfDay(2));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(australiaNSWStandardInAustraliaNSW.getMillis() + 3, australiaNSWStandardInAustraliaNSW.withMillisOfSecond(3).getMillis());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(australiaNSWDaylightInAusraliaNSW, australiaNSWDaylightInAusraliaNSW.withHourOfDay(2));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(australiaNSWDaylightInAusraliaNSW.getMillis() + 3, australiaNSWDaylightInAusraliaNSW.withMillisOfSecond(3).getMillis());      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "2": "    public void testBug2182444_ausNSW$catena_2() {\n        Chronology chronAusNSW = GregorianChronology.getInstance(DateTimeZone.forID(\"Australia/NSW\"));\n        Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);\n        DateTime australiaNSWStandardInUTC = new DateTime(2008, 4, 5, 16, 0, 0, 0, chronUTC);\n        DateTime australiaNSWDaylightInUTC = new DateTime(2008, 4, 5, 15, 0, 0, 0, chronUTC);\n        try{ assertTrue(\"Should be standard time\", chronAusNSW.getZone().isStandardOffset(australiaNSWStandardInUTC.getMillis()));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(\"Should be daylight time\", chronAusNSW.getZone().isStandardOffset(australiaNSWDaylightInUTC.getMillis()));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        DateTime australiaNSWStandardInAustraliaNSW = australiaNSWStandardInUTC.toDateTime(chronAusNSW);\n        DateTime australiaNSWDaylightInAusraliaNSW = australiaNSWDaylightInUTC.toDateTime(chronAusNSW);\n        assertEquals(2, australiaNSWStandardInAustraliaNSW.getHourOfDay());                                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(australiaNSWStandardInAustraliaNSW.getHourOfDay(), australiaNSWDaylightInAusraliaNSW.getHourOfDay());                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(australiaNSWStandardInAustraliaNSW.getMillis() != australiaNSWDaylightInAusraliaNSW.getMillis());                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(australiaNSWStandardInAustraliaNSW, australiaNSWStandardInAustraliaNSW.withHourOfDay(2));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(australiaNSWStandardInAustraliaNSW.getMillis() + 3, australiaNSWStandardInAustraliaNSW.withMillisOfSecond(3).getMillis());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(australiaNSWDaylightInAusraliaNSW, australiaNSWDaylightInAusraliaNSW.withHourOfDay(2));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(australiaNSWDaylightInAusraliaNSW.getMillis() + 3, australiaNSWDaylightInAusraliaNSW.withMillisOfSecond(3).getMillis());      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "3": "    public void testBug2182444_ausNSW$catena_3() {\n        Chronology chronAusNSW = GregorianChronology.getInstance(DateTimeZone.forID(\"Australia/NSW\"));\n        Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);\n        DateTime australiaNSWStandardInUTC = new DateTime(2008, 4, 5, 16, 0, 0, 0, chronUTC);\n        DateTime australiaNSWDaylightInUTC = new DateTime(2008, 4, 5, 15, 0, 0, 0, chronUTC);\n        try{ assertTrue(\"Should be standard time\", chronAusNSW.getZone().isStandardOffset(australiaNSWStandardInUTC.getMillis()));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(\"Should be daylight time\", chronAusNSW.getZone().isStandardOffset(australiaNSWDaylightInUTC.getMillis()));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        DateTime australiaNSWStandardInAustraliaNSW = australiaNSWStandardInUTC.toDateTime(chronAusNSW);\n        DateTime australiaNSWDaylightInAusraliaNSW = australiaNSWDaylightInUTC.toDateTime(chronAusNSW);\n        try{ assertEquals(2, australiaNSWStandardInAustraliaNSW.getHourOfDay());                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(australiaNSWStandardInAustraliaNSW.getHourOfDay(), australiaNSWDaylightInAusraliaNSW.getHourOfDay());                              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(australiaNSWStandardInAustraliaNSW.getMillis() != australiaNSWDaylightInAusraliaNSW.getMillis());                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(australiaNSWStandardInAustraliaNSW, australiaNSWStandardInAustraliaNSW.withHourOfDay(2));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(australiaNSWStandardInAustraliaNSW.getMillis() + 3, australiaNSWStandardInAustraliaNSW.withMillisOfSecond(3).getMillis());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(australiaNSWDaylightInAusraliaNSW, australiaNSWDaylightInAusraliaNSW.withHourOfDay(2));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(australiaNSWDaylightInAusraliaNSW.getMillis() + 3, australiaNSWDaylightInAusraliaNSW.withMillisOfSecond(3).getMillis());      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "4": "    public void testBug2182444_ausNSW$catena_4() {\n        Chronology chronAusNSW = GregorianChronology.getInstance(DateTimeZone.forID(\"Australia/NSW\"));\n        Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);\n        DateTime australiaNSWStandardInUTC = new DateTime(2008, 4, 5, 16, 0, 0, 0, chronUTC);\n        DateTime australiaNSWDaylightInUTC = new DateTime(2008, 4, 5, 15, 0, 0, 0, chronUTC);\n        try{ assertTrue(\"Should be standard time\", chronAusNSW.getZone().isStandardOffset(australiaNSWStandardInUTC.getMillis()));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(\"Should be daylight time\", chronAusNSW.getZone().isStandardOffset(australiaNSWDaylightInUTC.getMillis()));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        DateTime australiaNSWStandardInAustraliaNSW = australiaNSWStandardInUTC.toDateTime(chronAusNSW);\n        DateTime australiaNSWDaylightInAusraliaNSW = australiaNSWDaylightInUTC.toDateTime(chronAusNSW);\n        try{ assertEquals(2, australiaNSWStandardInAustraliaNSW.getHourOfDay());                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(australiaNSWStandardInAustraliaNSW.getHourOfDay(), australiaNSWDaylightInAusraliaNSW.getHourOfDay());                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(australiaNSWStandardInAustraliaNSW.getMillis() != australiaNSWDaylightInAusraliaNSW.getMillis());                                    /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(australiaNSWStandardInAustraliaNSW, australiaNSWStandardInAustraliaNSW.withHourOfDay(2));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(australiaNSWStandardInAustraliaNSW.getMillis() + 3, australiaNSWStandardInAustraliaNSW.withMillisOfSecond(3).getMillis());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(australiaNSWDaylightInAusraliaNSW, australiaNSWDaylightInAusraliaNSW.withHourOfDay(2));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(australiaNSWDaylightInAusraliaNSW.getMillis() + 3, australiaNSWDaylightInAusraliaNSW.withMillisOfSecond(3).getMillis());      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "5": "    public void testBug2182444_ausNSW$catena_5() {\n        Chronology chronAusNSW = GregorianChronology.getInstance(DateTimeZone.forID(\"Australia/NSW\"));\n        Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);\n        DateTime australiaNSWStandardInUTC = new DateTime(2008, 4, 5, 16, 0, 0, 0, chronUTC);\n        DateTime australiaNSWDaylightInUTC = new DateTime(2008, 4, 5, 15, 0, 0, 0, chronUTC);\n        try{ assertTrue(\"Should be standard time\", chronAusNSW.getZone().isStandardOffset(australiaNSWStandardInUTC.getMillis()));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(\"Should be daylight time\", chronAusNSW.getZone().isStandardOffset(australiaNSWDaylightInUTC.getMillis()));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        DateTime australiaNSWStandardInAustraliaNSW = australiaNSWStandardInUTC.toDateTime(chronAusNSW);\n        DateTime australiaNSWDaylightInAusraliaNSW = australiaNSWDaylightInUTC.toDateTime(chronAusNSW);\n        try{ assertEquals(2, australiaNSWStandardInAustraliaNSW.getHourOfDay());                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(australiaNSWStandardInAustraliaNSW.getHourOfDay(), australiaNSWDaylightInAusraliaNSW.getHourOfDay());                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(australiaNSWStandardInAustraliaNSW.getMillis() != australiaNSWDaylightInAusraliaNSW.getMillis());                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(australiaNSWStandardInAustraliaNSW, australiaNSWStandardInAustraliaNSW.withHourOfDay(2));                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(australiaNSWStandardInAustraliaNSW.getMillis() + 3, australiaNSWStandardInAustraliaNSW.withMillisOfSecond(3).getMillis());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(australiaNSWDaylightInAusraliaNSW, australiaNSWDaylightInAusraliaNSW.withHourOfDay(2));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(australiaNSWDaylightInAusraliaNSW.getMillis() + 3, australiaNSWDaylightInAusraliaNSW.withMillisOfSecond(3).getMillis());      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "6": "    public void testBug2182444_ausNSW$catena_6() {\n        Chronology chronAusNSW = GregorianChronology.getInstance(DateTimeZone.forID(\"Australia/NSW\"));\n        Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);\n        DateTime australiaNSWStandardInUTC = new DateTime(2008, 4, 5, 16, 0, 0, 0, chronUTC);\n        DateTime australiaNSWDaylightInUTC = new DateTime(2008, 4, 5, 15, 0, 0, 0, chronUTC);\n        try{ assertTrue(\"Should be standard time\", chronAusNSW.getZone().isStandardOffset(australiaNSWStandardInUTC.getMillis()));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(\"Should be daylight time\", chronAusNSW.getZone().isStandardOffset(australiaNSWDaylightInUTC.getMillis()));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        DateTime australiaNSWStandardInAustraliaNSW = australiaNSWStandardInUTC.toDateTime(chronAusNSW);\n        DateTime australiaNSWDaylightInAusraliaNSW = australiaNSWDaylightInUTC.toDateTime(chronAusNSW);\n        try{ assertEquals(2, australiaNSWStandardInAustraliaNSW.getHourOfDay());                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(australiaNSWStandardInAustraliaNSW.getHourOfDay(), australiaNSWDaylightInAusraliaNSW.getHourOfDay());                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(australiaNSWStandardInAustraliaNSW.getMillis() != australiaNSWDaylightInAusraliaNSW.getMillis());                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(australiaNSWStandardInAustraliaNSW, australiaNSWStandardInAustraliaNSW.withHourOfDay(2));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(australiaNSWStandardInAustraliaNSW.getMillis() + 3, australiaNSWStandardInAustraliaNSW.withMillisOfSecond(3).getMillis());         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(australiaNSWDaylightInAusraliaNSW, australiaNSWDaylightInAusraliaNSW.withHourOfDay(2));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(australiaNSWDaylightInAusraliaNSW.getMillis() + 3, australiaNSWDaylightInAusraliaNSW.withMillisOfSecond(3).getMillis());      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "7": "    public void testBug2182444_ausNSW$catena_7() {\n        Chronology chronAusNSW = GregorianChronology.getInstance(DateTimeZone.forID(\"Australia/NSW\"));\n        Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);\n        DateTime australiaNSWStandardInUTC = new DateTime(2008, 4, 5, 16, 0, 0, 0, chronUTC);\n        DateTime australiaNSWDaylightInUTC = new DateTime(2008, 4, 5, 15, 0, 0, 0, chronUTC);\n        try{ assertTrue(\"Should be standard time\", chronAusNSW.getZone().isStandardOffset(australiaNSWStandardInUTC.getMillis()));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(\"Should be daylight time\", chronAusNSW.getZone().isStandardOffset(australiaNSWDaylightInUTC.getMillis()));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        DateTime australiaNSWStandardInAustraliaNSW = australiaNSWStandardInUTC.toDateTime(chronAusNSW);\n        DateTime australiaNSWDaylightInAusraliaNSW = australiaNSWDaylightInUTC.toDateTime(chronAusNSW);\n        try{ assertEquals(2, australiaNSWStandardInAustraliaNSW.getHourOfDay());                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(australiaNSWStandardInAustraliaNSW.getHourOfDay(), australiaNSWDaylightInAusraliaNSW.getHourOfDay());                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(australiaNSWStandardInAustraliaNSW.getMillis() != australiaNSWDaylightInAusraliaNSW.getMillis());                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(australiaNSWStandardInAustraliaNSW, australiaNSWStandardInAustraliaNSW.withHourOfDay(2));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(australiaNSWStandardInAustraliaNSW.getMillis() + 3, australiaNSWStandardInAustraliaNSW.withMillisOfSecond(3).getMillis());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(australiaNSWDaylightInAusraliaNSW, australiaNSWDaylightInAusraliaNSW.withHourOfDay(2));                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(australiaNSWDaylightInAusraliaNSW.getMillis() + 3, australiaNSWDaylightInAusraliaNSW.withMillisOfSecond(3).getMillis());      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "8": "    public void testBug2182444_ausNSW$catena_8() {\n        Chronology chronAusNSW = GregorianChronology.getInstance(DateTimeZone.forID(\"Australia/NSW\"));\n        Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);\n        DateTime australiaNSWStandardInUTC = new DateTime(2008, 4, 5, 16, 0, 0, 0, chronUTC);\n        DateTime australiaNSWDaylightInUTC = new DateTime(2008, 4, 5, 15, 0, 0, 0, chronUTC);\n        try{ assertTrue(\"Should be standard time\", chronAusNSW.getZone().isStandardOffset(australiaNSWStandardInUTC.getMillis()));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(\"Should be daylight time\", chronAusNSW.getZone().isStandardOffset(australiaNSWDaylightInUTC.getMillis()));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        DateTime australiaNSWStandardInAustraliaNSW = australiaNSWStandardInUTC.toDateTime(chronAusNSW);\n        DateTime australiaNSWDaylightInAusraliaNSW = australiaNSWDaylightInUTC.toDateTime(chronAusNSW);\n        try{ assertEquals(2, australiaNSWStandardInAustraliaNSW.getHourOfDay());                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(australiaNSWStandardInAustraliaNSW.getHourOfDay(), australiaNSWDaylightInAusraliaNSW.getHourOfDay());                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(australiaNSWStandardInAustraliaNSW.getMillis() != australiaNSWDaylightInAusraliaNSW.getMillis());                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(australiaNSWStandardInAustraliaNSW, australiaNSWStandardInAustraliaNSW.withHourOfDay(2));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(australiaNSWStandardInAustraliaNSW.getMillis() + 3, australiaNSWStandardInAustraliaNSW.withMillisOfSecond(3).getMillis());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(australiaNSWDaylightInAusraliaNSW, australiaNSWDaylightInAusraliaNSW.withHourOfDay(2));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(australiaNSWDaylightInAusraliaNSW.getMillis() + 3, australiaNSWDaylightInAusraliaNSW.withMillisOfSecond(3).getMillis());           /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        }
    },
    "100010000": {
        "failing_tests": [
            "org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_NewYork_winter$catena_1",
            "org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_7",
            "org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_Paris_summer$catena_1",
            "org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange$catena_1",
            "org.joda.time.TestDateTimeZoneCutover::testWithSecondOfMinuteInDstChange$catena_1",
            "org.joda.time.TestDateTimeZoneCutover::testWithHourOfDayInDstChange$catena_1",
            "org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW$catena_8",
            "org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange_mockZone$catena_3",
            "org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_5",
            "org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral$catena_6"
        ]
    }
}