---
Begin generate bug_id: Time_10
num_of_hunks: 2
timeout for running: 3600
use working dir: ./working/data/Time_10
Try to checkout Time_10
build dir: ['./working/data/Time_10/target/classes', './working/data/Time_10/target/test-classes']
init FileManager
trace file: src/main/java/org/joda/time/base/BaseSingleFieldPeriod.java
trying to replace old failing tests
edit: replace from 123 range 16 at src/test/java/org/joda/time/TestDays.java
to
    public void testFactory_daysBetween_RPartial_MonthDay$catena_0() {
        MonthDay start1 = new MonthDay(2, 1);
        MonthDay start2 = new MonthDay(2, 28);
        MonthDay end1 = new MonthDay(2, 28);
        MonthDay end2 = new MonthDay(2, 29);
        
        assertEquals(27, Days.daysBetween(start1, end1).getDays());                                         /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(28, Days.daysBetween(start1, end2).getDays());                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(0, Days.daysBetween(start2, end1).getDays());                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, Days.daysBetween(start2, end2).getDays());                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        
        try{ assertEquals(-27, Days.daysBetween(end1, start1).getDays());                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(-28, Days.daysBetween(end2, start1).getDays());                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(0, Days.daysBetween(end1, start2).getDays());                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(-1, Days.daysBetween(end2, start2).getDays());                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testFactory_daysBetween_RPartial_MonthDay$catena_1() {
        MonthDay start1 = new MonthDay(2, 1);
        MonthDay start2 = new MonthDay(2, 28);
        MonthDay end1 = new MonthDay(2, 28);
        MonthDay end2 = new MonthDay(2, 29);
        
        try{ assertEquals(27, Days.daysBetween(start1, end1).getDays());                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(28, Days.daysBetween(start1, end2).getDays());                                         /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(0, Days.daysBetween(start2, end1).getDays());                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, Days.daysBetween(start2, end2).getDays());                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        
        try{ assertEquals(-27, Days.daysBetween(end1, start1).getDays());                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(-28, Days.daysBetween(end2, start1).getDays());                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(0, Days.daysBetween(end1, start2).getDays());                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(-1, Days.daysBetween(end2, start2).getDays());                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testFactory_daysBetween_RPartial_MonthDay$catena_2() {
        MonthDay start1 = new MonthDay(2, 1);
        MonthDay start2 = new MonthDay(2, 28);
        MonthDay end1 = new MonthDay(2, 28);
        MonthDay end2 = new MonthDay(2, 29);
        
        try{ assertEquals(27, Days.daysBetween(start1, end1).getDays());                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(28, Days.daysBetween(start1, end2).getDays());                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(0, Days.daysBetween(start2, end1).getDays());                                          /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(1, Days.daysBetween(start2, end2).getDays());                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        
        try{ assertEquals(-27, Days.daysBetween(end1, start1).getDays());                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(-28, Days.daysBetween(end2, start1).getDays());                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(0, Days.daysBetween(end1, start2).getDays());                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(-1, Days.daysBetween(end2, start2).getDays());                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testFactory_daysBetween_RPartial_MonthDay$catena_3() {
        MonthDay start1 = new MonthDay(2, 1);
        MonthDay start2 = new MonthDay(2, 28);
        MonthDay end1 = new MonthDay(2, 28);
        MonthDay end2 = new MonthDay(2, 29);
        
        try{ assertEquals(27, Days.daysBetween(start1, end1).getDays());                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(28, Days.daysBetween(start1, end2).getDays());                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(0, Days.daysBetween(start2, end1).getDays());                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(1, Days.daysBetween(start2, end2).getDays());                                          /***** ORIGINAL ASSERTION IS HERE *****/
        
        try{ assertEquals(-27, Days.daysBetween(end1, start1).getDays());                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(-28, Days.daysBetween(end2, start1).getDays());                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(0, Days.daysBetween(end1, start2).getDays());                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(-1, Days.daysBetween(end2, start2).getDays());                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testFactory_daysBetween_RPartial_MonthDay$catena_4() {
        MonthDay start1 = new MonthDay(2, 1);
        MonthDay start2 = new MonthDay(2, 28);
        MonthDay end1 = new MonthDay(2, 28);
        MonthDay end2 = new MonthDay(2, 29);
        
        try{ assertEquals(27, Days.daysBetween(start1, end1).getDays());                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(28, Days.daysBetween(start1, end2).getDays());                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(0, Days.daysBetween(start2, end1).getDays());                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, Days.daysBetween(start2, end2).getDays());                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        
        assertEquals(-27, Days.daysBetween(end1, start1).getDays());                                        /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(-28, Days.daysBetween(end2, start1).getDays());                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(0, Days.daysBetween(end1, start2).getDays());                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(-1, Days.daysBetween(end2, start2).getDays());                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testFactory_daysBetween_RPartial_MonthDay$catena_5() {
        MonthDay start1 = new MonthDay(2, 1);
        MonthDay start2 = new MonthDay(2, 28);
        MonthDay end1 = new MonthDay(2, 28);
        MonthDay end2 = new MonthDay(2, 29);
        
        try{ assertEquals(27, Days.daysBetween(start1, end1).getDays());                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(28, Days.daysBetween(start1, end2).getDays());                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(0, Days.daysBetween(start2, end1).getDays());                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, Days.daysBetween(start2, end2).getDays());                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        
        try{ assertEquals(-27, Days.daysBetween(end1, start1).getDays());                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(-28, Days.daysBetween(end2, start1).getDays());                                        /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(0, Days.daysBetween(end1, start2).getDays());                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(-1, Days.daysBetween(end2, start2).getDays());                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testFactory_daysBetween_RPartial_MonthDay$catena_6() {
        MonthDay start1 = new MonthDay(2, 1);
        MonthDay start2 = new MonthDay(2, 28);
        MonthDay end1 = new MonthDay(2, 28);
        MonthDay end2 = new MonthDay(2, 29);
        
        try{ assertEquals(27, Days.daysBetween(start1, end1).getDays());                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(28, Days.daysBetween(start1, end2).getDays());                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(0, Days.daysBetween(start2, end1).getDays());                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, Days.daysBetween(start2, end2).getDays());                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        
        try{ assertEquals(-27, Days.daysBetween(end1, start1).getDays());                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(-28, Days.daysBetween(end2, start1).getDays());                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(0, Days.daysBetween(end1, start2).getDays());                                          /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(-1, Days.daysBetween(end2, start2).getDays());                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testFactory_daysBetween_RPartial_MonthDay$catena_7() {
        MonthDay start1 = new MonthDay(2, 1);
        MonthDay start2 = new MonthDay(2, 28);
        MonthDay end1 = new MonthDay(2, 28);
        MonthDay end2 = new MonthDay(2, 29);
        
        try{ assertEquals(27, Days.daysBetween(start1, end1).getDays());                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(28, Days.daysBetween(start1, end2).getDays());                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(0, Days.daysBetween(start2, end1).getDays());                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, Days.daysBetween(start2, end2).getDays());                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        
        try{ assertEquals(-27, Days.daysBetween(end1, start1).getDays());                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(-28, Days.daysBetween(end2, start1).getDays());                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(0, Days.daysBetween(end1, start2).getDays());                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(-1, Days.daysBetween(end2, start2).getDays());                                         /***** ORIGINAL ASSERTION IS HERE *****/
    }
edit: replace from 130 range 14 at src/test/java/org/joda/time/TestMonths.java
to
    public void testFactory_monthsBetween_RPartial_MonthDay$catena_0() {
        MonthDay start = new MonthDay(2, 1);
        MonthDay end1 = new MonthDay(2, 28);
        MonthDay end2 = new MonthDay(2, 29);
        MonthDay end3 = new MonthDay(3, 1);
        
        assertEquals(0, Months.monthsBetween(start, end1).getMonths());                                     /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(0, Months.monthsBetween(start, end2).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, Months.monthsBetween(start, end3).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}
        
        try{ assertEquals(0, Months.monthsBetween(end1, start).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(0, Months.monthsBetween(end2, start).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(-1, Months.monthsBetween(end3, start).getMonths());                               }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testFactory_monthsBetween_RPartial_MonthDay$catena_1() {
        MonthDay start = new MonthDay(2, 1);
        MonthDay end1 = new MonthDay(2, 28);
        MonthDay end2 = new MonthDay(2, 29);
        MonthDay end3 = new MonthDay(3, 1);
        
        try{ assertEquals(0, Months.monthsBetween(start, end1).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(0, Months.monthsBetween(start, end2).getMonths());                                     /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(1, Months.monthsBetween(start, end3).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}
        
        try{ assertEquals(0, Months.monthsBetween(end1, start).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(0, Months.monthsBetween(end2, start).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(-1, Months.monthsBetween(end3, start).getMonths());                               }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testFactory_monthsBetween_RPartial_MonthDay$catena_2() {
        MonthDay start = new MonthDay(2, 1);
        MonthDay end1 = new MonthDay(2, 28);
        MonthDay end2 = new MonthDay(2, 29);
        MonthDay end3 = new MonthDay(3, 1);
        
        try{ assertEquals(0, Months.monthsBetween(start, end1).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(0, Months.monthsBetween(start, end2).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(1, Months.monthsBetween(start, end3).getMonths());                                     /***** ORIGINAL ASSERTION IS HERE *****/
        
        try{ assertEquals(0, Months.monthsBetween(end1, start).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(0, Months.monthsBetween(end2, start).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(-1, Months.monthsBetween(end3, start).getMonths());                               }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testFactory_monthsBetween_RPartial_MonthDay$catena_3() {
        MonthDay start = new MonthDay(2, 1);
        MonthDay end1 = new MonthDay(2, 28);
        MonthDay end2 = new MonthDay(2, 29);
        MonthDay end3 = new MonthDay(3, 1);
        
        try{ assertEquals(0, Months.monthsBetween(start, end1).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(0, Months.monthsBetween(start, end2).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, Months.monthsBetween(start, end3).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}
        
        assertEquals(0, Months.monthsBetween(end1, start).getMonths());                                     /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(0, Months.monthsBetween(end2, start).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(-1, Months.monthsBetween(end3, start).getMonths());                               }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testFactory_monthsBetween_RPartial_MonthDay$catena_4() {
        MonthDay start = new MonthDay(2, 1);
        MonthDay end1 = new MonthDay(2, 28);
        MonthDay end2 = new MonthDay(2, 29);
        MonthDay end3 = new MonthDay(3, 1);
        
        try{ assertEquals(0, Months.monthsBetween(start, end1).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(0, Months.monthsBetween(start, end2).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, Months.monthsBetween(start, end3).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}
        
        try{ assertEquals(0, Months.monthsBetween(end1, start).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(0, Months.monthsBetween(end2, start).getMonths());                                     /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(-1, Months.monthsBetween(end3, start).getMonths());                               }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testFactory_monthsBetween_RPartial_MonthDay$catena_5() {
        MonthDay start = new MonthDay(2, 1);
        MonthDay end1 = new MonthDay(2, 28);
        MonthDay end2 = new MonthDay(2, 29);
        MonthDay end3 = new MonthDay(3, 1);
        
        try{ assertEquals(0, Months.monthsBetween(start, end1).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(0, Months.monthsBetween(start, end2).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, Months.monthsBetween(start, end3).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}
        
        try{ assertEquals(0, Months.monthsBetween(end1, start).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(0, Months.monthsBetween(end2, start).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(-1, Months.monthsBetween(end3, start).getMonths());                                    /***** ORIGINAL ASSERTION IS HERE *****/
    }
trace file: src/test/java/org/joda/time/TestMonths.java
trace file: src/test/java/org/joda/time/TestDays.java
new test num: 14
ori test num: 0
pattern: 00
patches are written to file
running tests...
used time: Finished in 54.68 seconds
Failing tests: 6
	org.joda.time.TestDays::testFactory_daysBetween_RPartial_MonthDay$catena_1
	org.joda.time.TestDays::testFactory_daysBetween_RPartial_MonthDay$catena_3
	org.joda.time.TestDays::testFactory_daysBetween_RPartial_MonthDay$catena_5
	org.joda.time.TestDays::testFactory_daysBetween_RPartial_MonthDay$catena_7
	org.joda.time.TestMonths::testFactory_monthsBetween_RPartial_MonthDay$catena_1
	org.joda.time.TestMonths::testFactory_monthsBetween_RPartial_MonthDay$catena_4
processed: 00
pattern: 01
try to fix hunk: 1
replace from 104 with range 1 to
        int[] values = chrono.get(zeroInstance, chrono.set(start, START_1972), chrono.set(end, START_1972));

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01
pattern: 10
try to fix hunk: 0
insert before 52 with     private static final long START_1972 = 2L * 365L * 86400L * 1000L;

patches are written to file
running tests...
used time: Finished in 39.03 seconds
Failing tests: 6
	org.joda.time.TestDays::testFactory_daysBetween_RPartial_MonthDay$catena_1
	org.joda.time.TestDays::testFactory_daysBetween_RPartial_MonthDay$catena_3
	org.joda.time.TestDays::testFactory_daysBetween_RPartial_MonthDay$catena_5
	org.joda.time.TestDays::testFactory_daysBetween_RPartial_MonthDay$catena_7
	org.joda.time.TestMonths::testFactory_monthsBetween_RPartial_MonthDay$catena_1
	org.joda.time.TestMonths::testFactory_monthsBetween_RPartial_MonthDay$catena_4
No new failing tests but only 1 hunk
processed: 10
pattern: 11
try to fix hunk: 0
insert before 52 with     private static final long START_1972 = 2L * 365L * 86400L * 1000L;

try to fix hunk: 1
replace from 104 with range 1 to
        int[] values = chrono.get(zeroInstance, chrono.set(start, START_1972), chrono.set(end, START_1972));

patches are written to file
running tests...
used time: Finished in 39.66 seconds
Failing tests: 0
Can independently fix ['org.joda.time.TestMonths::testFactory_monthsBetween_RPartial_MonthDay$catena_1', 'org.joda.time.TestDays::testFactory_daysBetween_RPartial_MonthDay$catena_3', 'org.joda.time.TestDays::testFactory_daysBetween_RPartial_MonthDay$catena_1', 'org.joda.time.TestMonths::testFactory_monthsBetween_RPartial_MonthDay$catena_4', 'org.joda.time.TestDays::testFactory_daysBetween_RPartial_MonthDay$catena_7', 'org.joda.time.TestDays::testFactory_daysBetween_RPartial_MonthDay$catena_5']
select new bug
Pattern: 11
new failing tests:
org.joda.time.TestMonths::testFactory_monthsBetween_RPartial_MonthDay$catena_1
org.joda.time.TestDays::testFactory_daysBetween_RPartial_MonthDay$catena_3
org.joda.time.TestDays::testFactory_daysBetween_RPartial_MonthDay$catena_1
org.joda.time.TestMonths::testFactory_monthsBetween_RPartial_MonthDay$catena_4
org.joda.time.TestDays::testFactory_daysBetween_RPartial_MonthDay$catena_7
org.joda.time.TestDays::testFactory_daysBetween_RPartial_MonthDay$catena_5
Save found bug
processed: 11
Find 1 new bugs
