{
    "original": {
        "num_of_hunks": 20,
        "0": {
            "file_name": "src/org/mockito/Matchers.java",
            "from_line_no": 122,
            "to_line_no": 122,
            "replaced_with": "        return reportMatcher(new InstanceOf(Boolean.class)).returnFalse();\n",
            "replaced": "        return reportMatcher(Any.ANY).returnFalse();\n",
            "patch_type": "replace",
            "next_line_no": 123
        },
        "1": {
            "file_name": "src/org/mockito/Matchers.java",
            "from_line_no": 137,
            "to_line_no": 137,
            "replaced_with": "        return reportMatcher(new InstanceOf(Byte.class)).returnZero();\n",
            "replaced": "        return reportMatcher(Any.ANY).returnZero();\n",
            "patch_type": "replace",
            "next_line_no": 138
        },
        "2": {
            "file_name": "src/org/mockito/Matchers.java",
            "from_line_no": 152,
            "to_line_no": 152,
            "replaced_with": "        return reportMatcher(new InstanceOf(Character.class)).returnChar();\n",
            "replaced": "        return reportMatcher(Any.ANY).returnChar();\n",
            "patch_type": "replace",
            "next_line_no": 153
        },
        "3": {
            "file_name": "src/org/mockito/Matchers.java",
            "from_line_no": 167,
            "to_line_no": 167,
            "replaced_with": "        return reportMatcher(new InstanceOf(Integer.class)).returnZero();\n",
            "replaced": "        return reportMatcher(Any.ANY).returnZero();\n",
            "patch_type": "replace",
            "next_line_no": 168
        },
        "4": {
            "file_name": "src/org/mockito/Matchers.java",
            "from_line_no": 182,
            "to_line_no": 182,
            "replaced_with": "        return reportMatcher(new InstanceOf(Long.class)).returnZero();\n",
            "replaced": "        return reportMatcher(Any.ANY).returnZero();\n",
            "patch_type": "replace",
            "next_line_no": 183
        },
        "5": {
            "file_name": "src/org/mockito/Matchers.java",
            "from_line_no": 197,
            "to_line_no": 197,
            "replaced_with": "        return reportMatcher(new InstanceOf(Float.class)).returnZero();\n",
            "replaced": "        return reportMatcher(Any.ANY).returnZero();\n",
            "patch_type": "replace",
            "next_line_no": 198
        },
        "6": {
            "file_name": "src/org/mockito/Matchers.java",
            "from_line_no": 212,
            "to_line_no": 212,
            "replaced_with": "        return reportMatcher(new InstanceOf(Double.class)).returnZero();\n",
            "replaced": "        return reportMatcher(Any.ANY).returnZero();\n",
            "patch_type": "replace",
            "next_line_no": 213
        },
        "7": {
            "file_name": "src/org/mockito/Matchers.java",
            "from_line_no": 227,
            "to_line_no": 227,
            "replaced_with": "        return reportMatcher(new InstanceOf(Short.class)).returnZero();\n",
            "replaced": "        return reportMatcher(Any.ANY).returnZero();\n",
            "patch_type": "replace",
            "next_line_no": 228
        },
        "8": {
            "file_name": "src/org/mockito/Matchers.java",
            "from_line_no": 244,
            "to_line_no": 244,
            "replaced_with": "        return (T) reportMatcher(new InstanceOf(Object.class)).returnNull();\n",
            "replaced": "        return (T) reportMatcher(Any.ANY).returnNull();\n",
            "patch_type": "replace",
            "next_line_no": 245
        },
        "9": {
            "file_name": "src/org/mockito/Matchers.java",
            "from_line_no": 292,
            "to_line_no": 292,
            "replaced_with": "        return (T) reportMatcher(new InstanceOf(clazz)).returnFor(clazz);\n",
            "replaced": "        return (T) reportMatcher(Any.ANY).returnFor(clazz);\n",
            "patch_type": "replace",
            "next_line_no": 293
        },
        "10": {
            "file_name": "src/org/mockito/Matchers.java",
            "from_line_no": 309,
            "to_line_no": 309,
            "replaced_with": "        return (T) reportMatcher(Any.ANY).returnNull();\n",
            "replaced": "        return (T) anyObject();\n",
            "patch_type": "replace",
            "next_line_no": 310
        },
        "11": {
            "file_name": "src/org/mockito/Matchers.java",
            "from_line_no": 324,
            "to_line_no": 324,
            "replaced_with": "        return reportMatcher(new InstanceOf(String.class)).returnString();\n",
            "replaced": "        return reportMatcher(Any.ANY).returnString();\n",
            "patch_type": "replace",
            "next_line_no": 325
        },
        "12": {
            "file_name": "src/org/mockito/Matchers.java",
            "from_line_no": 339,
            "to_line_no": 339,
            "replaced_with": "        return reportMatcher(new InstanceOf(List.class)).returnList();\n",
            "replaced": "        return reportMatcher(Any.ANY).returnList();\n",
            "patch_type": "replace",
            "next_line_no": 340
        },
        "13": {
            "file_name": "src/org/mockito/Matchers.java",
            "from_line_no": 358,
            "to_line_no": 358,
            "replaced_with": "        return anyList();\n",
            "replaced": "        return (List) reportMatcher(Any.ANY).returnList();\n",
            "patch_type": "replace",
            "next_line_no": 359
        },
        "14": {
            "file_name": "src/org/mockito/Matchers.java",
            "from_line_no": 373,
            "to_line_no": 373,
            "replaced_with": "        return reportMatcher(new InstanceOf(Set.class)).returnSet();\n",
            "replaced": "        return reportMatcher(Any.ANY).returnSet();\n",
            "patch_type": "replace",
            "next_line_no": 374
        },
        "15": {
            "file_name": "src/org/mockito/Matchers.java",
            "from_line_no": 392,
            "to_line_no": 392,
            "replaced_with": "        return anySet();\n",
            "replaced": "        return (Set) reportMatcher(Any.ANY).returnSet();\n",
            "patch_type": "replace",
            "next_line_no": 393
        },
        "16": {
            "file_name": "src/org/mockito/Matchers.java",
            "from_line_no": 407,
            "to_line_no": 407,
            "replaced_with": "        return reportMatcher(new InstanceOf(Map.class)).returnMap();\n",
            "replaced": "        return reportMatcher(Any.ANY).returnMap();\n",
            "patch_type": "replace",
            "next_line_no": 408
        },
        "17": {
            "file_name": "src/org/mockito/Matchers.java",
            "from_line_no": 427,
            "to_line_no": 427,
            "replaced_with": "        return anyMap();\n",
            "replaced": "        return reportMatcher(Any.ANY).returnMap();\n",
            "patch_type": "replace",
            "next_line_no": 428
        },
        "18": {
            "file_name": "src/org/mockito/Matchers.java",
            "from_line_no": 442,
            "to_line_no": 442,
            "replaced_with": "        return reportMatcher(new InstanceOf(Collection.class)).returnList();\n",
            "replaced": "        return reportMatcher(Any.ANY).returnList();\n",
            "patch_type": "replace",
            "next_line_no": 443
        },
        "19": {
            "file_name": "src/org/mockito/Matchers.java",
            "from_line_no": 461,
            "to_line_no": 461,
            "replaced_with": "        return anyCollection();\n",
            "replaced": "        return (Collection) reportMatcher(Any.ANY).returnList();\n",
            "patch_type": "replace",
            "next_line_no": 462
        }
    },
    "method": {
        "failing_tests": [
            "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest::shouldNotAcceptNullInAllAnyPrimitiveWrapperMatchers",
            "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest::shouldNotAcceptNullInAnyXMatchers",
            "org.mockitousage.matchers.MatchersTest::anyStringMatcher",
            "org.mockitousage.matchers.NewMatchersTest::shouldAllowAnyCollection",
            "org.mockitousage.matchers.NewMatchersTest::shouldAllowAnyList",
            "org.mockitousage.matchers.NewMatchersTest::shouldAllowAnyMap",
            "org.mockitousage.matchers.NewMatchersTest::shouldAllowAnySet"
        ],
        "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest::shouldNotAcceptNullInAllAnyPrimitiveWrapperMatchers": {
            "file_path": "test/org/mockitousage/matchers/AnyXMatchersAcceptNullsTest.java",
            "Instance": "Begin: Pos(43, 5)\nEnd: Pos(62, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Mockito_6/test//org/mockitousage/matchers/AnyXMatchersAcceptNullsTest.java\nName: shouldNotAcceptNullInAllAnyPrimitiveWrapperMatchers\nChilds: [StatementAssertion<Begin: Pos(54, 9), End: Pos(54, 50)>,\nStatementAssertion<Begin: Pos(55, 9), End: Pos(55, 52)>,\nStatementAssertion<Begin: Pos(56, 9), End: Pos(56, 48)>,\nStatementAssertion<Begin: Pos(57, 9), End: Pos(57, 47)>,\nStatementAssertion<Begin: Pos(58, 9), End: Pos(58, 50)>,\nStatementAssertion<Begin: Pos(59, 9), End: Pos(59, 47)>,\nStatementAssertion<Begin: Pos(60, 9), End: Pos(60, 48)>,\nStatementAssertion<Begin: Pos(61, 9), End: Pos(61, 49)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Mockito_6/test//org/mockitousage/matchers/AnyXMatchersAcceptNullsTest.java",
            "name": "shouldNotAcceptNullInAllAnyPrimitiveWrapperMatchers",
            "begin": "Pos(43, 5)",
            "end": "Pos(62, 5)",
            "begin_line_no": 43,
            "end_line_no": 62,
            "child": [
                "Begin: Pos(54, 9)\nEnd: Pos(54, 50)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(55, 9)\nEnd: Pos(55, 52)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(56, 9)\nEnd: Pos(56, 48)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(57, 9)\nEnd: Pos(57, 47)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(58, 9)\nEnd: Pos(58, 50)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(59, 9)\nEnd: Pos(59, 47)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(60, 9)\nEnd: Pos(60, 48)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(61, 9)\nEnd: Pos(61, 49)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    @Test\n    public void shouldNotAcceptNullInAllAnyPrimitiveWrapperMatchers$catena_0() {\n        when(mock.forInteger(anyInt())).thenReturn(\"0\");\n        when(mock.forCharacter(anyChar())).thenReturn(\"1\");\n        when(mock.forShort(anyShort())).thenReturn(\"2\");\n        when(mock.forByte(anyByte())).thenReturn(\"3\");\n        when(mock.forBoolean(anyBoolean())).thenReturn(\"4\");\n        when(mock.forLong(anyLong())).thenReturn(\"5\");\n        when(mock.forFloat(anyFloat())).thenReturn(\"6\");\n        when(mock.forDouble(anyDouble())).thenReturn(\"7\");\n        \n        assertEquals(null, mock.forInteger(null));                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(null, mock.forCharacter(null));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forShort(null));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forByte(null));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forBoolean(null));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forLong(null));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forFloat(null));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forDouble(null));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void shouldNotAcceptNullInAllAnyPrimitiveWrapperMatchers$catena_1() {\n        when(mock.forInteger(anyInt())).thenReturn(\"0\");\n        when(mock.forCharacter(anyChar())).thenReturn(\"1\");\n        when(mock.forShort(anyShort())).thenReturn(\"2\");\n        when(mock.forByte(anyByte())).thenReturn(\"3\");\n        when(mock.forBoolean(anyBoolean())).thenReturn(\"4\");\n        when(mock.forLong(anyLong())).thenReturn(\"5\");\n        when(mock.forFloat(anyFloat())).thenReturn(\"6\");\n        when(mock.forDouble(anyDouble())).thenReturn(\"7\");\n        \n        try{ assertEquals(null, mock.forInteger(null));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(null, mock.forCharacter(null));                                                        /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(null, mock.forShort(null));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forByte(null));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forBoolean(null));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forLong(null));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forFloat(null));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forDouble(null));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void shouldNotAcceptNullInAllAnyPrimitiveWrapperMatchers$catena_2() {\n        when(mock.forInteger(anyInt())).thenReturn(\"0\");\n        when(mock.forCharacter(anyChar())).thenReturn(\"1\");\n        when(mock.forShort(anyShort())).thenReturn(\"2\");\n        when(mock.forByte(anyByte())).thenReturn(\"3\");\n        when(mock.forBoolean(anyBoolean())).thenReturn(\"4\");\n        when(mock.forLong(anyLong())).thenReturn(\"5\");\n        when(mock.forFloat(anyFloat())).thenReturn(\"6\");\n        when(mock.forDouble(anyDouble())).thenReturn(\"7\");\n        \n        try{ assertEquals(null, mock.forInteger(null));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forCharacter(null));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(null, mock.forShort(null));                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(null, mock.forByte(null));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forBoolean(null));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forLong(null));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forFloat(null));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forDouble(null));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void shouldNotAcceptNullInAllAnyPrimitiveWrapperMatchers$catena_3() {\n        when(mock.forInteger(anyInt())).thenReturn(\"0\");\n        when(mock.forCharacter(anyChar())).thenReturn(\"1\");\n        when(mock.forShort(anyShort())).thenReturn(\"2\");\n        when(mock.forByte(anyByte())).thenReturn(\"3\");\n        when(mock.forBoolean(anyBoolean())).thenReturn(\"4\");\n        when(mock.forLong(anyLong())).thenReturn(\"5\");\n        when(mock.forFloat(anyFloat())).thenReturn(\"6\");\n        when(mock.forDouble(anyDouble())).thenReturn(\"7\");\n        \n        try{ assertEquals(null, mock.forInteger(null));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forCharacter(null));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forShort(null));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(null, mock.forByte(null));                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(null, mock.forBoolean(null));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forLong(null));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forFloat(null));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forDouble(null));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void shouldNotAcceptNullInAllAnyPrimitiveWrapperMatchers$catena_4() {\n        when(mock.forInteger(anyInt())).thenReturn(\"0\");\n        when(mock.forCharacter(anyChar())).thenReturn(\"1\");\n        when(mock.forShort(anyShort())).thenReturn(\"2\");\n        when(mock.forByte(anyByte())).thenReturn(\"3\");\n        when(mock.forBoolean(anyBoolean())).thenReturn(\"4\");\n        when(mock.forLong(anyLong())).thenReturn(\"5\");\n        when(mock.forFloat(anyFloat())).thenReturn(\"6\");\n        when(mock.forDouble(anyDouble())).thenReturn(\"7\");\n        \n        try{ assertEquals(null, mock.forInteger(null));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forCharacter(null));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forShort(null));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forByte(null));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(null, mock.forBoolean(null));                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(null, mock.forLong(null));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forFloat(null));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forDouble(null));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void shouldNotAcceptNullInAllAnyPrimitiveWrapperMatchers$catena_5() {\n        when(mock.forInteger(anyInt())).thenReturn(\"0\");\n        when(mock.forCharacter(anyChar())).thenReturn(\"1\");\n        when(mock.forShort(anyShort())).thenReturn(\"2\");\n        when(mock.forByte(anyByte())).thenReturn(\"3\");\n        when(mock.forBoolean(anyBoolean())).thenReturn(\"4\");\n        when(mock.forLong(anyLong())).thenReturn(\"5\");\n        when(mock.forFloat(anyFloat())).thenReturn(\"6\");\n        when(mock.forDouble(anyDouble())).thenReturn(\"7\");\n        \n        try{ assertEquals(null, mock.forInteger(null));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forCharacter(null));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forShort(null));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forByte(null));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forBoolean(null));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(null, mock.forLong(null));                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(null, mock.forFloat(null));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forDouble(null));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void shouldNotAcceptNullInAllAnyPrimitiveWrapperMatchers$catena_6() {\n        when(mock.forInteger(anyInt())).thenReturn(\"0\");\n        when(mock.forCharacter(anyChar())).thenReturn(\"1\");\n        when(mock.forShort(anyShort())).thenReturn(\"2\");\n        when(mock.forByte(anyByte())).thenReturn(\"3\");\n        when(mock.forBoolean(anyBoolean())).thenReturn(\"4\");\n        when(mock.forLong(anyLong())).thenReturn(\"5\");\n        when(mock.forFloat(anyFloat())).thenReturn(\"6\");\n        when(mock.forDouble(anyDouble())).thenReturn(\"7\");\n        \n        try{ assertEquals(null, mock.forInteger(null));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forCharacter(null));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forShort(null));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forByte(null));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forBoolean(null));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forLong(null));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(null, mock.forFloat(null));                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(null, mock.forDouble(null));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void shouldNotAcceptNullInAllAnyPrimitiveWrapperMatchers$catena_7() {\n        when(mock.forInteger(anyInt())).thenReturn(\"0\");\n        when(mock.forCharacter(anyChar())).thenReturn(\"1\");\n        when(mock.forShort(anyShort())).thenReturn(\"2\");\n        when(mock.forByte(anyByte())).thenReturn(\"3\");\n        when(mock.forBoolean(anyBoolean())).thenReturn(\"4\");\n        when(mock.forLong(anyLong())).thenReturn(\"5\");\n        when(mock.forFloat(anyFloat())).thenReturn(\"6\");\n        when(mock.forDouble(anyDouble())).thenReturn(\"7\");\n        \n        try{ assertEquals(null, mock.forInteger(null));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forCharacter(null));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forShort(null));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forByte(null));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forBoolean(null));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forLong(null));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forFloat(null));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(null, mock.forDouble(null));                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    @Test\n    public void shouldNotAcceptNullInAllAnyPrimitiveWrapperMatchers$catena_0() {\n        when(mock.forInteger(anyInt())).thenReturn(\"0\");\n        when(mock.forCharacter(anyChar())).thenReturn(\"1\");\n        when(mock.forShort(anyShort())).thenReturn(\"2\");\n        when(mock.forByte(anyByte())).thenReturn(\"3\");\n        when(mock.forBoolean(anyBoolean())).thenReturn(\"4\");\n        when(mock.forLong(anyLong())).thenReturn(\"5\");\n        when(mock.forFloat(anyFloat())).thenReturn(\"6\");\n        when(mock.forDouble(anyDouble())).thenReturn(\"7\");\n        \n        assertEquals(null, mock.forInteger(null));                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(null, mock.forCharacter(null));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forShort(null));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forByte(null));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forBoolean(null));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forLong(null));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forFloat(null));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forDouble(null));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    @Test\n    public void shouldNotAcceptNullInAllAnyPrimitiveWrapperMatchers$catena_1() {\n        when(mock.forInteger(anyInt())).thenReturn(\"0\");\n        when(mock.forCharacter(anyChar())).thenReturn(\"1\");\n        when(mock.forShort(anyShort())).thenReturn(\"2\");\n        when(mock.forByte(anyByte())).thenReturn(\"3\");\n        when(mock.forBoolean(anyBoolean())).thenReturn(\"4\");\n        when(mock.forLong(anyLong())).thenReturn(\"5\");\n        when(mock.forFloat(anyFloat())).thenReturn(\"6\");\n        when(mock.forDouble(anyDouble())).thenReturn(\"7\");\n        \n        try{ assertEquals(null, mock.forInteger(null));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(null, mock.forCharacter(null));                                                        /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(null, mock.forShort(null));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forByte(null));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forBoolean(null));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forLong(null));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forFloat(null));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forDouble(null));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "2": "    @Test\n    public void shouldNotAcceptNullInAllAnyPrimitiveWrapperMatchers$catena_2() {\n        when(mock.forInteger(anyInt())).thenReturn(\"0\");\n        when(mock.forCharacter(anyChar())).thenReturn(\"1\");\n        when(mock.forShort(anyShort())).thenReturn(\"2\");\n        when(mock.forByte(anyByte())).thenReturn(\"3\");\n        when(mock.forBoolean(anyBoolean())).thenReturn(\"4\");\n        when(mock.forLong(anyLong())).thenReturn(\"5\");\n        when(mock.forFloat(anyFloat())).thenReturn(\"6\");\n        when(mock.forDouble(anyDouble())).thenReturn(\"7\");\n        \n        try{ assertEquals(null, mock.forInteger(null));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forCharacter(null));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(null, mock.forShort(null));                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(null, mock.forByte(null));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forBoolean(null));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forLong(null));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forFloat(null));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forDouble(null));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "3": "    @Test\n    public void shouldNotAcceptNullInAllAnyPrimitiveWrapperMatchers$catena_3() {\n        when(mock.forInteger(anyInt())).thenReturn(\"0\");\n        when(mock.forCharacter(anyChar())).thenReturn(\"1\");\n        when(mock.forShort(anyShort())).thenReturn(\"2\");\n        when(mock.forByte(anyByte())).thenReturn(\"3\");\n        when(mock.forBoolean(anyBoolean())).thenReturn(\"4\");\n        when(mock.forLong(anyLong())).thenReturn(\"5\");\n        when(mock.forFloat(anyFloat())).thenReturn(\"6\");\n        when(mock.forDouble(anyDouble())).thenReturn(\"7\");\n        \n        try{ assertEquals(null, mock.forInteger(null));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forCharacter(null));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forShort(null));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(null, mock.forByte(null));                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(null, mock.forBoolean(null));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forLong(null));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forFloat(null));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forDouble(null));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "4": "    @Test\n    public void shouldNotAcceptNullInAllAnyPrimitiveWrapperMatchers$catena_4() {\n        when(mock.forInteger(anyInt())).thenReturn(\"0\");\n        when(mock.forCharacter(anyChar())).thenReturn(\"1\");\n        when(mock.forShort(anyShort())).thenReturn(\"2\");\n        when(mock.forByte(anyByte())).thenReturn(\"3\");\n        when(mock.forBoolean(anyBoolean())).thenReturn(\"4\");\n        when(mock.forLong(anyLong())).thenReturn(\"5\");\n        when(mock.forFloat(anyFloat())).thenReturn(\"6\");\n        when(mock.forDouble(anyDouble())).thenReturn(\"7\");\n        \n        try{ assertEquals(null, mock.forInteger(null));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forCharacter(null));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forShort(null));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forByte(null));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(null, mock.forBoolean(null));                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(null, mock.forLong(null));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forFloat(null));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forDouble(null));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "5": "    @Test\n    public void shouldNotAcceptNullInAllAnyPrimitiveWrapperMatchers$catena_5() {\n        when(mock.forInteger(anyInt())).thenReturn(\"0\");\n        when(mock.forCharacter(anyChar())).thenReturn(\"1\");\n        when(mock.forShort(anyShort())).thenReturn(\"2\");\n        when(mock.forByte(anyByte())).thenReturn(\"3\");\n        when(mock.forBoolean(anyBoolean())).thenReturn(\"4\");\n        when(mock.forLong(anyLong())).thenReturn(\"5\");\n        when(mock.forFloat(anyFloat())).thenReturn(\"6\");\n        when(mock.forDouble(anyDouble())).thenReturn(\"7\");\n        \n        try{ assertEquals(null, mock.forInteger(null));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forCharacter(null));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forShort(null));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forByte(null));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forBoolean(null));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(null, mock.forLong(null));                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(null, mock.forFloat(null));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forDouble(null));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "6": "    @Test\n    public void shouldNotAcceptNullInAllAnyPrimitiveWrapperMatchers$catena_6() {\n        when(mock.forInteger(anyInt())).thenReturn(\"0\");\n        when(mock.forCharacter(anyChar())).thenReturn(\"1\");\n        when(mock.forShort(anyShort())).thenReturn(\"2\");\n        when(mock.forByte(anyByte())).thenReturn(\"3\");\n        when(mock.forBoolean(anyBoolean())).thenReturn(\"4\");\n        when(mock.forLong(anyLong())).thenReturn(\"5\");\n        when(mock.forFloat(anyFloat())).thenReturn(\"6\");\n        when(mock.forDouble(anyDouble())).thenReturn(\"7\");\n        \n        try{ assertEquals(null, mock.forInteger(null));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forCharacter(null));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forShort(null));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forByte(null));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forBoolean(null));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forLong(null));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(null, mock.forFloat(null));                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(null, mock.forDouble(null));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "7": "    @Test\n    public void shouldNotAcceptNullInAllAnyPrimitiveWrapperMatchers$catena_7() {\n        when(mock.forInteger(anyInt())).thenReturn(\"0\");\n        when(mock.forCharacter(anyChar())).thenReturn(\"1\");\n        when(mock.forShort(anyShort())).thenReturn(\"2\");\n        when(mock.forByte(anyByte())).thenReturn(\"3\");\n        when(mock.forBoolean(anyBoolean())).thenReturn(\"4\");\n        when(mock.forLong(anyLong())).thenReturn(\"5\");\n        when(mock.forFloat(anyFloat())).thenReturn(\"6\");\n        when(mock.forDouble(anyDouble())).thenReturn(\"7\");\n        \n        try{ assertEquals(null, mock.forInteger(null));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forCharacter(null));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forShort(null));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forByte(null));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forBoolean(null));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forLong(null));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forFloat(null));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(null, mock.forDouble(null));                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest::shouldNotAcceptNullInAnyXMatchers": {
            "file_path": "test/org/mockitousage/matchers/AnyXMatchersAcceptNullsTest.java",
            "Instance": "Begin: Pos(26, 5)\nEnd: Pos(41, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Mockito_6/test//org/mockitousage/matchers/AnyXMatchersAcceptNullsTest.java\nName: shouldNotAcceptNullInAnyXMatchers\nChilds: [StatementAssertion<Begin: Pos(35, 9), End: Pos(35, 55)>,\nStatementAssertion<Begin: Pos(36, 9), End: Pos(36, 55)>,\nStatementAssertion<Begin: Pos(37, 9), End: Pos(37, 47)>,\nStatementAssertion<Begin: Pos(38, 9), End: Pos(38, 46)>,\nStatementAssertion<Begin: Pos(39, 9), End: Pos(39, 53)>,\nStatementAssertion<Begin: Pos(40, 9), End: Pos(40, 46)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Mockito_6/test//org/mockitousage/matchers/AnyXMatchersAcceptNullsTest.java",
            "name": "shouldNotAcceptNullInAnyXMatchers",
            "begin": "Pos(26, 5)",
            "end": "Pos(41, 5)",
            "begin_line_no": 26,
            "end_line_no": 41,
            "child": [
                "Begin: Pos(35, 9)\nEnd: Pos(35, 55)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(36, 9)\nEnd: Pos(36, 55)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(37, 9)\nEnd: Pos(37, 47)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(38, 9)\nEnd: Pos(38, 46)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(39, 9)\nEnd: Pos(39, 53)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(40, 9)\nEnd: Pos(40, 46)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    @Test\n    public void shouldNotAcceptNullInAnyXMatchers$catena_0() {\n        when(mock.oneArg(anyObject())).thenReturn(\"0\");\n        when(mock.oneArg(anyString())).thenReturn(\"1\");\n        when(mock.forList(anyList())).thenReturn(\"2\");\n        when(mock.forMap(anyMap())).thenReturn(\"3\");\n        when(mock.forCollection(anyCollection())).thenReturn(\"4\");\n        when(mock.forSet(anySet())).thenReturn(\"5\");\n        \n        assertEquals(null, mock.oneArg((Object) null));                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(null, mock.oneArg((String) null));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forList(null));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forMap(null));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forCollection(null));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forSet(null));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void shouldNotAcceptNullInAnyXMatchers$catena_1() {\n        when(mock.oneArg(anyObject())).thenReturn(\"0\");\n        when(mock.oneArg(anyString())).thenReturn(\"1\");\n        when(mock.forList(anyList())).thenReturn(\"2\");\n        when(mock.forMap(anyMap())).thenReturn(\"3\");\n        when(mock.forCollection(anyCollection())).thenReturn(\"4\");\n        when(mock.forSet(anySet())).thenReturn(\"5\");\n        \n        try{ assertEquals(null, mock.oneArg((Object) null));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(null, mock.oneArg((String) null));                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(null, mock.forList(null));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forMap(null));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forCollection(null));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forSet(null));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void shouldNotAcceptNullInAnyXMatchers$catena_2() {\n        when(mock.oneArg(anyObject())).thenReturn(\"0\");\n        when(mock.oneArg(anyString())).thenReturn(\"1\");\n        when(mock.forList(anyList())).thenReturn(\"2\");\n        when(mock.forMap(anyMap())).thenReturn(\"3\");\n        when(mock.forCollection(anyCollection())).thenReturn(\"4\");\n        when(mock.forSet(anySet())).thenReturn(\"5\");\n        \n        try{ assertEquals(null, mock.oneArg((Object) null));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.oneArg((String) null));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(null, mock.forList(null));                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(null, mock.forMap(null));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forCollection(null));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forSet(null));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void shouldNotAcceptNullInAnyXMatchers$catena_3() {\n        when(mock.oneArg(anyObject())).thenReturn(\"0\");\n        when(mock.oneArg(anyString())).thenReturn(\"1\");\n        when(mock.forList(anyList())).thenReturn(\"2\");\n        when(mock.forMap(anyMap())).thenReturn(\"3\");\n        when(mock.forCollection(anyCollection())).thenReturn(\"4\");\n        when(mock.forSet(anySet())).thenReturn(\"5\");\n        \n        try{ assertEquals(null, mock.oneArg((Object) null));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.oneArg((String) null));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forList(null));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(null, mock.forMap(null));                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(null, mock.forCollection(null));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forSet(null));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void shouldNotAcceptNullInAnyXMatchers$catena_4() {\n        when(mock.oneArg(anyObject())).thenReturn(\"0\");\n        when(mock.oneArg(anyString())).thenReturn(\"1\");\n        when(mock.forList(anyList())).thenReturn(\"2\");\n        when(mock.forMap(anyMap())).thenReturn(\"3\");\n        when(mock.forCollection(anyCollection())).thenReturn(\"4\");\n        when(mock.forSet(anySet())).thenReturn(\"5\");\n        \n        try{ assertEquals(null, mock.oneArg((Object) null));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.oneArg((String) null));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forList(null));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forMap(null));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(null, mock.forCollection(null));                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(null, mock.forSet(null));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void shouldNotAcceptNullInAnyXMatchers$catena_5() {\n        when(mock.oneArg(anyObject())).thenReturn(\"0\");\n        when(mock.oneArg(anyString())).thenReturn(\"1\");\n        when(mock.forList(anyList())).thenReturn(\"2\");\n        when(mock.forMap(anyMap())).thenReturn(\"3\");\n        when(mock.forCollection(anyCollection())).thenReturn(\"4\");\n        when(mock.forSet(anySet())).thenReturn(\"5\");\n        \n        try{ assertEquals(null, mock.oneArg((Object) null));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.oneArg((String) null));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forList(null));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forMap(null));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forCollection(null));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(null, mock.forSet(null));                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    @Test\n    public void shouldNotAcceptNullInAnyXMatchers$catena_0() {\n        when(mock.oneArg(anyObject())).thenReturn(\"0\");\n        when(mock.oneArg(anyString())).thenReturn(\"1\");\n        when(mock.forList(anyList())).thenReturn(\"2\");\n        when(mock.forMap(anyMap())).thenReturn(\"3\");\n        when(mock.forCollection(anyCollection())).thenReturn(\"4\");\n        when(mock.forSet(anySet())).thenReturn(\"5\");\n        \n        assertEquals(null, mock.oneArg((Object) null));                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(null, mock.oneArg((String) null));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forList(null));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forMap(null));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forCollection(null));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forSet(null));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    @Test\n    public void shouldNotAcceptNullInAnyXMatchers$catena_1() {\n        when(mock.oneArg(anyObject())).thenReturn(\"0\");\n        when(mock.oneArg(anyString())).thenReturn(\"1\");\n        when(mock.forList(anyList())).thenReturn(\"2\");\n        when(mock.forMap(anyMap())).thenReturn(\"3\");\n        when(mock.forCollection(anyCollection())).thenReturn(\"4\");\n        when(mock.forSet(anySet())).thenReturn(\"5\");\n        \n        try{ assertEquals(null, mock.oneArg((Object) null));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(null, mock.oneArg((String) null));                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(null, mock.forList(null));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forMap(null));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forCollection(null));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forSet(null));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "2": "    @Test\n    public void shouldNotAcceptNullInAnyXMatchers$catena_2() {\n        when(mock.oneArg(anyObject())).thenReturn(\"0\");\n        when(mock.oneArg(anyString())).thenReturn(\"1\");\n        when(mock.forList(anyList())).thenReturn(\"2\");\n        when(mock.forMap(anyMap())).thenReturn(\"3\");\n        when(mock.forCollection(anyCollection())).thenReturn(\"4\");\n        when(mock.forSet(anySet())).thenReturn(\"5\");\n        \n        try{ assertEquals(null, mock.oneArg((Object) null));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.oneArg((String) null));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(null, mock.forList(null));                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(null, mock.forMap(null));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forCollection(null));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forSet(null));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "3": "    @Test\n    public void shouldNotAcceptNullInAnyXMatchers$catena_3() {\n        when(mock.oneArg(anyObject())).thenReturn(\"0\");\n        when(mock.oneArg(anyString())).thenReturn(\"1\");\n        when(mock.forList(anyList())).thenReturn(\"2\");\n        when(mock.forMap(anyMap())).thenReturn(\"3\");\n        when(mock.forCollection(anyCollection())).thenReturn(\"4\");\n        when(mock.forSet(anySet())).thenReturn(\"5\");\n        \n        try{ assertEquals(null, mock.oneArg((Object) null));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.oneArg((String) null));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forList(null));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(null, mock.forMap(null));                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(null, mock.forCollection(null));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forSet(null));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "4": "    @Test\n    public void shouldNotAcceptNullInAnyXMatchers$catena_4() {\n        when(mock.oneArg(anyObject())).thenReturn(\"0\");\n        when(mock.oneArg(anyString())).thenReturn(\"1\");\n        when(mock.forList(anyList())).thenReturn(\"2\");\n        when(mock.forMap(anyMap())).thenReturn(\"3\");\n        when(mock.forCollection(anyCollection())).thenReturn(\"4\");\n        when(mock.forSet(anySet())).thenReturn(\"5\");\n        \n        try{ assertEquals(null, mock.oneArg((Object) null));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.oneArg((String) null));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forList(null));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forMap(null));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(null, mock.forCollection(null));                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(null, mock.forSet(null));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "5": "    @Test\n    public void shouldNotAcceptNullInAnyXMatchers$catena_5() {\n        when(mock.oneArg(anyObject())).thenReturn(\"0\");\n        when(mock.oneArg(anyString())).thenReturn(\"1\");\n        when(mock.forList(anyList())).thenReturn(\"2\");\n        when(mock.forMap(anyMap())).thenReturn(\"3\");\n        when(mock.forCollection(anyCollection())).thenReturn(\"4\");\n        when(mock.forSet(anySet())).thenReturn(\"5\");\n        \n        try{ assertEquals(null, mock.oneArg((Object) null));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.oneArg((String) null));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forList(null));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forMap(null));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forCollection(null));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(null, mock.forSet(null));                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.mockitousage.matchers.MatchersTest::anyStringMatcher": {
            "file_path": "test/org/mockitousage/matchers/MatchersTest.java",
            "Instance": "Begin: Pos(226, 5)\nEnd: Pos(233, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Mockito_6/test//org/mockitousage/matchers/MatchersTest.java\nName: anyStringMatcher\nChilds: [StatementAssertion<Begin: Pos(230, 9), End: Pos(230, 49)>,\nStatementAssertion<Begin: Pos(231, 9), End: Pos(231, 59)>,\nStatementAssertion<Begin: Pos(232, 9), End: Pos(232, 55)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Mockito_6/test//org/mockitousage/matchers/MatchersTest.java",
            "name": "anyStringMatcher",
            "begin": "Pos(226, 5)",
            "end": "Pos(233, 5)",
            "begin_line_no": 226,
            "end_line_no": 233,
            "child": [
                "Begin: Pos(230, 9)\nEnd: Pos(230, 49)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(231, 9)\nEnd: Pos(231, 59)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(232, 9)\nEnd: Pos(232, 55)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    @Test\n    public void anyStringMatcher$catena_0() {\n        when(mock.oneArg(anyString())).thenReturn(\"matched\");\n        \n        assertEquals(\"matched\", mock.oneArg(\"\"));                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"matched\", mock.oneArg(\"any string\"));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.oneArg((String) null));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void anyStringMatcher$catena_1() {\n        when(mock.oneArg(anyString())).thenReturn(\"matched\");\n        \n        try{ assertEquals(\"matched\", mock.oneArg(\"\"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"matched\", mock.oneArg(\"any string\"));                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(null, mock.oneArg((String) null));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void anyStringMatcher$catena_2() {\n        when(mock.oneArg(anyString())).thenReturn(\"matched\");\n        \n        try{ assertEquals(\"matched\", mock.oneArg(\"\"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"matched\", mock.oneArg(\"any string\"));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(null, mock.oneArg((String) null));                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    @Test\n    public void anyStringMatcher$catena_0() {\n        when(mock.oneArg(anyString())).thenReturn(\"matched\");\n        \n        assertEquals(\"matched\", mock.oneArg(\"\"));                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"matched\", mock.oneArg(\"any string\"));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.oneArg((String) null));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    @Test\n    public void anyStringMatcher$catena_1() {\n        when(mock.oneArg(anyString())).thenReturn(\"matched\");\n        \n        try{ assertEquals(\"matched\", mock.oneArg(\"\"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"matched\", mock.oneArg(\"any string\"));                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(null, mock.oneArg((String) null));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "2": "    @Test\n    public void anyStringMatcher$catena_2() {\n        when(mock.oneArg(anyString())).thenReturn(\"matched\");\n        \n        try{ assertEquals(\"matched\", mock.oneArg(\"\"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"matched\", mock.oneArg(\"any string\"));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(null, mock.oneArg((String) null));                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.mockitousage.matchers.NewMatchersTest::shouldAllowAnyCollection": {
            "file_path": "test/org/mockitousage/matchers/NewMatchersTest.java",
            "Instance": "Begin: Pos(40, 5)\nEnd: Pos(48, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Mockito_6/test//org/mockitousage/matchers/NewMatchersTest.java\nName: shouldAllowAnyCollection\nChilds: [StatementAssertion<Begin: Pos(44, 9), End: Pos(44, 77)>,\nStatementAssertion<Begin: Pos(45, 9), End: Pos(45, 53)>,\nStatementAssertion<Begin: Pos(47, 9), End: Pos(47, 62)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Mockito_6/test//org/mockitousage/matchers/NewMatchersTest.java",
            "name": "shouldAllowAnyCollection",
            "begin": "Pos(40, 5)",
            "end": "Pos(48, 5)",
            "begin_line_no": 40,
            "end_line_no": 48,
            "child": [
                "Begin: Pos(44, 9)\nEnd: Pos(44, 77)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(45, 9)\nEnd: Pos(45, 53)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(47, 9)\nEnd: Pos(47, 62)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    @Test\n    public void shouldAllowAnyCollection$catena_0() {\n        when(mock.forCollection(anyCollection())).thenReturn(\"matched\");\n        \n        assertEquals(\"matched\", mock.forCollection(Arrays.asList(\"x\", \"y\")));                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(null, mock.forCollection(null));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ verify(mock, times(1)).forCollection(anyCollection());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void shouldAllowAnyCollection$catena_1() {\n        when(mock.forCollection(anyCollection())).thenReturn(\"matched\");\n        \n        try{ assertEquals(\"matched\", mock.forCollection(Arrays.asList(\"x\", \"y\")));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(null, mock.forCollection(null));                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ verify(mock, times(1)).forCollection(anyCollection());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void shouldAllowAnyCollection$catena_2() {\n        when(mock.forCollection(anyCollection())).thenReturn(\"matched\");\n        \n        try{ assertEquals(\"matched\", mock.forCollection(Arrays.asList(\"x\", \"y\")));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forCollection(null));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        verify(mock, times(1)).forCollection(anyCollection());                                              /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    @Test\n    public void shouldAllowAnyCollection$catena_0() {\n        when(mock.forCollection(anyCollection())).thenReturn(\"matched\");\n        \n        assertEquals(\"matched\", mock.forCollection(Arrays.asList(\"x\", \"y\")));                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(null, mock.forCollection(null));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ verify(mock, times(1)).forCollection(anyCollection());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    @Test\n    public void shouldAllowAnyCollection$catena_1() {\n        when(mock.forCollection(anyCollection())).thenReturn(\"matched\");\n        \n        try{ assertEquals(\"matched\", mock.forCollection(Arrays.asList(\"x\", \"y\")));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(null, mock.forCollection(null));                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ verify(mock, times(1)).forCollection(anyCollection());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "2": "    @Test\n    public void shouldAllowAnyCollection$catena_2() {\n        when(mock.forCollection(anyCollection())).thenReturn(\"matched\");\n        \n        try{ assertEquals(\"matched\", mock.forCollection(Arrays.asList(\"x\", \"y\")));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forCollection(null));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        verify(mock, times(1)).forCollection(anyCollection());                                              /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.mockitousage.matchers.NewMatchersTest::shouldAllowAnyList": {
            "file_path": "test/org/mockitousage/matchers/NewMatchersTest.java",
            "Instance": "Begin: Pos(30, 5)\nEnd: Pos(38, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Mockito_6/test//org/mockitousage/matchers/NewMatchersTest.java\nName: shouldAllowAnyList\nChilds: [StatementAssertion<Begin: Pos(34, 9), End: Pos(34, 71)>,\nStatementAssertion<Begin: Pos(35, 9), End: Pos(35, 47)>,\nStatementAssertion<Begin: Pos(37, 9), End: Pos(37, 50)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Mockito_6/test//org/mockitousage/matchers/NewMatchersTest.java",
            "name": "shouldAllowAnyList",
            "begin": "Pos(30, 5)",
            "end": "Pos(38, 5)",
            "begin_line_no": 30,
            "end_line_no": 38,
            "child": [
                "Begin: Pos(34, 9)\nEnd: Pos(34, 71)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(35, 9)\nEnd: Pos(35, 47)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(37, 9)\nEnd: Pos(37, 50)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    @Test\n    public void shouldAllowAnyList$catena_0() {\n        when(mock.forList(anyList())).thenReturn(\"matched\");\n        \n        assertEquals(\"matched\", mock.forList(Arrays.asList(\"x\", \"y\")));                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(null, mock.forList(null));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ verify(mock, times(1)).forList(anyList());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void shouldAllowAnyList$catena_1() {\n        when(mock.forList(anyList())).thenReturn(\"matched\");\n        \n        try{ assertEquals(\"matched\", mock.forList(Arrays.asList(\"x\", \"y\")));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(null, mock.forList(null));                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ verify(mock, times(1)).forList(anyList());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void shouldAllowAnyList$catena_2() {\n        when(mock.forList(anyList())).thenReturn(\"matched\");\n        \n        try{ assertEquals(\"matched\", mock.forList(Arrays.asList(\"x\", \"y\")));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forList(null));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        verify(mock, times(1)).forList(anyList());                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    @Test\n    public void shouldAllowAnyList$catena_0() {\n        when(mock.forList(anyList())).thenReturn(\"matched\");\n        \n        assertEquals(\"matched\", mock.forList(Arrays.asList(\"x\", \"y\")));                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(null, mock.forList(null));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ verify(mock, times(1)).forList(anyList());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    @Test\n    public void shouldAllowAnyList$catena_1() {\n        when(mock.forList(anyList())).thenReturn(\"matched\");\n        \n        try{ assertEquals(\"matched\", mock.forList(Arrays.asList(\"x\", \"y\")));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(null, mock.forList(null));                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ verify(mock, times(1)).forList(anyList());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "2": "    @Test\n    public void shouldAllowAnyList$catena_2() {\n        when(mock.forList(anyList())).thenReturn(\"matched\");\n        \n        try{ assertEquals(\"matched\", mock.forList(Arrays.asList(\"x\", \"y\")));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forList(null));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        verify(mock, times(1)).forList(anyList());                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.mockitousage.matchers.NewMatchersTest::shouldAllowAnyMap": {
            "file_path": "test/org/mockitousage/matchers/NewMatchersTest.java",
            "Instance": "Begin: Pos(50, 5)\nEnd: Pos(58, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Mockito_6/test//org/mockitousage/matchers/NewMatchersTest.java\nName: shouldAllowAnyMap\nChilds: [StatementAssertion<Begin: Pos(54, 9), End: Pos(54, 76)>,\nStatementAssertion<Begin: Pos(55, 9), End: Pos(55, 46)>,\nStatementAssertion<Begin: Pos(57, 9), End: Pos(57, 48)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Mockito_6/test//org/mockitousage/matchers/NewMatchersTest.java",
            "name": "shouldAllowAnyMap",
            "begin": "Pos(50, 5)",
            "end": "Pos(58, 5)",
            "begin_line_no": 50,
            "end_line_no": 58,
            "child": [
                "Begin: Pos(54, 9)\nEnd: Pos(54, 76)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(55, 9)\nEnd: Pos(55, 46)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(57, 9)\nEnd: Pos(57, 48)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    @Test\n    public void shouldAllowAnyMap$catena_0() {\n        when(mock.forMap(anyMap())).thenReturn(\"matched\");\n        \n        assertEquals(\"matched\", mock.forMap(new HashMap<String, String>()));                                /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(null, mock.forMap(null));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ verify(mock, times(1)).forMap(anyMap());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void shouldAllowAnyMap$catena_1() {\n        when(mock.forMap(anyMap())).thenReturn(\"matched\");\n        \n        try{ assertEquals(\"matched\", mock.forMap(new HashMap<String, String>()));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(null, mock.forMap(null));                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ verify(mock, times(1)).forMap(anyMap());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void shouldAllowAnyMap$catena_2() {\n        when(mock.forMap(anyMap())).thenReturn(\"matched\");\n        \n        try{ assertEquals(\"matched\", mock.forMap(new HashMap<String, String>()));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forMap(null));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        verify(mock, times(1)).forMap(anyMap());                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    @Test\n    public void shouldAllowAnyMap$catena_0() {\n        when(mock.forMap(anyMap())).thenReturn(\"matched\");\n        \n        assertEquals(\"matched\", mock.forMap(new HashMap<String, String>()));                                /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(null, mock.forMap(null));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ verify(mock, times(1)).forMap(anyMap());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    @Test\n    public void shouldAllowAnyMap$catena_1() {\n        when(mock.forMap(anyMap())).thenReturn(\"matched\");\n        \n        try{ assertEquals(\"matched\", mock.forMap(new HashMap<String, String>()));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(null, mock.forMap(null));                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ verify(mock, times(1)).forMap(anyMap());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "2": "    @Test\n    public void shouldAllowAnyMap$catena_2() {\n        when(mock.forMap(anyMap())).thenReturn(\"matched\");\n        \n        try{ assertEquals(\"matched\", mock.forMap(new HashMap<String, String>()));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forMap(null));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        verify(mock, times(1)).forMap(anyMap());                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.mockitousage.matchers.NewMatchersTest::shouldAllowAnySet": {
            "file_path": "test/org/mockitousage/matchers/NewMatchersTest.java",
            "Instance": "Begin: Pos(60, 5)\nEnd: Pos(68, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Mockito_6/test//org/mockitousage/matchers/NewMatchersTest.java\nName: shouldAllowAnySet\nChilds: [StatementAssertion<Begin: Pos(64, 9), End: Pos(64, 68)>,\nStatementAssertion<Begin: Pos(65, 9), End: Pos(65, 46)>,\nStatementAssertion<Begin: Pos(67, 9), End: Pos(67, 48)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Mockito_6/test//org/mockitousage/matchers/NewMatchersTest.java",
            "name": "shouldAllowAnySet",
            "begin": "Pos(60, 5)",
            "end": "Pos(68, 5)",
            "begin_line_no": 60,
            "end_line_no": 68,
            "child": [
                "Begin: Pos(64, 9)\nEnd: Pos(64, 68)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(65, 9)\nEnd: Pos(65, 46)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(67, 9)\nEnd: Pos(67, 48)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    @Test\n    public void shouldAllowAnySet$catena_0() {\n        when(mock.forSet(anySet())).thenReturn(\"matched\");\n        \n        assertEquals(\"matched\", mock.forSet(new HashSet<String>()));                                        /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(null, mock.forSet(null));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ verify(mock, times(1)).forSet(anySet());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void shouldAllowAnySet$catena_1() {\n        when(mock.forSet(anySet())).thenReturn(\"matched\");\n        \n        try{ assertEquals(\"matched\", mock.forSet(new HashSet<String>()));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(null, mock.forSet(null));                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ verify(mock, times(1)).forSet(anySet());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void shouldAllowAnySet$catena_2() {\n        when(mock.forSet(anySet())).thenReturn(\"matched\");\n        \n        try{ assertEquals(\"matched\", mock.forSet(new HashSet<String>()));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forSet(null));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        verify(mock, times(1)).forSet(anySet());                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    @Test\n    public void shouldAllowAnySet$catena_0() {\n        when(mock.forSet(anySet())).thenReturn(\"matched\");\n        \n        assertEquals(\"matched\", mock.forSet(new HashSet<String>()));                                        /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(null, mock.forSet(null));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ verify(mock, times(1)).forSet(anySet());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    @Test\n    public void shouldAllowAnySet$catena_1() {\n        when(mock.forSet(anySet())).thenReturn(\"matched\");\n        \n        try{ assertEquals(\"matched\", mock.forSet(new HashSet<String>()));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(null, mock.forSet(null));                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ verify(mock, times(1)).forSet(anySet());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "2": "    @Test\n    public void shouldAllowAnySet$catena_2() {\n        when(mock.forSet(anySet())).thenReturn(\"matched\");\n        \n        try{ assertEquals(\"matched\", mock.forSet(new HashSet<String>()));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(null, mock.forSet(null));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        verify(mock, times(1)).forSet(anySet());                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        }
    },
    "10000000000000000000": {
        "failing_tests": [
            "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest::shouldNotAcceptNullInAllAnyPrimitiveWrapperMatchers$catena_4"
        ]
    },
    "01000000000000000000": {
        "failing_tests": [
            "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest::shouldNotAcceptNullInAllAnyPrimitiveWrapperMatchers$catena_3"
        ]
    },
    "00100000000000000000": {
        "failing_tests": [
            "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest::shouldNotAcceptNullInAllAnyPrimitiveWrapperMatchers$catena_1"
        ]
    },
    "00010000000000000000": {
        "failing_tests": [
            "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest::shouldNotAcceptNullInAllAnyPrimitiveWrapperMatchers$catena_0"
        ]
    },
    "00001000000000000000": {
        "failing_tests": [
            "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest::shouldNotAcceptNullInAllAnyPrimitiveWrapperMatchers$catena_5"
        ]
    },
    "00000100000000000000": {
        "failing_tests": [
            "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest::shouldNotAcceptNullInAllAnyPrimitiveWrapperMatchers$catena_6"
        ]
    },
    "00000010000000000000": {
        "failing_tests": [
            "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest::shouldNotAcceptNullInAllAnyPrimitiveWrapperMatchers$catena_7"
        ]
    },
    "00000001000000000000": {
        "failing_tests": [
            "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest::shouldNotAcceptNullInAllAnyPrimitiveWrapperMatchers$catena_2"
        ]
    },
    "00000000000100000000": {
        "failing_tests": [
            "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest::shouldNotAcceptNullInAnyXMatchers$catena_1",
            "org.mockitousage.matchers.MatchersTest::anyStringMatcher$catena_2"
        ]
    },
    "00000000000010000000": {
        "failing_tests": [
            "org.mockitousage.matchers.NewMatchersTest::shouldAllowAnyList$catena_1",
            "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest::shouldNotAcceptNullInAnyXMatchers$catena_2",
            "org.mockitousage.matchers.NewMatchersTest::shouldAllowAnyList$catena_2"
        ]
    },
    "00000000000000100000": {
        "failing_tests": [
            "org.mockitousage.matchers.NewMatchersTest::shouldAllowAnySet$catena_1",
            "org.mockitousage.matchers.NewMatchersTest::shouldAllowAnySet$catena_2",
            "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest::shouldNotAcceptNullInAnyXMatchers$catena_5"
        ]
    },
    "00000000000000001000": {
        "failing_tests": [
            "org.mockitousage.matchers.NewMatchersTest::shouldAllowAnyMap$catena_2",
            "org.mockitousage.matchers.NewMatchersTest::shouldAllowAnyMap$catena_1",
            "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest::shouldNotAcceptNullInAnyXMatchers$catena_3"
        ]
    },
    "00000000000000000010": {
        "failing_tests": [
            "org.mockitousage.matchers.NewMatchersTest::shouldAllowAnyCollection$catena_1",
            "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest::shouldNotAcceptNullInAnyXMatchers$catena_4",
            "org.mockitousage.matchers.NewMatchersTest::shouldAllowAnyCollection$catena_2"
        ]
    }
}