---
Begin generate bug_id: Time_9
num_of_hunks: 6
timeout for running: 3600
use working dir: ./working/data/Time_9
Try to checkout Time_9
build dir: ['./working/data/Time_9/target/classes', './working/data/Time_9/target/test-classes']
init FileManager
trace file: src/main/java/org/joda/time/DateTimeZone.java
trying to replace old failing tests
edit: replace from 303 range 32 at src/test/java/org/joda/time/TestDateTimeZone.java
to
    public void testForOffsetHoursMinutes_int_int$catena_0() {
        assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                           /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(DateTimeZone.forID("+23:59"), DateTimeZone.forOffsetHoursMinutes(23, 59));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(DateTimeZone.forID("+03:15"), DateTimeZone.forOffsetHoursMinutes(3, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(DateTimeZone.forID("-02:00"), DateTimeZone.forOffsetHoursMinutes(-2, 0));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(DateTimeZone.forID("-02:30"), DateTimeZone.forOffsetHoursMinutes(-2, 30));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(DateTimeZone.forID("-23:59"), DateTimeZone.forOffsetHoursMinutes(-23, 59));       }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            DateTimeZone.forOffsetHoursMinutes(2, 60);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            DateTimeZone.forOffsetHoursMinutes(-2, 60);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            DateTimeZone.forOffsetHoursMinutes(2, -1);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            DateTimeZone.forOffsetHoursMinutes(-2, -1);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            DateTimeZone.forOffsetHoursMinutes(24, 0);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            DateTimeZone.forOffsetHoursMinutes(-24, 0);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
    }             public void testForOffsetHoursMinutes_int_int$catena_1() {
        try{ assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(DateTimeZone.forID("+23:59"), DateTimeZone.forOffsetHoursMinutes(23, 59));             /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(DateTimeZone.forID("+03:15"), DateTimeZone.forOffsetHoursMinutes(3, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(DateTimeZone.forID("-02:00"), DateTimeZone.forOffsetHoursMinutes(-2, 0));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(DateTimeZone.forID("-02:30"), DateTimeZone.forOffsetHoursMinutes(-2, 30));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(DateTimeZone.forID("-23:59"), DateTimeZone.forOffsetHoursMinutes(-23, 59));       }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            DateTimeZone.forOffsetHoursMinutes(2, 60);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            DateTimeZone.forOffsetHoursMinutes(-2, 60);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            DateTimeZone.forOffsetHoursMinutes(2, -1);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            DateTimeZone.forOffsetHoursMinutes(-2, -1);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            DateTimeZone.forOffsetHoursMinutes(24, 0);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            DateTimeZone.forOffsetHoursMinutes(-24, 0);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
    }             public void testForOffsetHoursMinutes_int_int$catena_2() {
        try{ assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(DateTimeZone.forID("+23:59"), DateTimeZone.forOffsetHoursMinutes(23, 59));        }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(DateTimeZone.forID("+03:15"), DateTimeZone.forOffsetHoursMinutes(3, 15));              /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(DateTimeZone.forID("-02:00"), DateTimeZone.forOffsetHoursMinutes(-2, 0));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(DateTimeZone.forID("-02:30"), DateTimeZone.forOffsetHoursMinutes(-2, 30));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(DateTimeZone.forID("-23:59"), DateTimeZone.forOffsetHoursMinutes(-23, 59));       }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            DateTimeZone.forOffsetHoursMinutes(2, 60);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            DateTimeZone.forOffsetHoursMinutes(-2, 60);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            DateTimeZone.forOffsetHoursMinutes(2, -1);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            DateTimeZone.forOffsetHoursMinutes(-2, -1);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            DateTimeZone.forOffsetHoursMinutes(24, 0);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            DateTimeZone.forOffsetHoursMinutes(-24, 0);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
    }             public void testForOffsetHoursMinutes_int_int$catena_3() {
        try{ assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(DateTimeZone.forID("+23:59"), DateTimeZone.forOffsetHoursMinutes(23, 59));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(DateTimeZone.forID("+03:15"), DateTimeZone.forOffsetHoursMinutes(3, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(DateTimeZone.forID("-02:00"), DateTimeZone.forOffsetHoursMinutes(-2, 0));              /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(DateTimeZone.forID("-02:30"), DateTimeZone.forOffsetHoursMinutes(-2, 30));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(DateTimeZone.forID("-23:59"), DateTimeZone.forOffsetHoursMinutes(-23, 59));       }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            DateTimeZone.forOffsetHoursMinutes(2, 60);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            DateTimeZone.forOffsetHoursMinutes(-2, 60);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            DateTimeZone.forOffsetHoursMinutes(2, -1);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            DateTimeZone.forOffsetHoursMinutes(-2, -1);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            DateTimeZone.forOffsetHoursMinutes(24, 0);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            DateTimeZone.forOffsetHoursMinutes(-24, 0);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
    }             public void testForOffsetHoursMinutes_int_int$catena_4() {
        try{ assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(DateTimeZone.forID("+23:59"), DateTimeZone.forOffsetHoursMinutes(23, 59));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(DateTimeZone.forID("+03:15"), DateTimeZone.forOffsetHoursMinutes(3, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(DateTimeZone.forID("-02:00"), DateTimeZone.forOffsetHoursMinutes(-2, 0));         }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(DateTimeZone.forID("-02:30"), DateTimeZone.forOffsetHoursMinutes(-2, 30));             /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(DateTimeZone.forID("-23:59"), DateTimeZone.forOffsetHoursMinutes(-23, 59));       }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            DateTimeZone.forOffsetHoursMinutes(2, 60);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            DateTimeZone.forOffsetHoursMinutes(-2, 60);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            DateTimeZone.forOffsetHoursMinutes(2, -1);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            DateTimeZone.forOffsetHoursMinutes(-2, -1);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            DateTimeZone.forOffsetHoursMinutes(24, 0);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            DateTimeZone.forOffsetHoursMinutes(-24, 0);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
    }             public void testForOffsetHoursMinutes_int_int$catena_5() {
        try{ assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(DateTimeZone.forID("+23:59"), DateTimeZone.forOffsetHoursMinutes(23, 59));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(DateTimeZone.forID("+03:15"), DateTimeZone.forOffsetHoursMinutes(3, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(DateTimeZone.forID("-02:00"), DateTimeZone.forOffsetHoursMinutes(-2, 0));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(DateTimeZone.forID("-02:30"), DateTimeZone.forOffsetHoursMinutes(-2, 30));        }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(DateTimeZone.forID("-23:59"), DateTimeZone.forOffsetHoursMinutes(-23, 59));            /***** ORIGINAL ASSERTION IS HERE *****/
        try {
            DateTimeZone.forOffsetHoursMinutes(2, 60);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            DateTimeZone.forOffsetHoursMinutes(-2, 60);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            DateTimeZone.forOffsetHoursMinutes(2, -1);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            DateTimeZone.forOffsetHoursMinutes(-2, -1);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            DateTimeZone.forOffsetHoursMinutes(24, 0);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            DateTimeZone.forOffsetHoursMinutes(-24, 0);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
    }             public void testForOffsetHoursMinutes_int_int$catena_6() {
        try{ assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(DateTimeZone.forID("+23:59"), DateTimeZone.forOffsetHoursMinutes(23, 59));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(DateTimeZone.forID("+03:15"), DateTimeZone.forOffsetHoursMinutes(3, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(DateTimeZone.forID("-02:00"), DateTimeZone.forOffsetHoursMinutes(-2, 0));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(DateTimeZone.forID("-02:30"), DateTimeZone.forOffsetHoursMinutes(-2, 30));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(DateTimeZone.forID("-23:59"), DateTimeZone.forOffsetHoursMinutes(-23, 59));       }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            DateTimeZone.forOffsetHoursMinutes(2, 60);
            fail();                                                                                         /***** ORIGINAL ASSERTION IS HERE *****/
        } catch (IllegalArgumentException ex) {}
        try {
            DateTimeZone.forOffsetHoursMinutes(-2, 60);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            DateTimeZone.forOffsetHoursMinutes(2, -1);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            DateTimeZone.forOffsetHoursMinutes(-2, -1);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            DateTimeZone.forOffsetHoursMinutes(24, 0);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            DateTimeZone.forOffsetHoursMinutes(-24, 0);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
    }             public void testForOffsetHoursMinutes_int_int$catena_7() {
        try{ assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(DateTimeZone.forID("+23:59"), DateTimeZone.forOffsetHoursMinutes(23, 59));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(DateTimeZone.forID("+03:15"), DateTimeZone.forOffsetHoursMinutes(3, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(DateTimeZone.forID("-02:00"), DateTimeZone.forOffsetHoursMinutes(-2, 0));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(DateTimeZone.forID("-02:30"), DateTimeZone.forOffsetHoursMinutes(-2, 30));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(DateTimeZone.forID("-23:59"), DateTimeZone.forOffsetHoursMinutes(-23, 59));       }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            DateTimeZone.forOffsetHoursMinutes(2, 60);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            DateTimeZone.forOffsetHoursMinutes(-2, 60);
            fail();                                                                                         /***** ORIGINAL ASSERTION IS HERE *****/
        } catch (IllegalArgumentException ex) {}
        try {
            DateTimeZone.forOffsetHoursMinutes(2, -1);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            DateTimeZone.forOffsetHoursMinutes(-2, -1);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            DateTimeZone.forOffsetHoursMinutes(24, 0);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            DateTimeZone.forOffsetHoursMinutes(-24, 0);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
    }             public void testForOffsetHoursMinutes_int_int$catena_8() {
        try{ assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(DateTimeZone.forID("+23:59"), DateTimeZone.forOffsetHoursMinutes(23, 59));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(DateTimeZone.forID("+03:15"), DateTimeZone.forOffsetHoursMinutes(3, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(DateTimeZone.forID("-02:00"), DateTimeZone.forOffsetHoursMinutes(-2, 0));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(DateTimeZone.forID("-02:30"), DateTimeZone.forOffsetHoursMinutes(-2, 30));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(DateTimeZone.forID("-23:59"), DateTimeZone.forOffsetHoursMinutes(-23, 59));       }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            DateTimeZone.forOffsetHoursMinutes(2, 60);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            DateTimeZone.forOffsetHoursMinutes(-2, 60);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            DateTimeZone.forOffsetHoursMinutes(2, -1);
            fail();                                                                                         /***** ORIGINAL ASSERTION IS HERE *****/
        } catch (IllegalArgumentException ex) {}
        try {
            DateTimeZone.forOffsetHoursMinutes(-2, -1);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            DateTimeZone.forOffsetHoursMinutes(24, 0);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            DateTimeZone.forOffsetHoursMinutes(-24, 0);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
    }             public void testForOffsetHoursMinutes_int_int$catena_9() {
        try{ assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(DateTimeZone.forID("+23:59"), DateTimeZone.forOffsetHoursMinutes(23, 59));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(DateTimeZone.forID("+03:15"), DateTimeZone.forOffsetHoursMinutes(3, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(DateTimeZone.forID("-02:00"), DateTimeZone.forOffsetHoursMinutes(-2, 0));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(DateTimeZone.forID("-02:30"), DateTimeZone.forOffsetHoursMinutes(-2, 30));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(DateTimeZone.forID("-23:59"), DateTimeZone.forOffsetHoursMinutes(-23, 59));       }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            DateTimeZone.forOffsetHoursMinutes(2, 60);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            DateTimeZone.forOffsetHoursMinutes(-2, 60);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            DateTimeZone.forOffsetHoursMinutes(2, -1);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            DateTimeZone.forOffsetHoursMinutes(-2, -1);
            fail();                                                                                         /***** ORIGINAL ASSERTION IS HERE *****/
        } catch (IllegalArgumentException ex) {}
        try {
            DateTimeZone.forOffsetHoursMinutes(24, 0);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            DateTimeZone.forOffsetHoursMinutes(-24, 0);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
    }             public void testForOffsetHoursMinutes_int_int$catena_10() {
        try{ assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(DateTimeZone.forID("+23:59"), DateTimeZone.forOffsetHoursMinutes(23, 59));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(DateTimeZone.forID("+03:15"), DateTimeZone.forOffsetHoursMinutes(3, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(DateTimeZone.forID("-02:00"), DateTimeZone.forOffsetHoursMinutes(-2, 0));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(DateTimeZone.forID("-02:30"), DateTimeZone.forOffsetHoursMinutes(-2, 30));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(DateTimeZone.forID("-23:59"), DateTimeZone.forOffsetHoursMinutes(-23, 59));       }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            DateTimeZone.forOffsetHoursMinutes(2, 60);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            DateTimeZone.forOffsetHoursMinutes(-2, 60);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            DateTimeZone.forOffsetHoursMinutes(2, -1);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            DateTimeZone.forOffsetHoursMinutes(-2, -1);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            DateTimeZone.forOffsetHoursMinutes(24, 0);
            fail();                                                                                         /***** ORIGINAL ASSERTION IS HERE *****/
        } catch (IllegalArgumentException ex) {}
        try {
            DateTimeZone.forOffsetHoursMinutes(-24, 0);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
    }             public void testForOffsetHoursMinutes_int_int$catena_11() {
        try{ assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(DateTimeZone.forID("+23:59"), DateTimeZone.forOffsetHoursMinutes(23, 59));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(DateTimeZone.forID("+03:15"), DateTimeZone.forOffsetHoursMinutes(3, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(DateTimeZone.forID("-02:00"), DateTimeZone.forOffsetHoursMinutes(-2, 0));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(DateTimeZone.forID("-02:30"), DateTimeZone.forOffsetHoursMinutes(-2, 30));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(DateTimeZone.forID("-23:59"), DateTimeZone.forOffsetHoursMinutes(-23, 59));       }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            DateTimeZone.forOffsetHoursMinutes(2, 60);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            DateTimeZone.forOffsetHoursMinutes(-2, 60);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            DateTimeZone.forOffsetHoursMinutes(2, -1);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            DateTimeZone.forOffsetHoursMinutes(-2, -1);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            DateTimeZone.forOffsetHoursMinutes(24, 0);
            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (IllegalArgumentException ex) {}
        try {
            DateTimeZone.forOffsetHoursMinutes(-24, 0);
            fail();                                                                                         /***** ORIGINAL ASSERTION IS HERE *****/
        } catch (IllegalArgumentException ex) {}
    }        
trace file: src/test/java/org/joda/time/TestDateTimeZone.java
new test num: 12
ori test num: 0
pattern: 000000
patches are written to file
running tests...
used time: Finished in 54.32 seconds
Failing tests: 2
	org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int$catena_10
	org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int$catena_11
processed: 000000
pattern: 000001
try to fix hunk: 5
insert before 282 with         if (millisOffset < -MAX_MILLIS || millisOffset > MAX_MILLIS) {
            throw new IllegalArgumentException("Millis out of range: " + millisOffset);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000001
pattern: 000010
try to fix hunk: 4
replace from 266 with range 1 to
                minutesOffset = hoursInMinutes + minutesOffset;

patches are written to file
running tests...
used time: Finished in 39.78 seconds
Failing tests: 2
	org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int$catena_10
	org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int$catena_11
No new failing tests but only 1 hunk
processed: 000010
pattern: 000100
try to fix hunk: 3
replace from 264 with range 1 to
                minutesOffset = hoursInMinutes - minutesOffset;

patches are written to file
running tests...
used time: Finished in 33.68 seconds
Failing tests: 2
	org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int$catena_10
	org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int$catena_11
No new failing tests but only 1 hunk
processed: 000100
pattern: 001000
try to fix hunk: 2
replace from 262 with range 1 to
            int hoursInMinutes = hoursOffset * 60;

patches are written to file
running tests...
used time: Finished in 35.45 seconds
Failing tests: 2
	org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int$catena_10
	org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int$catena_11
No new failing tests but only 1 hunk
processed: 001000
pattern: 010000
try to fix hunk: 1
insert before 257 with         if (hoursOffset < -23 || hoursOffset > 23) {
            throw new IllegalArgumentException("Hours out of range: " + hoursOffset);
        }

patches are written to file
running tests...
used time: Finished in 34.55 seconds
Failing tests: 0
select new bug
Pattern: 010000
new failing tests:
org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int$catena_10
org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int$catena_11
Save found bug
processed: 010000
pattern: 100000
try to fix hunk: 0
insert before 96 with     private static final int MAX_MILLIS = (86400 * 1000) - 1;

patches are written to file
running tests...
used time: Finished in 32.23 seconds
Failing tests: 2
	org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int$catena_10
	org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int$catena_11
No new failing tests but only 1 hunk
processed: 100000
pattern: 000011
try to fix hunk: 4
replace from 266 with range 1 to
                minutesOffset = hoursInMinutes + minutesOffset;

try to fix hunk: 5
insert before 282 with         if (millisOffset < -MAX_MILLIS || millisOffset > MAX_MILLIS) {
            throw new IllegalArgumentException("Millis out of range: " + millisOffset);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000011
pattern: 000101
try to fix hunk: 3
replace from 264 with range 1 to
                minutesOffset = hoursInMinutes - minutesOffset;

try to fix hunk: 5
insert before 282 with         if (millisOffset < -MAX_MILLIS || millisOffset > MAX_MILLIS) {
            throw new IllegalArgumentException("Millis out of range: " + millisOffset);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000101
pattern: 000110
try to fix hunk: 3
replace from 264 with range 1 to
                minutesOffset = hoursInMinutes - minutesOffset;

try to fix hunk: 4
replace from 266 with range 1 to
                minutesOffset = hoursInMinutes + minutesOffset;

patches are written to file
running tests...
used time: Finished in 36.67 seconds
Failing tests: 2
	org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int$catena_10
	org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int$catena_11
Can independently fix []
Could not fix independently
processed: 000110
pattern: 001001
try to fix hunk: 2
replace from 262 with range 1 to
            int hoursInMinutes = hoursOffset * 60;

try to fix hunk: 5
insert before 282 with         if (millisOffset < -MAX_MILLIS || millisOffset > MAX_MILLIS) {
            throw new IllegalArgumentException("Millis out of range: " + millisOffset);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001001
pattern: 001010
try to fix hunk: 2
replace from 262 with range 1 to
            int hoursInMinutes = hoursOffset * 60;

try to fix hunk: 4
replace from 266 with range 1 to
                minutesOffset = hoursInMinutes + minutesOffset;

patches are written to file
running tests...
used time: Finished in 32.85 seconds
Failing tests: 2
	org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int$catena_10
	org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int$catena_11
Can independently fix []
Could not fix independently
processed: 001010
pattern: 001100
try to fix hunk: 2
replace from 262 with range 1 to
            int hoursInMinutes = hoursOffset * 60;

try to fix hunk: 3
replace from 264 with range 1 to
                minutesOffset = hoursInMinutes - minutesOffset;

patches are written to file
running tests...
used time: Finished in 36.15 seconds
Failing tests: 2
	org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int$catena_10
	org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int$catena_11
Can independently fix []
Could not fix independently
processed: 001100
pattern: 010001
try to fix hunk: 1
insert before 257 with         if (hoursOffset < -23 || hoursOffset > 23) {
            throw new IllegalArgumentException("Hours out of range: " + hoursOffset);
        }

try to fix hunk: 5
insert before 282 with         if (millisOffset < -MAX_MILLIS || millisOffset > MAX_MILLIS) {
            throw new IllegalArgumentException("Millis out of range: " + millisOffset);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010001
pattern: 010010
try to fix hunk: 1
insert before 257 with         if (hoursOffset < -23 || hoursOffset > 23) {
            throw new IllegalArgumentException("Hours out of range: " + hoursOffset);
        }

try to fix hunk: 4
replace from 266 with range 1 to
                minutesOffset = hoursInMinutes + minutesOffset;

patches are written to file
running tests...
used time: Finished in 32.52 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 010010
pattern: 010100
try to fix hunk: 1
insert before 257 with         if (hoursOffset < -23 || hoursOffset > 23) {
            throw new IllegalArgumentException("Hours out of range: " + hoursOffset);
        }

try to fix hunk: 3
replace from 264 with range 1 to
                minutesOffset = hoursInMinutes - minutesOffset;

patches are written to file
running tests...
used time: Finished in 38.67 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 010100
pattern: 011000
try to fix hunk: 1
insert before 257 with         if (hoursOffset < -23 || hoursOffset > 23) {
            throw new IllegalArgumentException("Hours out of range: " + hoursOffset);
        }

try to fix hunk: 2
replace from 262 with range 1 to
            int hoursInMinutes = hoursOffset * 60;

patches are written to file
running tests...
used time: Finished in 39.71 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 011000
pattern: 100001
try to fix hunk: 0
insert before 96 with     private static final int MAX_MILLIS = (86400 * 1000) - 1;

try to fix hunk: 5
insert before 282 with         if (millisOffset < -MAX_MILLIS || millisOffset > MAX_MILLIS) {
            throw new IllegalArgumentException("Millis out of range: " + millisOffset);
        }

patches are written to file
running tests...
used time: Finished in 34.78 seconds
Failing tests: 0
Can independently fix ['org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int$catena_10', 'org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int$catena_11']
select new bug
Pattern: 100001
new failing tests:
org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int$catena_10
org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int$catena_11
Save found bug
processed: 100001
pattern: 100010
try to fix hunk: 0
insert before 96 with     private static final int MAX_MILLIS = (86400 * 1000) - 1;

try to fix hunk: 4
replace from 266 with range 1 to
                minutesOffset = hoursInMinutes + minutesOffset;

patches are written to file
running tests...
used time: Finished in 35.13 seconds
Failing tests: 2
	org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int$catena_10
	org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int$catena_11
Can independently fix []
Could not fix independently
processed: 100010
pattern: 100100
try to fix hunk: 0
insert before 96 with     private static final int MAX_MILLIS = (86400 * 1000) - 1;

try to fix hunk: 3
replace from 264 with range 1 to
                minutesOffset = hoursInMinutes - minutesOffset;

patches are written to file
running tests...
used time: Finished in 36.49 seconds
Failing tests: 2
	org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int$catena_10
	org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int$catena_11
Can independently fix []
Could not fix independently
processed: 100100
pattern: 101000
try to fix hunk: 0
insert before 96 with     private static final int MAX_MILLIS = (86400 * 1000) - 1;

try to fix hunk: 2
replace from 262 with range 1 to
            int hoursInMinutes = hoursOffset * 60;

patches are written to file
running tests...
used time: Finished in 33.17 seconds
Failing tests: 2
	org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int$catena_10
	org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int$catena_11
Can independently fix []
Could not fix independently
processed: 101000
pattern: 110000
try to fix hunk: 0
insert before 96 with     private static final int MAX_MILLIS = (86400 * 1000) - 1;

try to fix hunk: 1
insert before 257 with         if (hoursOffset < -23 || hoursOffset > 23) {
            throw new IllegalArgumentException("Hours out of range: " + hoursOffset);
        }

patches are written to file
running tests...
used time: Finished in 37.67 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 110000
pattern: 000111
try to fix hunk: 3
replace from 264 with range 1 to
                minutesOffset = hoursInMinutes - minutesOffset;

try to fix hunk: 4
replace from 266 with range 1 to
                minutesOffset = hoursInMinutes + minutesOffset;

try to fix hunk: 5
insert before 282 with         if (millisOffset < -MAX_MILLIS || millisOffset > MAX_MILLIS) {
            throw new IllegalArgumentException("Millis out of range: " + millisOffset);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000111
pattern: 001011
try to fix hunk: 2
replace from 262 with range 1 to
            int hoursInMinutes = hoursOffset * 60;

try to fix hunk: 4
replace from 266 with range 1 to
                minutesOffset = hoursInMinutes + minutesOffset;

try to fix hunk: 5
insert before 282 with         if (millisOffset < -MAX_MILLIS || millisOffset > MAX_MILLIS) {
            throw new IllegalArgumentException("Millis out of range: " + millisOffset);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001011
pattern: 001101
try to fix hunk: 2
replace from 262 with range 1 to
            int hoursInMinutes = hoursOffset * 60;

try to fix hunk: 3
replace from 264 with range 1 to
                minutesOffset = hoursInMinutes - minutesOffset;

try to fix hunk: 5
insert before 282 with         if (millisOffset < -MAX_MILLIS || millisOffset > MAX_MILLIS) {
            throw new IllegalArgumentException("Millis out of range: " + millisOffset);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001101
pattern: 001110
try to fix hunk: 2
replace from 262 with range 1 to
            int hoursInMinutes = hoursOffset * 60;

try to fix hunk: 3
replace from 264 with range 1 to
                minutesOffset = hoursInMinutes - minutesOffset;

try to fix hunk: 4
replace from 266 with range 1 to
                minutesOffset = hoursInMinutes + minutesOffset;

patches are written to file
running tests...
used time: Finished in 35.68 seconds
Failing tests: 2
	org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int$catena_10
	org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int$catena_11
Can independently fix []
Could not fix independently
processed: 001110
pattern: 010011
try to fix hunk: 1
insert before 257 with         if (hoursOffset < -23 || hoursOffset > 23) {
            throw new IllegalArgumentException("Hours out of range: " + hoursOffset);
        }

try to fix hunk: 4
replace from 266 with range 1 to
                minutesOffset = hoursInMinutes + minutesOffset;

try to fix hunk: 5
insert before 282 with         if (millisOffset < -MAX_MILLIS || millisOffset > MAX_MILLIS) {
            throw new IllegalArgumentException("Millis out of range: " + millisOffset);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010011
pattern: 010101
try to fix hunk: 1
insert before 257 with         if (hoursOffset < -23 || hoursOffset > 23) {
            throw new IllegalArgumentException("Hours out of range: " + hoursOffset);
        }

try to fix hunk: 3
replace from 264 with range 1 to
                minutesOffset = hoursInMinutes - minutesOffset;

try to fix hunk: 5
insert before 282 with         if (millisOffset < -MAX_MILLIS || millisOffset > MAX_MILLIS) {
            throw new IllegalArgumentException("Millis out of range: " + millisOffset);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010101
pattern: 010110
try to fix hunk: 1
insert before 257 with         if (hoursOffset < -23 || hoursOffset > 23) {
            throw new IllegalArgumentException("Hours out of range: " + hoursOffset);
        }

try to fix hunk: 3
replace from 264 with range 1 to
                minutesOffset = hoursInMinutes - minutesOffset;

try to fix hunk: 4
replace from 266 with range 1 to
                minutesOffset = hoursInMinutes + minutesOffset;

patches are written to file
running tests...
used time: Finished in 31.46 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 010110
pattern: 011001
try to fix hunk: 1
insert before 257 with         if (hoursOffset < -23 || hoursOffset > 23) {
            throw new IllegalArgumentException("Hours out of range: " + hoursOffset);
        }

try to fix hunk: 2
replace from 262 with range 1 to
            int hoursInMinutes = hoursOffset * 60;

try to fix hunk: 5
insert before 282 with         if (millisOffset < -MAX_MILLIS || millisOffset > MAX_MILLIS) {
            throw new IllegalArgumentException("Millis out of range: " + millisOffset);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011001
pattern: 011010
try to fix hunk: 1
insert before 257 with         if (hoursOffset < -23 || hoursOffset > 23) {
            throw new IllegalArgumentException("Hours out of range: " + hoursOffset);
        }

try to fix hunk: 2
replace from 262 with range 1 to
            int hoursInMinutes = hoursOffset * 60;

try to fix hunk: 4
replace from 266 with range 1 to
                minutesOffset = hoursInMinutes + minutesOffset;

patches are written to file
running tests...
used time: Finished in 36.90 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 011010
pattern: 011100
try to fix hunk: 1
insert before 257 with         if (hoursOffset < -23 || hoursOffset > 23) {
            throw new IllegalArgumentException("Hours out of range: " + hoursOffset);
        }

try to fix hunk: 2
replace from 262 with range 1 to
            int hoursInMinutes = hoursOffset * 60;

try to fix hunk: 3
replace from 264 with range 1 to
                minutesOffset = hoursInMinutes - minutesOffset;

patches are written to file
running tests...
used time: Finished in 32.26 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 011100
pattern: 100011
try to fix hunk: 0
insert before 96 with     private static final int MAX_MILLIS = (86400 * 1000) - 1;

try to fix hunk: 4
replace from 266 with range 1 to
                minutesOffset = hoursInMinutes + minutesOffset;

try to fix hunk: 5
insert before 282 with         if (millisOffset < -MAX_MILLIS || millisOffset > MAX_MILLIS) {
            throw new IllegalArgumentException("Millis out of range: " + millisOffset);
        }

patches are written to file
running tests...
used time: Finished in 40.64 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 100011
pattern: 100101
try to fix hunk: 0
insert before 96 with     private static final int MAX_MILLIS = (86400 * 1000) - 1;

try to fix hunk: 3
replace from 264 with range 1 to
                minutesOffset = hoursInMinutes - minutesOffset;

try to fix hunk: 5
insert before 282 with         if (millisOffset < -MAX_MILLIS || millisOffset > MAX_MILLIS) {
            throw new IllegalArgumentException("Millis out of range: " + millisOffset);
        }

patches are written to file
running tests...
used time: Finished in 33.63 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 100101
pattern: 100110
try to fix hunk: 0
insert before 96 with     private static final int MAX_MILLIS = (86400 * 1000) - 1;

try to fix hunk: 3
replace from 264 with range 1 to
                minutesOffset = hoursInMinutes - minutesOffset;

try to fix hunk: 4
replace from 266 with range 1 to
                minutesOffset = hoursInMinutes + minutesOffset;

patches are written to file
running tests...
used time: Finished in 35.52 seconds
Failing tests: 2
	org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int$catena_10
	org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int$catena_11
Can independently fix []
Could not fix independently
processed: 100110
pattern: 101001
try to fix hunk: 0
insert before 96 with     private static final int MAX_MILLIS = (86400 * 1000) - 1;

try to fix hunk: 2
replace from 262 with range 1 to
            int hoursInMinutes = hoursOffset * 60;

try to fix hunk: 5
insert before 282 with         if (millisOffset < -MAX_MILLIS || millisOffset > MAX_MILLIS) {
            throw new IllegalArgumentException("Millis out of range: " + millisOffset);
        }

patches are written to file
running tests...
used time: Finished in 38.89 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 101001
pattern: 101010
try to fix hunk: 0
insert before 96 with     private static final int MAX_MILLIS = (86400 * 1000) - 1;

try to fix hunk: 2
replace from 262 with range 1 to
            int hoursInMinutes = hoursOffset * 60;

try to fix hunk: 4
replace from 266 with range 1 to
                minutesOffset = hoursInMinutes + minutesOffset;

patches are written to file
running tests...
used time: Finished in 38.40 seconds
Failing tests: 2
	org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int$catena_10
	org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int$catena_11
Can independently fix []
Could not fix independently
processed: 101010
pattern: 101100
try to fix hunk: 0
insert before 96 with     private static final int MAX_MILLIS = (86400 * 1000) - 1;

try to fix hunk: 2
replace from 262 with range 1 to
            int hoursInMinutes = hoursOffset * 60;

try to fix hunk: 3
replace from 264 with range 1 to
                minutesOffset = hoursInMinutes - minutesOffset;

patches are written to file
running tests...
used time: Finished in 41.21 seconds
Failing tests: 2
	org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int$catena_10
	org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int$catena_11
Can independently fix []
Could not fix independently
processed: 101100
pattern: 110001
try to fix hunk: 0
insert before 96 with     private static final int MAX_MILLIS = (86400 * 1000) - 1;

try to fix hunk: 1
insert before 257 with         if (hoursOffset < -23 || hoursOffset > 23) {
            throw new IllegalArgumentException("Hours out of range: " + hoursOffset);
        }

try to fix hunk: 5
insert before 282 with         if (millisOffset < -MAX_MILLIS || millisOffset > MAX_MILLIS) {
            throw new IllegalArgumentException("Millis out of range: " + millisOffset);
        }

patches are written to file
running tests...
used time: Finished in 38.93 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 110001
pattern: 110010
try to fix hunk: 0
insert before 96 with     private static final int MAX_MILLIS = (86400 * 1000) - 1;

try to fix hunk: 1
insert before 257 with         if (hoursOffset < -23 || hoursOffset > 23) {
            throw new IllegalArgumentException("Hours out of range: " + hoursOffset);
        }

try to fix hunk: 4
replace from 266 with range 1 to
                minutesOffset = hoursInMinutes + minutesOffset;

patches are written to file
running tests...
used time: Finished in 34.17 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 110010
pattern: 110100
try to fix hunk: 0
insert before 96 with     private static final int MAX_MILLIS = (86400 * 1000) - 1;

try to fix hunk: 1
insert before 257 with         if (hoursOffset < -23 || hoursOffset > 23) {
            throw new IllegalArgumentException("Hours out of range: " + hoursOffset);
        }

try to fix hunk: 3
replace from 264 with range 1 to
                minutesOffset = hoursInMinutes - minutesOffset;

patches are written to file
running tests...
used time: Finished in 33.21 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 110100
pattern: 111000
try to fix hunk: 0
insert before 96 with     private static final int MAX_MILLIS = (86400 * 1000) - 1;

try to fix hunk: 1
insert before 257 with         if (hoursOffset < -23 || hoursOffset > 23) {
            throw new IllegalArgumentException("Hours out of range: " + hoursOffset);
        }

try to fix hunk: 2
replace from 262 with range 1 to
            int hoursInMinutes = hoursOffset * 60;

patches are written to file
running tests...
used time: Finished in 36.98 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 111000
pattern: 001111
try to fix hunk: 2
replace from 262 with range 1 to
            int hoursInMinutes = hoursOffset * 60;

try to fix hunk: 3
replace from 264 with range 1 to
                minutesOffset = hoursInMinutes - minutesOffset;

try to fix hunk: 4
replace from 266 with range 1 to
                minutesOffset = hoursInMinutes + minutesOffset;

try to fix hunk: 5
insert before 282 with         if (millisOffset < -MAX_MILLIS || millisOffset > MAX_MILLIS) {
            throw new IllegalArgumentException("Millis out of range: " + millisOffset);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001111
pattern: 010111
try to fix hunk: 1
insert before 257 with         if (hoursOffset < -23 || hoursOffset > 23) {
            throw new IllegalArgumentException("Hours out of range: " + hoursOffset);
        }

try to fix hunk: 3
replace from 264 with range 1 to
                minutesOffset = hoursInMinutes - minutesOffset;

try to fix hunk: 4
replace from 266 with range 1 to
                minutesOffset = hoursInMinutes + minutesOffset;

try to fix hunk: 5
insert before 282 with         if (millisOffset < -MAX_MILLIS || millisOffset > MAX_MILLIS) {
            throw new IllegalArgumentException("Millis out of range: " + millisOffset);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010111
pattern: 011011
try to fix hunk: 1
insert before 257 with         if (hoursOffset < -23 || hoursOffset > 23) {
            throw new IllegalArgumentException("Hours out of range: " + hoursOffset);
        }

try to fix hunk: 2
replace from 262 with range 1 to
            int hoursInMinutes = hoursOffset * 60;

try to fix hunk: 4
replace from 266 with range 1 to
                minutesOffset = hoursInMinutes + minutesOffset;

try to fix hunk: 5
insert before 282 with         if (millisOffset < -MAX_MILLIS || millisOffset > MAX_MILLIS) {
            throw new IllegalArgumentException("Millis out of range: " + millisOffset);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011011
pattern: 011101
try to fix hunk: 1
insert before 257 with         if (hoursOffset < -23 || hoursOffset > 23) {
            throw new IllegalArgumentException("Hours out of range: " + hoursOffset);
        }

try to fix hunk: 2
replace from 262 with range 1 to
            int hoursInMinutes = hoursOffset * 60;

try to fix hunk: 3
replace from 264 with range 1 to
                minutesOffset = hoursInMinutes - minutesOffset;

try to fix hunk: 5
insert before 282 with         if (millisOffset < -MAX_MILLIS || millisOffset > MAX_MILLIS) {
            throw new IllegalArgumentException("Millis out of range: " + millisOffset);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011101
pattern: 011110
try to fix hunk: 1
insert before 257 with         if (hoursOffset < -23 || hoursOffset > 23) {
            throw new IllegalArgumentException("Hours out of range: " + hoursOffset);
        }

try to fix hunk: 2
replace from 262 with range 1 to
            int hoursInMinutes = hoursOffset * 60;

try to fix hunk: 3
replace from 264 with range 1 to
                minutesOffset = hoursInMinutes - minutesOffset;

try to fix hunk: 4
replace from 266 with range 1 to
                minutesOffset = hoursInMinutes + minutesOffset;

patches are written to file
running tests...
used time: Finished in 39.58 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 011110
pattern: 100111
try to fix hunk: 0
insert before 96 with     private static final int MAX_MILLIS = (86400 * 1000) - 1;

try to fix hunk: 3
replace from 264 with range 1 to
                minutesOffset = hoursInMinutes - minutesOffset;

try to fix hunk: 4
replace from 266 with range 1 to
                minutesOffset = hoursInMinutes + minutesOffset;

try to fix hunk: 5
insert before 282 with         if (millisOffset < -MAX_MILLIS || millisOffset > MAX_MILLIS) {
            throw new IllegalArgumentException("Millis out of range: " + millisOffset);
        }

patches are written to file
running tests...
used time: Finished in 35.60 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 100111
pattern: 101011
try to fix hunk: 0
insert before 96 with     private static final int MAX_MILLIS = (86400 * 1000) - 1;

try to fix hunk: 2
replace from 262 with range 1 to
            int hoursInMinutes = hoursOffset * 60;

try to fix hunk: 4
replace from 266 with range 1 to
                minutesOffset = hoursInMinutes + minutesOffset;

try to fix hunk: 5
insert before 282 with         if (millisOffset < -MAX_MILLIS || millisOffset > MAX_MILLIS) {
            throw new IllegalArgumentException("Millis out of range: " + millisOffset);
        }

patches are written to file
running tests...
used time: Finished in 32.30 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 101011
pattern: 101101
try to fix hunk: 0
insert before 96 with     private static final int MAX_MILLIS = (86400 * 1000) - 1;

try to fix hunk: 2
replace from 262 with range 1 to
            int hoursInMinutes = hoursOffset * 60;

try to fix hunk: 3
replace from 264 with range 1 to
                minutesOffset = hoursInMinutes - minutesOffset;

try to fix hunk: 5
insert before 282 with         if (millisOffset < -MAX_MILLIS || millisOffset > MAX_MILLIS) {
            throw new IllegalArgumentException("Millis out of range: " + millisOffset);
        }

patches are written to file
running tests...
used time: Finished in 30.29 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 101101
pattern: 101110
try to fix hunk: 0
insert before 96 with     private static final int MAX_MILLIS = (86400 * 1000) - 1;

try to fix hunk: 2
replace from 262 with range 1 to
            int hoursInMinutes = hoursOffset * 60;

try to fix hunk: 3
replace from 264 with range 1 to
                minutesOffset = hoursInMinutes - minutesOffset;

try to fix hunk: 4
replace from 266 with range 1 to
                minutesOffset = hoursInMinutes + minutesOffset;

patches are written to file
running tests...
used time: Finished in 35.91 seconds
Failing tests: 2
	org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int$catena_10
	org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int$catena_11
Can independently fix []
Could not fix independently
processed: 101110
pattern: 110011
try to fix hunk: 0
insert before 96 with     private static final int MAX_MILLIS = (86400 * 1000) - 1;

try to fix hunk: 1
insert before 257 with         if (hoursOffset < -23 || hoursOffset > 23) {
            throw new IllegalArgumentException("Hours out of range: " + hoursOffset);
        }

try to fix hunk: 4
replace from 266 with range 1 to
                minutesOffset = hoursInMinutes + minutesOffset;

try to fix hunk: 5
insert before 282 with         if (millisOffset < -MAX_MILLIS || millisOffset > MAX_MILLIS) {
            throw new IllegalArgumentException("Millis out of range: " + millisOffset);
        }

patches are written to file
running tests...
used time: Finished in 38.10 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 110011
pattern: 110101
try to fix hunk: 0
insert before 96 with     private static final int MAX_MILLIS = (86400 * 1000) - 1;

try to fix hunk: 1
insert before 257 with         if (hoursOffset < -23 || hoursOffset > 23) {
            throw new IllegalArgumentException("Hours out of range: " + hoursOffset);
        }

try to fix hunk: 3
replace from 264 with range 1 to
                minutesOffset = hoursInMinutes - minutesOffset;

try to fix hunk: 5
insert before 282 with         if (millisOffset < -MAX_MILLIS || millisOffset > MAX_MILLIS) {
            throw new IllegalArgumentException("Millis out of range: " + millisOffset);
        }

patches are written to file
running tests...
used time: Finished in 36.61 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 110101
pattern: 110110
try to fix hunk: 0
insert before 96 with     private static final int MAX_MILLIS = (86400 * 1000) - 1;

try to fix hunk: 1
insert before 257 with         if (hoursOffset < -23 || hoursOffset > 23) {
            throw new IllegalArgumentException("Hours out of range: " + hoursOffset);
        }

try to fix hunk: 3
replace from 264 with range 1 to
                minutesOffset = hoursInMinutes - minutesOffset;

try to fix hunk: 4
replace from 266 with range 1 to
                minutesOffset = hoursInMinutes + minutesOffset;

patches are written to file
running tests...
used time: Finished in 32.58 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 110110
pattern: 111001
try to fix hunk: 0
insert before 96 with     private static final int MAX_MILLIS = (86400 * 1000) - 1;

try to fix hunk: 1
insert before 257 with         if (hoursOffset < -23 || hoursOffset > 23) {
            throw new IllegalArgumentException("Hours out of range: " + hoursOffset);
        }

try to fix hunk: 2
replace from 262 with range 1 to
            int hoursInMinutes = hoursOffset * 60;

try to fix hunk: 5
insert before 282 with         if (millisOffset < -MAX_MILLIS || millisOffset > MAX_MILLIS) {
            throw new IllegalArgumentException("Millis out of range: " + millisOffset);
        }

patches are written to file
running tests...
used time: Finished in 35.64 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 111001
pattern: 111010
try to fix hunk: 0
insert before 96 with     private static final int MAX_MILLIS = (86400 * 1000) - 1;

try to fix hunk: 1
insert before 257 with         if (hoursOffset < -23 || hoursOffset > 23) {
            throw new IllegalArgumentException("Hours out of range: " + hoursOffset);
        }

try to fix hunk: 2
replace from 262 with range 1 to
            int hoursInMinutes = hoursOffset * 60;

try to fix hunk: 4
replace from 266 with range 1 to
                minutesOffset = hoursInMinutes + minutesOffset;

patches are written to file
running tests...
used time: Finished in 36.44 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 111010
pattern: 111100
try to fix hunk: 0
insert before 96 with     private static final int MAX_MILLIS = (86400 * 1000) - 1;

try to fix hunk: 1
insert before 257 with         if (hoursOffset < -23 || hoursOffset > 23) {
            throw new IllegalArgumentException("Hours out of range: " + hoursOffset);
        }

try to fix hunk: 2
replace from 262 with range 1 to
            int hoursInMinutes = hoursOffset * 60;

try to fix hunk: 3
replace from 264 with range 1 to
                minutesOffset = hoursInMinutes - minutesOffset;

patches are written to file
running tests...
used time: Finished in 40.39 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 111100
pattern: 011111
try to fix hunk: 1
insert before 257 with         if (hoursOffset < -23 || hoursOffset > 23) {
            throw new IllegalArgumentException("Hours out of range: " + hoursOffset);
        }

try to fix hunk: 2
replace from 262 with range 1 to
            int hoursInMinutes = hoursOffset * 60;

try to fix hunk: 3
replace from 264 with range 1 to
                minutesOffset = hoursInMinutes - minutesOffset;

try to fix hunk: 4
replace from 266 with range 1 to
                minutesOffset = hoursInMinutes + minutesOffset;

try to fix hunk: 5
insert before 282 with         if (millisOffset < -MAX_MILLIS || millisOffset > MAX_MILLIS) {
            throw new IllegalArgumentException("Millis out of range: " + millisOffset);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011111
pattern: 101111
try to fix hunk: 0
insert before 96 with     private static final int MAX_MILLIS = (86400 * 1000) - 1;

try to fix hunk: 2
replace from 262 with range 1 to
            int hoursInMinutes = hoursOffset * 60;

try to fix hunk: 3
replace from 264 with range 1 to
                minutesOffset = hoursInMinutes - minutesOffset;

try to fix hunk: 4
replace from 266 with range 1 to
                minutesOffset = hoursInMinutes + minutesOffset;

try to fix hunk: 5
insert before 282 with         if (millisOffset < -MAX_MILLIS || millisOffset > MAX_MILLIS) {
            throw new IllegalArgumentException("Millis out of range: " + millisOffset);
        }

patches are written to file
running tests...
used time: Finished in 35.87 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 101111
pattern: 110111
try to fix hunk: 0
insert before 96 with     private static final int MAX_MILLIS = (86400 * 1000) - 1;

try to fix hunk: 1
insert before 257 with         if (hoursOffset < -23 || hoursOffset > 23) {
            throw new IllegalArgumentException("Hours out of range: " + hoursOffset);
        }

try to fix hunk: 3
replace from 264 with range 1 to
                minutesOffset = hoursInMinutes - minutesOffset;

try to fix hunk: 4
replace from 266 with range 1 to
                minutesOffset = hoursInMinutes + minutesOffset;

try to fix hunk: 5
insert before 282 with         if (millisOffset < -MAX_MILLIS || millisOffset > MAX_MILLIS) {
            throw new IllegalArgumentException("Millis out of range: " + millisOffset);
        }

patches are written to file
running tests...
used time: Finished in 32.78 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 110111
pattern: 111011
try to fix hunk: 0
insert before 96 with     private static final int MAX_MILLIS = (86400 * 1000) - 1;

try to fix hunk: 1
insert before 257 with         if (hoursOffset < -23 || hoursOffset > 23) {
            throw new IllegalArgumentException("Hours out of range: " + hoursOffset);
        }

try to fix hunk: 2
replace from 262 with range 1 to
            int hoursInMinutes = hoursOffset * 60;

try to fix hunk: 4
replace from 266 with range 1 to
                minutesOffset = hoursInMinutes + minutesOffset;

try to fix hunk: 5
insert before 282 with         if (millisOffset < -MAX_MILLIS || millisOffset > MAX_MILLIS) {
            throw new IllegalArgumentException("Millis out of range: " + millisOffset);
        }

patches are written to file
running tests...
used time: Finished in 36.51 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 111011
pattern: 111101
try to fix hunk: 0
insert before 96 with     private static final int MAX_MILLIS = (86400 * 1000) - 1;

try to fix hunk: 1
insert before 257 with         if (hoursOffset < -23 || hoursOffset > 23) {
            throw new IllegalArgumentException("Hours out of range: " + hoursOffset);
        }

try to fix hunk: 2
replace from 262 with range 1 to
            int hoursInMinutes = hoursOffset * 60;

try to fix hunk: 3
replace from 264 with range 1 to
                minutesOffset = hoursInMinutes - minutesOffset;

try to fix hunk: 5
insert before 282 with         if (millisOffset < -MAX_MILLIS || millisOffset > MAX_MILLIS) {
            throw new IllegalArgumentException("Millis out of range: " + millisOffset);
        }

patches are written to file
running tests...
used time: Finished in 34.92 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 111101
pattern: 111110
try to fix hunk: 0
insert before 96 with     private static final int MAX_MILLIS = (86400 * 1000) - 1;

try to fix hunk: 1
insert before 257 with         if (hoursOffset < -23 || hoursOffset > 23) {
            throw new IllegalArgumentException("Hours out of range: " + hoursOffset);
        }

try to fix hunk: 2
replace from 262 with range 1 to
            int hoursInMinutes = hoursOffset * 60;

try to fix hunk: 3
replace from 264 with range 1 to
                minutesOffset = hoursInMinutes - minutesOffset;

try to fix hunk: 4
replace from 266 with range 1 to
                minutesOffset = hoursInMinutes + minutesOffset;

patches are written to file
running tests...
used time: Finished in 39.29 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 111110
pattern: 111111
try to fix hunk: 0
insert before 96 with     private static final int MAX_MILLIS = (86400 * 1000) - 1;

try to fix hunk: 1
insert before 257 with         if (hoursOffset < -23 || hoursOffset > 23) {
            throw new IllegalArgumentException("Hours out of range: " + hoursOffset);
        }

try to fix hunk: 2
replace from 262 with range 1 to
            int hoursInMinutes = hoursOffset * 60;

try to fix hunk: 3
replace from 264 with range 1 to
                minutesOffset = hoursInMinutes - minutesOffset;

try to fix hunk: 4
replace from 266 with range 1 to
                minutesOffset = hoursInMinutes + minutesOffset;

try to fix hunk: 5
insert before 282 with         if (millisOffset < -MAX_MILLIS || millisOffset > MAX_MILLIS) {
            throw new IllegalArgumentException("Millis out of range: " + millisOffset);
        }

patches are written to file
running tests...
used time: Finished in 35.52 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 111111
Find 2 new bugs
