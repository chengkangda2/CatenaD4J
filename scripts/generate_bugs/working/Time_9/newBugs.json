{
    "original": {
        "num_of_hunks": 6,
        "0": {
            "file_name": "src/main/java/org/joda/time/DateTimeZone.java",
            "replaced_with": "    private static final int MAX_MILLIS = (86400 * 1000) - 1;\n",
            "patch_type": "insert",
            "next_line_no": 96
        },
        "1": {
            "file_name": "src/main/java/org/joda/time/DateTimeZone.java",
            "replaced_with": "        if (hoursOffset < -23 || hoursOffset > 23) {\n            throw new IllegalArgumentException(\"Hours out of range: \" + hoursOffset);\n        }\n",
            "patch_type": "insert",
            "next_line_no": 257
        },
        "2": {
            "file_name": "src/main/java/org/joda/time/DateTimeZone.java",
            "from_line_no": 262,
            "to_line_no": 262,
            "replaced_with": "            int hoursInMinutes = hoursOffset * 60;\n",
            "replaced": "            int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);\n",
            "patch_type": "replace",
            "next_line_no": 263
        },
        "3": {
            "file_name": "src/main/java/org/joda/time/DateTimeZone.java",
            "from_line_no": 264,
            "to_line_no": 264,
            "replaced_with": "                minutesOffset = hoursInMinutes - minutesOffset;\n",
            "replaced": "                minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);\n",
            "patch_type": "replace",
            "next_line_no": 265
        },
        "4": {
            "file_name": "src/main/java/org/joda/time/DateTimeZone.java",
            "from_line_no": 266,
            "to_line_no": 266,
            "replaced_with": "                minutesOffset = hoursInMinutes + minutesOffset;\n",
            "replaced": "                minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);\n",
            "patch_type": "replace",
            "next_line_no": 267
        },
        "5": {
            "file_name": "src/main/java/org/joda/time/DateTimeZone.java",
            "replaced_with": "        if (millisOffset < -MAX_MILLIS || millisOffset > MAX_MILLIS) {\n            throw new IllegalArgumentException(\"Millis out of range: \" + millisOffset);\n        }\n",
            "patch_type": "insert",
            "next_line_no": 282
        }
    },
    "method": {
        "failing_tests": [
            "org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int"
        ],
        "org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int": {
            "file_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
            "Instance": "Begin: Pos(303, 12)\nEnd: Pos(334, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Time_9/src/test/java//org/joda/time/TestDateTimeZone.java\nName: testForOffsetHoursMinutes_int_int\nChilds: [StatementAssertion<Begin: Pos(304, 9), End: Pos(304, 81)>,\nStatementAssertion<Begin: Pos(305, 9), End: Pos(305, 95)>,\nStatementAssertion<Begin: Pos(306, 9), End: Pos(306, 94)>,\nStatementAssertion<Begin: Pos(307, 9), End: Pos(307, 94)>,\nStatementAssertion<Begin: Pos(308, 9), End: Pos(308, 95)>,\nStatementAssertion<Begin: Pos(309, 9), End: Pos(309, 96)>,\nStatementAssertion<Begin: Pos(312, 13), End: Pos(312, 19)>,\nStatementAssertion<Begin: Pos(316, 13), End: Pos(316, 19)>,\nStatementAssertion<Begin: Pos(320, 13), End: Pos(320, 19)>,\nStatementAssertion<Begin: Pos(324, 13), End: Pos(324, 19)>,\nStatementAssertion<Begin: Pos(328, 13), End: Pos(328, 19)>,\nStatementAssertion<Begin: Pos(332, 13), End: Pos(332, 19)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Time_9/src/test/java//org/joda/time/TestDateTimeZone.java",
            "name": "testForOffsetHoursMinutes_int_int",
            "begin": "Pos(303, 12)",
            "end": "Pos(334, 5)",
            "begin_line_no": 303,
            "end_line_no": 334,
            "child": [
                "Begin: Pos(304, 9)\nEnd: Pos(304, 81)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(305, 9)\nEnd: Pos(305, 95)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(306, 9)\nEnd: Pos(306, 94)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(307, 9)\nEnd: Pos(307, 94)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(308, 9)\nEnd: Pos(308, 95)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(309, 9)\nEnd: Pos(309, 96)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(312, 13)\nEnd: Pos(312, 19)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(316, 13)\nEnd: Pos(316, 19)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(320, 13)\nEnd: Pos(320, 19)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(324, 13)\nEnd: Pos(324, 19)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(328, 13)\nEnd: Pos(328, 19)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(332, 13)\nEnd: Pos(332, 19)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testForOffsetHoursMinutes_int_int$catena_0() {\n        assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                           /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+03:15\"), DateTimeZone.forOffsetHoursMinutes(3, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:30\"), DateTimeZone.forOffsetHoursMinutes(-2, 30));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, -1);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, -1);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n    }        ",
                "    public void testForOffsetHoursMinutes_int_int$catena_1() {\n        try{ assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(DateTimeZone.forID(\"+03:15\"), DateTimeZone.forOffsetHoursMinutes(3, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:30\"), DateTimeZone.forOffsetHoursMinutes(-2, 30));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, -1);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, -1);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n    }        ",
                "    public void testForOffsetHoursMinutes_int_int$catena_2() {\n        try{ assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(DateTimeZone.forID(\"+03:15\"), DateTimeZone.forOffsetHoursMinutes(3, 15));              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:30\"), DateTimeZone.forOffsetHoursMinutes(-2, 30));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, -1);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, -1);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n    }        ",
                "    public void testForOffsetHoursMinutes_int_int$catena_3() {\n        try{ assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+03:15\"), DateTimeZone.forOffsetHoursMinutes(3, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(DateTimeZone.forID(\"-02:30\"), DateTimeZone.forOffsetHoursMinutes(-2, 30));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, -1);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, -1);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n    }        ",
                "    public void testForOffsetHoursMinutes_int_int$catena_4() {\n        try{ assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+03:15\"), DateTimeZone.forOffsetHoursMinutes(3, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(DateTimeZone.forID(\"-02:30\"), DateTimeZone.forOffsetHoursMinutes(-2, 30));             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, -1);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, -1);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n    }        ",
                "    public void testForOffsetHoursMinutes_int_int$catena_5() {\n        try{ assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+03:15\"), DateTimeZone.forOffsetHoursMinutes(3, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:30\"), DateTimeZone.forOffsetHoursMinutes(-2, 30));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));            /***** ORIGINAL ASSERTION IS HERE *****/\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, -1);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, -1);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n    }        ",
                "    public void testForOffsetHoursMinutes_int_int$catena_6() {\n        try{ assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+03:15\"), DateTimeZone.forOffsetHoursMinutes(3, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:30\"), DateTimeZone.forOffsetHoursMinutes(-2, 30));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, 60);\n            fail();                                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, -1);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, -1);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n    }        ",
                "    public void testForOffsetHoursMinutes_int_int$catena_7() {\n        try{ assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+03:15\"), DateTimeZone.forOffsetHoursMinutes(3, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:30\"), DateTimeZone.forOffsetHoursMinutes(-2, 30));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, 60);\n            fail();                                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, -1);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, -1);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n    }        ",
                "    public void testForOffsetHoursMinutes_int_int$catena_8() {\n        try{ assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+03:15\"), DateTimeZone.forOffsetHoursMinutes(3, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:30\"), DateTimeZone.forOffsetHoursMinutes(-2, 30));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, -1);\n            fail();                                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, -1);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n    }        ",
                "    public void testForOffsetHoursMinutes_int_int$catena_9() {\n        try{ assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+03:15\"), DateTimeZone.forOffsetHoursMinutes(3, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:30\"), DateTimeZone.forOffsetHoursMinutes(-2, 30));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, -1);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, -1);\n            fail();                                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n    }        ",
                "    public void testForOffsetHoursMinutes_int_int$catena_10() {\n        try{ assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+03:15\"), DateTimeZone.forOffsetHoursMinutes(3, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:30\"), DateTimeZone.forOffsetHoursMinutes(-2, 30));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, -1);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, -1);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(24, 0);\n            fail();                                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n    }        ",
                "    public void testForOffsetHoursMinutes_int_int$catena_11() {\n        try{ assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+03:15\"), DateTimeZone.forOffsetHoursMinutes(3, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:30\"), DateTimeZone.forOffsetHoursMinutes(-2, 30));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, -1);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, -1);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-24, 0);\n            fail();                                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalArgumentException ex) {}\n    }        "
            ],
            "func": {
                "0": "    public void testForOffsetHoursMinutes_int_int$catena_0() {\n        assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                           /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+03:15\"), DateTimeZone.forOffsetHoursMinutes(3, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:30\"), DateTimeZone.forOffsetHoursMinutes(-2, 30));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, -1);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, -1);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n    }        ",
                "1": "    public void testForOffsetHoursMinutes_int_int$catena_1() {\n        try{ assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(DateTimeZone.forID(\"+03:15\"), DateTimeZone.forOffsetHoursMinutes(3, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:30\"), DateTimeZone.forOffsetHoursMinutes(-2, 30));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, -1);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, -1);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n    }        ",
                "2": "    public void testForOffsetHoursMinutes_int_int$catena_2() {\n        try{ assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(DateTimeZone.forID(\"+03:15\"), DateTimeZone.forOffsetHoursMinutes(3, 15));              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:30\"), DateTimeZone.forOffsetHoursMinutes(-2, 30));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, -1);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, -1);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n    }        ",
                "3": "    public void testForOffsetHoursMinutes_int_int$catena_3() {\n        try{ assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+03:15\"), DateTimeZone.forOffsetHoursMinutes(3, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(DateTimeZone.forID(\"-02:30\"), DateTimeZone.forOffsetHoursMinutes(-2, 30));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, -1);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, -1);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n    }        ",
                "4": "    public void testForOffsetHoursMinutes_int_int$catena_4() {\n        try{ assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+03:15\"), DateTimeZone.forOffsetHoursMinutes(3, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(DateTimeZone.forID(\"-02:30\"), DateTimeZone.forOffsetHoursMinutes(-2, 30));             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, -1);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, -1);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n    }        ",
                "5": "    public void testForOffsetHoursMinutes_int_int$catena_5() {\n        try{ assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+03:15\"), DateTimeZone.forOffsetHoursMinutes(3, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:30\"), DateTimeZone.forOffsetHoursMinutes(-2, 30));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));            /***** ORIGINAL ASSERTION IS HERE *****/\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, -1);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, -1);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n    }        ",
                "6": "    public void testForOffsetHoursMinutes_int_int$catena_6() {\n        try{ assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+03:15\"), DateTimeZone.forOffsetHoursMinutes(3, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:30\"), DateTimeZone.forOffsetHoursMinutes(-2, 30));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, 60);\n            fail();                                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, -1);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, -1);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n    }        ",
                "7": "    public void testForOffsetHoursMinutes_int_int$catena_7() {\n        try{ assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+03:15\"), DateTimeZone.forOffsetHoursMinutes(3, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:30\"), DateTimeZone.forOffsetHoursMinutes(-2, 30));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, 60);\n            fail();                                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, -1);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, -1);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n    }        ",
                "8": "    public void testForOffsetHoursMinutes_int_int$catena_8() {\n        try{ assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+03:15\"), DateTimeZone.forOffsetHoursMinutes(3, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:30\"), DateTimeZone.forOffsetHoursMinutes(-2, 30));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, -1);\n            fail();                                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, -1);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n    }        ",
                "9": "    public void testForOffsetHoursMinutes_int_int$catena_9() {\n        try{ assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+03:15\"), DateTimeZone.forOffsetHoursMinutes(3, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:30\"), DateTimeZone.forOffsetHoursMinutes(-2, 30));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, -1);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, -1);\n            fail();                                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n    }        ",
                "10": "    public void testForOffsetHoursMinutes_int_int$catena_10() {\n        try{ assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+03:15\"), DateTimeZone.forOffsetHoursMinutes(3, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:30\"), DateTimeZone.forOffsetHoursMinutes(-2, 30));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, -1);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, -1);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(24, 0);\n            fail();                                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n    }        ",
                "11": "    public void testForOffsetHoursMinutes_int_int$catena_11() {\n        try{ assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+03:15\"), DateTimeZone.forOffsetHoursMinutes(3, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:30\"), DateTimeZone.forOffsetHoursMinutes(-2, 30));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, -1);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, -1);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-24, 0);\n            fail();                                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalArgumentException ex) {}\n    }        "
            }
        }
    },
    "010000": {
        "failing_tests": [
            "org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int$catena_10",
            "org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int$catena_11"
        ]
    },
    "100001": {
        "failing_tests": [
            "org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int$catena_10",
            "org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int$catena_11"
        ]
    }
}