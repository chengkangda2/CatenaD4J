{
    "original": {
        "num_of_hunks": 2,
        "0": {
            "file_name": "src/com/google/javascript/rhino/TokenStream.java",
            "replaced_with": "          Character.isIdentifierIgnorable(s.charAt(0)) ||\n",
            "patch_type": "insert",
            "next_line_no": 194
        },
        "1": {
            "file_name": "src/com/google/javascript/rhino/TokenStream.java",
            "from_line_no": 199,
            "to_line_no": 199,
            "replaced_with": "        if (Character.isIdentifierIgnorable(s.charAt(i)) ||\n",
            "replaced": "        if (\n",
            "patch_type": "replace",
            "next_line_no": 200
        }
    },
    "method": {
        "failing_tests": [
            "com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps",
            "com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert"
        ],
        "com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps": {
            "file_path": "test/com/google/javascript/jscomp/ConvertToDottedPropertiesTest.java",
            "Instance": "Begin: Pos(68, 10)\nEnd: Pos(73, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Closure_131/test//com/google/javascript/jscomp/ConvertToDottedPropertiesTest.java\nName: testQuotedProps\nChilds: [StatementAssertion<Begin: Pos(69, 5), End: Pos(69, 25)>,\nStatementAssertion<Begin: Pos(70, 5), End: Pos(70, 28)>,\nStatementAssertion<Begin: Pos(71, 5), End: Pos(71, 32)>,\nStatementAssertion<Begin: Pos(72, 5), End: Pos(72, 33)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Closure_131/test//com/google/javascript/jscomp/ConvertToDottedPropertiesTest.java",
            "name": "testQuotedProps",
            "begin": "Pos(68, 10)",
            "end": "Pos(73, 3)",
            "begin_line_no": 68,
            "end_line_no": 73,
            "child": [
                "Begin: Pos(69, 5)\nEnd: Pos(69, 25)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(70, 5)\nEnd: Pos(70, 28)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(71, 5)\nEnd: Pos(71, 32)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(72, 5)\nEnd: Pos(72, 33)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "  public void testQuotedProps$catena_0() {\n    testSame(\"({'':0})\");                                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testSame(\"({'1.0':0})\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"({'\\u1d17A':0})\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"({'a\\u0004b':0})\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testQuotedProps$catena_1() {\n    try{ testSame(\"({'':0})\");                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    testSame(\"({'1.0':0})\");                                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testSame(\"({'\\u1d17A':0})\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"({'a\\u0004b':0})\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testQuotedProps$catena_2() {\n    try{ testSame(\"({'':0})\");                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"({'1.0':0})\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    testSame(\"({'\\u1d17A':0})\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testSame(\"({'a\\u0004b':0})\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testQuotedProps$catena_3() {\n    try{ testSame(\"({'':0})\");                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"({'1.0':0})\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"({'\\u1d17A':0})\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    testSame(\"({'a\\u0004b':0})\");                                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            ],
            "func": {
                "0": "  public void testQuotedProps$catena_0() {\n    testSame(\"({'':0})\");                                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testSame(\"({'1.0':0})\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"({'\\u1d17A':0})\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"({'a\\u0004b':0})\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "1": "  public void testQuotedProps$catena_1() {\n    try{ testSame(\"({'':0})\");                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    testSame(\"({'1.0':0})\");                                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testSame(\"({'\\u1d17A':0})\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"({'a\\u0004b':0})\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "2": "  public void testQuotedProps$catena_2() {\n    try{ testSame(\"({'':0})\");                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"({'1.0':0})\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    testSame(\"({'\\u1d17A':0})\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testSame(\"({'a\\u0004b':0})\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "3": "  public void testQuotedProps$catena_3() {\n    try{ testSame(\"({'':0})\");                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"({'1.0':0})\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"({'\\u1d17A':0})\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    testSame(\"({'a\\u0004b':0})\");                                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            }
        },
        "com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert": {
            "file_path": "test/com/google/javascript/jscomp/ConvertToDottedPropertiesTest.java",
            "Instance": "Begin: Pos(41, 10)\nEnd: Pos(65, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Closure_131/test//com/google/javascript/jscomp/ConvertToDottedPropertiesTest.java\nName: testDoNotConvert\nChilds: [StatementAssertion<Begin: Pos(42, 5), End: Pos(42, 21)>,\nStatementAssertion<Begin: Pos(43, 5), End: Pos(43, 22)>,\nStatementAssertion<Begin: Pos(44, 5), End: Pos(44, 23)>,\nStatementAssertion<Begin: Pos(45, 5), End: Pos(45, 23)>,\nStatementAssertion<Begin: Pos(46, 5), End: Pos(46, 23)>,\nStatementAssertion<Begin: Pos(47, 5), End: Pos(47, 23)>,\nStatementAssertion<Begin: Pos(48, 5), End: Pos(48, 23)>,\nStatementAssertion<Begin: Pos(49, 5), End: Pos(49, 23)>,\nStatementAssertion<Begin: Pos(50, 5), End: Pos(50, 24)>,\nStatementAssertion<Begin: Pos(51, 5), End: Pos(51, 28)>,\nStatementAssertion<Begin: Pos(52, 5), End: Pos(52, 21)>,\nStatementAssertion<Begin: Pos(53, 5), End: Pos(53, 21)>,\nStatementAssertion<Begin: Pos(54, 5), End: Pos(54, 21)>,\nStatementAssertion<Begin: Pos(55, 5), End: Pos(55, 23)>,\nStatementAssertion<Begin: Pos(56, 5), End: Pos(56, 29)>,\nStatementAssertion<Begin: Pos(58, 5), End: Pos(58, 29)>,\nStatementAssertion<Begin: Pos(61, 5), End: Pos(61, 41)>,\nStatementAssertion<Begin: Pos(64, 5), End: Pos(64, 59)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Closure_131/test//com/google/javascript/jscomp/ConvertToDottedPropertiesTest.java",
            "name": "testDoNotConvert",
            "begin": "Pos(41, 10)",
            "end": "Pos(65, 3)",
            "begin_line_no": 41,
            "end_line_no": 65,
            "child": [
                "Begin: Pos(42, 5)\nEnd: Pos(42, 21)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(43, 5)\nEnd: Pos(43, 22)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(44, 5)\nEnd: Pos(44, 23)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(45, 5)\nEnd: Pos(45, 23)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(46, 5)\nEnd: Pos(46, 23)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(47, 5)\nEnd: Pos(47, 23)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(48, 5)\nEnd: Pos(48, 23)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(49, 5)\nEnd: Pos(49, 23)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(50, 5)\nEnd: Pos(50, 24)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(51, 5)\nEnd: Pos(51, 28)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(52, 5)\nEnd: Pos(52, 21)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(53, 5)\nEnd: Pos(53, 21)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(54, 5)\nEnd: Pos(54, 21)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(55, 5)\nEnd: Pos(55, 23)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(56, 5)\nEnd: Pos(56, 29)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(58, 5)\nEnd: Pos(58, 29)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(61, 5)\nEnd: Pos(61, 41)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(64, 5)\nEnd: Pos(64, 59)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "  public void testDoNotConvert$catena_0() {\n    testSame(\"a[0]\");                                                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testSame(\"a['']\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[' ']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[',']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[';']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[':']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['.']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['0']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p ']\");                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p' + '']\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[P]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[$]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p()]\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['default']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Ignorable control characters are ok in Java identifiers, but not in JS.\n    try{ testSame(\"a['A\\u0004']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // upper case lower half of o from phonetic extensions set.\n    // valid in Safari, not in Firefox, IE.\n    try{ test(\"a['\\u1d17A']\", \"a['\\u1d17A']\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Latin capital N with tilde - nice if we handled it, but for now let's\n    // only allow simple Latin (aka ASCII) to be converted.\n    try{ test(\"a['\\u00d1StuffAfter']\", \"a['\\u00d1StuffAfter']\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testDoNotConvert$catena_1() {\n    try{ testSame(\"a[0]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    testSame(\"a['']\");                                                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testSame(\"a[' ']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[',']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[';']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[':']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['.']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['0']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p ']\");                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p' + '']\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[P]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[$]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p()]\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['default']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Ignorable control characters are ok in Java identifiers, but not in JS.\n    try{ testSame(\"a['A\\u0004']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // upper case lower half of o from phonetic extensions set.\n    // valid in Safari, not in Firefox, IE.\n    try{ test(\"a['\\u1d17A']\", \"a['\\u1d17A']\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Latin capital N with tilde - nice if we handled it, but for now let's\n    // only allow simple Latin (aka ASCII) to be converted.\n    try{ test(\"a['\\u00d1StuffAfter']\", \"a['\\u00d1StuffAfter']\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testDoNotConvert$catena_2() {\n    try{ testSame(\"a[0]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['']\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    testSame(\"a[' ']\");                                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testSame(\"a[',']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[';']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[':']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['.']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['0']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p ']\");                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p' + '']\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[P]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[$]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p()]\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['default']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Ignorable control characters are ok in Java identifiers, but not in JS.\n    try{ testSame(\"a['A\\u0004']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // upper case lower half of o from phonetic extensions set.\n    // valid in Safari, not in Firefox, IE.\n    try{ test(\"a['\\u1d17A']\", \"a['\\u1d17A']\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Latin capital N with tilde - nice if we handled it, but for now let's\n    // only allow simple Latin (aka ASCII) to be converted.\n    try{ test(\"a['\\u00d1StuffAfter']\", \"a['\\u00d1StuffAfter']\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testDoNotConvert$catena_3() {\n    try{ testSame(\"a[0]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['']\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[' ']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    testSame(\"a[',']\");                                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testSame(\"a[';']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[':']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['.']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['0']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p ']\");                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p' + '']\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[P]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[$]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p()]\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['default']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Ignorable control characters are ok in Java identifiers, but not in JS.\n    try{ testSame(\"a['A\\u0004']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // upper case lower half of o from phonetic extensions set.\n    // valid in Safari, not in Firefox, IE.\n    try{ test(\"a['\\u1d17A']\", \"a['\\u1d17A']\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Latin capital N with tilde - nice if we handled it, but for now let's\n    // only allow simple Latin (aka ASCII) to be converted.\n    try{ test(\"a['\\u00d1StuffAfter']\", \"a['\\u00d1StuffAfter']\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testDoNotConvert$catena_4() {\n    try{ testSame(\"a[0]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['']\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[' ']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[',']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    testSame(\"a[';']\");                                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testSame(\"a[':']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['.']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['0']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p ']\");                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p' + '']\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[P]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[$]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p()]\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['default']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Ignorable control characters are ok in Java identifiers, but not in JS.\n    try{ testSame(\"a['A\\u0004']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // upper case lower half of o from phonetic extensions set.\n    // valid in Safari, not in Firefox, IE.\n    try{ test(\"a['\\u1d17A']\", \"a['\\u1d17A']\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Latin capital N with tilde - nice if we handled it, but for now let's\n    // only allow simple Latin (aka ASCII) to be converted.\n    try{ test(\"a['\\u00d1StuffAfter']\", \"a['\\u00d1StuffAfter']\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testDoNotConvert$catena_5() {\n    try{ testSame(\"a[0]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['']\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[' ']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[',']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[';']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    testSame(\"a[':']\");                                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testSame(\"a['.']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['0']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p ']\");                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p' + '']\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[P]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[$]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p()]\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['default']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Ignorable control characters are ok in Java identifiers, but not in JS.\n    try{ testSame(\"a['A\\u0004']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // upper case lower half of o from phonetic extensions set.\n    // valid in Safari, not in Firefox, IE.\n    try{ test(\"a['\\u1d17A']\", \"a['\\u1d17A']\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Latin capital N with tilde - nice if we handled it, but for now let's\n    // only allow simple Latin (aka ASCII) to be converted.\n    try{ test(\"a['\\u00d1StuffAfter']\", \"a['\\u00d1StuffAfter']\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testDoNotConvert$catena_6() {\n    try{ testSame(\"a[0]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['']\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[' ']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[',']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[';']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[':']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    testSame(\"a['.']\");                                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testSame(\"a['0']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p ']\");                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p' + '']\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[P]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[$]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p()]\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['default']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Ignorable control characters are ok in Java identifiers, but not in JS.\n    try{ testSame(\"a['A\\u0004']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // upper case lower half of o from phonetic extensions set.\n    // valid in Safari, not in Firefox, IE.\n    try{ test(\"a['\\u1d17A']\", \"a['\\u1d17A']\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Latin capital N with tilde - nice if we handled it, but for now let's\n    // only allow simple Latin (aka ASCII) to be converted.\n    try{ test(\"a['\\u00d1StuffAfter']\", \"a['\\u00d1StuffAfter']\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testDoNotConvert$catena_7() {\n    try{ testSame(\"a[0]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['']\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[' ']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[',']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[';']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[':']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['.']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    testSame(\"a['0']\");                                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testSame(\"a['p ']\");                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p' + '']\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[P]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[$]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p()]\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['default']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Ignorable control characters are ok in Java identifiers, but not in JS.\n    try{ testSame(\"a['A\\u0004']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // upper case lower half of o from phonetic extensions set.\n    // valid in Safari, not in Firefox, IE.\n    try{ test(\"a['\\u1d17A']\", \"a['\\u1d17A']\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Latin capital N with tilde - nice if we handled it, but for now let's\n    // only allow simple Latin (aka ASCII) to be converted.\n    try{ test(\"a['\\u00d1StuffAfter']\", \"a['\\u00d1StuffAfter']\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testDoNotConvert$catena_8() {\n    try{ testSame(\"a[0]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['']\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[' ']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[',']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[';']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[':']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['.']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['0']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    testSame(\"a['p ']\");                                                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testSame(\"a['p' + '']\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[P]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[$]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p()]\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['default']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Ignorable control characters are ok in Java identifiers, but not in JS.\n    try{ testSame(\"a['A\\u0004']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // upper case lower half of o from phonetic extensions set.\n    // valid in Safari, not in Firefox, IE.\n    try{ test(\"a['\\u1d17A']\", \"a['\\u1d17A']\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Latin capital N with tilde - nice if we handled it, but for now let's\n    // only allow simple Latin (aka ASCII) to be converted.\n    try{ test(\"a['\\u00d1StuffAfter']\", \"a['\\u00d1StuffAfter']\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testDoNotConvert$catena_9() {\n    try{ testSame(\"a[0]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['']\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[' ']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[',']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[';']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[':']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['.']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['0']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p ']\");                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    testSame(\"a['p' + '']\");                                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testSame(\"a[p]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[P]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[$]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p()]\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['default']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Ignorable control characters are ok in Java identifiers, but not in JS.\n    try{ testSame(\"a['A\\u0004']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // upper case lower half of o from phonetic extensions set.\n    // valid in Safari, not in Firefox, IE.\n    try{ test(\"a['\\u1d17A']\", \"a['\\u1d17A']\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Latin capital N with tilde - nice if we handled it, but for now let's\n    // only allow simple Latin (aka ASCII) to be converted.\n    try{ test(\"a['\\u00d1StuffAfter']\", \"a['\\u00d1StuffAfter']\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testDoNotConvert$catena_10() {\n    try{ testSame(\"a[0]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['']\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[' ']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[',']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[';']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[':']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['.']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['0']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p ']\");                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p' + '']\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    testSame(\"a[p]\");                                                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testSame(\"a[P]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[$]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p()]\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['default']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Ignorable control characters are ok in Java identifiers, but not in JS.\n    try{ testSame(\"a['A\\u0004']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // upper case lower half of o from phonetic extensions set.\n    // valid in Safari, not in Firefox, IE.\n    try{ test(\"a['\\u1d17A']\", \"a['\\u1d17A']\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Latin capital N with tilde - nice if we handled it, but for now let's\n    // only allow simple Latin (aka ASCII) to be converted.\n    try{ test(\"a['\\u00d1StuffAfter']\", \"a['\\u00d1StuffAfter']\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testDoNotConvert$catena_11() {\n    try{ testSame(\"a[0]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['']\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[' ']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[',']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[';']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[':']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['.']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['0']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p ']\");                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p' + '']\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    testSame(\"a[P]\");                                                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testSame(\"a[$]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p()]\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['default']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Ignorable control characters are ok in Java identifiers, but not in JS.\n    try{ testSame(\"a['A\\u0004']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // upper case lower half of o from phonetic extensions set.\n    // valid in Safari, not in Firefox, IE.\n    try{ test(\"a['\\u1d17A']\", \"a['\\u1d17A']\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Latin capital N with tilde - nice if we handled it, but for now let's\n    // only allow simple Latin (aka ASCII) to be converted.\n    try{ test(\"a['\\u00d1StuffAfter']\", \"a['\\u00d1StuffAfter']\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testDoNotConvert$catena_12() {\n    try{ testSame(\"a[0]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['']\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[' ']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[',']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[';']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[':']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['.']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['0']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p ']\");                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p' + '']\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[P]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    testSame(\"a[$]\");                                                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testSame(\"a[p()]\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['default']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Ignorable control characters are ok in Java identifiers, but not in JS.\n    try{ testSame(\"a['A\\u0004']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // upper case lower half of o from phonetic extensions set.\n    // valid in Safari, not in Firefox, IE.\n    try{ test(\"a['\\u1d17A']\", \"a['\\u1d17A']\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Latin capital N with tilde - nice if we handled it, but for now let's\n    // only allow simple Latin (aka ASCII) to be converted.\n    try{ test(\"a['\\u00d1StuffAfter']\", \"a['\\u00d1StuffAfter']\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testDoNotConvert$catena_13() {\n    try{ testSame(\"a[0]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['']\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[' ']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[',']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[';']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[':']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['.']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['0']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p ']\");                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p' + '']\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[P]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[$]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    testSame(\"a[p()]\");                                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testSame(\"a['default']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Ignorable control characters are ok in Java identifiers, but not in JS.\n    try{ testSame(\"a['A\\u0004']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // upper case lower half of o from phonetic extensions set.\n    // valid in Safari, not in Firefox, IE.\n    try{ test(\"a['\\u1d17A']\", \"a['\\u1d17A']\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Latin capital N with tilde - nice if we handled it, but for now let's\n    // only allow simple Latin (aka ASCII) to be converted.\n    try{ test(\"a['\\u00d1StuffAfter']\", \"a['\\u00d1StuffAfter']\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testDoNotConvert$catena_14() {\n    try{ testSame(\"a[0]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['']\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[' ']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[',']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[';']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[':']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['.']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['0']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p ']\");                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p' + '']\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[P]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[$]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p()]\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    testSame(\"a['default']\");                                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n    // Ignorable control characters are ok in Java identifiers, but not in JS.\n    try{ testSame(\"a['A\\u0004']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // upper case lower half of o from phonetic extensions set.\n    // valid in Safari, not in Firefox, IE.\n    try{ test(\"a['\\u1d17A']\", \"a['\\u1d17A']\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Latin capital N with tilde - nice if we handled it, but for now let's\n    // only allow simple Latin (aka ASCII) to be converted.\n    try{ test(\"a['\\u00d1StuffAfter']\", \"a['\\u00d1StuffAfter']\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testDoNotConvert$catena_15() {\n    try{ testSame(\"a[0]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['']\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[' ']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[',']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[';']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[':']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['.']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['0']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p ']\");                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p' + '']\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[P]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[$]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p()]\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['default']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Ignorable control characters are ok in Java identifiers, but not in JS.\n    testSame(\"a['A\\u0004']\");                                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n    // upper case lower half of o from phonetic extensions set.\n    // valid in Safari, not in Firefox, IE.\n    try{ test(\"a['\\u1d17A']\", \"a['\\u1d17A']\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Latin capital N with tilde - nice if we handled it, but for now let's\n    // only allow simple Latin (aka ASCII) to be converted.\n    try{ test(\"a['\\u00d1StuffAfter']\", \"a['\\u00d1StuffAfter']\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testDoNotConvert$catena_16() {\n    try{ testSame(\"a[0]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['']\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[' ']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[',']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[';']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[':']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['.']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['0']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p ']\");                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p' + '']\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[P]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[$]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p()]\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['default']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Ignorable control characters are ok in Java identifiers, but not in JS.\n    try{ testSame(\"a['A\\u0004']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // upper case lower half of o from phonetic extensions set.\n    // valid in Safari, not in Firefox, IE.\n    test(\"a['\\u1d17A']\", \"a['\\u1d17A']\");                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n    // Latin capital N with tilde - nice if we handled it, but for now let's\n    // only allow simple Latin (aka ASCII) to be converted.\n    try{ test(\"a['\\u00d1StuffAfter']\", \"a['\\u00d1StuffAfter']\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testDoNotConvert$catena_17() {\n    try{ testSame(\"a[0]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['']\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[' ']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[',']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[';']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[':']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['.']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['0']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p ']\");                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p' + '']\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[P]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[$]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p()]\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['default']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Ignorable control characters are ok in Java identifiers, but not in JS.\n    try{ testSame(\"a['A\\u0004']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // upper case lower half of o from phonetic extensions set.\n    // valid in Safari, not in Firefox, IE.\n    try{ test(\"a['\\u1d17A']\", \"a['\\u1d17A']\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Latin capital N with tilde - nice if we handled it, but for now let's\n    // only allow simple Latin (aka ASCII) to be converted.\n    test(\"a['\\u00d1StuffAfter']\", \"a['\\u00d1StuffAfter']\");                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            ],
            "func": {
                "0": "  public void testDoNotConvert$catena_0() {\n    testSame(\"a[0]\");                                                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testSame(\"a['']\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[' ']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[',']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[';']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[':']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['.']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['0']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p ']\");                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p' + '']\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[P]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[$]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p()]\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['default']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Ignorable control characters are ok in Java identifiers, but not in JS.\n    try{ testSame(\"a['A\\u0004']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // upper case lower half of o from phonetic extensions set.\n    // valid in Safari, not in Firefox, IE.\n    try{ test(\"a['\\u1d17A']\", \"a['\\u1d17A']\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Latin capital N with tilde - nice if we handled it, but for now let's\n    // only allow simple Latin (aka ASCII) to be converted.\n    try{ test(\"a['\\u00d1StuffAfter']\", \"a['\\u00d1StuffAfter']\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "1": "  public void testDoNotConvert$catena_1() {\n    try{ testSame(\"a[0]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    testSame(\"a['']\");                                                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testSame(\"a[' ']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[',']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[';']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[':']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['.']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['0']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p ']\");                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p' + '']\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[P]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[$]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p()]\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['default']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Ignorable control characters are ok in Java identifiers, but not in JS.\n    try{ testSame(\"a['A\\u0004']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // upper case lower half of o from phonetic extensions set.\n    // valid in Safari, not in Firefox, IE.\n    try{ test(\"a['\\u1d17A']\", \"a['\\u1d17A']\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Latin capital N with tilde - nice if we handled it, but for now let's\n    // only allow simple Latin (aka ASCII) to be converted.\n    try{ test(\"a['\\u00d1StuffAfter']\", \"a['\\u00d1StuffAfter']\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "2": "  public void testDoNotConvert$catena_2() {\n    try{ testSame(\"a[0]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['']\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    testSame(\"a[' ']\");                                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testSame(\"a[',']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[';']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[':']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['.']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['0']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p ']\");                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p' + '']\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[P]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[$]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p()]\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['default']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Ignorable control characters are ok in Java identifiers, but not in JS.\n    try{ testSame(\"a['A\\u0004']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // upper case lower half of o from phonetic extensions set.\n    // valid in Safari, not in Firefox, IE.\n    try{ test(\"a['\\u1d17A']\", \"a['\\u1d17A']\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Latin capital N with tilde - nice if we handled it, but for now let's\n    // only allow simple Latin (aka ASCII) to be converted.\n    try{ test(\"a['\\u00d1StuffAfter']\", \"a['\\u00d1StuffAfter']\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "3": "  public void testDoNotConvert$catena_3() {\n    try{ testSame(\"a[0]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['']\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[' ']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    testSame(\"a[',']\");                                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testSame(\"a[';']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[':']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['.']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['0']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p ']\");                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p' + '']\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[P]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[$]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p()]\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['default']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Ignorable control characters are ok in Java identifiers, but not in JS.\n    try{ testSame(\"a['A\\u0004']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // upper case lower half of o from phonetic extensions set.\n    // valid in Safari, not in Firefox, IE.\n    try{ test(\"a['\\u1d17A']\", \"a['\\u1d17A']\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Latin capital N with tilde - nice if we handled it, but for now let's\n    // only allow simple Latin (aka ASCII) to be converted.\n    try{ test(\"a['\\u00d1StuffAfter']\", \"a['\\u00d1StuffAfter']\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "4": "  public void testDoNotConvert$catena_4() {\n    try{ testSame(\"a[0]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['']\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[' ']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[',']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    testSame(\"a[';']\");                                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testSame(\"a[':']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['.']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['0']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p ']\");                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p' + '']\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[P]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[$]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p()]\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['default']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Ignorable control characters are ok in Java identifiers, but not in JS.\n    try{ testSame(\"a['A\\u0004']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // upper case lower half of o from phonetic extensions set.\n    // valid in Safari, not in Firefox, IE.\n    try{ test(\"a['\\u1d17A']\", \"a['\\u1d17A']\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Latin capital N with tilde - nice if we handled it, but for now let's\n    // only allow simple Latin (aka ASCII) to be converted.\n    try{ test(\"a['\\u00d1StuffAfter']\", \"a['\\u00d1StuffAfter']\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "5": "  public void testDoNotConvert$catena_5() {\n    try{ testSame(\"a[0]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['']\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[' ']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[',']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[';']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    testSame(\"a[':']\");                                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testSame(\"a['.']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['0']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p ']\");                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p' + '']\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[P]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[$]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p()]\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['default']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Ignorable control characters are ok in Java identifiers, but not in JS.\n    try{ testSame(\"a['A\\u0004']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // upper case lower half of o from phonetic extensions set.\n    // valid in Safari, not in Firefox, IE.\n    try{ test(\"a['\\u1d17A']\", \"a['\\u1d17A']\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Latin capital N with tilde - nice if we handled it, but for now let's\n    // only allow simple Latin (aka ASCII) to be converted.\n    try{ test(\"a['\\u00d1StuffAfter']\", \"a['\\u00d1StuffAfter']\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "6": "  public void testDoNotConvert$catena_6() {\n    try{ testSame(\"a[0]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['']\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[' ']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[',']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[';']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[':']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    testSame(\"a['.']\");                                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testSame(\"a['0']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p ']\");                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p' + '']\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[P]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[$]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p()]\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['default']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Ignorable control characters are ok in Java identifiers, but not in JS.\n    try{ testSame(\"a['A\\u0004']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // upper case lower half of o from phonetic extensions set.\n    // valid in Safari, not in Firefox, IE.\n    try{ test(\"a['\\u1d17A']\", \"a['\\u1d17A']\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Latin capital N with tilde - nice if we handled it, but for now let's\n    // only allow simple Latin (aka ASCII) to be converted.\n    try{ test(\"a['\\u00d1StuffAfter']\", \"a['\\u00d1StuffAfter']\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "7": "  public void testDoNotConvert$catena_7() {\n    try{ testSame(\"a[0]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['']\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[' ']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[',']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[';']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[':']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['.']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    testSame(\"a['0']\");                                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testSame(\"a['p ']\");                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p' + '']\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[P]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[$]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p()]\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['default']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Ignorable control characters are ok in Java identifiers, but not in JS.\n    try{ testSame(\"a['A\\u0004']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // upper case lower half of o from phonetic extensions set.\n    // valid in Safari, not in Firefox, IE.\n    try{ test(\"a['\\u1d17A']\", \"a['\\u1d17A']\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Latin capital N with tilde - nice if we handled it, but for now let's\n    // only allow simple Latin (aka ASCII) to be converted.\n    try{ test(\"a['\\u00d1StuffAfter']\", \"a['\\u00d1StuffAfter']\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "8": "  public void testDoNotConvert$catena_8() {\n    try{ testSame(\"a[0]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['']\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[' ']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[',']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[';']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[':']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['.']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['0']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    testSame(\"a['p ']\");                                                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testSame(\"a['p' + '']\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[P]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[$]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p()]\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['default']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Ignorable control characters are ok in Java identifiers, but not in JS.\n    try{ testSame(\"a['A\\u0004']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // upper case lower half of o from phonetic extensions set.\n    // valid in Safari, not in Firefox, IE.\n    try{ test(\"a['\\u1d17A']\", \"a['\\u1d17A']\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Latin capital N with tilde - nice if we handled it, but for now let's\n    // only allow simple Latin (aka ASCII) to be converted.\n    try{ test(\"a['\\u00d1StuffAfter']\", \"a['\\u00d1StuffAfter']\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "9": "  public void testDoNotConvert$catena_9() {\n    try{ testSame(\"a[0]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['']\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[' ']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[',']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[';']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[':']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['.']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['0']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p ']\");                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    testSame(\"a['p' + '']\");                                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testSame(\"a[p]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[P]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[$]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p()]\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['default']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Ignorable control characters are ok in Java identifiers, but not in JS.\n    try{ testSame(\"a['A\\u0004']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // upper case lower half of o from phonetic extensions set.\n    // valid in Safari, not in Firefox, IE.\n    try{ test(\"a['\\u1d17A']\", \"a['\\u1d17A']\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Latin capital N with tilde - nice if we handled it, but for now let's\n    // only allow simple Latin (aka ASCII) to be converted.\n    try{ test(\"a['\\u00d1StuffAfter']\", \"a['\\u00d1StuffAfter']\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "10": "  public void testDoNotConvert$catena_10() {\n    try{ testSame(\"a[0]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['']\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[' ']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[',']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[';']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[':']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['.']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['0']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p ']\");                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p' + '']\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    testSame(\"a[p]\");                                                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testSame(\"a[P]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[$]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p()]\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['default']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Ignorable control characters are ok in Java identifiers, but not in JS.\n    try{ testSame(\"a['A\\u0004']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // upper case lower half of o from phonetic extensions set.\n    // valid in Safari, not in Firefox, IE.\n    try{ test(\"a['\\u1d17A']\", \"a['\\u1d17A']\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Latin capital N with tilde - nice if we handled it, but for now let's\n    // only allow simple Latin (aka ASCII) to be converted.\n    try{ test(\"a['\\u00d1StuffAfter']\", \"a['\\u00d1StuffAfter']\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "11": "  public void testDoNotConvert$catena_11() {\n    try{ testSame(\"a[0]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['']\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[' ']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[',']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[';']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[':']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['.']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['0']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p ']\");                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p' + '']\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    testSame(\"a[P]\");                                                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testSame(\"a[$]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p()]\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['default']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Ignorable control characters are ok in Java identifiers, but not in JS.\n    try{ testSame(\"a['A\\u0004']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // upper case lower half of o from phonetic extensions set.\n    // valid in Safari, not in Firefox, IE.\n    try{ test(\"a['\\u1d17A']\", \"a['\\u1d17A']\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Latin capital N with tilde - nice if we handled it, but for now let's\n    // only allow simple Latin (aka ASCII) to be converted.\n    try{ test(\"a['\\u00d1StuffAfter']\", \"a['\\u00d1StuffAfter']\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "12": "  public void testDoNotConvert$catena_12() {\n    try{ testSame(\"a[0]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['']\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[' ']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[',']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[';']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[':']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['.']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['0']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p ']\");                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p' + '']\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[P]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    testSame(\"a[$]\");                                                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testSame(\"a[p()]\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['default']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Ignorable control characters are ok in Java identifiers, but not in JS.\n    try{ testSame(\"a['A\\u0004']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // upper case lower half of o from phonetic extensions set.\n    // valid in Safari, not in Firefox, IE.\n    try{ test(\"a['\\u1d17A']\", \"a['\\u1d17A']\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Latin capital N with tilde - nice if we handled it, but for now let's\n    // only allow simple Latin (aka ASCII) to be converted.\n    try{ test(\"a['\\u00d1StuffAfter']\", \"a['\\u00d1StuffAfter']\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "13": "  public void testDoNotConvert$catena_13() {\n    try{ testSame(\"a[0]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['']\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[' ']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[',']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[';']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[':']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['.']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['0']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p ']\");                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p' + '']\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[P]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[$]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    testSame(\"a[p()]\");                                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testSame(\"a['default']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Ignorable control characters are ok in Java identifiers, but not in JS.\n    try{ testSame(\"a['A\\u0004']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // upper case lower half of o from phonetic extensions set.\n    // valid in Safari, not in Firefox, IE.\n    try{ test(\"a['\\u1d17A']\", \"a['\\u1d17A']\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Latin capital N with tilde - nice if we handled it, but for now let's\n    // only allow simple Latin (aka ASCII) to be converted.\n    try{ test(\"a['\\u00d1StuffAfter']\", \"a['\\u00d1StuffAfter']\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "14": "  public void testDoNotConvert$catena_14() {\n    try{ testSame(\"a[0]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['']\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[' ']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[',']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[';']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[':']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['.']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['0']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p ']\");                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p' + '']\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[P]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[$]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p()]\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    testSame(\"a['default']\");                                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n    // Ignorable control characters are ok in Java identifiers, but not in JS.\n    try{ testSame(\"a['A\\u0004']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // upper case lower half of o from phonetic extensions set.\n    // valid in Safari, not in Firefox, IE.\n    try{ test(\"a['\\u1d17A']\", \"a['\\u1d17A']\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Latin capital N with tilde - nice if we handled it, but for now let's\n    // only allow simple Latin (aka ASCII) to be converted.\n    try{ test(\"a['\\u00d1StuffAfter']\", \"a['\\u00d1StuffAfter']\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "15": "  public void testDoNotConvert$catena_15() {\n    try{ testSame(\"a[0]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['']\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[' ']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[',']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[';']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[':']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['.']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['0']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p ']\");                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p' + '']\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[P]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[$]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p()]\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['default']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Ignorable control characters are ok in Java identifiers, but not in JS.\n    testSame(\"a['A\\u0004']\");                                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n    // upper case lower half of o from phonetic extensions set.\n    // valid in Safari, not in Firefox, IE.\n    try{ test(\"a['\\u1d17A']\", \"a['\\u1d17A']\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Latin capital N with tilde - nice if we handled it, but for now let's\n    // only allow simple Latin (aka ASCII) to be converted.\n    try{ test(\"a['\\u00d1StuffAfter']\", \"a['\\u00d1StuffAfter']\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "16": "  public void testDoNotConvert$catena_16() {\n    try{ testSame(\"a[0]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['']\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[' ']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[',']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[';']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[':']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['.']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['0']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p ']\");                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p' + '']\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[P]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[$]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p()]\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['default']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Ignorable control characters are ok in Java identifiers, but not in JS.\n    try{ testSame(\"a['A\\u0004']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // upper case lower half of o from phonetic extensions set.\n    // valid in Safari, not in Firefox, IE.\n    test(\"a['\\u1d17A']\", \"a['\\u1d17A']\");                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n    // Latin capital N with tilde - nice if we handled it, but for now let's\n    // only allow simple Latin (aka ASCII) to be converted.\n    try{ test(\"a['\\u00d1StuffAfter']\", \"a['\\u00d1StuffAfter']\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "17": "  public void testDoNotConvert$catena_17() {\n    try{ testSame(\"a[0]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['']\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[' ']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[',']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[';']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[':']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['.']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['0']\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p ']\");                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['p' + '']\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[P]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[$]\");                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a[p()]\");                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"a['default']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Ignorable control characters are ok in Java identifiers, but not in JS.\n    try{ testSame(\"a['A\\u0004']\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    // upper case lower half of o from phonetic extensions set.\n    // valid in Safari, not in Firefox, IE.\n    try{ test(\"a['\\u1d17A']\", \"a['\\u1d17A']\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    // Latin capital N with tilde - nice if we handled it, but for now let's\n    // only allow simple Latin (aka ASCII) to be converted.\n    test(\"a['\\u00d1StuffAfter']\", \"a['\\u00d1StuffAfter']\");                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            }
        }
    },
    "01": {
        "failing_tests": [
            "com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testQuotedProps$catena_3",
            "com.google.javascript.jscomp.ConvertToDottedPropertiesTest::testDoNotConvert$catena_15"
        ]
    }
}