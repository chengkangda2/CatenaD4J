{
    "original": {
        "num_of_hunks": 3,
        "0": {
            "file_name": "src/org/mockito/internal/MockHandler.java",
            "from_line_no": 77,
            "to_line_no": 77,
            "replaced_with": "            if (((MockAwareVerificationMode) verificationMode).getMock() == invocation.getMock()) {                \n",
            "replaced": "            if (verificationMode instanceof MockAwareVerificationMode && ((MockAwareVerificationMode) verificationMode).getMock() == invocation.getMock()) {                \n",
            "patch_type": "replace",
            "next_line_no": 78
        },
        "1": {
            "file_name": "src/org/mockito/internal/MockHandler.java",
            "replaced_with": "            } else {\n",
            "patch_type": "insert",
            "next_line_no": 81
        },
        "2": {
            "file_name": "src/org/mockito/internal/MockHandler.java",
            "replaced_with": "                mockingProgress.verificationStarted(verificationMode);\n",
            "patch_type": "insert",
            "next_line_no": 83
        }
    },
    "method": {
        "failing_tests": [
            "org.mockitousage.bugs.VerifyingWithAnExtraCallToADifferentMockTest::shouldAllowVerifyingWhenOtherMockCallIsInTheSameLine"
        ],
        "org.mockitousage.bugs.VerifyingWithAnExtraCallToADifferentMockTest::shouldAllowVerifyingWhenOtherMockCallIsInTheSameLine": {
            "file_path": "test/org/mockitousage/bugs/VerifyingWithAnExtraCallToADifferentMockTest.java",
            "check": [
                "StatementExpression is in safe: <.verify>"
            ],
            "Instance": "Begin: Pos(21, 5)\nEnd: Pos(35, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Mockito_13/test//org/mockitousage/bugs/VerifyingWithAnExtraCallToADifferentMockTest.java\nName: shouldAllowVerifyingWhenOtherMockCallIsInTheSameLine\nChilds: [StatementAssertion<Begin: Pos(30, 9), End: Pos(30, 57)>,\nStatementAssertion<Begin: Pos(33, 13), End: Pos(33, 19)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Mockito_13/test//org/mockitousage/bugs/VerifyingWithAnExtraCallToADifferentMockTest.java",
            "name": "shouldAllowVerifyingWhenOtherMockCallIsInTheSameLine",
            "begin": "Pos(21, 5)",
            "end": "Pos(35, 5)",
            "begin_line_no": 21,
            "end_line_no": 35,
            "child": [
                "Begin: Pos(30, 9)\nEnd: Pos(30, 57)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(33, 13)\nEnd: Pos(33, 19)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    @Test \n    public void shouldAllowVerifyingWhenOtherMockCallIsInTheSameLine$catena_0() {\n        //given\n        when(mock.otherMethod()).thenReturn(\"foo\");\n        \n        //when\n        mockTwo.simpleMethod(\"foo\");\n        \n        //then\n        verify(mockTwo).simpleMethod(mock.otherMethod());                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try {\n            verify(mockTwo, never()).simpleMethod(mock.otherMethod());\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NeverWantedButInvoked e) {}\n    }",
                "    @Test \n    public void shouldAllowVerifyingWhenOtherMockCallIsInTheSameLine$catena_1() {\n        //given\n        when(mock.otherMethod()).thenReturn(\"foo\");\n        \n        //when\n        mockTwo.simpleMethod(\"foo\");\n        \n        //then\n        try{ verify(mockTwo).simpleMethod(mock.otherMethod());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            verify(mockTwo, never()).simpleMethod(mock.otherMethod());\n            fail();                                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (NeverWantedButInvoked e) {}\n    }"
            ],
            "func": {
                "0": "    @Test \n    public void shouldAllowVerifyingWhenOtherMockCallIsInTheSameLine$catena_0() {\n        //given\n        when(mock.otherMethod()).thenReturn(\"foo\");\n        \n        //when\n        mockTwo.simpleMethod(\"foo\");\n        \n        //then\n        verify(mockTwo).simpleMethod(mock.otherMethod());                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try {\n            verify(mockTwo, never()).simpleMethod(mock.otherMethod());\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NeverWantedButInvoked e) {}\n    }",
                "1": "    @Test \n    public void shouldAllowVerifyingWhenOtherMockCallIsInTheSameLine$catena_1() {\n        //given\n        when(mock.otherMethod()).thenReturn(\"foo\");\n        \n        //when\n        mockTwo.simpleMethod(\"foo\");\n        \n        //then\n        try{ verify(mockTwo).simpleMethod(mock.otherMethod());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            verify(mockTwo, never()).simpleMethod(mock.otherMethod());\n            fail();                                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (NeverWantedButInvoked e) {}\n    }"
            }
        }
    },
    "011": {
        "failing_tests": [
            "org.mockitousage.bugs.VerifyingWithAnExtraCallToADifferentMockTest::shouldAllowVerifyingWhenOtherMockCallIsInTheSameLine$catena_1"
        ]
    }
}