{
    "original": {
        "num_of_hunks": 5,
        "0": {
            "file_name": "src/com/google/javascript/jscomp/FoldConstants.java",
            "from_line_no": 1477,
            "to_line_no": 1477,
            "replaced_with": "    StringBuilder sb = null;\n",
            "replaced": "    StringBuilder sb = new StringBuilder();\n",
            "patch_type": "replace",
            "next_line_no": 1478
        },
        "1": {
            "file_name": "src/com/google/javascript/jscomp/FoldConstants.java",
            "from_line_no": 1483,
            "to_line_no": 1483,
            "replaced_with": "        if (sb == null) {\n          sb = new StringBuilder();\n        } else {\n",
            "replaced": "        if (sb.length() > 0) {\n",
            "patch_type": "replace",
            "next_line_no": 1484
        },
        "2": {
            "file_name": "src/com/google/javascript/jscomp/FoldConstants.java",
            "from_line_no": 1488,
            "to_line_no": 1488,
            "replaced_with": "        if (sb != null) {\n",
            "replaced": "        if (sb.length() > 0) {\n",
            "patch_type": "replace",
            "next_line_no": 1489
        },
        "3": {
            "file_name": "src/com/google/javascript/jscomp/FoldConstants.java",
            "from_line_no": 1492,
            "to_line_no": 1492,
            "replaced_with": "          sb = null;\n",
            "replaced": "          sb = new StringBuilder();\n",
            "patch_type": "replace",
            "next_line_no": 1493
        },
        "4": {
            "file_name": "src/com/google/javascript/jscomp/FoldConstants.java",
            "from_line_no": 1500,
            "to_line_no": 1500,
            "replaced_with": "    if (sb != null) {\n",
            "replaced": "    if (sb.length() > 0) {\n",
            "patch_type": "replace",
            "next_line_no": 1501
        }
    },
    "method": {
        "failing_tests": [
            "com.google.javascript.jscomp.FoldConstantsTest::testStringJoinAdd"
        ],
        "com.google.javascript.jscomp.FoldConstantsTest::testStringJoinAdd": {
            "file_path": "test/com/google/javascript/jscomp/FoldConstantsTest.java",
            "Instance": "Begin: Pos(623, 10)\nEnd: Pos(658, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Closure_105/test//com/google/javascript/jscomp/FoldConstantsTest.java\nName: testStringJoinAdd\nChilds: [StatementAssertion<Begin: Pos(624, 5), End: Pos(624, 56)>,\nStatementAssertion<Begin: Pos(625, 5), End: Pos(625, 41)>,\nStatementAssertion<Begin: Pos(626, 5), End: Pos(626, 45)>,\nStatementAssertion<Begin: Pos(627, 5), End: Pos(627, 59)>,\nStatementAssertion<Begin: Pos(628, 5), End: Pos(628, 86)>,\nStatementAssertion<Begin: Pos(629, 5), End: Pos(629, 82)>,\nStatementAssertion<Begin: Pos(630, 5), End: Pos(630, 82)>,\nStatementAssertion<Begin: Pos(633, 5), End: Pos(633, 50)>,\nStatementAssertion<Begin: Pos(634, 5), End: Pos(634, 50)>,\nStatementAssertion<Begin: Pos(637, 5), End: Pos(637, 58)>,\nStatementAssertion<Begin: Pos(638, 5), End: Pos(638, 56)>,\nStatementAssertion<Begin: Pos(639, 5), End: Pos(639, 58)>,\nStatementAssertion<Begin: Pos(642, 5), End: Pos(643, 74)>,\nStatementAssertion<Begin: Pos(646, 5), End: Pos(646, 40)>,\nStatementAssertion<Begin: Pos(647, 5), End: Pos(647, 44)>,\nStatementAssertion<Begin: Pos(649, 5), End: Pos(649, 76)>,\nStatementAssertion<Begin: Pos(650, 5), End: Pos(651, 42)>,\nStatementAssertion<Begin: Pos(653, 5), End: Pos(654, 47)>,\nStatementAssertion<Begin: Pos(656, 5), End: Pos(657, 34)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Closure_105/test//com/google/javascript/jscomp/FoldConstantsTest.java",
            "name": "testStringJoinAdd",
            "begin": "Pos(623, 10)",
            "end": "Pos(658, 3)",
            "begin_line_no": 623,
            "end_line_no": 658,
            "child": [
                "Begin: Pos(624, 5)\nEnd: Pos(624, 56)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(625, 5)\nEnd: Pos(625, 41)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(626, 5)\nEnd: Pos(626, 45)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(627, 5)\nEnd: Pos(627, 59)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(628, 5)\nEnd: Pos(628, 86)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(629, 5)\nEnd: Pos(629, 82)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(630, 5)\nEnd: Pos(630, 82)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(633, 5)\nEnd: Pos(633, 50)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(634, 5)\nEnd: Pos(634, 50)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(637, 5)\nEnd: Pos(637, 58)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(638, 5)\nEnd: Pos(638, 56)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(639, 5)\nEnd: Pos(639, 58)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(642, 5)\nEnd: Pos(643, 74)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(646, 5)\nEnd: Pos(646, 40)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(647, 5)\nEnd: Pos(647, 44)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(649, 5)\nEnd: Pos(649, 76)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(650, 5)\nEnd: Pos(651, 42)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(653, 5)\nEnd: Pos(654, 47)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(656, 5)\nEnd: Pos(657, 34)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "  public void testStringJoinAdd$catena_0() {\n    fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\", \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join(\\\",\\\")\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\", \"x = [foo,\\\"a,b,c\\\"].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\", \"x = [\\\"a,b,c\\\",foo].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join(',')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join(',')\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, ''].join(',')\", \"x = [',', foo, ''].join(',')\");                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join(',')\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join(',')\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testStringJoinAdd$catena_1() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\", \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join(\\\",\\\")\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\", \"x = [foo,\\\"a,b,c\\\"].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\", \"x = [\\\"a,b,c\\\",foo].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join(',')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join(',')\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, ''].join(',')\", \"x = [',', foo, ''].join(',')\");                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join(',')\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join(',')\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testStringJoinAdd$catena_2() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\", \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join(\\\",\\\")\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\", \"x = [foo,\\\"a,b,c\\\"].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\", \"x = [\\\"a,b,c\\\",foo].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join(',')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join(',')\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, ''].join(',')\", \"x = [',', foo, ''].join(',')\");                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join(',')\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join(',')\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testStringJoinAdd$catena_3() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\", \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join(\\\",\\\")\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\", \"x = [foo,\\\"a,b,c\\\"].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\", \"x = [\\\"a,b,c\\\",foo].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join(',')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join(',')\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, ''].join(',')\", \"x = [',', foo, ''].join(',')\");                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join(',')\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join(',')\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testStringJoinAdd$catena_4() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = ['a', foo, 'b', 'c'].join(',')\", \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join(\\\",\\\")\");                      /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\", \"x = [foo,\\\"a,b,c\\\"].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\", \"x = [\\\"a,b,c\\\",foo].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join(',')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join(',')\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, ''].join(',')\", \"x = [',', foo, ''].join(',')\");                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join(',')\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join(',')\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testStringJoinAdd$catena_5() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\", \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join(\\\",\\\")\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = [foo, 'a', 'b', 'c'].join(',')\", \"x = [foo,\\\"a,b,c\\\"].join(\\\",\\\")\");                          /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\", \"x = [\\\"a,b,c\\\",foo].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join(',')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join(',')\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, ''].join(',')\", \"x = [',', foo, ''].join(',')\");                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join(',')\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join(',')\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testStringJoinAdd$catena_6() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\", \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join(\\\",\\\")\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\", \"x = [foo,\\\"a,b,c\\\"].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = ['a', 'b', 'c', foo].join(',')\", \"x = [\\\"a,b,c\\\",foo].join(\\\",\\\")\");                          /***** ORIGINAL ASSERTION IS HERE *****/\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join(',')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join(',')\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, ''].join(',')\", \"x = [',', foo, ''].join(',')\");                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join(',')\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join(',')\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testStringJoinAdd$catena_7() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\", \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join(\\\",\\\")\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\", \"x = [foo,\\\"a,b,c\\\"].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\", \"x = [\\\"a,b,c\\\",foo].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join(',')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join(',')\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, ''].join(',')\", \"x = [',', foo, ''].join(',')\");                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join(',')\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join(',')\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testStringJoinAdd$catena_8() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\", \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join(\\\",\\\")\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\", \"x = [foo,\\\"a,b,c\\\"].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\", \"x = [\\\"a,b,c\\\",foo].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join(',')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join(',')\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, ''].join(',')\", \"x = [',', foo, ''].join(',')\");                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join(',')\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join(',')\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testStringJoinAdd$catena_9() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\", \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join(\\\",\\\")\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\", \"x = [foo,\\\"a,b,c\\\"].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\", \"x = [\\\"a,b,c\\\",foo].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join(',')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join(',')\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, ''].join(',')\", \"x = [',', foo, ''].join(',')\");                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join(',')\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join(',')\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testStringJoinAdd$catena_10() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\", \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join(\\\",\\\")\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\", \"x = [foo,\\\"a,b,c\\\"].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\", \"x = [\\\"a,b,c\\\",foo].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join(',')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join(',')\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, ''].join(',')\", \"x = [',', foo, ''].join(',')\");                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join(',')\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join(',')\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testStringJoinAdd$catena_11() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\", \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join(\\\",\\\")\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\", \"x = [foo,\\\"a,b,c\\\"].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\", \"x = [\\\"a,b,c\\\",foo].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join(',')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join(',')\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, ''].join(',')\", \"x = [',', foo, ''].join(',')\");                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join(',')\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join(',')\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testStringJoinAdd$catena_12() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\", \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join(\\\",\\\")\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\", \"x = [foo,\\\"a,b,c\\\"].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\", \"x = [\\\"a,b,c\\\",foo].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  /***** ORIGINAL ASSERTION IS HERE *****/\n    \n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join(',')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join(',')\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, ''].join(',')\", \"x = [',', foo, ''].join(',')\");                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join(',')\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join(',')\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testStringJoinAdd$catena_13() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\", \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join(\\\",\\\")\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\", \"x = [foo,\\\"a,b,c\\\"].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\", \"x = [\\\"a,b,c\\\",foo].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    // TODO(user): Its possible to fold this better.\n    foldSame(\"x = ['', foo].join(',')\");                                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ foldSame(\"x = ['', foo, ''].join(',')\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, ''].join(',')\", \"x = [',', foo, ''].join(',')\");                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join(',')\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join(',')\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testStringJoinAdd$catena_14() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\", \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join(\\\",\\\")\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\", \"x = [foo,\\\"a,b,c\\\"].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\", \"x = [\\\"a,b,c\\\",foo].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join(',')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    foldSame(\"x = ['', foo, ''].join(',')\");                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n    \n    try{ fold(\"x = ['', '', foo, ''].join(',')\", \"x = [',', foo, ''].join(',')\");                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join(',')\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join(',')\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testStringJoinAdd$catena_15() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\", \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join(\\\",\\\")\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\", \"x = [foo,\\\"a,b,c\\\"].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\", \"x = [\\\"a,b,c\\\",foo].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join(',')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join(',')\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    fold(\"x = ['', '', foo, ''].join(',')\", \"x = [',', foo, ''].join(',')\");                                /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join(',')\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join(',')\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testStringJoinAdd$catena_16() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\", \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join(\\\",\\\")\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\", \"x = [foo,\\\"a,b,c\\\"].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\", \"x = [\\\"a,b,c\\\",foo].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join(',')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join(',')\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, ''].join(',')\", \"x = [',', foo, ''].join(',')\");                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join(',')\");                                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n    \n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join(',')\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testStringJoinAdd$catena_17() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\", \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join(\\\",\\\")\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\", \"x = [foo,\\\"a,b,c\\\"].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\", \"x = [\\\"a,b,c\\\",foo].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join(',')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join(',')\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, ''].join(',')\", \"x = [',', foo, ''].join(',')\");                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join(',')\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join(',')\");                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n    \n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testStringJoinAdd$catena_18() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\", \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join(\\\",\\\")\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\", \"x = [foo,\\\"a,b,c\\\"].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\", \"x = [\\\"a,b,c\\\",foo].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join(',')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join(',')\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, ''].join(',')\", \"x = [',', foo, ''].join(',')\");                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join(',')\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join(',')\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            ],
            "func": {
                "0": "  public void testStringJoinAdd$catena_0() {\n    fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\", \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join(\\\",\\\")\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\", \"x = [foo,\\\"a,b,c\\\"].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\", \"x = [\\\"a,b,c\\\",foo].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join(',')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join(',')\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, ''].join(',')\", \"x = [',', foo, ''].join(',')\");                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join(',')\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join(',')\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "1": "  public void testStringJoinAdd$catena_1() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\", \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join(\\\",\\\")\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\", \"x = [foo,\\\"a,b,c\\\"].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\", \"x = [\\\"a,b,c\\\",foo].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join(',')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join(',')\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, ''].join(',')\", \"x = [',', foo, ''].join(',')\");                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join(',')\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join(',')\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "2": "  public void testStringJoinAdd$catena_2() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\", \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join(\\\",\\\")\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\", \"x = [foo,\\\"a,b,c\\\"].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\", \"x = [\\\"a,b,c\\\",foo].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join(',')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join(',')\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, ''].join(',')\", \"x = [',', foo, ''].join(',')\");                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join(',')\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join(',')\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "3": "  public void testStringJoinAdd$catena_3() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\", \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join(\\\",\\\")\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\", \"x = [foo,\\\"a,b,c\\\"].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\", \"x = [\\\"a,b,c\\\",foo].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join(',')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join(',')\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, ''].join(',')\", \"x = [',', foo, ''].join(',')\");                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join(',')\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join(',')\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "4": "  public void testStringJoinAdd$catena_4() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = ['a', foo, 'b', 'c'].join(',')\", \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join(\\\",\\\")\");                      /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\", \"x = [foo,\\\"a,b,c\\\"].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\", \"x = [\\\"a,b,c\\\",foo].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join(',')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join(',')\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, ''].join(',')\", \"x = [',', foo, ''].join(',')\");                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join(',')\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join(',')\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "5": "  public void testStringJoinAdd$catena_5() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\", \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join(\\\",\\\")\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = [foo, 'a', 'b', 'c'].join(',')\", \"x = [foo,\\\"a,b,c\\\"].join(\\\",\\\")\");                          /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\", \"x = [\\\"a,b,c\\\",foo].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join(',')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join(',')\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, ''].join(',')\", \"x = [',', foo, ''].join(',')\");                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join(',')\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join(',')\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "6": "  public void testStringJoinAdd$catena_6() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\", \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join(\\\",\\\")\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\", \"x = [foo,\\\"a,b,c\\\"].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = ['a', 'b', 'c', foo].join(',')\", \"x = [\\\"a,b,c\\\",foo].join(\\\",\\\")\");                          /***** ORIGINAL ASSERTION IS HERE *****/\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join(',')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join(',')\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, ''].join(',')\", \"x = [',', foo, ''].join(',')\");                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join(',')\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join(',')\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "7": "  public void testStringJoinAdd$catena_7() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\", \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join(\\\",\\\")\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\", \"x = [foo,\\\"a,b,c\\\"].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\", \"x = [\\\"a,b,c\\\",foo].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join(',')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join(',')\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, ''].join(',')\", \"x = [',', foo, ''].join(',')\");                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join(',')\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join(',')\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "8": "  public void testStringJoinAdd$catena_8() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\", \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join(\\\",\\\")\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\", \"x = [foo,\\\"a,b,c\\\"].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\", \"x = [\\\"a,b,c\\\",foo].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join(',')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join(',')\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, ''].join(',')\", \"x = [',', foo, ''].join(',')\");                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join(',')\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join(',')\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "9": "  public void testStringJoinAdd$catena_9() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\", \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join(\\\",\\\")\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\", \"x = [foo,\\\"a,b,c\\\"].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\", \"x = [\\\"a,b,c\\\",foo].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join(',')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join(',')\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, ''].join(',')\", \"x = [',', foo, ''].join(',')\");                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join(',')\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join(',')\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "10": "  public void testStringJoinAdd$catena_10() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\", \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join(\\\",\\\")\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\", \"x = [foo,\\\"a,b,c\\\"].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\", \"x = [\\\"a,b,c\\\",foo].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join(',')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join(',')\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, ''].join(',')\", \"x = [',', foo, ''].join(',')\");                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join(',')\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join(',')\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "11": "  public void testStringJoinAdd$catena_11() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\", \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join(\\\",\\\")\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\", \"x = [foo,\\\"a,b,c\\\"].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\", \"x = [\\\"a,b,c\\\",foo].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join(',')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join(',')\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, ''].join(',')\", \"x = [',', foo, ''].join(',')\");                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join(',')\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join(',')\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "12": "  public void testStringJoinAdd$catena_12() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\", \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join(\\\",\\\")\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\", \"x = [foo,\\\"a,b,c\\\"].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\", \"x = [\\\"a,b,c\\\",foo].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  /***** ORIGINAL ASSERTION IS HERE *****/\n    \n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join(',')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join(',')\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, ''].join(',')\", \"x = [',', foo, ''].join(',')\");                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join(',')\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join(',')\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "13": "  public void testStringJoinAdd$catena_13() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\", \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join(\\\",\\\")\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\", \"x = [foo,\\\"a,b,c\\\"].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\", \"x = [\\\"a,b,c\\\",foo].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    // TODO(user): Its possible to fold this better.\n    foldSame(\"x = ['', foo].join(',')\");                                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ foldSame(\"x = ['', foo, ''].join(',')\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, ''].join(',')\", \"x = [',', foo, ''].join(',')\");                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join(',')\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join(',')\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "14": "  public void testStringJoinAdd$catena_14() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\", \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join(\\\",\\\")\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\", \"x = [foo,\\\"a,b,c\\\"].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\", \"x = [\\\"a,b,c\\\",foo].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join(',')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    foldSame(\"x = ['', foo, ''].join(',')\");                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n    \n    try{ fold(\"x = ['', '', foo, ''].join(',')\", \"x = [',', foo, ''].join(',')\");                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join(',')\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join(',')\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "15": "  public void testStringJoinAdd$catena_15() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\", \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join(\\\",\\\")\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\", \"x = [foo,\\\"a,b,c\\\"].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\", \"x = [\\\"a,b,c\\\",foo].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join(',')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join(',')\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    fold(\"x = ['', '', foo, ''].join(',')\", \"x = [',', foo, ''].join(',')\");                                /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join(',')\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join(',')\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "16": "  public void testStringJoinAdd$catena_16() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\", \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join(\\\",\\\")\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\", \"x = [foo,\\\"a,b,c\\\"].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\", \"x = [\\\"a,b,c\\\",foo].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join(',')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join(',')\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, ''].join(',')\", \"x = [',', foo, ''].join(',')\");                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join(',')\");                                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n    \n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join(',')\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "17": "  public void testStringJoinAdd$catena_17() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\", \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join(\\\",\\\")\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\", \"x = [foo,\\\"a,b,c\\\"].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\", \"x = [\\\"a,b,c\\\",foo].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join(',')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join(',')\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, ''].join(',')\", \"x = [',', foo, ''].join(',')\");                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join(',')\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join(',')\");                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n    \n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "18": "  public void testStringJoinAdd$catena_18() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\", \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join(\\\",\\\")\");                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\", \"x = [foo,\\\"a,b,c\\\"].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\", \"x = [\\\"a,b,c\\\",foo].join(\\\",\\\")\");                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join(',')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join(',')\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, ''].join(',')\", \"x = [',', foo, ''].join(',')\");                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join(',')\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join(',')\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            }
        }
    },
    "11111": {
        "failing_tests": [
            "com.google.javascript.jscomp.FoldConstantsTest::testStringJoinAdd$catena_16",
            "com.google.javascript.jscomp.FoldConstantsTest::testStringJoinAdd$catena_17",
            "com.google.javascript.jscomp.FoldConstantsTest::testStringJoinAdd$catena_13",
            "com.google.javascript.jscomp.FoldConstantsTest::testStringJoinAdd$catena_15",
            "com.google.javascript.jscomp.FoldConstantsTest::testStringJoinAdd$catena_14"
        ]
    }
}