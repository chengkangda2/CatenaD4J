---
Begin generate bug_id: Math_99
num_of_hunks: 2
timeout for running: 3600
use working dir: ./working/data/Math_99
Try to checkout Math_99
build dir: ['./working/data/Math_99/target/classes', './working/data/Math_99/target/test-classes']
init FileManager
trace file: src/java/org/apache/commons/math/util/MathUtils.java
trying to replace old failing tests
edit: replace from 407 range 49 at src/test/org/apache/commons/math/util/MathUtilsTest.java
to
    public void testGcd$catena_0() {
        int a = 30;
        int b = 50;
        int c = 77;

        assertEquals(0, MathUtils.gcd(0, 0));                                                               /***** ORIGINAL ASSERTION IS HERE *****/

        try{ assertEquals(b, MathUtils.gcd(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(a, MathUtils.gcd(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(b, MathUtils.gcd(0, -b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(a, MathUtils.gcd(-a, 0));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(10, MathUtils.gcd(a, b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(10, MathUtils.gcd(-a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(10, MathUtils.gcd(a, -b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(10, MathUtils.gcd(-a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(1, MathUtils.gcd(a, c));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, MathUtils.gcd(-a, c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, MathUtils.gcd(a, -c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, MathUtils.gcd(-a, -c));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE
            MathUtils.gcd(Integer.MIN_VALUE, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException expected) {
            // expected
        }
        try {
            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE
            MathUtils.gcd(0, Integer.MIN_VALUE);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException expected) {
            // expected
        }
        try {
            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE
            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException expected) {
            // expected
        }
    }     public void testGcd$catena_1() {
        int a = 30;
        int b = 50;
        int c = 77;

        try{ assertEquals(0, MathUtils.gcd(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        assertEquals(b, MathUtils.gcd(0, b));                                                               /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(a, MathUtils.gcd(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(b, MathUtils.gcd(0, -b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(a, MathUtils.gcd(-a, 0));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(10, MathUtils.gcd(a, b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(10, MathUtils.gcd(-a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(10, MathUtils.gcd(a, -b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(10, MathUtils.gcd(-a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(1, MathUtils.gcd(a, c));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, MathUtils.gcd(-a, c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, MathUtils.gcd(a, -c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, MathUtils.gcd(-a, -c));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE
            MathUtils.gcd(Integer.MIN_VALUE, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException expected) {
            // expected
        }
        try {
            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE
            MathUtils.gcd(0, Integer.MIN_VALUE);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException expected) {
            // expected
        }
        try {
            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE
            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException expected) {
            // expected
        }
    }     public void testGcd$catena_2() {
        int a = 30;
        int b = 50;
        int c = 77;

        try{ assertEquals(0, MathUtils.gcd(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(b, MathUtils.gcd(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(a, MathUtils.gcd(a, 0));                                                               /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(b, MathUtils.gcd(0, -b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(a, MathUtils.gcd(-a, 0));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(10, MathUtils.gcd(a, b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(10, MathUtils.gcd(-a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(10, MathUtils.gcd(a, -b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(10, MathUtils.gcd(-a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(1, MathUtils.gcd(a, c));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, MathUtils.gcd(-a, c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, MathUtils.gcd(a, -c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, MathUtils.gcd(-a, -c));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE
            MathUtils.gcd(Integer.MIN_VALUE, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException expected) {
            // expected
        }
        try {
            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE
            MathUtils.gcd(0, Integer.MIN_VALUE);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException expected) {
            // expected
        }
        try {
            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE
            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException expected) {
            // expected
        }
    }     public void testGcd$catena_3() {
        int a = 30;
        int b = 50;
        int c = 77;

        try{ assertEquals(0, MathUtils.gcd(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(b, MathUtils.gcd(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(a, MathUtils.gcd(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(b, MathUtils.gcd(0, -b));                                                              /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(a, MathUtils.gcd(-a, 0));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(10, MathUtils.gcd(a, b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(10, MathUtils.gcd(-a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(10, MathUtils.gcd(a, -b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(10, MathUtils.gcd(-a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(1, MathUtils.gcd(a, c));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, MathUtils.gcd(-a, c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, MathUtils.gcd(a, -c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, MathUtils.gcd(-a, -c));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE
            MathUtils.gcd(Integer.MIN_VALUE, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException expected) {
            // expected
        }
        try {
            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE
            MathUtils.gcd(0, Integer.MIN_VALUE);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException expected) {
            // expected
        }
        try {
            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE
            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException expected) {
            // expected
        }
    }     public void testGcd$catena_4() {
        int a = 30;
        int b = 50;
        int c = 77;

        try{ assertEquals(0, MathUtils.gcd(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(b, MathUtils.gcd(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(a, MathUtils.gcd(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(b, MathUtils.gcd(0, -b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(a, MathUtils.gcd(-a, 0));                                                              /***** ORIGINAL ASSERTION IS HERE *****/

        try{ assertEquals(10, MathUtils.gcd(a, b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(10, MathUtils.gcd(-a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(10, MathUtils.gcd(a, -b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(10, MathUtils.gcd(-a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(1, MathUtils.gcd(a, c));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, MathUtils.gcd(-a, c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, MathUtils.gcd(a, -c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, MathUtils.gcd(-a, -c));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE
            MathUtils.gcd(Integer.MIN_VALUE, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException expected) {
            // expected
        }
        try {
            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE
            MathUtils.gcd(0, Integer.MIN_VALUE);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException expected) {
            // expected
        }
        try {
            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE
            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException expected) {
            // expected
        }
    }     public void testGcd$catena_5() {
        int a = 30;
        int b = 50;
        int c = 77;

        try{ assertEquals(0, MathUtils.gcd(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(b, MathUtils.gcd(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(a, MathUtils.gcd(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(b, MathUtils.gcd(0, -b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(a, MathUtils.gcd(-a, 0));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        assertEquals(10, MathUtils.gcd(a, b));                                                              /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(10, MathUtils.gcd(-a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(10, MathUtils.gcd(a, -b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(10, MathUtils.gcd(-a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(1, MathUtils.gcd(a, c));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, MathUtils.gcd(-a, c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, MathUtils.gcd(a, -c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, MathUtils.gcd(-a, -c));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE
            MathUtils.gcd(Integer.MIN_VALUE, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException expected) {
            // expected
        }
        try {
            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE
            MathUtils.gcd(0, Integer.MIN_VALUE);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException expected) {
            // expected
        }
        try {
            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE
            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException expected) {
            // expected
        }
    }     public void testGcd$catena_6() {
        int a = 30;
        int b = 50;
        int c = 77;

        try{ assertEquals(0, MathUtils.gcd(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(b, MathUtils.gcd(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(a, MathUtils.gcd(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(b, MathUtils.gcd(0, -b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(a, MathUtils.gcd(-a, 0));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(10, MathUtils.gcd(a, b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(10, MathUtils.gcd(-a, b));                                                             /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(10, MathUtils.gcd(a, -b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(10, MathUtils.gcd(-a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(1, MathUtils.gcd(a, c));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, MathUtils.gcd(-a, c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, MathUtils.gcd(a, -c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, MathUtils.gcd(-a, -c));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE
            MathUtils.gcd(Integer.MIN_VALUE, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException expected) {
            // expected
        }
        try {
            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE
            MathUtils.gcd(0, Integer.MIN_VALUE);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException expected) {
            // expected
        }
        try {
            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE
            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException expected) {
            // expected
        }
    }     public void testGcd$catena_7() {
        int a = 30;
        int b = 50;
        int c = 77;

        try{ assertEquals(0, MathUtils.gcd(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(b, MathUtils.gcd(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(a, MathUtils.gcd(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(b, MathUtils.gcd(0, -b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(a, MathUtils.gcd(-a, 0));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(10, MathUtils.gcd(a, b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(10, MathUtils.gcd(-a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(10, MathUtils.gcd(a, -b));                                                             /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(10, MathUtils.gcd(-a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(1, MathUtils.gcd(a, c));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, MathUtils.gcd(-a, c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, MathUtils.gcd(a, -c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, MathUtils.gcd(-a, -c));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE
            MathUtils.gcd(Integer.MIN_VALUE, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException expected) {
            // expected
        }
        try {
            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE
            MathUtils.gcd(0, Integer.MIN_VALUE);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException expected) {
            // expected
        }
        try {
            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE
            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException expected) {
            // expected
        }
    }     public void testGcd$catena_8() {
        int a = 30;
        int b = 50;
        int c = 77;

        try{ assertEquals(0, MathUtils.gcd(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(b, MathUtils.gcd(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(a, MathUtils.gcd(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(b, MathUtils.gcd(0, -b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(a, MathUtils.gcd(-a, 0));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(10, MathUtils.gcd(a, b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(10, MathUtils.gcd(-a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(10, MathUtils.gcd(a, -b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(10, MathUtils.gcd(-a, -b));                                                            /***** ORIGINAL ASSERTION IS HERE *****/

        try{ assertEquals(1, MathUtils.gcd(a, c));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, MathUtils.gcd(-a, c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, MathUtils.gcd(a, -c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, MathUtils.gcd(-a, -c));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE
            MathUtils.gcd(Integer.MIN_VALUE, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException expected) {
            // expected
        }
        try {
            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE
            MathUtils.gcd(0, Integer.MIN_VALUE);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException expected) {
            // expected
        }
        try {
            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE
            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException expected) {
            // expected
        }
    }     public void testGcd$catena_9() {
        int a = 30;
        int b = 50;
        int c = 77;

        try{ assertEquals(0, MathUtils.gcd(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(b, MathUtils.gcd(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(a, MathUtils.gcd(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(b, MathUtils.gcd(0, -b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(a, MathUtils.gcd(-a, 0));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(10, MathUtils.gcd(a, b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(10, MathUtils.gcd(-a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(10, MathUtils.gcd(a, -b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(10, MathUtils.gcd(-a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        assertEquals(1, MathUtils.gcd(a, c));                                                               /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(1, MathUtils.gcd(-a, c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, MathUtils.gcd(a, -c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, MathUtils.gcd(-a, -c));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE
            MathUtils.gcd(Integer.MIN_VALUE, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException expected) {
            // expected
        }
        try {
            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE
            MathUtils.gcd(0, Integer.MIN_VALUE);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException expected) {
            // expected
        }
        try {
            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE
            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException expected) {
            // expected
        }
    }     public void testGcd$catena_10() {
        int a = 30;
        int b = 50;
        int c = 77;

        try{ assertEquals(0, MathUtils.gcd(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(b, MathUtils.gcd(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(a, MathUtils.gcd(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(b, MathUtils.gcd(0, -b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(a, MathUtils.gcd(-a, 0));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(10, MathUtils.gcd(a, b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(10, MathUtils.gcd(-a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(10, MathUtils.gcd(a, -b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(10, MathUtils.gcd(-a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(1, MathUtils.gcd(a, c));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(1, MathUtils.gcd(-a, c));                                                              /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(1, MathUtils.gcd(a, -c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, MathUtils.gcd(-a, -c));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE
            MathUtils.gcd(Integer.MIN_VALUE, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException expected) {
            // expected
        }
        try {
            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE
            MathUtils.gcd(0, Integer.MIN_VALUE);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException expected) {
            // expected
        }
        try {
            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE
            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException expected) {
            // expected
        }
    }     public void testGcd$catena_11() {
        int a = 30;
        int b = 50;
        int c = 77;

        try{ assertEquals(0, MathUtils.gcd(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(b, MathUtils.gcd(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(a, MathUtils.gcd(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(b, MathUtils.gcd(0, -b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(a, MathUtils.gcd(-a, 0));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(10, MathUtils.gcd(a, b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(10, MathUtils.gcd(-a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(10, MathUtils.gcd(a, -b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(10, MathUtils.gcd(-a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(1, MathUtils.gcd(a, c));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, MathUtils.gcd(-a, c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(1, MathUtils.gcd(a, -c));                                                              /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(1, MathUtils.gcd(-a, -c));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE
            MathUtils.gcd(Integer.MIN_VALUE, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException expected) {
            // expected
        }
        try {
            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE
            MathUtils.gcd(0, Integer.MIN_VALUE);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException expected) {
            // expected
        }
        try {
            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE
            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException expected) {
            // expected
        }
    }     public void testGcd$catena_12() {
        int a = 30;
        int b = 50;
        int c = 77;

        try{ assertEquals(0, MathUtils.gcd(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(b, MathUtils.gcd(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(a, MathUtils.gcd(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(b, MathUtils.gcd(0, -b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(a, MathUtils.gcd(-a, 0));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(10, MathUtils.gcd(a, b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(10, MathUtils.gcd(-a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(10, MathUtils.gcd(a, -b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(10, MathUtils.gcd(-a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(1, MathUtils.gcd(a, c));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, MathUtils.gcd(-a, c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, MathUtils.gcd(a, -c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(1, MathUtils.gcd(-a, -c));                                                             /***** ORIGINAL ASSERTION IS HERE *****/

        try{ assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE
            MathUtils.gcd(Integer.MIN_VALUE, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException expected) {
            // expected
        }
        try {
            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE
            MathUtils.gcd(0, Integer.MIN_VALUE);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException expected) {
            // expected
        }
        try {
            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE
            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException expected) {
            // expected
        }
    }     public void testGcd$catena_13() {
        int a = 30;
        int b = 50;
        int c = 77;

        try{ assertEquals(0, MathUtils.gcd(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(b, MathUtils.gcd(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(a, MathUtils.gcd(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(b, MathUtils.gcd(0, -b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(a, MathUtils.gcd(-a, 0));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(10, MathUtils.gcd(a, b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(10, MathUtils.gcd(-a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(10, MathUtils.gcd(a, -b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(10, MathUtils.gcd(-a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(1, MathUtils.gcd(a, c));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, MathUtils.gcd(-a, c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, MathUtils.gcd(a, -c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, MathUtils.gcd(-a, -c));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                                 /***** ORIGINAL ASSERTION IS HERE *****/

        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE
            MathUtils.gcd(Integer.MIN_VALUE, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException expected) {
            // expected
        }
        try {
            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE
            MathUtils.gcd(0, Integer.MIN_VALUE);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException expected) {
            // expected
        }
        try {
            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE
            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException expected) {
            // expected
        }
    }     public void testGcd$catena_14() {
        int a = 30;
        int b = 50;
        int c = 77;

        try{ assertEquals(0, MathUtils.gcd(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(b, MathUtils.gcd(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(a, MathUtils.gcd(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(b, MathUtils.gcd(0, -b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(a, MathUtils.gcd(-a, 0));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(10, MathUtils.gcd(a, b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(10, MathUtils.gcd(-a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(10, MathUtils.gcd(a, -b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(10, MathUtils.gcd(-a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(1, MathUtils.gcd(a, c));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, MathUtils.gcd(-a, c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, MathUtils.gcd(a, -c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, MathUtils.gcd(-a, -c));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                            }catch(Throwable __SHOULD_BE_IGNORED){}

        assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                               /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE
            MathUtils.gcd(Integer.MIN_VALUE, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException expected) {
            // expected
        }
        try {
            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE
            MathUtils.gcd(0, Integer.MIN_VALUE);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException expected) {
            // expected
        }
        try {
            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE
            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException expected) {
            // expected
        }
    }     public void testGcd$catena_15() {
        int a = 30;
        int b = 50;
        int c = 77;

        try{ assertEquals(0, MathUtils.gcd(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(b, MathUtils.gcd(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(a, MathUtils.gcd(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(b, MathUtils.gcd(0, -b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(a, MathUtils.gcd(-a, 0));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(10, MathUtils.gcd(a, b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(10, MathUtils.gcd(-a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(10, MathUtils.gcd(a, -b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(10, MathUtils.gcd(-a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(1, MathUtils.gcd(a, c));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, MathUtils.gcd(-a, c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, MathUtils.gcd(a, -c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, MathUtils.gcd(-a, -c));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                              /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE
            MathUtils.gcd(Integer.MIN_VALUE, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException expected) {
            // expected
        }
        try {
            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE
            MathUtils.gcd(0, Integer.MIN_VALUE);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException expected) {
            // expected
        }
        try {
            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE
            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException expected) {
            // expected
        }
    }     public void testGcd$catena_16() {
        int a = 30;
        int b = 50;
        int c = 77;

        try{ assertEquals(0, MathUtils.gcd(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(b, MathUtils.gcd(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(a, MathUtils.gcd(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(b, MathUtils.gcd(0, -b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(a, MathUtils.gcd(-a, 0));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(10, MathUtils.gcd(a, b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(10, MathUtils.gcd(-a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(10, MathUtils.gcd(a, -b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(10, MathUtils.gcd(-a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(1, MathUtils.gcd(a, c));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, MathUtils.gcd(-a, c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, MathUtils.gcd(a, -c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, MathUtils.gcd(-a, -c));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                      /***** ORIGINAL ASSERTION IS HERE *****/
        try {
            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE
            MathUtils.gcd(Integer.MIN_VALUE, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException expected) {
            // expected
        }
        try {
            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE
            MathUtils.gcd(0, Integer.MIN_VALUE);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException expected) {
            // expected
        }
        try {
            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE
            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException expected) {
            // expected
        }
    }     public void testGcd$catena_17() {
        int a = 30;
        int b = 50;
        int c = 77;

        try{ assertEquals(0, MathUtils.gcd(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(b, MathUtils.gcd(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(a, MathUtils.gcd(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(b, MathUtils.gcd(0, -b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(a, MathUtils.gcd(-a, 0));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(10, MathUtils.gcd(a, b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(10, MathUtils.gcd(-a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(10, MathUtils.gcd(a, -b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(10, MathUtils.gcd(-a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(1, MathUtils.gcd(a, c));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, MathUtils.gcd(-a, c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, MathUtils.gcd(a, -c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, MathUtils.gcd(-a, -c));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE
            MathUtils.gcd(Integer.MIN_VALUE, 0);
            fail("expecting ArithmeticException");                                                          /***** ORIGINAL ASSERTION IS HERE *****/
        } catch (ArithmeticException expected) {
            // expected
        }
        try {
            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE
            MathUtils.gcd(0, Integer.MIN_VALUE);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException expected) {
            // expected
        }
        try {
            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE
            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException expected) {
            // expected
        }
    }     public void testGcd$catena_18() {
        int a = 30;
        int b = 50;
        int c = 77;

        try{ assertEquals(0, MathUtils.gcd(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(b, MathUtils.gcd(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(a, MathUtils.gcd(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(b, MathUtils.gcd(0, -b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(a, MathUtils.gcd(-a, 0));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(10, MathUtils.gcd(a, b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(10, MathUtils.gcd(-a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(10, MathUtils.gcd(a, -b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(10, MathUtils.gcd(-a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(1, MathUtils.gcd(a, c));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, MathUtils.gcd(-a, c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, MathUtils.gcd(a, -c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, MathUtils.gcd(-a, -c));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE
            MathUtils.gcd(Integer.MIN_VALUE, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException expected) {
            // expected
        }
        try {
            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE
            MathUtils.gcd(0, Integer.MIN_VALUE);
            fail("expecting ArithmeticException");                                                          /***** ORIGINAL ASSERTION IS HERE *****/
        } catch (ArithmeticException expected) {
            // expected
        }
        try {
            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE
            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException expected) {
            // expected
        }
    }     public void testGcd$catena_19() {
        int a = 30;
        int b = 50;
        int c = 77;

        try{ assertEquals(0, MathUtils.gcd(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(b, MathUtils.gcd(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(a, MathUtils.gcd(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(b, MathUtils.gcd(0, -b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(a, MathUtils.gcd(-a, 0));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(10, MathUtils.gcd(a, b));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(10, MathUtils.gcd(-a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(10, MathUtils.gcd(a, -b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(10, MathUtils.gcd(-a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(1, MathUtils.gcd(a, c));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, MathUtils.gcd(-a, c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, MathUtils.gcd(a, -c));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1, MathUtils.gcd(-a, -c));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE
            MathUtils.gcd(Integer.MIN_VALUE, 0);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException expected) {
            // expected
        }
        try {
            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE
            MathUtils.gcd(0, Integer.MIN_VALUE);
            try{ fail("expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException expected) {
            // expected
        }
        try {
            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE
            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);
            fail("expecting ArithmeticException");                                                          /***** ORIGINAL ASSERTION IS HERE *****/
        } catch (ArithmeticException expected) {
            // expected
        }
    }
edit: replace from 565 range 45 at src/test/org/apache/commons/math/util/MathUtilsTest.java
to
    public void testLcm$catena_0() {
        int a = 30;
        int b = 50;
        int c = 77;

        assertEquals(0, MathUtils.lcm(0, b));                                                               /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(0, MathUtils.lcm(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(b, MathUtils.lcm(1, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(a, MathUtils.lcm(a, 1));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(150, MathUtils.lcm(a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(150, MathUtils.lcm(-a, b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(150, MathUtils.lcm(a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(150, MathUtils.lcm(-a, -b));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2310, MathUtils.lcm(a, c));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        // Assert that no intermediate value overflows:
        // The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)
        try{ assertEquals((1<<20)*15, MathUtils.lcm((1<<20)*3, (1<<20)*5));                                 }catch(Throwable __SHOULD_BE_IGNORED){}

        // Special case
        try{ assertEquals(0, MathUtils.lcm(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try {
            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int
            MathUtils.lcm(Integer.MIN_VALUE, 1);
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected
        }
        
        try {
            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int
            MathUtils.lcm(Integer.MIN_VALUE, 1<<20);
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected
        }

        try {
            MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected
        }
    }     public void testLcm$catena_1() {
        int a = 30;
        int b = 50;
        int c = 77;

        try{ assertEquals(0, MathUtils.lcm(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(0, MathUtils.lcm(a, 0));                                                               /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(b, MathUtils.lcm(1, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(a, MathUtils.lcm(a, 1));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(150, MathUtils.lcm(a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(150, MathUtils.lcm(-a, b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(150, MathUtils.lcm(a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(150, MathUtils.lcm(-a, -b));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2310, MathUtils.lcm(a, c));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        // Assert that no intermediate value overflows:
        // The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)
        try{ assertEquals((1<<20)*15, MathUtils.lcm((1<<20)*3, (1<<20)*5));                                 }catch(Throwable __SHOULD_BE_IGNORED){}

        // Special case
        try{ assertEquals(0, MathUtils.lcm(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try {
            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int
            MathUtils.lcm(Integer.MIN_VALUE, 1);
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected
        }
        
        try {
            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int
            MathUtils.lcm(Integer.MIN_VALUE, 1<<20);
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected
        }

        try {
            MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected
        }
    }     public void testLcm$catena_2() {
        int a = 30;
        int b = 50;
        int c = 77;

        try{ assertEquals(0, MathUtils.lcm(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(0, MathUtils.lcm(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(b, MathUtils.lcm(1, b));                                                               /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(a, MathUtils.lcm(a, 1));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(150, MathUtils.lcm(a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(150, MathUtils.lcm(-a, b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(150, MathUtils.lcm(a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(150, MathUtils.lcm(-a, -b));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2310, MathUtils.lcm(a, c));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        // Assert that no intermediate value overflows:
        // The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)
        try{ assertEquals((1<<20)*15, MathUtils.lcm((1<<20)*3, (1<<20)*5));                                 }catch(Throwable __SHOULD_BE_IGNORED){}

        // Special case
        try{ assertEquals(0, MathUtils.lcm(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try {
            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int
            MathUtils.lcm(Integer.MIN_VALUE, 1);
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected
        }
        
        try {
            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int
            MathUtils.lcm(Integer.MIN_VALUE, 1<<20);
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected
        }

        try {
            MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected
        }
    }     public void testLcm$catena_3() {
        int a = 30;
        int b = 50;
        int c = 77;

        try{ assertEquals(0, MathUtils.lcm(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(0, MathUtils.lcm(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(b, MathUtils.lcm(1, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(a, MathUtils.lcm(a, 1));                                                               /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(150, MathUtils.lcm(a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(150, MathUtils.lcm(-a, b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(150, MathUtils.lcm(a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(150, MathUtils.lcm(-a, -b));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2310, MathUtils.lcm(a, c));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        // Assert that no intermediate value overflows:
        // The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)
        try{ assertEquals((1<<20)*15, MathUtils.lcm((1<<20)*3, (1<<20)*5));                                 }catch(Throwable __SHOULD_BE_IGNORED){}

        // Special case
        try{ assertEquals(0, MathUtils.lcm(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try {
            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int
            MathUtils.lcm(Integer.MIN_VALUE, 1);
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected
        }
        
        try {
            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int
            MathUtils.lcm(Integer.MIN_VALUE, 1<<20);
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected
        }

        try {
            MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected
        }
    }     public void testLcm$catena_4() {
        int a = 30;
        int b = 50;
        int c = 77;

        try{ assertEquals(0, MathUtils.lcm(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(0, MathUtils.lcm(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(b, MathUtils.lcm(1, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(a, MathUtils.lcm(a, 1));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(150, MathUtils.lcm(a, b));                                                             /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(150, MathUtils.lcm(-a, b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(150, MathUtils.lcm(a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(150, MathUtils.lcm(-a, -b));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2310, MathUtils.lcm(a, c));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        // Assert that no intermediate value overflows:
        // The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)
        try{ assertEquals((1<<20)*15, MathUtils.lcm((1<<20)*3, (1<<20)*5));                                 }catch(Throwable __SHOULD_BE_IGNORED){}

        // Special case
        try{ assertEquals(0, MathUtils.lcm(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try {
            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int
            MathUtils.lcm(Integer.MIN_VALUE, 1);
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected
        }
        
        try {
            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int
            MathUtils.lcm(Integer.MIN_VALUE, 1<<20);
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected
        }

        try {
            MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected
        }
    }     public void testLcm$catena_5() {
        int a = 30;
        int b = 50;
        int c = 77;

        try{ assertEquals(0, MathUtils.lcm(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(0, MathUtils.lcm(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(b, MathUtils.lcm(1, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(a, MathUtils.lcm(a, 1));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(150, MathUtils.lcm(a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(150, MathUtils.lcm(-a, b));                                                            /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(150, MathUtils.lcm(a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(150, MathUtils.lcm(-a, -b));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2310, MathUtils.lcm(a, c));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        // Assert that no intermediate value overflows:
        // The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)
        try{ assertEquals((1<<20)*15, MathUtils.lcm((1<<20)*3, (1<<20)*5));                                 }catch(Throwable __SHOULD_BE_IGNORED){}

        // Special case
        try{ assertEquals(0, MathUtils.lcm(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try {
            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int
            MathUtils.lcm(Integer.MIN_VALUE, 1);
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected
        }
        
        try {
            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int
            MathUtils.lcm(Integer.MIN_VALUE, 1<<20);
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected
        }

        try {
            MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected
        }
    }     public void testLcm$catena_6() {
        int a = 30;
        int b = 50;
        int c = 77;

        try{ assertEquals(0, MathUtils.lcm(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(0, MathUtils.lcm(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(b, MathUtils.lcm(1, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(a, MathUtils.lcm(a, 1));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(150, MathUtils.lcm(a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(150, MathUtils.lcm(-a, b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(150, MathUtils.lcm(a, -b));                                                            /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(150, MathUtils.lcm(-a, -b));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2310, MathUtils.lcm(a, c));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        // Assert that no intermediate value overflows:
        // The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)
        try{ assertEquals((1<<20)*15, MathUtils.lcm((1<<20)*3, (1<<20)*5));                                 }catch(Throwable __SHOULD_BE_IGNORED){}

        // Special case
        try{ assertEquals(0, MathUtils.lcm(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try {
            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int
            MathUtils.lcm(Integer.MIN_VALUE, 1);
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected
        }
        
        try {
            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int
            MathUtils.lcm(Integer.MIN_VALUE, 1<<20);
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected
        }

        try {
            MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected
        }
    }     public void testLcm$catena_7() {
        int a = 30;
        int b = 50;
        int c = 77;

        try{ assertEquals(0, MathUtils.lcm(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(0, MathUtils.lcm(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(b, MathUtils.lcm(1, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(a, MathUtils.lcm(a, 1));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(150, MathUtils.lcm(a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(150, MathUtils.lcm(-a, b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(150, MathUtils.lcm(a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(150, MathUtils.lcm(-a, -b));                                                           /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(2310, MathUtils.lcm(a, c));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        // Assert that no intermediate value overflows:
        // The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)
        try{ assertEquals((1<<20)*15, MathUtils.lcm((1<<20)*3, (1<<20)*5));                                 }catch(Throwable __SHOULD_BE_IGNORED){}

        // Special case
        try{ assertEquals(0, MathUtils.lcm(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try {
            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int
            MathUtils.lcm(Integer.MIN_VALUE, 1);
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected
        }
        
        try {
            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int
            MathUtils.lcm(Integer.MIN_VALUE, 1<<20);
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected
        }

        try {
            MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected
        }
    }     public void testLcm$catena_8() {
        int a = 30;
        int b = 50;
        int c = 77;

        try{ assertEquals(0, MathUtils.lcm(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(0, MathUtils.lcm(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(b, MathUtils.lcm(1, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(a, MathUtils.lcm(a, 1));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(150, MathUtils.lcm(a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(150, MathUtils.lcm(-a, b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(150, MathUtils.lcm(a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(150, MathUtils.lcm(-a, -b));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(2310, MathUtils.lcm(a, c));                                                            /***** ORIGINAL ASSERTION IS HERE *****/

        // Assert that no intermediate value overflows:
        // The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)
        try{ assertEquals((1<<20)*15, MathUtils.lcm((1<<20)*3, (1<<20)*5));                                 }catch(Throwable __SHOULD_BE_IGNORED){}

        // Special case
        try{ assertEquals(0, MathUtils.lcm(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try {
            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int
            MathUtils.lcm(Integer.MIN_VALUE, 1);
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected
        }
        
        try {
            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int
            MathUtils.lcm(Integer.MIN_VALUE, 1<<20);
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected
        }

        try {
            MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected
        }
    }     public void testLcm$catena_9() {
        int a = 30;
        int b = 50;
        int c = 77;

        try{ assertEquals(0, MathUtils.lcm(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(0, MathUtils.lcm(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(b, MathUtils.lcm(1, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(a, MathUtils.lcm(a, 1));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(150, MathUtils.lcm(a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(150, MathUtils.lcm(-a, b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(150, MathUtils.lcm(a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(150, MathUtils.lcm(-a, -b));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2310, MathUtils.lcm(a, c));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        // Assert that no intermediate value overflows:
        // The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)
        assertEquals((1<<20)*15, MathUtils.lcm((1<<20)*3, (1<<20)*5));                                      /***** ORIGINAL ASSERTION IS HERE *****/

        // Special case
        try{ assertEquals(0, MathUtils.lcm(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try {
            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int
            MathUtils.lcm(Integer.MIN_VALUE, 1);
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected
        }
        
        try {
            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int
            MathUtils.lcm(Integer.MIN_VALUE, 1<<20);
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected
        }

        try {
            MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected
        }
    }     public void testLcm$catena_10() {
        int a = 30;
        int b = 50;
        int c = 77;

        try{ assertEquals(0, MathUtils.lcm(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(0, MathUtils.lcm(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(b, MathUtils.lcm(1, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(a, MathUtils.lcm(a, 1));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(150, MathUtils.lcm(a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(150, MathUtils.lcm(-a, b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(150, MathUtils.lcm(a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(150, MathUtils.lcm(-a, -b));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2310, MathUtils.lcm(a, c));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        // Assert that no intermediate value overflows:
        // The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)
        try{ assertEquals((1<<20)*15, MathUtils.lcm((1<<20)*3, (1<<20)*5));                                 }catch(Throwable __SHOULD_BE_IGNORED){}

        // Special case
        assertEquals(0, MathUtils.lcm(0, 0));                                                               /***** ORIGINAL ASSERTION IS HERE *****/

        try {
            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int
            MathUtils.lcm(Integer.MIN_VALUE, 1);
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected
        }
        
        try {
            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int
            MathUtils.lcm(Integer.MIN_VALUE, 1<<20);
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected
        }

        try {
            MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected
        }
    }     public void testLcm$catena_11() {
        int a = 30;
        int b = 50;
        int c = 77;

        try{ assertEquals(0, MathUtils.lcm(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(0, MathUtils.lcm(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(b, MathUtils.lcm(1, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(a, MathUtils.lcm(a, 1));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(150, MathUtils.lcm(a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(150, MathUtils.lcm(-a, b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(150, MathUtils.lcm(a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(150, MathUtils.lcm(-a, -b));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2310, MathUtils.lcm(a, c));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        // Assert that no intermediate value overflows:
        // The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)
        try{ assertEquals((1<<20)*15, MathUtils.lcm((1<<20)*3, (1<<20)*5));                                 }catch(Throwable __SHOULD_BE_IGNORED){}

        // Special case
        try{ assertEquals(0, MathUtils.lcm(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try {
            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int
            MathUtils.lcm(Integer.MIN_VALUE, 1);
            fail("Expecting ArithmeticException");                                                          /***** ORIGINAL ASSERTION IS HERE *****/
        } catch (ArithmeticException ex) {
            // expected
        }
        
        try {
            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int
            MathUtils.lcm(Integer.MIN_VALUE, 1<<20);
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected
        }

        try {
            MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected
        }
    }     public void testLcm$catena_12() {
        int a = 30;
        int b = 50;
        int c = 77;

        try{ assertEquals(0, MathUtils.lcm(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(0, MathUtils.lcm(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(b, MathUtils.lcm(1, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(a, MathUtils.lcm(a, 1));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(150, MathUtils.lcm(a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(150, MathUtils.lcm(-a, b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(150, MathUtils.lcm(a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(150, MathUtils.lcm(-a, -b));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2310, MathUtils.lcm(a, c));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        // Assert that no intermediate value overflows:
        // The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)
        try{ assertEquals((1<<20)*15, MathUtils.lcm((1<<20)*3, (1<<20)*5));                                 }catch(Throwable __SHOULD_BE_IGNORED){}

        // Special case
        try{ assertEquals(0, MathUtils.lcm(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try {
            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int
            MathUtils.lcm(Integer.MIN_VALUE, 1);
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected
        }
        
        try {
            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int
            MathUtils.lcm(Integer.MIN_VALUE, 1<<20);
            fail("Expecting ArithmeticException");                                                          /***** ORIGINAL ASSERTION IS HERE *****/
        } catch (ArithmeticException ex) {
            // expected
        }

        try {
            MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected
        }
    }     public void testLcm$catena_13() {
        int a = 30;
        int b = 50;
        int c = 77;

        try{ assertEquals(0, MathUtils.lcm(0, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(0, MathUtils.lcm(a, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(b, MathUtils.lcm(1, b));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(a, MathUtils.lcm(a, 1));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(150, MathUtils.lcm(a, b));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(150, MathUtils.lcm(-a, b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(150, MathUtils.lcm(a, -b));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(150, MathUtils.lcm(-a, -b));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(2310, MathUtils.lcm(a, c));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        // Assert that no intermediate value overflows:
        // The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)
        try{ assertEquals((1<<20)*15, MathUtils.lcm((1<<20)*3, (1<<20)*5));                                 }catch(Throwable __SHOULD_BE_IGNORED){}

        // Special case
        try{ assertEquals(0, MathUtils.lcm(0, 0));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try {
            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int
            MathUtils.lcm(Integer.MIN_VALUE, 1);
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected
        }
        
        try {
            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int
            MathUtils.lcm(Integer.MIN_VALUE, 1<<20);
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected
        }

        try {
            MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);
            fail("Expecting ArithmeticException");                                                          /***** ORIGINAL ASSERTION IS HERE *****/
        } catch (ArithmeticException ex) {
            // expected
        }
    }
trace file: src/test/org/apache/commons/math/util/MathUtilsTest.java
new test num: 34
ori test num: 0
pattern: 00
patches are written to file
running tests...
used time: Finished in 28.13 seconds
Failing tests: 4
	org.apache.commons.math.util.MathUtilsTest::testLcm$catena_11
	org.apache.commons.math.util.MathUtilsTest::testLcm$catena_12
	org.apache.commons.math.util.MathUtilsTest::testGcd$catena_17
	org.apache.commons.math.util.MathUtilsTest::testGcd$catena_18
processed: 00
pattern: 01
try to fix hunk: 1
insert before 714 with         if (lcm == Integer.MIN_VALUE){
            throw new ArithmeticException("overflow: lcm is 2^31");
        }

patches are written to file
running tests...
used time: Finished in 22.33 seconds
Failing tests: 2
	org.apache.commons.math.util.MathUtilsTest::testGcd$catena_17
	org.apache.commons.math.util.MathUtilsTest::testGcd$catena_18
select new bug
Pattern: 01
new failing tests:
org.apache.commons.math.util.MathUtilsTest::testLcm$catena_11
org.apache.commons.math.util.MathUtilsTest::testLcm$catena_12
Save found bug
processed: 01
pattern: 10
try to fix hunk: 0
insert before 543 with             if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {
                throw MathRuntimeException.createArithmeticException(
                        "overflow: gcd({0}, {1}) is 2^31",
                        new Object[] { p, q });
            }

patches are written to file
running tests...
used time: Finished in 23.94 seconds
Failing tests: 2
	org.apache.commons.math.util.MathUtilsTest::testLcm$catena_11
	org.apache.commons.math.util.MathUtilsTest::testLcm$catena_12
select new bug
Pattern: 10
new failing tests:
org.apache.commons.math.util.MathUtilsTest::testGcd$catena_17
org.apache.commons.math.util.MathUtilsTest::testGcd$catena_18
Save found bug
processed: 10
pattern: 11
try to fix hunk: 0
insert before 543 with             if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {
                throw MathRuntimeException.createArithmeticException(
                        "overflow: gcd({0}, {1}) is 2^31",
                        new Object[] { p, q });
            }

try to fix hunk: 1
insert before 714 with         if (lcm == Integer.MIN_VALUE){
            throw new ArithmeticException("overflow: lcm is 2^31");
        }

patches are written to file
running tests...
used time: Finished in 23.69 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 11
Find 2 new bugs
