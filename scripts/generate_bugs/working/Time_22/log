---
Begin generate bug_id: Time_22
num_of_hunks: 2
timeout for running: 3600
use working dir: ./working/data/Time_22
Try to checkout Time_22
build dir: ['./working/data/Time_22/build/classes', './working/data/Time_22/build/tests']
init FileManager
trace file: src/main/java/org/joda/time/base/BasePeriod.java
trying to replace old failing tests
edit: replace from 470 range 23 at src/test/java/org/joda/time/TestDuration_Basics.java
to
    public void testToPeriod_fixedZone$catena_0() throws Throwable {
        DateTimeZone zone = DateTimeZone.getDefault();
        try {
            DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));
            long length =
                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +
                5L * DateTimeConstants.MILLIS_PER_HOUR +
                6L * DateTimeConstants.MILLIS_PER_MINUTE +
                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;
            Duration dur = new Duration(length);
            Period test = dur.toPeriod();
            assertEquals(0, test.getYears());                     /***** ORIGINAL ASSERTION IS HERE *****/  // (4 + (3 * 7) + (2 * 30) + 365) == 450
            try{ assertEquals(0, test.getMonths());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(0, test.getWeeks());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(0, test.getDays());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals((450 * 24) + 5, test.getHours());                                             }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(6, test.getMinutes());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(7, test.getSeconds());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(8, test.getMillis());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        } finally {
            DateTimeZone.setDefault(zone);
        }
    }     public void testToPeriod_fixedZone$catena_1() throws Throwable {
        DateTimeZone zone = DateTimeZone.getDefault();
        try {
            DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));
            long length =
                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +
                5L * DateTimeConstants.MILLIS_PER_HOUR +
                6L * DateTimeConstants.MILLIS_PER_MINUTE +
                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;
            Duration dur = new Duration(length);
            Period test = dur.toPeriod();
            try{ assertEquals(0, test.getYears());                }catch(Throwable __SHOULD_BE_IGNORED){}  // (4 + (3 * 7) + (2 * 30) + 365) == 450
            assertEquals(0, test.getMonths());                                                              /***** ORIGINAL ASSERTION IS HERE *****/
            try{ assertEquals(0, test.getWeeks());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(0, test.getDays());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals((450 * 24) + 5, test.getHours());                                             }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(6, test.getMinutes());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(7, test.getSeconds());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(8, test.getMillis());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        } finally {
            DateTimeZone.setDefault(zone);
        }
    }     public void testToPeriod_fixedZone$catena_2() throws Throwable {
        DateTimeZone zone = DateTimeZone.getDefault();
        try {
            DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));
            long length =
                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +
                5L * DateTimeConstants.MILLIS_PER_HOUR +
                6L * DateTimeConstants.MILLIS_PER_MINUTE +
                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;
            Duration dur = new Duration(length);
            Period test = dur.toPeriod();
            try{ assertEquals(0, test.getYears());                }catch(Throwable __SHOULD_BE_IGNORED){}  // (4 + (3 * 7) + (2 * 30) + 365) == 450
            try{ assertEquals(0, test.getMonths());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
            assertEquals(0, test.getWeeks());                                                               /***** ORIGINAL ASSERTION IS HERE *****/
            try{ assertEquals(0, test.getDays());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals((450 * 24) + 5, test.getHours());                                             }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(6, test.getMinutes());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(7, test.getSeconds());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(8, test.getMillis());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        } finally {
            DateTimeZone.setDefault(zone);
        }
    }     public void testToPeriod_fixedZone$catena_3() throws Throwable {
        DateTimeZone zone = DateTimeZone.getDefault();
        try {
            DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));
            long length =
                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +
                5L * DateTimeConstants.MILLIS_PER_HOUR +
                6L * DateTimeConstants.MILLIS_PER_MINUTE +
                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;
            Duration dur = new Duration(length);
            Period test = dur.toPeriod();
            try{ assertEquals(0, test.getYears());                }catch(Throwable __SHOULD_BE_IGNORED){}  // (4 + (3 * 7) + (2 * 30) + 365) == 450
            try{ assertEquals(0, test.getMonths());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(0, test.getWeeks());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
            assertEquals(0, test.getDays());                                                                /***** ORIGINAL ASSERTION IS HERE *****/
            try{ assertEquals((450 * 24) + 5, test.getHours());                                             }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(6, test.getMinutes());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(7, test.getSeconds());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(8, test.getMillis());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        } finally {
            DateTimeZone.setDefault(zone);
        }
    }     public void testToPeriod_fixedZone$catena_4() throws Throwable {
        DateTimeZone zone = DateTimeZone.getDefault();
        try {
            DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));
            long length =
                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +
                5L * DateTimeConstants.MILLIS_PER_HOUR +
                6L * DateTimeConstants.MILLIS_PER_MINUTE +
                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;
            Duration dur = new Duration(length);
            Period test = dur.toPeriod();
            try{ assertEquals(0, test.getYears());                }catch(Throwable __SHOULD_BE_IGNORED){}  // (4 + (3 * 7) + (2 * 30) + 365) == 450
            try{ assertEquals(0, test.getMonths());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(0, test.getWeeks());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(0, test.getDays());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
            assertEquals((450 * 24) + 5, test.getHours());                                                  /***** ORIGINAL ASSERTION IS HERE *****/
            try{ assertEquals(6, test.getMinutes());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(7, test.getSeconds());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(8, test.getMillis());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        } finally {
            DateTimeZone.setDefault(zone);
        }
    }     public void testToPeriod_fixedZone$catena_5() throws Throwable {
        DateTimeZone zone = DateTimeZone.getDefault();
        try {
            DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));
            long length =
                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +
                5L * DateTimeConstants.MILLIS_PER_HOUR +
                6L * DateTimeConstants.MILLIS_PER_MINUTE +
                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;
            Duration dur = new Duration(length);
            Period test = dur.toPeriod();
            try{ assertEquals(0, test.getYears());                }catch(Throwable __SHOULD_BE_IGNORED){}  // (4 + (3 * 7) + (2 * 30) + 365) == 450
            try{ assertEquals(0, test.getMonths());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(0, test.getWeeks());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(0, test.getDays());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals((450 * 24) + 5, test.getHours());                                             }catch(Throwable __SHOULD_BE_IGNORED){}
            assertEquals(6, test.getMinutes());                                                             /***** ORIGINAL ASSERTION IS HERE *****/
            try{ assertEquals(7, test.getSeconds());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(8, test.getMillis());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        } finally {
            DateTimeZone.setDefault(zone);
        }
    }     public void testToPeriod_fixedZone$catena_6() throws Throwable {
        DateTimeZone zone = DateTimeZone.getDefault();
        try {
            DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));
            long length =
                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +
                5L * DateTimeConstants.MILLIS_PER_HOUR +
                6L * DateTimeConstants.MILLIS_PER_MINUTE +
                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;
            Duration dur = new Duration(length);
            Period test = dur.toPeriod();
            try{ assertEquals(0, test.getYears());                }catch(Throwable __SHOULD_BE_IGNORED){}  // (4 + (3 * 7) + (2 * 30) + 365) == 450
            try{ assertEquals(0, test.getMonths());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(0, test.getWeeks());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(0, test.getDays());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals((450 * 24) + 5, test.getHours());                                             }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(6, test.getMinutes());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
            assertEquals(7, test.getSeconds());                                                             /***** ORIGINAL ASSERTION IS HERE *****/
            try{ assertEquals(8, test.getMillis());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        } finally {
            DateTimeZone.setDefault(zone);
        }
    }     public void testToPeriod_fixedZone$catena_7() throws Throwable {
        DateTimeZone zone = DateTimeZone.getDefault();
        try {
            DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));
            long length =
                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +
                5L * DateTimeConstants.MILLIS_PER_HOUR +
                6L * DateTimeConstants.MILLIS_PER_MINUTE +
                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;
            Duration dur = new Duration(length);
            Period test = dur.toPeriod();
            try{ assertEquals(0, test.getYears());                }catch(Throwable __SHOULD_BE_IGNORED){}  // (4 + (3 * 7) + (2 * 30) + 365) == 450
            try{ assertEquals(0, test.getMonths());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(0, test.getWeeks());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(0, test.getDays());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals((450 * 24) + 5, test.getHours());                                             }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(6, test.getMinutes());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(7, test.getSeconds());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
            assertEquals(8, test.getMillis());                                                              /***** ORIGINAL ASSERTION IS HERE *****/
        } finally {
            DateTimeZone.setDefault(zone);
        }
    }
edit: replace from 174 range 24 at src/test/java/org/joda/time/TestPeriod_Constructors.java
to
    public void testConstructor_long_fixedZone$catena_0() throws Throwable {
        DateTimeZone zone = DateTimeZone.getDefault();
        try {
            DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));
            long length =
                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +
                5L * DateTimeConstants.MILLIS_PER_HOUR +
                6L * DateTimeConstants.MILLIS_PER_MINUTE +
                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;
            Period test = new Period(length);
            assertEquals(PeriodType.standard(), test.getPeriodType());                                      /***** ORIGINAL ASSERTION IS HERE *****/
            // only time fields are precise in AllType
            try{ assertEquals(0, test.getYears());                }catch(Throwable __SHOULD_BE_IGNORED){}  // (4 + (3 * 7) + (2 * 30) + 365) == 450
            try{ assertEquals(0, test.getMonths());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(0, test.getWeeks());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(0, test.getDays());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals((450 * 24) + 5, test.getHours());                                             }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(6, test.getMinutes());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(7, test.getSeconds());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(8, test.getMillis());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        } finally {
            DateTimeZone.setDefault(zone);
        }
    }     public void testConstructor_long_fixedZone$catena_1() throws Throwable {
        DateTimeZone zone = DateTimeZone.getDefault();
        try {
            DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));
            long length =
                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +
                5L * DateTimeConstants.MILLIS_PER_HOUR +
                6L * DateTimeConstants.MILLIS_PER_MINUTE +
                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;
            Period test = new Period(length);
            try{ assertEquals(PeriodType.standard(), test.getPeriodType());                                 }catch(Throwable __SHOULD_BE_IGNORED){}
            // only time fields are precise in AllType
            assertEquals(0, test.getYears());                     /***** ORIGINAL ASSERTION IS HERE *****/  // (4 + (3 * 7) + (2 * 30) + 365) == 450
            try{ assertEquals(0, test.getMonths());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(0, test.getWeeks());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(0, test.getDays());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals((450 * 24) + 5, test.getHours());                                             }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(6, test.getMinutes());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(7, test.getSeconds());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(8, test.getMillis());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        } finally {
            DateTimeZone.setDefault(zone);
        }
    }     public void testConstructor_long_fixedZone$catena_2() throws Throwable {
        DateTimeZone zone = DateTimeZone.getDefault();
        try {
            DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));
            long length =
                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +
                5L * DateTimeConstants.MILLIS_PER_HOUR +
                6L * DateTimeConstants.MILLIS_PER_MINUTE +
                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;
            Period test = new Period(length);
            try{ assertEquals(PeriodType.standard(), test.getPeriodType());                                 }catch(Throwable __SHOULD_BE_IGNORED){}
            // only time fields are precise in AllType
            try{ assertEquals(0, test.getYears());                }catch(Throwable __SHOULD_BE_IGNORED){}  // (4 + (3 * 7) + (2 * 30) + 365) == 450
            assertEquals(0, test.getMonths());                                                              /***** ORIGINAL ASSERTION IS HERE *****/
            try{ assertEquals(0, test.getWeeks());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(0, test.getDays());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals((450 * 24) + 5, test.getHours());                                             }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(6, test.getMinutes());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(7, test.getSeconds());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(8, test.getMillis());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        } finally {
            DateTimeZone.setDefault(zone);
        }
    }     public void testConstructor_long_fixedZone$catena_3() throws Throwable {
        DateTimeZone zone = DateTimeZone.getDefault();
        try {
            DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));
            long length =
                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +
                5L * DateTimeConstants.MILLIS_PER_HOUR +
                6L * DateTimeConstants.MILLIS_PER_MINUTE +
                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;
            Period test = new Period(length);
            try{ assertEquals(PeriodType.standard(), test.getPeriodType());                                 }catch(Throwable __SHOULD_BE_IGNORED){}
            // only time fields are precise in AllType
            try{ assertEquals(0, test.getYears());                }catch(Throwable __SHOULD_BE_IGNORED){}  // (4 + (3 * 7) + (2 * 30) + 365) == 450
            try{ assertEquals(0, test.getMonths());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
            assertEquals(0, test.getWeeks());                                                               /***** ORIGINAL ASSERTION IS HERE *****/
            try{ assertEquals(0, test.getDays());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals((450 * 24) + 5, test.getHours());                                             }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(6, test.getMinutes());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(7, test.getSeconds());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(8, test.getMillis());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        } finally {
            DateTimeZone.setDefault(zone);
        }
    }     public void testConstructor_long_fixedZone$catena_4() throws Throwable {
        DateTimeZone zone = DateTimeZone.getDefault();
        try {
            DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));
            long length =
                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +
                5L * DateTimeConstants.MILLIS_PER_HOUR +
                6L * DateTimeConstants.MILLIS_PER_MINUTE +
                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;
            Period test = new Period(length);
            try{ assertEquals(PeriodType.standard(), test.getPeriodType());                                 }catch(Throwable __SHOULD_BE_IGNORED){}
            // only time fields are precise in AllType
            try{ assertEquals(0, test.getYears());                }catch(Throwable __SHOULD_BE_IGNORED){}  // (4 + (3 * 7) + (2 * 30) + 365) == 450
            try{ assertEquals(0, test.getMonths());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(0, test.getWeeks());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
            assertEquals(0, test.getDays());                                                                /***** ORIGINAL ASSERTION IS HERE *****/
            try{ assertEquals((450 * 24) + 5, test.getHours());                                             }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(6, test.getMinutes());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(7, test.getSeconds());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(8, test.getMillis());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        } finally {
            DateTimeZone.setDefault(zone);
        }
    }     public void testConstructor_long_fixedZone$catena_5() throws Throwable {
        DateTimeZone zone = DateTimeZone.getDefault();
        try {
            DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));
            long length =
                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +
                5L * DateTimeConstants.MILLIS_PER_HOUR +
                6L * DateTimeConstants.MILLIS_PER_MINUTE +
                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;
            Period test = new Period(length);
            try{ assertEquals(PeriodType.standard(), test.getPeriodType());                                 }catch(Throwable __SHOULD_BE_IGNORED){}
            // only time fields are precise in AllType
            try{ assertEquals(0, test.getYears());                }catch(Throwable __SHOULD_BE_IGNORED){}  // (4 + (3 * 7) + (2 * 30) + 365) == 450
            try{ assertEquals(0, test.getMonths());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(0, test.getWeeks());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(0, test.getDays());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
            assertEquals((450 * 24) + 5, test.getHours());                                                  /***** ORIGINAL ASSERTION IS HERE *****/
            try{ assertEquals(6, test.getMinutes());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(7, test.getSeconds());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(8, test.getMillis());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        } finally {
            DateTimeZone.setDefault(zone);
        }
    }     public void testConstructor_long_fixedZone$catena_6() throws Throwable {
        DateTimeZone zone = DateTimeZone.getDefault();
        try {
            DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));
            long length =
                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +
                5L * DateTimeConstants.MILLIS_PER_HOUR +
                6L * DateTimeConstants.MILLIS_PER_MINUTE +
                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;
            Period test = new Period(length);
            try{ assertEquals(PeriodType.standard(), test.getPeriodType());                                 }catch(Throwable __SHOULD_BE_IGNORED){}
            // only time fields are precise in AllType
            try{ assertEquals(0, test.getYears());                }catch(Throwable __SHOULD_BE_IGNORED){}  // (4 + (3 * 7) + (2 * 30) + 365) == 450
            try{ assertEquals(0, test.getMonths());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(0, test.getWeeks());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(0, test.getDays());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals((450 * 24) + 5, test.getHours());                                             }catch(Throwable __SHOULD_BE_IGNORED){}
            assertEquals(6, test.getMinutes());                                                             /***** ORIGINAL ASSERTION IS HERE *****/
            try{ assertEquals(7, test.getSeconds());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(8, test.getMillis());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        } finally {
            DateTimeZone.setDefault(zone);
        }
    }     public void testConstructor_long_fixedZone$catena_7() throws Throwable {
        DateTimeZone zone = DateTimeZone.getDefault();
        try {
            DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));
            long length =
                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +
                5L * DateTimeConstants.MILLIS_PER_HOUR +
                6L * DateTimeConstants.MILLIS_PER_MINUTE +
                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;
            Period test = new Period(length);
            try{ assertEquals(PeriodType.standard(), test.getPeriodType());                                 }catch(Throwable __SHOULD_BE_IGNORED){}
            // only time fields are precise in AllType
            try{ assertEquals(0, test.getYears());                }catch(Throwable __SHOULD_BE_IGNORED){}  // (4 + (3 * 7) + (2 * 30) + 365) == 450
            try{ assertEquals(0, test.getMonths());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(0, test.getWeeks());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(0, test.getDays());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals((450 * 24) + 5, test.getHours());                                             }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(6, test.getMinutes());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
            assertEquals(7, test.getSeconds());                                                             /***** ORIGINAL ASSERTION IS HERE *****/
            try{ assertEquals(8, test.getMillis());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
        } finally {
            DateTimeZone.setDefault(zone);
        }
    }     public void testConstructor_long_fixedZone$catena_8() throws Throwable {
        DateTimeZone zone = DateTimeZone.getDefault();
        try {
            DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));
            long length =
                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +
                5L * DateTimeConstants.MILLIS_PER_HOUR +
                6L * DateTimeConstants.MILLIS_PER_MINUTE +
                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;
            Period test = new Period(length);
            try{ assertEquals(PeriodType.standard(), test.getPeriodType());                                 }catch(Throwable __SHOULD_BE_IGNORED){}
            // only time fields are precise in AllType
            try{ assertEquals(0, test.getYears());                }catch(Throwable __SHOULD_BE_IGNORED){}  // (4 + (3 * 7) + (2 * 30) + 365) == 450
            try{ assertEquals(0, test.getMonths());                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(0, test.getWeeks());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(0, test.getDays());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals((450 * 24) + 5, test.getHours());                                             }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(6, test.getMinutes());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(7, test.getSeconds());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
            assertEquals(8, test.getMillis());                                                              /***** ORIGINAL ASSERTION IS HERE *****/
        } finally {
            DateTimeZone.setDefault(zone);
        }
    }
trace file: src/test/java/org/joda/time/TestDuration_Basics.java
trace file: src/test/java/org/joda/time/TestPeriod_Constructors.java
new test num: 17
ori test num: 0
pattern: 00
patches are written to file
running tests...
used time: Finished in 38.81 seconds
Failing tests: 6
	org.joda.time.TestDuration_Basics::testToPeriod_fixedZone$catena_2
	org.joda.time.TestDuration_Basics::testToPeriod_fixedZone$catena_3
	org.joda.time.TestDuration_Basics::testToPeriod_fixedZone$catena_4
	org.joda.time.TestPeriod_Constructors::testConstructor_long_fixedZone$catena_3
	org.joda.time.TestPeriod_Constructors::testConstructor_long_fixedZone$catena_4
	org.joda.time.TestPeriod_Constructors::testConstructor_long_fixedZone$catena_5
processed: 00
pattern: 01
try to fix hunk: 1
insert before 224 with         iType = PeriodType.time();
        int[] values = ISOChronology.getInstanceUTC().get(this, duration);
        iType = PeriodType.standard();
        iValues = new int[8];
        System.arraycopy(values, 0, iValues, 4, 4);

patches are written to file
running tests...
used time: Finished in 31.96 seconds
Failing tests: 0
select new bug
Pattern: 01
new failing tests:
org.joda.time.TestDuration_Basics::testToPeriod_fixedZone$catena_4
org.joda.time.TestDuration_Basics::testToPeriod_fixedZone$catena_3
org.joda.time.TestPeriod_Constructors::testConstructor_long_fixedZone$catena_5
org.joda.time.TestDuration_Basics::testToPeriod_fixedZone$catena_2
org.joda.time.TestPeriod_Constructors::testConstructor_long_fixedZone$catena_4
org.joda.time.TestPeriod_Constructors::testConstructor_long_fixedZone$catena_3
Save found bug
processed: 01
pattern: 10
try to fix hunk: 0
replace from 222 with range 1 to
        super();

patches are written to file
running tests...
used time: Finished in 32.12 seconds
Failing tests: 64
	org.joda.time.TestDuration_Basics::testToPeriod
	org.joda.time.TestDuration_Basics::testToPeriod_fixedZone$catena_0
	org.joda.time.TestDuration_Basics::testToPeriod_fixedZone$catena_1
	org.joda.time.TestDuration_Basics::testToPeriod_fixedZone$catena_2
	org.joda.time.TestDuration_Basics::testToPeriod_fixedZone$catena_3
	org.joda.time.TestDuration_Basics::testToPeriod_fixedZone$catena_4
	org.joda.time.TestDuration_Basics::testToPeriod_fixedZone$catena_5
	org.joda.time.TestDuration_Basics::testToPeriod_fixedZone$catena_6
	org.joda.time.TestDuration_Basics::testToPeriod_fixedZone$catena_7
	org.joda.time.TestInterval_Constructors::testConstructor_RI_RP4
	org.joda.time.TestInterval_Constructors::testConstructor_RP_RI4
	org.joda.time.TestMutableInterval_Constructors::testConstructor_RI_RP4
	org.joda.time.TestMutableInterval_Constructors::testConstructor_RP_RI4
	org.joda.time.TestMutableInterval_Updates::testSetPeriodAfterStart_RI1
	org.joda.time.TestMutableInterval_Updates::testSetPeriodBeforeEnd_RI1
	org.joda.time.TestMutableInterval_Updates::testSePeriodAfterStart_RI2
	org.joda.time.TestMutableInterval_Updates::testSePeriodBeforeEnd_RI2
	org.joda.time.TestMutablePeriod_Basics::testSerialization
	org.joda.time.TestMutablePeriod_Basics::testClone
	org.joda.time.TestMutablePeriod_Basics::testToPeriod
	org.joda.time.TestMutablePeriod_Basics::testCopy
	org.joda.time.TestMutablePeriod_Basics::testEqualsHashCode
	org.joda.time.TestMutablePeriod_Basics::testToString
	org.joda.time.TestMutablePeriod_Basics::testToMutablePeriod
	org.joda.time.TestMutablePeriod_Basics::testToDurationFrom
	org.joda.time.TestMutablePeriod_Constructors::testConstructor_long1
	org.joda.time.TestMutablePeriod_Constructors::testConstructor_long2
	org.joda.time.TestMutablePeriod_Constructors::testConstructor_long3
	org.joda.time.TestMutablePeriod_Updates::testAdd_RInterval1
	org.joda.time.TestMutablePeriod_Updates::testAdd_RInterval2
	org.joda.time.TestMutablePeriod_Updates::testAdd_RD1
	org.joda.time.TestMutablePeriod_Updates::testAdd_RP1
	org.joda.time.TestMutablePeriod_Updates::testAdd_RP3
	org.joda.time.TestMutablePeriod_Updates::testAdd_8ints1
	org.joda.time.TestMutablePeriod_Updates::testAdd_long1
	org.joda.time.TestMutablePeriod_Updates::testAdd_long_Chronology1
	org.joda.time.TestPeriod_Basics::testSerialization
	org.joda.time.TestPeriod_Basics::testWithPeriodType1
	org.joda.time.TestPeriod_Basics::testWithPeriodType2
	org.joda.time.TestPeriod_Basics::testWithPeriodType4
	org.joda.time.TestPeriod_Basics::testEqualsHashCode
	org.joda.time.TestPeriod_Basics::testToString
	org.joda.time.TestPeriod_Basics::testToMutablePeriod
	org.joda.time.TestPeriod_Basics::testToDurationTo
	org.joda.time.TestPeriod_Basics::testToDurationFrom
	org.joda.time.TestPeriod_Basics::testGetMethods
	org.joda.time.TestPeriod_Basics::testGetPeriodType
	org.joda.time.TestPeriod_Constructors::testConstructor_long1
	org.joda.time.TestPeriod_Constructors::testConstructor_long2
	org.joda.time.TestPeriod_Constructors::testConstructor_long3
	org.joda.time.TestPeriod_Constructors::testConstructor_long_fixedZone$catena_0
	org.joda.time.TestPeriod_Constructors::testConstructor_long_fixedZone$catena_1
	org.joda.time.TestPeriod_Constructors::testConstructor_long_fixedZone$catena_2
	org.joda.time.TestPeriod_Constructors::testConstructor_long_fixedZone$catena_3
	org.joda.time.TestPeriod_Constructors::testConstructor_long_fixedZone$catena_4
	org.joda.time.TestPeriod_Constructors::testConstructor_long_fixedZone$catena_5
	org.joda.time.TestPeriod_Constructors::testConstructor_long_fixedZone$catena_6
	org.joda.time.TestPeriod_Constructors::testConstructor_long_fixedZone$catena_7
	org.joda.time.TestPeriod_Constructors::testConstructor_long_fixedZone$catena_8
	org.joda.time.format.TestISOPeriodFormat::testFormatAlternateWithWeeks
	org.joda.time.format.TestISOPeriodFormat::testFormatStandard
	org.joda.time.format.TestISOPeriodFormat::testFormatAlternateExtended
	org.joda.time.format.TestISOPeriodFormat::testFormatAlternateExtendedWithWeeks
	org.joda.time.format.TestISOPeriodFormat::testFormatAlternate
Includes new failing tests, set to unusable
processed: 10
pattern: 11
try to fix hunk: 0
replace from 222 with range 1 to
        super();

try to fix hunk: 1
insert before 224 with         iType = PeriodType.time();
        int[] values = ISOChronology.getInstanceUTC().get(this, duration);
        iType = PeriodType.standard();
        iValues = new int[8];
        System.arraycopy(values, 0, iValues, 4, 4);

patches are written to file
running tests...
used time: Finished in 31.62 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 11
Find 1 new bugs
