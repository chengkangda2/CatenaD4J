{
    "original": {
        "num_of_hunks": 2,
        "0": {
            "file_name": "src/com/google/javascript/jscomp/CheckSideEffects.java",
            "from_line_no": 101,
            "to_line_no": 101,
            "replaced_with": "    if (n.isExprResult() || n.isBlock()) {\n",
            "replaced": "    if (n.isExprResult()) {\n",
            "patch_type": "replace",
            "next_line_no": 102
        },
        "1": {
            "file_name": "src/com/google/javascript/jscomp/CheckSideEffects.java",
            "from_line_no": 113,
            "to_line_no": 130,
            "replaced_with": "    if (!isResultUsed &&\n",
            "replaced": "    if (parent.getType() == Token.COMMA) {\n      if (isResultUsed) {\n        return;\n      }\n      if (n == parent.getLastChild()) {\n        for (Node an : parent.getAncestors()) {\n          int ancestorType = an.getType();\n          if (ancestorType == Token.COMMA) continue;\n          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n          else break;\n        }\n      }\n    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n        return;\n      }\n    }\n    if (\n",
            "patch_type": "replace",
            "next_line_no": 131
        }
    },
    "method": {
        "failing_tests": [
            "com.google.javascript.jscomp.CheckSideEffectsTest::testUselessCode"
        ],
        "com.google.javascript.jscomp.CheckSideEffectsTest::testUselessCode": {
            "file_path": "test/com/google/javascript/jscomp/CheckSideEffectsTest.java",
            "Instance": "Begin: Pos(49, 10)\nEnd: Pos(80, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Closure_21/test//com/google/javascript/jscomp/CheckSideEffectsTest.java\nName: testUselessCode\nChilds: [StatementAssertion<Begin: Pos(50, 5), End: Pos(50, 48)>,\nStatementAssertion<Begin: Pos(51, 5), End: Pos(51, 68)>,\nStatementAssertion<Begin: Pos(53, 5), End: Pos(53, 29)>,\nStatementAssertion<Begin: Pos(54, 5), End: Pos(54, 75)>,\nStatementAssertion<Begin: Pos(56, 5), End: Pos(56, 23)>,\nStatementAssertion<Begin: Pos(57, 5), End: Pos(57, 55)>,\nStatementAssertion<Begin: Pos(59, 5), End: Pos(59, 31)>,\nStatementAssertion<Begin: Pos(60, 5), End: Pos(61, 58)>,\nStatementAssertion<Begin: Pos(63, 5), End: Pos(63, 17)>,\nStatementAssertion<Begin: Pos(64, 5), End: Pos(64, 35)>,\nStatementAssertion<Begin: Pos(66, 5), End: Pos(66, 39)>,\nStatementAssertion<Begin: Pos(67, 5), End: Pos(68, 60)>,\nStatementAssertion<Begin: Pos(69, 5), End: Pos(70, 57)>,\nStatementAssertion<Begin: Pos(71, 5), End: Pos(72, 64)>,\nStatementAssertion<Begin: Pos(73, 5), End: Pos(74, 71)>,\nStatementAssertion<Begin: Pos(75, 5), End: Pos(75, 41)>,\nStatementAssertion<Begin: Pos(76, 5), End: Pos(76, 67)>,\nStatementAssertion<Begin: Pos(77, 5), End: Pos(79, 49)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Closure_21/test//com/google/javascript/jscomp/CheckSideEffectsTest.java",
            "name": "testUselessCode",
            "begin": "Pos(49, 10)",
            "end": "Pos(80, 3)",
            "begin_line_no": 49,
            "end_line_no": 80,
            "child": [
                "Begin: Pos(50, 5)\nEnd: Pos(50, 48)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(51, 5)\nEnd: Pos(51, 68)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(53, 5)\nEnd: Pos(53, 29)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(54, 5)\nEnd: Pos(54, 75)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(56, 5)\nEnd: Pos(56, 23)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(57, 5)\nEnd: Pos(57, 55)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(59, 5)\nEnd: Pos(59, 31)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(60, 5)\nEnd: Pos(61, 58)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(63, 5)\nEnd: Pos(63, 17)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(64, 5)\nEnd: Pos(64, 35)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(66, 5)\nEnd: Pos(66, 39)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(67, 5)\nEnd: Pos(68, 60)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(69, 5)\nEnd: Pos(70, 57)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(71, 5)\nEnd: Pos(72, 64)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(73, 5)\nEnd: Pos(74, 71)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(75, 5)\nEnd: Pos(75, 41)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(76, 5)\nEnd: Pos(76, 67)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(77, 5)\nEnd: Pos(79, 49)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "  public void testUselessCode$catena_0() {\n    test(\"function f(x) { if(x) return; }\", ok);                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\"function f(x) { if(x); }\", \"function f(x) { if(x); }\", e);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"if(x) x = y;\", ok);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if(x) x == bar();\", \"if(x) JSCOMPILER_PRESERVE(x == bar());\", e);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"x = 3;\", ok);                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"x == 3;\", \"JSCOMPILER_PRESERVE(x == 3);\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var x = 'test'\", ok);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var x = 'test'\\n'str'\",\n         \"var x = 'test'\\nJSCOMPILER_PRESERVE('str')\", e);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"\", ok);                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"foo();;;;bar();;;;\", ok);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var a, b; a = 5, b = 6\", ok);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = 5, b == 6\",\n         \"var a, b; a = 5, JSCOMPILER_PRESERVE(b == 6)\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (5, 6)\",\n         \"var a, b; a = (JSCOMPILER_PRESERVE(5), 6)\", e);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), 6, 7)\",\n         \"var a, b; a = (bar(), JSCOMPILER_PRESERVE(6), 7)\", e);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), bar(), 7, 8)\",\n         \"var a, b; a = (bar(), bar(), JSCOMPILER_PRESERVE(7), 8)\", e);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (b = 7, 6)\", ok);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(x(), 2));\", ok);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(2, 3));\",\n         \"function x(){}\\nfunction f(a, b){}\\n\" +\n         \"f(1,(JSCOMPILER_PRESERVE(2), 3));\", e);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testUselessCode$catena_1() {\n    try{ test(\"function f(x) { if(x) return; }\", ok);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    test(\"function f(x) { if(x); }\", \"function f(x) { if(x); }\", e);                                        /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ test(\"if(x) x = y;\", ok);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if(x) x == bar();\", \"if(x) JSCOMPILER_PRESERVE(x == bar());\", e);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"x = 3;\", ok);                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"x == 3;\", \"JSCOMPILER_PRESERVE(x == 3);\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var x = 'test'\", ok);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var x = 'test'\\n'str'\",\n         \"var x = 'test'\\nJSCOMPILER_PRESERVE('str')\", e);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"\", ok);                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"foo();;;;bar();;;;\", ok);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var a, b; a = 5, b = 6\", ok);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = 5, b == 6\",\n         \"var a, b; a = 5, JSCOMPILER_PRESERVE(b == 6)\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (5, 6)\",\n         \"var a, b; a = (JSCOMPILER_PRESERVE(5), 6)\", e);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), 6, 7)\",\n         \"var a, b; a = (bar(), JSCOMPILER_PRESERVE(6), 7)\", e);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), bar(), 7, 8)\",\n         \"var a, b; a = (bar(), bar(), JSCOMPILER_PRESERVE(7), 8)\", e);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (b = 7, 6)\", ok);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(x(), 2));\", ok);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(2, 3));\",\n         \"function x(){}\\nfunction f(a, b){}\\n\" +\n         \"f(1,(JSCOMPILER_PRESERVE(2), 3));\", e);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testUselessCode$catena_2() {\n    try{ test(\"function f(x) { if(x) return; }\", ok);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f(x) { if(x); }\", \"function f(x) { if(x); }\", e);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    test(\"if(x) x = y;\", ok);                                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\"if(x) x == bar();\", \"if(x) JSCOMPILER_PRESERVE(x == bar());\", e);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"x = 3;\", ok);                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"x == 3;\", \"JSCOMPILER_PRESERVE(x == 3);\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var x = 'test'\", ok);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var x = 'test'\\n'str'\",\n         \"var x = 'test'\\nJSCOMPILER_PRESERVE('str')\", e);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"\", ok);                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"foo();;;;bar();;;;\", ok);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var a, b; a = 5, b = 6\", ok);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = 5, b == 6\",\n         \"var a, b; a = 5, JSCOMPILER_PRESERVE(b == 6)\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (5, 6)\",\n         \"var a, b; a = (JSCOMPILER_PRESERVE(5), 6)\", e);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), 6, 7)\",\n         \"var a, b; a = (bar(), JSCOMPILER_PRESERVE(6), 7)\", e);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), bar(), 7, 8)\",\n         \"var a, b; a = (bar(), bar(), JSCOMPILER_PRESERVE(7), 8)\", e);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (b = 7, 6)\", ok);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(x(), 2));\", ok);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(2, 3));\",\n         \"function x(){}\\nfunction f(a, b){}\\n\" +\n         \"f(1,(JSCOMPILER_PRESERVE(2), 3));\", e);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testUselessCode$catena_3() {\n    try{ test(\"function f(x) { if(x) return; }\", ok);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f(x) { if(x); }\", \"function f(x) { if(x); }\", e);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"if(x) x = y;\", ok);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    test(\"if(x) x == bar();\", \"if(x) JSCOMPILER_PRESERVE(x == bar());\", e);                                 /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ test(\"x = 3;\", ok);                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"x == 3;\", \"JSCOMPILER_PRESERVE(x == 3);\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var x = 'test'\", ok);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var x = 'test'\\n'str'\",\n         \"var x = 'test'\\nJSCOMPILER_PRESERVE('str')\", e);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"\", ok);                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"foo();;;;bar();;;;\", ok);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var a, b; a = 5, b = 6\", ok);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = 5, b == 6\",\n         \"var a, b; a = 5, JSCOMPILER_PRESERVE(b == 6)\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (5, 6)\",\n         \"var a, b; a = (JSCOMPILER_PRESERVE(5), 6)\", e);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), 6, 7)\",\n         \"var a, b; a = (bar(), JSCOMPILER_PRESERVE(6), 7)\", e);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), bar(), 7, 8)\",\n         \"var a, b; a = (bar(), bar(), JSCOMPILER_PRESERVE(7), 8)\", e);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (b = 7, 6)\", ok);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(x(), 2));\", ok);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(2, 3));\",\n         \"function x(){}\\nfunction f(a, b){}\\n\" +\n         \"f(1,(JSCOMPILER_PRESERVE(2), 3));\", e);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testUselessCode$catena_4() {\n    try{ test(\"function f(x) { if(x) return; }\", ok);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f(x) { if(x); }\", \"function f(x) { if(x); }\", e);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"if(x) x = y;\", ok);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if(x) x == bar();\", \"if(x) JSCOMPILER_PRESERVE(x == bar());\", e);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    test(\"x = 3;\", ok);                                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\"x == 3;\", \"JSCOMPILER_PRESERVE(x == 3);\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var x = 'test'\", ok);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var x = 'test'\\n'str'\",\n         \"var x = 'test'\\nJSCOMPILER_PRESERVE('str')\", e);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"\", ok);                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"foo();;;;bar();;;;\", ok);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var a, b; a = 5, b = 6\", ok);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = 5, b == 6\",\n         \"var a, b; a = 5, JSCOMPILER_PRESERVE(b == 6)\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (5, 6)\",\n         \"var a, b; a = (JSCOMPILER_PRESERVE(5), 6)\", e);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), 6, 7)\",\n         \"var a, b; a = (bar(), JSCOMPILER_PRESERVE(6), 7)\", e);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), bar(), 7, 8)\",\n         \"var a, b; a = (bar(), bar(), JSCOMPILER_PRESERVE(7), 8)\", e);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (b = 7, 6)\", ok);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(x(), 2));\", ok);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(2, 3));\",\n         \"function x(){}\\nfunction f(a, b){}\\n\" +\n         \"f(1,(JSCOMPILER_PRESERVE(2), 3));\", e);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testUselessCode$catena_5() {\n    try{ test(\"function f(x) { if(x) return; }\", ok);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f(x) { if(x); }\", \"function f(x) { if(x); }\", e);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"if(x) x = y;\", ok);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if(x) x == bar();\", \"if(x) JSCOMPILER_PRESERVE(x == bar());\", e);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"x = 3;\", ok);                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    test(\"x == 3;\", \"JSCOMPILER_PRESERVE(x == 3);\", e);                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ test(\"var x = 'test'\", ok);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var x = 'test'\\n'str'\",\n         \"var x = 'test'\\nJSCOMPILER_PRESERVE('str')\", e);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"\", ok);                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"foo();;;;bar();;;;\", ok);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var a, b; a = 5, b = 6\", ok);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = 5, b == 6\",\n         \"var a, b; a = 5, JSCOMPILER_PRESERVE(b == 6)\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (5, 6)\",\n         \"var a, b; a = (JSCOMPILER_PRESERVE(5), 6)\", e);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), 6, 7)\",\n         \"var a, b; a = (bar(), JSCOMPILER_PRESERVE(6), 7)\", e);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), bar(), 7, 8)\",\n         \"var a, b; a = (bar(), bar(), JSCOMPILER_PRESERVE(7), 8)\", e);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (b = 7, 6)\", ok);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(x(), 2));\", ok);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(2, 3));\",\n         \"function x(){}\\nfunction f(a, b){}\\n\" +\n         \"f(1,(JSCOMPILER_PRESERVE(2), 3));\", e);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testUselessCode$catena_6() {\n    try{ test(\"function f(x) { if(x) return; }\", ok);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f(x) { if(x); }\", \"function f(x) { if(x); }\", e);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"if(x) x = y;\", ok);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if(x) x == bar();\", \"if(x) JSCOMPILER_PRESERVE(x == bar());\", e);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"x = 3;\", ok);                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"x == 3;\", \"JSCOMPILER_PRESERVE(x == 3);\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    test(\"var x = 'test'\", ok);                                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\"var x = 'test'\\n'str'\",\n         \"var x = 'test'\\nJSCOMPILER_PRESERVE('str')\", e);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"\", ok);                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"foo();;;;bar();;;;\", ok);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var a, b; a = 5, b = 6\", ok);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = 5, b == 6\",\n         \"var a, b; a = 5, JSCOMPILER_PRESERVE(b == 6)\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (5, 6)\",\n         \"var a, b; a = (JSCOMPILER_PRESERVE(5), 6)\", e);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), 6, 7)\",\n         \"var a, b; a = (bar(), JSCOMPILER_PRESERVE(6), 7)\", e);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), bar(), 7, 8)\",\n         \"var a, b; a = (bar(), bar(), JSCOMPILER_PRESERVE(7), 8)\", e);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (b = 7, 6)\", ok);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(x(), 2));\", ok);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(2, 3));\",\n         \"function x(){}\\nfunction f(a, b){}\\n\" +\n         \"f(1,(JSCOMPILER_PRESERVE(2), 3));\", e);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testUselessCode$catena_7() {\n    try{ test(\"function f(x) { if(x) return; }\", ok);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f(x) { if(x); }\", \"function f(x) { if(x); }\", e);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"if(x) x = y;\", ok);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if(x) x == bar();\", \"if(x) JSCOMPILER_PRESERVE(x == bar());\", e);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"x = 3;\", ok);                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"x == 3;\", \"JSCOMPILER_PRESERVE(x == 3);\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var x = 'test'\", ok);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    test(\"var x = 'test'\\n'str'\",\n         \"var x = 'test'\\nJSCOMPILER_PRESERVE('str')\", e);                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ test(\"\", ok);                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"foo();;;;bar();;;;\", ok);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var a, b; a = 5, b = 6\", ok);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = 5, b == 6\",\n         \"var a, b; a = 5, JSCOMPILER_PRESERVE(b == 6)\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (5, 6)\",\n         \"var a, b; a = (JSCOMPILER_PRESERVE(5), 6)\", e);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), 6, 7)\",\n         \"var a, b; a = (bar(), JSCOMPILER_PRESERVE(6), 7)\", e);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), bar(), 7, 8)\",\n         \"var a, b; a = (bar(), bar(), JSCOMPILER_PRESERVE(7), 8)\", e);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (b = 7, 6)\", ok);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(x(), 2));\", ok);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(2, 3));\",\n         \"function x(){}\\nfunction f(a, b){}\\n\" +\n         \"f(1,(JSCOMPILER_PRESERVE(2), 3));\", e);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testUselessCode$catena_8() {\n    try{ test(\"function f(x) { if(x) return; }\", ok);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f(x) { if(x); }\", \"function f(x) { if(x); }\", e);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"if(x) x = y;\", ok);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if(x) x == bar();\", \"if(x) JSCOMPILER_PRESERVE(x == bar());\", e);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"x = 3;\", ok);                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"x == 3;\", \"JSCOMPILER_PRESERVE(x == 3);\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var x = 'test'\", ok);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var x = 'test'\\n'str'\",\n         \"var x = 'test'\\nJSCOMPILER_PRESERVE('str')\", e);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    test(\"\", ok);                                                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\"foo();;;;bar();;;;\", ok);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var a, b; a = 5, b = 6\", ok);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = 5, b == 6\",\n         \"var a, b; a = 5, JSCOMPILER_PRESERVE(b == 6)\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (5, 6)\",\n         \"var a, b; a = (JSCOMPILER_PRESERVE(5), 6)\", e);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), 6, 7)\",\n         \"var a, b; a = (bar(), JSCOMPILER_PRESERVE(6), 7)\", e);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), bar(), 7, 8)\",\n         \"var a, b; a = (bar(), bar(), JSCOMPILER_PRESERVE(7), 8)\", e);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (b = 7, 6)\", ok);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(x(), 2));\", ok);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(2, 3));\",\n         \"function x(){}\\nfunction f(a, b){}\\n\" +\n         \"f(1,(JSCOMPILER_PRESERVE(2), 3));\", e);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testUselessCode$catena_9() {\n    try{ test(\"function f(x) { if(x) return; }\", ok);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f(x) { if(x); }\", \"function f(x) { if(x); }\", e);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"if(x) x = y;\", ok);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if(x) x == bar();\", \"if(x) JSCOMPILER_PRESERVE(x == bar());\", e);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"x = 3;\", ok);                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"x == 3;\", \"JSCOMPILER_PRESERVE(x == 3);\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var x = 'test'\", ok);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var x = 'test'\\n'str'\",\n         \"var x = 'test'\\nJSCOMPILER_PRESERVE('str')\", e);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"\", ok);                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    test(\"foo();;;;bar();;;;\", ok);                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ test(\"var a, b; a = 5, b = 6\", ok);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = 5, b == 6\",\n         \"var a, b; a = 5, JSCOMPILER_PRESERVE(b == 6)\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (5, 6)\",\n         \"var a, b; a = (JSCOMPILER_PRESERVE(5), 6)\", e);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), 6, 7)\",\n         \"var a, b; a = (bar(), JSCOMPILER_PRESERVE(6), 7)\", e);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), bar(), 7, 8)\",\n         \"var a, b; a = (bar(), bar(), JSCOMPILER_PRESERVE(7), 8)\", e);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (b = 7, 6)\", ok);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(x(), 2));\", ok);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(2, 3));\",\n         \"function x(){}\\nfunction f(a, b){}\\n\" +\n         \"f(1,(JSCOMPILER_PRESERVE(2), 3));\", e);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testUselessCode$catena_10() {\n    try{ test(\"function f(x) { if(x) return; }\", ok);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f(x) { if(x); }\", \"function f(x) { if(x); }\", e);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"if(x) x = y;\", ok);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if(x) x == bar();\", \"if(x) JSCOMPILER_PRESERVE(x == bar());\", e);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"x = 3;\", ok);                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"x == 3;\", \"JSCOMPILER_PRESERVE(x == 3);\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var x = 'test'\", ok);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var x = 'test'\\n'str'\",\n         \"var x = 'test'\\nJSCOMPILER_PRESERVE('str')\", e);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"\", ok);                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"foo();;;;bar();;;;\", ok);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    test(\"var a, b; a = 5, b = 6\", ok);                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\"var a, b; a = 5, b == 6\",\n         \"var a, b; a = 5, JSCOMPILER_PRESERVE(b == 6)\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (5, 6)\",\n         \"var a, b; a = (JSCOMPILER_PRESERVE(5), 6)\", e);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), 6, 7)\",\n         \"var a, b; a = (bar(), JSCOMPILER_PRESERVE(6), 7)\", e);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), bar(), 7, 8)\",\n         \"var a, b; a = (bar(), bar(), JSCOMPILER_PRESERVE(7), 8)\", e);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (b = 7, 6)\", ok);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(x(), 2));\", ok);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(2, 3));\",\n         \"function x(){}\\nfunction f(a, b){}\\n\" +\n         \"f(1,(JSCOMPILER_PRESERVE(2), 3));\", e);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testUselessCode$catena_11() {\n    try{ test(\"function f(x) { if(x) return; }\", ok);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f(x) { if(x); }\", \"function f(x) { if(x); }\", e);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"if(x) x = y;\", ok);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if(x) x == bar();\", \"if(x) JSCOMPILER_PRESERVE(x == bar());\", e);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"x = 3;\", ok);                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"x == 3;\", \"JSCOMPILER_PRESERVE(x == 3);\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var x = 'test'\", ok);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var x = 'test'\\n'str'\",\n         \"var x = 'test'\\nJSCOMPILER_PRESERVE('str')\", e);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"\", ok);                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"foo();;;;bar();;;;\", ok);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var a, b; a = 5, b = 6\", ok);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    test(\"var a, b; a = 5, b == 6\",\n         \"var a, b; a = 5, JSCOMPILER_PRESERVE(b == 6)\", e);                                                /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\"var a, b; a = (5, 6)\",\n         \"var a, b; a = (JSCOMPILER_PRESERVE(5), 6)\", e);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), 6, 7)\",\n         \"var a, b; a = (bar(), JSCOMPILER_PRESERVE(6), 7)\", e);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), bar(), 7, 8)\",\n         \"var a, b; a = (bar(), bar(), JSCOMPILER_PRESERVE(7), 8)\", e);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (b = 7, 6)\", ok);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(x(), 2));\", ok);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(2, 3));\",\n         \"function x(){}\\nfunction f(a, b){}\\n\" +\n         \"f(1,(JSCOMPILER_PRESERVE(2), 3));\", e);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testUselessCode$catena_12() {\n    try{ test(\"function f(x) { if(x) return; }\", ok);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f(x) { if(x); }\", \"function f(x) { if(x); }\", e);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"if(x) x = y;\", ok);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if(x) x == bar();\", \"if(x) JSCOMPILER_PRESERVE(x == bar());\", e);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"x = 3;\", ok);                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"x == 3;\", \"JSCOMPILER_PRESERVE(x == 3);\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var x = 'test'\", ok);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var x = 'test'\\n'str'\",\n         \"var x = 'test'\\nJSCOMPILER_PRESERVE('str')\", e);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"\", ok);                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"foo();;;;bar();;;;\", ok);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var a, b; a = 5, b = 6\", ok);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = 5, b == 6\",\n         \"var a, b; a = 5, JSCOMPILER_PRESERVE(b == 6)\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    test(\"var a, b; a = (5, 6)\",\n         \"var a, b; a = (JSCOMPILER_PRESERVE(5), 6)\", e);                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\"var a, b; a = (bar(), 6, 7)\",\n         \"var a, b; a = (bar(), JSCOMPILER_PRESERVE(6), 7)\", e);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), bar(), 7, 8)\",\n         \"var a, b; a = (bar(), bar(), JSCOMPILER_PRESERVE(7), 8)\", e);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (b = 7, 6)\", ok);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(x(), 2));\", ok);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(2, 3));\",\n         \"function x(){}\\nfunction f(a, b){}\\n\" +\n         \"f(1,(JSCOMPILER_PRESERVE(2), 3));\", e);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testUselessCode$catena_13() {\n    try{ test(\"function f(x) { if(x) return; }\", ok);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f(x) { if(x); }\", \"function f(x) { if(x); }\", e);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"if(x) x = y;\", ok);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if(x) x == bar();\", \"if(x) JSCOMPILER_PRESERVE(x == bar());\", e);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"x = 3;\", ok);                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"x == 3;\", \"JSCOMPILER_PRESERVE(x == 3);\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var x = 'test'\", ok);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var x = 'test'\\n'str'\",\n         \"var x = 'test'\\nJSCOMPILER_PRESERVE('str')\", e);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"\", ok);                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"foo();;;;bar();;;;\", ok);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var a, b; a = 5, b = 6\", ok);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = 5, b == 6\",\n         \"var a, b; a = 5, JSCOMPILER_PRESERVE(b == 6)\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (5, 6)\",\n         \"var a, b; a = (JSCOMPILER_PRESERVE(5), 6)\", e);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    test(\"var a, b; a = (bar(), 6, 7)\",\n         \"var a, b; a = (bar(), JSCOMPILER_PRESERVE(6), 7)\", e);                                            /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\"var a, b; a = (bar(), bar(), 7, 8)\",\n         \"var a, b; a = (bar(), bar(), JSCOMPILER_PRESERVE(7), 8)\", e);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (b = 7, 6)\", ok);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(x(), 2));\", ok);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(2, 3));\",\n         \"function x(){}\\nfunction f(a, b){}\\n\" +\n         \"f(1,(JSCOMPILER_PRESERVE(2), 3));\", e);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testUselessCode$catena_14() {\n    try{ test(\"function f(x) { if(x) return; }\", ok);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f(x) { if(x); }\", \"function f(x) { if(x); }\", e);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"if(x) x = y;\", ok);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if(x) x == bar();\", \"if(x) JSCOMPILER_PRESERVE(x == bar());\", e);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"x = 3;\", ok);                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"x == 3;\", \"JSCOMPILER_PRESERVE(x == 3);\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var x = 'test'\", ok);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var x = 'test'\\n'str'\",\n         \"var x = 'test'\\nJSCOMPILER_PRESERVE('str')\", e);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"\", ok);                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"foo();;;;bar();;;;\", ok);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var a, b; a = 5, b = 6\", ok);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = 5, b == 6\",\n         \"var a, b; a = 5, JSCOMPILER_PRESERVE(b == 6)\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (5, 6)\",\n         \"var a, b; a = (JSCOMPILER_PRESERVE(5), 6)\", e);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), 6, 7)\",\n         \"var a, b; a = (bar(), JSCOMPILER_PRESERVE(6), 7)\", e);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    test(\"var a, b; a = (bar(), bar(), 7, 8)\",\n         \"var a, b; a = (bar(), bar(), JSCOMPILER_PRESERVE(7), 8)\", e);                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\"var a, b; a = (b = 7, 6)\", ok);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(x(), 2));\", ok);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(2, 3));\",\n         \"function x(){}\\nfunction f(a, b){}\\n\" +\n         \"f(1,(JSCOMPILER_PRESERVE(2), 3));\", e);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testUselessCode$catena_15() {\n    try{ test(\"function f(x) { if(x) return; }\", ok);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f(x) { if(x); }\", \"function f(x) { if(x); }\", e);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"if(x) x = y;\", ok);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if(x) x == bar();\", \"if(x) JSCOMPILER_PRESERVE(x == bar());\", e);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"x = 3;\", ok);                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"x == 3;\", \"JSCOMPILER_PRESERVE(x == 3);\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var x = 'test'\", ok);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var x = 'test'\\n'str'\",\n         \"var x = 'test'\\nJSCOMPILER_PRESERVE('str')\", e);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"\", ok);                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"foo();;;;bar();;;;\", ok);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var a, b; a = 5, b = 6\", ok);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = 5, b == 6\",\n         \"var a, b; a = 5, JSCOMPILER_PRESERVE(b == 6)\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (5, 6)\",\n         \"var a, b; a = (JSCOMPILER_PRESERVE(5), 6)\", e);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), 6, 7)\",\n         \"var a, b; a = (bar(), JSCOMPILER_PRESERVE(6), 7)\", e);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), bar(), 7, 8)\",\n         \"var a, b; a = (bar(), bar(), JSCOMPILER_PRESERVE(7), 8)\", e);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    test(\"var a, b; a = (b = 7, 6)\", ok);                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(x(), 2));\", ok);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(2, 3));\",\n         \"function x(){}\\nfunction f(a, b){}\\n\" +\n         \"f(1,(JSCOMPILER_PRESERVE(2), 3));\", e);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testUselessCode$catena_16() {\n    try{ test(\"function f(x) { if(x) return; }\", ok);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f(x) { if(x); }\", \"function f(x) { if(x); }\", e);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"if(x) x = y;\", ok);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if(x) x == bar();\", \"if(x) JSCOMPILER_PRESERVE(x == bar());\", e);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"x = 3;\", ok);                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"x == 3;\", \"JSCOMPILER_PRESERVE(x == 3);\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var x = 'test'\", ok);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var x = 'test'\\n'str'\",\n         \"var x = 'test'\\nJSCOMPILER_PRESERVE('str')\", e);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"\", ok);                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"foo();;;;bar();;;;\", ok);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var a, b; a = 5, b = 6\", ok);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = 5, b == 6\",\n         \"var a, b; a = 5, JSCOMPILER_PRESERVE(b == 6)\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (5, 6)\",\n         \"var a, b; a = (JSCOMPILER_PRESERVE(5), 6)\", e);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), 6, 7)\",\n         \"var a, b; a = (bar(), JSCOMPILER_PRESERVE(6), 7)\", e);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), bar(), 7, 8)\",\n         \"var a, b; a = (bar(), bar(), JSCOMPILER_PRESERVE(7), 8)\", e);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (b = 7, 6)\", ok);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(x(), 2));\", ok);                                         /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(2, 3));\",\n         \"function x(){}\\nfunction f(a, b){}\\n\" +\n         \"f(1,(JSCOMPILER_PRESERVE(2), 3));\", e);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testUselessCode$catena_17() {\n    try{ test(\"function f(x) { if(x) return; }\", ok);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f(x) { if(x); }\", \"function f(x) { if(x); }\", e);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"if(x) x = y;\", ok);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if(x) x == bar();\", \"if(x) JSCOMPILER_PRESERVE(x == bar());\", e);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"x = 3;\", ok);                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"x == 3;\", \"JSCOMPILER_PRESERVE(x == 3);\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var x = 'test'\", ok);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var x = 'test'\\n'str'\",\n         \"var x = 'test'\\nJSCOMPILER_PRESERVE('str')\", e);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"\", ok);                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"foo();;;;bar();;;;\", ok);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var a, b; a = 5, b = 6\", ok);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = 5, b == 6\",\n         \"var a, b; a = 5, JSCOMPILER_PRESERVE(b == 6)\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (5, 6)\",\n         \"var a, b; a = (JSCOMPILER_PRESERVE(5), 6)\", e);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), 6, 7)\",\n         \"var a, b; a = (bar(), JSCOMPILER_PRESERVE(6), 7)\", e);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), bar(), 7, 8)\",\n         \"var a, b; a = (bar(), bar(), JSCOMPILER_PRESERVE(7), 8)\", e);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (b = 7, 6)\", ok);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(x(), 2));\", ok);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(2, 3));\",\n         \"function x(){}\\nfunction f(a, b){}\\n\" +\n         \"f(1,(JSCOMPILER_PRESERVE(2), 3));\", e);                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            ],
            "func": {
                "0": "  public void testUselessCode$catena_0() {\n    test(\"function f(x) { if(x) return; }\", ok);                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\"function f(x) { if(x); }\", \"function f(x) { if(x); }\", e);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"if(x) x = y;\", ok);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if(x) x == bar();\", \"if(x) JSCOMPILER_PRESERVE(x == bar());\", e);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"x = 3;\", ok);                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"x == 3;\", \"JSCOMPILER_PRESERVE(x == 3);\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var x = 'test'\", ok);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var x = 'test'\\n'str'\",\n         \"var x = 'test'\\nJSCOMPILER_PRESERVE('str')\", e);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"\", ok);                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"foo();;;;bar();;;;\", ok);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var a, b; a = 5, b = 6\", ok);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = 5, b == 6\",\n         \"var a, b; a = 5, JSCOMPILER_PRESERVE(b == 6)\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (5, 6)\",\n         \"var a, b; a = (JSCOMPILER_PRESERVE(5), 6)\", e);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), 6, 7)\",\n         \"var a, b; a = (bar(), JSCOMPILER_PRESERVE(6), 7)\", e);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), bar(), 7, 8)\",\n         \"var a, b; a = (bar(), bar(), JSCOMPILER_PRESERVE(7), 8)\", e);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (b = 7, 6)\", ok);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(x(), 2));\", ok);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(2, 3));\",\n         \"function x(){}\\nfunction f(a, b){}\\n\" +\n         \"f(1,(JSCOMPILER_PRESERVE(2), 3));\", e);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "1": "  public void testUselessCode$catena_1() {\n    try{ test(\"function f(x) { if(x) return; }\", ok);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    test(\"function f(x) { if(x); }\", \"function f(x) { if(x); }\", e);                                        /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ test(\"if(x) x = y;\", ok);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if(x) x == bar();\", \"if(x) JSCOMPILER_PRESERVE(x == bar());\", e);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"x = 3;\", ok);                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"x == 3;\", \"JSCOMPILER_PRESERVE(x == 3);\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var x = 'test'\", ok);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var x = 'test'\\n'str'\",\n         \"var x = 'test'\\nJSCOMPILER_PRESERVE('str')\", e);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"\", ok);                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"foo();;;;bar();;;;\", ok);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var a, b; a = 5, b = 6\", ok);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = 5, b == 6\",\n         \"var a, b; a = 5, JSCOMPILER_PRESERVE(b == 6)\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (5, 6)\",\n         \"var a, b; a = (JSCOMPILER_PRESERVE(5), 6)\", e);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), 6, 7)\",\n         \"var a, b; a = (bar(), JSCOMPILER_PRESERVE(6), 7)\", e);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), bar(), 7, 8)\",\n         \"var a, b; a = (bar(), bar(), JSCOMPILER_PRESERVE(7), 8)\", e);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (b = 7, 6)\", ok);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(x(), 2));\", ok);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(2, 3));\",\n         \"function x(){}\\nfunction f(a, b){}\\n\" +\n         \"f(1,(JSCOMPILER_PRESERVE(2), 3));\", e);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "2": "  public void testUselessCode$catena_2() {\n    try{ test(\"function f(x) { if(x) return; }\", ok);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f(x) { if(x); }\", \"function f(x) { if(x); }\", e);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    test(\"if(x) x = y;\", ok);                                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\"if(x) x == bar();\", \"if(x) JSCOMPILER_PRESERVE(x == bar());\", e);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"x = 3;\", ok);                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"x == 3;\", \"JSCOMPILER_PRESERVE(x == 3);\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var x = 'test'\", ok);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var x = 'test'\\n'str'\",\n         \"var x = 'test'\\nJSCOMPILER_PRESERVE('str')\", e);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"\", ok);                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"foo();;;;bar();;;;\", ok);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var a, b; a = 5, b = 6\", ok);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = 5, b == 6\",\n         \"var a, b; a = 5, JSCOMPILER_PRESERVE(b == 6)\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (5, 6)\",\n         \"var a, b; a = (JSCOMPILER_PRESERVE(5), 6)\", e);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), 6, 7)\",\n         \"var a, b; a = (bar(), JSCOMPILER_PRESERVE(6), 7)\", e);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), bar(), 7, 8)\",\n         \"var a, b; a = (bar(), bar(), JSCOMPILER_PRESERVE(7), 8)\", e);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (b = 7, 6)\", ok);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(x(), 2));\", ok);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(2, 3));\",\n         \"function x(){}\\nfunction f(a, b){}\\n\" +\n         \"f(1,(JSCOMPILER_PRESERVE(2), 3));\", e);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "3": "  public void testUselessCode$catena_3() {\n    try{ test(\"function f(x) { if(x) return; }\", ok);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f(x) { if(x); }\", \"function f(x) { if(x); }\", e);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"if(x) x = y;\", ok);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    test(\"if(x) x == bar();\", \"if(x) JSCOMPILER_PRESERVE(x == bar());\", e);                                 /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ test(\"x = 3;\", ok);                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"x == 3;\", \"JSCOMPILER_PRESERVE(x == 3);\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var x = 'test'\", ok);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var x = 'test'\\n'str'\",\n         \"var x = 'test'\\nJSCOMPILER_PRESERVE('str')\", e);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"\", ok);                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"foo();;;;bar();;;;\", ok);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var a, b; a = 5, b = 6\", ok);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = 5, b == 6\",\n         \"var a, b; a = 5, JSCOMPILER_PRESERVE(b == 6)\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (5, 6)\",\n         \"var a, b; a = (JSCOMPILER_PRESERVE(5), 6)\", e);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), 6, 7)\",\n         \"var a, b; a = (bar(), JSCOMPILER_PRESERVE(6), 7)\", e);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), bar(), 7, 8)\",\n         \"var a, b; a = (bar(), bar(), JSCOMPILER_PRESERVE(7), 8)\", e);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (b = 7, 6)\", ok);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(x(), 2));\", ok);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(2, 3));\",\n         \"function x(){}\\nfunction f(a, b){}\\n\" +\n         \"f(1,(JSCOMPILER_PRESERVE(2), 3));\", e);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "4": "  public void testUselessCode$catena_4() {\n    try{ test(\"function f(x) { if(x) return; }\", ok);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f(x) { if(x); }\", \"function f(x) { if(x); }\", e);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"if(x) x = y;\", ok);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if(x) x == bar();\", \"if(x) JSCOMPILER_PRESERVE(x == bar());\", e);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    test(\"x = 3;\", ok);                                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\"x == 3;\", \"JSCOMPILER_PRESERVE(x == 3);\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var x = 'test'\", ok);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var x = 'test'\\n'str'\",\n         \"var x = 'test'\\nJSCOMPILER_PRESERVE('str')\", e);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"\", ok);                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"foo();;;;bar();;;;\", ok);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var a, b; a = 5, b = 6\", ok);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = 5, b == 6\",\n         \"var a, b; a = 5, JSCOMPILER_PRESERVE(b == 6)\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (5, 6)\",\n         \"var a, b; a = (JSCOMPILER_PRESERVE(5), 6)\", e);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), 6, 7)\",\n         \"var a, b; a = (bar(), JSCOMPILER_PRESERVE(6), 7)\", e);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), bar(), 7, 8)\",\n         \"var a, b; a = (bar(), bar(), JSCOMPILER_PRESERVE(7), 8)\", e);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (b = 7, 6)\", ok);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(x(), 2));\", ok);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(2, 3));\",\n         \"function x(){}\\nfunction f(a, b){}\\n\" +\n         \"f(1,(JSCOMPILER_PRESERVE(2), 3));\", e);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "5": "  public void testUselessCode$catena_5() {\n    try{ test(\"function f(x) { if(x) return; }\", ok);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f(x) { if(x); }\", \"function f(x) { if(x); }\", e);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"if(x) x = y;\", ok);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if(x) x == bar();\", \"if(x) JSCOMPILER_PRESERVE(x == bar());\", e);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"x = 3;\", ok);                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    test(\"x == 3;\", \"JSCOMPILER_PRESERVE(x == 3);\", e);                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ test(\"var x = 'test'\", ok);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var x = 'test'\\n'str'\",\n         \"var x = 'test'\\nJSCOMPILER_PRESERVE('str')\", e);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"\", ok);                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"foo();;;;bar();;;;\", ok);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var a, b; a = 5, b = 6\", ok);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = 5, b == 6\",\n         \"var a, b; a = 5, JSCOMPILER_PRESERVE(b == 6)\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (5, 6)\",\n         \"var a, b; a = (JSCOMPILER_PRESERVE(5), 6)\", e);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), 6, 7)\",\n         \"var a, b; a = (bar(), JSCOMPILER_PRESERVE(6), 7)\", e);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), bar(), 7, 8)\",\n         \"var a, b; a = (bar(), bar(), JSCOMPILER_PRESERVE(7), 8)\", e);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (b = 7, 6)\", ok);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(x(), 2));\", ok);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(2, 3));\",\n         \"function x(){}\\nfunction f(a, b){}\\n\" +\n         \"f(1,(JSCOMPILER_PRESERVE(2), 3));\", e);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "6": "  public void testUselessCode$catena_6() {\n    try{ test(\"function f(x) { if(x) return; }\", ok);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f(x) { if(x); }\", \"function f(x) { if(x); }\", e);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"if(x) x = y;\", ok);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if(x) x == bar();\", \"if(x) JSCOMPILER_PRESERVE(x == bar());\", e);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"x = 3;\", ok);                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"x == 3;\", \"JSCOMPILER_PRESERVE(x == 3);\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    test(\"var x = 'test'\", ok);                                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\"var x = 'test'\\n'str'\",\n         \"var x = 'test'\\nJSCOMPILER_PRESERVE('str')\", e);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"\", ok);                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"foo();;;;bar();;;;\", ok);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var a, b; a = 5, b = 6\", ok);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = 5, b == 6\",\n         \"var a, b; a = 5, JSCOMPILER_PRESERVE(b == 6)\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (5, 6)\",\n         \"var a, b; a = (JSCOMPILER_PRESERVE(5), 6)\", e);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), 6, 7)\",\n         \"var a, b; a = (bar(), JSCOMPILER_PRESERVE(6), 7)\", e);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), bar(), 7, 8)\",\n         \"var a, b; a = (bar(), bar(), JSCOMPILER_PRESERVE(7), 8)\", e);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (b = 7, 6)\", ok);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(x(), 2));\", ok);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(2, 3));\",\n         \"function x(){}\\nfunction f(a, b){}\\n\" +\n         \"f(1,(JSCOMPILER_PRESERVE(2), 3));\", e);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "7": "  public void testUselessCode$catena_7() {\n    try{ test(\"function f(x) { if(x) return; }\", ok);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f(x) { if(x); }\", \"function f(x) { if(x); }\", e);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"if(x) x = y;\", ok);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if(x) x == bar();\", \"if(x) JSCOMPILER_PRESERVE(x == bar());\", e);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"x = 3;\", ok);                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"x == 3;\", \"JSCOMPILER_PRESERVE(x == 3);\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var x = 'test'\", ok);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    test(\"var x = 'test'\\n'str'\",\n         \"var x = 'test'\\nJSCOMPILER_PRESERVE('str')\", e);                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ test(\"\", ok);                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"foo();;;;bar();;;;\", ok);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var a, b; a = 5, b = 6\", ok);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = 5, b == 6\",\n         \"var a, b; a = 5, JSCOMPILER_PRESERVE(b == 6)\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (5, 6)\",\n         \"var a, b; a = (JSCOMPILER_PRESERVE(5), 6)\", e);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), 6, 7)\",\n         \"var a, b; a = (bar(), JSCOMPILER_PRESERVE(6), 7)\", e);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), bar(), 7, 8)\",\n         \"var a, b; a = (bar(), bar(), JSCOMPILER_PRESERVE(7), 8)\", e);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (b = 7, 6)\", ok);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(x(), 2));\", ok);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(2, 3));\",\n         \"function x(){}\\nfunction f(a, b){}\\n\" +\n         \"f(1,(JSCOMPILER_PRESERVE(2), 3));\", e);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "8": "  public void testUselessCode$catena_8() {\n    try{ test(\"function f(x) { if(x) return; }\", ok);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f(x) { if(x); }\", \"function f(x) { if(x); }\", e);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"if(x) x = y;\", ok);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if(x) x == bar();\", \"if(x) JSCOMPILER_PRESERVE(x == bar());\", e);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"x = 3;\", ok);                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"x == 3;\", \"JSCOMPILER_PRESERVE(x == 3);\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var x = 'test'\", ok);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var x = 'test'\\n'str'\",\n         \"var x = 'test'\\nJSCOMPILER_PRESERVE('str')\", e);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    test(\"\", ok);                                                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\"foo();;;;bar();;;;\", ok);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var a, b; a = 5, b = 6\", ok);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = 5, b == 6\",\n         \"var a, b; a = 5, JSCOMPILER_PRESERVE(b == 6)\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (5, 6)\",\n         \"var a, b; a = (JSCOMPILER_PRESERVE(5), 6)\", e);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), 6, 7)\",\n         \"var a, b; a = (bar(), JSCOMPILER_PRESERVE(6), 7)\", e);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), bar(), 7, 8)\",\n         \"var a, b; a = (bar(), bar(), JSCOMPILER_PRESERVE(7), 8)\", e);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (b = 7, 6)\", ok);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(x(), 2));\", ok);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(2, 3));\",\n         \"function x(){}\\nfunction f(a, b){}\\n\" +\n         \"f(1,(JSCOMPILER_PRESERVE(2), 3));\", e);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "9": "  public void testUselessCode$catena_9() {\n    try{ test(\"function f(x) { if(x) return; }\", ok);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f(x) { if(x); }\", \"function f(x) { if(x); }\", e);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"if(x) x = y;\", ok);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if(x) x == bar();\", \"if(x) JSCOMPILER_PRESERVE(x == bar());\", e);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"x = 3;\", ok);                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"x == 3;\", \"JSCOMPILER_PRESERVE(x == 3);\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var x = 'test'\", ok);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var x = 'test'\\n'str'\",\n         \"var x = 'test'\\nJSCOMPILER_PRESERVE('str')\", e);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"\", ok);                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    test(\"foo();;;;bar();;;;\", ok);                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ test(\"var a, b; a = 5, b = 6\", ok);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = 5, b == 6\",\n         \"var a, b; a = 5, JSCOMPILER_PRESERVE(b == 6)\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (5, 6)\",\n         \"var a, b; a = (JSCOMPILER_PRESERVE(5), 6)\", e);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), 6, 7)\",\n         \"var a, b; a = (bar(), JSCOMPILER_PRESERVE(6), 7)\", e);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), bar(), 7, 8)\",\n         \"var a, b; a = (bar(), bar(), JSCOMPILER_PRESERVE(7), 8)\", e);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (b = 7, 6)\", ok);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(x(), 2));\", ok);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(2, 3));\",\n         \"function x(){}\\nfunction f(a, b){}\\n\" +\n         \"f(1,(JSCOMPILER_PRESERVE(2), 3));\", e);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "10": "  public void testUselessCode$catena_10() {\n    try{ test(\"function f(x) { if(x) return; }\", ok);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f(x) { if(x); }\", \"function f(x) { if(x); }\", e);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"if(x) x = y;\", ok);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if(x) x == bar();\", \"if(x) JSCOMPILER_PRESERVE(x == bar());\", e);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"x = 3;\", ok);                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"x == 3;\", \"JSCOMPILER_PRESERVE(x == 3);\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var x = 'test'\", ok);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var x = 'test'\\n'str'\",\n         \"var x = 'test'\\nJSCOMPILER_PRESERVE('str')\", e);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"\", ok);                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"foo();;;;bar();;;;\", ok);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    test(\"var a, b; a = 5, b = 6\", ok);                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\"var a, b; a = 5, b == 6\",\n         \"var a, b; a = 5, JSCOMPILER_PRESERVE(b == 6)\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (5, 6)\",\n         \"var a, b; a = (JSCOMPILER_PRESERVE(5), 6)\", e);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), 6, 7)\",\n         \"var a, b; a = (bar(), JSCOMPILER_PRESERVE(6), 7)\", e);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), bar(), 7, 8)\",\n         \"var a, b; a = (bar(), bar(), JSCOMPILER_PRESERVE(7), 8)\", e);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (b = 7, 6)\", ok);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(x(), 2));\", ok);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(2, 3));\",\n         \"function x(){}\\nfunction f(a, b){}\\n\" +\n         \"f(1,(JSCOMPILER_PRESERVE(2), 3));\", e);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "11": "  public void testUselessCode$catena_11() {\n    try{ test(\"function f(x) { if(x) return; }\", ok);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f(x) { if(x); }\", \"function f(x) { if(x); }\", e);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"if(x) x = y;\", ok);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if(x) x == bar();\", \"if(x) JSCOMPILER_PRESERVE(x == bar());\", e);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"x = 3;\", ok);                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"x == 3;\", \"JSCOMPILER_PRESERVE(x == 3);\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var x = 'test'\", ok);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var x = 'test'\\n'str'\",\n         \"var x = 'test'\\nJSCOMPILER_PRESERVE('str')\", e);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"\", ok);                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"foo();;;;bar();;;;\", ok);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var a, b; a = 5, b = 6\", ok);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    test(\"var a, b; a = 5, b == 6\",\n         \"var a, b; a = 5, JSCOMPILER_PRESERVE(b == 6)\", e);                                                /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\"var a, b; a = (5, 6)\",\n         \"var a, b; a = (JSCOMPILER_PRESERVE(5), 6)\", e);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), 6, 7)\",\n         \"var a, b; a = (bar(), JSCOMPILER_PRESERVE(6), 7)\", e);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), bar(), 7, 8)\",\n         \"var a, b; a = (bar(), bar(), JSCOMPILER_PRESERVE(7), 8)\", e);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (b = 7, 6)\", ok);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(x(), 2));\", ok);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(2, 3));\",\n         \"function x(){}\\nfunction f(a, b){}\\n\" +\n         \"f(1,(JSCOMPILER_PRESERVE(2), 3));\", e);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "12": "  public void testUselessCode$catena_12() {\n    try{ test(\"function f(x) { if(x) return; }\", ok);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f(x) { if(x); }\", \"function f(x) { if(x); }\", e);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"if(x) x = y;\", ok);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if(x) x == bar();\", \"if(x) JSCOMPILER_PRESERVE(x == bar());\", e);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"x = 3;\", ok);                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"x == 3;\", \"JSCOMPILER_PRESERVE(x == 3);\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var x = 'test'\", ok);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var x = 'test'\\n'str'\",\n         \"var x = 'test'\\nJSCOMPILER_PRESERVE('str')\", e);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"\", ok);                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"foo();;;;bar();;;;\", ok);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var a, b; a = 5, b = 6\", ok);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = 5, b == 6\",\n         \"var a, b; a = 5, JSCOMPILER_PRESERVE(b == 6)\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    test(\"var a, b; a = (5, 6)\",\n         \"var a, b; a = (JSCOMPILER_PRESERVE(5), 6)\", e);                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\"var a, b; a = (bar(), 6, 7)\",\n         \"var a, b; a = (bar(), JSCOMPILER_PRESERVE(6), 7)\", e);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), bar(), 7, 8)\",\n         \"var a, b; a = (bar(), bar(), JSCOMPILER_PRESERVE(7), 8)\", e);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (b = 7, 6)\", ok);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(x(), 2));\", ok);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(2, 3));\",\n         \"function x(){}\\nfunction f(a, b){}\\n\" +\n         \"f(1,(JSCOMPILER_PRESERVE(2), 3));\", e);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "13": "  public void testUselessCode$catena_13() {\n    try{ test(\"function f(x) { if(x) return; }\", ok);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f(x) { if(x); }\", \"function f(x) { if(x); }\", e);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"if(x) x = y;\", ok);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if(x) x == bar();\", \"if(x) JSCOMPILER_PRESERVE(x == bar());\", e);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"x = 3;\", ok);                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"x == 3;\", \"JSCOMPILER_PRESERVE(x == 3);\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var x = 'test'\", ok);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var x = 'test'\\n'str'\",\n         \"var x = 'test'\\nJSCOMPILER_PRESERVE('str')\", e);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"\", ok);                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"foo();;;;bar();;;;\", ok);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var a, b; a = 5, b = 6\", ok);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = 5, b == 6\",\n         \"var a, b; a = 5, JSCOMPILER_PRESERVE(b == 6)\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (5, 6)\",\n         \"var a, b; a = (JSCOMPILER_PRESERVE(5), 6)\", e);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    test(\"var a, b; a = (bar(), 6, 7)\",\n         \"var a, b; a = (bar(), JSCOMPILER_PRESERVE(6), 7)\", e);                                            /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\"var a, b; a = (bar(), bar(), 7, 8)\",\n         \"var a, b; a = (bar(), bar(), JSCOMPILER_PRESERVE(7), 8)\", e);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (b = 7, 6)\", ok);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(x(), 2));\", ok);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(2, 3));\",\n         \"function x(){}\\nfunction f(a, b){}\\n\" +\n         \"f(1,(JSCOMPILER_PRESERVE(2), 3));\", e);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "14": "  public void testUselessCode$catena_14() {\n    try{ test(\"function f(x) { if(x) return; }\", ok);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f(x) { if(x); }\", \"function f(x) { if(x); }\", e);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"if(x) x = y;\", ok);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if(x) x == bar();\", \"if(x) JSCOMPILER_PRESERVE(x == bar());\", e);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"x = 3;\", ok);                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"x == 3;\", \"JSCOMPILER_PRESERVE(x == 3);\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var x = 'test'\", ok);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var x = 'test'\\n'str'\",\n         \"var x = 'test'\\nJSCOMPILER_PRESERVE('str')\", e);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"\", ok);                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"foo();;;;bar();;;;\", ok);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var a, b; a = 5, b = 6\", ok);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = 5, b == 6\",\n         \"var a, b; a = 5, JSCOMPILER_PRESERVE(b == 6)\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (5, 6)\",\n         \"var a, b; a = (JSCOMPILER_PRESERVE(5), 6)\", e);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), 6, 7)\",\n         \"var a, b; a = (bar(), JSCOMPILER_PRESERVE(6), 7)\", e);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    test(\"var a, b; a = (bar(), bar(), 7, 8)\",\n         \"var a, b; a = (bar(), bar(), JSCOMPILER_PRESERVE(7), 8)\", e);                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\"var a, b; a = (b = 7, 6)\", ok);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(x(), 2));\", ok);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(2, 3));\",\n         \"function x(){}\\nfunction f(a, b){}\\n\" +\n         \"f(1,(JSCOMPILER_PRESERVE(2), 3));\", e);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "15": "  public void testUselessCode$catena_15() {\n    try{ test(\"function f(x) { if(x) return; }\", ok);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f(x) { if(x); }\", \"function f(x) { if(x); }\", e);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"if(x) x = y;\", ok);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if(x) x == bar();\", \"if(x) JSCOMPILER_PRESERVE(x == bar());\", e);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"x = 3;\", ok);                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"x == 3;\", \"JSCOMPILER_PRESERVE(x == 3);\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var x = 'test'\", ok);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var x = 'test'\\n'str'\",\n         \"var x = 'test'\\nJSCOMPILER_PRESERVE('str')\", e);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"\", ok);                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"foo();;;;bar();;;;\", ok);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var a, b; a = 5, b = 6\", ok);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = 5, b == 6\",\n         \"var a, b; a = 5, JSCOMPILER_PRESERVE(b == 6)\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (5, 6)\",\n         \"var a, b; a = (JSCOMPILER_PRESERVE(5), 6)\", e);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), 6, 7)\",\n         \"var a, b; a = (bar(), JSCOMPILER_PRESERVE(6), 7)\", e);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), bar(), 7, 8)\",\n         \"var a, b; a = (bar(), bar(), JSCOMPILER_PRESERVE(7), 8)\", e);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    test(\"var a, b; a = (b = 7, 6)\", ok);                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(x(), 2));\", ok);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(2, 3));\",\n         \"function x(){}\\nfunction f(a, b){}\\n\" +\n         \"f(1,(JSCOMPILER_PRESERVE(2), 3));\", e);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "16": "  public void testUselessCode$catena_16() {\n    try{ test(\"function f(x) { if(x) return; }\", ok);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f(x) { if(x); }\", \"function f(x) { if(x); }\", e);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"if(x) x = y;\", ok);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if(x) x == bar();\", \"if(x) JSCOMPILER_PRESERVE(x == bar());\", e);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"x = 3;\", ok);                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"x == 3;\", \"JSCOMPILER_PRESERVE(x == 3);\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var x = 'test'\", ok);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var x = 'test'\\n'str'\",\n         \"var x = 'test'\\nJSCOMPILER_PRESERVE('str')\", e);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"\", ok);                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"foo();;;;bar();;;;\", ok);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var a, b; a = 5, b = 6\", ok);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = 5, b == 6\",\n         \"var a, b; a = 5, JSCOMPILER_PRESERVE(b == 6)\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (5, 6)\",\n         \"var a, b; a = (JSCOMPILER_PRESERVE(5), 6)\", e);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), 6, 7)\",\n         \"var a, b; a = (bar(), JSCOMPILER_PRESERVE(6), 7)\", e);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), bar(), 7, 8)\",\n         \"var a, b; a = (bar(), bar(), JSCOMPILER_PRESERVE(7), 8)\", e);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (b = 7, 6)\", ok);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(x(), 2));\", ok);                                         /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(2, 3));\",\n         \"function x(){}\\nfunction f(a, b){}\\n\" +\n         \"f(1,(JSCOMPILER_PRESERVE(2), 3));\", e);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "17": "  public void testUselessCode$catena_17() {\n    try{ test(\"function f(x) { if(x) return; }\", ok);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f(x) { if(x); }\", \"function f(x) { if(x); }\", e);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"if(x) x = y;\", ok);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if(x) x == bar();\", \"if(x) JSCOMPILER_PRESERVE(x == bar());\", e);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"x = 3;\", ok);                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"x == 3;\", \"JSCOMPILER_PRESERVE(x == 3);\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var x = 'test'\", ok);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var x = 'test'\\n'str'\",\n         \"var x = 'test'\\nJSCOMPILER_PRESERVE('str')\", e);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"\", ok);                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"foo();;;;bar();;;;\", ok);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var a, b; a = 5, b = 6\", ok);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = 5, b == 6\",\n         \"var a, b; a = 5, JSCOMPILER_PRESERVE(b == 6)\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (5, 6)\",\n         \"var a, b; a = (JSCOMPILER_PRESERVE(5), 6)\", e);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), 6, 7)\",\n         \"var a, b; a = (bar(), JSCOMPILER_PRESERVE(6), 7)\", e);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), bar(), 7, 8)\",\n         \"var a, b; a = (bar(), bar(), JSCOMPILER_PRESERVE(7), 8)\", e);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (b = 7, 6)\", ok);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(x(), 2));\", ok);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(2, 3));\",\n         \"function x(){}\\nfunction f(a, b){}\\n\" +\n         \"f(1,(JSCOMPILER_PRESERVE(2), 3));\", e);                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            }
        }
    },
    "11": {
        "failing_tests": [
            "com.google.javascript.jscomp.CheckSideEffectsTest::testUselessCode$catena_14",
            "com.google.javascript.jscomp.CheckSideEffectsTest::testUselessCode$catena_13"
        ]
    }
}